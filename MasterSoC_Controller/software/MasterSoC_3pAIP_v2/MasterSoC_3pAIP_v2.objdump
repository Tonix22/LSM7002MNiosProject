
MasterSoC_3pAIP_v2.elf:     file format elf32-littlenios2
MasterSoC_3pAIP_v2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000180

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000299b4 memsz 0x000299b4 flags r-x
    LOAD off    0x0002a9d4 vaddr 0x000299d4 paddr 0x0002a2c0 align 2**12
         filesz 0x000008ec memsz 0x000008ec flags rw-
    LOAD off    0x0002bbac vaddr 0x0002abac paddr 0x0002abac align 2**12
         filesz 0x00000000 memsz 0x00001350 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00028ab8  00000180  00000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000d9c  00028c38  00028c38  00029c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000008ec  000299d4  0002a2c0  0002a9d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00001350  0002abac  0002abac  0002bbac  2**2
                  ALLOC, SMALL_DATA
  6 .mem_program  00000000  0002befc  0002befc  0002b2c0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0002b2c0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000016d8  00000000  00000000  0002b2e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00065554  00000000  00000000  0002c9c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000fa07  00000000  00000000  00091f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001603e  00000000  00000000  000a191b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003d88  00000000  00000000  000b795c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00008f0a  00000000  00000000  000bb6e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000347e2  00000000  00000000  000c45ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000f8dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002838  00000000  00000000  000f8de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00100439  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0010043c  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00100448  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00100449  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0010044a  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00100455  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00100460  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000001a  00000000  00000000  0010046b  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003d  00000000  00000000  00100485  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0006bb40  00000000  00000000  001004c2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000180 l    d  .text	00000000 .text
00028c38 l    d  .rodata	00000000 .rodata
000299d4 l    d  .rwdata	00000000 .rwdata
0002abac l    d  .bss	00000000 .bss
0002befc l    d  .mem_program	00000000 .mem_program
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../MasterSoC_3pAIP_v2_bsp//obj/HAL/src/crt0.o
000001b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 ID00001001_dummy.c
00000000 l    df *ABS*	00000000 ID00004003_masterSOC.c
00000000 l    df *ABS*	00000000 aip.c
000004b4 l     F .text	00000028 aip_aipRead
000004dc l     F .text	00000028 aip_aipWrite
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 spi.c
00000000 l    df *ABS*	00000000 LMS7002M_afe.c
00000000 l    df *ABS*	00000000 LMS7002M_cgen.c
00000000 l    df *ABS*	00000000 LMS7002M_filter_cal.c
00000000 l    df *ABS*	00000000 LMS7002M_gfir.c
00000000 l    df *ABS*	00000000 LMS7002M_impl.c
00003914 l     F .text	00001f1c LMS7002M_regs_set
00005830 l     F .text	00000a08 LMS7002M_regs_init
00028ee0 l     O .rodata	00000258 addrs.3774
00000000 l    df *ABS*	00000000 LMS7002M_ldo.c
00000000 l    df *ABS*	00000000 LMS7002M_lml.c
0000909c l     F .text	00000024 __lms7002m_diq_index
00000000 l    df *ABS*	00000000 LMS7002M_logger.c
0002a27c l     O .rwdata	00000004 _log_level
0002a278 l     O .rwdata	00000004 _log_handler
00000000 l    df *ABS*	00000000 LMS7002M_nco.c
00000000 l    df *ABS*	00000000 LMS7002M_rbb.c
00000000 l    df *ABS*	00000000 LMS7002M_rfe.c
00000000 l    df *ABS*	00000000 LMS7002M_rx_filter_cal.c
0000a608 l     F .text	00000138 setup_rx_cal_tone
0000a740 l     F .text	000001ac rx_cal_loop.isra.0
00000000 l    df *ABS*	00000000 LMS7002M_rxtsp.c
00000000 l    df *ABS*	00000000 LMS7002M_sxx.c
00000000 l    df *ABS*	00000000 LMS7002M_tbb.c
00000000 l    df *ABS*	00000000 LMS7002M_time.c
00000000 l    df *ABS*	00000000 LMS7002M_trf.c
00000000 l    df *ABS*	00000000 LMS7002M_tx_filter_cal.c
0000cab0 l     F .text	000000c8 setup_tx_cal_tone
0000cb78 l     F .text	00000250 tx_cal_loop.isra.0.constprop.1
00000000 l    df *ABS*	00000000 LMS7002M_txtsp.c
00000000 l    df *ABS*	00000000 LMS7002M_vco.c
0000dfd8 l     F .text	00000040 LMS7002M_read_vco_cmp
0000e018 l     F .text	00000154 LMS7002M_tune_vco_sweep
00000000 l    df *ABS*	00000000 LMS7002M_xbuf.c
00000000 l    df *ABS*	00000000 platform.c
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 e_pow.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
00029290 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00010730 l     F .text	00000008 __fp_unlock
00010744 l     F .text	0000019c __sinit.part.1
000108e0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000299d4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
00013210 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sscanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfscanf.c
000292aa l     O .rodata	00000022 basefix.4340
00000000 l    df *ABS*	00000000 vfprintf.c
0002930e l     O .rodata	00000010 zeroes.4404
0001747c l     F .text	000000bc __sbprintf
0002931e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
0002942f l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
00017740 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
0002a220 l     O .rwdata	00000020 lc_ctype_charset
0002a200 l     O .rwdata	00000020 lc_message_charset
0002a240 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 mprec.c
000295cc l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strtod.c
0001a89c l     F .text	00000064 sulp
00029700 l     O .rodata	00000014 fpinan.2773
00029714 l     O .rodata	00000014 fpi.2737
00029728 l     O .rodata	00000028 tinytens
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 vfscanf.c
00029750 l     O .rodata	00000022 basefix.3791
00000000 l    df *ABS*	00000000 vfprintf.c
00029772 l     O .rodata	00000010 zeroes.4389
00029782 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vfprintf.c
00020428 l     F .text	000000fc __sprint_r.part.0
00029792 l     O .rodata	00000010 zeroes.4349
00021a64 l     F .text	000000bc __sbprintf
000297a2 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
00021f5c l     F .text	00000100 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
000298b2 l     O .rodata	00000010 zeroes.4333
000298c2 l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0002a2ac l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
0002abf8 g     O .bss	00000004 alt_instruction_exception_handler
00012bc0 g     F .text	00000018 putchar
0001a3c0 g     F .text	00000074 _mprec_log10
0001a4ac g     F .text	0000008c __any_on
0001909c g     F .text	00000054 _isatty_r
000295d8 g     O .rodata	00000028 __mprec_tinytens
000288a0 g     F .text	0000002c alt_main
0000e52c g     F .text	0000002c mdelay
0000e42c g     F .text	0000003c spi_write_API
00012bd8 g     F .text	000000c0 _puts_r
0002bdfc g     O .bss	00000100 alt_irq
0000bf88 g     F .text	000000c4 LMS7002M_sxx_apply_tune_state
0000ff18 g     F .text	00000014 fabs
000191fc g     F .text	00000060 _lseek_r
0002a2c0 g       *ABS*	00000000 __flash_rwdata_start
00018ff0 g     F .text	000000ac __sflags
00026d1c g     F .text	00000088 .hidden __eqdf2
000244b0 g     F .text	00000658 .hidden __divdi3
0002befc g       *ABS*	00000000 __alt_heap_start
00003450 g     F .text	000000f0 cal_gain_selection
00012b7c g     F .text	0000003c printf
00024148 g     F .text	0000009c _wcrtomb_r
00013620 g     F .text	0000005c __sseek
00010a90 g     F .text	00000010 __sinit
00021b20 g     F .text	00000140 __swbuf_r
000098ac g     F .text	00000128 LMS7002M_set_nco_freq
00019120 g     F .text	0000007c _setlocale_r
000108e8 g     F .text	00000078 __sfmoreglue
00020410 g     F .text	00000018 ungetc
000288d0 g     F .text	00000004 __malloc_unlock
00000640 g     F .text	0000008c aip_enableINT
0001a900 g     F .text	000015e4 _strtod_r
00000894 g     F .text	00000020 start_isr
0000e33c g     F .text	0000004c LMS7002M_xbuf_share_tx
0001cca0 g     F .text	00000100 _sfread_r
00012868 g     F .text	0000015c memmove
00010a78 g     F .text	00000018 _cleanup
00019480 g     F .text	000000a8 _Balloc
0000c04c g     F .text	00000388 LMS7002M_set_lo_freq
00026da4 g     F .text	000000dc .hidden __gtdf2
00028c30 g     F .text	00000008 altera_nios2_gen2_irq_init
00010374 g     F .text	00000010 __errno
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000e6c0 g     F .text	00000058 find_first_bit
0000a1cc g     F .text	00000358 LMS7002M_rfe_set_loopback_lna
000115a0 g     F .text	0000005c _fstat_r
0002abb4 g     O .bss	00000004 errno
0001359c g     F .text	00000008 __seofread
00022da8 g     F .text	000013a0 ___svfiprintf_internal_r
0002abe8 g     O .bss	00000004 alt_argv
00032278 g       *ABS*	00000000 _gp
000008b4 g     F .text	00000050 int_setup
000005f0 g     F .text	00000028 aip_getID
00012bb8 g     F .text	00000008 _putchar_r
000062b8 g     F .text	0000001c LMS7002M_spi_write
00012720 g     F .text	00000148 memcpy
000228ac g     F .text	0000025c __hexnan
00000bb0 g     F .text	000000a8 spi_write_then_read
00000348 g     F .text	0000001c ID00001001_getStatus
00010738 g     F .text	0000000c _cleanup_r
0002815c g     F .text	000000dc .hidden __floatsidf
00026e80 g     F .text	000000f4 .hidden __ltdf2
00012c98 g     F .text	00000014 puts
00028bbc g     F .text	00000074 alt_exception_cause_generated_bad_addr
00019308 g     F .text	000000d8 mbrtowc
00000c58 g     F .text	00000114 LMS7002M_afe_enable
0000ff48 g     F .text	00000074 __fpclassifyd
0001a31c g     F .text	000000a4 __ratio
00021a48 g     F .text	0000001c __vfiprintf_internal
0000959c g     F .text	0000004c LMS7002M_invert_fclk
0000045c g     F .text	0000001c ID00004003_getStatus
0000ba64 g     F .text	00000068 LMS7002M_rxtsp_set_dc_correction
00028b24 g     F .text	0000005c altera_avalon_jtag_uart_read
0000d0ac g     F .text	000008d8 LMS7002M_tbb_set_filter_bw
0000031c g     F .text	0000002c ID00001001_readData
00011e08 g     F .text	00000014 malloc
00012b4c g     F .text	00000030 _printf_r
000257c0 g     F .text	00000064 .hidden __udivsi3
00028774 g     F .text	0000000c isatty
000190f0 g     F .text	00000030 iswspace
0000e3d4 g     F .text	00000008 spi_init
00029628 g     O .rodata	000000c8 __mprec_tens
0001919c g     F .text	0000000c __locale_charset
000259d8 g     F .text	000000c8 .hidden __lesf2
0002abd8 g     O .bss	00000008 alt_timezone
0002443c g     F .text	00000074 .hidden __fixunsdfsi
0002abc0 g     O .bss	00000004 __malloc_top_pad
0001cc30 g     F .text	00000070 __ssrefill_r
0002ac24 g     O .bss	000011d8 static_self
00008be0 g     F .text	000002bc LMS7002M_dump_ini
0001c7ec g     F .text	0000001c strtoul
0002a298 g     O .rwdata	00000004 __mb_cur_max
000191cc g     F .text	0000000c _localeconv_r
0001c808 g     F .text	00000320 _strtoull_r
000198b4 g     F .text	0000003c __i2b
000115fc g     F .text	000004c8 __sfvwrite_r
0000e558 g     F .text	00000008 msleep_interruptible
00013400 g     F .text	00000054 _sbrk_r
0000e468 g     F .text	00000080 spidev_interface_transact
000002d4 g     F .text	0000001c ID00001001_startIP
0001a6a0 g     F .text	00000060 _read_r
00003688 g     F .text	0000028c LMS7002M_set_gfir_taps
00010384 g     F .text	000000f0 _fclose_r
00010700 g     F .text	00000030 fflush
0000e568 g     F .text	00000040 int_sqrt
0002abbc g     O .bss	00000004 __malloc_max_sbrked_mem
00000404 g     F .text	0000002c ID00004003_writeData
0000b830 g     F .text	00000110 LMS7002M_rxtsp_tsg_const
000137f8 g     F .text	0000198c __ssvfscanf_r
00025aa0 g     F .text	000008ac .hidden __adddf3
000258a4 g     F .text	00000078 .hidden __nesf2
0001a0c4 g     F .text	0000010c __b2d
00025104 g     F .text	000005c4 .hidden __umoddi3
00028860 g     F .text	00000040 lseek
0000941c g     F .text	00000180 LMS7002M_configure_lml_port
000099d4 g     F .text	00000060 LMS7002M_rbb_enable
0002a280 g     O .rwdata	00000004 __fdlib_version
0002a284 g     O .rwdata	00000004 _global_impure_ptr
00012cac g     F .text	00000564 _realloc_r
0002befc g       *ABS*	00000000 __bss_end
0002870c g     F .text	00000068 alt_iic_isr_register
000289e8 g     F .text	000000b8 alt_tick
00009798 g     F .text	000000b8 default_handler
000297b2 g     O .rodata	00000100 __hexdig
00024b08 g     F .text	000005fc .hidden __udivdi3
0000e718 g     F .text	00000008 ERR_PTR
00021eb8 g     F .text	00000024 _fputwc_r
00029600 g     O .rodata	00000028 __mprec_bigtens
00019698 g     F .text	00000104 __s2b
00028238 g     F .text	000000a8 .hidden __floatunsidf
00019e04 g     F .text	00000060 __mcmp
00010ab0 g     F .text	00000018 __fp_lock_all
000286f4 g     F .text	00000018 alt_ic_irq_enabled
00000570 g     F .text	0000006c aip_writeConfReg
000002f0 g     F .text	0000002c ID00001001_writeData
0000b620 g     F .text	000000b8 LMS7002M_rxtsp_enable
000289b4 g     F .text	00000034 alt_alarm_stop
0001c254 g     F .text	0000001c strtol
0000e16c g     F .text	000001d0 LMS7002M_tune_vco
0002abe0 g     O .bss	00000004 alt_irq_active
00011140 g     F .text	00000444 _fseeko_r
0000075c g     F .text	00000030 aip_clearINT
000000fc g     F .exceptions	00000060 alt_irq_handler
0000ad58 g     F .text	000008c8 LMS7002M_rbb_set_filter_bw
0000c6d4 g     F .text	000000c0 LMS7002M_trf_enable
00000000 g       *ABS*	00000000 __alt_mem_mem_program
0000ffd0 g     F .text	000001ec rint
00028bb4 g     F .text	00000004 alt_dcache_flush_all
0001979c g     F .text	00000068 __hi0bits
000280dc g     F .text	00000080 .hidden __fixdfsi
0001bee4 g     F .text	00000018 strtod
00006238 g     F .text	0000007c LMS7002M_create
0002a2c0 g       *ABS*	00000000 __ram_rwdata_end
0000c4c4 g     F .text	00000040 LMS7002M_tbb_set_test_in
00028aa0 g     F .text	00000060 write
0001a538 g     F .text	000000a0 _putc_r
0002591c g     F .text	000000bc .hidden __gtsf2
000299d4 g       *ABS*	00000000 __ram_rodata_end
0002a2bc g     O .rwdata	00000004 jtag_uart_0
0000bacc g     F .text	000001e8 LMS7002M_rxtsp_set_iq_correction
0002852c g     F .text	00000020 fstat
00010c14 g     F .text	00000024 fprintf
00026e80 g     F .text	000000f4 .hidden __ledf2
00019b7c g     F .text	00000140 __pow5mult
0002053c g     F .text	0000150c ___vfiprintf_internal_r
0002abcc g     O .bss	00000004 __nlocale_changed
00025824 g     F .text	00000058 .hidden __umodsi3
0000e4f8 g     F .text	00000004 gpio_data
0002befc g       *ABS*	00000000 end
00011584 g     F .text	0000001c fseeko
00009f08 g     F .text	000002c4 LMS7002M_rfe_set_lna
00011124 g     F .text	0000001c fseek
00009b40 g     F .text	000001e4 LMS7002M_rbb_set_pga
0000986c g     F .text	00000038 LMS7_vlogf
0000015c g     F .exceptions	00000024 alt_instruction_exception_entry
0003e800 g       *ABS*	00000000 __alt_stack_pointer
00028488 g     F .text	00000064 .hidden __clzsi2
00028b80 g     F .text	00000034 altera_avalon_jtag_uart_write
00000904 g     F .text	00000048 start_setup
0000bd10 g     F .text	00000278 LMS7002M_sxx_calc_tune_state
00010aa0 g     F .text	00000004 __sfp_lock_acquire
0001263c g     F .text	000000e4 memchr
00015184 g     F .text	000022dc ___vfprintf_internal_r
0001a7d8 g     F .text	00000058 _sprintf_r
00010e10 g     F .text	00000310 _free_r
000191a8 g     F .text	00000010 __locale_mb_cur_max
0001cb28 g     F .text	00000108 _sungetc_r
0002abc8 g     O .bss	00000004 __mlocale_changed
0000963c g     F .text	00000024 LMS7002M_set_mac_dir
0002a28c g     O .rwdata	00000004 __malloc_sbrk_base
00000180 g     F .text	0000003c _start
0002abf4 g     O .bss	00000004 _alt_tick_rate
0001c270 g     F .text	00000304 _strtoll_r
0000920c g     F .text	000000b0 LMS7002M_reset_lml_fifo
0000dcf4 g     F .text	000000fc LMS7002M_txtsp_set_dc_correction
0000da28 g     F .text	000000b0 LMS7002M_txtsp_set_interp
00019cbc g     F .text	00000148 __lshift
0002abf0 g     O .bss	00000004 _alt_nticks
0000e5a8 g     F .text	00000098 ilog2
00028914 g     F .text	00000054 read
00028b20 g     F .text	00000004 alt_sys_init
00009660 g     F .text	00000138 LMS7002M_set_diq_mux
00022bd8 g     F .text	000001d0 __ssprint_r
00012aec g     F .text	00000060 _open_r
00022b08 g     F .text	000000d0 strncmp
000198f0 g     F .text	0000028c __multiply
0000ebec g     F .text	000010a4 __ieee754_pow
0000e728 g     F .text	000004c4 pow
00000b14 g     F .text	0000009c spi_read
0000e4fc g     F .text	00000004 gpio_set_value
0002587c g     F .text	00000028 .hidden __mulsi3
000299d4 g       *ABS*	00000000 __ram_rwdata_start
00028c38 g       *ABS*	00000000 __ram_rodata_start
0000e500 g     F .text	0000002c udelay
0002abfc g     O .bss	00000028 __malloc_current_mallinfo
000258a4 g     F .text	00000078 .hidden __eqsf2
0001a1d0 g     F .text	0000014c __d2b
0000bcb4 g     F .text	0000005c LMS7002M_sxx_enable
0001c574 g     F .text	00000278 _strtoul_r
0000c504 g     F .text	0000005c LMS7002M_tbb_enable_loopback
000176ec g     F .text	00000054 _close_r
00000d6c g     F .text	0000037c LMS7002M_set_data_clock
0000c794 g     F .text	0000004c LMS7002M_trf_select_band
0000a524 g     F .text	000000e4 LMS7002M_rfe_set_tia
000005dc g     F .text	00000004 aip_writeMem
0002befc g       *ABS*	00000000 __alt_stack_base
000095e8 g     F .text	00000054 LMS7002M_setup_digital_loopback
0002abac g     O .bss	00000004 start_state
00008f94 g     F .text	00000108 LMS7002M_ldo_enable
00013454 g     F .text	0000007c sscanf
0000cdc8 g     F .text	000002e4 tx_cal_init
0000db80 g     F .text	00000110 LMS7002M_txtsp_tsg_const
00017598 g     F .text	00000154 __swsetup_r
0002634c g     F .text	000009d0 .hidden __divdf3
00010960 g     F .text	00000118 __sfp
0001a434 g     F .text	00000078 __copybits
000003e8 g     F .text	0000001c ID00004003_startIP
00029df8 g     O .rwdata	00000408 __malloc_av_
00010aac g     F .text	00000004 __sinit_lock_release
0002abb0 g     O .bss	00000004 edge_val
00026f74 g     F .text	0000086c .hidden __muldf3
0000b9a4 g     F .text	000000c0 LMS7002M_rxtsp_read_rssi
00013548 g     F .text	00000054 __sread
0000e640 g     F .text	00000080 do_div
000288cc g     F .text	00000004 __malloc_lock
00010bec g     F .text	00000028 _fprintf_r
00028968 g     F .text	0000004c sbrk
00009afc g     F .text	00000044 LMS7002M_rbb_set_test_out
0001deec g     F .text	000022bc ___svfprintf_internal_r
000106a4 g     F .text	0000005c _fflush_r
00021c78 g     F .text	000000dc _calloc_r
0002854c g     F .text	00000134 gettimeofday
0000c3d4 g     F .text	0000004c LMS7002M_sxt_to_sxr
00010bd4 g     F .text	00000018 fopen
0002abac g       *ABS*	00000000 __bss_start
000129c4 g     F .text	00000128 memset
00003540 g     F .text	00000148 cal_setup_cgen
0000094c g     F .text	000001c8 main
0000ddf0 g     F .text	000001e8 LMS7002M_txtsp_set_iq_correction
0002abe4 g     O .bss	00000004 alt_envp
0002abb8 g     O .bss	00000004 __malloc_max_total_mem
0000e3dc g     F .text	00000050 spi_read_API
0002a2b8 g     O .rwdata	00000004 uart_0
00021c60 g     F .text	00000018 __swbuf
000259d8 g     F .text	000000c8 .hidden __ltsf2
0000b788 g     F .text	000000a8 LMS7002M_rxtsp_set_freq
0001367c g     F .text	00000008 __sclose
0000ffbc g     F .text	00000008 matherr
0003e800 g       *ABS*	00000000 __alt_heap_limit
00000808 g     F .text	0000008c int_isr
00010474 g     F .text	00000014 fclose
0001bffc g     F .text	00000258 _strtol_r
000282e0 g     F .text	000001a8 .hidden __truncdfsf2
000001bc g     F .text	00000074 ID00001001_init
00017968 g     F .text	00001688 _dtoa_r
00011e30 g     F .text	0000080c _malloc_r
00008ad0 g     F .text	00000094 LMS7002M_regs_to_rfic
000242a4 g     F .text	00000030 __ascii_wctomb
0000c98c g     F .text	00000124 LMS7002M_trf_set_loopback_pad
0000c824 g     F .text	00000168 LMS7002M_trf_set_pad
0002a2a4 g     O .rwdata	00000004 alt_errno
000201a8 g     F .text	000000d4 __submore
00011ac4 g     F .text	000000c4 _fwalk
0000a8ec g     F .text	0000046c rx_cal_init
00019424 g     F .text	0000005c _mbtowc_r
00008b64 g     F .text	0000007c LMS7002M_rfic_to_regs
000010e8 g     F .text	00000058 cal_read_rssi
0001a5d8 g     F .text	000000c8 putc
000256c8 g     F .text	00000084 .hidden __divsi3
00010cec g     F .text	00000124 _malloc_trim_r
0000c560 g     F .text	0000008c LMS7002M_tbb_enable
0000d984 g     F .text	000000a4 LMS7002M_txtsp_enable
0000ff2c g     F .text	0000001c finite
00009dec g     F .text	0000011c LMS7002M_rfe_set_path
0000c650 g     F .text	00000044 LMS7_sleep_until
0000e560 g     F .text	00000008 clk_prepare_enable
00013684 g     F .text	000000dc strcmp
0000c5fc g     F .text	00000054 LMS7_time_now
00028c38 g       *ABS*	00000000 __flash_rodata_start
0000b6d8 g     F .text	000000b0 LMS7002M_rxtsp_set_decim
00010358 g     F .text	0000001c copysign
00026d1c g     F .text	00000088 .hidden __nedf2
000091b4 g     F .text	00000058 LMS7002M_reset
00028b00 g     F .text	00000020 alt_irq_init
0000c7e0 g     F .text	00000044 LMS7002M_trf_enable_loopback
00000364 g     F .text	0000003c ID00001001_waitDone
00000280 g     F .text	00000054 ID00001001_disableDelay
0001a830 g     F .text	0000006c sprintf
000298d2 g     O .rodata	00000100 .hidden __clz_tab
00000430 g     F .text	0000002c ID00004003_readData
0002abc4 g     O .bss	00000004 _PathLocale
00001140 g     F .text	00002310 set_addrs_to_default
0001befc g     F .text	00000100 strtof
0002591c g     F .text	000000bc .hidden __gesf2
00017538 g     F .text	00000060 _write_r
000191d8 g     F .text	00000018 setlocale
000006cc g     F .text	00000090 aip_disableINT
0000c694 g     F .text	00000040 LMS7_sleep_for
0000c5ec g     F .text	00000010 LMS7_time_tps
0000dc90 g     F .text	00000064 LMS7002M_txtsp_tsg_tone
0001a7d0 g     F .text	00000008 nanf
0002a288 g     O .rwdata	00000004 _impure_ptr
000098a4 g     F .text	00000008 LMS7_set_log_handler
0002abec g     O .bss	00000004 alt_argc
00006300 g     F .text	0000278c LMS7002M_regs_spi_write
00010488 g     F .text	0000021c __sflush_r
000101bc g     F .text	0000019c scalbn
0001925c g     F .text	000000ac _mbrtowc_r
000191c4 g     F .text	00000008 __locale_cjk_lang
00011120 g     F .text	00000004 _fseek_r
00009a34 g     F .text	000000c8 LMS7002M_rbb_set_path
0001322c g     F .text	000001d4 __srefill_r
00000020 g       .exceptions	00000000 alt_irq_entry
000193e0 g     F .text	00000044 __ascii_mbtowc
0001a060 g     F .text	00000064 __ulp
00010ac8 g     F .text	00000018 __fp_unlock_all
00008ac8 g     F .text	00000008 LMS7002M_regs
00000230 g     F .text	00000050 ID00001001_enableDelay
000003a0 g     F .text	00000018 ID00001001_waitirq
0002abd0 g     O .bss	00000008 alt_resettime
00009858 g     F .text	00000014 LMS7_log
0000ffc4 g     F .text	0000000c nan
0000b940 g     F .text	00000064 LMS7002M_rxtsp_tsg_tone
0001cda0 g     F .text	0000114c __ssvfiscanf_r
00000020 g       *ABS*	00000000 __ram_exceptions_start
000191f0 g     F .text	0000000c localeconv
0000fc90 g     F .text	00000288 __ieee754_sqrt
000003b8 g     F .text	00000030 ID00004003_init
00009d24 g     F .text	000000c8 LMS7002M_rfe_enable
0000e388 g     F .text	0000004c LMS7002M_xbuf_enable_bias
00008a8c g     F .text	0000003c LMS7002M_regs_spi_read
00000504 g     F .text	0000006c aip_readMem
00028680 g     F .text	00000004 alt_ic_isr_register
00009850 g     F .text	00000008 LMS7_set_log_level
000134d0 g     F .text	00000078 _sscanf_r
0002a2c0 g       *ABS*	00000000 _edata
0002befc g       *ABS*	00000000 _end
00021d54 g     F .text	00000164 __fputwc
00000180 g       *ABS*	00000000 __ram_exceptions_end
0000c420 g     F .text	000000a4 LMS7002M_tbb_set_path
00010c38 g     F .text	0000009c _fputs_r
00008e9c g     F .text	000000f8 LMS7002M_load_ini
000286bc g     F .text	00000038 alt_ic_irq_disable
0000e4ec g     F .text	00000004 gpio_direction
000090c0 g     F .text	00000090 LMS7002M_set_mac_ch
000135a4 g     F .text	0000007c __swrite
0002a290 g     O .rwdata	00000004 __malloc_trim_threshold
000191b8 g     F .text	0000000c __locale_msgcharset
00011b88 g     F .text	000000c4 _fwalk_reent
00019e64 g     F .text	000001fc __mdiff
0002574c g     F .text	00000074 .hidden __modsi3
0002a294 g     O .rwdata	00000004 __ctype_ptr__
0003e800 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00010aa4 g     F .text	00000004 __sfp_lock_release
0001a700 g     F .text	000000d0 __sccl
0002932e g     O .rodata	00000101 _ctype_
000062d4 g     F .text	0000002c LMS7002M_spi_read
0002a29c g     O .rwdata	00000004 __mbtowc
000092bc g     F .text	00000160 LMS7002M_power_down
00010ae0 g     F .text	000000f4 _fopen_r
0000000c g       .entry	00000000 _exit
00024330 g     F .text	0000010c .hidden __muldi3
00011c4c g     F .text	000001bc __smakebuf_r
00013760 g     F .text	00000098 strlen
000288d4 g     F .text	00000040 open
00026da4 g     F .text	000000dc .hidden __gedf2
000007cc g     F .text	0000003c aip_getNotifications
0000078c g     F .text	00000040 aip_getINT
0002205c g     F .text	00000850 __gethex
0000e720 g     F .text	00000008 zmalloc
0002a2a0 g     O .rwdata	00000004 __wctomb
00020524 g     F .text	00000018 __sprint_r
00028bb8 g     F .text	00000004 alt_icache_flush_all
00010cd4 g     F .text	00000018 fputs
0002a2a8 g     O .rwdata	00000004 alt_priority_mask
0000e4e8 g     F .text	00000004 gpio_init
000005e0 g     F .text	00000010 aip_start
00028684 g     F .text	00000038 alt_ic_irq_enable
00017460 g     F .text	0000001c __vfprintf_internal
000242d4 g     F .text	0000005c _wctomb_r
000277e0 g     F .text	000008fc .hidden __subdf3
00019804 g     F .text	000000b0 __lo0bits
0002a2b0 g     O .rwdata	00000008 alt_alarm_list
0002027c g     F .text	00000194 _ungetc_r
000241e4 g     F .text	000000c0 wcrtomb
000284ec g     F .text	00000040 close
00009150 g     F .text	00000064 LMS7002M_set_spi_mode
00028780 g     F .text	000000e0 alt_load
000062b4 g     F .text	00000004 LMS7002M_destroy
0000dad8 g     F .text	000000a8 LMS7002M_txtsp_set_freq
00000618 g     F .text	00000028 aip_getStatus
00021edc g     F .text	00000080 fputwc
00011e1c g     F .text	00000014 free
00010aa8 g     F .text	00000004 __sinit_lock_acquire
00019550 g     F .text	00000148 __multadd
00019528 g     F .text	00000028 _Bfree
00000478 g     F .text	0000003c ID00004003_waitDone
0000e4f0 g     F .text	00000008 gpio_is_valid



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08406014 	ori	at,at,384
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	000015c0 	call	15c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defffe04 	addi	sp,sp,-8
 100:	dfc00115 	stw	ra,4(sp)
 104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 10c:	040000f4 	movhi	r16,3
 110:	842f7f04 	addi	r16,r16,-16900

  active = alt_irq_pending ();

  do
  {
    i = 0;
 114:	0005883a 	mov	r2,zero
    mask = 1;
 118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	20ca703a 	and	r5,r4,r3
 120:	28000b26 	beq	r5,zero,150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 124:	100490fa 	slli	r2,r2,3
 128:	8085883a 	add	r2,r16,r2
 12c:	10c00017 	ldw	r3,0(r2)
 130:	11000117 	ldw	r4,4(r2)
 134:	183ee83a 	callr	r3
 138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 13c:	203ff51e 	bne	r4,zero,114 <__alt_data_end+0xfffc1914>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 140:	dfc00117 	ldw	ra,4(sp)
 144:	dc000017 	ldw	r16,0(sp)
 148:	dec00204 	addi	sp,sp,8
 14c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 150:	18c7883a 	add	r3,r3,r3
      i++;
 154:	10800044 	addi	r2,r2,1

    } while (1);
 158:	003ff006 	br	11c <__alt_data_end+0xfffc191c>

0000015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 15c:	d0a26017 	ldw	r2,-30336(gp)
 160:	10000426 	beq	r2,zero,174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 164:	200b883a 	mov	r5,r4
 168:	000d883a 	mov	r6,zero
 16c:	013fffc4 	movi	r4,-1
 170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
 178:	0005883a 	mov	r2,zero
 17c:	f800283a 	ret

Disassembly of section .text:

00000180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     180:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
     184:	defa0014 	ori	sp,sp,59392
    movhi gp, %hi(_gp)
     188:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
     18c:	d6889e14 	ori	gp,gp,8824
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     190:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
     194:	10aaeb14 	ori	r2,r2,43948

    movhi r3, %hi(__bss_end)
     198:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     19c:	18efbf14 	ori	r3,r3,48892

    beq r2, r3, 1f
     1a0:	10c00326 	beq	r2,r3,1b0 <_start+0x30>

0:
    stw zero, (r2)
     1a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1ac:	10fffd36 	bltu	r2,r3,1a4 <__alt_data_end+0xfffc19a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1b0:	00287800 	call	28780 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1b4:	00288a00 	call	288a0 <alt_main>

000001b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1b8:	003fff06 	br	1b8 <__alt_data_end+0xfffc19b8>

000001bc <ID00001001_init>:

static int32_t ID00001001_clearStatus(uint32_t port);


int32_t ID00001001_init(uint32_t port)
{
     1bc:	defffb04 	addi	sp,sp,-20
    uint32_t id;

    //aip_init(port, ID00001001_csv, ID00001001_CONFIG_AMOUNT);

    aip_getID(port, &id);
     1c0:	d80b883a 	mov	r5,sp

static int32_t ID00001001_clearStatus(uint32_t port);


int32_t ID00001001_init(uint32_t port)
{
     1c4:	dfc00415 	stw	ra,16(sp)
     1c8:	dc800315 	stw	r18,12(sp)
     1cc:	dc400215 	stw	r17,8(sp)
     1d0:	dc000115 	stw	r16,4(sp)
     1d4:	2023883a 	mov	r17,r4
    uint32_t id;

    //aip_init(port, ID00001001_csv, ID00001001_CONFIG_AMOUNT);

    aip_getID(port, &id);
     1d8:	00005f00 	call	5f0 <aip_getID>
    printf("ID:%x\n",id);
     1dc:	d9400017 	ldw	r5,0(sp)
     1e0:	010000f4 	movhi	r4,3
     1e4:	21230e04 	addi	r4,r4,-29640
     1e8:	0012b7c0 	call	12b7c <printf>
    return 0;
}

static int32_t ID00001001_clearStatus(uint32_t port)
{
    for(uint32_t i = 0; i < ID00001001_STATUS_BITS; i++)
     1ec:	0021883a 	mov	r16,zero
     1f0:	04800204 	movi	r18,8
    {
        aip_disableINT(port, i);
     1f4:	800b883a 	mov	r5,r16
     1f8:	8809883a 	mov	r4,r17
     1fc:	00006cc0 	call	6cc <aip_disableINT>
        
        aip_clearINT(port, i);
     200:	800b883a 	mov	r5,r16
     204:	8809883a 	mov	r4,r17
    return 0;
}

static int32_t ID00001001_clearStatus(uint32_t port)
{
    for(uint32_t i = 0; i < ID00001001_STATUS_BITS; i++)
     208:	84000044 	addi	r16,r16,1
    {
        aip_disableINT(port, i);
        
        aip_clearINT(port, i);
     20c:	000075c0 	call	75c <aip_clearINT>
    return 0;
}

static int32_t ID00001001_clearStatus(uint32_t port)
{
    for(uint32_t i = 0; i < ID00001001_STATUS_BITS; i++)
     210:	84bff81e 	bne	r16,r18,1f4 <__alt_data_end+0xfffc19f4>
    aip_getID(port, &id);
    printf("ID:%x\n",id);
    ID00001001_clearStatus(port);

    return 0;
}
     214:	0005883a 	mov	r2,zero
     218:	dfc00417 	ldw	ra,16(sp)
     21c:	dc800317 	ldw	r18,12(sp)
     220:	dc400217 	ldw	r17,8(sp)
     224:	dc000117 	ldw	r16,4(sp)
     228:	dec00504 	addi	sp,sp,20
     22c:	f800283a 	ret

00000230 <ID00001001_enableDelay>:

int32_t ID00001001_enableDelay(uint32_t port, uint32_t msec)
{
    uint32_t delay = 0;

    delay = (msec << 1) | 1;
     230:	294b883a 	add	r5,r5,r5

    return 0;
}

int32_t ID00001001_enableDelay(uint32_t port, uint32_t msec)
{
     234:	defffc04 	addi	sp,sp,-16
    uint32_t delay = 0;

    delay = (msec << 1) | 1;
     238:	29400054 	ori	r5,r5,1
     23c:	d9400115 	stw	r5,4(sp)

    aip_writeConfReg(port, CDELAY, &delay, 1, 0);
     240:	01c00044 	movi	r7,1
     244:	d9800104 	addi	r6,sp,4
     248:	d8000015 	stw	zero,0(sp)
     24c:	01400104 	movi	r5,4

    return 0;
}

int32_t ID00001001_enableDelay(uint32_t port, uint32_t msec)
{
     250:	dfc00315 	stw	ra,12(sp)
     254:	dc000215 	stw	r16,8(sp)
     258:	2021883a 	mov	r16,r4
    uint32_t delay = 0;

    delay = (msec << 1) | 1;

    aip_writeConfReg(port, CDELAY, &delay, 1, 0);
     25c:	00005700 	call	570 <aip_writeConfReg>

    aip_enableINT(port, ID00001001_STATUS_BIT_DONE);
     260:	000b883a 	mov	r5,zero
     264:	8009883a 	mov	r4,r16
     268:	00006400 	call	640 <aip_enableINT>

    return 0;
}
     26c:	0005883a 	mov	r2,zero
     270:	dfc00317 	ldw	ra,12(sp)
     274:	dc000217 	ldw	r16,8(sp)
     278:	dec00404 	addi	sp,sp,16
     27c:	f800283a 	ret

00000280 <ID00001001_disableDelay>:

int32_t ID00001001_disableDelay(uint32_t port)
{
     280:	defffc04 	addi	sp,sp,-16
    uint32_t delay = 0;

    aip_writeConfReg(port, CDELAY, &delay, 1, 0);
     284:	01c00044 	movi	r7,1
     288:	d9800104 	addi	r6,sp,4
     28c:	d8000015 	stw	zero,0(sp)
     290:	01400104 	movi	r5,4

    return 0;
}

int32_t ID00001001_disableDelay(uint32_t port)
{
     294:	dfc00315 	stw	ra,12(sp)
     298:	dc000215 	stw	r16,8(sp)
    uint32_t delay = 0;
     29c:	d8000115 	stw	zero,4(sp)

    return 0;
}

int32_t ID00001001_disableDelay(uint32_t port)
{
     2a0:	2021883a 	mov	r16,r4
    uint32_t delay = 0;

    aip_writeConfReg(port, CDELAY, &delay, 1, 0);
     2a4:	00005700 	call	570 <aip_writeConfReg>

    aip_disableINT(port, 0);
     2a8:	8009883a 	mov	r4,r16
     2ac:	000b883a 	mov	r5,zero
     2b0:	00006cc0 	call	6cc <aip_disableINT>
        
    aip_clearINT(port, 0);
     2b4:	000b883a 	mov	r5,zero
     2b8:	8009883a 	mov	r4,r16
     2bc:	000075c0 	call	75c <aip_clearINT>

    return 0;
}
     2c0:	0005883a 	mov	r2,zero
     2c4:	dfc00317 	ldw	ra,12(sp)
     2c8:	dc000217 	ldw	r16,8(sp)
     2cc:	dec00404 	addi	sp,sp,16
     2d0:	f800283a 	ret

000002d4 <ID00001001_startIP>:

int32_t ID00001001_startIP(uint32_t port)
{
     2d4:	deffff04 	addi	sp,sp,-4
     2d8:	dfc00015 	stw	ra,0(sp)
    aip_start(port);
     2dc:	00005e00 	call	5e0 <aip_start>

    return 0;
}
     2e0:	0005883a 	mov	r2,zero
     2e4:	dfc00017 	ldw	ra,0(sp)
     2e8:	dec00104 	addi	sp,sp,4
     2ec:	f800283a 	ret

000002f0 <ID00001001_writeData>:

int32_t ID00001001_writeData(uint32_t port, uint32_t *data, uint32_t size, uint32_t offset)
{
     2f0:	defffe04 	addi	sp,sp,-8
    aip_writeMem(port, MDATAIN, data, size, offset);
     2f4:	d9c00015 	stw	r7,0(sp)
     2f8:	31ffffcc 	andi	r7,r6,65535
     2fc:	280d883a 	mov	r6,r5
     300:	000b883a 	mov	r5,zero

    return 0;
}

int32_t ID00001001_writeData(uint32_t port, uint32_t *data, uint32_t size, uint32_t offset)
{
     304:	dfc00115 	stw	ra,4(sp)
    aip_writeMem(port, MDATAIN, data, size, offset);
     308:	00005dc0 	call	5dc <aip_writeMem>

    return 0;
}
     30c:	0005883a 	mov	r2,zero
     310:	dfc00117 	ldw	ra,4(sp)
     314:	dec00204 	addi	sp,sp,8
     318:	f800283a 	ret

0000031c <ID00001001_readData>:

int32_t ID00001001_readData(uint32_t port, uint32_t *data, uint32_t size, uint32_t offset)
{
     31c:	defffe04 	addi	sp,sp,-8
    aip_readMem(port, MDATAOUT, data, size, offset);
     320:	d9c00015 	stw	r7,0(sp)
     324:	31ffffcc 	andi	r7,r6,65535
     328:	280d883a 	mov	r6,r5
     32c:	01400084 	movi	r5,2

    return 0;
}

int32_t ID00001001_readData(uint32_t port, uint32_t *data, uint32_t size, uint32_t offset)
{
     330:	dfc00115 	stw	ra,4(sp)
    aip_readMem(port, MDATAOUT, data, size, offset);
     334:	00005040 	call	504 <aip_readMem>

    return 0;
}
     338:	0005883a 	mov	r2,zero
     33c:	dfc00117 	ldw	ra,4(sp)
     340:	dec00204 	addi	sp,sp,8
     344:	f800283a 	ret

00000348 <ID00001001_getStatus>:

int32_t ID00001001_getStatus(uint32_t port, uint32_t *status)
{
     348:	deffff04 	addi	sp,sp,-4
     34c:	dfc00015 	stw	ra,0(sp)
    aip_getStatus(port, status);
     350:	00006180 	call	618 <aip_getStatus>

    return 0;
}
     354:	0005883a 	mov	r2,zero
     358:	dfc00017 	ldw	ra,0(sp)
     35c:	dec00104 	addi	sp,sp,4
     360:	f800283a 	ret

00000364 <ID00001001_waitDone>:

int32_t ID00001001_waitDone(uint32_t port)
{
     364:	defffd04 	addi	sp,sp,-12
     368:	dc000115 	stw	r16,4(sp)
     36c:	dfc00215 	stw	ra,8(sp)
     370:	2021883a 	mov	r16,r4
    uint32_t statusINT = 0;
     374:	d8000015 	stw	zero,0(sp)

    do
    {
        aip_getINT(port, &statusINT);
     378:	d80b883a 	mov	r5,sp
     37c:	8009883a 	mov	r4,r16
     380:	000078c0 	call	78c <aip_getINT>
    } while (!(statusINT && 0x1));
     384:	d8800017 	ldw	r2,0(sp)
     388:	103ffb26 	beq	r2,zero,378 <__alt_data_end+0xfffc1b78>

    return 0;
}
     38c:	0005883a 	mov	r2,zero
     390:	dfc00217 	ldw	ra,8(sp)
     394:	dc000117 	ldw	r16,4(sp)
     398:	dec00304 	addi	sp,sp,12
     39c:	f800283a 	ret

000003a0 <ID00001001_waitirq>:
{
    uint32_t statusINT = 0;

    do
    {
        asm("nop");
     3a0:	0001883a 	nop

    } while (!start_state);
     3a4:	d0a24d17 	ldw	r2,-30412(gp)
     3a8:	103ffd26 	beq	r2,zero,3a0 <__alt_data_end+0xfffc1ba0>
    start_state = 0;
     3ac:	d0224d15 	stw	zero,-30412(gp)
    return 0;
}
     3b0:	0005883a 	mov	r2,zero
     3b4:	f800283a 	ret

000003b8 <ID00004003_init>:

static int32_t ID00004003_clearStatus(uint32_t port);


int32_t ID00004003_init(uint32_t port)
{
     3b8:	defffe04 	addi	sp,sp,-8
    uint32_t id;

    //aip_init(port, ID00004003_csv, ID00004003_CONFIG_AMOUNT);

    aip_getID(port, &id);
     3bc:	d80b883a 	mov	r5,sp

static int32_t ID00004003_clearStatus(uint32_t port);


int32_t ID00004003_init(uint32_t port)
{
     3c0:	dfc00115 	stw	ra,4(sp)
    uint32_t id;

    //aip_init(port, ID00004003_csv, ID00004003_CONFIG_AMOUNT);

    aip_getID(port, &id);
     3c4:	00005f00 	call	5f0 <aip_getID>
    printf("The ID is: %x \n", id );
     3c8:	d9400017 	ldw	r5,0(sp)
     3cc:	010000f4 	movhi	r4,3
     3d0:	21231004 	addi	r4,r4,-29632
     3d4:	0012b7c0 	call	12b7c <printf>
    //ID00004003_clearStatus(port);

    return 0;
}
     3d8:	0005883a 	mov	r2,zero
     3dc:	dfc00117 	ldw	ra,4(sp)
     3e0:	dec00204 	addi	sp,sp,8
     3e4:	f800283a 	ret

000003e8 <ID00004003_startIP>:

int32_t ID00004003_startIP(uint32_t port)
{
     3e8:	deffff04 	addi	sp,sp,-4
     3ec:	dfc00015 	stw	ra,0(sp)
    aip_start(port);
     3f0:	00005e00 	call	5e0 <aip_start>

    return 0;
}
     3f4:	0005883a 	mov	r2,zero
     3f8:	dfc00017 	ldw	ra,0(sp)
     3fc:	dec00104 	addi	sp,sp,4
     400:	f800283a 	ret

00000404 <ID00004003_writeData>:

int32_t ID00004003_writeData(uint32_t port, uint32_t *data, uint32_t size, uint32_t offset)
{
     404:	defffe04 	addi	sp,sp,-8
    aip_writeMem(port, MDATAOUT, data, size, offset);
     408:	d9c00015 	stw	r7,0(sp)
     40c:	31ffffcc 	andi	r7,r6,65535
     410:	280d883a 	mov	r6,r5
     414:	01400084 	movi	r5,2

    return 0;
}

int32_t ID00004003_writeData(uint32_t port, uint32_t *data, uint32_t size, uint32_t offset)
{
     418:	dfc00115 	stw	ra,4(sp)
    aip_writeMem(port, MDATAOUT, data, size, offset);
     41c:	00005dc0 	call	5dc <aip_writeMem>

    return 0;
}
     420:	0005883a 	mov	r2,zero
     424:	dfc00117 	ldw	ra,4(sp)
     428:	dec00204 	addi	sp,sp,8
     42c:	f800283a 	ret

00000430 <ID00004003_readData>:

int32_t ID00004003_readData(uint32_t port, uint32_t *data, uint32_t size, uint32_t offset)
{
     430:	defffe04 	addi	sp,sp,-8
    aip_readMem(port, MDATAIN, data, size, offset);
     434:	d9c00015 	stw	r7,0(sp)
     438:	31ffffcc 	andi	r7,r6,65535
     43c:	280d883a 	mov	r6,r5
     440:	000b883a 	mov	r5,zero

    return 0;
}

int32_t ID00004003_readData(uint32_t port, uint32_t *data, uint32_t size, uint32_t offset)
{
     444:	dfc00115 	stw	ra,4(sp)
    aip_readMem(port, MDATAIN, data, size, offset);
     448:	00005040 	call	504 <aip_readMem>

    return 0;
}
     44c:	0005883a 	mov	r2,zero
     450:	dfc00117 	ldw	ra,4(sp)
     454:	dec00204 	addi	sp,sp,8
     458:	f800283a 	ret

0000045c <ID00004003_getStatus>:

int32_t ID00004003_getStatus(uint32_t port, uint32_t *status)
{
     45c:	deffff04 	addi	sp,sp,-4
     460:	dfc00015 	stw	ra,0(sp)
    aip_getStatus(port, status);
     464:	00006180 	call	618 <aip_getStatus>

    return 0;
}
     468:	0005883a 	mov	r2,zero
     46c:	dfc00017 	ldw	ra,0(sp)
     470:	dec00104 	addi	sp,sp,4
     474:	f800283a 	ret

00000478 <ID00004003_waitDone>:

int32_t ID00004003_waitDone(uint32_t port)
{
     478:	defffd04 	addi	sp,sp,-12
     47c:	dc000115 	stw	r16,4(sp)
     480:	dfc00215 	stw	ra,8(sp)
     484:	2021883a 	mov	r16,r4
    uint32_t statusINT = 0;
     488:	d8000015 	stw	zero,0(sp)

    do
    {
        aip_getINT(port, &statusINT);
     48c:	d80b883a 	mov	r5,sp
     490:	8009883a 	mov	r4,r16
     494:	000078c0 	call	78c <aip_getINT>
    } while (!(statusINT && 0x1));
     498:	d8800017 	ldw	r2,0(sp)
     49c:	103ffb26 	beq	r2,zero,48c <__alt_data_end+0xfffc1c8c>

    return 0;
}
     4a0:	0005883a 	mov	r2,zero
     4a4:	dfc00217 	ldw	ra,8(sp)
     4a8:	dc000117 	ldw	r16,4(sp)
     4ac:	dec00304 	addi	sp,sp,12
     4b0:	f800283a 	ret

000004b4 <aip_aipRead>:
static uint8_t aip_aipRead (void *aipBaseAddr, uint32_t config, uint32_t *data, uint32_t size )
{

    volatile uint32_t *reg32 = (volatile uint32_t *)aipBaseAddr;

    reg32[AIP_CONFIG] = config;
     4b4:	21400815 	stw	r5,32(r4)

    for (uint32_t i = 0; i < size; i++)
     4b8:	0005883a 	mov	r2,zero
     4bc:	11c00526 	beq	r2,r7,4d4 <aip_aipRead+0x20>
	{
		data[i] = reg32[AIP_DATAOUT];
     4c0:	20c00017 	ldw	r3,0(r4)

    volatile uint32_t *reg32 = (volatile uint32_t *)aipBaseAddr;

    reg32[AIP_CONFIG] = config;

    for (uint32_t i = 0; i < size; i++)
     4c4:	10800044 	addi	r2,r2,1
     4c8:	31800104 	addi	r6,r6,4
	{
		data[i] = reg32[AIP_DATAOUT];
     4cc:	30ffff15 	stw	r3,-4(r6)
     4d0:	003ffa06 	br	4bc <__alt_data_end+0xfffc1cbc>
	}

	return 0 ;
};
     4d4:	0005883a 	mov	r2,zero
     4d8:	f800283a 	ret

000004dc <aip_aipWrite>:
static uint8_t aip_aipWrite (void *aipBaseAddr, uint32_t config, uint32_t *data, uint32_t size)
{

    volatile uint32_t *reg32 = (volatile uint32_t *)aipBaseAddr;

    reg32[AIP_CONFIG] = config;
     4dc:	21400815 	stw	r5,32(r4)

    for (uint32_t i = 0; i < size; i++) {
     4e0:	0005883a 	mov	r2,zero
     4e4:	11c00526 	beq	r2,r7,4fc <aip_aipWrite+0x20>
        reg32[AIP_DATAIN] = data[i];
     4e8:	30c00017 	ldw	r3,0(r6)

    volatile uint32_t *reg32 = (volatile uint32_t *)aipBaseAddr;

    reg32[AIP_CONFIG] = config;

    for (uint32_t i = 0; i < size; i++) {
     4ec:	10800044 	addi	r2,r2,1
     4f0:	31800104 	addi	r6,r6,4
        reg32[AIP_DATAIN] = data[i];
     4f4:	20c00415 	stw	r3,16(r4)
     4f8:	003ffa06 	br	4e4 <__alt_data_end+0xfffc1ce4>
    }

	return 0 ;
};
     4fc:	0005883a 	mov	r2,zero
     500:	f800283a 	ret

00000504 <aip_readMem>:

    return 0;
}
*/
int8_t aip_readMem (void *aipBaseAddr, uint8_t configMem, uint32_t* dataRead, uint16_t amountData, uint32_t offset)
{
     504:	defffb04 	addi	sp,sp,-20
     508:	dcc00315 	stw	r19,12(sp)
     50c:	dc000015 	stw	r16,0(sp)
     510:	3827883a 	mov	r19,r7
    /* set addrs */
    aip_aipWrite((void *)aipBaseAddr, configMem+1, &offset, 1);
     514:	2c003fcc 	andi	r16,r5,255
     518:	01c00044 	movi	r7,1
     51c:	81cb883a 	add	r5,r16,r7

    return 0;
}
*/
int8_t aip_readMem (void *aipBaseAddr, uint8_t configMem, uint32_t* dataRead, uint16_t amountData, uint32_t offset)
{
     520:	dc800215 	stw	r18,8(sp)
     524:	3025883a 	mov	r18,r6
    /* set addrs */
    aip_aipWrite((void *)aipBaseAddr, configMem+1, &offset, 1);
     528:	d9800504 	addi	r6,sp,20

    return 0;
}
*/
int8_t aip_readMem (void *aipBaseAddr, uint8_t configMem, uint32_t* dataRead, uint16_t amountData, uint32_t offset)
{
     52c:	dfc00415 	stw	ra,16(sp)
     530:	dc400115 	stw	r17,4(sp)
     534:	2023883a 	mov	r17,r4
    /* set addrs */
    aip_aipWrite((void *)aipBaseAddr, configMem+1, &offset, 1);
     538:	00004dc0 	call	4dc <aip_aipWrite>

    /* write data */
    aip_aipRead((void *)aipBaseAddr, configMem, dataRead, amountData);
     53c:	99ffffcc 	andi	r7,r19,65535
     540:	900d883a 	mov	r6,r18
     544:	800b883a 	mov	r5,r16
     548:	8809883a 	mov	r4,r17
     54c:	00004b40 	call	4b4 <aip_aipRead>

    return 0;
}
     550:	0005883a 	mov	r2,zero
     554:	dfc00417 	ldw	ra,16(sp)
     558:	dcc00317 	ldw	r19,12(sp)
     55c:	dc800217 	ldw	r18,8(sp)
     560:	dc400117 	ldw	r17,4(sp)
     564:	dc000017 	ldw	r16,0(sp)
     568:	dec00504 	addi	sp,sp,20
     56c:	f800283a 	ret

00000570 <aip_writeConfReg>:

    return 0;
}

int8_t aip_writeConfReg (void *aipBaseAddr, uint8_t configConfReg, uint32_t* dataWrite, uint16_t amountData, uint32_t offset)
{
     570:	defffb04 	addi	sp,sp,-20
     574:	dcc00315 	stw	r19,12(sp)
     578:	dc000015 	stw	r16,0(sp)
     57c:	3827883a 	mov	r19,r7
    /* set addrs */
    aip_aipWrite((void *)aipBaseAddr, configConfReg+1, &offset, 1);
     580:	2c003fcc 	andi	r16,r5,255
     584:	01c00044 	movi	r7,1
     588:	81cb883a 	add	r5,r16,r7

    return 0;
}

int8_t aip_writeConfReg (void *aipBaseAddr, uint8_t configConfReg, uint32_t* dataWrite, uint16_t amountData, uint32_t offset)
{
     58c:	dc800215 	stw	r18,8(sp)
     590:	3025883a 	mov	r18,r6
    /* set addrs */
    aip_aipWrite((void *)aipBaseAddr, configConfReg+1, &offset, 1);
     594:	d9800504 	addi	r6,sp,20

    return 0;
}

int8_t aip_writeConfReg (void *aipBaseAddr, uint8_t configConfReg, uint32_t* dataWrite, uint16_t amountData, uint32_t offset)
{
     598:	dfc00415 	stw	ra,16(sp)
     59c:	dc400115 	stw	r17,4(sp)
     5a0:	2023883a 	mov	r17,r4
    /* set addrs */
    aip_aipWrite((void *)aipBaseAddr, configConfReg+1, &offset, 1);
     5a4:	00004dc0 	call	4dc <aip_aipWrite>

    /* write data */
    aip_aipWrite((void *)aipBaseAddr, configConfReg, dataWrite, amountData);
     5a8:	99ffffcc 	andi	r7,r19,65535
     5ac:	900d883a 	mov	r6,r18
     5b0:	800b883a 	mov	r5,r16
     5b4:	8809883a 	mov	r4,r17
     5b8:	00004dc0 	call	4dc <aip_aipWrite>

    return 0;
}
     5bc:	0005883a 	mov	r2,zero
     5c0:	dfc00417 	ldw	ra,16(sp)
     5c4:	dcc00317 	ldw	r19,12(sp)
     5c8:	dc800217 	ldw	r18,8(sp)
     5cc:	dc400117 	ldw	r17,4(sp)
     5d0:	dc000017 	ldw	r16,0(sp)
     5d4:	dec00504 	addi	sp,sp,20
     5d8:	f800283a 	ret

000005dc <aip_writeMem>:
     5dc:	00005701 	jmpi	570 <aip_writeConfReg>

000005e0 <aip_start>:

static uint8_t aip_aipStart (void *aipBaseAddr)
{
    volatile uint32_t *reg32 = (volatile uint32_t *)aipBaseAddr;

    reg32[AIP_START] = 0x1;
     5e0:	00800044 	movi	r2,1
     5e4:	20800c15 	stw	r2,48(r4)
int8_t aip_start (void *aipBaseAddr)
{
    aip_aipStart((void *)aipBaseAddr);

    return 0;
}
     5e8:	0005883a 	mov	r2,zero
     5ec:	f800283a 	ret

000005f0 <aip_getID>:

int8_t aip_getID (void *aipBaseAddr, uint32_t *id)
{
     5f0:	deffff04 	addi	sp,sp,-4
    aip_aipRead((void *)aipBaseAddr, AIP_IPID, id, 1);
     5f4:	280d883a 	mov	r6,r5
     5f8:	01c00044 	movi	r7,1
     5fc:	014007c4 	movi	r5,31

    return 0;
}

int8_t aip_getID (void *aipBaseAddr, uint32_t *id)
{
     600:	dfc00015 	stw	ra,0(sp)
    aip_aipRead((void *)aipBaseAddr, AIP_IPID, id, 1);
     604:	00004b40 	call	4b4 <aip_aipRead>

    return 0;
}
     608:	0005883a 	mov	r2,zero
     60c:	dfc00017 	ldw	ra,0(sp)
     610:	dec00104 	addi	sp,sp,4
     614:	f800283a 	ret

00000618 <aip_getStatus>:

int8_t aip_getStatus (void *aipBaseAddr, uint32_t* status)
{
     618:	deffff04 	addi	sp,sp,-4
    aip_aipRead((void *)aipBaseAddr, AIP_STATUS, status, 1);
     61c:	280d883a 	mov	r6,r5
     620:	01c00044 	movi	r7,1
     624:	01400784 	movi	r5,30

    return 0;
}

int8_t aip_getStatus (void *aipBaseAddr, uint32_t* status)
{
     628:	dfc00015 	stw	ra,0(sp)
    aip_aipRead((void *)aipBaseAddr, AIP_STATUS, status, 1);
     62c:	00004b40 	call	4b4 <aip_aipRead>

    return 0;
}
     630:	0005883a 	mov	r2,zero
     634:	dfc00017 	ldw	ra,0(sp)
     638:	dec00104 	addi	sp,sp,4
     63c:	f800283a 	ret

00000640 <aip_enableINT>:

int8_t aip_enableINT (void *aipBaseAddr, uint8_t idxInt)
{
     640:	defffa04 	addi	sp,sp,-24
     644:	dc800315 	stw	r18,12(sp)
     648:	dc400215 	stw	r17,8(sp)
    uint32_t status = 0;

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     64c:	04800784 	movi	r18,30
     650:	04400044 	movi	r17,1

    return 0;
}

int8_t aip_enableINT (void *aipBaseAddr, uint8_t idxInt)
{
     654:	dc000115 	stw	r16,4(sp)
    uint32_t status = 0;

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     658:	880f883a 	mov	r7,r17
     65c:	d80d883a 	mov	r6,sp

    return 0;
}

int8_t aip_enableINT (void *aipBaseAddr, uint8_t idxInt)
{
     660:	2821883a 	mov	r16,r5
    uint32_t status = 0;

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     664:	900b883a 	mov	r5,r18

    return 0;
}

int8_t aip_enableINT (void *aipBaseAddr, uint8_t idxInt)
{
     668:	dfc00515 	stw	ra,20(sp)
     66c:	dcc00415 	stw	r19,16(sp)
    uint32_t status = 0;
     670:	d8000015 	stw	zero,0(sp)

    return 0;
}

int8_t aip_enableINT (void *aipBaseAddr, uint8_t idxInt)
{
     674:	2027883a 	mov	r19,r4

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);

    status &= AIP_STATUS_MASK_MASK;

    status |= (1 << (idxInt+AIP_STATUS_SHIFT_MASK));
     678:	84003fcc 	andi	r16,r16,255

int8_t aip_enableINT (void *aipBaseAddr, uint8_t idxInt)
{
    uint32_t status = 0;

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     67c:	00004b40 	call	4b4 <aip_aipRead>

    status &= AIP_STATUS_MASK_MASK;

    status |= (1 << (idxInt+AIP_STATUS_SHIFT_MASK));
     680:	d8800017 	ldw	r2,0(sp)
     684:	84000404 	addi	r16,r16,16
     688:	8c20983a 	sll	r16,r17,r16
     68c:	10803fec 	andhi	r2,r2,255

    aip_aipWrite((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     690:	880f883a 	mov	r7,r17

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);

    status &= AIP_STATUS_MASK_MASK;

    status |= (1 << (idxInt+AIP_STATUS_SHIFT_MASK));
     694:	1420b03a 	or	r16,r2,r16

    aip_aipWrite((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     698:	d80d883a 	mov	r6,sp
     69c:	900b883a 	mov	r5,r18
     6a0:	9809883a 	mov	r4,r19

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);

    status &= AIP_STATUS_MASK_MASK;

    status |= (1 << (idxInt+AIP_STATUS_SHIFT_MASK));
     6a4:	dc000015 	stw	r16,0(sp)

    aip_aipWrite((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     6a8:	00004dc0 	call	4dc <aip_aipWrite>

    return 0;
}
     6ac:	0005883a 	mov	r2,zero
     6b0:	dfc00517 	ldw	ra,20(sp)
     6b4:	dcc00417 	ldw	r19,16(sp)
     6b8:	dc800317 	ldw	r18,12(sp)
     6bc:	dc400217 	ldw	r17,8(sp)
     6c0:	dc000117 	ldw	r16,4(sp)
     6c4:	dec00604 	addi	sp,sp,24
     6c8:	f800283a 	ret

000006cc <aip_disableINT>:

int8_t aip_disableINT (void *aipBaseAddr, uint8_t idxInt)
{
     6cc:	defffa04 	addi	sp,sp,-24
     6d0:	dc800315 	stw	r18,12(sp)
     6d4:	dc400215 	stw	r17,8(sp)
     6d8:	dc000115 	stw	r16,4(sp)
    uint32_t status = 0;

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     6dc:	04400044 	movi	r17,1
     6e0:	04800784 	movi	r18,30

    return 0;
}

int8_t aip_disableINT (void *aipBaseAddr, uint8_t idxInt)
{
     6e4:	2821883a 	mov	r16,r5
    uint32_t status = 0;

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     6e8:	880f883a 	mov	r7,r17
     6ec:	d80d883a 	mov	r6,sp
     6f0:	900b883a 	mov	r5,r18

    status &= AIP_STATUS_MASK_MASK;

    status &= ~(uint32_t)(1 << (idxInt+AIP_STATUS_SHIFT_MASK));
     6f4:	84003fcc 	andi	r16,r16,255

    return 0;
}

int8_t aip_disableINT (void *aipBaseAddr, uint8_t idxInt)
{
     6f8:	dfc00515 	stw	ra,20(sp)
     6fc:	dcc00415 	stw	r19,16(sp)
    uint32_t status = 0;
     700:	d8000015 	stw	zero,0(sp)

    return 0;
}

int8_t aip_disableINT (void *aipBaseAddr, uint8_t idxInt)
{
     704:	2027883a 	mov	r19,r4

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);

    status &= AIP_STATUS_MASK_MASK;

    status &= ~(uint32_t)(1 << (idxInt+AIP_STATUS_SHIFT_MASK));
     708:	84000404 	addi	r16,r16,16

int8_t aip_disableINT (void *aipBaseAddr, uint8_t idxInt)
{
    uint32_t status = 0;

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     70c:	00004b40 	call	4b4 <aip_aipRead>

    status &= AIP_STATUS_MASK_MASK;

    status &= ~(uint32_t)(1 << (idxInt+AIP_STATUS_SHIFT_MASK));
     710:	d8800017 	ldw	r2,0(sp)
     714:	8c20983a 	sll	r16,r17,r16

    aip_aipWrite((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     718:	880f883a 	mov	r7,r17

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);

    status &= AIP_STATUS_MASK_MASK;

    status &= ~(uint32_t)(1 << (idxInt+AIP_STATUS_SHIFT_MASK));
     71c:	10803fec 	andhi	r2,r2,255
     720:	0420303a 	nor	r16,zero,r16
     724:	80a0703a 	and	r16,r16,r2

    aip_aipWrite((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     728:	d80d883a 	mov	r6,sp
     72c:	900b883a 	mov	r5,r18
     730:	9809883a 	mov	r4,r19

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);

    status &= AIP_STATUS_MASK_MASK;

    status &= ~(uint32_t)(1 << (idxInt+AIP_STATUS_SHIFT_MASK));
     734:	dc000015 	stw	r16,0(sp)

    aip_aipWrite((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     738:	00004dc0 	call	4dc <aip_aipWrite>

    return 0;
}
     73c:	0005883a 	mov	r2,zero
     740:	dfc00517 	ldw	ra,20(sp)
     744:	dcc00417 	ldw	r19,16(sp)
     748:	dc800317 	ldw	r18,12(sp)
     74c:	dc400217 	ldw	r17,8(sp)
     750:	dc000117 	ldw	r16,4(sp)
     754:	dec00604 	addi	sp,sp,24
     758:	f800283a 	ret

0000075c <aip_clearINT>:
    aip_aipWrite((void *)aipBaseAddr, AIP_STATUS, &status, 1);

    return 0;
}*/
int8_t aip_clearINT (void *aipBaseAddr, uint8_t idxInt)
{
     75c:	defffe04 	addi	sp,sp,-8

    //aip_aipRead(aipBaseAddr, AIP_STATUS, &status, 1);

    //status = (status & (AIP_STATUS_MASK_NU | AIP_STATUS_MASK_MASK | AIP_STATUS_MASK_NOTIFICATION)) | (uint32_t)(1 << idxInt);

    status = ((0xffffffff));
     760:	00bfffc4 	movi	r2,-1

    aip_aipWrite(aipBaseAddr, AIP_STATUS, &status, 1);
     764:	01c00044 	movi	r7,1
     768:	d80d883a 	mov	r6,sp
     76c:	01400784 	movi	r5,30
    aip_aipWrite((void *)aipBaseAddr, AIP_STATUS, &status, 1);

    return 0;
}*/
int8_t aip_clearINT (void *aipBaseAddr, uint8_t idxInt)
{
     770:	dfc00115 	stw	ra,4(sp)

    //aip_aipRead(aipBaseAddr, AIP_STATUS, &status, 1);

    //status = (status & (AIP_STATUS_MASK_NU | AIP_STATUS_MASK_MASK | AIP_STATUS_MASK_NOTIFICATION)) | (uint32_t)(1 << idxInt);

    status = ((0xffffffff));
     774:	d8800015 	stw	r2,0(sp)

    aip_aipWrite(aipBaseAddr, AIP_STATUS, &status, 1);
     778:	00004dc0 	call	4dc <aip_aipWrite>

    return 0;
}
     77c:	0005883a 	mov	r2,zero
     780:	dfc00117 	ldw	ra,4(sp)
     784:	dec00204 	addi	sp,sp,8
     788:	f800283a 	ret

0000078c <aip_getINT>:
int8_t aip_getINT (void *aipBaseAddr, uint8_t* intVector)
{
     78c:	defffd04 	addi	sp,sp,-12
     790:	dc000115 	stw	r16,4(sp)
    uint32_t status = 0;

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     794:	01c00044 	movi	r7,1
    aip_aipWrite(aipBaseAddr, AIP_STATUS, &status, 1);

    return 0;
}
int8_t aip_getINT (void *aipBaseAddr, uint8_t* intVector)
{
     798:	2821883a 	mov	r16,r5
    uint32_t status = 0;

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     79c:	d80d883a 	mov	r6,sp
     7a0:	01400784 	movi	r5,30
    aip_aipWrite(aipBaseAddr, AIP_STATUS, &status, 1);

    return 0;
}
int8_t aip_getINT (void *aipBaseAddr, uint8_t* intVector)
{
     7a4:	dfc00215 	stw	ra,8(sp)
    uint32_t status = 0;
     7a8:	d8000015 	stw	zero,0(sp)

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     7ac:	00004b40 	call	4b4 <aip_aipRead>

    *intVector = (uint8_t)(status & AIP_STATUS_MASK_INT);
     7b0:	d8800017 	ldw	r2,0(sp)
     7b4:	80800005 	stb	r2,0(r16)

    return 0;
}
     7b8:	0005883a 	mov	r2,zero
     7bc:	dfc00217 	ldw	ra,8(sp)
     7c0:	dc000117 	ldw	r16,4(sp)
     7c4:	dec00304 	addi	sp,sp,12
     7c8:	f800283a 	ret

000007cc <aip_getNotifications>:

int8_t aip_getNotifications(void *aipBaseAddr, uint8_t* notificationsVector)
{
     7cc:	defffd04 	addi	sp,sp,-12
     7d0:	dc000115 	stw	r16,4(sp)
    uint32_t status = 0;

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     7d4:	01c00044 	movi	r7,1

    return 0;
}

int8_t aip_getNotifications(void *aipBaseAddr, uint8_t* notificationsVector)
{
     7d8:	2821883a 	mov	r16,r5
    uint32_t status = 0;

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     7dc:	d80d883a 	mov	r6,sp
     7e0:	01400784 	movi	r5,30

    return 0;
}

int8_t aip_getNotifications(void *aipBaseAddr, uint8_t* notificationsVector)
{
     7e4:	dfc00215 	stw	ra,8(sp)
    uint32_t status = 0;
     7e8:	d8000015 	stw	zero,0(sp)

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     7ec:	00004b40 	call	4b4 <aip_aipRead>

    *notificationsVector = (uint8_t)((status & AIP_STATUS_MASK_NOTIFICATION) >> AIP_STATUS_SHIFT_NOTIFICATION);

    return 0;
}
     7f0:	0005883a 	mov	r2,zero
{
    uint32_t status = 0;

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);

    *notificationsVector = (uint8_t)((status & AIP_STATUS_MASK_NOTIFICATION) >> AIP_STATUS_SHIFT_NOTIFICATION);
     7f4:	80000005 	stb	zero,0(r16)

    return 0;
}
     7f8:	dfc00217 	ldw	ra,8(sp)
     7fc:	dc000117 	ldw	r16,4(sp)
     800:	dec00304 	addi	sp,sp,12
     804:	f800283a 	ret

00000808 <int_isr>:
        (void *) INT_IP_S0_BASE,
        0x00);

}

void int_isr(void * context) {
     808:	defffa04 	addi	sp,sp,-24
     80c:	dcc00315 	stw	r19,12(sp)
    alt_u32 base = (alt_u32)context;

    alt_u32 edge_status = IORD_ALTERA_AVALON_PIO_EDGE_CAP(base);
     810:	24c00304 	addi	r19,r4,12
        (void *) INT_IP_S0_BASE,
        0x00);

}

void int_isr(void * context) {
     814:	dfc00515 	stw	ra,20(sp)
     818:	dd000415 	stw	r20,16(sp)
     81c:	dc800215 	stw	r18,8(sp)
     820:	dc400115 	stw	r17,4(sp)
     824:	dc000015 	stw	r16,0(sp)
    alt_u32 base = (alt_u32)context;

    alt_u32 edge_status = IORD_ALTERA_AVALON_PIO_EDGE_CAP(base);
     828:	9c800037 	ldwio	r18,0(r19)

    if(edge_status) {
     82c:	90001126 	beq	r18,zero,874 <int_isr+0x6c>
        start_state = 1;

        printf("INT DETECTED!\n");
     830:	010000f4 	movhi	r4,3
    alt_u32 base = (alt_u32)context;

    alt_u32 edge_status = IORD_ALTERA_AVALON_PIO_EDGE_CAP(base);

    if(edge_status) {
        start_state = 1;
     834:	04400044 	movi	r17,1

        printf("INT DETECTED!\n");
     838:	21231404 	addi	r4,r4,-29616
    alt_u32 base = (alt_u32)context;

    alt_u32 edge_status = IORD_ALTERA_AVALON_PIO_EDGE_CAP(base);

    if(edge_status) {
        start_state = 1;
     83c:	d4624d15 	stw	r17,-30412(gp)

        printf("INT DETECTED!\n");

        for(int i = 0; i < 32; i++) {
     840:	0021883a 	mov	r16,zero
    alt_u32 edge_status = IORD_ALTERA_AVALON_PIO_EDGE_CAP(base);

    if(edge_status) {
        start_state = 1;

        printf("INT DETECTED!\n");
     844:	0012c980 	call	12c98 <puts>

        for(int i = 0; i < 32; i++) {
     848:	05000804 	movi	r20,32
            if(edge_status & (1 << i)) {
     84c:	8c04983a 	sll	r2,r17,r16
     850:	1484703a 	and	r2,r2,r18
     854:	10000426 	beq	r2,zero,868 <int_isr+0x60>
                printf("Line %d activated!\n", i);
     858:	010000f4 	movhi	r4,3
     85c:	800b883a 	mov	r5,r16
     860:	21231804 	addi	r4,r4,-29600
     864:	0012b7c0 	call	12b7c <printf>
    if(edge_status) {
        start_state = 1;

        printf("INT DETECTED!\n");

        for(int i = 0; i < 32; i++) {
     868:	84000044 	addi	r16,r16,1
     86c:	853ff71e 	bne	r16,r20,84c <__alt_data_end+0xfffc204c>
            if(edge_status & (1 << i)) {
                printf("Line %d activated!\n", i);
            }
        }
        IOWR_ALTERA_AVALON_PIO_EDGE_CAP(base, edge_status);
     870:	9c800035 	stwio	r18,0(r19)
    }
}
     874:	dfc00517 	ldw	ra,20(sp)
     878:	dd000417 	ldw	r20,16(sp)
     87c:	dcc00317 	ldw	r19,12(sp)
     880:	dc800217 	ldw	r18,8(sp)
     884:	dc400117 	ldw	r17,4(sp)
     888:	dc000017 	ldw	r16,0(sp)
     88c:	dec00604 	addi	sp,sp,24
     890:	f800283a 	ret

00000894 <start_isr>:
void start_isr(void * context){

		volatile int * edge_ptr;
		edge_ptr = (volatile int *) context;

		*edge_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(START_UP_BASE);
     894:	00800134 	movhi	r2,4
     898:	10982b04 	addi	r2,r2,24748
     89c:	10c00037 	ldwio	r3,0(r2)
     8a0:	20c00015 	stw	r3,0(r4)

		IOWR_ALTERA_AVALON_PIO_EDGE_CAP(START_UP_BASE, 0);
     8a4:	10000035 	stwio	zero,0(r2)

#ifdef 	PRINTF
		printf("------------start DETECTED ------------ \n");
#endif
		start_state=1;
     8a8:	00800044 	movi	r2,1
     8ac:	d0a24d15 	stw	r2,-30412(gp)
     8b0:	f800283a 	ret

000008b4 <int_setup>:

    return 0;
}


void int_setup(void) {
     8b4:	defffe04 	addi	sp,sp,-8
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(INT_IP_S0_BASE, 0x07);
     8b8:	00800134 	movhi	r2,4

    return 0;
}


void int_setup(void) {
     8bc:	dfc00115 	stw	ra,4(sp)
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(INT_IP_S0_BASE, 0x07);
     8c0:	10982604 	addi	r2,r2,24728
     8c4:	00c001c4 	movi	r3,7
     8c8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(INT_IP_S0_BASE, 0x00);
     8cc:	00800134 	movhi	r2,4
     8d0:	10982704 	addi	r2,r2,24732
     8d4:	10000035 	stwio	zero,0(r2)

    alt_ic_isr_register(
     8d8:	01c00134 	movhi	r7,4
     8dc:	01800034 	movhi	r6,0
     8e0:	d8000015 	stw	zero,0(sp)
     8e4:	39d82404 	addi	r7,r7,24720
     8e8:	31820204 	addi	r6,r6,2056
     8ec:	014000c4 	movi	r5,3
     8f0:	0009883a 	mov	r4,zero
     8f4:	00286800 	call	28680 <alt_ic_isr_register>
        INT_IP_S0_IRQ,
		int_isr,
        (void *) INT_IP_S0_BASE,
        0x00);

}
     8f8:	dfc00117 	ldw	ra,4(sp)
     8fc:	dec00204 	addi	sp,sp,8
     900:	f800283a 	ret

00000904 <start_setup>:
    }
}



void start_setup(void){
     904:	defffe04 	addi	sp,sp,-8

		IOWR_ALTERA_AVALON_PIO_IRQ_MASK(START_UP_BASE, 0x01);
     908:	00800134 	movhi	r2,4
    }
}



void start_setup(void){
     90c:	dfc00115 	stw	ra,4(sp)

		IOWR_ALTERA_AVALON_PIO_IRQ_MASK(START_UP_BASE, 0x01);
     910:	01400044 	movi	r5,1
     914:	10982a04 	addi	r2,r2,24744
     918:	11400035 	stwio	r5,0(r2)
		IOWR_ALTERA_AVALON_PIO_EDGE_CAP(START_UP_BASE, 0x00);
     91c:	00800134 	movhi	r2,4
     920:	10982b04 	addi	r2,r2,24748
     924:	10000035 	stwio	zero,0(r2)
		void * edge_val_ptr;
		edge_val_ptr = (void *) &edge_val;

		alt_ic_isr_register(
     928:	01800034 	movhi	r6,0
     92c:	d8000015 	stw	zero,0(sp)
     930:	d1e24e04 	addi	r7,gp,-30408
     934:	31822504 	addi	r6,r6,2196
     938:	0009883a 	mov	r4,zero
     93c:	00286800 	call	28680 <alt_ic_isr_register>
				START_UP_IRQ_INTERRUPT_CONTROLLER_ID,
				START_UP_IRQ,
				start_isr,
				edge_val_ptr,
				0x00);
}
     940:	dfc00117 	ldw	ra,4(sp)
     944:	dec00204 	addi	sp,sp,8
     948:	f800283a 	ret

0000094c <main>:
void int_setup();
void start_setup();


int main(void)
{
     94c:	defff004 	addi	sp,sp,-64
     950:	dfc00f15 	stw	ra,60(sp)
     954:	dc000c15 	stw	r16,48(sp)
     958:	dc800e15 	stw	r18,56(sp)
     95c:	dc400d15 	stw	r17,52(sp)

	start_state = 0;
     960:	d0224d15 	stw	zero,-30412(gp)

    uint32_t data[4];



    int_setup();
     964:	00008b40 	call	8b4 <int_setup>
    start_setup();
     968:	00009040 	call	904 <start_setup>

    ID00001001_init(DUMMY_0);
     96c:	01000134 	movhi	r4,4
     970:	21140004 	addi	r4,r4,20480
     974:	00001bc0 	call	1bc <ID00001001_init>
    ID00001001_init(DUMMY_1);
     978:	01000134 	movhi	r4,4
     97c:	21160004 	addi	r4,r4,22528
     980:	00001bc0 	call	1bc <ID00001001_init>
    ID00001001_init(DUMMY_2);
     984:	01000134 	movhi	r4,4
     988:	21150004 	addi	r4,r4,21504
     98c:	00001bc0 	call	1bc <ID00001001_init>
    {
        printf("Data[%i]: %x ", i, dataFlits[i]);
    }
    printf("\n");*/

    LMS7002M_t *lms = LMS7002M_create(spidev_interface_transact);
     990:	01000074 	movhi	r4,1
     994:	21391a04 	addi	r4,r4,-7064
     998:	00062380 	call	6238 <LMS7002M_create>
    LMS7002M_reset(lms);
     99c:	1009883a 	mov	r4,r2
    {
        printf("Data[%i]: %x ", i, dataFlits[i]);
    }
    printf("\n");*/

    LMS7002M_t *lms = LMS7002M_create(spidev_interface_transact);
     9a0:	1021883a 	mov	r16,r2
    LMS7002M_reset(lms);
     9a4:	00091b40 	call	91b4 <LMS7002M_reset>
    LMS7002M_set_spi_mode(lms, 4); //set 4-wire spi before reading back
     9a8:	8009883a 	mov	r4,r16
     9ac:	01400104 	movi	r5,4
     9b0:	00091500 	call	9150 <LMS7002M_set_spi_mode>
	uint32_t parameter_1;
	uint32_t parameter_2;
	uint32_t parameter_3;
	uint32_t parameter_4;

    printf("Waiting to start\n");
     9b4:	010000f4 	movhi	r4,3
     9b8:	21231d04 	addi	r4,r4,-29580
     9bc:	0012c980 	call	12c98 <puts>
	while(1){
		if(start_state != 0){
     9c0:	d0a24d17 	ldw	r2,-30412(gp)
     9c4:	103ffe26 	beq	r2,zero,9c0 <__alt_data_end+0xfffc21c0>

				ID00004003_readData(AIP_UP_0_BASE, data, 4,0);
     9c8:	01000134 	movhi	r4,4
     9cc:	000f883a 	mov	r7,zero
     9d0:	01800104 	movi	r6,4
     9d4:	d9400804 	addi	r5,sp,32
     9d8:	21170004 	addi	r4,r4,23552
     9dc:	00004300 	call	430 <ID00004003_readData>
			    opcode = data[0];
     9e0:	dc000817 	ldw	r16,32(sp)
			    parameter_1 = data[1];
			    parameter_2 = data[2];

				printf("\n The opcode in memory[0]: %lx\n", data[0]);
     9e4:	010000f4 	movhi	r4,3
     9e8:	21232204 	addi	r4,r4,-29560
     9ec:	800b883a 	mov	r5,r16
	while(1){
		if(start_state != 0){

				ID00004003_readData(AIP_UP_0_BASE, data, 4,0);
			    opcode = data[0];
			    parameter_1 = data[1];
     9f0:	dc400917 	ldw	r17,36(sp)
			    parameter_2 = data[2];
     9f4:	dc800a17 	ldw	r18,40(sp)

				printf("\n The opcode in memory[0]: %lx\n", data[0]);
     9f8:	0012b7c0 	call	12b7c <printf>
				printf("\n The data in memory[1]: %lx\n", data[1]);
     9fc:	d9400917 	ldw	r5,36(sp)
     a00:	010000f4 	movhi	r4,3
     a04:	21232a04 	addi	r4,r4,-29528
     a08:	0012b7c0 	call	12b7c <printf>
				printf("\n The data in memory[2]: %lx\n", data[2]);
     a0c:	d9400a17 	ldw	r5,40(sp)
     a10:	010000f4 	movhi	r4,3
     a14:	21233204 	addi	r4,r4,-29496
     a18:	0012b7c0 	call	12b7c <printf>

				switch(opcode){
     a1c:	00800044 	movi	r2,1
     a20:	80801326 	beq	r16,r2,a70 <main+0x124>
     a24:	80000e26 	beq	r16,zero,a60 <main+0x114>
     a28:	00800084 	movi	r2,2
     a2c:	8080341e 	bne	r16,r2,b00 <main+0x1b4>
				        printf("Data[%i]: %x ", i, dataFlits[i]);
				    }
				    printf("\n");
						break;
					case 2:
						 ID00001001_readData(DUMMY_1, dataFlits, DUMMY_MEM_SIZE, 0);
     a30:	01000134 	movhi	r4,4
     a34:	000f883a 	mov	r7,zero
     a38:	01800204 	movi	r6,8
     a3c:	d80b883a 	mov	r5,sp
     a40:	21160004 	addi	r4,r4,22528
     a44:	000031c0 	call	31c <ID00001001_readData>

						    printf("Data in Dummy 1:\n");
     a48:	010000f4 	movhi	r4,3
     a4c:	21234304 	addi	r4,r4,-29428
     a50:	0012c980 	call	12c98 <puts>

						    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
     a54:	0021883a 	mov	r16,zero
     a58:	04400204 	movi	r17,8
     a5c:	00001c06 	br	ad0 <main+0x184>
				printf("\n The opcode in memory[0]: %lx\n", data[0]);
				printf("\n The data in memory[1]: %lx\n", data[1]);
				printf("\n The data in memory[2]: %lx\n", data[2]);

				switch(opcode){
					case 0: spidev_interface_transact(parameter_1, parameter_2);
     a60:	900ac03a 	cmpne	r5,r18,zero
     a64:	8809883a 	mov	r4,r17
     a68:	000e4680 	call	e468 <spidev_interface_transact>
						break;
     a6c:	00002706 	br	b0c <main+0x1c0>
					case 1:
					ID00001001_readData(DUMMY_0, dataFlits, DUMMY_MEM_SIZE, 0);
     a70:	01000134 	movhi	r4,4
     a74:	000f883a 	mov	r7,zero
     a78:	01800204 	movi	r6,8
     a7c:	d80b883a 	mov	r5,sp
     a80:	21140004 	addi	r4,r4,20480
     a84:	000031c0 	call	31c <ID00001001_readData>

				    printf("Data in Dummy 0:\n");
     a88:	010000f4 	movhi	r4,3
     a8c:	21233a04 	addi	r4,r4,-29464
     a90:	0012c980 	call	12c98 <puts>

				    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
     a94:	0021883a 	mov	r16,zero
     a98:	04400204 	movi	r17,8
				    {
				        printf("Data[%i]: %x ", i, dataFlits[i]);
     a9c:	8405883a 	add	r2,r16,r16
     aa0:	1085883a 	add	r2,r2,r2
     aa4:	d885883a 	add	r2,sp,r2
     aa8:	11800017 	ldw	r6,0(r2)
     aac:	010000f4 	movhi	r4,3
     ab0:	800b883a 	mov	r5,r16
     ab4:	21233f04 	addi	r4,r4,-29444
					case 1:
					ID00001001_readData(DUMMY_0, dataFlits, DUMMY_MEM_SIZE, 0);

				    printf("Data in Dummy 0:\n");

				    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
     ab8:	84000044 	addi	r16,r16,1
				    {
				        printf("Data[%i]: %x ", i, dataFlits[i]);
     abc:	0012b7c0 	call	12b7c <printf>
					case 1:
					ID00001001_readData(DUMMY_0, dataFlits, DUMMY_MEM_SIZE, 0);

				    printf("Data in Dummy 0:\n");

				    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
     ac0:	847ff61e 	bne	r16,r17,a9c <__alt_data_end+0xfffc229c>
				    {
				        printf("Data[%i]: %x ", i, dataFlits[i]);
				    }
				    printf("\n");
     ac4:	01000284 	movi	r4,10
     ac8:	0012bc00 	call	12bc0 <putchar>
						break;
     acc:	00000f06 	br	b0c <main+0x1c0>

						    printf("Data in Dummy 1:\n");

						    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
						    {
						        printf("Data[%i]: %x ", i, dataFlits[i]);
     ad0:	8405883a 	add	r2,r16,r16
     ad4:	1085883a 	add	r2,r2,r2
     ad8:	d885883a 	add	r2,sp,r2
     adc:	11800017 	ldw	r6,0(r2)
     ae0:	010000f4 	movhi	r4,3
     ae4:	800b883a 	mov	r5,r16
     ae8:	21233f04 	addi	r4,r4,-29444
					case 2:
						 ID00001001_readData(DUMMY_1, dataFlits, DUMMY_MEM_SIZE, 0);

						    printf("Data in Dummy 1:\n");

						    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
     aec:	84000044 	addi	r16,r16,1
						    {
						        printf("Data[%i]: %x ", i, dataFlits[i]);
     af0:	0012b7c0 	call	12b7c <printf>
					case 2:
						 ID00001001_readData(DUMMY_1, dataFlits, DUMMY_MEM_SIZE, 0);

						    printf("Data in Dummy 1:\n");

						    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
     af4:	847ff61e 	bne	r16,r17,ad0 <__alt_data_end+0xfffc22d0>
						    {
						        printf("Data[%i]: %x ", i, dataFlits[i]);
						    }
						    printf("\n");
     af8:	01000284 	movi	r4,10
     afc:	0012bc00 	call	12bc0 <putchar>
					default: printf("\n Valor no valido\n");
     b00:	010000f4 	movhi	r4,3
     b04:	21234804 	addi	r4,r4,-29408
     b08:	0012c980 	call	12c98 <puts>

				};
				//spidev_interface_transact(0xA1A10000, 1);
				//LMS7002M_set_nco_freq(NULL, 0, 0, 0.0);

		   start_state = 0;
     b0c:	d0224d15 	stw	zero,-30412(gp)
     b10:	003fab06 	br	9c0 <__alt_data_end+0xfffc21c0>

00000b14 <spi_read>:

int32_t spi_read(uint8_t *data, uint8_t bytes_number) {
	uint32_t cnt = 0;

	/* Enable Slave Select mask. */
	IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(SPI_0_BASE, 1);
     b14:	00800134 	movhi	r2,4
     b18:	10981504 	addi	r2,r2,24660
     b1c:	00c00044 	movi	r3,1
     b20:	10c00035 	stwio	r3,0(r2)
	/* Set the SSO bit (force chip select). */
	IOWR_ALTERA_AVALON_SPI_CONTROL(SPI_0_BASE,ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
     b24:	00c00134 	movhi	r3,4
     b28:	18d81304 	addi	r3,r3,24652
     b2c:	00810004 	movi	r2,1024
     b30:	18800035 	stwio	r2,0(r3)
	/* Discard any stale data, in case previous communication was interrupted. */
	IORD_ALTERA_AVALON_SPI_RXDATA(SPI_0_BASE);
     b34:	01800134 	movhi	r6,4
     b38:	31981004 	addi	r6,r6,24640
     b3c:	30800037 	ldwio	r2,0(r6)
     b40:	02000134 	movhi	r8,4
		/* Wait until txdata register is empty. */
		while ((IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE)
				& ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0)
			;
		/* Write data to txdata register. */
		IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_0_BASE, data[cnt]);
     b44:	02800134 	movhi	r10,4
	/* Set the SSO bit (force chip select). */
	IOWR_ALTERA_AVALON_SPI_CONTROL(SPI_0_BASE,ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
	/* Discard any stale data, in case previous communication was interrupted. */
	IORD_ALTERA_AVALON_SPI_RXDATA(SPI_0_BASE);

	while (cnt < bytes_number) {
     b48:	2005883a 	mov	r2,r4
     b4c:	29403fcc 	andi	r5,r5,255
     b50:	42181204 	addi	r8,r8,24648
		/* Wait until txdata register is empty. */
		while ((IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE)
				& ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0)
			;
		/* Write data to txdata register. */
		IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_0_BASE, data[cnt]);
     b54:	52981104 	addi	r10,r10,24644
     b58:	02400134 	movhi	r9,4
	/* Set the SSO bit (force chip select). */
	IOWR_ALTERA_AVALON_SPI_CONTROL(SPI_0_BASE,ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
	/* Discard any stale data, in case previous communication was interrupted. */
	IORD_ALTERA_AVALON_SPI_RXDATA(SPI_0_BASE);

	while (cnt < bytes_number) {
     b5c:	110fc83a 	sub	r7,r2,r4
     b60:	4a581204 	addi	r9,r9,24648
     b64:	39400c2e 	bgeu	r7,r5,b98 <spi_read+0x84>
		/* Wait until txdata register is empty. */
		while ((IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE)
     b68:	41c00037 	ldwio	r7,0(r8)
     b6c:	39c0100c 	andi	r7,r7,64
     b70:	383ffd26 	beq	r7,zero,b68 <__alt_data_end+0xfffc2368>
				& ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0)
			;
		/* Write data to txdata register. */
		IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_0_BASE, data[cnt]);
     b74:	11c00003 	ldbu	r7,0(r2)
     b78:	51c00035 	stwio	r7,0(r10)
		/* Wait until rxdata register is full. */
		while ((IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE)
     b7c:	41c00037 	ldwio	r7,0(r8)
     b80:	39c0200c 	andi	r7,r7,128
     b84:	383ffd26 	beq	r7,zero,b7c <__alt_data_end+0xfffc237c>
				& ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0)
			;
		/* Read data from rxdata register. */
		data[cnt] = IORD_ALTERA_AVALON_SPI_RXDATA(SPI_0_BASE);
     b88:	31c00037 	ldwio	r7,0(r6)
     b8c:	11c00005 	stb	r7,0(r2)
     b90:	10800044 	addi	r2,r2,1
     b94:	003ff006 	br	b58 <__alt_data_end+0xfffc2358>
		cnt++;
	}

	/* Wait until the interface has finished transmitting. */
	while ((IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE)
     b98:	48800037 	ldwio	r2,0(r9)
     b9c:	1080080c 	andi	r2,r2,32
     ba0:	103ffd26 	beq	r2,zero,b98 <__alt_data_end+0xfffc2398>
			& ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0)
		;
	/* Clear the SSO bit (release chip select). */
	IOWR_ALTERA_AVALON_SPI_CONTROL(SPI_0_BASE, 0);
     ba4:	18000035 	stwio	zero,0(r3)

	return 0;
}
     ba8:	0005883a 	mov	r2,zero
     bac:	f800283a 	ret

00000bb0 <spi_write_then_read>:



int spi_write_then_read(struct spi_device *spi, const unsigned char *txbuf,
		unsigned n_tx, unsigned char *rxbuf, unsigned n_rx) {
     bb0:	defff704 	addi	sp,sp,-36
     bb4:	dc400615 	stw	r17,24(sp)
     bb8:	dc000515 	stw	r16,20(sp)
     bbc:	2823883a 	mov	r17,r5
     bc0:	3021883a 	mov	r16,r6
	uint8_t buffer[20] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     bc4:	000b883a 	mov	r5,zero
     bc8:	01800504 	movi	r6,20
     bcc:	d809883a 	mov	r4,sp
}



int spi_write_then_read(struct spi_device *spi, const unsigned char *txbuf,
		unsigned n_tx, unsigned char *rxbuf, unsigned n_rx) {
     bd0:	dc800715 	stw	r18,28(sp)
     bd4:	dfc00815 	stw	ra,32(sp)
     bd8:	3825883a 	mov	r18,r7
	uint8_t buffer[20] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     bdc:	00129c40 	call	129c4 <memset>
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	uint8_t byte;

	for (byte = 0; byte < n_tx; byte++) {
     be0:	0007883a 	mov	r3,zero
     be4:	18803fcc 	andi	r2,r3,255
     be8:	1400062e 	bgeu	r2,r16,c04 <spi_write_then_read+0x54>
		buffer[byte] = (unsigned char) txbuf[byte];
     bec:	d889883a 	add	r4,sp,r2
     bf0:	8885883a 	add	r2,r17,r2
     bf4:	10800003 	ldbu	r2,0(r2)
		unsigned n_tx, unsigned char *rxbuf, unsigned n_rx) {
	uint8_t buffer[20] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	uint8_t byte;

	for (byte = 0; byte < n_tx; byte++) {
     bf8:	18c00044 	addi	r3,r3,1
		buffer[byte] = (unsigned char) txbuf[byte];
     bfc:	20800005 	stb	r2,0(r4)
     c00:	003ff806 	br	be4 <__alt_data_end+0xfffc23e4>
	}
	spi_read(buffer, n_tx + n_rx);
     c04:	d8800917 	ldw	r2,36(sp)
     c08:	8023883a 	mov	r17,r16
     c0c:	d809883a 	mov	r4,sp
     c10:	80a1883a 	add	r16,r16,r2
     c14:	81403fcc 	andi	r5,r16,255
     c18:	0000b140 	call	b14 <spi_read>
	for (byte = n_tx; byte < n_tx + n_rx; byte++) {
     c1c:	88803fcc 	andi	r2,r17,255
     c20:	1400062e 	bgeu	r2,r16,c3c <spi_write_then_read+0x8c>
	//	rxbuf[byte - n_tx] = buffer[byte];
		rxbuf[byte] = buffer[byte];
     c24:	9087883a 	add	r3,r18,r2
     c28:	d885883a 	add	r2,sp,r2
     c2c:	10800003 	ldbu	r2,0(r2)

	for (byte = 0; byte < n_tx; byte++) {
		buffer[byte] = (unsigned char) txbuf[byte];
	}
	spi_read(buffer, n_tx + n_rx);
	for (byte = n_tx; byte < n_tx + n_rx; byte++) {
     c30:	8c400044 	addi	r17,r17,1
	//	rxbuf[byte - n_tx] = buffer[byte];
		rxbuf[byte] = buffer[byte];
     c34:	18800005 	stb	r2,0(r3)
     c38:	003ff806 	br	c1c <__alt_data_end+0xfffc241c>
	}
	

	return 0;
}
     c3c:	0005883a 	mov	r2,zero
     c40:	dfc00817 	ldw	ra,32(sp)
     c44:	dc800717 	ldw	r18,28(sp)
     c48:	dc400617 	ldw	r17,24(sp)
     c4c:	dc000517 	ldw	r16,20(sp)
     c50:	dec00904 	addi	sp,sp,36
     c54:	f800283a 	ret

00000c58 <LMS7002M_afe_enable>:

#include <stdlib.h>
#include "LMS7002M_impl.h"

void LMS7002M_afe_enable(LMS7002M_t *self, const LMS7002M_dir_t direction, const LMS7002M_chan_t channel, const bool enable)
{
     c58:	defffb04 	addi	sp,sp,-20
     c5c:	dcc00315 	stw	r19,12(sp)
     c60:	dc800215 	stw	r18,8(sp)
     c64:	dc000015 	stw	r16,0(sp)
     c68:	dfc00415 	stw	ra,16(sp)
     c6c:	dc400115 	stw	r17,4(sp)
    //support using LMS_CHAB to set both ADCs or DACs
    if (channel == LMS_CHAB)
     c70:	008010c4 	movi	r2,67

#include <stdlib.h>
#include "LMS7002M_impl.h"

void LMS7002M_afe_enable(LMS7002M_t *self, const LMS7002M_dir_t direction, const LMS7002M_chan_t channel, const bool enable)
{
     c74:	2025883a 	mov	r18,r4
     c78:	2827883a 	mov	r19,r5
     c7c:	3821883a 	mov	r16,r7
    //support using LMS_CHAB to set both ADCs or DACs
    if (channel == LMS_CHAB)
     c80:	30800f1e 	bne	r6,r2,cc0 <LMS7002M_afe_enable+0x68>
    {
        LMS7002M_afe_enable(self, direction, LMS_CHA, enable);
     c84:	3c003fcc 	andi	r16,r7,255
     c88:	800f883a 	mov	r7,r16
     c8c:	01801044 	movi	r6,65
     c90:	0000c580 	call	c58 <LMS7002M_afe_enable>
        LMS7002M_afe_enable(self, direction, LMS_CHB, enable);
     c94:	800f883a 	mov	r7,r16
     c98:	01801084 	movi	r6,66
     c9c:	980b883a 	mov	r5,r19
     ca0:	9009883a 	mov	r4,r18
    if (direction == LMS_TX && channel == LMS_CHB) self->regs->reg_0x0082_pd_tx_afe2 = enable?0:1;
    if (direction == LMS_RX && channel == LMS_CHA) self->regs->reg_0x0082_pd_rx_afe1 = enable?0:1;
    if (direction == LMS_RX && channel == LMS_CHB) self->regs->reg_0x0082_pd_rx_afe2 = enable?0:1;

    LMS7002M_regs_spi_write(self, 0x0082);
}
     ca4:	dfc00417 	ldw	ra,16(sp)
     ca8:	dcc00317 	ldw	r19,12(sp)
     cac:	dc800217 	ldw	r18,8(sp)
     cb0:	dc400117 	ldw	r17,4(sp)
     cb4:	dc000017 	ldw	r16,0(sp)
     cb8:	dec00504 	addi	sp,sp,20
{
    //support using LMS_CHAB to set both ADCs or DACs
    if (channel == LMS_CHAB)
    {
        LMS7002M_afe_enable(self, direction, LMS_CHA, enable);
        LMS7002M_afe_enable(self, direction, LMS_CHB, enable);
     cbc:	0000c581 	jmpi	c58 <LMS7002M_afe_enable>
        return;
    }

    //AFE is a global register space
    LMS7002M_set_mac_ch(self, LMS_CHAB);
     cc0:	100b883a 	mov	r5,r2
     cc4:	3023883a 	mov	r17,r6
     cc8:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    //always individual enables and both ADCs
    self->regs->reg_0x0082_en_g_afe = 1;
     ccc:	90846917 	ldw	r2,4516(r18)
     cd0:	00c00044 	movi	r3,1
     cd4:	10c06915 	stw	r3,420(r2)
    self->regs->reg_0x0082_mode_interleave_afe = REG_0X0082_MODE_INTERLEAVE_AFE_2ADCS;
     cd8:	10006115 	stw	zero,388(r2)
    self->regs->reg_0x0082_pd_afe = 0;
     cdc:	10006415 	stw	zero,400(r2)

    //conditional power downs
    if (direction == LMS_TX && channel == LMS_CHA) self->regs->reg_0x0082_pd_tx_afe1 = enable?0:1;
     ce0:	98c0061e 	bne	r19,r3,cfc <LMS7002M_afe_enable+0xa4>
     ce4:	00c01044 	movi	r3,65
     ce8:	88c00c1e 	bne	r17,r3,d1c <LMS7002M_afe_enable+0xc4>
     cec:	8400005c 	xori	r16,r16,1
     cf0:	84003fcc 	andi	r16,r16,255
     cf4:	14006715 	stw	r16,412(r2)
     cf8:	00000d06 	br	d30 <LMS7002M_afe_enable+0xd8>
    if (direction == LMS_TX && channel == LMS_CHB) self->regs->reg_0x0082_pd_tx_afe2 = enable?0:1;
    if (direction == LMS_RX && channel == LMS_CHA) self->regs->reg_0x0082_pd_rx_afe1 = enable?0:1;
     cfc:	00c00084 	movi	r3,2
     d00:	98c00b1e 	bne	r19,r3,d30 <LMS7002M_afe_enable+0xd8>
     d04:	00c01044 	movi	r3,65
     d08:	88c0121e 	bne	r17,r3,d54 <LMS7002M_afe_enable+0xfc>
     d0c:	8400005c 	xori	r16,r16,1
     d10:	84003fcc 	andi	r16,r16,255
     d14:	14006515 	stw	r16,404(r2)
     d18:	00000506 	br	d30 <LMS7002M_afe_enable+0xd8>
    self->regs->reg_0x0082_mode_interleave_afe = REG_0X0082_MODE_INTERLEAVE_AFE_2ADCS;
    self->regs->reg_0x0082_pd_afe = 0;

    //conditional power downs
    if (direction == LMS_TX && channel == LMS_CHA) self->regs->reg_0x0082_pd_tx_afe1 = enable?0:1;
    if (direction == LMS_TX && channel == LMS_CHB) self->regs->reg_0x0082_pd_tx_afe2 = enable?0:1;
     d1c:	00c01084 	movi	r3,66
     d20:	88c0031e 	bne	r17,r3,d30 <LMS7002M_afe_enable+0xd8>
     d24:	8400005c 	xori	r16,r16,1
     d28:	84003fcc 	andi	r16,r16,255
     d2c:	14006815 	stw	r16,416(r2)
    if (direction == LMS_RX && channel == LMS_CHA) self->regs->reg_0x0082_pd_rx_afe1 = enable?0:1;
    if (direction == LMS_RX && channel == LMS_CHB) self->regs->reg_0x0082_pd_rx_afe2 = enable?0:1;

    LMS7002M_regs_spi_write(self, 0x0082);
     d30:	01402084 	movi	r5,130
     d34:	9009883a 	mov	r4,r18
}
     d38:	dfc00417 	ldw	ra,16(sp)
     d3c:	dcc00317 	ldw	r19,12(sp)
     d40:	dc800217 	ldw	r18,8(sp)
     d44:	dc400117 	ldw	r17,4(sp)
     d48:	dc000017 	ldw	r16,0(sp)
     d4c:	dec00504 	addi	sp,sp,20
    if (direction == LMS_TX && channel == LMS_CHA) self->regs->reg_0x0082_pd_tx_afe1 = enable?0:1;
    if (direction == LMS_TX && channel == LMS_CHB) self->regs->reg_0x0082_pd_tx_afe2 = enable?0:1;
    if (direction == LMS_RX && channel == LMS_CHA) self->regs->reg_0x0082_pd_rx_afe1 = enable?0:1;
    if (direction == LMS_RX && channel == LMS_CHB) self->regs->reg_0x0082_pd_rx_afe2 = enable?0:1;

    LMS7002M_regs_spi_write(self, 0x0082);
     d50:	00063001 	jmpi	6300 <LMS7002M_regs_spi_write>

    //conditional power downs
    if (direction == LMS_TX && channel == LMS_CHA) self->regs->reg_0x0082_pd_tx_afe1 = enable?0:1;
    if (direction == LMS_TX && channel == LMS_CHB) self->regs->reg_0x0082_pd_tx_afe2 = enable?0:1;
    if (direction == LMS_RX && channel == LMS_CHA) self->regs->reg_0x0082_pd_rx_afe1 = enable?0:1;
    if (direction == LMS_RX && channel == LMS_CHB) self->regs->reg_0x0082_pd_rx_afe2 = enable?0:1;
     d54:	00c01084 	movi	r3,66
     d58:	88fff51e 	bne	r17,r3,d30 <__alt_data_end+0xfffc2530>
     d5c:	8400005c 	xori	r16,r16,1
     d60:	84003fcc 	andi	r16,r16,255
     d64:	14006615 	stw	r16,408(r2)
     d68:	003ff106 	br	d30 <__alt_data_end+0xfffc2530>

00000d6c <LMS7002M_set_data_clock>:
#include "LMS7002M_impl.h"
#include "LMS7002M_vco.h"
#include <LMS7002M/LMS7002M_logger.h>

int LMS7002M_set_data_clock(LMS7002M_t *self, const double fref, const double fout, double *factual)
{
     d6c:	defff004 	addi	sp,sp,-64
     d70:	d8801017 	ldw	r2,64(sp)
     d74:	dc800715 	stw	r18,28(sp)
     d78:	2825883a 	mov	r18,r5
    //LMS7_logf(LMS7_INFO, "CGEN tune %f MHz (fref=%f MHz) begin", fout/1e6, fref/1e6);

    //always use the channel A shadow, CGEN is in global register space
    LMS7002M_set_mac_ch(self, LMS_CHA);
     d7c:	01401044 	movi	r5,65
#include "LMS7002M_impl.h"
#include "LMS7002M_vco.h"
#include <LMS7002M/LMS7002M_logger.h>

int LMS7002M_set_data_clock(LMS7002M_t *self, const double fref, const double fout, double *factual)
{
     d80:	df000d15 	stw	fp,52(sp)
     d84:	ddc00c15 	stw	r23,48(sp)
     d88:	dc400615 	stw	r17,24(sp)
     d8c:	dc000515 	stw	r16,20(sp)
     d90:	dfc00e15 	stw	ra,56(sp)
     d94:	dd800b15 	stw	r22,44(sp)
     d98:	dd400a15 	stw	r21,40(sp)
     d9c:	dd000915 	stw	r20,36(sp)
     da0:	dcc00815 	stw	r19,32(sp)
     da4:	202f883a 	mov	r23,r4
     da8:	3023883a 	mov	r17,r6
     dac:	d9c00f15 	stw	r7,60(sp)
     db0:	3839883a 	mov	fp,r7
     db4:	d8800415 	stw	r2,16(sp)

    //The equations:
    // fref * N = fvco
    // fvco / fdiv = fout
    // fref * N = fout * fdiv
    int fdiv = 512+2;
     db8:	04008084 	movi	r16,514
int LMS7002M_set_data_clock(LMS7002M_t *self, const double fref, const double fout, double *factual)
{
    //LMS7_logf(LMS7_INFO, "CGEN tune %f MHz (fref=%f MHz) begin", fout/1e6, fref/1e6);

    //always use the channel A shadow, CGEN is in global register space
    LMS7002M_set_mac_ch(self, LMS_CHA);
     dbc:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>
   
    //calculation loop to find dividers that are possible
    while (true)
    {
        //try the next even divider
        fdiv -= 2;
     dc0:	843fff84 	addi	r16,r16,-2
        Ndiv = fout*fdiv/fref;
        fvco = fout*fdiv;
        //LMS7_logf(LMS7_TRACE, "Trying: fdiv = %d, Ndiv = %f, fvco = %f MHz", fdiv, Ndiv, fvco/1e6);

        //check dividers and vco in range...
        if (fdiv < 2) return -1;
     dc4:	8000ba26 	beq	r16,zero,10b0 <LMS7002M_set_data_clock+0x344>
    while (true)
    {
        //try the next even divider
        fdiv -= 2;

        Ndiv = fout*fdiv/fref;
     dc8:	8009883a 	mov	r4,r16
     dcc:	002815c0 	call	2815c <__floatsidf>
     dd0:	d9c00417 	ldw	r7,16(sp)
     dd4:	e00d883a 	mov	r6,fp
     dd8:	1009883a 	mov	r4,r2
     ddc:	180b883a 	mov	r5,r3
     de0:	d8800215 	stw	r2,8(sp)
     de4:	d8c00315 	stw	r3,12(sp)
     de8:	0026f740 	call	26f74 <__muldf3>
     dec:	900d883a 	mov	r6,r18
     df0:	880f883a 	mov	r7,r17
     df4:	1009883a 	mov	r4,r2
     df8:	180b883a 	mov	r5,r3
     dfc:	102d883a 	mov	r22,r2
     e00:	182b883a 	mov	r21,r3
     e04:	002634c0 	call	2634c <__divdf3>
        //LMS7_logf(LMS7_TRACE, "Trying: fdiv = %d, Ndiv = %f, fvco = %f MHz", fdiv, Ndiv, fvco/1e6);

        //check dividers and vco in range...
        if (fdiv < 2) return -1;
        if (fdiv > 512) continue;
        if (Ndiv < 4) return -1;
     e08:	000d883a 	mov	r6,zero
     e0c:	01d00434 	movhi	r7,16400
     e10:	1009883a 	mov	r4,r2
     e14:	180b883a 	mov	r5,r3
    while (true)
    {
        //try the next even divider
        fdiv -= 2;

        Ndiv = fout*fdiv/fref;
     e18:	1029883a 	mov	r20,r2
     e1c:	1827883a 	mov	r19,r3
        //LMS7_logf(LMS7_TRACE, "Trying: fdiv = %d, Ndiv = %f, fvco = %f MHz", fdiv, Ndiv, fvco/1e6);

        //check dividers and vco in range...
        if (fdiv < 2) return -1;
        if (fdiv > 512) continue;
        if (Ndiv < 4) return -1;
     e20:	0026e800 	call	26e80 <__ledf2>
     e24:	1000a216 	blt	r2,zero,10b0 <LMS7002M_set_data_clock+0x344>
        if (Ndiv > 512) continue;
     e28:	000d883a 	mov	r6,zero
     e2c:	01d02034 	movhi	r7,16512
     e30:	a009883a 	mov	r4,r20
     e34:	980b883a 	mov	r5,r19
     e38:	0026da40 	call	26da4 <__gedf2>
     e3c:	00bfe016 	blt	zero,r2,dc0 <__alt_data_end+0xfffc25c0>

        //check vco boundaries
        if (fvco < LMS7002M_CGEN_VCO_LO) continue;
     e40:	01d077b4 	movhi	r7,16862
     e44:	000d883a 	mov	r6,zero
     e48:	39f35944 	addi	r7,r7,-12955
     e4c:	b009883a 	mov	r4,r22
     e50:	a80b883a 	mov	r5,r21
     e54:	0026e800 	call	26e80 <__ledf2>
     e58:	103fd916 	blt	r2,zero,dc0 <__alt_data_end+0xfffc25c0>
        if (fvco > LMS7002M_CGEN_VCO_HI) continue;
     e5c:	01d07934 	movhi	r7,16868
     e60:	01980034 	movhi	r6,24576
     e64:	39c775c4 	addi	r7,r7,7639
     e68:	b009883a 	mov	r4,r22
     e6c:	a80b883a 	mov	r5,r21
     e70:	0026da40 	call	26da4 <__gedf2>
     e74:	00bfd216 	blt	zero,r2,dc0 <__alt_data_end+0xfffc25c0>
    }

    //LMS7_logf(LMS7_DEBUG, "Using: fdiv = %d, Ndiv = %f, fvco = %f MHz", fdiv, Ndiv, fvco/1e6);

    //stash the freq now that we know the loop above passed
    self->cgen_freq = fout;
     e78:	d9000417 	ldw	r4,16(sp)
    self->cgen_fref = fref;

    //usually these references are all the same frequency
    //setting the clock is a good time to initialize them
    //if they are not otherwise initialized by tuning the LO
    if (self->sxt_fref == 0.0) self->sxt_fref = fref;
     e7c:	b9447517 	ldw	r5,4564(r23)
    }

    //LMS7_logf(LMS7_DEBUG, "Using: fdiv = %d, Ndiv = %f, fvco = %f MHz", fdiv, Ndiv, fvco/1e6);

    //stash the freq now that we know the loop above passed
    self->cgen_freq = fout;
     e80:	bf046a15 	stw	fp,4520(r23)
     e84:	b9046b15 	stw	r4,4524(r23)
    self->cgen_fref = fref;

    //usually these references are all the same frequency
    //setting the clock is a good time to initialize them
    //if they are not otherwise initialized by tuning the LO
    if (self->sxt_fref == 0.0) self->sxt_fref = fref;
     e88:	b9047417 	ldw	r4,4560(r23)

    //LMS7_logf(LMS7_DEBUG, "Using: fdiv = %d, Ndiv = %f, fvco = %f MHz", fdiv, Ndiv, fvco/1e6);

    //stash the freq now that we know the loop above passed
    self->cgen_freq = fout;
    self->cgen_fref = fref;
     e8c:	bc847015 	stw	r18,4544(r23)
     e90:	bc447115 	stw	r17,4548(r23)

    //usually these references are all the same frequency
    //setting the clock is a good time to initialize them
    //if they are not otherwise initialized by tuning the LO
    if (self->sxt_fref == 0.0) self->sxt_fref = fref;
     e94:	000d883a 	mov	r6,zero
     e98:	000f883a 	mov	r7,zero
     e9c:	0026d1c0 	call	26d1c <__eqdf2>
     ea0:	1000021e 	bne	r2,zero,eac <LMS7002M_set_data_clock+0x140>
     ea4:	bc847415 	stw	r18,4560(r23)
     ea8:	bc447515 	stw	r17,4564(r23)
    if (self->sxr_fref == 0.0) self->sxr_fref = fref;
     eac:	b9047217 	ldw	r4,4552(r23)
     eb0:	b9447317 	ldw	r5,4556(r23)
     eb4:	000d883a 	mov	r6,zero
     eb8:	000f883a 	mov	r7,zero
     ebc:	0026d1c0 	call	26d1c <__eqdf2>
     ec0:	1000021e 	bne	r2,zero,ecc <LMS7002M_set_data_clock+0x160>
     ec4:	bc847215 	stw	r18,4552(r23)
     ec8:	bc447315 	stw	r17,4556(r23)

    //reset
    self->regs->reg_0x0086_reset_n_cgen = 0;
     ecc:	b8846917 	ldw	r2,4516(r23)
    LMS7002M_regs_spi_write(self, 0x0086);
     ed0:	01402184 	movi	r5,134
     ed4:	b809883a 	mov	r4,r23
    //if they are not otherwise initialized by tuning the LO
    if (self->sxt_fref == 0.0) self->sxt_fref = fref;
    if (self->sxr_fref == 0.0) self->sxr_fref = fref;

    //reset
    self->regs->reg_0x0086_reset_n_cgen = 0;
     ed8:	10007b15 	stw	zero,492(r2)
    LMS7002M_regs_spi_write(self, 0x0086);
     edc:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    self->regs->reg_0x0086_reset_n_cgen = 1;
     ee0:	b8846917 	ldw	r2,4516(r23)
     ee4:	05400044 	movi	r21,1
    LMS7002M_regs_spi_write(self, 0x0086);
     ee8:	01402184 	movi	r5,134
    if (self->sxr_fref == 0.0) self->sxr_fref = fref;

    //reset
    self->regs->reg_0x0086_reset_n_cgen = 0;
    LMS7002M_regs_spi_write(self, 0x0086);
    self->regs->reg_0x0086_reset_n_cgen = 1;
     eec:	15407b15 	stw	r21,492(r2)
    LMS7002M_regs_spi_write(self, 0x0086);
     ef0:	b809883a 	mov	r4,r23
     ef4:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    
    //configure and enable synthesizer
    self->regs->reg_0x0086_en_intonly_sdm_cgen = 0; //support frac-N
     ef8:	b8846917 	ldw	r2,4516(r23)
    self->regs->reg_0x0086_pd_vco_comp_cgen = 0; //enable
    self->regs->reg_0x0086_en_g_cgen = 1;
    self->regs->reg_0x0086_en_coarse_cklgen = 0;
    self->regs->reg_0x008b_coarse_start_cgen = 0;
    self->regs->reg_0x0086_spdup_vco_cgen = 1; //fast settling
    LMS7002M_regs_spi_write(self, 0x0086);
     efc:	01402184 	movi	r5,134
     f00:	b809883a 	mov	r4,r23
    LMS7002M_regs_spi_write(self, 0x0086);

    
    //configure and enable synthesizer
    self->regs->reg_0x0086_en_intonly_sdm_cgen = 0; //support frac-N
    self->regs->reg_0x0086_en_sdm_clk_cgen = 1; //enable
     f04:	15407f15 	stw	r21,508(r2)
    self->regs->reg_0x0086_pd_fdiv_fb_cgen = 0; //enable
    self->regs->reg_0x0086_pd_fdiv_o_cgen = 0; //enable
    self->regs->reg_0x0086_pd_sdm_cgen = 0; //enable
    self->regs->reg_0x0086_pd_vco_cgen = 0; //enable
    self->regs->reg_0x0086_pd_vco_comp_cgen = 0; //enable
    self->regs->reg_0x0086_en_g_cgen = 1;
     f08:	15408615 	stw	r21,536(r2)
    self->regs->reg_0x0086_en_coarse_cklgen = 0;
    self->regs->reg_0x008b_coarse_start_cgen = 0;
    self->regs->reg_0x0086_spdup_vco_cgen = 1; //fast settling
     f0c:	15407a15 	stw	r21,488(r2)
    self->regs->reg_0x0086_reset_n_cgen = 1;
    LMS7002M_regs_spi_write(self, 0x0086);

    
    //configure and enable synthesizer
    self->regs->reg_0x0086_en_intonly_sdm_cgen = 0; //support frac-N
     f10:	10007e15 	stw	zero,504(r2)
    self->regs->reg_0x0086_en_sdm_clk_cgen = 1; //enable
    self->regs->reg_0x0086_pd_cp_cgen = 0; //enable
     f14:	10008015 	stw	zero,512(r2)
    self->regs->reg_0x0086_pd_fdiv_fb_cgen = 0; //enable
     f18:	10008115 	stw	zero,516(r2)
    self->regs->reg_0x0086_pd_fdiv_o_cgen = 0; //enable
     f1c:	10008215 	stw	zero,520(r2)
    self->regs->reg_0x0086_pd_sdm_cgen = 0; //enable
     f20:	10008315 	stw	zero,524(r2)
    self->regs->reg_0x0086_pd_vco_cgen = 0; //enable
     f24:	10008415 	stw	zero,528(r2)
    self->regs->reg_0x0086_pd_vco_comp_cgen = 0; //enable
     f28:	10008515 	stw	zero,532(r2)
    self->regs->reg_0x0086_en_g_cgen = 1;
    self->regs->reg_0x0086_en_coarse_cklgen = 0;
     f2c:	10007d15 	stw	zero,500(r2)
    self->regs->reg_0x008b_coarse_start_cgen = 0;
     f30:	10009715 	stw	zero,604(r2)
    self->regs->reg_0x0086_spdup_vco_cgen = 1; //fast settling
    LMS7002M_regs_spi_write(self, 0x0086);
     f34:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    //program the N divider
    const int Nint = (int)Ndiv;
     f38:	980b883a 	mov	r5,r19
     f3c:	a009883a 	mov	r4,r20
     f40:	00280dc0 	call	280dc <__fixdfsi>
    const int Nfrac = (int)((Ndiv-Nint)*(1 << 20));
     f44:	1009883a 	mov	r4,r2
    self->regs->reg_0x008b_coarse_start_cgen = 0;
    self->regs->reg_0x0086_spdup_vco_cgen = 1; //fast settling
    LMS7002M_regs_spi_write(self, 0x0086);

    //program the N divider
    const int Nint = (int)Ndiv;
     f48:	1039883a 	mov	fp,r2
    const int Nfrac = (int)((Ndiv-Nint)*(1 << 20));
     f4c:	002815c0 	call	2815c <__floatsidf>
     f50:	980b883a 	mov	r5,r19
     f54:	100d883a 	mov	r6,r2
     f58:	180f883a 	mov	r7,r3
     f5c:	a009883a 	mov	r4,r20
     f60:	102d883a 	mov	r22,r2
     f64:	182b883a 	mov	r21,r3
     f68:	00277e00 	call	277e0 <__subdf3>
     f6c:	000d883a 	mov	r6,zero
     f70:	01d04c34 	movhi	r7,16688
     f74:	1009883a 	mov	r4,r2
     f78:	180b883a 	mov	r5,r3
     f7c:	0026f740 	call	26f74 <__muldf3>
     f80:	180b883a 	mov	r5,r3
     f84:	1009883a 	mov	r4,r2
     f88:	00280dc0 	call	280dc <__fixdfsi>
     f8c:	1027883a 	mov	r19,r2
    self->regs->reg_0x0087_frac_sdm_cgen = (Nfrac) & 0xffff; //lower 16 bits
     f90:	b8846917 	ldw	r2,4516(r23)
     f94:	98ffffcc 	andi	r3,r19,65535
    self->regs->reg_0x0088_frac_sdm_cgen = (Nfrac) >> 16; //upper 4 bits
    self->regs->reg_0x0088_int_sdm_cgen = Nint-1;
     f98:	e73fffc4 	addi	fp,fp,-1
    LMS7002M_regs_spi_write(self, 0x0086);

    //program the N divider
    const int Nint = (int)Ndiv;
    const int Nfrac = (int)((Ndiv-Nint)*(1 << 20));
    self->regs->reg_0x0087_frac_sdm_cgen = (Nfrac) & 0xffff; //lower 16 bits
     f9c:	10c08715 	stw	r3,540(r2)
    self->regs->reg_0x0088_frac_sdm_cgen = (Nfrac) >> 16; //upper 4 bits
     fa0:	9807d43a 	srai	r3,r19,16
    self->regs->reg_0x0088_int_sdm_cgen = Nint-1;
     fa4:	17008815 	stw	fp,544(r2)
    //LMS7_logf(LMS7_DEBUG, "fdiv = %d, Ndiv = %f, Nint = %d, Nfrac = %d, fvco = %f MHz", fdiv, Ndiv, Nint, Nfrac, fvco/1e6);
    LMS7002M_regs_spi_write(self, 0x0087);
     fa8:	014021c4 	movi	r5,135

    //program the N divider
    const int Nint = (int)Ndiv;
    const int Nfrac = (int)((Ndiv-Nint)*(1 << 20));
    self->regs->reg_0x0087_frac_sdm_cgen = (Nfrac) & 0xffff; //lower 16 bits
    self->regs->reg_0x0088_frac_sdm_cgen = (Nfrac) >> 16; //upper 4 bits
     fac:	10c08915 	stw	r3,548(r2)
    self->regs->reg_0x0088_int_sdm_cgen = Nint-1;
    //LMS7_logf(LMS7_DEBUG, "fdiv = %d, Ndiv = %f, Nint = %d, Nfrac = %d, fvco = %f MHz", fdiv, Ndiv, Nint, Nfrac, fvco/1e6);
    LMS7002M_regs_spi_write(self, 0x0087);
     fb0:	b809883a 	mov	r4,r23
     fb4:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x0088);
     fb8:	01402204 	movi	r5,136
     fbc:	b809883a 	mov	r4,r23
     fc0:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    //program the feedback divider
    self->regs->reg_0x0089_sel_sdmclk_cgen = REG_0X0089_SEL_SDMCLK_CGEN_CLK_DIV;
    self->regs->reg_0x0089_div_outch_cgen = (fdiv/2)-1;
     fc4:	8021d07a 	srai	r16,r16,1
    //LMS7_logf(LMS7_DEBUG, "fdiv = %d, Ndiv = %f, Nint = %d, Nfrac = %d, fvco = %f MHz", fdiv, Ndiv, Nint, Nfrac, fvco/1e6);
    LMS7002M_regs_spi_write(self, 0x0087);
    LMS7002M_regs_spi_write(self, 0x0088);

    //program the feedback divider
    self->regs->reg_0x0089_sel_sdmclk_cgen = REG_0X0089_SEL_SDMCLK_CGEN_CLK_DIV;
     fc8:	b8846917 	ldw	r2,4516(r23)
    self->regs->reg_0x0089_div_outch_cgen = (fdiv/2)-1;
    LMS7002M_regs_spi_write(self, 0x0089);
     fcc:	01402244 	movi	r5,137
    LMS7002M_regs_spi_write(self, 0x0087);
    LMS7002M_regs_spi_write(self, 0x0088);

    //program the feedback divider
    self->regs->reg_0x0089_sel_sdmclk_cgen = REG_0X0089_SEL_SDMCLK_CGEN_CLK_DIV;
    self->regs->reg_0x0089_div_outch_cgen = (fdiv/2)-1;
     fd0:	843fffc4 	addi	r16,r16,-1
     fd4:	14008e15 	stw	r16,568(r2)
    //LMS7_logf(LMS7_DEBUG, "fdiv = %d, Ndiv = %f, Nint = %d, Nfrac = %d, fvco = %f MHz", fdiv, Ndiv, Nint, Nfrac, fvco/1e6);
    LMS7002M_regs_spi_write(self, 0x0087);
    LMS7002M_regs_spi_write(self, 0x0088);

    //program the feedback divider
    self->regs->reg_0x0089_sel_sdmclk_cgen = REG_0X0089_SEL_SDMCLK_CGEN_CLK_DIV;
     fd8:	10008b15 	stw	zero,556(r2)
    self->regs->reg_0x0089_div_outch_cgen = (fdiv/2)-1;
    LMS7002M_regs_spi_write(self, 0x0089);
     fdc:	b809883a 	mov	r4,r23
     fe0:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    //select the correct CSW for this VCO frequency
    if (LMS7002M_tune_vco(self,
        &self->regs->reg_0x008b_csw_vco_cgen, 0x008B,
     fe4:	b9446917 	ldw	r5,4516(r23)
    self->regs->reg_0x0089_sel_sdmclk_cgen = REG_0X0089_SEL_SDMCLK_CGEN_CLK_DIV;
    self->regs->reg_0x0089_div_outch_cgen = (fdiv/2)-1;
    LMS7002M_regs_spi_write(self, 0x0089);

    //select the correct CSW for this VCO frequency
    if (LMS7002M_tune_vco(self,
     fe8:	00802304 	movi	r2,140
     fec:	d8800115 	stw	r2,4(sp)
     ff0:	28809b04 	addi	r2,r5,620
     ff4:	29c09a04 	addi	r7,r5,616
     ff8:	d8800015 	stw	r2,0(sp)
     ffc:	018022c4 	movi	r6,139
    1000:	29409604 	addi	r5,r5,600
    1004:	b809883a 	mov	r4,r23
    1008:	000e16c0 	call	e16c <LMS7002M_tune_vco>
    100c:	1021883a 	mov	r16,r2
    1010:	10000626 	beq	r2,zero,102c <LMS7002M_set_data_clock+0x2c0>
        &self->regs->reg_0x008b_csw_vco_cgen, 0x008B,
        &self->regs->reg_0x008c_vco_cmpho_cgen,
        &self->regs->reg_0x008c_vco_cmplo_cgen, 0x008C) != 0)
    {
        LMS7_log(LMS7_ERROR, "VCO select FAIL");
    1014:	014000f4 	movhi	r5,3
    1018:	29634d04 	addi	r5,r5,-29388
    101c:	010000c4 	movi	r4,3
    1020:	00098580 	call	9858 <LMS7_log>
        return -3;
    1024:	043fff44 	movi	r16,-3
    1028:	00002206 	br	10b4 <LMS7002M_set_data_clock+0x348>
    }
    

    self->regs->reg_0x0086_spdup_vco_cgen = 0; //done with fast settling
    102c:	b8846917 	ldw	r2,4516(r23)
    LMS7002M_regs_spi_write(self, 0x0086);
    1030:	01402184 	movi	r5,134
    1034:	b809883a 	mov	r4,r23
        LMS7_log(LMS7_ERROR, "VCO select FAIL");
        return -3;
    }
    

    self->regs->reg_0x0086_spdup_vco_cgen = 0; //done with fast settling
    1038:	10007a15 	stw	zero,488(r2)
    LMS7002M_regs_spi_write(self, 0x0086);
    103c:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    //calculate the actual rate
    if (factual != NULL) *factual = fref * (Nint + (Nfrac/((double)(1 << 20)))) / fdiv;
    1040:	d8801117 	ldw	r2,68(sp)
    1044:	10001b26 	beq	r2,zero,10b4 <LMS7002M_set_data_clock+0x348>
    1048:	9809883a 	mov	r4,r19
    104c:	002815c0 	call	2815c <__floatsidf>
    1050:	000d883a 	mov	r6,zero
    1054:	01cfac34 	movhi	r7,16048
    1058:	1009883a 	mov	r4,r2
    105c:	180b883a 	mov	r5,r3
    1060:	0026f740 	call	26f74 <__muldf3>
    1064:	b00d883a 	mov	r6,r22
    1068:	a80f883a 	mov	r7,r21
    106c:	1009883a 	mov	r4,r2
    1070:	180b883a 	mov	r5,r3
    1074:	0025aa00 	call	25aa0 <__adddf3>
    1078:	900d883a 	mov	r6,r18
    107c:	880f883a 	mov	r7,r17
    1080:	1009883a 	mov	r4,r2
    1084:	180b883a 	mov	r5,r3
    1088:	0026f740 	call	26f74 <__muldf3>
    108c:	d9800217 	ldw	r6,8(sp)
    1090:	d9c00317 	ldw	r7,12(sp)
    1094:	1009883a 	mov	r4,r2
    1098:	180b883a 	mov	r5,r3
    109c:	002634c0 	call	2634c <__divdf3>
    10a0:	d9001117 	ldw	r4,68(sp)
    10a4:	20800015 	stw	r2,0(r4)
    10a8:	20c00115 	stw	r3,4(r4)
    10ac:	00000106 	br	10b4 <LMS7002M_set_data_clock+0x348>
        Ndiv = fout*fdiv/fref;
        fvco = fout*fdiv;
        //LMS7_logf(LMS7_TRACE, "Trying: fdiv = %d, Ndiv = %f, fvco = %f MHz", fdiv, Ndiv, fvco/1e6);

        //check dividers and vco in range...
        if (fdiv < 2) return -1;
    10b0:	043fffc4 	movi	r16,-1

    //calculate the actual rate
    if (factual != NULL) *factual = fref * (Nint + (Nfrac/((double)(1 << 20)))) / fdiv;
    
    return 0; //OK
}
    10b4:	8005883a 	mov	r2,r16
    10b8:	dfc00e17 	ldw	ra,56(sp)
    10bc:	df000d17 	ldw	fp,52(sp)
    10c0:	ddc00c17 	ldw	r23,48(sp)
    10c4:	dd800b17 	ldw	r22,44(sp)
    10c8:	dd400a17 	ldw	r21,40(sp)
    10cc:	dd000917 	ldw	r20,36(sp)
    10d0:	dcc00817 	ldw	r19,32(sp)
    10d4:	dc800717 	ldw	r18,28(sp)
    10d8:	dc400617 	ldw	r17,24(sp)
    10dc:	dc000517 	ldw	r16,20(sp)
    10e0:	dec01004 	addi	sp,sp,64
    10e4:	f800283a 	ret

000010e8 <cal_read_rssi>:
{
    return (LMS7_time_tps())/1000; //1 ms -> ticks
}

uint16_t cal_read_rssi(LMS7002M_t *self, const LMS7002M_chan_t channel)
{
    10e8:	defffd04 	addi	sp,sp,-12
    10ec:	dfc00215 	stw	ra,8(sp)
    10f0:	dc400115 	stw	r17,4(sp)
    10f4:	dc000015 	stw	r16,0(sp)
    10f8:	2823883a 	mov	r17,r5
    10fc:	2021883a 	mov	r16,r4
#include "LMS7002M_filter_cal.h"
#include <LMS7002M/LMS7002M_time.h>

static long long cal_rssi_sleep_ticks(void)
{
    return (LMS7_time_tps())/1000; //1 ms -> ticks
    1100:	000c5ec0 	call	c5ec <LMS7_time_tps>
}

uint16_t cal_read_rssi(LMS7002M_t *self, const LMS7002M_chan_t channel)
{
    LMS7_sleep_for(cal_rssi_sleep_ticks());
    1104:	0180fa04 	movi	r6,1000
    1108:	000f883a 	mov	r7,zero
    110c:	1009883a 	mov	r4,r2
    1110:	180b883a 	mov	r5,r3
    1114:	00244b00 	call	244b0 <__divdi3>
    1118:	1009883a 	mov	r4,r2
    111c:	180b883a 	mov	r5,r3
    1120:	000c6940 	call	c694 <LMS7_sleep_for>
    return LMS7002M_rxtsp_read_rssi(self, channel);
    1124:	880b883a 	mov	r5,r17
    1128:	8009883a 	mov	r4,r16
}
    112c:	dfc00217 	ldw	ra,8(sp)
    1130:	dc400117 	ldw	r17,4(sp)
    1134:	dc000017 	ldw	r16,0(sp)
    1138:	dec00304 	addi	sp,sp,12
}

uint16_t cal_read_rssi(LMS7002M_t *self, const LMS7002M_chan_t channel)
{
    LMS7_sleep_for(cal_rssi_sleep_ticks());
    return LMS7002M_rxtsp_read_rssi(self, channel);
    113c:	000b9a41 	jmpi	b9a4 <LMS7002M_rxtsp_read_rssi>

00001140 <set_addrs_to_default>:
}

void set_addrs_to_default(LMS7002M_t *self, const LMS7002M_chan_t channel, const int start_addr, const int stop_addr)
{
    1140:	defff704 	addi	sp,sp,-36
    1144:	ddc00715 	stw	r23,28(sp)
    1148:	dd800615 	stw	r22,24(sp)
    114c:	dd400515 	stw	r21,20(sp)
    1150:	dd000415 	stw	r20,16(sp)
    1154:	dcc00315 	stw	r19,12(sp)
    1158:	dc800215 	stw	r18,8(sp)
    115c:	dc400115 	stw	r17,4(sp)
    1160:	dfc00815 	stw	ra,32(sp)
    1164:	dc000015 	stw	r16,0(sp)
    1168:	2025883a 	mov	r18,r4
    116c:	3023883a 	mov	r17,r6
    1170:	382f883a 	mov	r23,r7
    LMS7002M_regs_set(regs, 0x0641, 0x1020);
}

static inline int LMS7002M_regs_default(const int addr)
{
    if (addr == 0x0020) return 0xffff;
    1174:	04c00804 	movi	r19,32
    LMS7002M_set_mac_ch(self, channel);
    1178:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>
        regs->reg_0x0020_txen_b = (value >> 3) & 0x1;
        regs->reg_0x0020_txen_a = (value >> 2) & 0x1;
        regs->reg_0x0020_mac = (value >> 0) & 0x3;
        return;
    }
    if (addr == 0x0021)
    117c:	05000844 	movi	r20,33
        regs->reg_0x0021_sclk_pe = (value >> 2) & 0x1;
        regs->reg_0x0021_sen_pe = (value >> 1) & 0x1;
        regs->reg_0x0021_spimode = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0022)
    1180:	05400884 	movi	r21,34
        regs->reg_0x0022_txnrx1_pe = (value >> 2) & 0x1;
        regs->reg_0x0022_fclk1_pe = (value >> 1) & 0x1;
        regs->reg_0x0022_mclk1_pe = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0023)
    1184:	058008c4 	movi	r22,35
    for (int addr = start_addr; addr <= stop_addr; addr++)
    1188:	bc48a616 	blt	r23,r17,3424 <set_addrs_to_default+0x22e4>
    LMS7002M_regs_set(regs, 0x0641, 0x1020);
}

static inline int LMS7002M_regs_default(const int addr)
{
    if (addr == 0x0020) return 0xffff;
    118c:	8cc10726 	beq	r17,r19,15ac <set_addrs_to_default+0x46c>
    if (addr == 0x0021) return 0xe9f;
    1190:	8d00c626 	beq	r17,r20,14ac <set_addrs_to_default+0x36c>
    if (addr == 0x0022) return 0x7df;
    1194:	8d40f926 	beq	r17,r21,157c <set_addrs_to_default+0x43c>
    if (addr == 0x0023) return 0x5559;
    1198:	8d80fa26 	beq	r17,r22,1584 <set_addrs_to_default+0x444>
    if (addr == 0x0024) return 0xe4e4;
    119c:	00800904 	movi	r2,36
    11a0:	8880fa26 	beq	r17,r2,158c <set_addrs_to_default+0x44c>
    if (addr == 0x0025) return 0x101;
    11a4:	88bff6c4 	addi	r2,r17,-37
    11a8:	00c00044 	movi	r3,1
    11ac:	1880f92e 	bgeu	r3,r2,1594 <set_addrs_to_default+0x454>
    if (addr == 0x0026) return 0x101;
    if (addr == 0x0027) return 0xe4e4;
    11b0:	008009c4 	movi	r2,39
    11b4:	8880f526 	beq	r17,r2,158c <set_addrs_to_default+0x44c>
    if (addr == 0x0028) return 0x101;
    11b8:	88bff604 	addi	r2,r17,-40
    11bc:	1880f52e 	bgeu	r3,r2,1594 <set_addrs_to_default+0x454>
    if (addr == 0x0029) return 0x101;
    if (addr == 0x002A) return 0x86;
    11c0:	00800a84 	movi	r2,42
    11c4:	8880f526 	beq	r17,r2,159c <set_addrs_to_default+0x45c>
    if (addr == 0x002B) return 0x10;
    11c8:	00800ac4 	movi	r2,43
    11cc:	8880f526 	beq	r17,r2,15a4 <set_addrs_to_default+0x464>
    if (addr == 0x002C) return 0xffff;
    11d0:	00800b04 	movi	r2,44
    11d4:	8880f526 	beq	r17,r2,15ac <set_addrs_to_default+0x46c>
    if (addr == 0x002E) return 0x0;
    11d8:	00800b84 	movi	r2,46
    11dc:	88815b26 	beq	r17,r2,174c <set_addrs_to_default+0x60c>
    if (addr == 0x002F) return 0x3840;
    11e0:	00800bc4 	movi	r2,47
    11e4:	8880f326 	beq	r17,r2,15b4 <set_addrs_to_default+0x474>
    if (addr == 0x0081) return 0x0;
    11e8:	00802044 	movi	r2,129
    11ec:	88815726 	beq	r17,r2,174c <set_addrs_to_default+0x60c>
    if (addr == 0x0082) return 0x800b;
    11f0:	00802084 	movi	r2,130
    11f4:	8880f126 	beq	r17,r2,15bc <set_addrs_to_default+0x47c>
    if (addr == 0x0084) return 0x400;
    11f8:	00802104 	movi	r2,132
    11fc:	88813726 	beq	r17,r2,16dc <set_addrs_to_default+0x59c>
    if (addr == 0x0085) return 0x1;
    1200:	00802144 	movi	r2,133
    1204:	8880f526 	beq	r17,r2,15dc <set_addrs_to_default+0x49c>
    if (addr == 0x0086) return 0x4901;
    1208:	00802184 	movi	r2,134
    120c:	8880ed26 	beq	r17,r2,15c4 <set_addrs_to_default+0x484>
    if (addr == 0x0087) return 0x400;
    1210:	008021c4 	movi	r2,135
    1214:	88813126 	beq	r17,r2,16dc <set_addrs_to_default+0x59c>
    if (addr == 0x0088) return 0x780;
    1218:	00802204 	movi	r2,136
    121c:	88813126 	beq	r17,r2,16e4 <set_addrs_to_default+0x5a4>
    if (addr == 0x0089) return 0x20;
    1220:	00802244 	movi	r2,137
    1224:	88814326 	beq	r17,r2,1734 <set_addrs_to_default+0x5f4>
    if (addr == 0x008A) return 0x514;
    1228:	00802284 	movi	r2,138
    122c:	8880e726 	beq	r17,r2,15cc <set_addrs_to_default+0x48c>
    if (addr == 0x008B) return 0x2100;
    1230:	008022c4 	movi	r2,139
    1234:	8880e726 	beq	r17,r2,15d4 <set_addrs_to_default+0x494>
    if (addr == 0x008C) return 0x67b;
    1238:	00802304 	movi	r2,140
    123c:	88813326 	beq	r17,r2,170c <set_addrs_to_default+0x5cc>
    if (addr == 0x008D) return 0x0;
    1240:	00802344 	movi	r2,141
    1244:	88814126 	beq	r17,r2,174c <set_addrs_to_default+0x60c>
    if (addr == 0x0092) return 0x1;
    1248:	00802484 	movi	r2,146
    124c:	8880e326 	beq	r17,r2,15dc <set_addrs_to_default+0x49c>
    if (addr == 0x0093) return 0x0;
    1250:	88bfdb44 	addi	r2,r17,-147
    1254:	00c00144 	movi	r3,5
    1258:	18813c2e 	bgeu	r3,r2,174c <set_addrs_to_default+0x60c>
    if (addr == 0x0094) return 0x0;
    if (addr == 0x0095) return 0x0;
    if (addr == 0x0096) return 0x0;
    if (addr == 0x0097) return 0x0;
    if (addr == 0x0098) return 0x0;
    if (addr == 0x0099) return 0x6565;
    125c:	00802644 	movi	r2,153
    1260:	8880e426 	beq	r17,r2,15f4 <set_addrs_to_default+0x4b4>
    if (addr == 0x009A) return 0x658c;
    1264:	00802684 	movi	r2,154
    1268:	8880de26 	beq	r17,r2,15e4 <set_addrs_to_default+0x4a4>
    if (addr == 0x009B) return 0x6565;
    126c:	008026c4 	movi	r2,155
    1270:	8880e026 	beq	r17,r2,15f4 <set_addrs_to_default+0x4b4>
    if (addr == 0x009C) return 0x658c;
    1274:	00802704 	movi	r2,156
    1278:	8880da26 	beq	r17,r2,15e4 <set_addrs_to_default+0x4a4>
    if (addr == 0x009D) return 0x6565;
    127c:	00802744 	movi	r2,157
    1280:	8880dc26 	beq	r17,r2,15f4 <set_addrs_to_default+0x4b4>
    if (addr == 0x009E) return 0x658c;
    1284:	88bfd884 	addi	r2,r17,-158
    1288:	00c00044 	movi	r3,1
    128c:	1880d52e 	bgeu	r3,r2,15e4 <set_addrs_to_default+0x4a4>
    if (addr == 0x009F) return 0x658c;
    if (addr == 0x00A0) return 0x6565;
    1290:	88bfd804 	addi	r2,r17,-160
    1294:	01000144 	movi	r4,5
    1298:	2080d62e 	bgeu	r4,r2,15f4 <set_addrs_to_default+0x4b4>
    if (addr == 0x00A1) return 0x6565;
    if (addr == 0x00A2) return 0x6565;
    if (addr == 0x00A3) return 0x6565;
    if (addr == 0x00A4) return 0x6565;
    if (addr == 0x00A5) return 0x6565;
    if (addr == 0x00A6) return 0xf;
    129c:	00802984 	movi	r2,166
    12a0:	8880d226 	beq	r17,r2,15ec <set_addrs_to_default+0x4ac>
    if (addr == 0x00A7) return 0x6565;
    12a4:	008029c4 	movi	r2,167
    12a8:	8880d226 	beq	r17,r2,15f4 <set_addrs_to_default+0x4b4>
    if (addr == 0x00a8) return 0x0;
    12ac:	00802a04 	movi	r2,168
    12b0:	88812626 	beq	r17,r2,174c <set_addrs_to_default+0x60c>
    if (addr == 0x00aa) return 0x0;
    12b4:	88bfd584 	addi	r2,r17,-170
    12b8:	1881242e 	bgeu	r3,r2,174c <set_addrs_to_default+0x60c>
    if (addr == 0x00ab) return 0x0;
    if (addr == 0x00ad) return 0x3ff;
    12bc:	00802b44 	movi	r2,173
    12c0:	8880ce26 	beq	r17,r2,15fc <set_addrs_to_default+0x4bc>
    if (addr == 0x00ae) return 0xf000;
    12c4:	00802b84 	movi	r2,174
    12c8:	8880ce26 	beq	r17,r2,1604 <set_addrs_to_default+0x4c4>
    if (addr == 0x0100) return 0x3409;
    12cc:	00804004 	movi	r2,256
    12d0:	8880ce26 	beq	r17,r2,160c <set_addrs_to_default+0x4cc>
    if (addr == 0x0101) return 0x7800;
    12d4:	00804044 	movi	r2,257
    12d8:	8880ce26 	beq	r17,r2,1614 <set_addrs_to_default+0x4d4>
    if (addr == 0x0102) return 0x3180;
    12dc:	00804084 	movi	r2,258
    12e0:	8880ce26 	beq	r17,r2,161c <set_addrs_to_default+0x4dc>
    if (addr == 0x0103) return 0xa12;
    12e4:	008040c4 	movi	r2,259
    12e8:	8880ce26 	beq	r17,r2,1624 <set_addrs_to_default+0x4e4>
    if (addr == 0x0104) return 0x88;
    12ec:	00804104 	movi	r2,260
    12f0:	8880ce26 	beq	r17,r2,162c <set_addrs_to_default+0x4ec>
    if (addr == 0x0105) return 0x7;
    12f4:	00804144 	movi	r2,261
    12f8:	8880ce26 	beq	r17,r2,1634 <set_addrs_to_default+0x4f4>
    if (addr == 0x0106) return 0x318c;
    12fc:	88bfbe84 	addi	r2,r17,-262
    1300:	1880ce2e 	bgeu	r3,r2,163c <set_addrs_to_default+0x4fc>
    if (addr == 0x0107) return 0x318c;
    if (addr == 0x0108) return 0x9426;
    1304:	00804204 	movi	r2,264
    1308:	8880ce26 	beq	r17,r2,1644 <set_addrs_to_default+0x504>
    if (addr == 0x0109) return 0x61c1;
    130c:	00804244 	movi	r2,265
    1310:	8880ce26 	beq	r17,r2,164c <set_addrs_to_default+0x50c>
    if (addr == 0x010A) return 0x104c;
    1314:	00804284 	movi	r2,266
    1318:	8880ce26 	beq	r17,r2,1654 <set_addrs_to_default+0x514>
    if (addr == 0x010b) return 0x0;
    131c:	008042c4 	movi	r2,267
    1320:	88810a26 	beq	r17,r2,174c <set_addrs_to_default+0x60c>
    if (addr == 0x010C) return 0x88fd;
    1324:	00804304 	movi	r2,268
    1328:	8880cc26 	beq	r17,r2,165c <set_addrs_to_default+0x51c>
    if (addr == 0x010D) return 0x9e;
    132c:	00804344 	movi	r2,269
    1330:	8880cc26 	beq	r17,r2,1664 <set_addrs_to_default+0x524>
    if (addr == 0x010E) return 0x2040;
    1334:	00804384 	movi	r2,270
    1338:	8880cc26 	beq	r17,r2,166c <set_addrs_to_default+0x52c>
    if (addr == 0x010F) return 0x3042;
    133c:	008043c4 	movi	r2,271
    1340:	8880cc26 	beq	r17,r2,1674 <set_addrs_to_default+0x534>
    if (addr == 0x0110) return 0xbf4;
    1344:	00804404 	movi	r2,272
    1348:	8880cc26 	beq	r17,r2,167c <set_addrs_to_default+0x53c>
    if (addr == 0x0111) return 0x83;
    134c:	00804444 	movi	r2,273
    1350:	8880cc26 	beq	r17,r2,1684 <set_addrs_to_default+0x544>
    if (addr == 0x0112) return 0xc0e6;
    1354:	00804484 	movi	r2,274
    1358:	8880cc26 	beq	r17,r2,168c <set_addrs_to_default+0x54c>
    if (addr == 0x0113) return 0x3c3;
    135c:	008044c4 	movi	r2,275
    1360:	8880cc26 	beq	r17,r2,1694 <set_addrs_to_default+0x554>
    if (addr == 0x0114) return 0x8d;
    1364:	00804504 	movi	r2,276
    1368:	8880cc26 	beq	r17,r2,169c <set_addrs_to_default+0x55c>
    if (addr == 0x0115) return 0x9;
    136c:	00804544 	movi	r2,277
    1370:	8880cc26 	beq	r17,r2,16a4 <set_addrs_to_default+0x564>
    if (addr == 0x0116) return 0x8180;
    1374:	00804584 	movi	r2,278
    1378:	8880cc26 	beq	r17,r2,16ac <set_addrs_to_default+0x56c>
    if (addr == 0x0117) return 0x280c;
    137c:	008045c4 	movi	r2,279
    1380:	8880cc26 	beq	r17,r2,16b4 <set_addrs_to_default+0x574>
    if (addr == 0x0118) return 0x18c;
    1384:	00804604 	movi	r2,280
    1388:	8880cc26 	beq	r17,r2,16bc <set_addrs_to_default+0x57c>
    if (addr == 0x0119) return 0x18cb;
    138c:	00804644 	movi	r2,281
    1390:	8880cc26 	beq	r17,r2,16c4 <set_addrs_to_default+0x584>
    if (addr == 0x011A) return 0x2e02;
    1394:	00804684 	movi	r2,282
    1398:	8880cc26 	beq	r17,r2,16cc <set_addrs_to_default+0x58c>
    if (addr == 0x011B) return 0x0;
    139c:	008046c4 	movi	r2,283
    13a0:	8880ea26 	beq	r17,r2,174c <set_addrs_to_default+0x60c>
    if (addr == 0x011C) return 0xad43;
    13a4:	00804704 	movi	r2,284
    13a8:	8880ca26 	beq	r17,r2,16d4 <set_addrs_to_default+0x594>
    if (addr == 0x011D) return 0x400;
    13ac:	00804744 	movi	r2,285
    13b0:	8880ca26 	beq	r17,r2,16dc <set_addrs_to_default+0x59c>
    if (addr == 0x011E) return 0x780;
    13b4:	00804784 	movi	r2,286
    13b8:	8880ca26 	beq	r17,r2,16e4 <set_addrs_to_default+0x5a4>
    if (addr == 0x011F) return 0x3640;
    13bc:	008047c4 	movi	r2,287
    13c0:	8880ca26 	beq	r17,r2,16ec <set_addrs_to_default+0x5ac>
    if (addr == 0x0120) return 0xb9ff;
    13c4:	00804804 	movi	r2,288
    13c8:	8880ca26 	beq	r17,r2,16f4 <set_addrs_to_default+0x5b4>
    if (addr == 0x0121) return 0x3404;
    13cc:	00804844 	movi	r2,289
    13d0:	8880ca26 	beq	r17,r2,16fc <set_addrs_to_default+0x5bc>
    if (addr == 0x0122) return 0x33f;
    13d4:	00804884 	movi	r2,290
    13d8:	8880ca26 	beq	r17,r2,1704 <set_addrs_to_default+0x5c4>
    if (addr == 0x0123) return 0x67b;
    13dc:	008048c4 	movi	r2,291
    13e0:	8880ca26 	beq	r17,r2,170c <set_addrs_to_default+0x5cc>
    if (addr == 0x0124) return 0x0;
    13e4:	00804904 	movi	r2,292
    13e8:	8880d826 	beq	r17,r2,174c <set_addrs_to_default+0x60c>
    if (addr == 0x0125) return 0x9400;
    13ec:	00804944 	movi	r2,293
    13f0:	8880c826 	beq	r17,r2,1714 <set_addrs_to_default+0x5d4>
    if (addr == 0x0126) return 0x12ff;
    13f4:	00804984 	movi	r2,294
    13f8:	8880c826 	beq	r17,r2,171c <set_addrs_to_default+0x5dc>
    if (addr == 0x0200) return 0x81;
    13fc:	00808004 	movi	r2,512
    1400:	8880c826 	beq	r17,r2,1724 <set_addrs_to_default+0x5e4>
    if (addr == 0x0201) return 0x7ff;
    1404:	88bf7fc4 	addi	r2,r17,-513
    1408:	1880c82e 	bgeu	r3,r2,172c <set_addrs_to_default+0x5ec>
    if (addr == 0x0202) return 0x7ff;
    if (addr == 0x0203) return 0x0;
    140c:	88bf7f44 	addi	r2,r17,-515
    1410:	010001c4 	movi	r4,7
    1414:	2080cd2e 	bgeu	r4,r2,174c <set_addrs_to_default+0x60c>
    if (addr == 0x0206) return 0x0;
    if (addr == 0x0207) return 0x0;
    if (addr == 0x0208) return 0x0;
    if (addr == 0x0209) return 0x0;
    if (addr == 0x020a) return 0x0;
    if (addr == 0x020C) return 0x0;
    1418:	00808304 	movi	r2,524
    141c:	8880cb26 	beq	r17,r2,174c <set_addrs_to_default+0x60c>
    if (addr == 0x0240) return 0x20;
    1420:	00809004 	movi	r2,576
    1424:	8880c326 	beq	r17,r2,1734 <set_addrs_to_default+0x5f4>
    if (addr == 0x0241) return 0x0;
    1428:	88bf6fc4 	addi	r2,r17,-577
    142c:	01000084 	movi	r4,2
    1430:	2080c62e 	bgeu	r4,r2,174c <set_addrs_to_default+0x60c>
    if (addr == 0x0242) return 0x0;
    if (addr == 0x0243) return 0x0;
    if (addr == 0x0400) return 0x81;
    1434:	00810004 	movi	r2,1024
    1438:	8880ba26 	beq	r17,r2,1724 <set_addrs_to_default+0x5e4>
    if (addr == 0x0401) return 0x7ff;
    143c:	88beffc4 	addi	r2,r17,-1025
    1440:	1880ba2e 	bgeu	r3,r2,172c <set_addrs_to_default+0x5ec>
    if (addr == 0x0402) return 0x7ff;
    if (addr == 0x0403) return 0x0;
    1444:	88beff44 	addi	r2,r17,-1027
    1448:	00c00244 	movi	r3,9
    144c:	1880bf2e 	bgeu	r3,r2,174c <set_addrs_to_default+0x60c>
    if (addr == 0x0408) return 0x0;
    if (addr == 0x0409) return 0x0;
    if (addr == 0x040A) return 0x0;
    if (addr == 0x040B) return 0x0;
    if (addr == 0x040C) return 0x0;
    if (addr == 0x040e) return 0x0;
    1450:	00810384 	movi	r2,1038
    1454:	8880bd26 	beq	r17,r2,174c <set_addrs_to_default+0x60c>
    if (addr == 0x0440) return 0x20;
    1458:	00811004 	movi	r2,1088
    145c:	8880b526 	beq	r17,r2,1734 <set_addrs_to_default+0x5f4>
    if (addr == 0x0441) return 0x0;
    1460:	88beefc4 	addi	r2,r17,-1089
    1464:	2080b92e 	bgeu	r4,r2,174c <set_addrs_to_default+0x60c>
    if (addr == 0x0442) return 0x0;
    if (addr == 0x0443) return 0x0;
    if (addr == 0x05c0) return 0x0;
    1468:	88be9004 	addi	r2,r17,-1472
    146c:	00c00304 	movi	r3,12
    1470:	1880b62e 	bgeu	r3,r2,174c <set_addrs_to_default+0x60c>
    if (addr == 0x05c8) return 0x0;
    if (addr == 0x05c9) return 0x0;
    if (addr == 0x05ca) return 0x0;
    if (addr == 0x05cb) return 0x0;
    if (addr == 0x05cc) return 0x0;
    if (addr == 0x0600) return 0xf00;
    1474:	00818004 	movi	r2,1536
    1478:	8880b026 	beq	r17,r2,173c <set_addrs_to_default+0x5fc>
    if (addr == 0x0601) return 0x0;
    147c:	00818044 	movi	r2,1537
    1480:	8880b226 	beq	r17,r2,174c <set_addrs_to_default+0x60c>
    if (addr == 0x0602) return 0x2000;
    1484:	00818084 	movi	r2,1538
    1488:	8880ae26 	beq	r17,r2,1744 <set_addrs_to_default+0x604>
    if (addr == 0x0603) return 0x0;
    148c:	88be7f44 	addi	r2,r17,-1539
    1490:	00c000c4 	movi	r3,3
    1494:	1880ad2e 	bgeu	r3,r2,174c <set_addrs_to_default+0x60c>
    if (addr == 0x0604) return 0x0;
    if (addr == 0x0605) return 0x0;
    if (addr == 0x0606) return 0x0;
    if (addr == 0x0640) return 0xa0;
    1498:	00819004 	movi	r2,1600
    149c:	8880ad26 	beq	r17,r2,1754 <set_addrs_to_default+0x614>
    if (addr == 0x0641) return 0x1020;
    14a0:	00819044 	movi	r2,1601
    14a4:	8880ad26 	beq	r17,r2,175c <set_addrs_to_default+0x61c>
    14a8:	00003206 	br	1574 <set_addrs_to_default+0x434>
}

static inline int LMS7002M_regs_default(const int addr)
{
    if (addr == 0x0020) return 0xffff;
    if (addr == 0x0021) return 0xe9f;
    14ac:	0403a7c4 	movi	r16,3743
    {
        int value = LMS7002M_regs_default(addr);
        if (value == -1) continue; //not in map
        LMS7002M_regs_set(LMS7002M_regs(self), addr, value);
    14b0:	9009883a 	mov	r4,r18
    14b4:	0008ac80 	call	8ac8 <LMS7002M_regs>
    return -1;
}

static inline void LMS7002M_regs_set(LMS7002M_regs_t *regs, const int addr, const int value)
{
    if (addr == 0x0020)
    14b8:	8cc0aa1e 	bne	r17,r19,1764 <set_addrs_to_default+0x624>
    {
        regs->reg_0x0020_lrst_tx_b = (value >> 15) & 0x1;
    14bc:	8007d3fa 	srai	r3,r16,15
    14c0:	10c00015 	stw	r3,0(r2)
        regs->reg_0x0020_mrst_tx_b = (value >> 14) & 0x1;
    14c4:	8007d3ba 	srai	r3,r16,14
    14c8:	18c0004c 	andi	r3,r3,1
    14cc:	10c00115 	stw	r3,4(r2)
        regs->reg_0x0020_lrst_tx_a = (value >> 13) & 0x1;
    14d0:	8007d37a 	srai	r3,r16,13
    14d4:	18c0004c 	andi	r3,r3,1
    14d8:	10c00215 	stw	r3,8(r2)
        regs->reg_0x0020_mrst_tx_a = (value >> 12) & 0x1;
    14dc:	8007d33a 	srai	r3,r16,12
    14e0:	18c0004c 	andi	r3,r3,1
    14e4:	10c00315 	stw	r3,12(r2)
        regs->reg_0x0020_lrst_rx_b = (value >> 11) & 0x1;
    14e8:	8007d2fa 	srai	r3,r16,11
    14ec:	18c0004c 	andi	r3,r3,1
    14f0:	10c00415 	stw	r3,16(r2)
        regs->reg_0x0020_mrst_rx_b = (value >> 10) & 0x1;
    14f4:	8007d2ba 	srai	r3,r16,10
    14f8:	18c0004c 	andi	r3,r3,1
    14fc:	10c00515 	stw	r3,20(r2)
        regs->reg_0x0020_lrst_rx_a = (value >> 9) & 0x1;
    1500:	8007d27a 	srai	r3,r16,9
    1504:	18c0004c 	andi	r3,r3,1
    1508:	10c00615 	stw	r3,24(r2)
        regs->reg_0x0020_mrst_rx_a = (value >> 8) & 0x1;
    150c:	8007d23a 	srai	r3,r16,8
    1510:	18c0004c 	andi	r3,r3,1
    1514:	10c00715 	stw	r3,28(r2)
        regs->reg_0x0020_srst_rxfifo = (value >> 7) & 0x1;
    1518:	8007d1fa 	srai	r3,r16,7
    151c:	18c0004c 	andi	r3,r3,1
    1520:	10c00815 	stw	r3,32(r2)
        regs->reg_0x0020_srst_txfifo = (value >> 6) & 0x1;
    1524:	8007d1ba 	srai	r3,r16,6
    1528:	18c0004c 	andi	r3,r3,1
    152c:	10c00915 	stw	r3,36(r2)
        regs->reg_0x0020_rxen_b = (value >> 5) & 0x1;
    1530:	8007d17a 	srai	r3,r16,5
    1534:	18c0004c 	andi	r3,r3,1
    1538:	10c00a15 	stw	r3,40(r2)
        regs->reg_0x0020_rxen_a = (value >> 4) & 0x1;
    153c:	8007d13a 	srai	r3,r16,4
    1540:	18c0004c 	andi	r3,r3,1
    1544:	10c00b15 	stw	r3,44(r2)
        regs->reg_0x0020_txen_b = (value >> 3) & 0x1;
    1548:	8007d0fa 	srai	r3,r16,3
    154c:	18c0004c 	andi	r3,r3,1
    1550:	10c00c15 	stw	r3,48(r2)
        regs->reg_0x0020_txen_a = (value >> 2) & 0x1;
    1554:	8007d0ba 	srai	r3,r16,2
        regs->reg_0x0020_mac = (value >> 0) & 0x3;
    1558:	840000cc 	andi	r16,r16,3
    155c:	14000e15 	stw	r16,56(r2)
        regs->reg_0x0020_srst_rxfifo = (value >> 7) & 0x1;
        regs->reg_0x0020_srst_txfifo = (value >> 6) & 0x1;
        regs->reg_0x0020_rxen_b = (value >> 5) & 0x1;
        regs->reg_0x0020_rxen_a = (value >> 4) & 0x1;
        regs->reg_0x0020_txen_b = (value >> 3) & 0x1;
        regs->reg_0x0020_txen_a = (value >> 2) & 0x1;
    1560:	18c0004c 	andi	r3,r3,1
    1564:	10c00d15 	stw	r3,52(r2)
        LMS7002M_regs_spi_write(self, addr);
    1568:	880b883a 	mov	r5,r17
    156c:	9009883a 	mov	r4,r18
    1570:	00063000 	call	6300 <LMS7002M_regs_spi_write>
}

void set_addrs_to_default(LMS7002M_t *self, const LMS7002M_chan_t channel, const int start_addr, const int stop_addr)
{
    LMS7002M_set_mac_ch(self, channel);
    for (int addr = start_addr; addr <= stop_addr; addr++)
    1574:	8c400044 	addi	r17,r17,1
    1578:	003f0306 	br	1188 <__alt_data_end+0xfffc2988>

static inline int LMS7002M_regs_default(const int addr)
{
    if (addr == 0x0020) return 0xffff;
    if (addr == 0x0021) return 0xe9f;
    if (addr == 0x0022) return 0x7df;
    157c:	0401f7c4 	movi	r16,2015
    1580:	003fcb06 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x0023) return 0x5559;
    1584:	04155644 	movi	r16,21849
    1588:	003fc906 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x0024) return 0xe4e4;
    158c:	04393914 	movui	r16,58596
    1590:	003fc706 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x0025) return 0x101;
    1594:	04004044 	movi	r16,257
    1598:	003fc506 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x0026) return 0x101;
    if (addr == 0x0027) return 0xe4e4;
    if (addr == 0x0028) return 0x101;
    if (addr == 0x0029) return 0x101;
    if (addr == 0x002A) return 0x86;
    159c:	04002184 	movi	r16,134
    15a0:	003fc306 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x002B) return 0x10;
    15a4:	04000404 	movi	r16,16
    15a8:	003fc106 	br	14b0 <__alt_data_end+0xfffc2cb0>
    LMS7002M_regs_set(regs, 0x0641, 0x1020);
}

static inline int LMS7002M_regs_default(const int addr)
{
    if (addr == 0x0020) return 0xffff;
    15ac:	043fffd4 	movui	r16,65535
    15b0:	003fbf06 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x0029) return 0x101;
    if (addr == 0x002A) return 0x86;
    if (addr == 0x002B) return 0x10;
    if (addr == 0x002C) return 0xffff;
    if (addr == 0x002E) return 0x0;
    if (addr == 0x002F) return 0x3840;
    15b4:	040e1004 	movi	r16,14400
    15b8:	003fbd06 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x0081) return 0x0;
    if (addr == 0x0082) return 0x800b;
    15bc:	042002d4 	movui	r16,32779
    15c0:	003fbb06 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x0084) return 0x400;
    if (addr == 0x0085) return 0x1;
    if (addr == 0x0086) return 0x4901;
    15c4:	04124044 	movi	r16,18689
    15c8:	003fb906 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x0087) return 0x400;
    if (addr == 0x0088) return 0x780;
    if (addr == 0x0089) return 0x20;
    if (addr == 0x008A) return 0x514;
    15cc:	04014504 	movi	r16,1300
    15d0:	003fb706 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x008B) return 0x2100;
    15d4:	04084004 	movi	r16,8448
    15d8:	003fb506 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x002E) return 0x0;
    if (addr == 0x002F) return 0x3840;
    if (addr == 0x0081) return 0x0;
    if (addr == 0x0082) return 0x800b;
    if (addr == 0x0084) return 0x400;
    if (addr == 0x0085) return 0x1;
    15dc:	04000044 	movi	r16,1
    15e0:	003fb306 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x0095) return 0x0;
    if (addr == 0x0096) return 0x0;
    if (addr == 0x0097) return 0x0;
    if (addr == 0x0098) return 0x0;
    if (addr == 0x0099) return 0x6565;
    if (addr == 0x009A) return 0x658c;
    15e4:	04196304 	movi	r16,25996
    15e8:	003fb106 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x00A1) return 0x6565;
    if (addr == 0x00A2) return 0x6565;
    if (addr == 0x00A3) return 0x6565;
    if (addr == 0x00A4) return 0x6565;
    if (addr == 0x00A5) return 0x6565;
    if (addr == 0x00A6) return 0xf;
    15ec:	040003c4 	movi	r16,15
    15f0:	003faf06 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x0094) return 0x0;
    if (addr == 0x0095) return 0x0;
    if (addr == 0x0096) return 0x0;
    if (addr == 0x0097) return 0x0;
    if (addr == 0x0098) return 0x0;
    if (addr == 0x0099) return 0x6565;
    15f4:	04195944 	movi	r16,25957
    15f8:	003fad06 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x00A6) return 0xf;
    if (addr == 0x00A7) return 0x6565;
    if (addr == 0x00a8) return 0x0;
    if (addr == 0x00aa) return 0x0;
    if (addr == 0x00ab) return 0x0;
    if (addr == 0x00ad) return 0x3ff;
    15fc:	0400ffc4 	movi	r16,1023
    1600:	003fab06 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x00ae) return 0xf000;
    1604:	043c0014 	movui	r16,61440
    1608:	003fa906 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x0100) return 0x3409;
    160c:	040d0244 	movi	r16,13321
    1610:	003fa706 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x0101) return 0x7800;
    1614:	041e0004 	movi	r16,30720
    1618:	003fa506 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x0102) return 0x3180;
    161c:	040c6004 	movi	r16,12672
    1620:	003fa306 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x0103) return 0xa12;
    1624:	04028484 	movi	r16,2578
    1628:	003fa106 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x0104) return 0x88;
    162c:	04002204 	movi	r16,136
    1630:	003f9f06 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x0105) return 0x7;
    1634:	040001c4 	movi	r16,7
    1638:	003f9d06 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x0106) return 0x318c;
    163c:	040c6304 	movi	r16,12684
    1640:	003f9b06 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x0107) return 0x318c;
    if (addr == 0x0108) return 0x9426;
    1644:	04250994 	movui	r16,37926
    1648:	003f9906 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x0109) return 0x61c1;
    164c:	04187044 	movi	r16,25025
    1650:	003f9706 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x010A) return 0x104c;
    1654:	04041304 	movi	r16,4172
    1658:	003f9506 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x010b) return 0x0;
    if (addr == 0x010C) return 0x88fd;
    165c:	04223f54 	movui	r16,35069
    1660:	003f9306 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x010D) return 0x9e;
    1664:	04002784 	movi	r16,158
    1668:	003f9106 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x010E) return 0x2040;
    166c:	04081004 	movi	r16,8256
    1670:	003f8f06 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x010F) return 0x3042;
    1674:	040c1084 	movi	r16,12354
    1678:	003f8d06 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x0110) return 0xbf4;
    167c:	0402fd04 	movi	r16,3060
    1680:	003f8b06 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x0111) return 0x83;
    1684:	040020c4 	movi	r16,131
    1688:	003f8906 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x0112) return 0xc0e6;
    168c:	04303994 	movui	r16,49382
    1690:	003f8706 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x0113) return 0x3c3;
    1694:	0400f0c4 	movi	r16,963
    1698:	003f8506 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x0114) return 0x8d;
    169c:	04002344 	movi	r16,141
    16a0:	003f8306 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x0115) return 0x9;
    16a4:	04000244 	movi	r16,9
    16a8:	003f8106 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x0116) return 0x8180;
    16ac:	04206014 	movui	r16,33152
    16b0:	003f7f06 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x0117) return 0x280c;
    16b4:	040a0304 	movi	r16,10252
    16b8:	003f7d06 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x0118) return 0x18c;
    16bc:	04006304 	movi	r16,396
    16c0:	003f7b06 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x0119) return 0x18cb;
    16c4:	040632c4 	movi	r16,6347
    16c8:	003f7906 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x011A) return 0x2e02;
    16cc:	040b8084 	movi	r16,11778
    16d0:	003f7706 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x011B) return 0x0;
    if (addr == 0x011C) return 0xad43;
    16d4:	042b50d4 	movui	r16,44355
    16d8:	003f7506 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x011D) return 0x400;
    16dc:	04010004 	movi	r16,1024
    16e0:	003f7306 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x011E) return 0x780;
    16e4:	0401e004 	movi	r16,1920
    16e8:	003f7106 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x011F) return 0x3640;
    16ec:	040d9004 	movi	r16,13888
    16f0:	003f6f06 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x0120) return 0xb9ff;
    16f4:	042e7fd4 	movui	r16,47615
    16f8:	003f6d06 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x0121) return 0x3404;
    16fc:	040d0104 	movi	r16,13316
    1700:	003f6b06 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x0122) return 0x33f;
    1704:	0400cfc4 	movi	r16,831
    1708:	003f6906 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x0123) return 0x67b;
    170c:	04019ec4 	movi	r16,1659
    1710:	003f6706 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x0124) return 0x0;
    if (addr == 0x0125) return 0x9400;
    1714:	04250014 	movui	r16,37888
    1718:	003f6506 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x0126) return 0x12ff;
    171c:	0404bfc4 	movi	r16,4863
    1720:	003f6306 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x0200) return 0x81;
    1724:	04002044 	movi	r16,129
    1728:	003f6106 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x0201) return 0x7ff;
    172c:	0401ffc4 	movi	r16,2047
    1730:	003f5f06 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x0207) return 0x0;
    if (addr == 0x0208) return 0x0;
    if (addr == 0x0209) return 0x0;
    if (addr == 0x020a) return 0x0;
    if (addr == 0x020C) return 0x0;
    if (addr == 0x0240) return 0x20;
    1734:	04000804 	movi	r16,32
    1738:	003f5d06 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x05c8) return 0x0;
    if (addr == 0x05c9) return 0x0;
    if (addr == 0x05ca) return 0x0;
    if (addr == 0x05cb) return 0x0;
    if (addr == 0x05cc) return 0x0;
    if (addr == 0x0600) return 0xf00;
    173c:	0403c004 	movi	r16,3840
    1740:	003f5b06 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x0601) return 0x0;
    if (addr == 0x0602) return 0x2000;
    1744:	04080004 	movi	r16,8192
    1748:	003f5906 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x0116) return 0x8180;
    if (addr == 0x0117) return 0x280c;
    if (addr == 0x0118) return 0x18c;
    if (addr == 0x0119) return 0x18cb;
    if (addr == 0x011A) return 0x2e02;
    if (addr == 0x011B) return 0x0;
    174c:	0021883a 	mov	r16,zero
    1750:	003f5706 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x0602) return 0x2000;
    if (addr == 0x0603) return 0x0;
    if (addr == 0x0604) return 0x0;
    if (addr == 0x0605) return 0x0;
    if (addr == 0x0606) return 0x0;
    if (addr == 0x0640) return 0xa0;
    1754:	04002804 	movi	r16,160
    1758:	003f5506 	br	14b0 <__alt_data_end+0xfffc2cb0>
    if (addr == 0x0641) return 0x1020;
    175c:	04040804 	movi	r16,4128
    1760:	003f5306 	br	14b0 <__alt_data_end+0xfffc2cb0>
        regs->reg_0x0020_txen_b = (value >> 3) & 0x1;
        regs->reg_0x0020_txen_a = (value >> 2) & 0x1;
        regs->reg_0x0020_mac = (value >> 0) & 0x3;
        return;
    }
    if (addr == 0x0021)
    1764:	8d00241e 	bne	r17,r20,17f8 <set_addrs_to_default+0x6b8>
    {
        regs->reg_0x0021_tx_clk_pe = (value >> 11) & 0x1;
    1768:	8007d2fa 	srai	r3,r16,11
    176c:	18c0004c 	andi	r3,r3,1
    1770:	10c00f15 	stw	r3,60(r2)
        regs->reg_0x0021_rx_clk_pe = (value >> 10) & 0x1;
    1774:	8007d2ba 	srai	r3,r16,10
    1778:	18c0004c 	andi	r3,r3,1
    177c:	10c01015 	stw	r3,64(r2)
        regs->reg_0x0021_sda_pe = (value >> 9) & 0x1;
    1780:	8007d27a 	srai	r3,r16,9
    1784:	18c0004c 	andi	r3,r3,1
    1788:	10c01115 	stw	r3,68(r2)
        regs->reg_0x0021_sda_ds = (value >> 8) & 0x1;
    178c:	8007d23a 	srai	r3,r16,8
    1790:	18c0004c 	andi	r3,r3,1
    1794:	10c01215 	stw	r3,72(r2)
        regs->reg_0x0021_scl_pe = (value >> 7) & 0x1;
    1798:	8007d1fa 	srai	r3,r16,7
    179c:	18c0004c 	andi	r3,r3,1
    17a0:	10c01315 	stw	r3,76(r2)
        regs->reg_0x0021_scl_ds = (value >> 6) & 0x1;
    17a4:	8007d1ba 	srai	r3,r16,6
    17a8:	18c0004c 	andi	r3,r3,1
    17ac:	10c01415 	stw	r3,80(r2)
        regs->reg_0x0021_sdio_ds = (value >> 5) & 0x1;
    17b0:	8007d17a 	srai	r3,r16,5
    17b4:	18c0004c 	andi	r3,r3,1
    17b8:	10c01515 	stw	r3,84(r2)
        regs->reg_0x0021_sdio_pe = (value >> 4) & 0x1;
    17bc:	8007d13a 	srai	r3,r16,4
    17c0:	18c0004c 	andi	r3,r3,1
    17c4:	10c01615 	stw	r3,88(r2)
        regs->reg_0x0021_sdo_pe = (value >> 3) & 0x1;
    17c8:	8007d0fa 	srai	r3,r16,3
    17cc:	18c0004c 	andi	r3,r3,1
    17d0:	10c01715 	stw	r3,92(r2)
        regs->reg_0x0021_sclk_pe = (value >> 2) & 0x1;
    17d4:	8007d0ba 	srai	r3,r16,2
    17d8:	18c0004c 	andi	r3,r3,1
    17dc:	10c01815 	stw	r3,96(r2)
        regs->reg_0x0021_sen_pe = (value >> 1) & 0x1;
    17e0:	8007d07a 	srai	r3,r16,1
        regs->reg_0x0021_spimode = (value >> 0) & 0x1;
    17e4:	8400004c 	andi	r16,r16,1
    17e8:	14001a15 	stw	r16,104(r2)
        regs->reg_0x0021_scl_ds = (value >> 6) & 0x1;
        regs->reg_0x0021_sdio_ds = (value >> 5) & 0x1;
        regs->reg_0x0021_sdio_pe = (value >> 4) & 0x1;
        regs->reg_0x0021_sdo_pe = (value >> 3) & 0x1;
        regs->reg_0x0021_sclk_pe = (value >> 2) & 0x1;
        regs->reg_0x0021_sen_pe = (value >> 1) & 0x1;
    17ec:	18c0004c 	andi	r3,r3,1
    17f0:	10c01915 	stw	r3,100(r2)
    17f4:	003f5c06 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0021_spimode = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0022)
    17f8:	8d40241e 	bne	r17,r21,188c <set_addrs_to_default+0x74c>
    {
        regs->reg_0x0022_diq2_ds = (value >> 11) & 0x1;
    17fc:	8007d2fa 	srai	r3,r16,11
    1800:	18c0004c 	andi	r3,r3,1
    1804:	10c01b15 	stw	r3,108(r2)
        regs->reg_0x0022_diq2_pe = (value >> 10) & 0x1;
    1808:	8007d2ba 	srai	r3,r16,10
    180c:	18c0004c 	andi	r3,r3,1
    1810:	10c01c15 	stw	r3,112(r2)
        regs->reg_0x0022_iq_sel_en_2_pe = (value >> 9) & 0x1;
    1814:	8007d27a 	srai	r3,r16,9
    1818:	18c0004c 	andi	r3,r3,1
    181c:	10c01d15 	stw	r3,116(r2)
        regs->reg_0x0022_txnrx2_pe = (value >> 8) & 0x1;
    1820:	8007d23a 	srai	r3,r16,8
    1824:	18c0004c 	andi	r3,r3,1
    1828:	10c01e15 	stw	r3,120(r2)
        regs->reg_0x0022_fclk2_pe = (value >> 7) & 0x1;
    182c:	8007d1fa 	srai	r3,r16,7
    1830:	18c0004c 	andi	r3,r3,1
    1834:	10c01f15 	stw	r3,124(r2)
        regs->reg_0x0022_mclk2_pe = (value >> 6) & 0x1;
    1838:	8007d1ba 	srai	r3,r16,6
    183c:	18c0004c 	andi	r3,r3,1
    1840:	10c02015 	stw	r3,128(r2)
        regs->reg_0x0022_diq1_ds = (value >> 5) & 0x1;
    1844:	8007d17a 	srai	r3,r16,5
    1848:	18c0004c 	andi	r3,r3,1
    184c:	10c02115 	stw	r3,132(r2)
        regs->reg_0x0022_diq1_pe = (value >> 4) & 0x1;
    1850:	8007d13a 	srai	r3,r16,4
    1854:	18c0004c 	andi	r3,r3,1
    1858:	10c02215 	stw	r3,136(r2)
        regs->reg_0x0022_iq_sel_en_1_pe = (value >> 3) & 0x1;
    185c:	8007d0fa 	srai	r3,r16,3
    1860:	18c0004c 	andi	r3,r3,1
    1864:	10c02315 	stw	r3,140(r2)
        regs->reg_0x0022_txnrx1_pe = (value >> 2) & 0x1;
    1868:	8007d0ba 	srai	r3,r16,2
    186c:	18c0004c 	andi	r3,r3,1
    1870:	10c02415 	stw	r3,144(r2)
        regs->reg_0x0022_fclk1_pe = (value >> 1) & 0x1;
    1874:	8007d07a 	srai	r3,r16,1
        regs->reg_0x0022_mclk1_pe = (value >> 0) & 0x1;
    1878:	8400004c 	andi	r16,r16,1
    187c:	14002615 	stw	r16,152(r2)
        regs->reg_0x0022_mclk2_pe = (value >> 6) & 0x1;
        regs->reg_0x0022_diq1_ds = (value >> 5) & 0x1;
        regs->reg_0x0022_diq1_pe = (value >> 4) & 0x1;
        regs->reg_0x0022_iq_sel_en_1_pe = (value >> 3) & 0x1;
        regs->reg_0x0022_txnrx1_pe = (value >> 2) & 0x1;
        regs->reg_0x0022_fclk1_pe = (value >> 1) & 0x1;
    1880:	18c0004c 	andi	r3,r3,1
    1884:	10c02515 	stw	r3,148(r2)
    1888:	003f3706 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0022_mclk1_pe = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0023)
    188c:	8d802c1e 	bne	r17,r22,1940 <set_addrs_to_default+0x800>
    {
        regs->reg_0x0023_diqdirctr2 = (value >> 15) & 0x1;
    1890:	8007d3fa 	srai	r3,r16,15
    1894:	10c02715 	stw	r3,156(r2)
        regs->reg_0x0023_diqdir2 = (value >> 14) & 0x1;
    1898:	8007d3ba 	srai	r3,r16,14
    189c:	18c0004c 	andi	r3,r3,1
    18a0:	10c02815 	stw	r3,160(r2)
        regs->reg_0x0023_diqdirctr1 = (value >> 13) & 0x1;
    18a4:	8007d37a 	srai	r3,r16,13
    18a8:	18c0004c 	andi	r3,r3,1
    18ac:	10c02915 	stw	r3,164(r2)
        regs->reg_0x0023_diqdir1 = (value >> 12) & 0x1;
    18b0:	8007d33a 	srai	r3,r16,12
    18b4:	18c0004c 	andi	r3,r3,1
    18b8:	10c02a15 	stw	r3,168(r2)
        regs->reg_0x0023_enabledirctr2 = (value >> 11) & 0x1;
    18bc:	8007d2fa 	srai	r3,r16,11
    18c0:	18c0004c 	andi	r3,r3,1
    18c4:	10c02b15 	stw	r3,172(r2)
        regs->reg_0x0023_enabledir2 = (value >> 10) & 0x1;
    18c8:	8007d2ba 	srai	r3,r16,10
    18cc:	18c0004c 	andi	r3,r3,1
    18d0:	10c02c15 	stw	r3,176(r2)
        regs->reg_0x0023_enabledirctr1 = (value >> 9) & 0x1;
    18d4:	8007d27a 	srai	r3,r16,9
    18d8:	18c0004c 	andi	r3,r3,1
    18dc:	10c02d15 	stw	r3,180(r2)
        regs->reg_0x0023_enabledir1 = (value >> 8) & 0x1;
    18e0:	8007d23a 	srai	r3,r16,8
    18e4:	18c0004c 	andi	r3,r3,1
    18e8:	10c02e15 	stw	r3,184(r2)
        regs->reg_0x0023_mod_en = (value >> 6) & 0x1;
    18ec:	8007d1ba 	srai	r3,r16,6
    18f0:	18c0004c 	andi	r3,r3,1
    18f4:	10c02f15 	stw	r3,188(r2)
        regs->reg_0x0023_lml2_fidm = (value >> 5) & 0x1;
    18f8:	8007d17a 	srai	r3,r16,5
    18fc:	18c0004c 	andi	r3,r3,1
    1900:	10c03015 	stw	r3,192(r2)
        regs->reg_0x0023_lml2_rxntxiq = (value >> 4) & 0x1;
    1904:	8007d13a 	srai	r3,r16,4
    1908:	18c0004c 	andi	r3,r3,1
    190c:	10c03115 	stw	r3,196(r2)
        regs->reg_0x0023_lml2_mode = (value >> 3) & 0x1;
    1910:	8007d0fa 	srai	r3,r16,3
    1914:	18c0004c 	andi	r3,r3,1
    1918:	10c03215 	stw	r3,200(r2)
        regs->reg_0x0023_lml1_fidm = (value >> 2) & 0x1;
    191c:	8007d0ba 	srai	r3,r16,2
    1920:	18c0004c 	andi	r3,r3,1
    1924:	10c03315 	stw	r3,204(r2)
        regs->reg_0x0023_lml1_rxntxiq = (value >> 1) & 0x1;
    1928:	8007d07a 	srai	r3,r16,1
        regs->reg_0x0023_lml1_mode = (value >> 0) & 0x1;
    192c:	8400004c 	andi	r16,r16,1
    1930:	14003515 	stw	r16,212(r2)
        regs->reg_0x0023_mod_en = (value >> 6) & 0x1;
        regs->reg_0x0023_lml2_fidm = (value >> 5) & 0x1;
        regs->reg_0x0023_lml2_rxntxiq = (value >> 4) & 0x1;
        regs->reg_0x0023_lml2_mode = (value >> 3) & 0x1;
        regs->reg_0x0023_lml1_fidm = (value >> 2) & 0x1;
        regs->reg_0x0023_lml1_rxntxiq = (value >> 1) & 0x1;
    1934:	18c0004c 	andi	r3,r3,1
    1938:	10c03415 	stw	r3,208(r2)
    193c:	003f0a06 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0023_lml1_mode = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0024)
    1940:	00c00904 	movi	r3,36
    1944:	88c0171e 	bne	r17,r3,19a4 <set_addrs_to_default+0x864>
    {
        regs->reg_0x0024_lml1_s3s = (value >> 14) & 0x3;
    1948:	8007d3ba 	srai	r3,r16,14
    194c:	10c03615 	stw	r3,216(r2)
        regs->reg_0x0024_lml1_s2s = (value >> 12) & 0x3;
    1950:	8007d33a 	srai	r3,r16,12
    1954:	18c000cc 	andi	r3,r3,3
    1958:	10c03715 	stw	r3,220(r2)
        regs->reg_0x0024_lml1_s1s = (value >> 10) & 0x3;
    195c:	8007d2ba 	srai	r3,r16,10
    1960:	18c000cc 	andi	r3,r3,3
    1964:	10c03815 	stw	r3,224(r2)
        regs->reg_0x0024_lml1_s0s = (value >> 8) & 0x3;
    1968:	8007d23a 	srai	r3,r16,8
    196c:	18c000cc 	andi	r3,r3,3
    1970:	10c03915 	stw	r3,228(r2)
        regs->reg_0x0024_lml1_bqp = (value >> 6) & 0x3;
    1974:	8007d1ba 	srai	r3,r16,6
    1978:	18c000cc 	andi	r3,r3,3
    197c:	10c03a15 	stw	r3,232(r2)
        regs->reg_0x0024_lml1_bip = (value >> 4) & 0x3;
    1980:	8007d13a 	srai	r3,r16,4
    1984:	18c000cc 	andi	r3,r3,3
    1988:	10c03b15 	stw	r3,236(r2)
        regs->reg_0x0024_lml1_aqp = (value >> 2) & 0x3;
    198c:	8007d0ba 	srai	r3,r16,2
        regs->reg_0x0024_lml1_aip = (value >> 0) & 0x3;
    1990:	840000cc 	andi	r16,r16,3
    1994:	14003d15 	stw	r16,244(r2)
        regs->reg_0x0024_lml1_s2s = (value >> 12) & 0x3;
        regs->reg_0x0024_lml1_s1s = (value >> 10) & 0x3;
        regs->reg_0x0024_lml1_s0s = (value >> 8) & 0x3;
        regs->reg_0x0024_lml1_bqp = (value >> 6) & 0x3;
        regs->reg_0x0024_lml1_bip = (value >> 4) & 0x3;
        regs->reg_0x0024_lml1_aqp = (value >> 2) & 0x3;
    1998:	18c000cc 	andi	r3,r3,3
    199c:	10c03c15 	stw	r3,240(r2)
    19a0:	003ef106 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0024_lml1_aip = (value >> 0) & 0x3;
        return;
    }
    if (addr == 0x0025)
    19a4:	00c00944 	movi	r3,37
    19a8:	88c0021e 	bne	r17,r3,19b4 <set_addrs_to_default+0x874>
    {
        regs->reg_0x0025_value = (value >> 0) & 0xffff;
    19ac:	14003e15 	stw	r16,248(r2)
    19b0:	003eed06 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x0026)
    19b4:	00c00984 	movi	r3,38
    19b8:	88c0021e 	bne	r17,r3,19c4 <set_addrs_to_default+0x884>
    {
        regs->reg_0x0026_value = (value >> 0) & 0xffff;
    19bc:	14003f15 	stw	r16,252(r2)
    19c0:	003ee906 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x0027)
    19c4:	00c009c4 	movi	r3,39
    19c8:	88c0171e 	bne	r17,r3,1a28 <set_addrs_to_default+0x8e8>
    {
        regs->reg_0x0027_lml2_s3s = (value >> 14) & 0x3;
    19cc:	8007d3ba 	srai	r3,r16,14
    19d0:	10c04015 	stw	r3,256(r2)
        regs->reg_0x0027_lml2_s2s = (value >> 12) & 0x3;
    19d4:	8007d33a 	srai	r3,r16,12
    19d8:	18c000cc 	andi	r3,r3,3
    19dc:	10c04115 	stw	r3,260(r2)
        regs->reg_0x0027_lml2_s1s = (value >> 10) & 0x3;
    19e0:	8007d2ba 	srai	r3,r16,10
    19e4:	18c000cc 	andi	r3,r3,3
    19e8:	10c04215 	stw	r3,264(r2)
        regs->reg_0x0027_lml2_s0s = (value >> 8) & 0x3;
    19ec:	8007d23a 	srai	r3,r16,8
    19f0:	18c000cc 	andi	r3,r3,3
    19f4:	10c04315 	stw	r3,268(r2)
        regs->reg_0x0027_lml2_bqp = (value >> 6) & 0x3;
    19f8:	8007d1ba 	srai	r3,r16,6
    19fc:	18c000cc 	andi	r3,r3,3
    1a00:	10c04415 	stw	r3,272(r2)
        regs->reg_0x0027_lml2_bip = (value >> 4) & 0x3;
    1a04:	8007d13a 	srai	r3,r16,4
    1a08:	18c000cc 	andi	r3,r3,3
    1a0c:	10c04515 	stw	r3,276(r2)
        regs->reg_0x0027_lml2_aqp = (value >> 2) & 0x3;
    1a10:	8007d0ba 	srai	r3,r16,2
        regs->reg_0x0027_lml2_aip = (value >> 0) & 0x3;
    1a14:	840000cc 	andi	r16,r16,3
    1a18:	14004715 	stw	r16,284(r2)
        regs->reg_0x0027_lml2_s2s = (value >> 12) & 0x3;
        regs->reg_0x0027_lml2_s1s = (value >> 10) & 0x3;
        regs->reg_0x0027_lml2_s0s = (value >> 8) & 0x3;
        regs->reg_0x0027_lml2_bqp = (value >> 6) & 0x3;
        regs->reg_0x0027_lml2_bip = (value >> 4) & 0x3;
        regs->reg_0x0027_lml2_aqp = (value >> 2) & 0x3;
    1a1c:	18c000cc 	andi	r3,r3,3
    1a20:	10c04615 	stw	r3,280(r2)
    1a24:	003ed006 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0027_lml2_aip = (value >> 0) & 0x3;
        return;
    }
    if (addr == 0x0028)
    1a28:	00c00a04 	movi	r3,40
    1a2c:	88c0021e 	bne	r17,r3,1a38 <set_addrs_to_default+0x8f8>
    {
        regs->reg_0x0028_value = (value >> 0) & 0xffff;
    1a30:	14004815 	stw	r16,288(r2)
    1a34:	003ecc06 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x0029)
    1a38:	00c00a44 	movi	r3,41
    1a3c:	88c0021e 	bne	r17,r3,1a48 <set_addrs_to_default+0x908>
    {
        regs->reg_0x0029_value = (value >> 0) & 0xffff;
    1a40:	14004915 	stw	r16,292(r2)
    1a44:	003ec806 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x002A)
    1a48:	00c00a84 	movi	r3,42
    1a4c:	88c0121e 	bne	r17,r3,1a98 <set_addrs_to_default+0x958>
    {
        regs->reg_0x002a_rx_mux = (value >> 10) & 0x3;
    1a50:	8007d2ba 	srai	r3,r16,10
    1a54:	18c000cc 	andi	r3,r3,3
    1a58:	10c04a15 	stw	r3,296(r2)
        regs->reg_0x002a_tx_mux = (value >> 8) & 0x3;
    1a5c:	8007d23a 	srai	r3,r16,8
    1a60:	18c000cc 	andi	r3,r3,3
    1a64:	10c04b15 	stw	r3,300(r2)
        regs->reg_0x002a_txrdclk_mux = (value >> 6) & 0x3;
    1a68:	8007d1ba 	srai	r3,r16,6
    1a6c:	18c000cc 	andi	r3,r3,3
    1a70:	10c04c15 	stw	r3,304(r2)
        regs->reg_0x002a_txwrclk_mux = (value >> 4) & 0x3;
    1a74:	8007d13a 	srai	r3,r16,4
    1a78:	18c000cc 	andi	r3,r3,3
    1a7c:	10c04d15 	stw	r3,308(r2)
        regs->reg_0x002a_rxrdclk_mux = (value >> 2) & 0x3;
    1a80:	8007d0ba 	srai	r3,r16,2
        regs->reg_0x002a_rxwrclk_mux = (value >> 0) & 0x3;
    1a84:	840000cc 	andi	r16,r16,3
    1a88:	14004f15 	stw	r16,316(r2)
    {
        regs->reg_0x002a_rx_mux = (value >> 10) & 0x3;
        regs->reg_0x002a_tx_mux = (value >> 8) & 0x3;
        regs->reg_0x002a_txrdclk_mux = (value >> 6) & 0x3;
        regs->reg_0x002a_txwrclk_mux = (value >> 4) & 0x3;
        regs->reg_0x002a_rxrdclk_mux = (value >> 2) & 0x3;
    1a8c:	18c000cc 	andi	r3,r3,3
    1a90:	10c04e15 	stw	r3,312(r2)
    1a94:	003eb406 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x002a_rxwrclk_mux = (value >> 0) & 0x3;
        return;
    }
    if (addr == 0x002B)
    1a98:	00c00ac4 	movi	r3,43
    1a9c:	88c0111e 	bne	r17,r3,1ae4 <set_addrs_to_default+0x9a4>
    {
        regs->reg_0x002b_fclk2_inv = (value >> 15) & 0x1;
    1aa0:	8007d3fa 	srai	r3,r16,15
    1aa4:	10c05015 	stw	r3,320(r2)
        regs->reg_0x002b_fclk1_inv = (value >> 14) & 0x1;
    1aa8:	8007d3ba 	srai	r3,r16,14
    1aac:	18c0004c 	andi	r3,r3,1
    1ab0:	10c05115 	stw	r3,324(r2)
        regs->reg_0x002b_mclk2src = (value >> 4) & 0x3;
    1ab4:	8007d13a 	srai	r3,r16,4
    1ab8:	18c000cc 	andi	r3,r3,3
    1abc:	10c05215 	stw	r3,328(r2)
        regs->reg_0x002b_mclk1src = (value >> 2) & 0x3;
    1ac0:	8007d0ba 	srai	r3,r16,2
    1ac4:	18c000cc 	andi	r3,r3,3
    1ac8:	10c05315 	stw	r3,332(r2)
        regs->reg_0x002b_txdiven = (value >> 1) & 0x1;
    1acc:	8007d07a 	srai	r3,r16,1
        regs->reg_0x002b_rxdiven = (value >> 0) & 0x1;
    1ad0:	8400004c 	andi	r16,r16,1
    1ad4:	14005515 	stw	r16,340(r2)
    {
        regs->reg_0x002b_fclk2_inv = (value >> 15) & 0x1;
        regs->reg_0x002b_fclk1_inv = (value >> 14) & 0x1;
        regs->reg_0x002b_mclk2src = (value >> 4) & 0x3;
        regs->reg_0x002b_mclk1src = (value >> 2) & 0x3;
        regs->reg_0x002b_txdiven = (value >> 1) & 0x1;
    1ad8:	18c0004c 	andi	r3,r3,1
    1adc:	10c05415 	stw	r3,336(r2)
    1ae0:	003ea106 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x002b_rxdiven = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x002C)
    1ae4:	00c00b04 	movi	r3,44
    1ae8:	88c0051e 	bne	r17,r3,1b00 <set_addrs_to_default+0x9c0>
    {
        regs->reg_0x002c_txtspclk_div = (value >> 8) & 0xff;
    1aec:	8007d23a 	srai	r3,r16,8
        regs->reg_0x002c_rxtspclk_div = (value >> 0) & 0xff;
    1af0:	84003fcc 	andi	r16,r16,255
    1af4:	14005715 	stw	r16,348(r2)
        regs->reg_0x002b_rxdiven = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x002C)
    {
        regs->reg_0x002c_txtspclk_div = (value >> 8) & 0xff;
    1af8:	10c05615 	stw	r3,344(r2)
    1afc:	003e9a06 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x002c_rxtspclk_div = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x002E)
    1b00:	00c00b84 	movi	r3,46
    1b04:	88c0031e 	bne	r17,r3,1b14 <set_addrs_to_default+0x9d4>
    {
        regs->reg_0x002e_mimo_siso = (value >> 15) & 0x1;
    1b08:	8021d3fa 	srai	r16,r16,15
    1b0c:	14005815 	stw	r16,352(r2)
    1b10:	003e9506 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x002F)
    1b14:	00c00bc4 	movi	r3,47
    1b18:	88c0081e 	bne	r17,r3,1b3c <set_addrs_to_default+0x9fc>
    {
        regs->reg_0x002f_ver = (value >> 11) & 0x1f;
    1b1c:	8007d2fa 	srai	r3,r16,11
    1b20:	10c05915 	stw	r3,356(r2)
        regs->reg_0x002f_rev = (value >> 6) & 0x1f;
    1b24:	8007d1ba 	srai	r3,r16,6
        regs->reg_0x002f_mask = (value >> 0) & 0x3f;
    1b28:	84000fcc 	andi	r16,r16,63
    1b2c:	14005b15 	stw	r16,364(r2)
        return;
    }
    if (addr == 0x002F)
    {
        regs->reg_0x002f_ver = (value >> 11) & 0x1f;
        regs->reg_0x002f_rev = (value >> 6) & 0x1f;
    1b30:	18c007cc 	andi	r3,r3,31
    1b34:	10c05a15 	stw	r3,360(r2)
    1b38:	003e8b06 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x002f_mask = (value >> 0) & 0x3f;
        return;
    }
    if (addr == 0x0081)
    1b3c:	00c02044 	movi	r3,129
    1b40:	88c00c1e 	bne	r17,r3,1b74 <set_addrs_to_default+0xa34>
    {
        regs->reg_0x0081_en_dir_ldo = (value >> 3) & 0x1;
    1b44:	8007d0fa 	srai	r3,r16,3
    1b48:	18c0004c 	andi	r3,r3,1
    1b4c:	10c05c15 	stw	r3,368(r2)
        regs->reg_0x0081_en_dir_cgen = (value >> 2) & 0x1;
    1b50:	8007d0ba 	srai	r3,r16,2
    1b54:	18c0004c 	andi	r3,r3,1
    1b58:	10c05d15 	stw	r3,372(r2)
        regs->reg_0x0081_en_dir_xbuf = (value >> 1) & 0x1;
    1b5c:	8007d07a 	srai	r3,r16,1
        regs->reg_0x0081_en_dir_afe = (value >> 0) & 0x1;
    1b60:	8400004c 	andi	r16,r16,1
    1b64:	14005f15 	stw	r16,380(r2)
    }
    if (addr == 0x0081)
    {
        regs->reg_0x0081_en_dir_ldo = (value >> 3) & 0x1;
        regs->reg_0x0081_en_dir_cgen = (value >> 2) & 0x1;
        regs->reg_0x0081_en_dir_xbuf = (value >> 1) & 0x1;
    1b68:	18c0004c 	andi	r3,r3,1
    1b6c:	10c05e15 	stw	r3,376(r2)
    1b70:	003e7d06 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0081_en_dir_afe = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0082)
    1b74:	00c02084 	movi	r3,130
    1b78:	88c01d1e 	bne	r17,r3,1bf0 <set_addrs_to_default+0xab0>
    {
        regs->reg_0x0082_isel_dac_afe = (value >> 13) & 0x7;
    1b7c:	8007d37a 	srai	r3,r16,13
    1b80:	10c06015 	stw	r3,384(r2)
        regs->reg_0x0082_mode_interleave_afe = (value >> 12) & 0x1;
    1b84:	8007d33a 	srai	r3,r16,12
    1b88:	18c0004c 	andi	r3,r3,1
    1b8c:	10c06115 	stw	r3,388(r2)
        regs->reg_0x0082_mux_afe_1 = (value >> 10) & 0x3;
    1b90:	8007d2ba 	srai	r3,r16,10
    1b94:	18c000cc 	andi	r3,r3,3
    1b98:	10c06215 	stw	r3,392(r2)
        regs->reg_0x0082_mux_afe_2 = (value >> 8) & 0x3;
    1b9c:	8007d23a 	srai	r3,r16,8
    1ba0:	18c000cc 	andi	r3,r3,3
    1ba4:	10c06315 	stw	r3,396(r2)
        regs->reg_0x0082_pd_afe = (value >> 5) & 0x1;
    1ba8:	8007d17a 	srai	r3,r16,5
    1bac:	18c0004c 	andi	r3,r3,1
    1bb0:	10c06415 	stw	r3,400(r2)
        regs->reg_0x0082_pd_rx_afe1 = (value >> 4) & 0x1;
    1bb4:	8007d13a 	srai	r3,r16,4
    1bb8:	18c0004c 	andi	r3,r3,1
    1bbc:	10c06515 	stw	r3,404(r2)
        regs->reg_0x0082_pd_rx_afe2 = (value >> 3) & 0x1;
    1bc0:	8007d0fa 	srai	r3,r16,3
    1bc4:	18c0004c 	andi	r3,r3,1
    1bc8:	10c06615 	stw	r3,408(r2)
        regs->reg_0x0082_pd_tx_afe1 = (value >> 2) & 0x1;
    1bcc:	8007d0ba 	srai	r3,r16,2
    1bd0:	18c0004c 	andi	r3,r3,1
    1bd4:	10c06715 	stw	r3,412(r2)
        regs->reg_0x0082_pd_tx_afe2 = (value >> 1) & 0x1;
    1bd8:	8007d07a 	srai	r3,r16,1
        regs->reg_0x0082_en_g_afe = (value >> 0) & 0x1;
    1bdc:	8400004c 	andi	r16,r16,1
    1be0:	14006915 	stw	r16,420(r2)
        regs->reg_0x0082_mux_afe_2 = (value >> 8) & 0x3;
        regs->reg_0x0082_pd_afe = (value >> 5) & 0x1;
        regs->reg_0x0082_pd_rx_afe1 = (value >> 4) & 0x1;
        regs->reg_0x0082_pd_rx_afe2 = (value >> 3) & 0x1;
        regs->reg_0x0082_pd_tx_afe1 = (value >> 2) & 0x1;
        regs->reg_0x0082_pd_tx_afe2 = (value >> 1) & 0x1;
    1be4:	18c0004c 	andi	r3,r3,1
    1be8:	10c06815 	stw	r3,416(r2)
    1bec:	003e5e06 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0082_en_g_afe = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0084)
    1bf0:	00c02104 	movi	r3,132
    1bf4:	88c0151e 	bne	r17,r3,1c4c <set_addrs_to_default+0xb0c>
    {
        regs->reg_0x0084_mux_bias_out = (value >> 11) & 0x3;
    1bf8:	8007d2fa 	srai	r3,r16,11
    1bfc:	18c000cc 	andi	r3,r3,3
    1c00:	10c06a15 	stw	r3,424(r2)
        regs->reg_0x0084_rp_calib_bias = (value >> 6) & 0x1f;
    1c04:	8007d1ba 	srai	r3,r16,6
    1c08:	18c007cc 	andi	r3,r3,31
    1c0c:	10c06b15 	stw	r3,428(r2)
        regs->reg_0x0084_pd_frp_bias = (value >> 4) & 0x1;
    1c10:	8007d13a 	srai	r3,r16,4
    1c14:	18c0004c 	andi	r3,r3,1
    1c18:	10c06c15 	stw	r3,432(r2)
        regs->reg_0x0084_pd_f_bias = (value >> 3) & 0x1;
    1c1c:	8007d0fa 	srai	r3,r16,3
    1c20:	18c0004c 	andi	r3,r3,1
    1c24:	10c06d15 	stw	r3,436(r2)
        regs->reg_0x0084_pd_ptrp_bias = (value >> 2) & 0x1;
    1c28:	8007d0ba 	srai	r3,r16,2
    1c2c:	18c0004c 	andi	r3,r3,1
    1c30:	10c06e15 	stw	r3,440(r2)
        regs->reg_0x0084_pd_pt_bias = (value >> 1) & 0x1;
    1c34:	8007d07a 	srai	r3,r16,1
        regs->reg_0x0084_pd_bias_master = (value >> 0) & 0x1;
    1c38:	8400004c 	andi	r16,r16,1
    1c3c:	14007015 	stw	r16,448(r2)
        regs->reg_0x0084_mux_bias_out = (value >> 11) & 0x3;
        regs->reg_0x0084_rp_calib_bias = (value >> 6) & 0x1f;
        regs->reg_0x0084_pd_frp_bias = (value >> 4) & 0x1;
        regs->reg_0x0084_pd_f_bias = (value >> 3) & 0x1;
        regs->reg_0x0084_pd_ptrp_bias = (value >> 2) & 0x1;
        regs->reg_0x0084_pd_pt_bias = (value >> 1) & 0x1;
    1c40:	18c0004c 	andi	r3,r3,1
    1c44:	10c06f15 	stw	r3,444(r2)
    1c48:	003e4706 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0084_pd_bias_master = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0085)
    1c4c:	00c02144 	movi	r3,133
    1c50:	88c01b1e 	bne	r17,r3,1cc0 <set_addrs_to_default+0xb80>
    {
        regs->reg_0x0085_slfb_xbuf_rx = (value >> 8) & 0x1;
    1c54:	8007d23a 	srai	r3,r16,8
    1c58:	18c0004c 	andi	r3,r3,1
    1c5c:	10c07115 	stw	r3,452(r2)
        regs->reg_0x0085_slfb_xbuf_tx = (value >> 7) & 0x1;
    1c60:	8007d1fa 	srai	r3,r16,7
    1c64:	18c0004c 	andi	r3,r3,1
    1c68:	10c07215 	stw	r3,456(r2)
        regs->reg_0x0085_byp_xbuf_rx = (value >> 6) & 0x1;
    1c6c:	8007d1ba 	srai	r3,r16,6
    1c70:	18c0004c 	andi	r3,r3,1
    1c74:	10c07315 	stw	r3,460(r2)
        regs->reg_0x0085_byp_xbuf_tx = (value >> 5) & 0x1;
    1c78:	8007d17a 	srai	r3,r16,5
    1c7c:	18c0004c 	andi	r3,r3,1
    1c80:	10c07415 	stw	r3,464(r2)
        regs->reg_0x0085_en_out2_xbuf_tx = (value >> 4) & 0x1;
    1c84:	8007d13a 	srai	r3,r16,4
    1c88:	18c0004c 	andi	r3,r3,1
    1c8c:	10c07515 	stw	r3,468(r2)
        regs->reg_0x0085_en_tbufin_xbuf_rx = (value >> 3) & 0x1;
    1c90:	8007d0fa 	srai	r3,r16,3
    1c94:	18c0004c 	andi	r3,r3,1
    1c98:	10c07615 	stw	r3,472(r2)
        regs->reg_0x0085_pd_xbuf_rx = (value >> 2) & 0x1;
    1c9c:	8007d0ba 	srai	r3,r16,2
    1ca0:	18c0004c 	andi	r3,r3,1
    1ca4:	10c07715 	stw	r3,476(r2)
        regs->reg_0x0085_pd_xbuf_tx = (value >> 1) & 0x1;
    1ca8:	8007d07a 	srai	r3,r16,1
        regs->reg_0x0085_en_g_xbuf = (value >> 0) & 0x1;
    1cac:	8400004c 	andi	r16,r16,1
    1cb0:	14007915 	stw	r16,484(r2)
        regs->reg_0x0085_byp_xbuf_rx = (value >> 6) & 0x1;
        regs->reg_0x0085_byp_xbuf_tx = (value >> 5) & 0x1;
        regs->reg_0x0085_en_out2_xbuf_tx = (value >> 4) & 0x1;
        regs->reg_0x0085_en_tbufin_xbuf_rx = (value >> 3) & 0x1;
        regs->reg_0x0085_pd_xbuf_rx = (value >> 2) & 0x1;
        regs->reg_0x0085_pd_xbuf_tx = (value >> 1) & 0x1;
    1cb4:	18c0004c 	andi	r3,r3,1
    1cb8:	10c07815 	stw	r3,480(r2)
    1cbc:	003e2a06 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0085_en_g_xbuf = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0086)
    1cc0:	00c02184 	movi	r3,134
    1cc4:	88c0261e 	bne	r17,r3,1d60 <set_addrs_to_default+0xc20>
    {
        regs->reg_0x0086_spdup_vco_cgen = (value >> 15) & 0x1;
    1cc8:	8007d3fa 	srai	r3,r16,15
    1ccc:	10c07a15 	stw	r3,488(r2)
        regs->reg_0x0086_reset_n_cgen = (value >> 14) & 0x1;
    1cd0:	8007d3ba 	srai	r3,r16,14
    1cd4:	18c0004c 	andi	r3,r3,1
    1cd8:	10c07b15 	stw	r3,492(r2)
        regs->reg_0x0086_en_adcclkh_clkgn = (value >> 11) & 0x1;
    1cdc:	8007d2fa 	srai	r3,r16,11
    1ce0:	18c0004c 	andi	r3,r3,1
    1ce4:	10c07c15 	stw	r3,496(r2)
        regs->reg_0x0086_en_coarse_cklgen = (value >> 10) & 0x1;
    1ce8:	8007d2ba 	srai	r3,r16,10
    1cec:	18c0004c 	andi	r3,r3,1
    1cf0:	10c07d15 	stw	r3,500(r2)
        regs->reg_0x0086_en_intonly_sdm_cgen = (value >> 9) & 0x1;
    1cf4:	8007d27a 	srai	r3,r16,9
    1cf8:	18c0004c 	andi	r3,r3,1
    1cfc:	10c07e15 	stw	r3,504(r2)
        regs->reg_0x0086_en_sdm_clk_cgen = (value >> 8) & 0x1;
    1d00:	8007d23a 	srai	r3,r16,8
    1d04:	18c0004c 	andi	r3,r3,1
    1d08:	10c07f15 	stw	r3,508(r2)
        regs->reg_0x0086_pd_cp_cgen = (value >> 6) & 0x1;
    1d0c:	8007d1ba 	srai	r3,r16,6
    1d10:	18c0004c 	andi	r3,r3,1
    1d14:	10c08015 	stw	r3,512(r2)
        regs->reg_0x0086_pd_fdiv_fb_cgen = (value >> 5) & 0x1;
    1d18:	8007d17a 	srai	r3,r16,5
    1d1c:	18c0004c 	andi	r3,r3,1
    1d20:	10c08115 	stw	r3,516(r2)
        regs->reg_0x0086_pd_fdiv_o_cgen = (value >> 4) & 0x1;
    1d24:	8007d13a 	srai	r3,r16,4
    1d28:	18c0004c 	andi	r3,r3,1
    1d2c:	10c08215 	stw	r3,520(r2)
        regs->reg_0x0086_pd_sdm_cgen = (value >> 3) & 0x1;
    1d30:	8007d0fa 	srai	r3,r16,3
    1d34:	18c0004c 	andi	r3,r3,1
    1d38:	10c08315 	stw	r3,524(r2)
        regs->reg_0x0086_pd_vco_cgen = (value >> 2) & 0x1;
    1d3c:	8007d0ba 	srai	r3,r16,2
    1d40:	18c0004c 	andi	r3,r3,1
    1d44:	10c08415 	stw	r3,528(r2)
        regs->reg_0x0086_pd_vco_comp_cgen = (value >> 1) & 0x1;
    1d48:	8007d07a 	srai	r3,r16,1
        regs->reg_0x0086_en_g_cgen = (value >> 0) & 0x1;
    1d4c:	8400004c 	andi	r16,r16,1
    1d50:	14008615 	stw	r16,536(r2)
        regs->reg_0x0086_pd_cp_cgen = (value >> 6) & 0x1;
        regs->reg_0x0086_pd_fdiv_fb_cgen = (value >> 5) & 0x1;
        regs->reg_0x0086_pd_fdiv_o_cgen = (value >> 4) & 0x1;
        regs->reg_0x0086_pd_sdm_cgen = (value >> 3) & 0x1;
        regs->reg_0x0086_pd_vco_cgen = (value >> 2) & 0x1;
        regs->reg_0x0086_pd_vco_comp_cgen = (value >> 1) & 0x1;
    1d54:	18c0004c 	andi	r3,r3,1
    1d58:	10c08515 	stw	r3,532(r2)
    1d5c:	003e0206 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0086_en_g_cgen = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0087)
    1d60:	00c021c4 	movi	r3,135
    1d64:	88c0021e 	bne	r17,r3,1d70 <set_addrs_to_default+0xc30>
    {
        regs->reg_0x0087_frac_sdm_cgen = (value >> 0) & 0xffff;
    1d68:	14008715 	stw	r16,540(r2)
    1d6c:	003dfe06 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x0088)
    1d70:	00c02204 	movi	r3,136
    1d74:	88c0061e 	bne	r17,r3,1d90 <set_addrs_to_default+0xc50>
    {
        regs->reg_0x0088_int_sdm_cgen = (value >> 4) & 0x3ff;
    1d78:	8007d13a 	srai	r3,r16,4
        regs->reg_0x0088_frac_sdm_cgen = (value >> 0) & 0xf;
    1d7c:	840003cc 	andi	r16,r16,15
    1d80:	14008915 	stw	r16,548(r2)
        regs->reg_0x0087_frac_sdm_cgen = (value >> 0) & 0xffff;
        return;
    }
    if (addr == 0x0088)
    {
        regs->reg_0x0088_int_sdm_cgen = (value >> 4) & 0x3ff;
    1d84:	18c0ffcc 	andi	r3,r3,1023
    1d88:	10c08815 	stw	r3,544(r2)
    1d8c:	003df606 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0088_frac_sdm_cgen = (value >> 0) & 0xf;
        return;
    }
    if (addr == 0x0089)
    1d90:	00c02244 	movi	r3,137
    1d94:	88c0111e 	bne	r17,r3,1ddc <set_addrs_to_default+0xc9c>
    {
        regs->reg_0x0089_rev_sdmclk_cgen = (value >> 15) & 0x1;
    1d98:	8007d3fa 	srai	r3,r16,15
    1d9c:	10c08a15 	stw	r3,552(r2)
        regs->reg_0x0089_sel_sdmclk_cgen = (value >> 14) & 0x1;
    1da0:	8007d3ba 	srai	r3,r16,14
    1da4:	18c0004c 	andi	r3,r3,1
    1da8:	10c08b15 	stw	r3,556(r2)
        regs->reg_0x0089_sx_dither_en_cgen = (value >> 13) & 0x1;
    1dac:	8007d37a 	srai	r3,r16,13
    1db0:	18c0004c 	andi	r3,r3,1
    1db4:	10c08c15 	stw	r3,560(r2)
        regs->reg_0x0089_clkh_ov_clkl_cgen = (value >> 11) & 0x3;
    1db8:	8007d2fa 	srai	r3,r16,11
    1dbc:	18c000cc 	andi	r3,r3,3
    1dc0:	10c08d15 	stw	r3,564(r2)
        regs->reg_0x0089_div_outch_cgen = (value >> 3) & 0xff;
    1dc4:	8007d0fa 	srai	r3,r16,3
        regs->reg_0x0089_tst_cgen = (value >> 0) & 0x7;
    1dc8:	840001cc 	andi	r16,r16,7
    1dcc:	14008f15 	stw	r16,572(r2)
    {
        regs->reg_0x0089_rev_sdmclk_cgen = (value >> 15) & 0x1;
        regs->reg_0x0089_sel_sdmclk_cgen = (value >> 14) & 0x1;
        regs->reg_0x0089_sx_dither_en_cgen = (value >> 13) & 0x1;
        regs->reg_0x0089_clkh_ov_clkl_cgen = (value >> 11) & 0x3;
        regs->reg_0x0089_div_outch_cgen = (value >> 3) & 0xff;
    1dd0:	18c03fcc 	andi	r3,r3,255
    1dd4:	10c08e15 	stw	r3,568(r2)
    1dd8:	003de306 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0089_tst_cgen = (value >> 0) & 0x7;
        return;
    }
    if (addr == 0x008A)
    1ddc:	00c02284 	movi	r3,138
    1de0:	88c00f1e 	bne	r17,r3,1e20 <set_addrs_to_default+0xce0>
    {
        regs->reg_0x008a_rev_clkdac_cgen = (value >> 14) & 0x1;
    1de4:	8007d3ba 	srai	r3,r16,14
    1de8:	18c0004c 	andi	r3,r3,1
    1dec:	10c09015 	stw	r3,576(r2)
        regs->reg_0x008a_rev_clkadc_cgen = (value >> 13) & 0x1;
    1df0:	8007d37a 	srai	r3,r16,13
    1df4:	18c0004c 	andi	r3,r3,1
    1df8:	10c09115 	stw	r3,580(r2)
        regs->reg_0x008a_revph_pfd_cgen = (value >> 12) & 0x1;
    1dfc:	8007d33a 	srai	r3,r16,12
    1e00:	18c0004c 	andi	r3,r3,1
    1e04:	10c09215 	stw	r3,584(r2)
        regs->reg_0x008a_ioffset_cp_cgen = (value >> 6) & 0x3f;
    1e08:	8007d1ba 	srai	r3,r16,6
        regs->reg_0x008a_ipulse_cp_cgen = (value >> 0) & 0x3f;
    1e0c:	84000fcc 	andi	r16,r16,63
    1e10:	14009415 	stw	r16,592(r2)
    if (addr == 0x008A)
    {
        regs->reg_0x008a_rev_clkdac_cgen = (value >> 14) & 0x1;
        regs->reg_0x008a_rev_clkadc_cgen = (value >> 13) & 0x1;
        regs->reg_0x008a_revph_pfd_cgen = (value >> 12) & 0x1;
        regs->reg_0x008a_ioffset_cp_cgen = (value >> 6) & 0x3f;
    1e14:	18c00fcc 	andi	r3,r3,63
    1e18:	10c09315 	stw	r3,588(r2)
    1e1c:	003dd206 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x008a_ipulse_cp_cgen = (value >> 0) & 0x3f;
        return;
    }
    if (addr == 0x008B)
    1e20:	00c022c4 	movi	r3,139
    1e24:	88c0091e 	bne	r17,r3,1e4c <set_addrs_to_default+0xd0c>
    {
        regs->reg_0x008b_ict_vco_cgen = (value >> 9) & 0x1f;
    1e28:	8007d27a 	srai	r3,r16,9
    1e2c:	18c007cc 	andi	r3,r3,31
    1e30:	10c09515 	stw	r3,596(r2)
        regs->reg_0x008b_csw_vco_cgen = (value >> 1) & 0xff;
    1e34:	8007d07a 	srai	r3,r16,1
        regs->reg_0x008b_coarse_start_cgen = (value >> 0) & 0x1;
    1e38:	8400004c 	andi	r16,r16,1
    1e3c:	14009715 	stw	r16,604(r2)
        return;
    }
    if (addr == 0x008B)
    {
        regs->reg_0x008b_ict_vco_cgen = (value >> 9) & 0x1f;
        regs->reg_0x008b_csw_vco_cgen = (value >> 1) & 0xff;
    1e40:	18c03fcc 	andi	r3,r3,255
    1e44:	10c09615 	stw	r3,600(r2)
    1e48:	003dc706 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x008b_coarse_start_cgen = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x008C)
    1e4c:	00c02304 	movi	r3,140
    1e50:	88c0141e 	bne	r17,r3,1ea4 <set_addrs_to_default+0xd64>
    {
        regs->reg_0x008c_coarse_stepdone_cgen = (value >> 15) & 0x1;
    1e54:	8007d3fa 	srai	r3,r16,15
    1e58:	10c09815 	stw	r3,608(r2)
        regs->reg_0x008c_coarsepll_compo_cgen = (value >> 14) & 0x1;
    1e5c:	8007d3ba 	srai	r3,r16,14
    1e60:	18c0004c 	andi	r3,r3,1
    1e64:	10c09915 	stw	r3,612(r2)
        regs->reg_0x008c_vco_cmpho_cgen = (value >> 13) & 0x1;
    1e68:	8007d37a 	srai	r3,r16,13
    1e6c:	18c0004c 	andi	r3,r3,1
    1e70:	10c09a15 	stw	r3,616(r2)
        regs->reg_0x008c_vco_cmplo_cgen = (value >> 12) & 0x1;
    1e74:	8007d33a 	srai	r3,r16,12
    1e78:	18c0004c 	andi	r3,r3,1
    1e7c:	10c09b15 	stw	r3,620(r2)
        regs->reg_0x008c_cp2_cgen = (value >> 8) & 0xf;
    1e80:	8007d23a 	srai	r3,r16,8
    1e84:	18c003cc 	andi	r3,r3,15
    1e88:	10c09c15 	stw	r3,624(r2)
        regs->reg_0x008c_cp3_cgen = (value >> 4) & 0xf;
    1e8c:	8007d13a 	srai	r3,r16,4
        regs->reg_0x008c_cz_cgen = (value >> 0) & 0xf;
    1e90:	840003cc 	andi	r16,r16,15
    1e94:	14009e15 	stw	r16,632(r2)
        regs->reg_0x008c_coarse_stepdone_cgen = (value >> 15) & 0x1;
        regs->reg_0x008c_coarsepll_compo_cgen = (value >> 14) & 0x1;
        regs->reg_0x008c_vco_cmpho_cgen = (value >> 13) & 0x1;
        regs->reg_0x008c_vco_cmplo_cgen = (value >> 12) & 0x1;
        regs->reg_0x008c_cp2_cgen = (value >> 8) & 0xf;
        regs->reg_0x008c_cp3_cgen = (value >> 4) & 0xf;
    1e98:	18c003cc 	andi	r3,r3,15
    1e9c:	10c09d15 	stw	r3,628(r2)
    1ea0:	003db106 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x008c_cz_cgen = (value >> 0) & 0xf;
        return;
    }
    if (addr == 0x008D)
    1ea4:	00c02344 	movi	r3,141
    1ea8:	88c0031e 	bne	r17,r3,1eb8 <set_addrs_to_default+0xd78>
    {
        regs->reg_0x008d_resrv_cgn = (value >> 0) & 0x7;
    1eac:	840001cc 	andi	r16,r16,7
    1eb0:	14009f15 	stw	r16,636(r2)
    1eb4:	003dac06 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x0092)
    1eb8:	00c02484 	movi	r3,146
    1ebc:	88c02f1e 	bne	r17,r3,1f7c <set_addrs_to_default+0xe3c>
    {
        regs->reg_0x0092_en_ldo_dig = (value >> 15) & 0x1;
    1ec0:	8007d3fa 	srai	r3,r16,15
    1ec4:	10c0a015 	stw	r3,640(r2)
        regs->reg_0x0092_en_ldo_diggn = (value >> 14) & 0x1;
    1ec8:	8007d3ba 	srai	r3,r16,14
    1ecc:	18c0004c 	andi	r3,r3,1
    1ed0:	10c0a115 	stw	r3,644(r2)
        regs->reg_0x0092_en_ldo_digsxr = (value >> 13) & 0x1;
    1ed4:	8007d37a 	srai	r3,r16,13
    1ed8:	18c0004c 	andi	r3,r3,1
    1edc:	10c0a215 	stw	r3,648(r2)
        regs->reg_0x0092_en_ldo_digsxt = (value >> 12) & 0x1;
    1ee0:	8007d33a 	srai	r3,r16,12
    1ee4:	18c0004c 	andi	r3,r3,1
    1ee8:	10c0a315 	stw	r3,652(r2)
        regs->reg_0x0092_en_ldo_divgn = (value >> 11) & 0x1;
    1eec:	8007d2fa 	srai	r3,r16,11
    1ef0:	18c0004c 	andi	r3,r3,1
    1ef4:	10c0a415 	stw	r3,656(r2)
        regs->reg_0x0092_en_ldo_divsxr = (value >> 10) & 0x1;
    1ef8:	8007d2ba 	srai	r3,r16,10
    1efc:	18c0004c 	andi	r3,r3,1
    1f00:	10c0a515 	stw	r3,660(r2)
        regs->reg_0x0092_en_ldo_divsxt = (value >> 9) & 0x1;
    1f04:	8007d27a 	srai	r3,r16,9
    1f08:	18c0004c 	andi	r3,r3,1
    1f0c:	10c0a615 	stw	r3,664(r2)
        regs->reg_0x0092_en_ldo_lna12 = (value >> 8) & 0x1;
    1f10:	8007d23a 	srai	r3,r16,8
    1f14:	18c0004c 	andi	r3,r3,1
    1f18:	10c0a715 	stw	r3,668(r2)
        regs->reg_0x0092_en_ldo_lna14 = (value >> 7) & 0x1;
    1f1c:	8007d1fa 	srai	r3,r16,7
    1f20:	18c0004c 	andi	r3,r3,1
    1f24:	10c0a815 	stw	r3,672(r2)
        regs->reg_0x0092_en_ldo_mxrfe = (value >> 6) & 0x1;
    1f28:	8007d1ba 	srai	r3,r16,6
    1f2c:	18c0004c 	andi	r3,r3,1
    1f30:	10c0a915 	stw	r3,676(r2)
        regs->reg_0x0092_en_ldo_rbb = (value >> 5) & 0x1;
    1f34:	8007d17a 	srai	r3,r16,5
    1f38:	18c0004c 	andi	r3,r3,1
    1f3c:	10c0aa15 	stw	r3,680(r2)
        regs->reg_0x0092_en_ldo_rxbuf = (value >> 4) & 0x1;
    1f40:	8007d13a 	srai	r3,r16,4
    1f44:	18c0004c 	andi	r3,r3,1
    1f48:	10c0ab15 	stw	r3,684(r2)
        regs->reg_0x0092_en_ldo_tbb = (value >> 3) & 0x1;
    1f4c:	8007d0fa 	srai	r3,r16,3
    1f50:	18c0004c 	andi	r3,r3,1
    1f54:	10c0ac15 	stw	r3,688(r2)
        regs->reg_0x0092_en_ldo_tia12 = (value >> 2) & 0x1;
    1f58:	8007d0ba 	srai	r3,r16,2
    1f5c:	18c0004c 	andi	r3,r3,1
    1f60:	10c0ad15 	stw	r3,692(r2)
        regs->reg_0x0092_en_ldo_tia14 = (value >> 1) & 0x1;
    1f64:	8007d07a 	srai	r3,r16,1
        regs->reg_0x0092_en_g_ldo = (value >> 0) & 0x1;
    1f68:	8400004c 	andi	r16,r16,1
    1f6c:	1400af15 	stw	r16,700(r2)
        regs->reg_0x0092_en_ldo_mxrfe = (value >> 6) & 0x1;
        regs->reg_0x0092_en_ldo_rbb = (value >> 5) & 0x1;
        regs->reg_0x0092_en_ldo_rxbuf = (value >> 4) & 0x1;
        regs->reg_0x0092_en_ldo_tbb = (value >> 3) & 0x1;
        regs->reg_0x0092_en_ldo_tia12 = (value >> 2) & 0x1;
        regs->reg_0x0092_en_ldo_tia14 = (value >> 1) & 0x1;
    1f70:	18c0004c 	andi	r3,r3,1
    1f74:	10c0ae15 	stw	r3,696(r2)
    1f78:	003d7b06 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0092_en_g_ldo = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0093)
    1f7c:	00c024c4 	movi	r3,147
    1f80:	88c02f1e 	bne	r17,r3,2040 <set_addrs_to_default+0xf00>
    {
        regs->reg_0x0093_en_loadimp_ldo_tlob = (value >> 15) & 0x1;
    1f84:	8007d3fa 	srai	r3,r16,15
    1f88:	10c0b015 	stw	r3,704(r2)
        regs->reg_0x0093_en_loadimp_ldo_tpad = (value >> 14) & 0x1;
    1f8c:	8007d3ba 	srai	r3,r16,14
    1f90:	18c0004c 	andi	r3,r3,1
    1f94:	10c0b115 	stw	r3,708(r2)
        regs->reg_0x0093_en_loadimp_ldo_txbuf = (value >> 13) & 0x1;
    1f98:	8007d37a 	srai	r3,r16,13
    1f9c:	18c0004c 	andi	r3,r3,1
    1fa0:	10c0b215 	stw	r3,712(r2)
        regs->reg_0x0093_en_loadimp_ldo_vcogn = (value >> 12) & 0x1;
    1fa4:	8007d33a 	srai	r3,r16,12
    1fa8:	18c0004c 	andi	r3,r3,1
    1fac:	10c0b315 	stw	r3,716(r2)
        regs->reg_0x0093_en_loadimp_ldo_vcosxr = (value >> 11) & 0x1;
    1fb0:	8007d2fa 	srai	r3,r16,11
    1fb4:	18c0004c 	andi	r3,r3,1
    1fb8:	10c0b415 	stw	r3,720(r2)
        regs->reg_0x0093_en_loadimp_ldo_vcosxt = (value >> 10) & 0x1;
    1fbc:	8007d2ba 	srai	r3,r16,10
    1fc0:	18c0004c 	andi	r3,r3,1
    1fc4:	10c0b515 	stw	r3,724(r2)
        regs->reg_0x0093_en_ldo_afe = (value >> 9) & 0x1;
    1fc8:	8007d27a 	srai	r3,r16,9
    1fcc:	18c0004c 	andi	r3,r3,1
    1fd0:	10c0b615 	stw	r3,728(r2)
        regs->reg_0x0093_en_ldo_cpgn = (value >> 8) & 0x1;
    1fd4:	8007d23a 	srai	r3,r16,8
    1fd8:	18c0004c 	andi	r3,r3,1
    1fdc:	10c0b715 	stw	r3,732(r2)
        regs->reg_0x0093_en_ldo_cpsxr = (value >> 7) & 0x1;
    1fe0:	8007d1fa 	srai	r3,r16,7
    1fe4:	18c0004c 	andi	r3,r3,1
    1fe8:	10c0b815 	stw	r3,736(r2)
        regs->reg_0x0093_en_ldo_tlob = (value >> 6) & 0x1;
    1fec:	8007d1ba 	srai	r3,r16,6
    1ff0:	18c0004c 	andi	r3,r3,1
    1ff4:	10c0b915 	stw	r3,740(r2)
        regs->reg_0x0093_en_ldo_tpad = (value >> 5) & 0x1;
    1ff8:	8007d17a 	srai	r3,r16,5
    1ffc:	18c0004c 	andi	r3,r3,1
    2000:	10c0ba15 	stw	r3,744(r2)
        regs->reg_0x0093_en_ldo_txbuf = (value >> 4) & 0x1;
    2004:	8007d13a 	srai	r3,r16,4
    2008:	18c0004c 	andi	r3,r3,1
    200c:	10c0bb15 	stw	r3,748(r2)
        regs->reg_0x0093_en_ldo_vcogn = (value >> 3) & 0x1;
    2010:	8007d0fa 	srai	r3,r16,3
    2014:	18c0004c 	andi	r3,r3,1
    2018:	10c0bc15 	stw	r3,752(r2)
        regs->reg_0x0093_en_ldo_vcosxr = (value >> 2) & 0x1;
    201c:	8007d0ba 	srai	r3,r16,2
    2020:	18c0004c 	andi	r3,r3,1
    2024:	10c0bd15 	stw	r3,756(r2)
        regs->reg_0x0093_en_ldo_vcosxt = (value >> 1) & 0x1;
    2028:	8007d07a 	srai	r3,r16,1
        regs->reg_0x0093_en_ldo_cpsxt = (value >> 0) & 0x1;
    202c:	8400004c 	andi	r16,r16,1
    2030:	1400bf15 	stw	r16,764(r2)
        regs->reg_0x0093_en_ldo_tlob = (value >> 6) & 0x1;
        regs->reg_0x0093_en_ldo_tpad = (value >> 5) & 0x1;
        regs->reg_0x0093_en_ldo_txbuf = (value >> 4) & 0x1;
        regs->reg_0x0093_en_ldo_vcogn = (value >> 3) & 0x1;
        regs->reg_0x0093_en_ldo_vcosxr = (value >> 2) & 0x1;
        regs->reg_0x0093_en_ldo_vcosxt = (value >> 1) & 0x1;
    2034:	18c0004c 	andi	r3,r3,1
    2038:	10c0be15 	stw	r3,760(r2)
    203c:	003d4a06 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0093_en_ldo_cpsxt = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0094)
    2040:	00c02504 	movi	r3,148
    2044:	88c02f1e 	bne	r17,r3,2104 <set_addrs_to_default+0xfc4>
    {
        regs->reg_0x0094_en_loadimp_ldo_cpsxt = (value >> 15) & 0x1;
    2048:	8007d3fa 	srai	r3,r16,15
    204c:	10c0c015 	stw	r3,768(r2)
        regs->reg_0x0094_en_loadimp_ldo_dig = (value >> 14) & 0x1;
    2050:	8007d3ba 	srai	r3,r16,14
    2054:	18c0004c 	andi	r3,r3,1
    2058:	10c0c115 	stw	r3,772(r2)
        regs->reg_0x0094_en_loadimp_ldo_diggn = (value >> 13) & 0x1;
    205c:	8007d37a 	srai	r3,r16,13
    2060:	18c0004c 	andi	r3,r3,1
    2064:	10c0c215 	stw	r3,776(r2)
        regs->reg_0x0094_en_loadimp_ldo_digsxr = (value >> 12) & 0x1;
    2068:	8007d33a 	srai	r3,r16,12
    206c:	18c0004c 	andi	r3,r3,1
    2070:	10c0c315 	stw	r3,780(r2)
        regs->reg_0x0094_en_loadimp_ldo_digsxt = (value >> 11) & 0x1;
    2074:	8007d2fa 	srai	r3,r16,11
    2078:	18c0004c 	andi	r3,r3,1
    207c:	10c0c415 	stw	r3,784(r2)
        regs->reg_0x0094_en_loadimp_ldo_divgn = (value >> 10) & 0x1;
    2080:	8007d2ba 	srai	r3,r16,10
    2084:	18c0004c 	andi	r3,r3,1
    2088:	10c0c515 	stw	r3,788(r2)
        regs->reg_0x0094_en_loadimp_ldo_divsxr = (value >> 9) & 0x1;
    208c:	8007d27a 	srai	r3,r16,9
    2090:	18c0004c 	andi	r3,r3,1
    2094:	10c0c615 	stw	r3,792(r2)
        regs->reg_0x0094_en_loadimp_ldo_divsxt = (value >> 8) & 0x1;
    2098:	8007d23a 	srai	r3,r16,8
    209c:	18c0004c 	andi	r3,r3,1
    20a0:	10c0c715 	stw	r3,796(r2)
        regs->reg_0x0094_en_loadimp_ldo_lna12 = (value >> 7) & 0x1;
    20a4:	8007d1fa 	srai	r3,r16,7
    20a8:	18c0004c 	andi	r3,r3,1
    20ac:	10c0c815 	stw	r3,800(r2)
        regs->reg_0x0094_en_loadimp_ldo_lna14 = (value >> 6) & 0x1;
    20b0:	8007d1ba 	srai	r3,r16,6
    20b4:	18c0004c 	andi	r3,r3,1
    20b8:	10c0c915 	stw	r3,804(r2)
        regs->reg_0x0094_en_loadimp_ldo_mxrfe = (value >> 5) & 0x1;
    20bc:	8007d17a 	srai	r3,r16,5
    20c0:	18c0004c 	andi	r3,r3,1
    20c4:	10c0ca15 	stw	r3,808(r2)
        regs->reg_0x0094_en_loadimp_ldo_rbb = (value >> 4) & 0x1;
    20c8:	8007d13a 	srai	r3,r16,4
    20cc:	18c0004c 	andi	r3,r3,1
    20d0:	10c0cb15 	stw	r3,812(r2)
        regs->reg_0x0094_en_loadimp_ldo_rxbuf = (value >> 3) & 0x1;
    20d4:	8007d0fa 	srai	r3,r16,3
    20d8:	18c0004c 	andi	r3,r3,1
    20dc:	10c0cc15 	stw	r3,816(r2)
        regs->reg_0x0094_en_loadimp_ldo_tbb = (value >> 2) & 0x1;
    20e0:	8007d0ba 	srai	r3,r16,2
    20e4:	18c0004c 	andi	r3,r3,1
    20e8:	10c0cd15 	stw	r3,820(r2)
        regs->reg_0x0094_en_loadimp_ldo_tia12 = (value >> 1) & 0x1;
    20ec:	8007d07a 	srai	r3,r16,1
        regs->reg_0x0094_en_loadimp_ldo_tia14 = (value >> 0) & 0x1;
    20f0:	8400004c 	andi	r16,r16,1
    20f4:	1400cf15 	stw	r16,828(r2)
        regs->reg_0x0094_en_loadimp_ldo_lna14 = (value >> 6) & 0x1;
        regs->reg_0x0094_en_loadimp_ldo_mxrfe = (value >> 5) & 0x1;
        regs->reg_0x0094_en_loadimp_ldo_rbb = (value >> 4) & 0x1;
        regs->reg_0x0094_en_loadimp_ldo_rxbuf = (value >> 3) & 0x1;
        regs->reg_0x0094_en_loadimp_ldo_tbb = (value >> 2) & 0x1;
        regs->reg_0x0094_en_loadimp_ldo_tia12 = (value >> 1) & 0x1;
    20f8:	18c0004c 	andi	r3,r3,1
    20fc:	10c0ce15 	stw	r3,824(r2)
    2100:	003d1906 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0094_en_loadimp_ldo_tia14 = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0095)
    2104:	00c02544 	movi	r3,149
    2108:	88c0231e 	bne	r17,r3,2198 <set_addrs_to_default+0x1058>
    {
        regs->reg_0x0095_byp_ldo_tbb = (value >> 15) & 0x1;
    210c:	8007d3fa 	srai	r3,r16,15
    2110:	10c0d015 	stw	r3,832(r2)
        regs->reg_0x0095_byp_ldo_tia12 = (value >> 14) & 0x1;
    2114:	8007d3ba 	srai	r3,r16,14
    2118:	18c0004c 	andi	r3,r3,1
    211c:	10c0d115 	stw	r3,836(r2)
        regs->reg_0x0095_byp_ldo_tia14 = (value >> 13) & 0x1;
    2120:	8007d37a 	srai	r3,r16,13
    2124:	18c0004c 	andi	r3,r3,1
    2128:	10c0d215 	stw	r3,840(r2)
        regs->reg_0x0095_byp_ldo_tlob = (value >> 12) & 0x1;
    212c:	8007d33a 	srai	r3,r16,12
    2130:	18c0004c 	andi	r3,r3,1
    2134:	10c0d315 	stw	r3,844(r2)
        regs->reg_0x0095_byp_ldo_tpad = (value >> 11) & 0x1;
    2138:	8007d2fa 	srai	r3,r16,11
    213c:	18c0004c 	andi	r3,r3,1
    2140:	10c0d415 	stw	r3,848(r2)
        regs->reg_0x0095_byp_ldo_txbuf = (value >> 10) & 0x1;
    2144:	8007d2ba 	srai	r3,r16,10
    2148:	18c0004c 	andi	r3,r3,1
    214c:	10c0d515 	stw	r3,852(r2)
        regs->reg_0x0095_byp_ldo_vcogn = (value >> 9) & 0x1;
    2150:	8007d27a 	srai	r3,r16,9
    2154:	18c0004c 	andi	r3,r3,1
    2158:	10c0d615 	stw	r3,856(r2)
        regs->reg_0x0095_byp_ldo_vcosxr = (value >> 8) & 0x1;
    215c:	8007d23a 	srai	r3,r16,8
    2160:	18c0004c 	andi	r3,r3,1
    2164:	10c0d715 	stw	r3,860(r2)
        regs->reg_0x0095_byp_ldo_vcosxt = (value >> 7) & 0x1;
    2168:	8007d1fa 	srai	r3,r16,7
    216c:	18c0004c 	andi	r3,r3,1
    2170:	10c0d815 	stw	r3,864(r2)
        regs->reg_0x0095_en_loadimp_ldo_afe = (value >> 2) & 0x1;
    2174:	8007d0ba 	srai	r3,r16,2
    2178:	18c0004c 	andi	r3,r3,1
    217c:	10c0d915 	stw	r3,868(r2)
        regs->reg_0x0095_en_loadimp_ldo_cpgn = (value >> 1) & 0x1;
    2180:	8007d07a 	srai	r3,r16,1
        regs->reg_0x0095_en_loadimp_ldo_cpsxr = (value >> 0) & 0x1;
    2184:	8400004c 	andi	r16,r16,1
    2188:	1400db15 	stw	r16,876(r2)
        regs->reg_0x0095_byp_ldo_txbuf = (value >> 10) & 0x1;
        regs->reg_0x0095_byp_ldo_vcogn = (value >> 9) & 0x1;
        regs->reg_0x0095_byp_ldo_vcosxr = (value >> 8) & 0x1;
        regs->reg_0x0095_byp_ldo_vcosxt = (value >> 7) & 0x1;
        regs->reg_0x0095_en_loadimp_ldo_afe = (value >> 2) & 0x1;
        regs->reg_0x0095_en_loadimp_ldo_cpgn = (value >> 1) & 0x1;
    218c:	18c0004c 	andi	r3,r3,1
    2190:	10c0da15 	stw	r3,872(r2)
    2194:	003cf406 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0095_en_loadimp_ldo_cpsxr = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0096)
    2198:	00c02584 	movi	r3,150
    219c:	88c02f1e 	bne	r17,r3,225c <set_addrs_to_default+0x111c>
    {
        regs->reg_0x0096_byp_ldo_afe = (value >> 15) & 0x1;
    21a0:	8007d3fa 	srai	r3,r16,15
    21a4:	10c0dc15 	stw	r3,880(r2)
        regs->reg_0x0096_byp_ldo_cpgn = (value >> 14) & 0x1;
    21a8:	8007d3ba 	srai	r3,r16,14
    21ac:	18c0004c 	andi	r3,r3,1
    21b0:	10c0dd15 	stw	r3,884(r2)
        regs->reg_0x0096_byp_ldo_cpsxr = (value >> 13) & 0x1;
    21b4:	8007d37a 	srai	r3,r16,13
    21b8:	18c0004c 	andi	r3,r3,1
    21bc:	10c0de15 	stw	r3,888(r2)
        regs->reg_0x0096_byp_ldo_cpsxt = (value >> 12) & 0x1;
    21c0:	8007d33a 	srai	r3,r16,12
    21c4:	18c0004c 	andi	r3,r3,1
    21c8:	10c0df15 	stw	r3,892(r2)
        regs->reg_0x0096_byp_ldo_dig = (value >> 11) & 0x1;
    21cc:	8007d2fa 	srai	r3,r16,11
    21d0:	18c0004c 	andi	r3,r3,1
    21d4:	10c0e015 	stw	r3,896(r2)
        regs->reg_0x0096_byp_ldo_diggn = (value >> 10) & 0x1;
    21d8:	8007d2ba 	srai	r3,r16,10
    21dc:	18c0004c 	andi	r3,r3,1
    21e0:	10c0e115 	stw	r3,900(r2)
        regs->reg_0x0096_byp_ldo_digsxr = (value >> 9) & 0x1;
    21e4:	8007d27a 	srai	r3,r16,9
    21e8:	18c0004c 	andi	r3,r3,1
    21ec:	10c0e215 	stw	r3,904(r2)
        regs->reg_0x0096_byp_ldo_digsxt = (value >> 8) & 0x1;
    21f0:	8007d23a 	srai	r3,r16,8
    21f4:	18c0004c 	andi	r3,r3,1
    21f8:	10c0e315 	stw	r3,908(r2)
        regs->reg_0x0096_byp_ldo_divgn = (value >> 7) & 0x1;
    21fc:	8007d1fa 	srai	r3,r16,7
    2200:	18c0004c 	andi	r3,r3,1
    2204:	10c0e415 	stw	r3,912(r2)
        regs->reg_0x0096_byp_ldo_divsxr = (value >> 6) & 0x1;
    2208:	8007d1ba 	srai	r3,r16,6
    220c:	18c0004c 	andi	r3,r3,1
    2210:	10c0e515 	stw	r3,916(r2)
        regs->reg_0x0096_byp_ldo_divsxt = (value >> 5) & 0x1;
    2214:	8007d17a 	srai	r3,r16,5
    2218:	18c0004c 	andi	r3,r3,1
    221c:	10c0e615 	stw	r3,920(r2)
        regs->reg_0x0096_byp_ldo_lna12 = (value >> 4) & 0x1;
    2220:	8007d13a 	srai	r3,r16,4
    2224:	18c0004c 	andi	r3,r3,1
    2228:	10c0e715 	stw	r3,924(r2)
        regs->reg_0x0096_byp_ldo_lna14 = (value >> 3) & 0x1;
    222c:	8007d0fa 	srai	r3,r16,3
    2230:	18c0004c 	andi	r3,r3,1
    2234:	10c0e815 	stw	r3,928(r2)
        regs->reg_0x0096_byp_ldo_mxrfe = (value >> 2) & 0x1;
    2238:	8007d0ba 	srai	r3,r16,2
    223c:	18c0004c 	andi	r3,r3,1
    2240:	10c0e915 	stw	r3,932(r2)
        regs->reg_0x0096_byp_ldo_rbb = (value >> 1) & 0x1;
    2244:	8007d07a 	srai	r3,r16,1
        regs->reg_0x0096_byp_ldo_rxbuf = (value >> 0) & 0x1;
    2248:	8400004c 	andi	r16,r16,1
    224c:	1400eb15 	stw	r16,940(r2)
        regs->reg_0x0096_byp_ldo_divsxr = (value >> 6) & 0x1;
        regs->reg_0x0096_byp_ldo_divsxt = (value >> 5) & 0x1;
        regs->reg_0x0096_byp_ldo_lna12 = (value >> 4) & 0x1;
        regs->reg_0x0096_byp_ldo_lna14 = (value >> 3) & 0x1;
        regs->reg_0x0096_byp_ldo_mxrfe = (value >> 2) & 0x1;
        regs->reg_0x0096_byp_ldo_rbb = (value >> 1) & 0x1;
    2250:	18c0004c 	andi	r3,r3,1
    2254:	10c0ea15 	stw	r3,936(r2)
    2258:	003cc306 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0096_byp_ldo_rxbuf = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0097)
    225c:	00c025c4 	movi	r3,151
    2260:	88c02f1e 	bne	r17,r3,2320 <set_addrs_to_default+0x11e0>
    {
        regs->reg_0x0097_spdup_ldo_divsxr = (value >> 15) & 0x1;
    2264:	8007d3fa 	srai	r3,r16,15
    2268:	10c0ec15 	stw	r3,944(r2)
        regs->reg_0x0097_spdup_ldo_divsxt = (value >> 14) & 0x1;
    226c:	8007d3ba 	srai	r3,r16,14
    2270:	18c0004c 	andi	r3,r3,1
    2274:	10c0ed15 	stw	r3,948(r2)
        regs->reg_0x0097_spdup_ldo_lna12 = (value >> 13) & 0x1;
    2278:	8007d37a 	srai	r3,r16,13
    227c:	18c0004c 	andi	r3,r3,1
    2280:	10c0ee15 	stw	r3,952(r2)
        regs->reg_0x0097_spdup_ldo_lna14 = (value >> 12) & 0x1;
    2284:	8007d33a 	srai	r3,r16,12
    2288:	18c0004c 	andi	r3,r3,1
    228c:	10c0ef15 	stw	r3,956(r2)
        regs->reg_0x0097_spdup_ldo_mxrfe = (value >> 11) & 0x1;
    2290:	8007d2fa 	srai	r3,r16,11
    2294:	18c0004c 	andi	r3,r3,1
    2298:	10c0f015 	stw	r3,960(r2)
        regs->reg_0x0097_spdup_ldo_rbb = (value >> 10) & 0x1;
    229c:	8007d2ba 	srai	r3,r16,10
    22a0:	18c0004c 	andi	r3,r3,1
    22a4:	10c0f115 	stw	r3,964(r2)
        regs->reg_0x0097_spdup_ldo_rxbuf = (value >> 9) & 0x1;
    22a8:	8007d27a 	srai	r3,r16,9
    22ac:	18c0004c 	andi	r3,r3,1
    22b0:	10c0f215 	stw	r3,968(r2)
        regs->reg_0x0097_spdup_ldo_tbb = (value >> 8) & 0x1;
    22b4:	8007d23a 	srai	r3,r16,8
    22b8:	18c0004c 	andi	r3,r3,1
    22bc:	10c0f315 	stw	r3,972(r2)
        regs->reg_0x0097_spdup_ldo_tia12 = (value >> 7) & 0x1;
    22c0:	8007d1fa 	srai	r3,r16,7
    22c4:	18c0004c 	andi	r3,r3,1
    22c8:	10c0f415 	stw	r3,976(r2)
        regs->reg_0x0097_spdup_ldo_tia14 = (value >> 6) & 0x1;
    22cc:	8007d1ba 	srai	r3,r16,6
    22d0:	18c0004c 	andi	r3,r3,1
    22d4:	10c0f515 	stw	r3,980(r2)
        regs->reg_0x0097_spdup_ldo_tlob = (value >> 5) & 0x1;
    22d8:	8007d17a 	srai	r3,r16,5
    22dc:	18c0004c 	andi	r3,r3,1
    22e0:	10c0f615 	stw	r3,984(r2)
        regs->reg_0x0097_spdup_ldo_tpad = (value >> 4) & 0x1;
    22e4:	8007d13a 	srai	r3,r16,4
    22e8:	18c0004c 	andi	r3,r3,1
    22ec:	10c0f715 	stw	r3,988(r2)
        regs->reg_0x0097_spdup_ldo_txbuf = (value >> 3) & 0x1;
    22f0:	8007d0fa 	srai	r3,r16,3
    22f4:	18c0004c 	andi	r3,r3,1
    22f8:	10c0f815 	stw	r3,992(r2)
        regs->reg_0x0097_spdup_ldo_vcogn = (value >> 2) & 0x1;
    22fc:	8007d0ba 	srai	r3,r16,2
    2300:	18c0004c 	andi	r3,r3,1
    2304:	10c0f915 	stw	r3,996(r2)
        regs->reg_0x0097_spdup_ldo_vcosxr = (value >> 1) & 0x1;
    2308:	8007d07a 	srai	r3,r16,1
        regs->reg_0x0097_spdup_ldo_vcosxt = (value >> 0) & 0x1;
    230c:	8400004c 	andi	r16,r16,1
    2310:	1400fb15 	stw	r16,1004(r2)
        regs->reg_0x0097_spdup_ldo_tia14 = (value >> 6) & 0x1;
        regs->reg_0x0097_spdup_ldo_tlob = (value >> 5) & 0x1;
        regs->reg_0x0097_spdup_ldo_tpad = (value >> 4) & 0x1;
        regs->reg_0x0097_spdup_ldo_txbuf = (value >> 3) & 0x1;
        regs->reg_0x0097_spdup_ldo_vcogn = (value >> 2) & 0x1;
        regs->reg_0x0097_spdup_ldo_vcosxr = (value >> 1) & 0x1;
    2314:	18c0004c 	andi	r3,r3,1
    2318:	10c0fa15 	stw	r3,1000(r2)
    231c:	003c9206 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0097_spdup_ldo_vcosxt = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0098)
    2320:	00c02604 	movi	r3,152
    2324:	88c01b1e 	bne	r17,r3,2394 <set_addrs_to_default+0x1254>
    {
        regs->reg_0x0098_spdup_ldo_afe = (value >> 8) & 0x1;
    2328:	8007d23a 	srai	r3,r16,8
    232c:	18c0004c 	andi	r3,r3,1
    2330:	10c0fc15 	stw	r3,1008(r2)
        regs->reg_0x0098_spdup_ldo_cpgn = (value >> 7) & 0x1;
    2334:	8007d1fa 	srai	r3,r16,7
    2338:	18c0004c 	andi	r3,r3,1
    233c:	10c0fd15 	stw	r3,1012(r2)
        regs->reg_0x0098_spdup_ldo_cpsxr = (value >> 6) & 0x1;
    2340:	8007d1ba 	srai	r3,r16,6
    2344:	18c0004c 	andi	r3,r3,1
    2348:	10c0fe15 	stw	r3,1016(r2)
        regs->reg_0x0098_spdup_ldo_cpsxt = (value >> 5) & 0x1;
    234c:	8007d17a 	srai	r3,r16,5
    2350:	18c0004c 	andi	r3,r3,1
    2354:	10c0ff15 	stw	r3,1020(r2)
        regs->reg_0x0098_spdup_ldo_dig = (value >> 4) & 0x1;
    2358:	8007d13a 	srai	r3,r16,4
    235c:	18c0004c 	andi	r3,r3,1
    2360:	10c10015 	stw	r3,1024(r2)
        regs->reg_0x0098_spdup_ldo_diggn = (value >> 3) & 0x1;
    2364:	8007d0fa 	srai	r3,r16,3
    2368:	18c0004c 	andi	r3,r3,1
    236c:	10c10115 	stw	r3,1028(r2)
        regs->reg_0x0098_spdup_ldo_digsxr = (value >> 2) & 0x1;
    2370:	8007d0ba 	srai	r3,r16,2
    2374:	18c0004c 	andi	r3,r3,1
    2378:	10c10215 	stw	r3,1032(r2)
        regs->reg_0x0098_spdup_ldo_digsxt = (value >> 1) & 0x1;
    237c:	8007d07a 	srai	r3,r16,1
        regs->reg_0x0098_spdup_ldo_divgn = (value >> 0) & 0x1;
    2380:	8400004c 	andi	r16,r16,1
    2384:	14010415 	stw	r16,1040(r2)
        regs->reg_0x0098_spdup_ldo_cpsxr = (value >> 6) & 0x1;
        regs->reg_0x0098_spdup_ldo_cpsxt = (value >> 5) & 0x1;
        regs->reg_0x0098_spdup_ldo_dig = (value >> 4) & 0x1;
        regs->reg_0x0098_spdup_ldo_diggn = (value >> 3) & 0x1;
        regs->reg_0x0098_spdup_ldo_digsxr = (value >> 2) & 0x1;
        regs->reg_0x0098_spdup_ldo_digsxt = (value >> 1) & 0x1;
    2388:	18c0004c 	andi	r3,r3,1
    238c:	10c10315 	stw	r3,1036(r2)
    2390:	003c7506 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0098_spdup_ldo_divgn = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0099)
    2394:	00c02644 	movi	r3,153
    2398:	88c0051e 	bne	r17,r3,23b0 <set_addrs_to_default+0x1270>
    {
        regs->reg_0x0099_rdiv_vcosxr = (value >> 8) & 0xff;
    239c:	8007d23a 	srai	r3,r16,8
        regs->reg_0x0099_rdiv_vcosxt = (value >> 0) & 0xff;
    23a0:	84003fcc 	andi	r16,r16,255
    23a4:	14010615 	stw	r16,1048(r2)
        regs->reg_0x0098_spdup_ldo_divgn = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0099)
    {
        regs->reg_0x0099_rdiv_vcosxr = (value >> 8) & 0xff;
    23a8:	10c10515 	stw	r3,1044(r2)
    23ac:	003c6e06 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0099_rdiv_vcosxt = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x009A)
    23b0:	00c02684 	movi	r3,154
    23b4:	88c0051e 	bne	r17,r3,23cc <set_addrs_to_default+0x128c>
    {
        regs->reg_0x009a_rdiv_txbuf = (value >> 8) & 0xff;
    23b8:	8007d23a 	srai	r3,r16,8
        regs->reg_0x009a_rdiv_vcogn = (value >> 0) & 0xff;
    23bc:	84003fcc 	andi	r16,r16,255
    23c0:	14010815 	stw	r16,1056(r2)
        regs->reg_0x0099_rdiv_vcosxt = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x009A)
    {
        regs->reg_0x009a_rdiv_txbuf = (value >> 8) & 0xff;
    23c4:	10c10715 	stw	r3,1052(r2)
    23c8:	003c6706 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x009a_rdiv_vcogn = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x009B)
    23cc:	00c026c4 	movi	r3,155
    23d0:	88c0051e 	bne	r17,r3,23e8 <set_addrs_to_default+0x12a8>
    {
        regs->reg_0x009b_rdiv_tlob = (value >> 8) & 0xff;
    23d4:	8007d23a 	srai	r3,r16,8
        regs->reg_0x009b_rdiv_tpad = (value >> 0) & 0xff;
    23d8:	84003fcc 	andi	r16,r16,255
    23dc:	14010a15 	stw	r16,1064(r2)
        regs->reg_0x009a_rdiv_vcogn = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x009B)
    {
        regs->reg_0x009b_rdiv_tlob = (value >> 8) & 0xff;
    23e0:	10c10915 	stw	r3,1060(r2)
    23e4:	003c6006 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x009b_rdiv_tpad = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x009C)
    23e8:	00c02704 	movi	r3,156
    23ec:	88c0051e 	bne	r17,r3,2404 <set_addrs_to_default+0x12c4>
    {
        regs->reg_0x009c_rdiv_tia12 = (value >> 8) & 0xff;
    23f0:	8007d23a 	srai	r3,r16,8
        regs->reg_0x009c_rdiv_tia14 = (value >> 0) & 0xff;
    23f4:	84003fcc 	andi	r16,r16,255
    23f8:	14010c15 	stw	r16,1072(r2)
        regs->reg_0x009b_rdiv_tpad = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x009C)
    {
        regs->reg_0x009c_rdiv_tia12 = (value >> 8) & 0xff;
    23fc:	10c10b15 	stw	r3,1068(r2)
    2400:	003c5906 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x009c_rdiv_tia14 = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x009D)
    2404:	00c02744 	movi	r3,157
    2408:	88c0051e 	bne	r17,r3,2420 <set_addrs_to_default+0x12e0>
    {
        regs->reg_0x009d_rdiv_rxbuf = (value >> 8) & 0xff;
    240c:	8007d23a 	srai	r3,r16,8
        regs->reg_0x009d_rdiv_tbb = (value >> 0) & 0xff;
    2410:	84003fcc 	andi	r16,r16,255
    2414:	14010e15 	stw	r16,1080(r2)
        regs->reg_0x009c_rdiv_tia14 = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x009D)
    {
        regs->reg_0x009d_rdiv_rxbuf = (value >> 8) & 0xff;
    2418:	10c10d15 	stw	r3,1076(r2)
    241c:	003c5206 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x009d_rdiv_tbb = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x009E)
    2420:	00c02784 	movi	r3,158
    2424:	88c0051e 	bne	r17,r3,243c <set_addrs_to_default+0x12fc>
    {
        regs->reg_0x009e_rdiv_mxrfe = (value >> 8) & 0xff;
    2428:	8007d23a 	srai	r3,r16,8
        regs->reg_0x009e_rdiv_rbb = (value >> 0) & 0xff;
    242c:	84003fcc 	andi	r16,r16,255
    2430:	14011015 	stw	r16,1088(r2)
        regs->reg_0x009d_rdiv_tbb = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x009E)
    {
        regs->reg_0x009e_rdiv_mxrfe = (value >> 8) & 0xff;
    2434:	10c10f15 	stw	r3,1084(r2)
    2438:	003c4b06 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x009e_rdiv_rbb = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x009F)
    243c:	00c027c4 	movi	r3,159
    2440:	88c0051e 	bne	r17,r3,2458 <set_addrs_to_default+0x1318>
    {
        regs->reg_0x009f_rdiv_lna12 = (value >> 8) & 0xff;
    2444:	8007d23a 	srai	r3,r16,8
        regs->reg_0x009f_rdiv_lna14 = (value >> 0) & 0xff;
    2448:	84003fcc 	andi	r16,r16,255
    244c:	14011215 	stw	r16,1096(r2)
        regs->reg_0x009e_rdiv_rbb = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x009F)
    {
        regs->reg_0x009f_rdiv_lna12 = (value >> 8) & 0xff;
    2450:	10c11115 	stw	r3,1092(r2)
    2454:	003c4406 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x009f_rdiv_lna14 = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x00A0)
    2458:	00c02804 	movi	r3,160
    245c:	88c0051e 	bne	r17,r3,2474 <set_addrs_to_default+0x1334>
    {
        regs->reg_0x00a0_rdiv_divsxr = (value >> 8) & 0xff;
    2460:	8007d23a 	srai	r3,r16,8
        regs->reg_0x00a0_rdiv_divsxt = (value >> 0) & 0xff;
    2464:	84003fcc 	andi	r16,r16,255
    2468:	14011415 	stw	r16,1104(r2)
        regs->reg_0x009f_rdiv_lna14 = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x00A0)
    {
        regs->reg_0x00a0_rdiv_divsxr = (value >> 8) & 0xff;
    246c:	10c11315 	stw	r3,1100(r2)
    2470:	003c3d06 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x00a0_rdiv_divsxt = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x00A1)
    2474:	00c02844 	movi	r3,161
    2478:	88c0051e 	bne	r17,r3,2490 <set_addrs_to_default+0x1350>
    {
        regs->reg_0x00a1_rdiv_digsxt = (value >> 8) & 0xff;
    247c:	8007d23a 	srai	r3,r16,8
        regs->reg_0x00a1_rdiv_divgn = (value >> 0) & 0xff;
    2480:	84003fcc 	andi	r16,r16,255
    2484:	14011615 	stw	r16,1112(r2)
        regs->reg_0x00a0_rdiv_divsxt = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x00A1)
    {
        regs->reg_0x00a1_rdiv_digsxt = (value >> 8) & 0xff;
    2488:	10c11515 	stw	r3,1108(r2)
    248c:	003c3606 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x00a1_rdiv_divgn = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x00A2)
    2490:	00c02884 	movi	r3,162
    2494:	88c0051e 	bne	r17,r3,24ac <set_addrs_to_default+0x136c>
    {
        regs->reg_0x00a2_rdiv_diggn = (value >> 8) & 0xff;
    2498:	8007d23a 	srai	r3,r16,8
        regs->reg_0x00a2_rdiv_digsxr = (value >> 0) & 0xff;
    249c:	84003fcc 	andi	r16,r16,255
    24a0:	14011815 	stw	r16,1120(r2)
        regs->reg_0x00a1_rdiv_divgn = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x00A2)
    {
        regs->reg_0x00a2_rdiv_diggn = (value >> 8) & 0xff;
    24a4:	10c11715 	stw	r3,1116(r2)
    24a8:	003c2f06 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x00a2_rdiv_digsxr = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x00A3)
    24ac:	00c028c4 	movi	r3,163
    24b0:	88c0051e 	bne	r17,r3,24c8 <set_addrs_to_default+0x1388>
    {
        regs->reg_0x00a3_rdiv_cpsxt = (value >> 8) & 0xff;
    24b4:	8007d23a 	srai	r3,r16,8
        regs->reg_0x00a3_rdiv_dig = (value >> 0) & 0xff;
    24b8:	84003fcc 	andi	r16,r16,255
    24bc:	14011a15 	stw	r16,1128(r2)
        regs->reg_0x00a2_rdiv_digsxr = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x00A3)
    {
        regs->reg_0x00a3_rdiv_cpsxt = (value >> 8) & 0xff;
    24c0:	10c11915 	stw	r3,1124(r2)
    24c4:	003c2806 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x00a3_rdiv_dig = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x00A4)
    24c8:	00c02904 	movi	r3,164
    24cc:	88c0051e 	bne	r17,r3,24e4 <set_addrs_to_default+0x13a4>
    {
        regs->reg_0x00a4_rdiv_cpgn = (value >> 8) & 0xff;
    24d0:	8007d23a 	srai	r3,r16,8
        regs->reg_0x00a4_rdiv_cpsxr = (value >> 0) & 0xff;
    24d4:	84003fcc 	andi	r16,r16,255
    24d8:	14011c15 	stw	r16,1136(r2)
        regs->reg_0x00a3_rdiv_dig = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x00A4)
    {
        regs->reg_0x00a4_rdiv_cpgn = (value >> 8) & 0xff;
    24dc:	10c11b15 	stw	r3,1132(r2)
    24e0:	003c2106 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x00a4_rdiv_cpsxr = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x00A5)
    24e4:	00c02944 	movi	r3,165
    24e8:	88c0051e 	bne	r17,r3,2500 <set_addrs_to_default+0x13c0>
    {
        regs->reg_0x00a5_rdiv_spibuf = (value >> 8) & 0xff;
    24ec:	8007d23a 	srai	r3,r16,8
        regs->reg_0x00a5_rdiv_afe = (value >> 0) & 0xff;
    24f0:	84003fcc 	andi	r16,r16,255
    24f4:	14011e15 	stw	r16,1144(r2)
        regs->reg_0x00a4_rdiv_cpsxr = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x00A5)
    {
        regs->reg_0x00a5_rdiv_spibuf = (value >> 8) & 0xff;
    24f8:	10c11d15 	stw	r3,1140(r2)
    24fc:	003c1a06 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x00a5_rdiv_afe = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x00A6)
    2500:	00c02984 	movi	r3,166
    2504:	88c0271e 	bne	r17,r3,25a4 <set_addrs_to_default+0x1464>
    {
        regs->reg_0x00a6_spdup_ldo_spibuf = (value >> 12) & 0x1;
    2508:	8007d33a 	srai	r3,r16,12
    250c:	18c0004c 	andi	r3,r3,1
    2510:	10c11f15 	stw	r3,1148(r2)
        regs->reg_0x00a6_spdup_ldo_digip2 = (value >> 11) & 0x1;
    2514:	8007d2fa 	srai	r3,r16,11
    2518:	18c0004c 	andi	r3,r3,1
    251c:	10c12015 	stw	r3,1152(r2)
        regs->reg_0x00a6_spdup_ldo_digip1 = (value >> 10) & 0x1;
    2520:	8007d2ba 	srai	r3,r16,10
    2524:	18c0004c 	andi	r3,r3,1
    2528:	10c12115 	stw	r3,1156(r2)
        regs->reg_0x00a6_byp_ldo_spibuf = (value >> 9) & 0x1;
    252c:	8007d27a 	srai	r3,r16,9
    2530:	18c0004c 	andi	r3,r3,1
    2534:	10c12215 	stw	r3,1160(r2)
        regs->reg_0x00a6_byp_ldo_digip2 = (value >> 8) & 0x1;
    2538:	8007d23a 	srai	r3,r16,8
    253c:	18c0004c 	andi	r3,r3,1
    2540:	10c12315 	stw	r3,1164(r2)
        regs->reg_0x00a6_byp_ldo_digip1 = (value >> 7) & 0x1;
    2544:	8007d1fa 	srai	r3,r16,7
    2548:	18c0004c 	andi	r3,r3,1
    254c:	10c12415 	stw	r3,1168(r2)
        regs->reg_0x00a6_en_loadimp_ldo_spibuf = (value >> 6) & 0x1;
    2550:	8007d1ba 	srai	r3,r16,6
    2554:	18c0004c 	andi	r3,r3,1
    2558:	10c12515 	stw	r3,1172(r2)
        regs->reg_0x00a6_en_loadimp_ldo_digip2 = (value >> 5) & 0x1;
    255c:	8007d17a 	srai	r3,r16,5
    2560:	18c0004c 	andi	r3,r3,1
    2564:	10c12615 	stw	r3,1176(r2)
        regs->reg_0x00a6_en_loadimp_ldo_digip1 = (value >> 4) & 0x1;
    2568:	8007d13a 	srai	r3,r16,4
    256c:	18c0004c 	andi	r3,r3,1
    2570:	10c12715 	stw	r3,1180(r2)
        regs->reg_0x00a6_pd_ldo_spibuf = (value >> 3) & 0x1;
    2574:	8007d0fa 	srai	r3,r16,3
    2578:	18c0004c 	andi	r3,r3,1
    257c:	10c12815 	stw	r3,1184(r2)
        regs->reg_0x00a6_pd_ldo_digip2 = (value >> 2) & 0x1;
    2580:	8007d0ba 	srai	r3,r16,2
    2584:	18c0004c 	andi	r3,r3,1
    2588:	10c12915 	stw	r3,1188(r2)
        regs->reg_0x00a6_pd_ldo_digip1 = (value >> 1) & 0x1;
    258c:	8007d07a 	srai	r3,r16,1
        regs->reg_0x00a6_en_g_ldop = (value >> 0) & 0x1;
    2590:	8400004c 	andi	r16,r16,1
    2594:	14012b15 	stw	r16,1196(r2)
        regs->reg_0x00a6_en_loadimp_ldo_spibuf = (value >> 6) & 0x1;
        regs->reg_0x00a6_en_loadimp_ldo_digip2 = (value >> 5) & 0x1;
        regs->reg_0x00a6_en_loadimp_ldo_digip1 = (value >> 4) & 0x1;
        regs->reg_0x00a6_pd_ldo_spibuf = (value >> 3) & 0x1;
        regs->reg_0x00a6_pd_ldo_digip2 = (value >> 2) & 0x1;
        regs->reg_0x00a6_pd_ldo_digip1 = (value >> 1) & 0x1;
    2598:	18c0004c 	andi	r3,r3,1
    259c:	10c12a15 	stw	r3,1192(r2)
    25a0:	003bf106 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x00a6_en_g_ldop = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x00A7)
    25a4:	00c029c4 	movi	r3,167
    25a8:	88c0051e 	bne	r17,r3,25c0 <set_addrs_to_default+0x1480>
    {
        regs->reg_0x00a7_rdiv_digip2 = (value >> 8) & 0xff;
    25ac:	8007d23a 	srai	r3,r16,8
        regs->reg_0x00a7_rdiv_digip1 = (value >> 0) & 0xff;
    25b0:	84003fcc 	andi	r16,r16,255
    25b4:	14012d15 	stw	r16,1204(r2)
        regs->reg_0x00a6_en_g_ldop = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x00A7)
    {
        regs->reg_0x00a7_rdiv_digip2 = (value >> 8) & 0xff;
    25b8:	10c12c15 	stw	r3,1200(r2)
    25bc:	003bea06 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x00a7_rdiv_digip1 = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x00a8)
    25c0:	00c02a04 	movi	r3,168
    25c4:	88c0021e 	bne	r17,r3,25d0 <set_addrs_to_default+0x1490>
    {
        regs->reg_0x00a8_value = (value >> 0) & 0xffff;
    25c8:	14012e15 	stw	r16,1208(r2)
    25cc:	003be606 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x00aa)
    25d0:	00c02a84 	movi	r3,170
    25d4:	88c0021e 	bne	r17,r3,25e0 <set_addrs_to_default+0x14a0>
    {
        regs->reg_0x00aa_value = (value >> 0) & 0xffff;
    25d8:	14012f15 	stw	r16,1212(r2)
    25dc:	003be206 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x00ab)
    25e0:	00c02ac4 	movi	r3,171
    25e4:	88c0021e 	bne	r17,r3,25f0 <set_addrs_to_default+0x14b0>
    {
        regs->reg_0x00ab_value = (value >> 0) & 0xffff;
    25e8:	14013015 	stw	r16,1216(r2)
    25ec:	003bde06 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x00ad)
    25f0:	00c02b44 	movi	r3,173
    25f4:	88c0021e 	bne	r17,r3,2600 <set_addrs_to_default+0x14c0>
    {
        regs->reg_0x00ad_value = (value >> 0) & 0xffff;
    25f8:	14013115 	stw	r16,1220(r2)
    25fc:	003bda06 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x00ae)
    2600:	00c02b84 	movi	r3,174
    2604:	88c0021e 	bne	r17,r3,2610 <set_addrs_to_default+0x14d0>
    {
        regs->reg_0x00ae_value = (value >> 0) & 0xffff;
    2608:	14013215 	stw	r16,1224(r2)
    260c:	003bd606 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x0100)
    2610:	00c04004 	movi	r3,256
    2614:	88c0171e 	bne	r17,r3,2674 <set_addrs_to_default+0x1534>
    {
        regs->reg_0x0100_en_lowbwlomx_tmx_trf = (value >> 15) & 0x1;
    2618:	8007d3fa 	srai	r3,r16,15
    261c:	10c13315 	stw	r3,1228(r2)
        regs->reg_0x0100_en_nexttx_trf = (value >> 14) & 0x1;
    2620:	8007d3ba 	srai	r3,r16,14
    2624:	18c0004c 	andi	r3,r3,1
    2628:	10c13415 	stw	r3,1232(r2)
        regs->reg_0x0100_en_amphf_pdet_trf = (value >> 12) & 0x3;
    262c:	8007d33a 	srai	r3,r16,12
    2630:	18c000cc 	andi	r3,r3,3
    2634:	10c13515 	stw	r3,1236(r2)
        regs->reg_0x0100_loadr_pdet_trf = (value >> 10) & 0x3;
    2638:	8007d2ba 	srai	r3,r16,10
    263c:	18c000cc 	andi	r3,r3,3
    2640:	10c13615 	stw	r3,1240(r2)
        regs->reg_0x0100_pd_pdet_trf = (value >> 3) & 0x1;
    2644:	8007d0fa 	srai	r3,r16,3
    2648:	18c0004c 	andi	r3,r3,1
    264c:	10c13715 	stw	r3,1244(r2)
        regs->reg_0x0100_pd_tlobuf_trf = (value >> 2) & 0x1;
    2650:	8007d0ba 	srai	r3,r16,2
    2654:	18c0004c 	andi	r3,r3,1
    2658:	10c13815 	stw	r3,1248(r2)
        regs->reg_0x0100_pd_txpad_trf = (value >> 1) & 0x1;
    265c:	8007d07a 	srai	r3,r16,1
        regs->reg_0x0100_en_g_trf = (value >> 0) & 0x1;
    2660:	8400004c 	andi	r16,r16,1
    2664:	14013a15 	stw	r16,1256(r2)
        regs->reg_0x0100_en_nexttx_trf = (value >> 14) & 0x1;
        regs->reg_0x0100_en_amphf_pdet_trf = (value >> 12) & 0x3;
        regs->reg_0x0100_loadr_pdet_trf = (value >> 10) & 0x3;
        regs->reg_0x0100_pd_pdet_trf = (value >> 3) & 0x1;
        regs->reg_0x0100_pd_tlobuf_trf = (value >> 2) & 0x1;
        regs->reg_0x0100_pd_txpad_trf = (value >> 1) & 0x1;
    2668:	18c0004c 	andi	r3,r3,1
    266c:	10c13915 	stw	r3,1252(r2)
    2670:	003bbd06 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0100_en_g_trf = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0101)
    2674:	00c04044 	movi	r3,257
    2678:	88c00e1e 	bne	r17,r3,26b4 <set_addrs_to_default+0x1574>
    {
        regs->reg_0x0101_f_txpad_trf = (value >> 13) & 0x7;
    267c:	8007d37a 	srai	r3,r16,13
    2680:	10c13b15 	stw	r3,1260(r2)
        regs->reg_0x0101_l_loopb_txpad_trf = (value >> 11) & 0x3;
    2684:	8007d2fa 	srai	r3,r16,11
    2688:	18c000cc 	andi	r3,r3,3
    268c:	10c13c15 	stw	r3,1264(r2)
        regs->reg_0x0101_loss_lin_txpad_trf = (value >> 6) & 0x1f;
    2690:	8007d1ba 	srai	r3,r16,6
    2694:	18c007cc 	andi	r3,r3,31
    2698:	10c13d15 	stw	r3,1268(r2)
        regs->reg_0x0101_loss_main_txpad_trf = (value >> 1) & 0x1f;
    269c:	8007d07a 	srai	r3,r16,1
        regs->reg_0x0101_en_loopb_txpad_trf = (value >> 0) & 0x1;
    26a0:	8400004c 	andi	r16,r16,1
    26a4:	14013f15 	stw	r16,1276(r2)
    if (addr == 0x0101)
    {
        regs->reg_0x0101_f_txpad_trf = (value >> 13) & 0x7;
        regs->reg_0x0101_l_loopb_txpad_trf = (value >> 11) & 0x3;
        regs->reg_0x0101_loss_lin_txpad_trf = (value >> 6) & 0x1f;
        regs->reg_0x0101_loss_main_txpad_trf = (value >> 1) & 0x1f;
    26a8:	18c007cc 	andi	r3,r3,31
    26ac:	10c13e15 	stw	r3,1272(r2)
    26b0:	003bad06 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0101_en_loopb_txpad_trf = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0102)
    26b4:	00c04084 	movi	r3,258
    26b8:	88c00b1e 	bne	r17,r3,26e8 <set_addrs_to_default+0x15a8>
    {
        regs->reg_0x0102_gcas_gndref_txpad_trf = (value >> 15) & 0x1;
    26bc:	8007d3fa 	srai	r3,r16,15
    26c0:	10c14015 	stw	r3,1280(r2)
        regs->reg_0x0102_ict_lin_txpad_trf = (value >> 10) & 0x1f;
    26c4:	8007d2ba 	srai	r3,r16,10
    26c8:	18c007cc 	andi	r3,r3,31
    26cc:	10c14115 	stw	r3,1284(r2)
        regs->reg_0x0102_ict_main_txpad_trf = (value >> 5) & 0x1f;
    26d0:	8007d17a 	srai	r3,r16,5
        regs->reg_0x0102_vgcas_txpad_trf = (value >> 0) & 0x1f;
    26d4:	840007cc 	andi	r16,r16,31
    26d8:	14014315 	stw	r16,1292(r2)
    }
    if (addr == 0x0102)
    {
        regs->reg_0x0102_gcas_gndref_txpad_trf = (value >> 15) & 0x1;
        regs->reg_0x0102_ict_lin_txpad_trf = (value >> 10) & 0x1f;
        regs->reg_0x0102_ict_main_txpad_trf = (value >> 5) & 0x1f;
    26dc:	18c007cc 	andi	r3,r3,31
    26e0:	10c14215 	stw	r3,1288(r2)
    26e4:	003ba006 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0102_vgcas_txpad_trf = (value >> 0) & 0x1f;
        return;
    }
    if (addr == 0x0103)
    26e8:	00c040c4 	movi	r3,259
    26ec:	88c00c1e 	bne	r17,r3,2720 <set_addrs_to_default+0x15e0>
    {
        regs->reg_0x0103_sel_band1_trf = (value >> 11) & 0x1;
    26f0:	8007d2fa 	srai	r3,r16,11
    26f4:	18c0004c 	andi	r3,r3,1
    26f8:	10c14415 	stw	r3,1296(r2)
        regs->reg_0x0103_sel_band2_trf = (value >> 10) & 0x1;
    26fc:	8007d2ba 	srai	r3,r16,10
    2700:	18c0004c 	andi	r3,r3,1
    2704:	10c14515 	stw	r3,1300(r2)
        regs->reg_0x0103_lobiasn_txm_trf = (value >> 5) & 0x1f;
    2708:	8007d17a 	srai	r3,r16,5
        regs->reg_0x0103_lobiasp_txx_trf = (value >> 0) & 0x1f;
    270c:	840007cc 	andi	r16,r16,31
    2710:	14014715 	stw	r16,1308(r2)
    }
    if (addr == 0x0103)
    {
        regs->reg_0x0103_sel_band1_trf = (value >> 11) & 0x1;
        regs->reg_0x0103_sel_band2_trf = (value >> 10) & 0x1;
        regs->reg_0x0103_lobiasn_txm_trf = (value >> 5) & 0x1f;
    2714:	18c007cc 	andi	r3,r3,31
    2718:	10c14615 	stw	r3,1304(r2)
    271c:	003b9206 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0103_lobiasp_txx_trf = (value >> 0) & 0x1f;
        return;
    }
    if (addr == 0x0104)
    2720:	00c04104 	movi	r3,260
    2724:	88c0061e 	bne	r17,r3,2740 <set_addrs_to_default+0x1600>
    {
        regs->reg_0x0104_cdc_i_trf = (value >> 4) & 0xf;
    2728:	8007d13a 	srai	r3,r16,4
        regs->reg_0x0104_cdc_q_trf = (value >> 0) & 0xf;
    272c:	840003cc 	andi	r16,r16,15
    2730:	14014915 	stw	r16,1316(r2)
        regs->reg_0x0103_lobiasp_txx_trf = (value >> 0) & 0x1f;
        return;
    }
    if (addr == 0x0104)
    {
        regs->reg_0x0104_cdc_i_trf = (value >> 4) & 0xf;
    2734:	18c003cc 	andi	r3,r3,15
    2738:	10c14815 	stw	r3,1312(r2)
    273c:	003b8a06 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0104_cdc_q_trf = (value >> 0) & 0xf;
        return;
    }
    if (addr == 0x0105)
    2740:	00c04144 	movi	r3,261
    2744:	88c0141e 	bne	r17,r3,2798 <set_addrs_to_default+0x1658>
    {
        regs->reg_0x0105_statpulse_tbb = (value >> 15) & 0x1;
    2748:	8007d3fa 	srai	r3,r16,15
    274c:	10c14a15 	stw	r3,1320(r2)
        regs->reg_0x0105_loopb_tbb = (value >> 12) & 0x7;
    2750:	8007d33a 	srai	r3,r16,12
    2754:	18c001cc 	andi	r3,r3,7
    2758:	10c14b15 	stw	r3,1324(r2)
        regs->reg_0x0105_pd_lpfh_tbb = (value >> 4) & 0x1;
    275c:	8007d13a 	srai	r3,r16,4
    2760:	18c0004c 	andi	r3,r3,1
    2764:	10c14c15 	stw	r3,1328(r2)
        regs->reg_0x0105_pd_lpfiamp_tbb = (value >> 3) & 0x1;
    2768:	8007d0fa 	srai	r3,r16,3
    276c:	18c0004c 	andi	r3,r3,1
    2770:	10c14d15 	stw	r3,1332(r2)
        regs->reg_0x0105_pd_lpflad_tbb = (value >> 2) & 0x1;
    2774:	8007d0ba 	srai	r3,r16,2
    2778:	18c0004c 	andi	r3,r3,1
    277c:	10c14e15 	stw	r3,1336(r2)
        regs->reg_0x0105_pd_lpfs5_tbb = (value >> 1) & 0x1;
    2780:	8007d07a 	srai	r3,r16,1
        regs->reg_0x0105_en_g_tbb = (value >> 0) & 0x1;
    2784:	8400004c 	andi	r16,r16,1
    2788:	14015015 	stw	r16,1344(r2)
        regs->reg_0x0105_statpulse_tbb = (value >> 15) & 0x1;
        regs->reg_0x0105_loopb_tbb = (value >> 12) & 0x7;
        regs->reg_0x0105_pd_lpfh_tbb = (value >> 4) & 0x1;
        regs->reg_0x0105_pd_lpfiamp_tbb = (value >> 3) & 0x1;
        regs->reg_0x0105_pd_lpflad_tbb = (value >> 2) & 0x1;
        regs->reg_0x0105_pd_lpfs5_tbb = (value >> 1) & 0x1;
    278c:	18c0004c 	andi	r3,r3,1
    2790:	10c14f15 	stw	r3,1340(r2)
    2794:	003b7406 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0105_en_g_tbb = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0106)
    2798:	00c04184 	movi	r3,262
    279c:	88c0091e 	bne	r17,r3,27c4 <set_addrs_to_default+0x1684>
    {
        regs->reg_0x0106_ict_lpfs5_f_tbb = (value >> 10) & 0x1f;
    27a0:	8007d2ba 	srai	r3,r16,10
    27a4:	18c007cc 	andi	r3,r3,31
    27a8:	10c15115 	stw	r3,1348(r2)
        regs->reg_0x0106_ict_lpfs5_pt_tbb = (value >> 5) & 0x1f;
    27ac:	8007d17a 	srai	r3,r16,5
        regs->reg_0x0106_ict_lpf_h_pt_tbb = (value >> 0) & 0x1f;
    27b0:	840007cc 	andi	r16,r16,31
    27b4:	14015315 	stw	r16,1356(r2)
        return;
    }
    if (addr == 0x0106)
    {
        regs->reg_0x0106_ict_lpfs5_f_tbb = (value >> 10) & 0x1f;
        regs->reg_0x0106_ict_lpfs5_pt_tbb = (value >> 5) & 0x1f;
    27b8:	18c007cc 	andi	r3,r3,31
    27bc:	10c15215 	stw	r3,1352(r2)
    27c0:	003b6906 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0106_ict_lpf_h_pt_tbb = (value >> 0) & 0x1f;
        return;
    }
    if (addr == 0x0107)
    27c4:	00c041c4 	movi	r3,263
    27c8:	88c0091e 	bne	r17,r3,27f0 <set_addrs_to_default+0x16b0>
    {
        regs->reg_0x0107_ict_lpfh_f_tbb = (value >> 10) & 0x1f;
    27cc:	8007d2ba 	srai	r3,r16,10
    27d0:	18c007cc 	andi	r3,r3,31
    27d4:	10c15415 	stw	r3,1360(r2)
        regs->reg_0x0107_ict_lpflad_f_tbb = (value >> 5) & 0x1f;
    27d8:	8007d17a 	srai	r3,r16,5
        regs->reg_0x0107_ict_lpflad_pt_tbb = (value >> 0) & 0x1f;
    27dc:	840007cc 	andi	r16,r16,31
    27e0:	14015615 	stw	r16,1368(r2)
        return;
    }
    if (addr == 0x0107)
    {
        regs->reg_0x0107_ict_lpfh_f_tbb = (value >> 10) & 0x1f;
        regs->reg_0x0107_ict_lpflad_f_tbb = (value >> 5) & 0x1f;
    27e4:	18c007cc 	andi	r3,r3,31
    27e8:	10c15515 	stw	r3,1364(r2)
    27ec:	003b5e06 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0107_ict_lpflad_pt_tbb = (value >> 0) & 0x1f;
        return;
    }
    if (addr == 0x0108)
    27f0:	00c04204 	movi	r3,264
    27f4:	88c0081e 	bne	r17,r3,2818 <set_addrs_to_default+0x16d8>
    {
        regs->reg_0x0108_cg_iamp_tbb = (value >> 10) & 0x3f;
    27f8:	8007d2ba 	srai	r3,r16,10
    27fc:	10c15715 	stw	r3,1372(r2)
        regs->reg_0x0108_ict_iamp_frp_tbb = (value >> 5) & 0x1f;
    2800:	8007d17a 	srai	r3,r16,5
        regs->reg_0x0108_ict_iamp_gg_frp_tbb = (value >> 0) & 0x1f;
    2804:	840007cc 	andi	r16,r16,31
    2808:	14015915 	stw	r16,1380(r2)
        return;
    }
    if (addr == 0x0108)
    {
        regs->reg_0x0108_cg_iamp_tbb = (value >> 10) & 0x3f;
        regs->reg_0x0108_ict_iamp_frp_tbb = (value >> 5) & 0x1f;
    280c:	18c007cc 	andi	r3,r3,31
    2810:	10c15815 	stw	r3,1376(r2)
    2814:	003b5406 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0108_ict_iamp_gg_frp_tbb = (value >> 0) & 0x1f;
        return;
    }
    if (addr == 0x0109)
    2818:	00c04244 	movi	r3,265
    281c:	88c0051e 	bne	r17,r3,2834 <set_addrs_to_default+0x16f4>
    {
        regs->reg_0x0109_rcal_lpfh_tbb = (value >> 8) & 0xff;
    2820:	8007d23a 	srai	r3,r16,8
        regs->reg_0x0109_rcal_lpflad_tbb = (value >> 0) & 0xff;
    2824:	84003fcc 	andi	r16,r16,255
    2828:	14015b15 	stw	r16,1388(r2)
        regs->reg_0x0108_ict_iamp_gg_frp_tbb = (value >> 0) & 0x1f;
        return;
    }
    if (addr == 0x0109)
    {
        regs->reg_0x0109_rcal_lpfh_tbb = (value >> 8) & 0xff;
    282c:	10c15a15 	stw	r3,1384(r2)
    2830:	003b4d06 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0109_rcal_lpflad_tbb = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x010A)
    2834:	00c04284 	movi	r3,266
    2838:	88c00b1e 	bne	r17,r3,2868 <set_addrs_to_default+0x1728>
    {
        regs->reg_0x010a_tstin_tbb = (value >> 14) & 0x3;
    283c:	8007d3ba 	srai	r3,r16,14
    2840:	10c15c15 	stw	r3,1392(r2)
        regs->reg_0x010a_bypladder_tbb = (value >> 13) & 0x1;
    2844:	8007d37a 	srai	r3,r16,13
    2848:	18c0004c 	andi	r3,r3,1
    284c:	10c15d15 	stw	r3,1396(r2)
        regs->reg_0x010a_ccal_lpflad_tbb = (value >> 8) & 0x1f;
    2850:	8007d23a 	srai	r3,r16,8
        regs->reg_0x010a_rcal_lpfs5_tbb = (value >> 0) & 0xff;
    2854:	84003fcc 	andi	r16,r16,255
    2858:	14015f15 	stw	r16,1404(r2)
    }
    if (addr == 0x010A)
    {
        regs->reg_0x010a_tstin_tbb = (value >> 14) & 0x3;
        regs->reg_0x010a_bypladder_tbb = (value >> 13) & 0x1;
        regs->reg_0x010a_ccal_lpflad_tbb = (value >> 8) & 0x1f;
    285c:	18c007cc 	andi	r3,r3,31
    2860:	10c15e15 	stw	r3,1400(r2)
    2864:	003b4006 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x010a_rcal_lpfs5_tbb = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x010b)
    2868:	00c042c4 	movi	r3,267
    286c:	88c0021e 	bne	r17,r3,2878 <set_addrs_to_default+0x1738>
    {
        regs->reg_0x010b_value = (value >> 0) & 0xffff;
    2870:	14016015 	stw	r16,1408(r2)
    2874:	003b3c06 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x010C)
    2878:	00c04304 	movi	r3,268
    287c:	88c01d1e 	bne	r17,r3,28f4 <set_addrs_to_default+0x17b4>
    {
        regs->reg_0x010c_cdc_i_rfe = (value >> 12) & 0xf;
    2880:	8007d33a 	srai	r3,r16,12
    2884:	10c16115 	stw	r3,1412(r2)
        regs->reg_0x010c_cdc_q_rfe = (value >> 8) & 0xf;
    2888:	8007d23a 	srai	r3,r16,8
    288c:	18c003cc 	andi	r3,r3,15
    2890:	10c16215 	stw	r3,1416(r2)
        regs->reg_0x010c_pd_lna_rfe = (value >> 7) & 0x1;
    2894:	8007d1fa 	srai	r3,r16,7
    2898:	18c0004c 	andi	r3,r3,1
    289c:	10c16315 	stw	r3,1420(r2)
        regs->reg_0x010c_pd_rloopb_1_rfe = (value >> 6) & 0x1;
    28a0:	8007d1ba 	srai	r3,r16,6
    28a4:	18c0004c 	andi	r3,r3,1
    28a8:	10c16415 	stw	r3,1424(r2)
        regs->reg_0x010c_pd_rloopb_2_rfe = (value >> 5) & 0x1;
    28ac:	8007d17a 	srai	r3,r16,5
    28b0:	18c0004c 	andi	r3,r3,1
    28b4:	10c16515 	stw	r3,1428(r2)
        regs->reg_0x010c_pd_mxlobuf_rfe = (value >> 4) & 0x1;
    28b8:	8007d13a 	srai	r3,r16,4
    28bc:	18c0004c 	andi	r3,r3,1
    28c0:	10c16615 	stw	r3,1432(r2)
        regs->reg_0x010c_pd_qgen_rfe = (value >> 3) & 0x1;
    28c4:	8007d0fa 	srai	r3,r16,3
    28c8:	18c0004c 	andi	r3,r3,1
    28cc:	10c16715 	stw	r3,1436(r2)
        regs->reg_0x010c_pd_rssi_rfe = (value >> 2) & 0x1;
    28d0:	8007d0ba 	srai	r3,r16,2
    28d4:	18c0004c 	andi	r3,r3,1
    28d8:	10c16815 	stw	r3,1440(r2)
        regs->reg_0x010c_pd_tia_rfe = (value >> 1) & 0x1;
    28dc:	8007d07a 	srai	r3,r16,1
        regs->reg_0x010c_en_g_rfe = (value >> 0) & 0x1;
    28e0:	8400004c 	andi	r16,r16,1
    28e4:	14016a15 	stw	r16,1448(r2)
        regs->reg_0x010c_pd_rloopb_1_rfe = (value >> 6) & 0x1;
        regs->reg_0x010c_pd_rloopb_2_rfe = (value >> 5) & 0x1;
        regs->reg_0x010c_pd_mxlobuf_rfe = (value >> 4) & 0x1;
        regs->reg_0x010c_pd_qgen_rfe = (value >> 3) & 0x1;
        regs->reg_0x010c_pd_rssi_rfe = (value >> 2) & 0x1;
        regs->reg_0x010c_pd_tia_rfe = (value >> 1) & 0x1;
    28e8:	18c0004c 	andi	r3,r3,1
    28ec:	10c16915 	stw	r3,1444(r2)
    28f0:	003b1d06 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x010c_en_g_rfe = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x010D)
    28f4:	00c04344 	movi	r3,269
    28f8:	88c0151e 	bne	r17,r3,2950 <set_addrs_to_default+0x1810>
    {
        regs->reg_0x010d_sel_path_rfe = (value >> 7) & 0x3;
    28fc:	8007d1fa 	srai	r3,r16,7
    2900:	18c000cc 	andi	r3,r3,3
    2904:	10c16b15 	stw	r3,1452(r2)
        regs->reg_0x010d_en_dcoff_rxfe_rfe = (value >> 6) & 0x1;
    2908:	8007d1ba 	srai	r3,r16,6
    290c:	18c0004c 	andi	r3,r3,1
    2910:	10c16c15 	stw	r3,1456(r2)
        regs->reg_0x010d_en_inshsw_lb1_rfe = (value >> 4) & 0x1;
    2914:	8007d13a 	srai	r3,r16,4
    2918:	18c0004c 	andi	r3,r3,1
    291c:	10c16d15 	stw	r3,1460(r2)
        regs->reg_0x010d_en_inshsw_lb2_rfe = (value >> 3) & 0x1;
    2920:	8007d0fa 	srai	r3,r16,3
    2924:	18c0004c 	andi	r3,r3,1
    2928:	10c16e15 	stw	r3,1464(r2)
        regs->reg_0x010d_en_inshsw_l_rfe = (value >> 2) & 0x1;
    292c:	8007d0ba 	srai	r3,r16,2
    2930:	18c0004c 	andi	r3,r3,1
    2934:	10c16f15 	stw	r3,1468(r2)
        regs->reg_0x010d_en_inshsw_w_rfe = (value >> 1) & 0x1;
    2938:	8007d07a 	srai	r3,r16,1
        regs->reg_0x010d_en_nextrx_rfe = (value >> 0) & 0x1;
    293c:	8400004c 	andi	r16,r16,1
    2940:	14017115 	stw	r16,1476(r2)
        regs->reg_0x010d_sel_path_rfe = (value >> 7) & 0x3;
        regs->reg_0x010d_en_dcoff_rxfe_rfe = (value >> 6) & 0x1;
        regs->reg_0x010d_en_inshsw_lb1_rfe = (value >> 4) & 0x1;
        regs->reg_0x010d_en_inshsw_lb2_rfe = (value >> 3) & 0x1;
        regs->reg_0x010d_en_inshsw_l_rfe = (value >> 2) & 0x1;
        regs->reg_0x010d_en_inshsw_w_rfe = (value >> 1) & 0x1;
    2944:	18c0004c 	andi	r3,r3,1
    2948:	10c17015 	stw	r3,1472(r2)
    294c:	003b0606 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x010d_en_nextrx_rfe = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x010E)
    2950:	00c04384 	movi	r3,270
    2954:	88c0061e 	bne	r17,r3,2970 <set_addrs_to_default+0x1830>
    {
        regs->reg_0x010e_dcoffi_rfe = (value >> 7) & 0x7f;
    2958:	8007d1fa 	srai	r3,r16,7
        regs->reg_0x010e_dcoffq_rfe = (value >> 0) & 0x7f;
    295c:	84001fcc 	andi	r16,r16,127
    2960:	14017315 	stw	r16,1484(r2)
        regs->reg_0x010d_en_nextrx_rfe = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x010E)
    {
        regs->reg_0x010e_dcoffi_rfe = (value >> 7) & 0x7f;
    2964:	18c01fcc 	andi	r3,r3,127
    2968:	10c17215 	stw	r3,1480(r2)
    296c:	003afe06 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x010e_dcoffq_rfe = (value >> 0) & 0x7f;
        return;
    }
    if (addr == 0x010F)
    2970:	00c043c4 	movi	r3,271
    2974:	88c0091e 	bne	r17,r3,299c <set_addrs_to_default+0x185c>
    {
        regs->reg_0x010f_ict_loopb_rfe = (value >> 10) & 0x1f;
    2978:	8007d2ba 	srai	r3,r16,10
    297c:	18c007cc 	andi	r3,r3,31
    2980:	10c17415 	stw	r3,1488(r2)
        regs->reg_0x010f_ict_tiamain_rfe = (value >> 5) & 0x1f;
    2984:	8007d17a 	srai	r3,r16,5
        regs->reg_0x010f_ict_tiaout_rfe = (value >> 0) & 0x1f;
    2988:	840007cc 	andi	r16,r16,31
    298c:	14017615 	stw	r16,1496(r2)
        return;
    }
    if (addr == 0x010F)
    {
        regs->reg_0x010f_ict_loopb_rfe = (value >> 10) & 0x1f;
        regs->reg_0x010f_ict_tiamain_rfe = (value >> 5) & 0x1f;
    2990:	18c007cc 	andi	r3,r3,31
    2994:	10c17515 	stw	r3,1492(r2)
    2998:	003af306 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x010f_ict_tiaout_rfe = (value >> 0) & 0x1f;
        return;
    }
    if (addr == 0x0110)
    299c:	00c04404 	movi	r3,272
    29a0:	88c0091e 	bne	r17,r3,29c8 <set_addrs_to_default+0x1888>
    {
        regs->reg_0x0110_ict_lnacmo_rfe = (value >> 10) & 0x1f;
    29a4:	8007d2ba 	srai	r3,r16,10
    29a8:	18c007cc 	andi	r3,r3,31
    29ac:	10c17715 	stw	r3,1500(r2)
        regs->reg_0x0110_ict_lna_rfe = (value >> 5) & 0x1f;
    29b0:	8007d17a 	srai	r3,r16,5
        regs->reg_0x0110_ict_lodc_rfe = (value >> 0) & 0x1f;
    29b4:	840007cc 	andi	r16,r16,31
    29b8:	14017915 	stw	r16,1508(r2)
        return;
    }
    if (addr == 0x0110)
    {
        regs->reg_0x0110_ict_lnacmo_rfe = (value >> 10) & 0x1f;
        regs->reg_0x0110_ict_lna_rfe = (value >> 5) & 0x1f;
    29bc:	18c007cc 	andi	r3,r3,31
    29c0:	10c17815 	stw	r3,1504(r2)
    29c4:	003ae806 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0110_ict_lodc_rfe = (value >> 0) & 0x1f;
        return;
    }
    if (addr == 0x0111)
    29c8:	00c04444 	movi	r3,273
    29cc:	88c0061e 	bne	r17,r3,29e8 <set_addrs_to_default+0x18a8>
    {
        regs->reg_0x0111_cap_rxmxo_rfe = (value >> 5) & 0x1f;
    29d0:	8007d17a 	srai	r3,r16,5
        regs->reg_0x0111_cgsin_lna_rfe = (value >> 0) & 0x1f;
    29d4:	840007cc 	andi	r16,r16,31
    29d8:	14017b15 	stw	r16,1516(r2)
        regs->reg_0x0110_ict_lodc_rfe = (value >> 0) & 0x1f;
        return;
    }
    if (addr == 0x0111)
    {
        regs->reg_0x0111_cap_rxmxo_rfe = (value >> 5) & 0x1f;
    29dc:	18c007cc 	andi	r3,r3,31
    29e0:	10c17a15 	stw	r3,1512(r2)
    29e4:	003ae006 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0111_cgsin_lna_rfe = (value >> 0) & 0x1f;
        return;
    }
    if (addr == 0x0112)
    29e8:	00c04484 	movi	r3,274
    29ec:	88c0051e 	bne	r17,r3,2a04 <set_addrs_to_default+0x18c4>
    {
        regs->reg_0x0112_ccomp_tia_rfe = (value >> 12) & 0xf;
    29f0:	8007d33a 	srai	r3,r16,12
        regs->reg_0x0112_cfb_tia_rfe = (value >> 0) & 0xfff;
    29f4:	8403ffcc 	andi	r16,r16,4095
    29f8:	14017d15 	stw	r16,1524(r2)
        regs->reg_0x0111_cgsin_lna_rfe = (value >> 0) & 0x1f;
        return;
    }
    if (addr == 0x0112)
    {
        regs->reg_0x0112_ccomp_tia_rfe = (value >> 12) & 0xf;
    29fc:	10c17c15 	stw	r3,1520(r2)
    2a00:	003ad906 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0112_cfb_tia_rfe = (value >> 0) & 0xfff;
        return;
    }
    if (addr == 0x0113)
    2a04:	00c044c4 	movi	r3,275
    2a08:	88c0091e 	bne	r17,r3,2a30 <set_addrs_to_default+0x18f0>
    {
        regs->reg_0x0113_g_lna_rfe = (value >> 6) & 0xf;
    2a0c:	8007d1ba 	srai	r3,r16,6
    2a10:	18c003cc 	andi	r3,r3,15
    2a14:	10c17e15 	stw	r3,1528(r2)
        regs->reg_0x0113_g_rxloopb_rfe = (value >> 2) & 0xf;
    2a18:	8007d0ba 	srai	r3,r16,2
        regs->reg_0x0113_g_tia_rfe = (value >> 0) & 0x3;
    2a1c:	840000cc 	andi	r16,r16,3
    2a20:	14018015 	stw	r16,1536(r2)
        return;
    }
    if (addr == 0x0113)
    {
        regs->reg_0x0113_g_lna_rfe = (value >> 6) & 0xf;
        regs->reg_0x0113_g_rxloopb_rfe = (value >> 2) & 0xf;
    2a24:	18c003cc 	andi	r3,r3,15
    2a28:	10c17f15 	stw	r3,1532(r2)
    2a2c:	003ace06 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0113_g_tia_rfe = (value >> 0) & 0x3;
        return;
    }
    if (addr == 0x0114)
    2a30:	00c04504 	movi	r3,276
    2a34:	88c0061e 	bne	r17,r3,2a50 <set_addrs_to_default+0x1910>
    {
        regs->reg_0x0114_rcomp_tia_rfe = (value >> 5) & 0xf;
    2a38:	8007d17a 	srai	r3,r16,5
        regs->reg_0x0114_rfb_tia_rfe = (value >> 0) & 0x1f;
    2a3c:	840007cc 	andi	r16,r16,31
    2a40:	14018215 	stw	r16,1544(r2)
        regs->reg_0x0113_g_tia_rfe = (value >> 0) & 0x3;
        return;
    }
    if (addr == 0x0114)
    {
        regs->reg_0x0114_rcomp_tia_rfe = (value >> 5) & 0xf;
    2a44:	18c003cc 	andi	r3,r3,15
    2a48:	10c18115 	stw	r3,1540(r2)
    2a4c:	003ac606 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0114_rfb_tia_rfe = (value >> 0) & 0x1f;
        return;
    }
    if (addr == 0x0115)
    2a50:	00c04544 	movi	r3,277
    2a54:	88c0111e 	bne	r17,r3,2a9c <set_addrs_to_default+0x195c>
    {
        regs->reg_0x0115_en_lb_lpfh_rbb = (value >> 15) & 0x1;
    2a58:	8007d3fa 	srai	r3,r16,15
    2a5c:	10c18315 	stw	r3,1548(r2)
        regs->reg_0x0115_en_lb_lpfl_rbb = (value >> 14) & 0x1;
    2a60:	8007d3ba 	srai	r3,r16,14
    2a64:	18c0004c 	andi	r3,r3,1
    2a68:	10c18415 	stw	r3,1552(r2)
        regs->reg_0x0115_pd_lpfh_rbb = (value >> 3) & 0x1;
    2a6c:	8007d0fa 	srai	r3,r16,3
    2a70:	18c0004c 	andi	r3,r3,1
    2a74:	10c18515 	stw	r3,1556(r2)
        regs->reg_0x0115_pd_lpfl_rbb = (value >> 2) & 0x1;
    2a78:	8007d0ba 	srai	r3,r16,2
    2a7c:	18c0004c 	andi	r3,r3,1
    2a80:	10c18615 	stw	r3,1560(r2)
        regs->reg_0x0115_pd_pga_rbb = (value >> 1) & 0x1;
    2a84:	8007d07a 	srai	r3,r16,1
        regs->reg_0x0115_en_g_rbb = (value >> 0) & 0x1;
    2a88:	8400004c 	andi	r16,r16,1
    2a8c:	14018815 	stw	r16,1568(r2)
    {
        regs->reg_0x0115_en_lb_lpfh_rbb = (value >> 15) & 0x1;
        regs->reg_0x0115_en_lb_lpfl_rbb = (value >> 14) & 0x1;
        regs->reg_0x0115_pd_lpfh_rbb = (value >> 3) & 0x1;
        regs->reg_0x0115_pd_lpfl_rbb = (value >> 2) & 0x1;
        regs->reg_0x0115_pd_pga_rbb = (value >> 1) & 0x1;
    2a90:	18c0004c 	andi	r3,r3,1
    2a94:	10c18715 	stw	r3,1564(r2)
    2a98:	003ab306 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0115_en_g_rbb = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0116)
    2a9c:	00c04584 	movi	r3,278
    2aa0:	88c0081e 	bne	r17,r3,2ac4 <set_addrs_to_default+0x1984>
    {
        regs->reg_0x0116_r_ctl_lpf_rbb = (value >> 11) & 0x1f;
    2aa4:	8007d2fa 	srai	r3,r16,11
    2aa8:	10c18915 	stw	r3,1572(r2)
        regs->reg_0x0116_rcc_ctl_lpfh_rbb = (value >> 8) & 0x7;
    2aac:	8007d23a 	srai	r3,r16,8
        regs->reg_0x0116_c_ctl_lpfh_rbb = (value >> 0) & 0xff;
    2ab0:	84003fcc 	andi	r16,r16,255
    2ab4:	14018b15 	stw	r16,1580(r2)
        return;
    }
    if (addr == 0x0116)
    {
        regs->reg_0x0116_r_ctl_lpf_rbb = (value >> 11) & 0x1f;
        regs->reg_0x0116_rcc_ctl_lpfh_rbb = (value >> 8) & 0x7;
    2ab8:	18c001cc 	andi	r3,r3,7
    2abc:	10c18a15 	stw	r3,1576(r2)
    2ac0:	003aa906 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0116_c_ctl_lpfh_rbb = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x0117)
    2ac4:	00c045c4 	movi	r3,279
    2ac8:	88c0061e 	bne	r17,r3,2ae4 <set_addrs_to_default+0x19a4>
    {
        regs->reg_0x0117_rcc_ctl_lpfl_rbb = (value >> 11) & 0x7;
    2acc:	8007d2fa 	srai	r3,r16,11
        regs->reg_0x0117_c_ctl_lpfl_rbb = (value >> 0) & 0x7ff;
    2ad0:	8401ffcc 	andi	r16,r16,2047
    2ad4:	14018d15 	stw	r16,1588(r2)
        regs->reg_0x0116_c_ctl_lpfh_rbb = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x0117)
    {
        regs->reg_0x0117_rcc_ctl_lpfl_rbb = (value >> 11) & 0x7;
    2ad8:	18c001cc 	andi	r3,r3,7
    2adc:	10c18c15 	stw	r3,1584(r2)
    2ae0:	003aa106 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0117_c_ctl_lpfl_rbb = (value >> 0) & 0x7ff;
        return;
    }
    if (addr == 0x0118)
    2ae4:	00c04604 	movi	r3,280
    2ae8:	88c0081e 	bne	r17,r3,2b0c <set_addrs_to_default+0x19cc>
    {
        regs->reg_0x0118_input_ctl_pga_rbb = (value >> 13) & 0x7;
    2aec:	8007d37a 	srai	r3,r16,13
    2af0:	10c18e15 	stw	r3,1592(r2)
        regs->reg_0x0118_ict_lpf_in_rbb = (value >> 5) & 0x1f;
    2af4:	8007d17a 	srai	r3,r16,5
        regs->reg_0x0118_ict_lpf_out_rbb = (value >> 0) & 0x1f;
    2af8:	840007cc 	andi	r16,r16,31
    2afc:	14019015 	stw	r16,1600(r2)
        return;
    }
    if (addr == 0x0118)
    {
        regs->reg_0x0118_input_ctl_pga_rbb = (value >> 13) & 0x7;
        regs->reg_0x0118_ict_lpf_in_rbb = (value >> 5) & 0x1f;
    2b00:	18c007cc 	andi	r3,r3,31
    2b04:	10c18f15 	stw	r3,1596(r2)
    2b08:	003a9706 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0118_ict_lpf_out_rbb = (value >> 0) & 0x1f;
        return;
    }
    if (addr == 0x0119)
    2b0c:	00c04644 	movi	r3,281
    2b10:	88c00b1e 	bne	r17,r3,2b40 <set_addrs_to_default+0x1a00>
    {
        regs->reg_0x0119_osw_pga_rbb = (value >> 15) & 0x1;
    2b14:	8007d3fa 	srai	r3,r16,15
    2b18:	10c19115 	stw	r3,1604(r2)
        regs->reg_0x0119_ict_pga_out_rbb = (value >> 10) & 0x1f;
    2b1c:	8007d2ba 	srai	r3,r16,10
    2b20:	18c007cc 	andi	r3,r3,31
    2b24:	10c19215 	stw	r3,1608(r2)
        regs->reg_0x0119_ict_pga_in_rbb = (value >> 5) & 0x1f;
    2b28:	8007d17a 	srai	r3,r16,5
        regs->reg_0x0119_g_pga_rbb = (value >> 0) & 0x1f;
    2b2c:	840007cc 	andi	r16,r16,31
    2b30:	14019415 	stw	r16,1616(r2)
    }
    if (addr == 0x0119)
    {
        regs->reg_0x0119_osw_pga_rbb = (value >> 15) & 0x1;
        regs->reg_0x0119_ict_pga_out_rbb = (value >> 10) & 0x1f;
        regs->reg_0x0119_ict_pga_in_rbb = (value >> 5) & 0x1f;
    2b34:	18c007cc 	andi	r3,r3,31
    2b38:	10c19315 	stw	r3,1612(r2)
    2b3c:	003a8a06 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0119_g_pga_rbb = (value >> 0) & 0x1f;
        return;
    }
    if (addr == 0x011A)
    2b40:	00c04684 	movi	r3,282
    2b44:	88c0061e 	bne	r17,r3,2b60 <set_addrs_to_default+0x1a20>
    {
        regs->reg_0x011a_rcc_ctl_pga_rbb = (value >> 9) & 0x1f;
    2b48:	8007d27a 	srai	r3,r16,9
        regs->reg_0x011a_c_ctl_pga_rbb = (value >> 0) & 0xff;
    2b4c:	84003fcc 	andi	r16,r16,255
    2b50:	14019615 	stw	r16,1624(r2)
        regs->reg_0x0119_g_pga_rbb = (value >> 0) & 0x1f;
        return;
    }
    if (addr == 0x011A)
    {
        regs->reg_0x011a_rcc_ctl_pga_rbb = (value >> 9) & 0x1f;
    2b54:	18c007cc 	andi	r3,r3,31
    2b58:	10c19515 	stw	r3,1620(r2)
    2b5c:	003a8206 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x011a_c_ctl_pga_rbb = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x011B)
    2b60:	00c046c4 	movi	r3,283
    2b64:	88c0031e 	bne	r17,r3,2b74 <set_addrs_to_default+0x1a34>
    {
        regs->reg_0x011b_resrv_rbb = (value >> 0) & 0x7f;
    2b68:	84001fcc 	andi	r16,r16,127
    2b6c:	14019715 	stw	r16,1628(r2)
    2b70:	003a7d06 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x011C)
    2b74:	00c04704 	movi	r3,284
    2b78:	88c02f1e 	bne	r17,r3,2c38 <set_addrs_to_default+0x1af8>
    {
        regs->reg_0x011c_reset_n = (value >> 15) & 0x1;
    2b7c:	8007d3fa 	srai	r3,r16,15
    2b80:	10c19815 	stw	r3,1632(r2)
        regs->reg_0x011c_spdup_vco = (value >> 14) & 0x1;
    2b84:	8007d3ba 	srai	r3,r16,14
    2b88:	18c0004c 	andi	r3,r3,1
    2b8c:	10c19915 	stw	r3,1636(r2)
        regs->reg_0x011c_bypldo_vco = (value >> 13) & 0x1;
    2b90:	8007d37a 	srai	r3,r16,13
    2b94:	18c0004c 	andi	r3,r3,1
    2b98:	10c19a15 	stw	r3,1640(r2)
        regs->reg_0x011c_en_coarsepll = (value >> 12) & 0x1;
    2b9c:	8007d33a 	srai	r3,r16,12
    2ba0:	18c0004c 	andi	r3,r3,1
    2ba4:	10c19b15 	stw	r3,1644(r2)
        regs->reg_0x011c_curlim_vco = (value >> 11) & 0x1;
    2ba8:	8007d2fa 	srai	r3,r16,11
    2bac:	18c0004c 	andi	r3,r3,1
    2bb0:	10c19c15 	stw	r3,1648(r2)
        regs->reg_0x011c_en_div2_divprog = (value >> 10) & 0x1;
    2bb4:	8007d2ba 	srai	r3,r16,10
    2bb8:	18c0004c 	andi	r3,r3,1
    2bbc:	10c19d15 	stw	r3,1652(r2)
        regs->reg_0x011c_en_intonly_sdm = (value >> 9) & 0x1;
    2bc0:	8007d27a 	srai	r3,r16,9
    2bc4:	18c0004c 	andi	r3,r3,1
    2bc8:	10c19e15 	stw	r3,1656(r2)
        regs->reg_0x011c_en_sdm_clk = (value >> 8) & 0x1;
    2bcc:	8007d23a 	srai	r3,r16,8
    2bd0:	18c0004c 	andi	r3,r3,1
    2bd4:	10c19f15 	stw	r3,1660(r2)
        regs->reg_0x011c_pd_fbdiv = (value >> 7) & 0x1;
    2bd8:	8007d1fa 	srai	r3,r16,7
    2bdc:	18c0004c 	andi	r3,r3,1
    2be0:	10c1a015 	stw	r3,1664(r2)
        regs->reg_0x011c_pd_loch_t2rbuf = (value >> 6) & 0x1;
    2be4:	8007d1ba 	srai	r3,r16,6
    2be8:	18c0004c 	andi	r3,r3,1
    2bec:	10c1a115 	stw	r3,1668(r2)
        regs->reg_0x011c_pd_cp = (value >> 5) & 0x1;
    2bf0:	8007d17a 	srai	r3,r16,5
    2bf4:	18c0004c 	andi	r3,r3,1
    2bf8:	10c1a215 	stw	r3,1672(r2)
        regs->reg_0x011c_pd_fdiv = (value >> 4) & 0x1;
    2bfc:	8007d13a 	srai	r3,r16,4
    2c00:	18c0004c 	andi	r3,r3,1
    2c04:	10c1a315 	stw	r3,1676(r2)
        regs->reg_0x011c_pd_sdm = (value >> 3) & 0x1;
    2c08:	8007d0fa 	srai	r3,r16,3
    2c0c:	18c0004c 	andi	r3,r3,1
    2c10:	10c1a415 	stw	r3,1680(r2)
        regs->reg_0x011c_pd_vco_comp = (value >> 2) & 0x1;
    2c14:	8007d0ba 	srai	r3,r16,2
    2c18:	18c0004c 	andi	r3,r3,1
    2c1c:	10c1a515 	stw	r3,1684(r2)
        regs->reg_0x011c_pd_vco = (value >> 1) & 0x1;
    2c20:	8007d07a 	srai	r3,r16,1
        regs->reg_0x011c_en_g = (value >> 0) & 0x1;
    2c24:	8400004c 	andi	r16,r16,1
    2c28:	1401a715 	stw	r16,1692(r2)
        regs->reg_0x011c_pd_loch_t2rbuf = (value >> 6) & 0x1;
        regs->reg_0x011c_pd_cp = (value >> 5) & 0x1;
        regs->reg_0x011c_pd_fdiv = (value >> 4) & 0x1;
        regs->reg_0x011c_pd_sdm = (value >> 3) & 0x1;
        regs->reg_0x011c_pd_vco_comp = (value >> 2) & 0x1;
        regs->reg_0x011c_pd_vco = (value >> 1) & 0x1;
    2c2c:	18c0004c 	andi	r3,r3,1
    2c30:	10c1a615 	stw	r3,1688(r2)
    2c34:	003a4c06 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x011c_en_g = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x011D)
    2c38:	00c04744 	movi	r3,285
    2c3c:	88c0021e 	bne	r17,r3,2c48 <set_addrs_to_default+0x1b08>
    {
        regs->reg_0x011d_frac_sdm = (value >> 0) & 0xffff;
    2c40:	1401a815 	stw	r16,1696(r2)
    2c44:	003a4806 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x011E)
    2c48:	00c04784 	movi	r3,286
    2c4c:	88c0061e 	bne	r17,r3,2c68 <set_addrs_to_default+0x1b28>
    {
        regs->reg_0x011e_int_sdm = (value >> 4) & 0x3ff;
    2c50:	8007d13a 	srai	r3,r16,4
        regs->reg_0x011e_frac_sdm = (value >> 0) & 0xf;
    2c54:	840003cc 	andi	r16,r16,15
    2c58:	1401aa15 	stw	r16,1704(r2)
        regs->reg_0x011d_frac_sdm = (value >> 0) & 0xffff;
        return;
    }
    if (addr == 0x011E)
    {
        regs->reg_0x011e_int_sdm = (value >> 4) & 0x3ff;
    2c5c:	18c0ffcc 	andi	r3,r3,1023
    2c60:	10c1a915 	stw	r3,1700(r2)
    2c64:	003a4006 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x011e_frac_sdm = (value >> 0) & 0xf;
        return;
    }
    if (addr == 0x011F)
    2c68:	00c047c4 	movi	r3,287
    2c6c:	88c0151e 	bne	r17,r3,2cc4 <set_addrs_to_default+0x1b84>
    {
        regs->reg_0x011f_pw_div2_loch = (value >> 12) & 0x7;
    2c70:	8007d33a 	srai	r3,r16,12
    2c74:	18c001cc 	andi	r3,r3,7
    2c78:	10c1ab15 	stw	r3,1708(r2)
        regs->reg_0x011f_pw_div4_loch = (value >> 9) & 0x7;
    2c7c:	8007d27a 	srai	r3,r16,9
    2c80:	18c001cc 	andi	r3,r3,7
    2c84:	10c1ac15 	stw	r3,1712(r2)
        regs->reg_0x011f_div_loch = (value >> 6) & 0x7;
    2c88:	8007d1ba 	srai	r3,r16,6
    2c8c:	18c001cc 	andi	r3,r3,7
    2c90:	10c1ad15 	stw	r3,1716(r2)
        regs->reg_0x011f_tst_sx = (value >> 3) & 0x7;
    2c94:	8007d0fa 	srai	r3,r16,3
    2c98:	18c001cc 	andi	r3,r3,7
    2c9c:	10c1ae15 	stw	r3,1720(r2)
        regs->reg_0x011f_sel_sdmclk = (value >> 2) & 0x1;
    2ca0:	8007d0ba 	srai	r3,r16,2
    2ca4:	18c0004c 	andi	r3,r3,1
    2ca8:	10c1af15 	stw	r3,1724(r2)
        regs->reg_0x011f_sx_dither_en = (value >> 1) & 0x1;
    2cac:	8007d07a 	srai	r3,r16,1
        regs->reg_0x011f_rev_sdmclk = (value >> 0) & 0x1;
    2cb0:	8400004c 	andi	r16,r16,1
    2cb4:	1401b115 	stw	r16,1732(r2)
        regs->reg_0x011f_pw_div2_loch = (value >> 12) & 0x7;
        regs->reg_0x011f_pw_div4_loch = (value >> 9) & 0x7;
        regs->reg_0x011f_div_loch = (value >> 6) & 0x7;
        regs->reg_0x011f_tst_sx = (value >> 3) & 0x7;
        regs->reg_0x011f_sel_sdmclk = (value >> 2) & 0x1;
        regs->reg_0x011f_sx_dither_en = (value >> 1) & 0x1;
    2cb8:	18c0004c 	andi	r3,r3,1
    2cbc:	10c1b015 	stw	r3,1728(r2)
    2cc0:	003a2906 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x011f_rev_sdmclk = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0120)
    2cc4:	00c04804 	movi	r3,288
    2cc8:	88c0051e 	bne	r17,r3,2ce0 <set_addrs_to_default+0x1ba0>
    {
        regs->reg_0x0120_vdiv_vco = (value >> 8) & 0xff;
    2ccc:	8007d23a 	srai	r3,r16,8
        regs->reg_0x0120_ict_vco = (value >> 0) & 0xff;
    2cd0:	84003fcc 	andi	r16,r16,255
    2cd4:	1401b315 	stw	r16,1740(r2)
        regs->reg_0x011f_rev_sdmclk = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0120)
    {
        regs->reg_0x0120_vdiv_vco = (value >> 8) & 0xff;
    2cd8:	10c1b215 	stw	r3,1736(r2)
    2cdc:	003a2206 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0120_ict_vco = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x0121)
    2ce0:	00c04844 	movi	r3,289
    2ce4:	88c00b1e 	bne	r17,r3,2d14 <set_addrs_to_default+0x1bd4>
    {
        regs->reg_0x0121_rsel_ldo_vco = (value >> 11) & 0x1f;
    2ce8:	8007d2fa 	srai	r3,r16,11
    2cec:	10c1b415 	stw	r3,1744(r2)
        regs->reg_0x0121_csw_vco = (value >> 3) & 0xff;
    2cf0:	8007d0fa 	srai	r3,r16,3
    2cf4:	18c03fcc 	andi	r3,r3,255
    2cf8:	10c1b515 	stw	r3,1748(r2)
        regs->reg_0x0121_sel_vco = (value >> 1) & 0x3;
    2cfc:	8007d07a 	srai	r3,r16,1
        regs->reg_0x0121_coarse_start = (value >> 0) & 0x1;
    2d00:	8400004c 	andi	r16,r16,1
    2d04:	1401b715 	stw	r16,1756(r2)
    }
    if (addr == 0x0121)
    {
        regs->reg_0x0121_rsel_ldo_vco = (value >> 11) & 0x1f;
        regs->reg_0x0121_csw_vco = (value >> 3) & 0xff;
        regs->reg_0x0121_sel_vco = (value >> 1) & 0x3;
    2d08:	18c000cc 	andi	r3,r3,3
    2d0c:	10c1b615 	stw	r3,1752(r2)
    2d10:	003a1506 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0121_coarse_start = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0122)
    2d14:	00c04884 	movi	r3,290
    2d18:	88c0091e 	bne	r17,r3,2d40 <set_addrs_to_default+0x1c00>
    {
        regs->reg_0x0122_revph_pfd = (value >> 12) & 0x1;
    2d1c:	8007d33a 	srai	r3,r16,12
    2d20:	18c0004c 	andi	r3,r3,1
    2d24:	10c1b815 	stw	r3,1760(r2)
        regs->reg_0x0122_ioffset_cp = (value >> 6) & 0x3f;
    2d28:	8007d1ba 	srai	r3,r16,6
        regs->reg_0x0122_ipulse_cp = (value >> 0) & 0x3f;
    2d2c:	84000fcc 	andi	r16,r16,63
    2d30:	1401ba15 	stw	r16,1768(r2)
        return;
    }
    if (addr == 0x0122)
    {
        regs->reg_0x0122_revph_pfd = (value >> 12) & 0x1;
        regs->reg_0x0122_ioffset_cp = (value >> 6) & 0x3f;
    2d34:	18c00fcc 	andi	r3,r3,63
    2d38:	10c1b915 	stw	r3,1764(r2)
    2d3c:	003a0a06 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0122_ipulse_cp = (value >> 0) & 0x3f;
        return;
    }
    if (addr == 0x0123)
    2d40:	00c048c4 	movi	r3,291
    2d44:	88c0141e 	bne	r17,r3,2d98 <set_addrs_to_default+0x1c58>
    {
        regs->reg_0x0123_coarse_stepdone = (value >> 15) & 0x1;
    2d48:	8007d3fa 	srai	r3,r16,15
    2d4c:	10c1bb15 	stw	r3,1772(r2)
        regs->reg_0x0123_coarsepll_compo = (value >> 14) & 0x1;
    2d50:	8007d3ba 	srai	r3,r16,14
    2d54:	18c0004c 	andi	r3,r3,1
    2d58:	10c1bc15 	stw	r3,1776(r2)
        regs->reg_0x0123_vco_cmpho = (value >> 13) & 0x1;
    2d5c:	8007d37a 	srai	r3,r16,13
    2d60:	18c0004c 	andi	r3,r3,1
    2d64:	10c1bd15 	stw	r3,1780(r2)
        regs->reg_0x0123_vco_cmplo = (value >> 12) & 0x1;
    2d68:	8007d33a 	srai	r3,r16,12
    2d6c:	18c0004c 	andi	r3,r3,1
    2d70:	10c1be15 	stw	r3,1784(r2)
        regs->reg_0x0123_cp2_pll = (value >> 8) & 0xf;
    2d74:	8007d23a 	srai	r3,r16,8
    2d78:	18c003cc 	andi	r3,r3,15
    2d7c:	10c1bf15 	stw	r3,1788(r2)
        regs->reg_0x0123_cp3_pll = (value >> 4) & 0xf;
    2d80:	8007d13a 	srai	r3,r16,4
        regs->reg_0x0123_cz = (value >> 0) & 0xf;
    2d84:	840003cc 	andi	r16,r16,15
    2d88:	1401c115 	stw	r16,1796(r2)
        regs->reg_0x0123_coarse_stepdone = (value >> 15) & 0x1;
        regs->reg_0x0123_coarsepll_compo = (value >> 14) & 0x1;
        regs->reg_0x0123_vco_cmpho = (value >> 13) & 0x1;
        regs->reg_0x0123_vco_cmplo = (value >> 12) & 0x1;
        regs->reg_0x0123_cp2_pll = (value >> 8) & 0xf;
        regs->reg_0x0123_cp3_pll = (value >> 4) & 0xf;
    2d8c:	18c003cc 	andi	r3,r3,15
    2d90:	10c1c015 	stw	r3,1792(r2)
    2d94:	0039f406 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0123_cz = (value >> 0) & 0xf;
        return;
    }
    if (addr == 0x0124)
    2d98:	00c04904 	movi	r3,292
    2d9c:	88c00f1e 	bne	r17,r3,2ddc <set_addrs_to_default+0x1c9c>
    {
        regs->reg_0x0124_en_dir_sxx = (value >> 4) & 0x1;
    2da0:	8007d13a 	srai	r3,r16,4
    2da4:	18c0004c 	andi	r3,r3,1
    2da8:	10c1c215 	stw	r3,1800(r2)
        regs->reg_0x0124_en_dir_rbb = (value >> 3) & 0x1;
    2dac:	8007d0fa 	srai	r3,r16,3
    2db0:	18c0004c 	andi	r3,r3,1
    2db4:	10c1c315 	stw	r3,1804(r2)
        regs->reg_0x0124_en_dir_rfe = (value >> 2) & 0x1;
    2db8:	8007d0ba 	srai	r3,r16,2
    2dbc:	18c0004c 	andi	r3,r3,1
    2dc0:	10c1c415 	stw	r3,1808(r2)
        regs->reg_0x0124_en_dir_tbb = (value >> 1) & 0x1;
    2dc4:	8007d07a 	srai	r3,r16,1
        regs->reg_0x0124_en_dir_trf = (value >> 0) & 0x1;
    2dc8:	8400004c 	andi	r16,r16,1
    2dcc:	1401c615 	stw	r16,1816(r2)
    if (addr == 0x0124)
    {
        regs->reg_0x0124_en_dir_sxx = (value >> 4) & 0x1;
        regs->reg_0x0124_en_dir_rbb = (value >> 3) & 0x1;
        regs->reg_0x0124_en_dir_rfe = (value >> 2) & 0x1;
        regs->reg_0x0124_en_dir_tbb = (value >> 1) & 0x1;
    2dd0:	18c0004c 	andi	r3,r3,1
    2dd4:	10c1c515 	stw	r3,1812(r2)
    2dd8:	0039e306 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0124_en_dir_trf = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0125)
    2ddc:	00c04944 	movi	r3,293
    2de0:	88c0021e 	bne	r17,r3,2dec <set_addrs_to_default+0x1cac>
    {
        regs->reg_0x0125_value = (value >> 0) & 0xffff;
    2de4:	1401c715 	stw	r16,1820(r2)
    2de8:	0039df06 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x0126)
    2dec:	00c04984 	movi	r3,294
    2df0:	88c0021e 	bne	r17,r3,2dfc <set_addrs_to_default+0x1cbc>
    {
        regs->reg_0x0126_value = (value >> 0) & 0xffff;
    2df4:	1401c815 	stw	r16,1824(r2)
    2df8:	0039db06 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x0200)
    2dfc:	00c08004 	movi	r3,512
    2e00:	88c01b1e 	bne	r17,r3,2e70 <set_addrs_to_default+0x1d30>
    {
        regs->reg_0x0200_tsgfc = (value >> 9) & 0x1;
    2e04:	8007d27a 	srai	r3,r16,9
    2e08:	18c0004c 	andi	r3,r3,1
    2e0c:	10c1c915 	stw	r3,1828(r2)
        regs->reg_0x0200_tsgfcw = (value >> 7) & 0x3;
    2e10:	8007d1fa 	srai	r3,r16,7
    2e14:	18c000cc 	andi	r3,r3,3
    2e18:	10c1ca15 	stw	r3,1832(r2)
        regs->reg_0x0200_tsgdcldq = (value >> 6) & 0x1;
    2e1c:	8007d1ba 	srai	r3,r16,6
    2e20:	18c0004c 	andi	r3,r3,1
    2e24:	10c1cb15 	stw	r3,1836(r2)
        regs->reg_0x0200_tsgdcldi = (value >> 5) & 0x1;
    2e28:	8007d17a 	srai	r3,r16,5
    2e2c:	18c0004c 	andi	r3,r3,1
    2e30:	10c1cc15 	stw	r3,1840(r2)
        regs->reg_0x0200_tsgswapiq = (value >> 4) & 0x1;
    2e34:	8007d13a 	srai	r3,r16,4
    2e38:	18c0004c 	andi	r3,r3,1
    2e3c:	10c1cd15 	stw	r3,1844(r2)
        regs->reg_0x0200_tsgmode = (value >> 3) & 0x1;
    2e40:	8007d0fa 	srai	r3,r16,3
    2e44:	18c0004c 	andi	r3,r3,1
    2e48:	10c1ce15 	stw	r3,1848(r2)
        regs->reg_0x0200_insel = (value >> 2) & 0x1;
    2e4c:	8007d0ba 	srai	r3,r16,2
    2e50:	18c0004c 	andi	r3,r3,1
    2e54:	10c1cf15 	stw	r3,1852(r2)
        regs->reg_0x0200_bstart = (value >> 1) & 0x1;
    2e58:	8007d07a 	srai	r3,r16,1
        regs->reg_0x0200_en = (value >> 0) & 0x1;
    2e5c:	8400004c 	andi	r16,r16,1
    2e60:	1401d115 	stw	r16,1860(r2)
        regs->reg_0x0200_tsgdcldq = (value >> 6) & 0x1;
        regs->reg_0x0200_tsgdcldi = (value >> 5) & 0x1;
        regs->reg_0x0200_tsgswapiq = (value >> 4) & 0x1;
        regs->reg_0x0200_tsgmode = (value >> 3) & 0x1;
        regs->reg_0x0200_insel = (value >> 2) & 0x1;
        regs->reg_0x0200_bstart = (value >> 1) & 0x1;
    2e64:	18c0004c 	andi	r3,r3,1
    2e68:	10c1d015 	stw	r3,1856(r2)
    2e6c:	0039be06 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0200_en = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0201)
    2e70:	00c08044 	movi	r3,513
    2e74:	88c0031e 	bne	r17,r3,2e84 <set_addrs_to_default+0x1d44>
    {
        regs->reg_0x0201_gcorrq = (value >> 0) & 0x7ff;
    2e78:	8401ffcc 	andi	r16,r16,2047
    2e7c:	1401d215 	stw	r16,1864(r2)
    2e80:	0039b906 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x0202)
    2e84:	00c08084 	movi	r3,514
    2e88:	88c0031e 	bne	r17,r3,2e98 <set_addrs_to_default+0x1d58>
    {
        regs->reg_0x0202_gcorri = (value >> 0) & 0x7ff;
    2e8c:	8401ffcc 	andi	r16,r16,2047
    2e90:	1401d315 	stw	r16,1868(r2)
    2e94:	0039b406 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x0203)
    2e98:	00c080c4 	movi	r3,515
    2e9c:	88c0061e 	bne	r17,r3,2eb8 <set_addrs_to_default+0x1d78>
    {
        regs->reg_0x0203_hbi_ovr = (value >> 12) & 0x7;
    2ea0:	8007d33a 	srai	r3,r16,12
        regs->reg_0x0203_iqcorr = (value >> 0) & 0xfff;
    2ea4:	8403ffcc 	andi	r16,r16,4095
    2ea8:	1401d515 	stw	r16,1876(r2)
        regs->reg_0x0202_gcorri = (value >> 0) & 0x7ff;
        return;
    }
    if (addr == 0x0203)
    {
        regs->reg_0x0203_hbi_ovr = (value >> 12) & 0x7;
    2eac:	18c001cc 	andi	r3,r3,7
    2eb0:	10c1d415 	stw	r3,1872(r2)
    2eb4:	0039ac06 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0203_iqcorr = (value >> 0) & 0xfff;
        return;
    }
    if (addr == 0x0204)
    2eb8:	00c08104 	movi	r3,516
    2ebc:	88c0051e 	bne	r17,r3,2ed4 <set_addrs_to_default+0x1d94>
    {
        regs->reg_0x0204_dccorri = (value >> 8) & 0xff;
    2ec0:	8007d23a 	srai	r3,r16,8
        regs->reg_0x0204_dccorrq = (value >> 0) & 0xff;
    2ec4:	84003fcc 	andi	r16,r16,255
    2ec8:	1401d715 	stw	r16,1884(r2)
        regs->reg_0x0203_iqcorr = (value >> 0) & 0xfff;
        return;
    }
    if (addr == 0x0204)
    {
        regs->reg_0x0204_dccorri = (value >> 8) & 0xff;
    2ecc:	10c1d615 	stw	r3,1880(r2)
    2ed0:	0039a506 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0204_dccorrq = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x0205)
    2ed4:	00c08144 	movi	r3,517
    2ed8:	88c0061e 	bne	r17,r3,2ef4 <set_addrs_to_default+0x1db4>
    {
        regs->reg_0x0205_gfir1_l = (value >> 8) & 0x7;
    2edc:	8007d23a 	srai	r3,r16,8
        regs->reg_0x0205_gfir1_n = (value >> 0) & 0xff;
    2ee0:	84003fcc 	andi	r16,r16,255
    2ee4:	1401d915 	stw	r16,1892(r2)
        regs->reg_0x0204_dccorrq = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x0205)
    {
        regs->reg_0x0205_gfir1_l = (value >> 8) & 0x7;
    2ee8:	18c001cc 	andi	r3,r3,7
    2eec:	10c1d815 	stw	r3,1888(r2)
    2ef0:	00399d06 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0205_gfir1_n = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x0206)
    2ef4:	00c08184 	movi	r3,518
    2ef8:	88c0061e 	bne	r17,r3,2f14 <set_addrs_to_default+0x1dd4>
    {
        regs->reg_0x0206_gfir2_l = (value >> 8) & 0x7;
    2efc:	8007d23a 	srai	r3,r16,8
        regs->reg_0x0206_gfir2_n = (value >> 0) & 0xff;
    2f00:	84003fcc 	andi	r16,r16,255
    2f04:	1401db15 	stw	r16,1900(r2)
        regs->reg_0x0205_gfir1_n = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x0206)
    {
        regs->reg_0x0206_gfir2_l = (value >> 8) & 0x7;
    2f08:	18c001cc 	andi	r3,r3,7
    2f0c:	10c1da15 	stw	r3,1896(r2)
    2f10:	00399506 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0206_gfir2_n = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x0207)
    2f14:	00c081c4 	movi	r3,519
    2f18:	88c0061e 	bne	r17,r3,2f34 <set_addrs_to_default+0x1df4>
    {
        regs->reg_0x0207_gfir3_l = (value >> 8) & 0x7;
    2f1c:	8007d23a 	srai	r3,r16,8
        regs->reg_0x0207_gfir3_n = (value >> 0) & 0xff;
    2f20:	84003fcc 	andi	r16,r16,255
    2f24:	1401dd15 	stw	r16,1908(r2)
        regs->reg_0x0206_gfir2_n = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x0207)
    {
        regs->reg_0x0207_gfir3_l = (value >> 8) & 0x7;
    2f28:	18c001cc 	andi	r3,r3,7
    2f2c:	10c1dc15 	stw	r3,1904(r2)
    2f30:	00398d06 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0207_gfir3_n = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x0208)
    2f34:	00c08204 	movi	r3,520
    2f38:	88c01d1e 	bne	r17,r3,2fb0 <set_addrs_to_default+0x1e70>
    {
        regs->reg_0x0208_cmix_gain = (value >> 14) & 0x3;
    2f3c:	8007d3ba 	srai	r3,r16,14
    2f40:	10c1de15 	stw	r3,1912(r2)
        regs->reg_0x0208_cmix_sc = (value >> 13) & 0x1;
    2f44:	8007d37a 	srai	r3,r16,13
    2f48:	18c0004c 	andi	r3,r3,1
    2f4c:	10c1df15 	stw	r3,1916(r2)
        regs->reg_0x0208_cmix_byp = (value >> 8) & 0x1;
    2f50:	8007d23a 	srai	r3,r16,8
    2f54:	18c0004c 	andi	r3,r3,1
    2f58:	10c1e015 	stw	r3,1920(r2)
        regs->reg_0x0208_isinc_byp = (value >> 7) & 0x1;
    2f5c:	8007d1fa 	srai	r3,r16,7
    2f60:	18c0004c 	andi	r3,r3,1
    2f64:	10c1e115 	stw	r3,1924(r2)
        regs->reg_0x0208_gfir3_byp = (value >> 6) & 0x1;
    2f68:	8007d1ba 	srai	r3,r16,6
    2f6c:	18c0004c 	andi	r3,r3,1
    2f70:	10c1e215 	stw	r3,1928(r2)
        regs->reg_0x0208_gfir2_byp = (value >> 5) & 0x1;
    2f74:	8007d17a 	srai	r3,r16,5
    2f78:	18c0004c 	andi	r3,r3,1
    2f7c:	10c1e315 	stw	r3,1932(r2)
        regs->reg_0x0208_gfir1_byp = (value >> 4) & 0x1;
    2f80:	8007d13a 	srai	r3,r16,4
    2f84:	18c0004c 	andi	r3,r3,1
    2f88:	10c1e415 	stw	r3,1936(r2)
        regs->reg_0x0208_dc_byp = (value >> 3) & 0x1;
    2f8c:	8007d0fa 	srai	r3,r16,3
    2f90:	18c0004c 	andi	r3,r3,1
    2f94:	10c1e515 	stw	r3,1940(r2)
        regs->reg_0x0208_gc_byp = (value >> 1) & 0x1;
    2f98:	8007d07a 	srai	r3,r16,1
        regs->reg_0x0208_ph_byp = (value >> 0) & 0x1;
    2f9c:	8400004c 	andi	r16,r16,1
    2fa0:	1401e715 	stw	r16,1948(r2)
        regs->reg_0x0208_isinc_byp = (value >> 7) & 0x1;
        regs->reg_0x0208_gfir3_byp = (value >> 6) & 0x1;
        regs->reg_0x0208_gfir2_byp = (value >> 5) & 0x1;
        regs->reg_0x0208_gfir1_byp = (value >> 4) & 0x1;
        regs->reg_0x0208_dc_byp = (value >> 3) & 0x1;
        regs->reg_0x0208_gc_byp = (value >> 1) & 0x1;
    2fa4:	18c0004c 	andi	r3,r3,1
    2fa8:	10c1e615 	stw	r3,1944(r2)
    2fac:	00396e06 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0208_ph_byp = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0209)
    2fb0:	00c08244 	movi	r3,521
    2fb4:	88c0021e 	bne	r17,r3,2fc0 <set_addrs_to_default+0x1e80>
    {
        regs->reg_0x0209_value = (value >> 0) & 0xffff;
    2fb8:	1401e815 	stw	r16,1952(r2)
    2fbc:	00396a06 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x020a)
    2fc0:	00c08284 	movi	r3,522
    2fc4:	88c0021e 	bne	r17,r3,2fd0 <set_addrs_to_default+0x1e90>
    {
        regs->reg_0x020a_value = (value >> 0) & 0xffff;
    2fc8:	1401e915 	stw	r16,1956(r2)
    2fcc:	00396606 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x020C)
    2fd0:	00c08304 	movi	r3,524
    2fd4:	88c0021e 	bne	r17,r3,2fe0 <set_addrs_to_default+0x1ea0>
    {
        regs->reg_0x020c_dc_reg = (value >> 0) & 0xffff;
    2fd8:	1401ea15 	stw	r16,1960(r2)
    2fdc:	00396206 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x0240)
    2fe0:	00c09004 	movi	r3,576
    2fe4:	88c0091e 	bne	r17,r3,300c <set_addrs_to_default+0x1ecc>
    {
        regs->reg_0x0240_dthbit = (value >> 5) & 0xf;
    2fe8:	8007d17a 	srai	r3,r16,5
    2fec:	18c003cc 	andi	r3,r3,15
    2ff0:	10c1eb15 	stw	r3,1964(r2)
        regs->reg_0x0240_sel = (value >> 1) & 0xf;
    2ff4:	8007d07a 	srai	r3,r16,1
        regs->reg_0x0240_mode = (value >> 0) & 0x1;
    2ff8:	8400004c 	andi	r16,r16,1
    2ffc:	1401ed15 	stw	r16,1972(r2)
        return;
    }
    if (addr == 0x0240)
    {
        regs->reg_0x0240_dthbit = (value >> 5) & 0xf;
        regs->reg_0x0240_sel = (value >> 1) & 0xf;
    3000:	18c003cc 	andi	r3,r3,15
    3004:	10c1ec15 	stw	r3,1968(r2)
    3008:	00395706 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0240_mode = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0241)
    300c:	00c09044 	movi	r3,577
    3010:	88c0021e 	bne	r17,r3,301c <set_addrs_to_default+0x1edc>
    {
        regs->reg_0x0241_pho = (value >> 0) & 0xffff;
    3014:	1401ee15 	stw	r16,1976(r2)
    3018:	00395306 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x0242)
    301c:	00c09084 	movi	r3,578
    3020:	88c0021e 	bne	r17,r3,302c <set_addrs_to_default+0x1eec>
    {
        regs->reg_0x0242_fcw0_hi = (value >> 0) & 0xffff;
    3024:	1401ef15 	stw	r16,1980(r2)
    3028:	00394f06 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x0243)
    302c:	00c090c4 	movi	r3,579
    3030:	88c0021e 	bne	r17,r3,303c <set_addrs_to_default+0x1efc>
    {
        regs->reg_0x0243_fcw0_lo = (value >> 0) & 0xffff;
    3034:	1401f015 	stw	r16,1984(r2)
    3038:	00394b06 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x0400)
    303c:	00c10004 	movi	r3,1024
    3040:	88c0201e 	bne	r17,r3,30c4 <set_addrs_to_default+0x1f84>
    {
        regs->reg_0x0400_capture = (value >> 15) & 0x1;
    3044:	8007d3fa 	srai	r3,r16,15
    3048:	10c1f115 	stw	r3,1988(r2)
        regs->reg_0x0400_capsel = (value >> 13) & 0x3;
    304c:	8007d37a 	srai	r3,r16,13
    3050:	18c000cc 	andi	r3,r3,3
    3054:	10c1f215 	stw	r3,1992(r2)
        regs->reg_0x0400_tsgfc = (value >> 9) & 0x1;
    3058:	8007d27a 	srai	r3,r16,9
    305c:	18c0004c 	andi	r3,r3,1
    3060:	10c1f315 	stw	r3,1996(r2)
        regs->reg_0x0400_tsgfcw = (value >> 7) & 0x3;
    3064:	8007d1fa 	srai	r3,r16,7
    3068:	18c000cc 	andi	r3,r3,3
    306c:	10c1f415 	stw	r3,2000(r2)
        regs->reg_0x0400_tsgdcldq = (value >> 6) & 0x1;
    3070:	8007d1ba 	srai	r3,r16,6
    3074:	18c0004c 	andi	r3,r3,1
    3078:	10c1f515 	stw	r3,2004(r2)
        regs->reg_0x0400_tsgdcldi = (value >> 5) & 0x1;
    307c:	8007d17a 	srai	r3,r16,5
    3080:	18c0004c 	andi	r3,r3,1
    3084:	10c1f615 	stw	r3,2008(r2)
        regs->reg_0x0400_tsgswapiq = (value >> 4) & 0x1;
    3088:	8007d13a 	srai	r3,r16,4
    308c:	18c0004c 	andi	r3,r3,1
    3090:	10c1f715 	stw	r3,2012(r2)
        regs->reg_0x0400_tsgmode = (value >> 3) & 0x1;
    3094:	8007d0fa 	srai	r3,r16,3
    3098:	18c0004c 	andi	r3,r3,1
    309c:	10c1f815 	stw	r3,2016(r2)
        regs->reg_0x0400_insel = (value >> 2) & 0x1;
    30a0:	8007d0ba 	srai	r3,r16,2
    30a4:	18c0004c 	andi	r3,r3,1
    30a8:	10c1f915 	stw	r3,2020(r2)
        regs->reg_0x0400_bstart = (value >> 1) & 0x1;
    30ac:	8007d07a 	srai	r3,r16,1
        regs->reg_0x0400_en = (value >> 0) & 0x1;
    30b0:	8400004c 	andi	r16,r16,1
    30b4:	1401fb15 	stw	r16,2028(r2)
        regs->reg_0x0400_tsgdcldq = (value >> 6) & 0x1;
        regs->reg_0x0400_tsgdcldi = (value >> 5) & 0x1;
        regs->reg_0x0400_tsgswapiq = (value >> 4) & 0x1;
        regs->reg_0x0400_tsgmode = (value >> 3) & 0x1;
        regs->reg_0x0400_insel = (value >> 2) & 0x1;
        regs->reg_0x0400_bstart = (value >> 1) & 0x1;
    30b8:	18c0004c 	andi	r3,r3,1
    30bc:	10c1fa15 	stw	r3,2024(r2)
    30c0:	00392906 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0400_en = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0401)
    30c4:	00c10044 	movi	r3,1025
    30c8:	88c0031e 	bne	r17,r3,30d8 <set_addrs_to_default+0x1f98>
    {
        regs->reg_0x0401_gcorrq = (value >> 0) & 0x7ff;
    30cc:	8401ffcc 	andi	r16,r16,2047
    30d0:	1401fc15 	stw	r16,2032(r2)
    30d4:	00392406 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x0402)
    30d8:	00c10084 	movi	r3,1026
    30dc:	88c0031e 	bne	r17,r3,30ec <set_addrs_to_default+0x1fac>
    {
        regs->reg_0x0402_gcorri = (value >> 0) & 0x7ff;
    30e0:	8401ffcc 	andi	r16,r16,2047
    30e4:	1401fd15 	stw	r16,2036(r2)
    30e8:	00391f06 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x0403)
    30ec:	00c100c4 	movi	r3,1027
    30f0:	88c0061e 	bne	r17,r3,310c <set_addrs_to_default+0x1fcc>
    {
        regs->reg_0x0403_hbd_ovr = (value >> 12) & 0x7;
    30f4:	8007d33a 	srai	r3,r16,12
        regs->reg_0x0403_iqcorr = (value >> 0) & 0xfff;
    30f8:	8403ffcc 	andi	r16,r16,4095
    30fc:	1401ff15 	stw	r16,2044(r2)
        regs->reg_0x0402_gcorri = (value >> 0) & 0x7ff;
        return;
    }
    if (addr == 0x0403)
    {
        regs->reg_0x0403_hbd_ovr = (value >> 12) & 0x7;
    3100:	18c001cc 	andi	r3,r3,7
    3104:	10c1fe15 	stw	r3,2040(r2)
    3108:	00391706 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0403_iqcorr = (value >> 0) & 0xfff;
        return;
    }
    if (addr == 0x0404)
    310c:	00c10104 	movi	r3,1028
    3110:	88c0031e 	bne	r17,r3,3120 <set_addrs_to_default+0x1fe0>
    {
        regs->reg_0x0404_dccorr_avg = (value >> 0) & 0x7;
    3114:	840001cc 	andi	r16,r16,7
    3118:	14020015 	stw	r16,2048(r2)
    311c:	00391206 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x0405)
    3120:	00c10144 	movi	r3,1029
    3124:	88c0061e 	bne	r17,r3,3140 <set_addrs_to_default+0x2000>
    {
        regs->reg_0x0405_gfir1_l = (value >> 8) & 0x7;
    3128:	8007d23a 	srai	r3,r16,8
        regs->reg_0x0405_gfir1_n = (value >> 0) & 0xff;
    312c:	84003fcc 	andi	r16,r16,255
    3130:	14020215 	stw	r16,2056(r2)
        regs->reg_0x0404_dccorr_avg = (value >> 0) & 0x7;
        return;
    }
    if (addr == 0x0405)
    {
        regs->reg_0x0405_gfir1_l = (value >> 8) & 0x7;
    3134:	18c001cc 	andi	r3,r3,7
    3138:	10c20115 	stw	r3,2052(r2)
    313c:	00390a06 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0405_gfir1_n = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x0406)
    3140:	00c10184 	movi	r3,1030
    3144:	88c0061e 	bne	r17,r3,3160 <set_addrs_to_default+0x2020>
    {
        regs->reg_0x0406_gfir2_l = (value >> 8) & 0x7;
    3148:	8007d23a 	srai	r3,r16,8
        regs->reg_0x0406_gfir2_n = (value >> 0) & 0xff;
    314c:	84003fcc 	andi	r16,r16,255
    3150:	14020415 	stw	r16,2064(r2)
        regs->reg_0x0405_gfir1_n = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x0406)
    {
        regs->reg_0x0406_gfir2_l = (value >> 8) & 0x7;
    3154:	18c001cc 	andi	r3,r3,7
    3158:	10c20315 	stw	r3,2060(r2)
    315c:	00390206 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0406_gfir2_n = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x0407)
    3160:	00c101c4 	movi	r3,1031
    3164:	88c0061e 	bne	r17,r3,3180 <set_addrs_to_default+0x2040>
    {
        regs->reg_0x0407_gfir3_l = (value >> 8) & 0x7;
    3168:	8007d23a 	srai	r3,r16,8
        regs->reg_0x0407_gfir3_n = (value >> 0) & 0xff;
    316c:	84003fcc 	andi	r16,r16,255
    3170:	14020615 	stw	r16,2072(r2)
        regs->reg_0x0406_gfir2_n = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x0407)
    {
        regs->reg_0x0407_gfir3_l = (value >> 8) & 0x7;
    3174:	18c001cc 	andi	r3,r3,7
    3178:	10c20515 	stw	r3,2068(r2)
    317c:	0038fa06 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0407_gfir3_n = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x0408)
    3180:	00c10204 	movi	r3,1032
    3184:	88c0021e 	bne	r17,r3,3190 <set_addrs_to_default+0x2050>
    {
        regs->reg_0x0408_agc_k_lsb = (value >> 0) & 0xffff;
    3188:	14020715 	stw	r16,2076(r2)
    318c:	0038f606 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x0409)
    3190:	00c10244 	movi	r3,1033
    3194:	88c0051e 	bne	r17,r3,31ac <set_addrs_to_default+0x206c>
    {
        regs->reg_0x0409_agc_adesired = (value >> 4) & 0xfff;
    3198:	8007d13a 	srai	r3,r16,4
        regs->reg_0x0409_agc_k_msb = (value >> 0) & 0x3;
    319c:	840000cc 	andi	r16,r16,3
    31a0:	14020915 	stw	r16,2084(r2)
        regs->reg_0x0408_agc_k_lsb = (value >> 0) & 0xffff;
        return;
    }
    if (addr == 0x0409)
    {
        regs->reg_0x0409_agc_adesired = (value >> 4) & 0xfff;
    31a4:	10c20815 	stw	r3,2080(r2)
    31a8:	0038ef06 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0409_agc_k_msb = (value >> 0) & 0x3;
        return;
    }
    if (addr == 0x040A)
    31ac:	00c10284 	movi	r3,1034
    31b0:	88c0061e 	bne	r17,r3,31cc <set_addrs_to_default+0x208c>
    {
        regs->reg_0x040a_agc_mode = (value >> 12) & 0x3;
    31b4:	8007d33a 	srai	r3,r16,12
        regs->reg_0x040a_agc_avg = (value >> 0) & 0x7;
    31b8:	840001cc 	andi	r16,r16,7
    31bc:	14020b15 	stw	r16,2092(r2)
        regs->reg_0x0409_agc_k_msb = (value >> 0) & 0x3;
        return;
    }
    if (addr == 0x040A)
    {
        regs->reg_0x040a_agc_mode = (value >> 12) & 0x3;
    31c0:	18c000cc 	andi	r3,r3,3
    31c4:	10c20a15 	stw	r3,2088(r2)
    31c8:	0038e706 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x040a_agc_avg = (value >> 0) & 0x7;
        return;
    }
    if (addr == 0x040B)
    31cc:	00c102c4 	movi	r3,1035
    31d0:	88c0021e 	bne	r17,r3,31dc <set_addrs_to_default+0x209c>
    {
        regs->reg_0x040b_dc_reg = (value >> 0) & 0xffff;
    31d4:	14020c15 	stw	r16,2096(r2)
    31d8:	0038e306 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x040C)
    31dc:	00c10304 	movi	r3,1036
    31e0:	88c01d1e 	bne	r17,r3,3258 <set_addrs_to_default+0x2118>
    {
        regs->reg_0x040c_cmix_gain = (value >> 14) & 0x3;
    31e4:	8007d3ba 	srai	r3,r16,14
    31e8:	10c20d15 	stw	r3,2100(r2)
        regs->reg_0x040c_cmix_sc = (value >> 13) & 0x1;
    31ec:	8007d37a 	srai	r3,r16,13
    31f0:	18c0004c 	andi	r3,r3,1
    31f4:	10c20e15 	stw	r3,2104(r2)
        regs->reg_0x040c_cmix_byp = (value >> 7) & 0x1;
    31f8:	8007d1fa 	srai	r3,r16,7
    31fc:	18c0004c 	andi	r3,r3,1
    3200:	10c20f15 	stw	r3,2108(r2)
        regs->reg_0x040c_agc_byp = (value >> 6) & 0x1;
    3204:	8007d1ba 	srai	r3,r16,6
    3208:	18c0004c 	andi	r3,r3,1
    320c:	10c21015 	stw	r3,2112(r2)
        regs->reg_0x040c_gfir3_byp = (value >> 5) & 0x1;
    3210:	8007d17a 	srai	r3,r16,5
    3214:	18c0004c 	andi	r3,r3,1
    3218:	10c21115 	stw	r3,2116(r2)
        regs->reg_0x040c_gfir2_byp = (value >> 4) & 0x1;
    321c:	8007d13a 	srai	r3,r16,4
    3220:	18c0004c 	andi	r3,r3,1
    3224:	10c21215 	stw	r3,2120(r2)
        regs->reg_0x040c_gfir1_byp = (value >> 3) & 0x1;
    3228:	8007d0fa 	srai	r3,r16,3
    322c:	18c0004c 	andi	r3,r3,1
    3230:	10c21315 	stw	r3,2124(r2)
        regs->reg_0x040c_dc_byp = (value >> 2) & 0x1;
    3234:	8007d0ba 	srai	r3,r16,2
    3238:	18c0004c 	andi	r3,r3,1
    323c:	10c21415 	stw	r3,2128(r2)
        regs->reg_0x040c_gc_byp = (value >> 1) & 0x1;
    3240:	8007d07a 	srai	r3,r16,1
        regs->reg_0x040c_ph_byp = (value >> 0) & 0x1;
    3244:	8400004c 	andi	r16,r16,1
    3248:	14021615 	stw	r16,2136(r2)
        regs->reg_0x040c_agc_byp = (value >> 6) & 0x1;
        regs->reg_0x040c_gfir3_byp = (value >> 5) & 0x1;
        regs->reg_0x040c_gfir2_byp = (value >> 4) & 0x1;
        regs->reg_0x040c_gfir1_byp = (value >> 3) & 0x1;
        regs->reg_0x040c_dc_byp = (value >> 2) & 0x1;
        regs->reg_0x040c_gc_byp = (value >> 1) & 0x1;
    324c:	18c0004c 	andi	r3,r3,1
    3250:	10c21515 	stw	r3,2132(r2)
    3254:	0038c406 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x040c_ph_byp = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x040e)
    3258:	00c10384 	movi	r3,1038
    325c:	88c0021e 	bne	r17,r3,3268 <set_addrs_to_default+0x2128>
    {
        regs->reg_0x040e_value = (value >> 0) & 0xffff;
    3260:	14021715 	stw	r16,2140(r2)
    3264:	0038c006 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x0440)
    3268:	00c11004 	movi	r3,1088
    326c:	88c0091e 	bne	r17,r3,3294 <set_addrs_to_default+0x2154>
    {
        regs->reg_0x0440_dthbit = (value >> 5) & 0xf;
    3270:	8007d17a 	srai	r3,r16,5
    3274:	18c003cc 	andi	r3,r3,15
    3278:	10c21815 	stw	r3,2144(r2)
        regs->reg_0x0440_sel = (value >> 1) & 0xf;
    327c:	8007d07a 	srai	r3,r16,1
        regs->reg_0x0440_mode = (value >> 0) & 0x1;
    3280:	8400004c 	andi	r16,r16,1
    3284:	14021a15 	stw	r16,2152(r2)
        return;
    }
    if (addr == 0x0440)
    {
        regs->reg_0x0440_dthbit = (value >> 5) & 0xf;
        regs->reg_0x0440_sel = (value >> 1) & 0xf;
    3288:	18c003cc 	andi	r3,r3,15
    328c:	10c21915 	stw	r3,2148(r2)
    3290:	0038b506 	br	1568 <__alt_data_end+0xfffc2d68>
        regs->reg_0x0440_mode = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0441)
    3294:	00c11044 	movi	r3,1089
    3298:	88c0021e 	bne	r17,r3,32a4 <set_addrs_to_default+0x2164>
    {
        regs->reg_0x0441_pho = (value >> 0) & 0xffff;
    329c:	14021b15 	stw	r16,2156(r2)
    32a0:	0038b106 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x0442)
    32a4:	00c11084 	movi	r3,1090
    32a8:	88c0021e 	bne	r17,r3,32b4 <set_addrs_to_default+0x2174>
    {
        regs->reg_0x0442_fcw0_hi = (value >> 0) & 0xffff;
    32ac:	14021c15 	stw	r16,2160(r2)
    32b0:	0038ad06 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x0443)
    32b4:	00c110c4 	movi	r3,1091
    32b8:	88c0021e 	bne	r17,r3,32c4 <set_addrs_to_default+0x2184>
    {
        regs->reg_0x0443_fcw0_lo = (value >> 0) & 0xffff;
    32bc:	14021d15 	stw	r16,2164(r2)
    32c0:	0038a906 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x05c0)
    32c4:	00c17004 	movi	r3,1472
    32c8:	88c0021e 	bne	r17,r3,32d4 <set_addrs_to_default+0x2194>
    {
        regs->reg_0x05c0_value = (value >> 0) & 0xffff;
    32cc:	14021e15 	stw	r16,2168(r2)
    32d0:	0038a506 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x05c1)
    32d4:	00c17044 	movi	r3,1473
    32d8:	88c0021e 	bne	r17,r3,32e4 <set_addrs_to_default+0x21a4>
    {
        regs->reg_0x05c1_value = (value >> 0) & 0xffff;
    32dc:	14021f15 	stw	r16,2172(r2)
    32e0:	0038a106 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x05c2)
    32e4:	00c17084 	movi	r3,1474
    32e8:	88c0021e 	bne	r17,r3,32f4 <set_addrs_to_default+0x21b4>
    {
        regs->reg_0x05c2_value = (value >> 0) & 0xffff;
    32ec:	14022015 	stw	r16,2176(r2)
    32f0:	00389d06 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x05c3)
    32f4:	00c170c4 	movi	r3,1475
    32f8:	88c0021e 	bne	r17,r3,3304 <set_addrs_to_default+0x21c4>
    {
        regs->reg_0x05c3_value = (value >> 0) & 0xffff;
    32fc:	14022115 	stw	r16,2180(r2)
    3300:	00389906 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x05c4)
    3304:	00c17104 	movi	r3,1476
    3308:	88c0021e 	bne	r17,r3,3314 <set_addrs_to_default+0x21d4>
    {
        regs->reg_0x05c4_value = (value >> 0) & 0xffff;
    330c:	14022215 	stw	r16,2184(r2)
    3310:	00389506 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x05c5)
    3314:	00c17144 	movi	r3,1477
    3318:	88c0021e 	bne	r17,r3,3324 <set_addrs_to_default+0x21e4>
    {
        regs->reg_0x05c5_value = (value >> 0) & 0xffff;
    331c:	14022315 	stw	r16,2188(r2)
    3320:	00389106 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x05c6)
    3324:	00c17184 	movi	r3,1478
    3328:	88c0021e 	bne	r17,r3,3334 <set_addrs_to_default+0x21f4>
    {
        regs->reg_0x05c6_value = (value >> 0) & 0xffff;
    332c:	14022415 	stw	r16,2192(r2)
    3330:	00388d06 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x05c7)
    3334:	00c171c4 	movi	r3,1479
    3338:	88c0021e 	bne	r17,r3,3344 <set_addrs_to_default+0x2204>
    {
        regs->reg_0x05c7_value = (value >> 0) & 0xffff;
    333c:	14022515 	stw	r16,2196(r2)
    3340:	00388906 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x05c8)
    3344:	00c17204 	movi	r3,1480
    3348:	88c0021e 	bne	r17,r3,3354 <set_addrs_to_default+0x2214>
    {
        regs->reg_0x05c8_value = (value >> 0) & 0xffff;
    334c:	14022615 	stw	r16,2200(r2)
    3350:	00388506 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x05c9)
    3354:	00c17244 	movi	r3,1481
    3358:	88c0021e 	bne	r17,r3,3364 <set_addrs_to_default+0x2224>
    {
        regs->reg_0x05c9_value = (value >> 0) & 0xffff;
    335c:	14022715 	stw	r16,2204(r2)
    3360:	00388106 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x05ca)
    3364:	00c17284 	movi	r3,1482
    3368:	88c0021e 	bne	r17,r3,3374 <set_addrs_to_default+0x2234>
    {
        regs->reg_0x05ca_value = (value >> 0) & 0xffff;
    336c:	14022815 	stw	r16,2208(r2)
    3370:	00387d06 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x05cb)
    3374:	00c172c4 	movi	r3,1483
    3378:	88c0021e 	bne	r17,r3,3384 <set_addrs_to_default+0x2244>
    {
        regs->reg_0x05cb_value = (value >> 0) & 0xffff;
    337c:	14022915 	stw	r16,2212(r2)
    3380:	00387906 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x05cc)
    3384:	00c17304 	movi	r3,1484
    3388:	88c0021e 	bne	r17,r3,3394 <set_addrs_to_default+0x2254>
    {
        regs->reg_0x05cc_value = (value >> 0) & 0xffff;
    338c:	14022a15 	stw	r16,2216(r2)
    3390:	00387506 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x0600)
    3394:	00c18004 	movi	r3,1536
    3398:	88c0021e 	bne	r17,r3,33a4 <set_addrs_to_default+0x2264>
    {
        regs->reg_0x0600_value = (value >> 0) & 0xffff;
    339c:	14022b15 	stw	r16,2220(r2)
    33a0:	00387106 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x0601)
    33a4:	00c18044 	movi	r3,1537
    33a8:	88c0021e 	bne	r17,r3,33b4 <set_addrs_to_default+0x2274>
    {
        regs->reg_0x0601_value = (value >> 0) & 0xffff;
    33ac:	14022c15 	stw	r16,2224(r2)
    33b0:	00386d06 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x0602)
    33b4:	00c18084 	movi	r3,1538
    33b8:	88c0021e 	bne	r17,r3,33c4 <set_addrs_to_default+0x2284>
    {
        regs->reg_0x0602_value = (value >> 0) & 0xffff;
    33bc:	14022d15 	stw	r16,2228(r2)
    33c0:	00386906 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x0603)
    33c4:	00c180c4 	movi	r3,1539
    33c8:	88c0021e 	bne	r17,r3,33d4 <set_addrs_to_default+0x2294>
    {
        regs->reg_0x0603_value = (value >> 0) & 0xffff;
    33cc:	14022e15 	stw	r16,2232(r2)
    33d0:	00386506 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x0604)
    33d4:	00c18104 	movi	r3,1540
    33d8:	88c0021e 	bne	r17,r3,33e4 <set_addrs_to_default+0x22a4>
    {
        regs->reg_0x0604_value = (value >> 0) & 0xffff;
    33dc:	14022f15 	stw	r16,2236(r2)
    33e0:	00386106 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x0605)
    33e4:	00c18144 	movi	r3,1541
    33e8:	88c0021e 	bne	r17,r3,33f4 <set_addrs_to_default+0x22b4>
    {
        regs->reg_0x0605_value = (value >> 0) & 0xffff;
    33ec:	14023015 	stw	r16,2240(r2)
    33f0:	00385d06 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x0606)
    33f4:	00c18184 	movi	r3,1542
    33f8:	88c0021e 	bne	r17,r3,3404 <set_addrs_to_default+0x22c4>
    {
        regs->reg_0x0606_value = (value >> 0) & 0xffff;
    33fc:	14023115 	stw	r16,2244(r2)
    3400:	00385906 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x0640)
    3404:	00c19004 	movi	r3,1600
    3408:	88c0021e 	bne	r17,r3,3414 <set_addrs_to_default+0x22d4>
    {
        regs->reg_0x0640_value = (value >> 0) & 0xffff;
    340c:	14023215 	stw	r16,2248(r2)
    3410:	00385506 	br	1568 <__alt_data_end+0xfffc2d68>
        return;
    }
    if (addr == 0x0641)
    3414:	00c19044 	movi	r3,1601
    3418:	88f8531e 	bne	r17,r3,1568 <__alt_data_end+0xfffc2d68>
    {
        regs->reg_0x0641_value = (value >> 0) & 0xffff;
    341c:	14023315 	stw	r16,2252(r2)
    3420:	00385106 	br	1568 <__alt_data_end+0xfffc2d68>
        int value = LMS7002M_regs_default(addr);
        if (value == -1) continue; //not in map
        LMS7002M_regs_set(LMS7002M_regs(self), addr, value);
        LMS7002M_regs_spi_write(self, addr);
    }
}
    3424:	dfc00817 	ldw	ra,32(sp)
    3428:	ddc00717 	ldw	r23,28(sp)
    342c:	dd800617 	ldw	r22,24(sp)
    3430:	dd400517 	ldw	r21,20(sp)
    3434:	dd000417 	ldw	r20,16(sp)
    3438:	dcc00317 	ldw	r19,12(sp)
    343c:	dc800217 	ldw	r18,8(sp)
    3440:	dc400117 	ldw	r17,4(sp)
    3444:	dc000017 	ldw	r16,0(sp)
    3448:	dec00904 	addi	sp,sp,36
    344c:	f800283a 	ret

00003450 <cal_gain_selection>:

int cal_gain_selection(LMS7002M_t *self, const LMS7002M_chan_t channel)
{
    3450:	defff904 	addi	sp,sp,-28
    3454:	dd400515 	stw	r21,20(sp)
    3458:	dd000415 	stw	r20,16(sp)
    345c:	dcc00315 	stw	r19,12(sp)
    3460:	dc800215 	stw	r18,8(sp)
    3464:	dc400115 	stw	r17,4(sp)
    3468:	dc000015 	stw	r16,0(sp)
    346c:	dfc00615 	stw	ra,24(sp)
    3470:	2021883a 	mov	r16,r4
    3474:	2823883a 	mov	r17,r5
    while (true)
    {
        const int rssi_value_50k = cal_read_rssi(self, channel);
        if (rssi_value_50k < 0x8400) break;
    3478:	04a0ffd4 	movui	r18,33791

        LMS7002M_regs(self)->reg_0x0108_cg_iamp_tbb++;
        if (LMS7002M_regs(self)->reg_0x0108_cg_iamp_tbb > 63)
    347c:	04c00fc4 	movi	r19,63
        {
            if (LMS7002M_regs(self)->reg_0x0119_g_pga_rbb > 31) break;
    3480:	050007c4 	movi	r20,31
            LMS7002M_regs(self)->reg_0x0108_cg_iamp_tbb = 1;
    3484:	05400044 	movi	r21,1

int cal_gain_selection(LMS7002M_t *self, const LMS7002M_chan_t channel)
{
    while (true)
    {
        const int rssi_value_50k = cal_read_rssi(self, channel);
    3488:	880b883a 	mov	r5,r17
    348c:	8009883a 	mov	r4,r16
    3490:	00010e80 	call	10e8 <cal_read_rssi>
        if (rssi_value_50k < 0x8400) break;
    3494:	10bfffcc 	andi	r2,r2,65535
    3498:	90801c0e 	bge	r18,r2,350c <cal_gain_selection+0xbc>

        LMS7002M_regs(self)->reg_0x0108_cg_iamp_tbb++;
    349c:	8009883a 	mov	r4,r16
    34a0:	0008ac80 	call	8ac8 <LMS7002M_regs>
    34a4:	10c15717 	ldw	r3,1372(r2)
        if (LMS7002M_regs(self)->reg_0x0108_cg_iamp_tbb > 63)
    34a8:	8009883a 	mov	r4,r16
    while (true)
    {
        const int rssi_value_50k = cal_read_rssi(self, channel);
        if (rssi_value_50k < 0x8400) break;

        LMS7002M_regs(self)->reg_0x0108_cg_iamp_tbb++;
    34ac:	18c00044 	addi	r3,r3,1
    34b0:	10c15715 	stw	r3,1372(r2)
        if (LMS7002M_regs(self)->reg_0x0108_cg_iamp_tbb > 63)
    34b4:	0008ac80 	call	8ac8 <LMS7002M_regs>
    34b8:	10815717 	ldw	r2,1372(r2)
    34bc:	98800c0e 	bge	r19,r2,34f0 <cal_gain_selection+0xa0>
        {
            if (LMS7002M_regs(self)->reg_0x0119_g_pga_rbb > 31) break;
    34c0:	8009883a 	mov	r4,r16
    34c4:	0008ac80 	call	8ac8 <LMS7002M_regs>
    34c8:	10819417 	ldw	r2,1616(r2)
    34cc:	a0800f16 	blt	r20,r2,350c <cal_gain_selection+0xbc>
            LMS7002M_regs(self)->reg_0x0108_cg_iamp_tbb = 1;
    34d0:	8009883a 	mov	r4,r16
    34d4:	0008ac80 	call	8ac8 <LMS7002M_regs>
    34d8:	15415715 	stw	r21,1372(r2)
            LMS7002M_regs(self)->reg_0x0119_g_pga_rbb += 6;
    34dc:	8009883a 	mov	r4,r16
    34e0:	0008ac80 	call	8ac8 <LMS7002M_regs>
    34e4:	10c19417 	ldw	r3,1616(r2)
    34e8:	18c00184 	addi	r3,r3,6
    34ec:	10c19415 	stw	r3,1616(r2)
        }

        LMS7002M_regs_spi_write(self, 0x0108);
    34f0:	8009883a 	mov	r4,r16
    34f4:	01404204 	movi	r5,264
    34f8:	00063000 	call	6300 <LMS7002M_regs_spi_write>
        LMS7002M_regs_spi_write(self, 0x0119);
    34fc:	01404644 	movi	r5,281
    3500:	8009883a 	mov	r4,r16
    3504:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    }
    3508:	003fdf06 	br	3488 <__alt_data_end+0xfffc4c88>
    return cal_read_rssi(self, channel);
    350c:	880b883a 	mov	r5,r17
    3510:	8009883a 	mov	r4,r16
    3514:	00010e80 	call	10e8 <cal_read_rssi>
}
    3518:	10bfffcc 	andi	r2,r2,65535
    351c:	dfc00617 	ldw	ra,24(sp)
    3520:	dd400517 	ldw	r21,20(sp)
    3524:	dd000417 	ldw	r20,16(sp)
    3528:	dcc00317 	ldw	r19,12(sp)
    352c:	dc800217 	ldw	r18,8(sp)
    3530:	dc400117 	ldw	r17,4(sp)
    3534:	dc000017 	ldw	r16,0(sp)
    3538:	dec00704 	addi	sp,sp,28
    353c:	f800283a 	ret

00003540 <cal_setup_cgen>:

int cal_setup_cgen(LMS7002M_t *self, const double bw)
{
    3540:	defff804 	addi	sp,sp,-32
    3544:	dcc00515 	stw	r19,20(sp)
    3548:	3027883a 	mov	r19,r6
    354c:	dd000615 	stw	r20,24(sp)
    3550:	dc800415 	stw	r18,16(sp)
    double cgen_freq = bw*20;
    3554:	000d883a 	mov	r6,zero
    3558:	01d00d34 	movhi	r7,16436
    }
    return cal_read_rssi(self, channel);
}

int cal_setup_cgen(LMS7002M_t *self, const double bw)
{
    355c:	2025883a 	mov	r18,r4
    3560:	2829883a 	mov	r20,r5
    double cgen_freq = bw*20;
    3564:	2809883a 	mov	r4,r5
    3568:	980b883a 	mov	r5,r19
    }
    return cal_read_rssi(self, channel);
}

int cal_setup_cgen(LMS7002M_t *self, const double bw)
{
    356c:	dc400315 	stw	r17,12(sp)
    3570:	dc000215 	stw	r16,8(sp)
    3574:	dfc00715 	stw	ra,28(sp)
    double cgen_freq = bw*20;
    3578:	0026f740 	call	26f74 <__muldf3>
    if (cgen_freq < 60e6) cgen_freq = 60e6;
    357c:	01d06374 	movhi	r7,16781
    3580:	000d883a 	mov	r6,zero
    3584:	39e70e04 	addi	r7,r7,-25544
    3588:	1009883a 	mov	r4,r2
    358c:	180b883a 	mov	r5,r3
    return cal_read_rssi(self, channel);
}

int cal_setup_cgen(LMS7002M_t *self, const double bw)
{
    double cgen_freq = bw*20;
    3590:	1021883a 	mov	r16,r2
    3594:	1823883a 	mov	r17,r3
    if (cgen_freq < 60e6) cgen_freq = 60e6;
    3598:	0026e800 	call	26e80 <__ledf2>
    359c:	10000b16 	blt	r2,zero,35cc <cal_setup_cgen+0x8c>
    if (cgen_freq > 640e6) cgen_freq = 640e6;
    35a0:	01d070f4 	movhi	r7,16835
    35a4:	000d883a 	mov	r6,zero
    35a8:	39c4b404 	addi	r7,r7,4816
    35ac:	8009883a 	mov	r4,r16
    35b0:	880b883a 	mov	r5,r17
    35b4:	0026da40 	call	26da4 <__gedf2>
    35b8:	0080070e 	bge	zero,r2,35d8 <cal_setup_cgen+0x98>
    35bc:	045070f4 	movhi	r17,16835
    35c0:	0021883a 	mov	r16,zero
    35c4:	8c44b404 	addi	r17,r17,4816
    35c8:	00000306 	br	35d8 <cal_setup_cgen+0x98>
}

int cal_setup_cgen(LMS7002M_t *self, const double bw)
{
    double cgen_freq = bw*20;
    if (cgen_freq < 60e6) cgen_freq = 60e6;
    35cc:	04506374 	movhi	r17,16781
    35d0:	0021883a 	mov	r16,zero
    35d4:	8c670e04 	addi	r17,r17,-25544
    if (cgen_freq > 640e6) cgen_freq = 640e6;
    while ((int)(cgen_freq/1e6) == (int)(bw/16e6)) cgen_freq -= 10e6;
    35d8:	01d05bf4 	movhi	r7,16751
    35dc:	980b883a 	mov	r5,r19
    35e0:	000d883a 	mov	r6,zero
    35e4:	39e12004 	addi	r7,r7,-31616
    35e8:	a009883a 	mov	r4,r20
    35ec:	002634c0 	call	2634c <__divdf3>
    35f0:	1009883a 	mov	r4,r2
    35f4:	180b883a 	mov	r5,r3
    35f8:	00280dc0 	call	280dc <__fixdfsi>
    35fc:	1027883a 	mov	r19,r2
    3600:	01d04bf4 	movhi	r7,16687
    3604:	8009883a 	mov	r4,r16
    3608:	880b883a 	mov	r5,r17
    360c:	000d883a 	mov	r6,zero
    3610:	39e12004 	addi	r7,r7,-31616
    3614:	002634c0 	call	2634c <__divdf3>
    3618:	1009883a 	mov	r4,r2
    361c:	180b883a 	mov	r5,r3
    3620:	00280dc0 	call	280dc <__fixdfsi>
    3624:	14c0091e 	bne	r2,r19,364c <cal_setup_cgen+0x10c>
    3628:	01d058f4 	movhi	r7,16739
    362c:	8009883a 	mov	r4,r16
    3630:	880b883a 	mov	r5,r17
    3634:	000d883a 	mov	r6,zero
    3638:	39c4b404 	addi	r7,r7,4816
    363c:	00277e00 	call	277e0 <__subdf3>
    3640:	1021883a 	mov	r16,r2
    3644:	1823883a 	mov	r17,r3
    3648:	003fed06 	br	3600 <__alt_data_end+0xfffc4e00>
    return LMS7002M_set_data_clock(self, self->cgen_fref, cgen_freq, NULL);
    364c:	91447017 	ldw	r5,4544(r18)
    3650:	91847117 	ldw	r6,4548(r18)
    3654:	d8000115 	stw	zero,4(sp)
    3658:	dc400015 	stw	r17,0(sp)
    365c:	800f883a 	mov	r7,r16
    3660:	9009883a 	mov	r4,r18
    3664:	0000d6c0 	call	d6c <LMS7002M_set_data_clock>
}
    3668:	dfc00717 	ldw	ra,28(sp)
    366c:	dd000617 	ldw	r20,24(sp)
    3670:	dcc00517 	ldw	r19,20(sp)
    3674:	dc800417 	ldw	r18,16(sp)
    3678:	dc400317 	ldw	r17,12(sp)
    367c:	dc000217 	ldw	r16,8(sp)
    3680:	dec00804 	addi	sp,sp,32
    3684:	f800283a 	ret

00003688 <LMS7002M_set_gfir_taps>:
    const LMS7002M_dir_t direction,
    const LMS7002M_chan_t channel,
    const int which,
    const short *taps,
    const size_t ntaps)
{
    3688:	defff604 	addi	sp,sp,-40
    368c:	dc800215 	stw	r18,8(sp)
    3690:	dc800a17 	ldw	r18,40(sp)
    3694:	dd000415 	stw	r20,16(sp)
    3698:	2829883a 	mov	r20,r5
    LMS7002M_set_mac_ch(self, channel);
    369c:	300b883a 	mov	r5,r6
    const LMS7002M_dir_t direction,
    const LMS7002M_chan_t channel,
    const int which,
    const short *taps,
    const size_t ntaps)
{
    36a0:	dd400515 	stw	r21,20(sp)
    36a4:	dc400115 	stw	r17,4(sp)
    36a8:	dc000015 	stw	r16,0(sp)
    36ac:	dfc00915 	stw	ra,36(sp)
    36b0:	df000815 	stw	fp,32(sp)
    36b4:	ddc00715 	stw	r23,28(sp)
    36b8:	dd800615 	stw	r22,24(sp)
    36bc:	dcc00315 	stw	r19,12(sp)
    36c0:	2023883a 	mov	r17,r4
    36c4:	3821883a 	mov	r16,r7
    36c8:	dd400b17 	ldw	r21,44(sp)
    LMS7002M_set_mac_ch(self, channel);
    36cc:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>
    36d0:	00800044 	movi	r2,1

    //bypass the filter for null/empty filter taps
    const bool bypass = (taps == NULL) || (ntaps == 0);
    36d4:	90000226 	beq	r18,zero,36e0 <LMS7002M_set_gfir_taps+0x58>
    36d8:	a827003a 	cmpeq	r19,r21,zero
    36dc:	00000106 	br	36e4 <LMS7002M_set_gfir_taps+0x5c>
    36e0:	1027883a 	mov	r19,r2
    if (direction == LMS_RX)
    36e4:	00c00084 	movi	r3,2
    36e8:	a0c00e1e 	bne	r20,r3,3724 <LMS7002M_set_gfir_taps+0x9c>
    {
        if (which == 1) self->regs->reg_0x040c_gfir1_byp = bypass?1:0;
    36ec:	8080031e 	bne	r16,r2,36fc <LMS7002M_set_gfir_taps+0x74>
    36f0:	88846917 	ldw	r2,4516(r17)
    36f4:	14c21315 	stw	r19,2124(r2)
    36f8:	00000806 	br	371c <LMS7002M_set_gfir_taps+0x94>
        if (which == 2) self->regs->reg_0x040c_gfir2_byp = bypass?1:0;
    36fc:	8500031e 	bne	r16,r20,370c <LMS7002M_set_gfir_taps+0x84>
    3700:	88846917 	ldw	r2,4516(r17)
    3704:	14c21215 	stw	r19,2120(r2)
    3708:	00000406 	br	371c <LMS7002M_set_gfir_taps+0x94>
        if (which == 3) self->regs->reg_0x040c_gfir3_byp = bypass?1:0;
    370c:	008000c4 	movi	r2,3
    3710:	8080021e 	bne	r16,r2,371c <LMS7002M_set_gfir_taps+0x94>
    3714:	88846917 	ldw	r2,4516(r17)
    3718:	14c21115 	stw	r19,2116(r2)
        LMS7002M_regs_spi_write(self, 0x040c);
    371c:	01410304 	movi	r5,1036
    3720:	00000e06 	br	375c <LMS7002M_set_gfir_taps+0xd4>
    }
    if (direction == LMS_TX)
    3724:	a0800f1e 	bne	r20,r2,3764 <LMS7002M_set_gfir_taps+0xdc>
    {
        if (which == 1) self->regs->reg_0x0208_gfir1_byp = bypass?1:0;
    3728:	8500031e 	bne	r16,r20,3738 <LMS7002M_set_gfir_taps+0xb0>
    372c:	88846917 	ldw	r2,4516(r17)
    3730:	14c1e415 	stw	r19,1936(r2)
    3734:	00000806 	br	3758 <LMS7002M_set_gfir_taps+0xd0>
        if (which == 2) self->regs->reg_0x0208_gfir2_byp = bypass?1:0;
    3738:	80c0031e 	bne	r16,r3,3748 <LMS7002M_set_gfir_taps+0xc0>
    373c:	88846917 	ldw	r2,4516(r17)
    3740:	14c1e315 	stw	r19,1932(r2)
    3744:	00000406 	br	3758 <LMS7002M_set_gfir_taps+0xd0>
        if (which == 3) self->regs->reg_0x0208_gfir3_byp = bypass?1:0;
    3748:	008000c4 	movi	r2,3
    374c:	8080021e 	bne	r16,r2,3758 <LMS7002M_set_gfir_taps+0xd0>
    3750:	88846917 	ldw	r2,4516(r17)
    3754:	14c1e215 	stw	r19,1928(r2)
        LMS7002M_regs_spi_write(self, 0x0208);
    3758:	01408204 	movi	r5,520
    375c:	8809883a 	mov	r4,r17
    3760:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    }

    //bypass programed, skip writing taps
    if (bypass) return 0;
    3764:	98005a1e 	bne	r19,zero,38d0 <LMS7002M_set_gfir_taps+0x248>

    //bounds check
    if (which < 1) return -1;
    3768:	80ffffc4 	addi	r3,r16,-1
    376c:	00800084 	movi	r2,2
    3770:	10c05936 	bltu	r2,r3,38d8 <LMS7002M_set_gfir_taps+0x250>
    if (which > 3) return -1;
    if (which == 1 && ntaps != 5*8) return -2;
    3774:	00c00044 	movi	r3,1
    3778:	80c0031e 	bne	r16,r3,3788 <LMS7002M_set_gfir_taps+0x100>
    377c:	00c00a04 	movi	r3,40
    3780:	a8c00826 	beq	r21,r3,37a4 <LMS7002M_set_gfir_taps+0x11c>
    3784:	00005606 	br	38e0 <LMS7002M_set_gfir_taps+0x258>
    if (which == 2 && ntaps != 5*8) return -2;
    3788:	8080031e 	bne	r16,r2,3798 <LMS7002M_set_gfir_taps+0x110>
    378c:	00800a04 	movi	r2,40
    3790:	a8801d26 	beq	r21,r2,3808 <LMS7002M_set_gfir_taps+0x180>
    3794:	00005206 	br	38e0 <LMS7002M_set_gfir_taps+0x258>
    if (which == 3 && ntaps != 3*5*8) return -2;
    3798:	00c01e04 	movi	r3,120
    379c:	a8c03326 	beq	r21,r3,386c <LMS7002M_set_gfir_taps+0x1e4>
    37a0:	00004f06 	br	38e0 <LMS7002M_set_gfir_taps+0x258>

    //taps configuration logic from LMS7002_MainControl::LoadGFIRCoefficients
    if (which == 1)
    {
        int addr = (direction == LMS_RX)?0x0480:0x0280;
    37a4:	a0800226 	beq	r20,r2,37b0 <LMS7002M_set_gfir_taps+0x128>
    37a8:	0400a004 	movi	r16,640
    37ac:	00000106 	br	37b4 <LMS7002M_set_gfir_taps+0x12c>
    37b0:	04012004 	movi	r16,1152
    37b4:	01600034 	movhi	r5,32768
    37b8:	8009883a 	mov	r4,r16
    37bc:	002587c0 	call	2587c <__mulsi3>
    37c0:	8027883a 	mov	r19,r16
    37c4:	85000a04 	addi	r20,r16,40
    37c8:	102f883a 	mov	r23,r2
    37cc:	bcc7c83a 	sub	r3,r23,r19
    37d0:	85800204 	addi	r22,r16,8
    37d4:	18eb883a 	add	r21,r3,r3
        for (int k=0; k<5; ++k)
        {
            for (int i=0; i<8; ++i)
            {
                LMS7002M_spi_write(self, addr, taps[k*8+i]);
    37d8:	8407883a 	add	r3,r16,r16
    37dc:	1d47883a 	add	r3,r3,r21
    37e0:	90c7883a 	add	r3,r18,r3
    37e4:	1980000f 	ldh	r6,0(r3)
    37e8:	800b883a 	mov	r5,r16
    37ec:	8809883a 	mov	r4,r17
                ++addr;
    37f0:	84000044 	addi	r16,r16,1
        int addr = (direction == LMS_RX)?0x0480:0x0280;
        for (int k=0; k<5; ++k)
        {
            for (int i=0; i<8; ++i)
            {
                LMS7002M_spi_write(self, addr, taps[k*8+i]);
    37f4:	00062b80 	call	62b8 <LMS7002M_spi_write>
    if (which == 1)
    {
        int addr = (direction == LMS_RX)?0x0480:0x0280;
        for (int k=0; k<5; ++k)
        {
            for (int i=0; i<8; ++i)
    37f8:	b43ff71e 	bne	r22,r16,37d8 <__alt_data_end+0xfffc4fd8>
    37fc:	b021883a 	mov	r16,r22

    //taps configuration logic from LMS7002_MainControl::LoadGFIRCoefficients
    if (which == 1)
    {
        int addr = (direction == LMS_RX)?0x0480:0x0280;
        for (int k=0; k<5; ++k)
    3800:	a5bff21e 	bne	r20,r22,37cc <__alt_data_end+0xfffc4fcc>
    3804:	00003206 	br	38d0 <LMS7002M_set_gfir_taps+0x248>
            }
        }
    }
    else if (which == 2)
    {
        int addr = (direction == LMS_RX)?0x04c0:0x02c0;
    3808:	a4000226 	beq	r20,r16,3814 <LMS7002M_set_gfir_taps+0x18c>
    380c:	0400b004 	movi	r16,704
    3810:	00000106 	br	3818 <LMS7002M_set_gfir_taps+0x190>
    3814:	04013004 	movi	r16,1216
    3818:	01600034 	movhi	r5,32768
    381c:	8009883a 	mov	r4,r16
    3820:	002587c0 	call	2587c <__mulsi3>
    3824:	8027883a 	mov	r19,r16
    3828:	85000a04 	addi	r20,r16,40
    382c:	102f883a 	mov	r23,r2
    3830:	bcc7c83a 	sub	r3,r23,r19
    3834:	85800204 	addi	r22,r16,8
    3838:	18eb883a 	add	r21,r3,r3
        for (int k=0; k<5; ++k)
        {
            for (int i=0; i<8; ++i)
            {
                LMS7002M_spi_write(self, addr, taps[k*8+i]);
    383c:	8407883a 	add	r3,r16,r16
    3840:	1d47883a 	add	r3,r3,r21
    3844:	90c7883a 	add	r3,r18,r3
    3848:	1980000f 	ldh	r6,0(r3)
    384c:	800b883a 	mov	r5,r16
    3850:	8809883a 	mov	r4,r17
                ++addr;
    3854:	84000044 	addi	r16,r16,1
        int addr = (direction == LMS_RX)?0x04c0:0x02c0;
        for (int k=0; k<5; ++k)
        {
            for (int i=0; i<8; ++i)
            {
                LMS7002M_spi_write(self, addr, taps[k*8+i]);
    3858:	00062b80 	call	62b8 <LMS7002M_spi_write>
    else if (which == 2)
    {
        int addr = (direction == LMS_RX)?0x04c0:0x02c0;
        for (int k=0; k<5; ++k)
        {
            for (int i=0; i<8; ++i)
    385c:	b43ff71e 	bne	r22,r16,383c <__alt_data_end+0xfffc503c>
    3860:	b021883a 	mov	r16,r22
        }
    }
    else if (which == 2)
    {
        int addr = (direction == LMS_RX)?0x04c0:0x02c0;
        for (int k=0; k<5; ++k)
    3864:	a5bff21e 	bne	r20,r22,3830 <__alt_data_end+0xfffc5030>
    3868:	00001906 	br	38d0 <LMS7002M_set_gfir_taps+0x248>
            }
        }
    }
    else if (which == 3)
    {
        int addr = (direction == LMS_RX)?0x0500:0x0300;
    386c:	a0800226 	beq	r20,r2,3878 <LMS7002M_set_gfir_taps+0x1f0>
    3870:	0140c004 	movi	r5,768
    3874:	00000106 	br	387c <LMS7002M_set_gfir_taps+0x1f4>
    3878:	01414004 	movi	r5,1280
    387c:	0167c83a 	sub	r19,zero,r5
    3880:	2f003004 	addi	fp,r5,192
    3884:	282f883a 	mov	r23,r5
    3888:	2d800a04 	addi	r22,r5,40
    388c:	9ceb883a 	add	r21,r19,r19
    3890:	2d000204 	addi	r20,r5,8
    3894:	2821883a 	mov	r16,r5
        {
            for (int k=0; k<5; ++k)
            {
                for (int i=0; i<8; ++i)
                {
                    coefValue = taps[coefIndex];
    3898:	8405883a 	add	r2,r16,r16
    389c:	1545883a 	add	r2,r2,r21
    38a0:	9085883a 	add	r2,r18,r2
                    ++coefIndex;

                    LMS7002M_spi_write(self, addr, coefValue);
    38a4:	1180000b 	ldhu	r6,0(r2)
    38a8:	800b883a 	mov	r5,r16
    38ac:	8809883a 	mov	r4,r17
                    ++addr;
    38b0:	84000044 	addi	r16,r16,1
                for (int i=0; i<8; ++i)
                {
                    coefValue = taps[coefIndex];
                    ++coefIndex;

                    LMS7002M_spi_write(self, addr, coefValue);
    38b4:	00062b80 	call	62b8 <LMS7002M_spi_write>
        unsigned short coefValue = 0;
        for (int n=0; n<3; ++n)
        {
            for (int k=0; k<5; ++k)
            {
                for (int i=0; i<8; ++i)
    38b8:	a43ff71e 	bne	r20,r16,3898 <__alt_data_end+0xfffc5098>
    38bc:	a00b883a 	mov	r5,r20
        int addr = (direction == LMS_RX)?0x0500:0x0300;
        int coefIndex = 0;
        unsigned short coefValue = 0;
        for (int n=0; n<3; ++n)
        {
            for (int k=0; k<5; ++k)
    38c0:	b53ff31e 	bne	r22,r20,3890 <__alt_data_end+0xfffc5090>
    38c4:	b9401004 	addi	r5,r23,64
    38c8:	9cfffa04 	addi	r19,r19,-24
    else if (which == 3)
    {
        int addr = (direction == LMS_RX)?0x0500:0x0300;
        int coefIndex = 0;
        unsigned short coefValue = 0;
        for (int n=0; n<3; ++n)
    38cc:	2f3fed1e 	bne	r5,fp,3884 <__alt_data_end+0xfffc5084>
        if (which == 3) self->regs->reg_0x0208_gfir3_byp = bypass?1:0;
        LMS7002M_regs_spi_write(self, 0x0208);
    }

    //bypass programed, skip writing taps
    if (bypass) return 0;
    38d0:	0005883a 	mov	r2,zero
    38d4:	00000306 	br	38e4 <LMS7002M_set_gfir_taps+0x25c>

    //bounds check
    if (which < 1) return -1;
    38d8:	00bfffc4 	movi	r2,-1
    38dc:	00000106 	br	38e4 <LMS7002M_set_gfir_taps+0x25c>
    if (which > 3) return -1;
    if (which == 1 && ntaps != 5*8) return -2;
    38e0:	00bfff84 	movi	r2,-2
            addr += 24; //skip reserved
        }
    }

    return 0; //OK
}
    38e4:	dfc00917 	ldw	ra,36(sp)
    38e8:	df000817 	ldw	fp,32(sp)
    38ec:	ddc00717 	ldw	r23,28(sp)
    38f0:	dd800617 	ldw	r22,24(sp)
    38f4:	dd400517 	ldw	r21,20(sp)
    38f8:	dd000417 	ldw	r20,16(sp)
    38fc:	dcc00317 	ldw	r19,12(sp)
    3900:	dc800217 	ldw	r18,8(sp)
    3904:	dc400117 	ldw	r17,4(sp)
    3908:	dc000017 	ldw	r16,0(sp)
    390c:	dec00a04 	addi	sp,sp,40
    3910:	f800283a 	ret

00003914 <LMS7002M_regs_set>:
    return -1;
}

static inline void LMS7002M_regs_set(LMS7002M_regs_t *regs, const int addr, const int value)
{
    if (addr == 0x0020)
    3914:	00800804 	movi	r2,32
    3918:	28802d1e 	bne	r5,r2,39d0 <LMS7002M_regs_set+0xbc>
    {
        regs->reg_0x0020_lrst_tx_b = (value >> 15) & 0x1;
    391c:	3005d3fa 	srai	r2,r6,15
    3920:	1080004c 	andi	r2,r2,1
    3924:	20800015 	stw	r2,0(r4)
        regs->reg_0x0020_mrst_tx_b = (value >> 14) & 0x1;
    3928:	3005d3ba 	srai	r2,r6,14
    392c:	1080004c 	andi	r2,r2,1
    3930:	20800115 	stw	r2,4(r4)
        regs->reg_0x0020_lrst_tx_a = (value >> 13) & 0x1;
    3934:	3005d37a 	srai	r2,r6,13
    3938:	1080004c 	andi	r2,r2,1
    393c:	20800215 	stw	r2,8(r4)
        regs->reg_0x0020_mrst_tx_a = (value >> 12) & 0x1;
    3940:	3005d33a 	srai	r2,r6,12
    3944:	1080004c 	andi	r2,r2,1
    3948:	20800315 	stw	r2,12(r4)
        regs->reg_0x0020_lrst_rx_b = (value >> 11) & 0x1;
    394c:	3005d2fa 	srai	r2,r6,11
    3950:	1080004c 	andi	r2,r2,1
    3954:	20800415 	stw	r2,16(r4)
        regs->reg_0x0020_mrst_rx_b = (value >> 10) & 0x1;
    3958:	3005d2ba 	srai	r2,r6,10
    395c:	1080004c 	andi	r2,r2,1
    3960:	20800515 	stw	r2,20(r4)
        regs->reg_0x0020_lrst_rx_a = (value >> 9) & 0x1;
    3964:	3005d27a 	srai	r2,r6,9
    3968:	1080004c 	andi	r2,r2,1
    396c:	20800615 	stw	r2,24(r4)
        regs->reg_0x0020_mrst_rx_a = (value >> 8) & 0x1;
    3970:	3005d23a 	srai	r2,r6,8
    3974:	1080004c 	andi	r2,r2,1
    3978:	20800715 	stw	r2,28(r4)
        regs->reg_0x0020_srst_rxfifo = (value >> 7) & 0x1;
    397c:	3005d1fa 	srai	r2,r6,7
    3980:	1080004c 	andi	r2,r2,1
    3984:	20800815 	stw	r2,32(r4)
        regs->reg_0x0020_srst_txfifo = (value >> 6) & 0x1;
    3988:	3005d1ba 	srai	r2,r6,6
    398c:	1080004c 	andi	r2,r2,1
    3990:	20800915 	stw	r2,36(r4)
        regs->reg_0x0020_rxen_b = (value >> 5) & 0x1;
    3994:	3005d17a 	srai	r2,r6,5
    3998:	1080004c 	andi	r2,r2,1
    399c:	20800a15 	stw	r2,40(r4)
        regs->reg_0x0020_rxen_a = (value >> 4) & 0x1;
    39a0:	3005d13a 	srai	r2,r6,4
    39a4:	1080004c 	andi	r2,r2,1
    39a8:	20800b15 	stw	r2,44(r4)
        regs->reg_0x0020_txen_b = (value >> 3) & 0x1;
    39ac:	3005d0fa 	srai	r2,r6,3
    39b0:	1080004c 	andi	r2,r2,1
    39b4:	20800c15 	stw	r2,48(r4)
        regs->reg_0x0020_txen_a = (value >> 2) & 0x1;
    39b8:	3005d0ba 	srai	r2,r6,2
        regs->reg_0x0020_mac = (value >> 0) & 0x3;
    39bc:	318000cc 	andi	r6,r6,3
    39c0:	21800e15 	stw	r6,56(r4)
        regs->reg_0x0020_srst_rxfifo = (value >> 7) & 0x1;
        regs->reg_0x0020_srst_txfifo = (value >> 6) & 0x1;
        regs->reg_0x0020_rxen_b = (value >> 5) & 0x1;
        regs->reg_0x0020_rxen_a = (value >> 4) & 0x1;
        regs->reg_0x0020_txen_b = (value >> 3) & 0x1;
        regs->reg_0x0020_txen_a = (value >> 2) & 0x1;
    39c4:	1080004c 	andi	r2,r2,1
    39c8:	20800d15 	stw	r2,52(r4)
        regs->reg_0x0020_mac = (value >> 0) & 0x3;
        return;
    39cc:	f800283a 	ret
    }
    if (addr == 0x0021)
    39d0:	00800844 	movi	r2,33
    39d4:	2880241e 	bne	r5,r2,3a68 <LMS7002M_regs_set+0x154>
    {
        regs->reg_0x0021_tx_clk_pe = (value >> 11) & 0x1;
    39d8:	3005d2fa 	srai	r2,r6,11
    39dc:	1080004c 	andi	r2,r2,1
    39e0:	20800f15 	stw	r2,60(r4)
        regs->reg_0x0021_rx_clk_pe = (value >> 10) & 0x1;
    39e4:	3005d2ba 	srai	r2,r6,10
    39e8:	1080004c 	andi	r2,r2,1
    39ec:	20801015 	stw	r2,64(r4)
        regs->reg_0x0021_sda_pe = (value >> 9) & 0x1;
    39f0:	3005d27a 	srai	r2,r6,9
    39f4:	1080004c 	andi	r2,r2,1
    39f8:	20801115 	stw	r2,68(r4)
        regs->reg_0x0021_sda_ds = (value >> 8) & 0x1;
    39fc:	3005d23a 	srai	r2,r6,8
    3a00:	1080004c 	andi	r2,r2,1
    3a04:	20801215 	stw	r2,72(r4)
        regs->reg_0x0021_scl_pe = (value >> 7) & 0x1;
    3a08:	3005d1fa 	srai	r2,r6,7
    3a0c:	1080004c 	andi	r2,r2,1
    3a10:	20801315 	stw	r2,76(r4)
        regs->reg_0x0021_scl_ds = (value >> 6) & 0x1;
    3a14:	3005d1ba 	srai	r2,r6,6
    3a18:	1080004c 	andi	r2,r2,1
    3a1c:	20801415 	stw	r2,80(r4)
        regs->reg_0x0021_sdio_ds = (value >> 5) & 0x1;
    3a20:	3005d17a 	srai	r2,r6,5
    3a24:	1080004c 	andi	r2,r2,1
    3a28:	20801515 	stw	r2,84(r4)
        regs->reg_0x0021_sdio_pe = (value >> 4) & 0x1;
    3a2c:	3005d13a 	srai	r2,r6,4
    3a30:	1080004c 	andi	r2,r2,1
    3a34:	20801615 	stw	r2,88(r4)
        regs->reg_0x0021_sdo_pe = (value >> 3) & 0x1;
    3a38:	3005d0fa 	srai	r2,r6,3
    3a3c:	1080004c 	andi	r2,r2,1
    3a40:	20801715 	stw	r2,92(r4)
        regs->reg_0x0021_sclk_pe = (value >> 2) & 0x1;
    3a44:	3005d0ba 	srai	r2,r6,2
    3a48:	1080004c 	andi	r2,r2,1
    3a4c:	20801815 	stw	r2,96(r4)
        regs->reg_0x0021_sen_pe = (value >> 1) & 0x1;
    3a50:	3005d07a 	srai	r2,r6,1
        regs->reg_0x0021_spimode = (value >> 0) & 0x1;
    3a54:	3180004c 	andi	r6,r6,1
    3a58:	21801a15 	stw	r6,104(r4)
        regs->reg_0x0021_scl_ds = (value >> 6) & 0x1;
        regs->reg_0x0021_sdio_ds = (value >> 5) & 0x1;
        regs->reg_0x0021_sdio_pe = (value >> 4) & 0x1;
        regs->reg_0x0021_sdo_pe = (value >> 3) & 0x1;
        regs->reg_0x0021_sclk_pe = (value >> 2) & 0x1;
        regs->reg_0x0021_sen_pe = (value >> 1) & 0x1;
    3a5c:	1080004c 	andi	r2,r2,1
    3a60:	20801915 	stw	r2,100(r4)
        regs->reg_0x0021_spimode = (value >> 0) & 0x1;
        return;
    3a64:	f800283a 	ret
    }
    if (addr == 0x0022)
    3a68:	00800884 	movi	r2,34
    3a6c:	2880241e 	bne	r5,r2,3b00 <LMS7002M_regs_set+0x1ec>
    {
        regs->reg_0x0022_diq2_ds = (value >> 11) & 0x1;
    3a70:	3005d2fa 	srai	r2,r6,11
    3a74:	1080004c 	andi	r2,r2,1
    3a78:	20801b15 	stw	r2,108(r4)
        regs->reg_0x0022_diq2_pe = (value >> 10) & 0x1;
    3a7c:	3005d2ba 	srai	r2,r6,10
    3a80:	1080004c 	andi	r2,r2,1
    3a84:	20801c15 	stw	r2,112(r4)
        regs->reg_0x0022_iq_sel_en_2_pe = (value >> 9) & 0x1;
    3a88:	3005d27a 	srai	r2,r6,9
    3a8c:	1080004c 	andi	r2,r2,1
    3a90:	20801d15 	stw	r2,116(r4)
        regs->reg_0x0022_txnrx2_pe = (value >> 8) & 0x1;
    3a94:	3005d23a 	srai	r2,r6,8
    3a98:	1080004c 	andi	r2,r2,1
    3a9c:	20801e15 	stw	r2,120(r4)
        regs->reg_0x0022_fclk2_pe = (value >> 7) & 0x1;
    3aa0:	3005d1fa 	srai	r2,r6,7
    3aa4:	1080004c 	andi	r2,r2,1
    3aa8:	20801f15 	stw	r2,124(r4)
        regs->reg_0x0022_mclk2_pe = (value >> 6) & 0x1;
    3aac:	3005d1ba 	srai	r2,r6,6
    3ab0:	1080004c 	andi	r2,r2,1
    3ab4:	20802015 	stw	r2,128(r4)
        regs->reg_0x0022_diq1_ds = (value >> 5) & 0x1;
    3ab8:	3005d17a 	srai	r2,r6,5
    3abc:	1080004c 	andi	r2,r2,1
    3ac0:	20802115 	stw	r2,132(r4)
        regs->reg_0x0022_diq1_pe = (value >> 4) & 0x1;
    3ac4:	3005d13a 	srai	r2,r6,4
    3ac8:	1080004c 	andi	r2,r2,1
    3acc:	20802215 	stw	r2,136(r4)
        regs->reg_0x0022_iq_sel_en_1_pe = (value >> 3) & 0x1;
    3ad0:	3005d0fa 	srai	r2,r6,3
    3ad4:	1080004c 	andi	r2,r2,1
    3ad8:	20802315 	stw	r2,140(r4)
        regs->reg_0x0022_txnrx1_pe = (value >> 2) & 0x1;
    3adc:	3005d0ba 	srai	r2,r6,2
    3ae0:	1080004c 	andi	r2,r2,1
    3ae4:	20802415 	stw	r2,144(r4)
        regs->reg_0x0022_fclk1_pe = (value >> 1) & 0x1;
    3ae8:	3005d07a 	srai	r2,r6,1
        regs->reg_0x0022_mclk1_pe = (value >> 0) & 0x1;
    3aec:	3180004c 	andi	r6,r6,1
    3af0:	21802615 	stw	r6,152(r4)
        regs->reg_0x0022_mclk2_pe = (value >> 6) & 0x1;
        regs->reg_0x0022_diq1_ds = (value >> 5) & 0x1;
        regs->reg_0x0022_diq1_pe = (value >> 4) & 0x1;
        regs->reg_0x0022_iq_sel_en_1_pe = (value >> 3) & 0x1;
        regs->reg_0x0022_txnrx1_pe = (value >> 2) & 0x1;
        regs->reg_0x0022_fclk1_pe = (value >> 1) & 0x1;
    3af4:	1080004c 	andi	r2,r2,1
    3af8:	20802515 	stw	r2,148(r4)
        regs->reg_0x0022_mclk1_pe = (value >> 0) & 0x1;
        return;
    3afc:	f800283a 	ret
    }
    if (addr == 0x0023)
    3b00:	008008c4 	movi	r2,35
    3b04:	28802d1e 	bne	r5,r2,3bbc <LMS7002M_regs_set+0x2a8>
    {
        regs->reg_0x0023_diqdirctr2 = (value >> 15) & 0x1;
    3b08:	3005d3fa 	srai	r2,r6,15
    3b0c:	1080004c 	andi	r2,r2,1
    3b10:	20802715 	stw	r2,156(r4)
        regs->reg_0x0023_diqdir2 = (value >> 14) & 0x1;
    3b14:	3005d3ba 	srai	r2,r6,14
    3b18:	1080004c 	andi	r2,r2,1
    3b1c:	20802815 	stw	r2,160(r4)
        regs->reg_0x0023_diqdirctr1 = (value >> 13) & 0x1;
    3b20:	3005d37a 	srai	r2,r6,13
    3b24:	1080004c 	andi	r2,r2,1
    3b28:	20802915 	stw	r2,164(r4)
        regs->reg_0x0023_diqdir1 = (value >> 12) & 0x1;
    3b2c:	3005d33a 	srai	r2,r6,12
    3b30:	1080004c 	andi	r2,r2,1
    3b34:	20802a15 	stw	r2,168(r4)
        regs->reg_0x0023_enabledirctr2 = (value >> 11) & 0x1;
    3b38:	3005d2fa 	srai	r2,r6,11
    3b3c:	1080004c 	andi	r2,r2,1
    3b40:	20802b15 	stw	r2,172(r4)
        regs->reg_0x0023_enabledir2 = (value >> 10) & 0x1;
    3b44:	3005d2ba 	srai	r2,r6,10
    3b48:	1080004c 	andi	r2,r2,1
    3b4c:	20802c15 	stw	r2,176(r4)
        regs->reg_0x0023_enabledirctr1 = (value >> 9) & 0x1;
    3b50:	3005d27a 	srai	r2,r6,9
    3b54:	1080004c 	andi	r2,r2,1
    3b58:	20802d15 	stw	r2,180(r4)
        regs->reg_0x0023_enabledir1 = (value >> 8) & 0x1;
    3b5c:	3005d23a 	srai	r2,r6,8
    3b60:	1080004c 	andi	r2,r2,1
    3b64:	20802e15 	stw	r2,184(r4)
        regs->reg_0x0023_mod_en = (value >> 6) & 0x1;
    3b68:	3005d1ba 	srai	r2,r6,6
    3b6c:	1080004c 	andi	r2,r2,1
    3b70:	20802f15 	stw	r2,188(r4)
        regs->reg_0x0023_lml2_fidm = (value >> 5) & 0x1;
    3b74:	3005d17a 	srai	r2,r6,5
    3b78:	1080004c 	andi	r2,r2,1
    3b7c:	20803015 	stw	r2,192(r4)
        regs->reg_0x0023_lml2_rxntxiq = (value >> 4) & 0x1;
    3b80:	3005d13a 	srai	r2,r6,4
    3b84:	1080004c 	andi	r2,r2,1
    3b88:	20803115 	stw	r2,196(r4)
        regs->reg_0x0023_lml2_mode = (value >> 3) & 0x1;
    3b8c:	3005d0fa 	srai	r2,r6,3
    3b90:	1080004c 	andi	r2,r2,1
    3b94:	20803215 	stw	r2,200(r4)
        regs->reg_0x0023_lml1_fidm = (value >> 2) & 0x1;
    3b98:	3005d0ba 	srai	r2,r6,2
    3b9c:	1080004c 	andi	r2,r2,1
    3ba0:	20803315 	stw	r2,204(r4)
        regs->reg_0x0023_lml1_rxntxiq = (value >> 1) & 0x1;
    3ba4:	3005d07a 	srai	r2,r6,1
        regs->reg_0x0023_lml1_mode = (value >> 0) & 0x1;
    3ba8:	3180004c 	andi	r6,r6,1
    3bac:	21803515 	stw	r6,212(r4)
        regs->reg_0x0023_mod_en = (value >> 6) & 0x1;
        regs->reg_0x0023_lml2_fidm = (value >> 5) & 0x1;
        regs->reg_0x0023_lml2_rxntxiq = (value >> 4) & 0x1;
        regs->reg_0x0023_lml2_mode = (value >> 3) & 0x1;
        regs->reg_0x0023_lml1_fidm = (value >> 2) & 0x1;
        regs->reg_0x0023_lml1_rxntxiq = (value >> 1) & 0x1;
    3bb0:	1080004c 	andi	r2,r2,1
    3bb4:	20803415 	stw	r2,208(r4)
        regs->reg_0x0023_lml1_mode = (value >> 0) & 0x1;
        return;
    3bb8:	f800283a 	ret
    }
    if (addr == 0x0024)
    3bbc:	00800904 	movi	r2,36
    3bc0:	2880181e 	bne	r5,r2,3c24 <LMS7002M_regs_set+0x310>
    {
        regs->reg_0x0024_lml1_s3s = (value >> 14) & 0x3;
    3bc4:	3005d3ba 	srai	r2,r6,14
    3bc8:	108000cc 	andi	r2,r2,3
    3bcc:	20803615 	stw	r2,216(r4)
        regs->reg_0x0024_lml1_s2s = (value >> 12) & 0x3;
    3bd0:	3005d33a 	srai	r2,r6,12
    3bd4:	108000cc 	andi	r2,r2,3
    3bd8:	20803715 	stw	r2,220(r4)
        regs->reg_0x0024_lml1_s1s = (value >> 10) & 0x3;
    3bdc:	3005d2ba 	srai	r2,r6,10
    3be0:	108000cc 	andi	r2,r2,3
    3be4:	20803815 	stw	r2,224(r4)
        regs->reg_0x0024_lml1_s0s = (value >> 8) & 0x3;
    3be8:	3005d23a 	srai	r2,r6,8
    3bec:	108000cc 	andi	r2,r2,3
    3bf0:	20803915 	stw	r2,228(r4)
        regs->reg_0x0024_lml1_bqp = (value >> 6) & 0x3;
    3bf4:	3005d1ba 	srai	r2,r6,6
    3bf8:	108000cc 	andi	r2,r2,3
    3bfc:	20803a15 	stw	r2,232(r4)
        regs->reg_0x0024_lml1_bip = (value >> 4) & 0x3;
    3c00:	3005d13a 	srai	r2,r6,4
    3c04:	108000cc 	andi	r2,r2,3
    3c08:	20803b15 	stw	r2,236(r4)
        regs->reg_0x0024_lml1_aqp = (value >> 2) & 0x3;
    3c0c:	3005d0ba 	srai	r2,r6,2
        regs->reg_0x0024_lml1_aip = (value >> 0) & 0x3;
    3c10:	318000cc 	andi	r6,r6,3
    3c14:	21803d15 	stw	r6,244(r4)
        regs->reg_0x0024_lml1_s2s = (value >> 12) & 0x3;
        regs->reg_0x0024_lml1_s1s = (value >> 10) & 0x3;
        regs->reg_0x0024_lml1_s0s = (value >> 8) & 0x3;
        regs->reg_0x0024_lml1_bqp = (value >> 6) & 0x3;
        regs->reg_0x0024_lml1_bip = (value >> 4) & 0x3;
        regs->reg_0x0024_lml1_aqp = (value >> 2) & 0x3;
    3c18:	108000cc 	andi	r2,r2,3
    3c1c:	20803c15 	stw	r2,240(r4)
        regs->reg_0x0024_lml1_aip = (value >> 0) & 0x3;
        return;
    3c20:	f800283a 	ret
    }
    if (addr == 0x0025)
    3c24:	00800944 	movi	r2,37
    3c28:	2880031e 	bne	r5,r2,3c38 <LMS7002M_regs_set+0x324>
    {
        regs->reg_0x0025_value = (value >> 0) & 0xffff;
    3c2c:	31bfffcc 	andi	r6,r6,65535
    3c30:	21803e15 	stw	r6,248(r4)
        return;
    3c34:	f800283a 	ret
    }
    if (addr == 0x0026)
    3c38:	00800984 	movi	r2,38
    3c3c:	2880031e 	bne	r5,r2,3c4c <LMS7002M_regs_set+0x338>
    {
        regs->reg_0x0026_value = (value >> 0) & 0xffff;
    3c40:	31bfffcc 	andi	r6,r6,65535
    3c44:	21803f15 	stw	r6,252(r4)
        return;
    3c48:	f800283a 	ret
    }
    if (addr == 0x0027)
    3c4c:	008009c4 	movi	r2,39
    3c50:	2880181e 	bne	r5,r2,3cb4 <LMS7002M_regs_set+0x3a0>
    {
        regs->reg_0x0027_lml2_s3s = (value >> 14) & 0x3;
    3c54:	3005d3ba 	srai	r2,r6,14
    3c58:	108000cc 	andi	r2,r2,3
    3c5c:	20804015 	stw	r2,256(r4)
        regs->reg_0x0027_lml2_s2s = (value >> 12) & 0x3;
    3c60:	3005d33a 	srai	r2,r6,12
    3c64:	108000cc 	andi	r2,r2,3
    3c68:	20804115 	stw	r2,260(r4)
        regs->reg_0x0027_lml2_s1s = (value >> 10) & 0x3;
    3c6c:	3005d2ba 	srai	r2,r6,10
    3c70:	108000cc 	andi	r2,r2,3
    3c74:	20804215 	stw	r2,264(r4)
        regs->reg_0x0027_lml2_s0s = (value >> 8) & 0x3;
    3c78:	3005d23a 	srai	r2,r6,8
    3c7c:	108000cc 	andi	r2,r2,3
    3c80:	20804315 	stw	r2,268(r4)
        regs->reg_0x0027_lml2_bqp = (value >> 6) & 0x3;
    3c84:	3005d1ba 	srai	r2,r6,6
    3c88:	108000cc 	andi	r2,r2,3
    3c8c:	20804415 	stw	r2,272(r4)
        regs->reg_0x0027_lml2_bip = (value >> 4) & 0x3;
    3c90:	3005d13a 	srai	r2,r6,4
    3c94:	108000cc 	andi	r2,r2,3
    3c98:	20804515 	stw	r2,276(r4)
        regs->reg_0x0027_lml2_aqp = (value >> 2) & 0x3;
    3c9c:	3005d0ba 	srai	r2,r6,2
        regs->reg_0x0027_lml2_aip = (value >> 0) & 0x3;
    3ca0:	318000cc 	andi	r6,r6,3
    3ca4:	21804715 	stw	r6,284(r4)
        regs->reg_0x0027_lml2_s2s = (value >> 12) & 0x3;
        regs->reg_0x0027_lml2_s1s = (value >> 10) & 0x3;
        regs->reg_0x0027_lml2_s0s = (value >> 8) & 0x3;
        regs->reg_0x0027_lml2_bqp = (value >> 6) & 0x3;
        regs->reg_0x0027_lml2_bip = (value >> 4) & 0x3;
        regs->reg_0x0027_lml2_aqp = (value >> 2) & 0x3;
    3ca8:	108000cc 	andi	r2,r2,3
    3cac:	20804615 	stw	r2,280(r4)
        regs->reg_0x0027_lml2_aip = (value >> 0) & 0x3;
        return;
    3cb0:	f800283a 	ret
    }
    if (addr == 0x0028)
    3cb4:	00800a04 	movi	r2,40
    3cb8:	2880031e 	bne	r5,r2,3cc8 <LMS7002M_regs_set+0x3b4>
    {
        regs->reg_0x0028_value = (value >> 0) & 0xffff;
    3cbc:	31bfffcc 	andi	r6,r6,65535
    3cc0:	21804815 	stw	r6,288(r4)
        return;
    3cc4:	f800283a 	ret
    }
    if (addr == 0x0029)
    3cc8:	00800a44 	movi	r2,41
    3ccc:	2880031e 	bne	r5,r2,3cdc <LMS7002M_regs_set+0x3c8>
    {
        regs->reg_0x0029_value = (value >> 0) & 0xffff;
    3cd0:	31bfffcc 	andi	r6,r6,65535
    3cd4:	21804915 	stw	r6,292(r4)
        return;
    3cd8:	f800283a 	ret
    }
    if (addr == 0x002A)
    3cdc:	00800a84 	movi	r2,42
    3ce0:	2880121e 	bne	r5,r2,3d2c <LMS7002M_regs_set+0x418>
    {
        regs->reg_0x002a_rx_mux = (value >> 10) & 0x3;
    3ce4:	3005d2ba 	srai	r2,r6,10
    3ce8:	108000cc 	andi	r2,r2,3
    3cec:	20804a15 	stw	r2,296(r4)
        regs->reg_0x002a_tx_mux = (value >> 8) & 0x3;
    3cf0:	3005d23a 	srai	r2,r6,8
    3cf4:	108000cc 	andi	r2,r2,3
    3cf8:	20804b15 	stw	r2,300(r4)
        regs->reg_0x002a_txrdclk_mux = (value >> 6) & 0x3;
    3cfc:	3005d1ba 	srai	r2,r6,6
    3d00:	108000cc 	andi	r2,r2,3
    3d04:	20804c15 	stw	r2,304(r4)
        regs->reg_0x002a_txwrclk_mux = (value >> 4) & 0x3;
    3d08:	3005d13a 	srai	r2,r6,4
    3d0c:	108000cc 	andi	r2,r2,3
    3d10:	20804d15 	stw	r2,308(r4)
        regs->reg_0x002a_rxrdclk_mux = (value >> 2) & 0x3;
    3d14:	3005d0ba 	srai	r2,r6,2
        regs->reg_0x002a_rxwrclk_mux = (value >> 0) & 0x3;
    3d18:	318000cc 	andi	r6,r6,3
    3d1c:	21804f15 	stw	r6,316(r4)
    {
        regs->reg_0x002a_rx_mux = (value >> 10) & 0x3;
        regs->reg_0x002a_tx_mux = (value >> 8) & 0x3;
        regs->reg_0x002a_txrdclk_mux = (value >> 6) & 0x3;
        regs->reg_0x002a_txwrclk_mux = (value >> 4) & 0x3;
        regs->reg_0x002a_rxrdclk_mux = (value >> 2) & 0x3;
    3d20:	108000cc 	andi	r2,r2,3
    3d24:	20804e15 	stw	r2,312(r4)
        regs->reg_0x002a_rxwrclk_mux = (value >> 0) & 0x3;
        return;
    3d28:	f800283a 	ret
    }
    if (addr == 0x002B)
    3d2c:	00800ac4 	movi	r2,43
    3d30:	2880121e 	bne	r5,r2,3d7c <LMS7002M_regs_set+0x468>
    {
        regs->reg_0x002b_fclk2_inv = (value >> 15) & 0x1;
    3d34:	3005d3fa 	srai	r2,r6,15
    3d38:	1080004c 	andi	r2,r2,1
    3d3c:	20805015 	stw	r2,320(r4)
        regs->reg_0x002b_fclk1_inv = (value >> 14) & 0x1;
    3d40:	3005d3ba 	srai	r2,r6,14
    3d44:	1080004c 	andi	r2,r2,1
    3d48:	20805115 	stw	r2,324(r4)
        regs->reg_0x002b_mclk2src = (value >> 4) & 0x3;
    3d4c:	3005d13a 	srai	r2,r6,4
    3d50:	108000cc 	andi	r2,r2,3
    3d54:	20805215 	stw	r2,328(r4)
        regs->reg_0x002b_mclk1src = (value >> 2) & 0x3;
    3d58:	3005d0ba 	srai	r2,r6,2
    3d5c:	108000cc 	andi	r2,r2,3
    3d60:	20805315 	stw	r2,332(r4)
        regs->reg_0x002b_txdiven = (value >> 1) & 0x1;
    3d64:	3005d07a 	srai	r2,r6,1
        regs->reg_0x002b_rxdiven = (value >> 0) & 0x1;
    3d68:	3180004c 	andi	r6,r6,1
    3d6c:	21805515 	stw	r6,340(r4)
    {
        regs->reg_0x002b_fclk2_inv = (value >> 15) & 0x1;
        regs->reg_0x002b_fclk1_inv = (value >> 14) & 0x1;
        regs->reg_0x002b_mclk2src = (value >> 4) & 0x3;
        regs->reg_0x002b_mclk1src = (value >> 2) & 0x3;
        regs->reg_0x002b_txdiven = (value >> 1) & 0x1;
    3d70:	1080004c 	andi	r2,r2,1
    3d74:	20805415 	stw	r2,336(r4)
        regs->reg_0x002b_rxdiven = (value >> 0) & 0x1;
        return;
    3d78:	f800283a 	ret
    }
    if (addr == 0x002C)
    3d7c:	00800b04 	movi	r2,44
    3d80:	2880061e 	bne	r5,r2,3d9c <LMS7002M_regs_set+0x488>
    {
        regs->reg_0x002c_txtspclk_div = (value >> 8) & 0xff;
    3d84:	3005d23a 	srai	r2,r6,8
        regs->reg_0x002c_rxtspclk_div = (value >> 0) & 0xff;
    3d88:	31803fcc 	andi	r6,r6,255
    3d8c:	21805715 	stw	r6,348(r4)
        regs->reg_0x002b_rxdiven = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x002C)
    {
        regs->reg_0x002c_txtspclk_div = (value >> 8) & 0xff;
    3d90:	10803fcc 	andi	r2,r2,255
    3d94:	20805615 	stw	r2,344(r4)
        regs->reg_0x002c_rxtspclk_div = (value >> 0) & 0xff;
        return;
    3d98:	f800283a 	ret
    }
    if (addr == 0x002E)
    3d9c:	00800b84 	movi	r2,46
    3da0:	2880041e 	bne	r5,r2,3db4 <LMS7002M_regs_set+0x4a0>
    {
        regs->reg_0x002e_mimo_siso = (value >> 15) & 0x1;
    3da4:	300dd3fa 	srai	r6,r6,15
    3da8:	3180004c 	andi	r6,r6,1
    3dac:	21805815 	stw	r6,352(r4)
        return;
    3db0:	f800283a 	ret
    }
    if (addr == 0x002F)
    3db4:	00800bc4 	movi	r2,47
    3db8:	2880091e 	bne	r5,r2,3de0 <LMS7002M_regs_set+0x4cc>
    {
        regs->reg_0x002f_ver = (value >> 11) & 0x1f;
    3dbc:	3005d2fa 	srai	r2,r6,11
    3dc0:	108007cc 	andi	r2,r2,31
    3dc4:	20805915 	stw	r2,356(r4)
        regs->reg_0x002f_rev = (value >> 6) & 0x1f;
    3dc8:	3005d1ba 	srai	r2,r6,6
        regs->reg_0x002f_mask = (value >> 0) & 0x3f;
    3dcc:	31800fcc 	andi	r6,r6,63
    3dd0:	21805b15 	stw	r6,364(r4)
        return;
    }
    if (addr == 0x002F)
    {
        regs->reg_0x002f_ver = (value >> 11) & 0x1f;
        regs->reg_0x002f_rev = (value >> 6) & 0x1f;
    3dd4:	108007cc 	andi	r2,r2,31
    3dd8:	20805a15 	stw	r2,360(r4)
        regs->reg_0x002f_mask = (value >> 0) & 0x3f;
        return;
    3ddc:	f800283a 	ret
    }
    if (addr == 0x0081)
    3de0:	00802044 	movi	r2,129
    3de4:	28800c1e 	bne	r5,r2,3e18 <LMS7002M_regs_set+0x504>
    {
        regs->reg_0x0081_en_dir_ldo = (value >> 3) & 0x1;
    3de8:	3005d0fa 	srai	r2,r6,3
    3dec:	1080004c 	andi	r2,r2,1
    3df0:	20805c15 	stw	r2,368(r4)
        regs->reg_0x0081_en_dir_cgen = (value >> 2) & 0x1;
    3df4:	3005d0ba 	srai	r2,r6,2
    3df8:	1080004c 	andi	r2,r2,1
    3dfc:	20805d15 	stw	r2,372(r4)
        regs->reg_0x0081_en_dir_xbuf = (value >> 1) & 0x1;
    3e00:	3005d07a 	srai	r2,r6,1
        regs->reg_0x0081_en_dir_afe = (value >> 0) & 0x1;
    3e04:	3180004c 	andi	r6,r6,1
    3e08:	21805f15 	stw	r6,380(r4)
    }
    if (addr == 0x0081)
    {
        regs->reg_0x0081_en_dir_ldo = (value >> 3) & 0x1;
        regs->reg_0x0081_en_dir_cgen = (value >> 2) & 0x1;
        regs->reg_0x0081_en_dir_xbuf = (value >> 1) & 0x1;
    3e0c:	1080004c 	andi	r2,r2,1
    3e10:	20805e15 	stw	r2,376(r4)
        regs->reg_0x0081_en_dir_afe = (value >> 0) & 0x1;
        return;
    3e14:	f800283a 	ret
    }
    if (addr == 0x0082)
    3e18:	00802084 	movi	r2,130
    3e1c:	28801e1e 	bne	r5,r2,3e98 <LMS7002M_regs_set+0x584>
    {
        regs->reg_0x0082_isel_dac_afe = (value >> 13) & 0x7;
    3e20:	3005d37a 	srai	r2,r6,13
    3e24:	108001cc 	andi	r2,r2,7
    3e28:	20806015 	stw	r2,384(r4)
        regs->reg_0x0082_mode_interleave_afe = (value >> 12) & 0x1;
    3e2c:	3005d33a 	srai	r2,r6,12
    3e30:	1080004c 	andi	r2,r2,1
    3e34:	20806115 	stw	r2,388(r4)
        regs->reg_0x0082_mux_afe_1 = (value >> 10) & 0x3;
    3e38:	3005d2ba 	srai	r2,r6,10
    3e3c:	108000cc 	andi	r2,r2,3
    3e40:	20806215 	stw	r2,392(r4)
        regs->reg_0x0082_mux_afe_2 = (value >> 8) & 0x3;
    3e44:	3005d23a 	srai	r2,r6,8
    3e48:	108000cc 	andi	r2,r2,3
    3e4c:	20806315 	stw	r2,396(r4)
        regs->reg_0x0082_pd_afe = (value >> 5) & 0x1;
    3e50:	3005d17a 	srai	r2,r6,5
    3e54:	1080004c 	andi	r2,r2,1
    3e58:	20806415 	stw	r2,400(r4)
        regs->reg_0x0082_pd_rx_afe1 = (value >> 4) & 0x1;
    3e5c:	3005d13a 	srai	r2,r6,4
    3e60:	1080004c 	andi	r2,r2,1
    3e64:	20806515 	stw	r2,404(r4)
        regs->reg_0x0082_pd_rx_afe2 = (value >> 3) & 0x1;
    3e68:	3005d0fa 	srai	r2,r6,3
    3e6c:	1080004c 	andi	r2,r2,1
    3e70:	20806615 	stw	r2,408(r4)
        regs->reg_0x0082_pd_tx_afe1 = (value >> 2) & 0x1;
    3e74:	3005d0ba 	srai	r2,r6,2
    3e78:	1080004c 	andi	r2,r2,1
    3e7c:	20806715 	stw	r2,412(r4)
        regs->reg_0x0082_pd_tx_afe2 = (value >> 1) & 0x1;
    3e80:	3005d07a 	srai	r2,r6,1
        regs->reg_0x0082_en_g_afe = (value >> 0) & 0x1;
    3e84:	3180004c 	andi	r6,r6,1
    3e88:	21806915 	stw	r6,420(r4)
        regs->reg_0x0082_mux_afe_2 = (value >> 8) & 0x3;
        regs->reg_0x0082_pd_afe = (value >> 5) & 0x1;
        regs->reg_0x0082_pd_rx_afe1 = (value >> 4) & 0x1;
        regs->reg_0x0082_pd_rx_afe2 = (value >> 3) & 0x1;
        regs->reg_0x0082_pd_tx_afe1 = (value >> 2) & 0x1;
        regs->reg_0x0082_pd_tx_afe2 = (value >> 1) & 0x1;
    3e8c:	1080004c 	andi	r2,r2,1
    3e90:	20806815 	stw	r2,416(r4)
        regs->reg_0x0082_en_g_afe = (value >> 0) & 0x1;
        return;
    3e94:	f800283a 	ret
    }
    if (addr == 0x0084)
    3e98:	00802104 	movi	r2,132
    3e9c:	2880151e 	bne	r5,r2,3ef4 <LMS7002M_regs_set+0x5e0>
    {
        regs->reg_0x0084_mux_bias_out = (value >> 11) & 0x3;
    3ea0:	3005d2fa 	srai	r2,r6,11
    3ea4:	108000cc 	andi	r2,r2,3
    3ea8:	20806a15 	stw	r2,424(r4)
        regs->reg_0x0084_rp_calib_bias = (value >> 6) & 0x1f;
    3eac:	3005d1ba 	srai	r2,r6,6
    3eb0:	108007cc 	andi	r2,r2,31
    3eb4:	20806b15 	stw	r2,428(r4)
        regs->reg_0x0084_pd_frp_bias = (value >> 4) & 0x1;
    3eb8:	3005d13a 	srai	r2,r6,4
    3ebc:	1080004c 	andi	r2,r2,1
    3ec0:	20806c15 	stw	r2,432(r4)
        regs->reg_0x0084_pd_f_bias = (value >> 3) & 0x1;
    3ec4:	3005d0fa 	srai	r2,r6,3
    3ec8:	1080004c 	andi	r2,r2,1
    3ecc:	20806d15 	stw	r2,436(r4)
        regs->reg_0x0084_pd_ptrp_bias = (value >> 2) & 0x1;
    3ed0:	3005d0ba 	srai	r2,r6,2
    3ed4:	1080004c 	andi	r2,r2,1
    3ed8:	20806e15 	stw	r2,440(r4)
        regs->reg_0x0084_pd_pt_bias = (value >> 1) & 0x1;
    3edc:	3005d07a 	srai	r2,r6,1
        regs->reg_0x0084_pd_bias_master = (value >> 0) & 0x1;
    3ee0:	3180004c 	andi	r6,r6,1
    3ee4:	21807015 	stw	r6,448(r4)
        regs->reg_0x0084_mux_bias_out = (value >> 11) & 0x3;
        regs->reg_0x0084_rp_calib_bias = (value >> 6) & 0x1f;
        regs->reg_0x0084_pd_frp_bias = (value >> 4) & 0x1;
        regs->reg_0x0084_pd_f_bias = (value >> 3) & 0x1;
        regs->reg_0x0084_pd_ptrp_bias = (value >> 2) & 0x1;
        regs->reg_0x0084_pd_pt_bias = (value >> 1) & 0x1;
    3ee8:	1080004c 	andi	r2,r2,1
    3eec:	20806f15 	stw	r2,444(r4)
        regs->reg_0x0084_pd_bias_master = (value >> 0) & 0x1;
        return;
    3ef0:	f800283a 	ret
    }
    if (addr == 0x0085)
    3ef4:	00802144 	movi	r2,133
    3ef8:	28801b1e 	bne	r5,r2,3f68 <LMS7002M_regs_set+0x654>
    {
        regs->reg_0x0085_slfb_xbuf_rx = (value >> 8) & 0x1;
    3efc:	3005d23a 	srai	r2,r6,8
    3f00:	1080004c 	andi	r2,r2,1
    3f04:	20807115 	stw	r2,452(r4)
        regs->reg_0x0085_slfb_xbuf_tx = (value >> 7) & 0x1;
    3f08:	3005d1fa 	srai	r2,r6,7
    3f0c:	1080004c 	andi	r2,r2,1
    3f10:	20807215 	stw	r2,456(r4)
        regs->reg_0x0085_byp_xbuf_rx = (value >> 6) & 0x1;
    3f14:	3005d1ba 	srai	r2,r6,6
    3f18:	1080004c 	andi	r2,r2,1
    3f1c:	20807315 	stw	r2,460(r4)
        regs->reg_0x0085_byp_xbuf_tx = (value >> 5) & 0x1;
    3f20:	3005d17a 	srai	r2,r6,5
    3f24:	1080004c 	andi	r2,r2,1
    3f28:	20807415 	stw	r2,464(r4)
        regs->reg_0x0085_en_out2_xbuf_tx = (value >> 4) & 0x1;
    3f2c:	3005d13a 	srai	r2,r6,4
    3f30:	1080004c 	andi	r2,r2,1
    3f34:	20807515 	stw	r2,468(r4)
        regs->reg_0x0085_en_tbufin_xbuf_rx = (value >> 3) & 0x1;
    3f38:	3005d0fa 	srai	r2,r6,3
    3f3c:	1080004c 	andi	r2,r2,1
    3f40:	20807615 	stw	r2,472(r4)
        regs->reg_0x0085_pd_xbuf_rx = (value >> 2) & 0x1;
    3f44:	3005d0ba 	srai	r2,r6,2
    3f48:	1080004c 	andi	r2,r2,1
    3f4c:	20807715 	stw	r2,476(r4)
        regs->reg_0x0085_pd_xbuf_tx = (value >> 1) & 0x1;
    3f50:	3005d07a 	srai	r2,r6,1
        regs->reg_0x0085_en_g_xbuf = (value >> 0) & 0x1;
    3f54:	3180004c 	andi	r6,r6,1
    3f58:	21807915 	stw	r6,484(r4)
        regs->reg_0x0085_byp_xbuf_rx = (value >> 6) & 0x1;
        regs->reg_0x0085_byp_xbuf_tx = (value >> 5) & 0x1;
        regs->reg_0x0085_en_out2_xbuf_tx = (value >> 4) & 0x1;
        regs->reg_0x0085_en_tbufin_xbuf_rx = (value >> 3) & 0x1;
        regs->reg_0x0085_pd_xbuf_rx = (value >> 2) & 0x1;
        regs->reg_0x0085_pd_xbuf_tx = (value >> 1) & 0x1;
    3f5c:	1080004c 	andi	r2,r2,1
    3f60:	20807815 	stw	r2,480(r4)
        regs->reg_0x0085_en_g_xbuf = (value >> 0) & 0x1;
        return;
    3f64:	f800283a 	ret
    }
    if (addr == 0x0086)
    3f68:	00802184 	movi	r2,134
    3f6c:	2880271e 	bne	r5,r2,400c <LMS7002M_regs_set+0x6f8>
    {
        regs->reg_0x0086_spdup_vco_cgen = (value >> 15) & 0x1;
    3f70:	3005d3fa 	srai	r2,r6,15
    3f74:	1080004c 	andi	r2,r2,1
    3f78:	20807a15 	stw	r2,488(r4)
        regs->reg_0x0086_reset_n_cgen = (value >> 14) & 0x1;
    3f7c:	3005d3ba 	srai	r2,r6,14
    3f80:	1080004c 	andi	r2,r2,1
    3f84:	20807b15 	stw	r2,492(r4)
        regs->reg_0x0086_en_adcclkh_clkgn = (value >> 11) & 0x1;
    3f88:	3005d2fa 	srai	r2,r6,11
    3f8c:	1080004c 	andi	r2,r2,1
    3f90:	20807c15 	stw	r2,496(r4)
        regs->reg_0x0086_en_coarse_cklgen = (value >> 10) & 0x1;
    3f94:	3005d2ba 	srai	r2,r6,10
    3f98:	1080004c 	andi	r2,r2,1
    3f9c:	20807d15 	stw	r2,500(r4)
        regs->reg_0x0086_en_intonly_sdm_cgen = (value >> 9) & 0x1;
    3fa0:	3005d27a 	srai	r2,r6,9
    3fa4:	1080004c 	andi	r2,r2,1
    3fa8:	20807e15 	stw	r2,504(r4)
        regs->reg_0x0086_en_sdm_clk_cgen = (value >> 8) & 0x1;
    3fac:	3005d23a 	srai	r2,r6,8
    3fb0:	1080004c 	andi	r2,r2,1
    3fb4:	20807f15 	stw	r2,508(r4)
        regs->reg_0x0086_pd_cp_cgen = (value >> 6) & 0x1;
    3fb8:	3005d1ba 	srai	r2,r6,6
    3fbc:	1080004c 	andi	r2,r2,1
    3fc0:	20808015 	stw	r2,512(r4)
        regs->reg_0x0086_pd_fdiv_fb_cgen = (value >> 5) & 0x1;
    3fc4:	3005d17a 	srai	r2,r6,5
    3fc8:	1080004c 	andi	r2,r2,1
    3fcc:	20808115 	stw	r2,516(r4)
        regs->reg_0x0086_pd_fdiv_o_cgen = (value >> 4) & 0x1;
    3fd0:	3005d13a 	srai	r2,r6,4
    3fd4:	1080004c 	andi	r2,r2,1
    3fd8:	20808215 	stw	r2,520(r4)
        regs->reg_0x0086_pd_sdm_cgen = (value >> 3) & 0x1;
    3fdc:	3005d0fa 	srai	r2,r6,3
    3fe0:	1080004c 	andi	r2,r2,1
    3fe4:	20808315 	stw	r2,524(r4)
        regs->reg_0x0086_pd_vco_cgen = (value >> 2) & 0x1;
    3fe8:	3005d0ba 	srai	r2,r6,2
    3fec:	1080004c 	andi	r2,r2,1
    3ff0:	20808415 	stw	r2,528(r4)
        regs->reg_0x0086_pd_vco_comp_cgen = (value >> 1) & 0x1;
    3ff4:	3005d07a 	srai	r2,r6,1
        regs->reg_0x0086_en_g_cgen = (value >> 0) & 0x1;
    3ff8:	3180004c 	andi	r6,r6,1
    3ffc:	21808615 	stw	r6,536(r4)
        regs->reg_0x0086_pd_cp_cgen = (value >> 6) & 0x1;
        regs->reg_0x0086_pd_fdiv_fb_cgen = (value >> 5) & 0x1;
        regs->reg_0x0086_pd_fdiv_o_cgen = (value >> 4) & 0x1;
        regs->reg_0x0086_pd_sdm_cgen = (value >> 3) & 0x1;
        regs->reg_0x0086_pd_vco_cgen = (value >> 2) & 0x1;
        regs->reg_0x0086_pd_vco_comp_cgen = (value >> 1) & 0x1;
    4000:	1080004c 	andi	r2,r2,1
    4004:	20808515 	stw	r2,532(r4)
    4008:	f800283a 	ret
        regs->reg_0x0086_en_g_cgen = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0087)
    400c:	008021c4 	movi	r2,135
    4010:	2880031e 	bne	r5,r2,4020 <LMS7002M_regs_set+0x70c>
    {
        regs->reg_0x0087_frac_sdm_cgen = (value >> 0) & 0xffff;
    4014:	31bfffcc 	andi	r6,r6,65535
    4018:	21808715 	stw	r6,540(r4)
    401c:	f800283a 	ret
        return;
    }
    if (addr == 0x0088)
    4020:	00802204 	movi	r2,136
    4024:	2880061e 	bne	r5,r2,4040 <LMS7002M_regs_set+0x72c>
    {
        regs->reg_0x0088_int_sdm_cgen = (value >> 4) & 0x3ff;
    4028:	3005d13a 	srai	r2,r6,4
        regs->reg_0x0088_frac_sdm_cgen = (value >> 0) & 0xf;
    402c:	318003cc 	andi	r6,r6,15
    4030:	21808915 	stw	r6,548(r4)
        regs->reg_0x0087_frac_sdm_cgen = (value >> 0) & 0xffff;
        return;
    }
    if (addr == 0x0088)
    {
        regs->reg_0x0088_int_sdm_cgen = (value >> 4) & 0x3ff;
    4034:	1080ffcc 	andi	r2,r2,1023
    4038:	20808815 	stw	r2,544(r4)
    403c:	f800283a 	ret
        regs->reg_0x0088_frac_sdm_cgen = (value >> 0) & 0xf;
        return;
    }
    if (addr == 0x0089)
    4040:	00802244 	movi	r2,137
    4044:	2880121e 	bne	r5,r2,4090 <LMS7002M_regs_set+0x77c>
    {
        regs->reg_0x0089_rev_sdmclk_cgen = (value >> 15) & 0x1;
    4048:	3005d3fa 	srai	r2,r6,15
    404c:	1080004c 	andi	r2,r2,1
    4050:	20808a15 	stw	r2,552(r4)
        regs->reg_0x0089_sel_sdmclk_cgen = (value >> 14) & 0x1;
    4054:	3005d3ba 	srai	r2,r6,14
    4058:	1080004c 	andi	r2,r2,1
    405c:	20808b15 	stw	r2,556(r4)
        regs->reg_0x0089_sx_dither_en_cgen = (value >> 13) & 0x1;
    4060:	3005d37a 	srai	r2,r6,13
    4064:	1080004c 	andi	r2,r2,1
    4068:	20808c15 	stw	r2,560(r4)
        regs->reg_0x0089_clkh_ov_clkl_cgen = (value >> 11) & 0x3;
    406c:	3005d2fa 	srai	r2,r6,11
    4070:	108000cc 	andi	r2,r2,3
    4074:	20808d15 	stw	r2,564(r4)
        regs->reg_0x0089_div_outch_cgen = (value >> 3) & 0xff;
    4078:	3005d0fa 	srai	r2,r6,3
        regs->reg_0x0089_tst_cgen = (value >> 0) & 0x7;
    407c:	318001cc 	andi	r6,r6,7
    4080:	21808f15 	stw	r6,572(r4)
    {
        regs->reg_0x0089_rev_sdmclk_cgen = (value >> 15) & 0x1;
        regs->reg_0x0089_sel_sdmclk_cgen = (value >> 14) & 0x1;
        regs->reg_0x0089_sx_dither_en_cgen = (value >> 13) & 0x1;
        regs->reg_0x0089_clkh_ov_clkl_cgen = (value >> 11) & 0x3;
        regs->reg_0x0089_div_outch_cgen = (value >> 3) & 0xff;
    4084:	10803fcc 	andi	r2,r2,255
    4088:	20808e15 	stw	r2,568(r4)
    408c:	f800283a 	ret
        regs->reg_0x0089_tst_cgen = (value >> 0) & 0x7;
        return;
    }
    if (addr == 0x008A)
    4090:	00802284 	movi	r2,138
    4094:	28800f1e 	bne	r5,r2,40d4 <LMS7002M_regs_set+0x7c0>
    {
        regs->reg_0x008a_rev_clkdac_cgen = (value >> 14) & 0x1;
    4098:	3005d3ba 	srai	r2,r6,14
    409c:	1080004c 	andi	r2,r2,1
    40a0:	20809015 	stw	r2,576(r4)
        regs->reg_0x008a_rev_clkadc_cgen = (value >> 13) & 0x1;
    40a4:	3005d37a 	srai	r2,r6,13
    40a8:	1080004c 	andi	r2,r2,1
    40ac:	20809115 	stw	r2,580(r4)
        regs->reg_0x008a_revph_pfd_cgen = (value >> 12) & 0x1;
    40b0:	3005d33a 	srai	r2,r6,12
    40b4:	1080004c 	andi	r2,r2,1
    40b8:	20809215 	stw	r2,584(r4)
        regs->reg_0x008a_ioffset_cp_cgen = (value >> 6) & 0x3f;
    40bc:	3005d1ba 	srai	r2,r6,6
        regs->reg_0x008a_ipulse_cp_cgen = (value >> 0) & 0x3f;
    40c0:	31800fcc 	andi	r6,r6,63
    40c4:	21809415 	stw	r6,592(r4)
    if (addr == 0x008A)
    {
        regs->reg_0x008a_rev_clkdac_cgen = (value >> 14) & 0x1;
        regs->reg_0x008a_rev_clkadc_cgen = (value >> 13) & 0x1;
        regs->reg_0x008a_revph_pfd_cgen = (value >> 12) & 0x1;
        regs->reg_0x008a_ioffset_cp_cgen = (value >> 6) & 0x3f;
    40c8:	10800fcc 	andi	r2,r2,63
    40cc:	20809315 	stw	r2,588(r4)
    40d0:	f800283a 	ret
        regs->reg_0x008a_ipulse_cp_cgen = (value >> 0) & 0x3f;
        return;
    }
    if (addr == 0x008B)
    40d4:	008022c4 	movi	r2,139
    40d8:	2880091e 	bne	r5,r2,4100 <LMS7002M_regs_set+0x7ec>
    {
        regs->reg_0x008b_ict_vco_cgen = (value >> 9) & 0x1f;
    40dc:	3005d27a 	srai	r2,r6,9
    40e0:	108007cc 	andi	r2,r2,31
    40e4:	20809515 	stw	r2,596(r4)
        regs->reg_0x008b_csw_vco_cgen = (value >> 1) & 0xff;
    40e8:	3005d07a 	srai	r2,r6,1
        regs->reg_0x008b_coarse_start_cgen = (value >> 0) & 0x1;
    40ec:	3180004c 	andi	r6,r6,1
    40f0:	21809715 	stw	r6,604(r4)
        return;
    }
    if (addr == 0x008B)
    {
        regs->reg_0x008b_ict_vco_cgen = (value >> 9) & 0x1f;
        regs->reg_0x008b_csw_vco_cgen = (value >> 1) & 0xff;
    40f4:	10803fcc 	andi	r2,r2,255
    40f8:	20809615 	stw	r2,600(r4)
    40fc:	f800283a 	ret
        regs->reg_0x008b_coarse_start_cgen = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x008C)
    4100:	00802304 	movi	r2,140
    4104:	2880151e 	bne	r5,r2,415c <LMS7002M_regs_set+0x848>
    {
        regs->reg_0x008c_coarse_stepdone_cgen = (value >> 15) & 0x1;
    4108:	3005d3fa 	srai	r2,r6,15
    410c:	1080004c 	andi	r2,r2,1
    4110:	20809815 	stw	r2,608(r4)
        regs->reg_0x008c_coarsepll_compo_cgen = (value >> 14) & 0x1;
    4114:	3005d3ba 	srai	r2,r6,14
    4118:	1080004c 	andi	r2,r2,1
    411c:	20809915 	stw	r2,612(r4)
        regs->reg_0x008c_vco_cmpho_cgen = (value >> 13) & 0x1;
    4120:	3005d37a 	srai	r2,r6,13
    4124:	1080004c 	andi	r2,r2,1
    4128:	20809a15 	stw	r2,616(r4)
        regs->reg_0x008c_vco_cmplo_cgen = (value >> 12) & 0x1;
    412c:	3005d33a 	srai	r2,r6,12
    4130:	1080004c 	andi	r2,r2,1
    4134:	20809b15 	stw	r2,620(r4)
        regs->reg_0x008c_cp2_cgen = (value >> 8) & 0xf;
    4138:	3005d23a 	srai	r2,r6,8
    413c:	108003cc 	andi	r2,r2,15
    4140:	20809c15 	stw	r2,624(r4)
        regs->reg_0x008c_cp3_cgen = (value >> 4) & 0xf;
    4144:	3005d13a 	srai	r2,r6,4
        regs->reg_0x008c_cz_cgen = (value >> 0) & 0xf;
    4148:	318003cc 	andi	r6,r6,15
    414c:	21809e15 	stw	r6,632(r4)
        regs->reg_0x008c_coarse_stepdone_cgen = (value >> 15) & 0x1;
        regs->reg_0x008c_coarsepll_compo_cgen = (value >> 14) & 0x1;
        regs->reg_0x008c_vco_cmpho_cgen = (value >> 13) & 0x1;
        regs->reg_0x008c_vco_cmplo_cgen = (value >> 12) & 0x1;
        regs->reg_0x008c_cp2_cgen = (value >> 8) & 0xf;
        regs->reg_0x008c_cp3_cgen = (value >> 4) & 0xf;
    4150:	108003cc 	andi	r2,r2,15
    4154:	20809d15 	stw	r2,628(r4)
    4158:	f800283a 	ret
        regs->reg_0x008c_cz_cgen = (value >> 0) & 0xf;
        return;
    }
    if (addr == 0x008D)
    415c:	00802344 	movi	r2,141
    4160:	2880031e 	bne	r5,r2,4170 <LMS7002M_regs_set+0x85c>
    {
        regs->reg_0x008d_resrv_cgn = (value >> 0) & 0x7;
    4164:	318001cc 	andi	r6,r6,7
    4168:	21809f15 	stw	r6,636(r4)
    416c:	f800283a 	ret
        return;
    }
    if (addr == 0x0092)
    4170:	00802484 	movi	r2,146
    4174:	2880301e 	bne	r5,r2,4238 <LMS7002M_regs_set+0x924>
    {
        regs->reg_0x0092_en_ldo_dig = (value >> 15) & 0x1;
    4178:	3005d3fa 	srai	r2,r6,15
    417c:	1080004c 	andi	r2,r2,1
    4180:	2080a015 	stw	r2,640(r4)
        regs->reg_0x0092_en_ldo_diggn = (value >> 14) & 0x1;
    4184:	3005d3ba 	srai	r2,r6,14
    4188:	1080004c 	andi	r2,r2,1
    418c:	2080a115 	stw	r2,644(r4)
        regs->reg_0x0092_en_ldo_digsxr = (value >> 13) & 0x1;
    4190:	3005d37a 	srai	r2,r6,13
    4194:	1080004c 	andi	r2,r2,1
    4198:	2080a215 	stw	r2,648(r4)
        regs->reg_0x0092_en_ldo_digsxt = (value >> 12) & 0x1;
    419c:	3005d33a 	srai	r2,r6,12
    41a0:	1080004c 	andi	r2,r2,1
    41a4:	2080a315 	stw	r2,652(r4)
        regs->reg_0x0092_en_ldo_divgn = (value >> 11) & 0x1;
    41a8:	3005d2fa 	srai	r2,r6,11
    41ac:	1080004c 	andi	r2,r2,1
    41b0:	2080a415 	stw	r2,656(r4)
        regs->reg_0x0092_en_ldo_divsxr = (value >> 10) & 0x1;
    41b4:	3005d2ba 	srai	r2,r6,10
    41b8:	1080004c 	andi	r2,r2,1
    41bc:	2080a515 	stw	r2,660(r4)
        regs->reg_0x0092_en_ldo_divsxt = (value >> 9) & 0x1;
    41c0:	3005d27a 	srai	r2,r6,9
    41c4:	1080004c 	andi	r2,r2,1
    41c8:	2080a615 	stw	r2,664(r4)
        regs->reg_0x0092_en_ldo_lna12 = (value >> 8) & 0x1;
    41cc:	3005d23a 	srai	r2,r6,8
    41d0:	1080004c 	andi	r2,r2,1
    41d4:	2080a715 	stw	r2,668(r4)
        regs->reg_0x0092_en_ldo_lna14 = (value >> 7) & 0x1;
    41d8:	3005d1fa 	srai	r2,r6,7
    41dc:	1080004c 	andi	r2,r2,1
    41e0:	2080a815 	stw	r2,672(r4)
        regs->reg_0x0092_en_ldo_mxrfe = (value >> 6) & 0x1;
    41e4:	3005d1ba 	srai	r2,r6,6
    41e8:	1080004c 	andi	r2,r2,1
    41ec:	2080a915 	stw	r2,676(r4)
        regs->reg_0x0092_en_ldo_rbb = (value >> 5) & 0x1;
    41f0:	3005d17a 	srai	r2,r6,5
    41f4:	1080004c 	andi	r2,r2,1
    41f8:	2080aa15 	stw	r2,680(r4)
        regs->reg_0x0092_en_ldo_rxbuf = (value >> 4) & 0x1;
    41fc:	3005d13a 	srai	r2,r6,4
    4200:	1080004c 	andi	r2,r2,1
    4204:	2080ab15 	stw	r2,684(r4)
        regs->reg_0x0092_en_ldo_tbb = (value >> 3) & 0x1;
    4208:	3005d0fa 	srai	r2,r6,3
    420c:	1080004c 	andi	r2,r2,1
    4210:	2080ac15 	stw	r2,688(r4)
        regs->reg_0x0092_en_ldo_tia12 = (value >> 2) & 0x1;
    4214:	3005d0ba 	srai	r2,r6,2
    4218:	1080004c 	andi	r2,r2,1
    421c:	2080ad15 	stw	r2,692(r4)
        regs->reg_0x0092_en_ldo_tia14 = (value >> 1) & 0x1;
    4220:	3005d07a 	srai	r2,r6,1
        regs->reg_0x0092_en_g_ldo = (value >> 0) & 0x1;
    4224:	3180004c 	andi	r6,r6,1
    4228:	2180af15 	stw	r6,700(r4)
        regs->reg_0x0092_en_ldo_mxrfe = (value >> 6) & 0x1;
        regs->reg_0x0092_en_ldo_rbb = (value >> 5) & 0x1;
        regs->reg_0x0092_en_ldo_rxbuf = (value >> 4) & 0x1;
        regs->reg_0x0092_en_ldo_tbb = (value >> 3) & 0x1;
        regs->reg_0x0092_en_ldo_tia12 = (value >> 2) & 0x1;
        regs->reg_0x0092_en_ldo_tia14 = (value >> 1) & 0x1;
    422c:	1080004c 	andi	r2,r2,1
    4230:	2080ae15 	stw	r2,696(r4)
    4234:	f800283a 	ret
        regs->reg_0x0092_en_g_ldo = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0093)
    4238:	008024c4 	movi	r2,147
    423c:	2880301e 	bne	r5,r2,4300 <LMS7002M_regs_set+0x9ec>
    {
        regs->reg_0x0093_en_loadimp_ldo_tlob = (value >> 15) & 0x1;
    4240:	3005d3fa 	srai	r2,r6,15
    4244:	1080004c 	andi	r2,r2,1
    4248:	2080b015 	stw	r2,704(r4)
        regs->reg_0x0093_en_loadimp_ldo_tpad = (value >> 14) & 0x1;
    424c:	3005d3ba 	srai	r2,r6,14
    4250:	1080004c 	andi	r2,r2,1
    4254:	2080b115 	stw	r2,708(r4)
        regs->reg_0x0093_en_loadimp_ldo_txbuf = (value >> 13) & 0x1;
    4258:	3005d37a 	srai	r2,r6,13
    425c:	1080004c 	andi	r2,r2,1
    4260:	2080b215 	stw	r2,712(r4)
        regs->reg_0x0093_en_loadimp_ldo_vcogn = (value >> 12) & 0x1;
    4264:	3005d33a 	srai	r2,r6,12
    4268:	1080004c 	andi	r2,r2,1
    426c:	2080b315 	stw	r2,716(r4)
        regs->reg_0x0093_en_loadimp_ldo_vcosxr = (value >> 11) & 0x1;
    4270:	3005d2fa 	srai	r2,r6,11
    4274:	1080004c 	andi	r2,r2,1
    4278:	2080b415 	stw	r2,720(r4)
        regs->reg_0x0093_en_loadimp_ldo_vcosxt = (value >> 10) & 0x1;
    427c:	3005d2ba 	srai	r2,r6,10
    4280:	1080004c 	andi	r2,r2,1
    4284:	2080b515 	stw	r2,724(r4)
        regs->reg_0x0093_en_ldo_afe = (value >> 9) & 0x1;
    4288:	3005d27a 	srai	r2,r6,9
    428c:	1080004c 	andi	r2,r2,1
    4290:	2080b615 	stw	r2,728(r4)
        regs->reg_0x0093_en_ldo_cpgn = (value >> 8) & 0x1;
    4294:	3005d23a 	srai	r2,r6,8
    4298:	1080004c 	andi	r2,r2,1
    429c:	2080b715 	stw	r2,732(r4)
        regs->reg_0x0093_en_ldo_cpsxr = (value >> 7) & 0x1;
    42a0:	3005d1fa 	srai	r2,r6,7
    42a4:	1080004c 	andi	r2,r2,1
    42a8:	2080b815 	stw	r2,736(r4)
        regs->reg_0x0093_en_ldo_tlob = (value >> 6) & 0x1;
    42ac:	3005d1ba 	srai	r2,r6,6
    42b0:	1080004c 	andi	r2,r2,1
    42b4:	2080b915 	stw	r2,740(r4)
        regs->reg_0x0093_en_ldo_tpad = (value >> 5) & 0x1;
    42b8:	3005d17a 	srai	r2,r6,5
    42bc:	1080004c 	andi	r2,r2,1
    42c0:	2080ba15 	stw	r2,744(r4)
        regs->reg_0x0093_en_ldo_txbuf = (value >> 4) & 0x1;
    42c4:	3005d13a 	srai	r2,r6,4
    42c8:	1080004c 	andi	r2,r2,1
    42cc:	2080bb15 	stw	r2,748(r4)
        regs->reg_0x0093_en_ldo_vcogn = (value >> 3) & 0x1;
    42d0:	3005d0fa 	srai	r2,r6,3
    42d4:	1080004c 	andi	r2,r2,1
    42d8:	2080bc15 	stw	r2,752(r4)
        regs->reg_0x0093_en_ldo_vcosxr = (value >> 2) & 0x1;
    42dc:	3005d0ba 	srai	r2,r6,2
    42e0:	1080004c 	andi	r2,r2,1
    42e4:	2080bd15 	stw	r2,756(r4)
        regs->reg_0x0093_en_ldo_vcosxt = (value >> 1) & 0x1;
    42e8:	3005d07a 	srai	r2,r6,1
        regs->reg_0x0093_en_ldo_cpsxt = (value >> 0) & 0x1;
    42ec:	3180004c 	andi	r6,r6,1
    42f0:	2180bf15 	stw	r6,764(r4)
        regs->reg_0x0093_en_ldo_tlob = (value >> 6) & 0x1;
        regs->reg_0x0093_en_ldo_tpad = (value >> 5) & 0x1;
        regs->reg_0x0093_en_ldo_txbuf = (value >> 4) & 0x1;
        regs->reg_0x0093_en_ldo_vcogn = (value >> 3) & 0x1;
        regs->reg_0x0093_en_ldo_vcosxr = (value >> 2) & 0x1;
        regs->reg_0x0093_en_ldo_vcosxt = (value >> 1) & 0x1;
    42f4:	1080004c 	andi	r2,r2,1
    42f8:	2080be15 	stw	r2,760(r4)
    42fc:	f800283a 	ret
        regs->reg_0x0093_en_ldo_cpsxt = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0094)
    4300:	00802504 	movi	r2,148
    4304:	2880301e 	bne	r5,r2,43c8 <LMS7002M_regs_set+0xab4>
    {
        regs->reg_0x0094_en_loadimp_ldo_cpsxt = (value >> 15) & 0x1;
    4308:	3005d3fa 	srai	r2,r6,15
    430c:	1080004c 	andi	r2,r2,1
    4310:	2080c015 	stw	r2,768(r4)
        regs->reg_0x0094_en_loadimp_ldo_dig = (value >> 14) & 0x1;
    4314:	3005d3ba 	srai	r2,r6,14
    4318:	1080004c 	andi	r2,r2,1
    431c:	2080c115 	stw	r2,772(r4)
        regs->reg_0x0094_en_loadimp_ldo_diggn = (value >> 13) & 0x1;
    4320:	3005d37a 	srai	r2,r6,13
    4324:	1080004c 	andi	r2,r2,1
    4328:	2080c215 	stw	r2,776(r4)
        regs->reg_0x0094_en_loadimp_ldo_digsxr = (value >> 12) & 0x1;
    432c:	3005d33a 	srai	r2,r6,12
    4330:	1080004c 	andi	r2,r2,1
    4334:	2080c315 	stw	r2,780(r4)
        regs->reg_0x0094_en_loadimp_ldo_digsxt = (value >> 11) & 0x1;
    4338:	3005d2fa 	srai	r2,r6,11
    433c:	1080004c 	andi	r2,r2,1
    4340:	2080c415 	stw	r2,784(r4)
        regs->reg_0x0094_en_loadimp_ldo_divgn = (value >> 10) & 0x1;
    4344:	3005d2ba 	srai	r2,r6,10
    4348:	1080004c 	andi	r2,r2,1
    434c:	2080c515 	stw	r2,788(r4)
        regs->reg_0x0094_en_loadimp_ldo_divsxr = (value >> 9) & 0x1;
    4350:	3005d27a 	srai	r2,r6,9
    4354:	1080004c 	andi	r2,r2,1
    4358:	2080c615 	stw	r2,792(r4)
        regs->reg_0x0094_en_loadimp_ldo_divsxt = (value >> 8) & 0x1;
    435c:	3005d23a 	srai	r2,r6,8
    4360:	1080004c 	andi	r2,r2,1
    4364:	2080c715 	stw	r2,796(r4)
        regs->reg_0x0094_en_loadimp_ldo_lna12 = (value >> 7) & 0x1;
    4368:	3005d1fa 	srai	r2,r6,7
    436c:	1080004c 	andi	r2,r2,1
    4370:	2080c815 	stw	r2,800(r4)
        regs->reg_0x0094_en_loadimp_ldo_lna14 = (value >> 6) & 0x1;
    4374:	3005d1ba 	srai	r2,r6,6
    4378:	1080004c 	andi	r2,r2,1
    437c:	2080c915 	stw	r2,804(r4)
        regs->reg_0x0094_en_loadimp_ldo_mxrfe = (value >> 5) & 0x1;
    4380:	3005d17a 	srai	r2,r6,5
    4384:	1080004c 	andi	r2,r2,1
    4388:	2080ca15 	stw	r2,808(r4)
        regs->reg_0x0094_en_loadimp_ldo_rbb = (value >> 4) & 0x1;
    438c:	3005d13a 	srai	r2,r6,4
    4390:	1080004c 	andi	r2,r2,1
    4394:	2080cb15 	stw	r2,812(r4)
        regs->reg_0x0094_en_loadimp_ldo_rxbuf = (value >> 3) & 0x1;
    4398:	3005d0fa 	srai	r2,r6,3
    439c:	1080004c 	andi	r2,r2,1
    43a0:	2080cc15 	stw	r2,816(r4)
        regs->reg_0x0094_en_loadimp_ldo_tbb = (value >> 2) & 0x1;
    43a4:	3005d0ba 	srai	r2,r6,2
    43a8:	1080004c 	andi	r2,r2,1
    43ac:	2080cd15 	stw	r2,820(r4)
        regs->reg_0x0094_en_loadimp_ldo_tia12 = (value >> 1) & 0x1;
    43b0:	3005d07a 	srai	r2,r6,1
        regs->reg_0x0094_en_loadimp_ldo_tia14 = (value >> 0) & 0x1;
    43b4:	3180004c 	andi	r6,r6,1
    43b8:	2180cf15 	stw	r6,828(r4)
        regs->reg_0x0094_en_loadimp_ldo_lna14 = (value >> 6) & 0x1;
        regs->reg_0x0094_en_loadimp_ldo_mxrfe = (value >> 5) & 0x1;
        regs->reg_0x0094_en_loadimp_ldo_rbb = (value >> 4) & 0x1;
        regs->reg_0x0094_en_loadimp_ldo_rxbuf = (value >> 3) & 0x1;
        regs->reg_0x0094_en_loadimp_ldo_tbb = (value >> 2) & 0x1;
        regs->reg_0x0094_en_loadimp_ldo_tia12 = (value >> 1) & 0x1;
    43bc:	1080004c 	andi	r2,r2,1
    43c0:	2080ce15 	stw	r2,824(r4)
    43c4:	f800283a 	ret
        regs->reg_0x0094_en_loadimp_ldo_tia14 = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0095)
    43c8:	00802544 	movi	r2,149
    43cc:	2880241e 	bne	r5,r2,4460 <LMS7002M_regs_set+0xb4c>
    {
        regs->reg_0x0095_byp_ldo_tbb = (value >> 15) & 0x1;
    43d0:	3005d3fa 	srai	r2,r6,15
    43d4:	1080004c 	andi	r2,r2,1
    43d8:	2080d015 	stw	r2,832(r4)
        regs->reg_0x0095_byp_ldo_tia12 = (value >> 14) & 0x1;
    43dc:	3005d3ba 	srai	r2,r6,14
    43e0:	1080004c 	andi	r2,r2,1
    43e4:	2080d115 	stw	r2,836(r4)
        regs->reg_0x0095_byp_ldo_tia14 = (value >> 13) & 0x1;
    43e8:	3005d37a 	srai	r2,r6,13
    43ec:	1080004c 	andi	r2,r2,1
    43f0:	2080d215 	stw	r2,840(r4)
        regs->reg_0x0095_byp_ldo_tlob = (value >> 12) & 0x1;
    43f4:	3005d33a 	srai	r2,r6,12
    43f8:	1080004c 	andi	r2,r2,1
    43fc:	2080d315 	stw	r2,844(r4)
        regs->reg_0x0095_byp_ldo_tpad = (value >> 11) & 0x1;
    4400:	3005d2fa 	srai	r2,r6,11
    4404:	1080004c 	andi	r2,r2,1
    4408:	2080d415 	stw	r2,848(r4)
        regs->reg_0x0095_byp_ldo_txbuf = (value >> 10) & 0x1;
    440c:	3005d2ba 	srai	r2,r6,10
    4410:	1080004c 	andi	r2,r2,1
    4414:	2080d515 	stw	r2,852(r4)
        regs->reg_0x0095_byp_ldo_vcogn = (value >> 9) & 0x1;
    4418:	3005d27a 	srai	r2,r6,9
    441c:	1080004c 	andi	r2,r2,1
    4420:	2080d615 	stw	r2,856(r4)
        regs->reg_0x0095_byp_ldo_vcosxr = (value >> 8) & 0x1;
    4424:	3005d23a 	srai	r2,r6,8
    4428:	1080004c 	andi	r2,r2,1
    442c:	2080d715 	stw	r2,860(r4)
        regs->reg_0x0095_byp_ldo_vcosxt = (value >> 7) & 0x1;
    4430:	3005d1fa 	srai	r2,r6,7
    4434:	1080004c 	andi	r2,r2,1
    4438:	2080d815 	stw	r2,864(r4)
        regs->reg_0x0095_en_loadimp_ldo_afe = (value >> 2) & 0x1;
    443c:	3005d0ba 	srai	r2,r6,2
    4440:	1080004c 	andi	r2,r2,1
    4444:	2080d915 	stw	r2,868(r4)
        regs->reg_0x0095_en_loadimp_ldo_cpgn = (value >> 1) & 0x1;
    4448:	3005d07a 	srai	r2,r6,1
        regs->reg_0x0095_en_loadimp_ldo_cpsxr = (value >> 0) & 0x1;
    444c:	3180004c 	andi	r6,r6,1
    4450:	2180db15 	stw	r6,876(r4)
        regs->reg_0x0095_byp_ldo_txbuf = (value >> 10) & 0x1;
        regs->reg_0x0095_byp_ldo_vcogn = (value >> 9) & 0x1;
        regs->reg_0x0095_byp_ldo_vcosxr = (value >> 8) & 0x1;
        regs->reg_0x0095_byp_ldo_vcosxt = (value >> 7) & 0x1;
        regs->reg_0x0095_en_loadimp_ldo_afe = (value >> 2) & 0x1;
        regs->reg_0x0095_en_loadimp_ldo_cpgn = (value >> 1) & 0x1;
    4454:	1080004c 	andi	r2,r2,1
    4458:	2080da15 	stw	r2,872(r4)
    445c:	f800283a 	ret
        regs->reg_0x0095_en_loadimp_ldo_cpsxr = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0096)
    4460:	00802584 	movi	r2,150
    4464:	2880301e 	bne	r5,r2,4528 <LMS7002M_regs_set+0xc14>
    {
        regs->reg_0x0096_byp_ldo_afe = (value >> 15) & 0x1;
    4468:	3005d3fa 	srai	r2,r6,15
    446c:	1080004c 	andi	r2,r2,1
    4470:	2080dc15 	stw	r2,880(r4)
        regs->reg_0x0096_byp_ldo_cpgn = (value >> 14) & 0x1;
    4474:	3005d3ba 	srai	r2,r6,14
    4478:	1080004c 	andi	r2,r2,1
    447c:	2080dd15 	stw	r2,884(r4)
        regs->reg_0x0096_byp_ldo_cpsxr = (value >> 13) & 0x1;
    4480:	3005d37a 	srai	r2,r6,13
    4484:	1080004c 	andi	r2,r2,1
    4488:	2080de15 	stw	r2,888(r4)
        regs->reg_0x0096_byp_ldo_cpsxt = (value >> 12) & 0x1;
    448c:	3005d33a 	srai	r2,r6,12
    4490:	1080004c 	andi	r2,r2,1
    4494:	2080df15 	stw	r2,892(r4)
        regs->reg_0x0096_byp_ldo_dig = (value >> 11) & 0x1;
    4498:	3005d2fa 	srai	r2,r6,11
    449c:	1080004c 	andi	r2,r2,1
    44a0:	2080e015 	stw	r2,896(r4)
        regs->reg_0x0096_byp_ldo_diggn = (value >> 10) & 0x1;
    44a4:	3005d2ba 	srai	r2,r6,10
    44a8:	1080004c 	andi	r2,r2,1
    44ac:	2080e115 	stw	r2,900(r4)
        regs->reg_0x0096_byp_ldo_digsxr = (value >> 9) & 0x1;
    44b0:	3005d27a 	srai	r2,r6,9
    44b4:	1080004c 	andi	r2,r2,1
    44b8:	2080e215 	stw	r2,904(r4)
        regs->reg_0x0096_byp_ldo_digsxt = (value >> 8) & 0x1;
    44bc:	3005d23a 	srai	r2,r6,8
    44c0:	1080004c 	andi	r2,r2,1
    44c4:	2080e315 	stw	r2,908(r4)
        regs->reg_0x0096_byp_ldo_divgn = (value >> 7) & 0x1;
    44c8:	3005d1fa 	srai	r2,r6,7
    44cc:	1080004c 	andi	r2,r2,1
    44d0:	2080e415 	stw	r2,912(r4)
        regs->reg_0x0096_byp_ldo_divsxr = (value >> 6) & 0x1;
    44d4:	3005d1ba 	srai	r2,r6,6
    44d8:	1080004c 	andi	r2,r2,1
    44dc:	2080e515 	stw	r2,916(r4)
        regs->reg_0x0096_byp_ldo_divsxt = (value >> 5) & 0x1;
    44e0:	3005d17a 	srai	r2,r6,5
    44e4:	1080004c 	andi	r2,r2,1
    44e8:	2080e615 	stw	r2,920(r4)
        regs->reg_0x0096_byp_ldo_lna12 = (value >> 4) & 0x1;
    44ec:	3005d13a 	srai	r2,r6,4
    44f0:	1080004c 	andi	r2,r2,1
    44f4:	2080e715 	stw	r2,924(r4)
        regs->reg_0x0096_byp_ldo_lna14 = (value >> 3) & 0x1;
    44f8:	3005d0fa 	srai	r2,r6,3
    44fc:	1080004c 	andi	r2,r2,1
    4500:	2080e815 	stw	r2,928(r4)
        regs->reg_0x0096_byp_ldo_mxrfe = (value >> 2) & 0x1;
    4504:	3005d0ba 	srai	r2,r6,2
    4508:	1080004c 	andi	r2,r2,1
    450c:	2080e915 	stw	r2,932(r4)
        regs->reg_0x0096_byp_ldo_rbb = (value >> 1) & 0x1;
    4510:	3005d07a 	srai	r2,r6,1
        regs->reg_0x0096_byp_ldo_rxbuf = (value >> 0) & 0x1;
    4514:	3180004c 	andi	r6,r6,1
    4518:	2180eb15 	stw	r6,940(r4)
        regs->reg_0x0096_byp_ldo_divsxr = (value >> 6) & 0x1;
        regs->reg_0x0096_byp_ldo_divsxt = (value >> 5) & 0x1;
        regs->reg_0x0096_byp_ldo_lna12 = (value >> 4) & 0x1;
        regs->reg_0x0096_byp_ldo_lna14 = (value >> 3) & 0x1;
        regs->reg_0x0096_byp_ldo_mxrfe = (value >> 2) & 0x1;
        regs->reg_0x0096_byp_ldo_rbb = (value >> 1) & 0x1;
    451c:	1080004c 	andi	r2,r2,1
    4520:	2080ea15 	stw	r2,936(r4)
    4524:	f800283a 	ret
        regs->reg_0x0096_byp_ldo_rxbuf = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0097)
    4528:	008025c4 	movi	r2,151
    452c:	2880301e 	bne	r5,r2,45f0 <LMS7002M_regs_set+0xcdc>
    {
        regs->reg_0x0097_spdup_ldo_divsxr = (value >> 15) & 0x1;
    4530:	3005d3fa 	srai	r2,r6,15
    4534:	1080004c 	andi	r2,r2,1
    4538:	2080ec15 	stw	r2,944(r4)
        regs->reg_0x0097_spdup_ldo_divsxt = (value >> 14) & 0x1;
    453c:	3005d3ba 	srai	r2,r6,14
    4540:	1080004c 	andi	r2,r2,1
    4544:	2080ed15 	stw	r2,948(r4)
        regs->reg_0x0097_spdup_ldo_lna12 = (value >> 13) & 0x1;
    4548:	3005d37a 	srai	r2,r6,13
    454c:	1080004c 	andi	r2,r2,1
    4550:	2080ee15 	stw	r2,952(r4)
        regs->reg_0x0097_spdup_ldo_lna14 = (value >> 12) & 0x1;
    4554:	3005d33a 	srai	r2,r6,12
    4558:	1080004c 	andi	r2,r2,1
    455c:	2080ef15 	stw	r2,956(r4)
        regs->reg_0x0097_spdup_ldo_mxrfe = (value >> 11) & 0x1;
    4560:	3005d2fa 	srai	r2,r6,11
    4564:	1080004c 	andi	r2,r2,1
    4568:	2080f015 	stw	r2,960(r4)
        regs->reg_0x0097_spdup_ldo_rbb = (value >> 10) & 0x1;
    456c:	3005d2ba 	srai	r2,r6,10
    4570:	1080004c 	andi	r2,r2,1
    4574:	2080f115 	stw	r2,964(r4)
        regs->reg_0x0097_spdup_ldo_rxbuf = (value >> 9) & 0x1;
    4578:	3005d27a 	srai	r2,r6,9
    457c:	1080004c 	andi	r2,r2,1
    4580:	2080f215 	stw	r2,968(r4)
        regs->reg_0x0097_spdup_ldo_tbb = (value >> 8) & 0x1;
    4584:	3005d23a 	srai	r2,r6,8
    4588:	1080004c 	andi	r2,r2,1
    458c:	2080f315 	stw	r2,972(r4)
        regs->reg_0x0097_spdup_ldo_tia12 = (value >> 7) & 0x1;
    4590:	3005d1fa 	srai	r2,r6,7
    4594:	1080004c 	andi	r2,r2,1
    4598:	2080f415 	stw	r2,976(r4)
        regs->reg_0x0097_spdup_ldo_tia14 = (value >> 6) & 0x1;
    459c:	3005d1ba 	srai	r2,r6,6
    45a0:	1080004c 	andi	r2,r2,1
    45a4:	2080f515 	stw	r2,980(r4)
        regs->reg_0x0097_spdup_ldo_tlob = (value >> 5) & 0x1;
    45a8:	3005d17a 	srai	r2,r6,5
    45ac:	1080004c 	andi	r2,r2,1
    45b0:	2080f615 	stw	r2,984(r4)
        regs->reg_0x0097_spdup_ldo_tpad = (value >> 4) & 0x1;
    45b4:	3005d13a 	srai	r2,r6,4
    45b8:	1080004c 	andi	r2,r2,1
    45bc:	2080f715 	stw	r2,988(r4)
        regs->reg_0x0097_spdup_ldo_txbuf = (value >> 3) & 0x1;
    45c0:	3005d0fa 	srai	r2,r6,3
    45c4:	1080004c 	andi	r2,r2,1
    45c8:	2080f815 	stw	r2,992(r4)
        regs->reg_0x0097_spdup_ldo_vcogn = (value >> 2) & 0x1;
    45cc:	3005d0ba 	srai	r2,r6,2
    45d0:	1080004c 	andi	r2,r2,1
    45d4:	2080f915 	stw	r2,996(r4)
        regs->reg_0x0097_spdup_ldo_vcosxr = (value >> 1) & 0x1;
    45d8:	3005d07a 	srai	r2,r6,1
        regs->reg_0x0097_spdup_ldo_vcosxt = (value >> 0) & 0x1;
    45dc:	3180004c 	andi	r6,r6,1
    45e0:	2180fb15 	stw	r6,1004(r4)
        regs->reg_0x0097_spdup_ldo_tia14 = (value >> 6) & 0x1;
        regs->reg_0x0097_spdup_ldo_tlob = (value >> 5) & 0x1;
        regs->reg_0x0097_spdup_ldo_tpad = (value >> 4) & 0x1;
        regs->reg_0x0097_spdup_ldo_txbuf = (value >> 3) & 0x1;
        regs->reg_0x0097_spdup_ldo_vcogn = (value >> 2) & 0x1;
        regs->reg_0x0097_spdup_ldo_vcosxr = (value >> 1) & 0x1;
    45e4:	1080004c 	andi	r2,r2,1
    45e8:	2080fa15 	stw	r2,1000(r4)
    45ec:	f800283a 	ret
        regs->reg_0x0097_spdup_ldo_vcosxt = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0098)
    45f0:	00802604 	movi	r2,152
    45f4:	28801b1e 	bne	r5,r2,4664 <LMS7002M_regs_set+0xd50>
    {
        regs->reg_0x0098_spdup_ldo_afe = (value >> 8) & 0x1;
    45f8:	3005d23a 	srai	r2,r6,8
    45fc:	1080004c 	andi	r2,r2,1
    4600:	2080fc15 	stw	r2,1008(r4)
        regs->reg_0x0098_spdup_ldo_cpgn = (value >> 7) & 0x1;
    4604:	3005d1fa 	srai	r2,r6,7
    4608:	1080004c 	andi	r2,r2,1
    460c:	2080fd15 	stw	r2,1012(r4)
        regs->reg_0x0098_spdup_ldo_cpsxr = (value >> 6) & 0x1;
    4610:	3005d1ba 	srai	r2,r6,6
    4614:	1080004c 	andi	r2,r2,1
    4618:	2080fe15 	stw	r2,1016(r4)
        regs->reg_0x0098_spdup_ldo_cpsxt = (value >> 5) & 0x1;
    461c:	3005d17a 	srai	r2,r6,5
    4620:	1080004c 	andi	r2,r2,1
    4624:	2080ff15 	stw	r2,1020(r4)
        regs->reg_0x0098_spdup_ldo_dig = (value >> 4) & 0x1;
    4628:	3005d13a 	srai	r2,r6,4
    462c:	1080004c 	andi	r2,r2,1
    4630:	20810015 	stw	r2,1024(r4)
        regs->reg_0x0098_spdup_ldo_diggn = (value >> 3) & 0x1;
    4634:	3005d0fa 	srai	r2,r6,3
    4638:	1080004c 	andi	r2,r2,1
    463c:	20810115 	stw	r2,1028(r4)
        regs->reg_0x0098_spdup_ldo_digsxr = (value >> 2) & 0x1;
    4640:	3005d0ba 	srai	r2,r6,2
    4644:	1080004c 	andi	r2,r2,1
    4648:	20810215 	stw	r2,1032(r4)
        regs->reg_0x0098_spdup_ldo_digsxt = (value >> 1) & 0x1;
    464c:	3005d07a 	srai	r2,r6,1
        regs->reg_0x0098_spdup_ldo_divgn = (value >> 0) & 0x1;
    4650:	3180004c 	andi	r6,r6,1
    4654:	21810415 	stw	r6,1040(r4)
        regs->reg_0x0098_spdup_ldo_cpsxr = (value >> 6) & 0x1;
        regs->reg_0x0098_spdup_ldo_cpsxt = (value >> 5) & 0x1;
        regs->reg_0x0098_spdup_ldo_dig = (value >> 4) & 0x1;
        regs->reg_0x0098_spdup_ldo_diggn = (value >> 3) & 0x1;
        regs->reg_0x0098_spdup_ldo_digsxr = (value >> 2) & 0x1;
        regs->reg_0x0098_spdup_ldo_digsxt = (value >> 1) & 0x1;
    4658:	1080004c 	andi	r2,r2,1
    465c:	20810315 	stw	r2,1036(r4)
    4660:	f800283a 	ret
        regs->reg_0x0098_spdup_ldo_divgn = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0099)
    4664:	00802644 	movi	r2,153
    4668:	2880061e 	bne	r5,r2,4684 <LMS7002M_regs_set+0xd70>
    {
        regs->reg_0x0099_rdiv_vcosxr = (value >> 8) & 0xff;
    466c:	3005d23a 	srai	r2,r6,8
        regs->reg_0x0099_rdiv_vcosxt = (value >> 0) & 0xff;
    4670:	31803fcc 	andi	r6,r6,255
    4674:	21810615 	stw	r6,1048(r4)
        regs->reg_0x0098_spdup_ldo_divgn = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0099)
    {
        regs->reg_0x0099_rdiv_vcosxr = (value >> 8) & 0xff;
    4678:	10803fcc 	andi	r2,r2,255
    467c:	20810515 	stw	r2,1044(r4)
    4680:	f800283a 	ret
        regs->reg_0x0099_rdiv_vcosxt = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x009A)
    4684:	00802684 	movi	r2,154
    4688:	2880061e 	bne	r5,r2,46a4 <LMS7002M_regs_set+0xd90>
    {
        regs->reg_0x009a_rdiv_txbuf = (value >> 8) & 0xff;
    468c:	3005d23a 	srai	r2,r6,8
        regs->reg_0x009a_rdiv_vcogn = (value >> 0) & 0xff;
    4690:	31803fcc 	andi	r6,r6,255
    4694:	21810815 	stw	r6,1056(r4)
        regs->reg_0x0099_rdiv_vcosxt = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x009A)
    {
        regs->reg_0x009a_rdiv_txbuf = (value >> 8) & 0xff;
    4698:	10803fcc 	andi	r2,r2,255
    469c:	20810715 	stw	r2,1052(r4)
    46a0:	f800283a 	ret
        regs->reg_0x009a_rdiv_vcogn = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x009B)
    46a4:	008026c4 	movi	r2,155
    46a8:	2880061e 	bne	r5,r2,46c4 <LMS7002M_regs_set+0xdb0>
    {
        regs->reg_0x009b_rdiv_tlob = (value >> 8) & 0xff;
    46ac:	3005d23a 	srai	r2,r6,8
        regs->reg_0x009b_rdiv_tpad = (value >> 0) & 0xff;
    46b0:	31803fcc 	andi	r6,r6,255
    46b4:	21810a15 	stw	r6,1064(r4)
        regs->reg_0x009a_rdiv_vcogn = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x009B)
    {
        regs->reg_0x009b_rdiv_tlob = (value >> 8) & 0xff;
    46b8:	10803fcc 	andi	r2,r2,255
    46bc:	20810915 	stw	r2,1060(r4)
    46c0:	f800283a 	ret
        regs->reg_0x009b_rdiv_tpad = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x009C)
    46c4:	00802704 	movi	r2,156
    46c8:	2880061e 	bne	r5,r2,46e4 <LMS7002M_regs_set+0xdd0>
    {
        regs->reg_0x009c_rdiv_tia12 = (value >> 8) & 0xff;
    46cc:	3005d23a 	srai	r2,r6,8
        regs->reg_0x009c_rdiv_tia14 = (value >> 0) & 0xff;
    46d0:	31803fcc 	andi	r6,r6,255
    46d4:	21810c15 	stw	r6,1072(r4)
        regs->reg_0x009b_rdiv_tpad = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x009C)
    {
        regs->reg_0x009c_rdiv_tia12 = (value >> 8) & 0xff;
    46d8:	10803fcc 	andi	r2,r2,255
    46dc:	20810b15 	stw	r2,1068(r4)
    46e0:	f800283a 	ret
        regs->reg_0x009c_rdiv_tia14 = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x009D)
    46e4:	00802744 	movi	r2,157
    46e8:	2880061e 	bne	r5,r2,4704 <LMS7002M_regs_set+0xdf0>
    {
        regs->reg_0x009d_rdiv_rxbuf = (value >> 8) & 0xff;
    46ec:	3005d23a 	srai	r2,r6,8
        regs->reg_0x009d_rdiv_tbb = (value >> 0) & 0xff;
    46f0:	31803fcc 	andi	r6,r6,255
    46f4:	21810e15 	stw	r6,1080(r4)
        regs->reg_0x009c_rdiv_tia14 = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x009D)
    {
        regs->reg_0x009d_rdiv_rxbuf = (value >> 8) & 0xff;
    46f8:	10803fcc 	andi	r2,r2,255
    46fc:	20810d15 	stw	r2,1076(r4)
    4700:	f800283a 	ret
        regs->reg_0x009d_rdiv_tbb = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x009E)
    4704:	00802784 	movi	r2,158
    4708:	2880061e 	bne	r5,r2,4724 <LMS7002M_regs_set+0xe10>
    {
        regs->reg_0x009e_rdiv_mxrfe = (value >> 8) & 0xff;
    470c:	3005d23a 	srai	r2,r6,8
        regs->reg_0x009e_rdiv_rbb = (value >> 0) & 0xff;
    4710:	31803fcc 	andi	r6,r6,255
    4714:	21811015 	stw	r6,1088(r4)
        regs->reg_0x009d_rdiv_tbb = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x009E)
    {
        regs->reg_0x009e_rdiv_mxrfe = (value >> 8) & 0xff;
    4718:	10803fcc 	andi	r2,r2,255
    471c:	20810f15 	stw	r2,1084(r4)
    4720:	f800283a 	ret
        regs->reg_0x009e_rdiv_rbb = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x009F)
    4724:	008027c4 	movi	r2,159
    4728:	2880061e 	bne	r5,r2,4744 <LMS7002M_regs_set+0xe30>
    {
        regs->reg_0x009f_rdiv_lna12 = (value >> 8) & 0xff;
    472c:	3005d23a 	srai	r2,r6,8
        regs->reg_0x009f_rdiv_lna14 = (value >> 0) & 0xff;
    4730:	31803fcc 	andi	r6,r6,255
    4734:	21811215 	stw	r6,1096(r4)
        regs->reg_0x009e_rdiv_rbb = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x009F)
    {
        regs->reg_0x009f_rdiv_lna12 = (value >> 8) & 0xff;
    4738:	10803fcc 	andi	r2,r2,255
    473c:	20811115 	stw	r2,1092(r4)
    4740:	f800283a 	ret
        regs->reg_0x009f_rdiv_lna14 = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x00A0)
    4744:	00802804 	movi	r2,160
    4748:	2880061e 	bne	r5,r2,4764 <LMS7002M_regs_set+0xe50>
    {
        regs->reg_0x00a0_rdiv_divsxr = (value >> 8) & 0xff;
    474c:	3005d23a 	srai	r2,r6,8
        regs->reg_0x00a0_rdiv_divsxt = (value >> 0) & 0xff;
    4750:	31803fcc 	andi	r6,r6,255
    4754:	21811415 	stw	r6,1104(r4)
        regs->reg_0x009f_rdiv_lna14 = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x00A0)
    {
        regs->reg_0x00a0_rdiv_divsxr = (value >> 8) & 0xff;
    4758:	10803fcc 	andi	r2,r2,255
    475c:	20811315 	stw	r2,1100(r4)
    4760:	f800283a 	ret
        regs->reg_0x00a0_rdiv_divsxt = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x00A1)
    4764:	00802844 	movi	r2,161
    4768:	2880061e 	bne	r5,r2,4784 <LMS7002M_regs_set+0xe70>
    {
        regs->reg_0x00a1_rdiv_digsxt = (value >> 8) & 0xff;
    476c:	3005d23a 	srai	r2,r6,8
        regs->reg_0x00a1_rdiv_divgn = (value >> 0) & 0xff;
    4770:	31803fcc 	andi	r6,r6,255
    4774:	21811615 	stw	r6,1112(r4)
        regs->reg_0x00a0_rdiv_divsxt = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x00A1)
    {
        regs->reg_0x00a1_rdiv_digsxt = (value >> 8) & 0xff;
    4778:	10803fcc 	andi	r2,r2,255
    477c:	20811515 	stw	r2,1108(r4)
    4780:	f800283a 	ret
        regs->reg_0x00a1_rdiv_divgn = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x00A2)
    4784:	00802884 	movi	r2,162
    4788:	2880061e 	bne	r5,r2,47a4 <LMS7002M_regs_set+0xe90>
    {
        regs->reg_0x00a2_rdiv_diggn = (value >> 8) & 0xff;
    478c:	3005d23a 	srai	r2,r6,8
        regs->reg_0x00a2_rdiv_digsxr = (value >> 0) & 0xff;
    4790:	31803fcc 	andi	r6,r6,255
    4794:	21811815 	stw	r6,1120(r4)
        regs->reg_0x00a1_rdiv_divgn = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x00A2)
    {
        regs->reg_0x00a2_rdiv_diggn = (value >> 8) & 0xff;
    4798:	10803fcc 	andi	r2,r2,255
    479c:	20811715 	stw	r2,1116(r4)
    47a0:	f800283a 	ret
        regs->reg_0x00a2_rdiv_digsxr = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x00A3)
    47a4:	008028c4 	movi	r2,163
    47a8:	2880061e 	bne	r5,r2,47c4 <LMS7002M_regs_set+0xeb0>
    {
        regs->reg_0x00a3_rdiv_cpsxt = (value >> 8) & 0xff;
    47ac:	3005d23a 	srai	r2,r6,8
        regs->reg_0x00a3_rdiv_dig = (value >> 0) & 0xff;
    47b0:	31803fcc 	andi	r6,r6,255
    47b4:	21811a15 	stw	r6,1128(r4)
        regs->reg_0x00a2_rdiv_digsxr = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x00A3)
    {
        regs->reg_0x00a3_rdiv_cpsxt = (value >> 8) & 0xff;
    47b8:	10803fcc 	andi	r2,r2,255
    47bc:	20811915 	stw	r2,1124(r4)
    47c0:	f800283a 	ret
        regs->reg_0x00a3_rdiv_dig = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x00A4)
    47c4:	00802904 	movi	r2,164
    47c8:	2880061e 	bne	r5,r2,47e4 <LMS7002M_regs_set+0xed0>
    {
        regs->reg_0x00a4_rdiv_cpgn = (value >> 8) & 0xff;
    47cc:	3005d23a 	srai	r2,r6,8
        regs->reg_0x00a4_rdiv_cpsxr = (value >> 0) & 0xff;
    47d0:	31803fcc 	andi	r6,r6,255
    47d4:	21811c15 	stw	r6,1136(r4)
        regs->reg_0x00a3_rdiv_dig = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x00A4)
    {
        regs->reg_0x00a4_rdiv_cpgn = (value >> 8) & 0xff;
    47d8:	10803fcc 	andi	r2,r2,255
    47dc:	20811b15 	stw	r2,1132(r4)
    47e0:	f800283a 	ret
        regs->reg_0x00a4_rdiv_cpsxr = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x00A5)
    47e4:	00802944 	movi	r2,165
    47e8:	2880061e 	bne	r5,r2,4804 <LMS7002M_regs_set+0xef0>
    {
        regs->reg_0x00a5_rdiv_spibuf = (value >> 8) & 0xff;
    47ec:	3005d23a 	srai	r2,r6,8
        regs->reg_0x00a5_rdiv_afe = (value >> 0) & 0xff;
    47f0:	31803fcc 	andi	r6,r6,255
    47f4:	21811e15 	stw	r6,1144(r4)
        regs->reg_0x00a4_rdiv_cpsxr = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x00A5)
    {
        regs->reg_0x00a5_rdiv_spibuf = (value >> 8) & 0xff;
    47f8:	10803fcc 	andi	r2,r2,255
    47fc:	20811d15 	stw	r2,1140(r4)
    4800:	f800283a 	ret
        regs->reg_0x00a5_rdiv_afe = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x00A6)
    4804:	00802984 	movi	r2,166
    4808:	2880271e 	bne	r5,r2,48a8 <LMS7002M_regs_set+0xf94>
    {
        regs->reg_0x00a6_spdup_ldo_spibuf = (value >> 12) & 0x1;
    480c:	3005d33a 	srai	r2,r6,12
    4810:	1080004c 	andi	r2,r2,1
    4814:	20811f15 	stw	r2,1148(r4)
        regs->reg_0x00a6_spdup_ldo_digip2 = (value >> 11) & 0x1;
    4818:	3005d2fa 	srai	r2,r6,11
    481c:	1080004c 	andi	r2,r2,1
    4820:	20812015 	stw	r2,1152(r4)
        regs->reg_0x00a6_spdup_ldo_digip1 = (value >> 10) & 0x1;
    4824:	3005d2ba 	srai	r2,r6,10
    4828:	1080004c 	andi	r2,r2,1
    482c:	20812115 	stw	r2,1156(r4)
        regs->reg_0x00a6_byp_ldo_spibuf = (value >> 9) & 0x1;
    4830:	3005d27a 	srai	r2,r6,9
    4834:	1080004c 	andi	r2,r2,1
    4838:	20812215 	stw	r2,1160(r4)
        regs->reg_0x00a6_byp_ldo_digip2 = (value >> 8) & 0x1;
    483c:	3005d23a 	srai	r2,r6,8
    4840:	1080004c 	andi	r2,r2,1
    4844:	20812315 	stw	r2,1164(r4)
        regs->reg_0x00a6_byp_ldo_digip1 = (value >> 7) & 0x1;
    4848:	3005d1fa 	srai	r2,r6,7
    484c:	1080004c 	andi	r2,r2,1
    4850:	20812415 	stw	r2,1168(r4)
        regs->reg_0x00a6_en_loadimp_ldo_spibuf = (value >> 6) & 0x1;
    4854:	3005d1ba 	srai	r2,r6,6
    4858:	1080004c 	andi	r2,r2,1
    485c:	20812515 	stw	r2,1172(r4)
        regs->reg_0x00a6_en_loadimp_ldo_digip2 = (value >> 5) & 0x1;
    4860:	3005d17a 	srai	r2,r6,5
    4864:	1080004c 	andi	r2,r2,1
    4868:	20812615 	stw	r2,1176(r4)
        regs->reg_0x00a6_en_loadimp_ldo_digip1 = (value >> 4) & 0x1;
    486c:	3005d13a 	srai	r2,r6,4
    4870:	1080004c 	andi	r2,r2,1
    4874:	20812715 	stw	r2,1180(r4)
        regs->reg_0x00a6_pd_ldo_spibuf = (value >> 3) & 0x1;
    4878:	3005d0fa 	srai	r2,r6,3
    487c:	1080004c 	andi	r2,r2,1
    4880:	20812815 	stw	r2,1184(r4)
        regs->reg_0x00a6_pd_ldo_digip2 = (value >> 2) & 0x1;
    4884:	3005d0ba 	srai	r2,r6,2
    4888:	1080004c 	andi	r2,r2,1
    488c:	20812915 	stw	r2,1188(r4)
        regs->reg_0x00a6_pd_ldo_digip1 = (value >> 1) & 0x1;
    4890:	3005d07a 	srai	r2,r6,1
        regs->reg_0x00a6_en_g_ldop = (value >> 0) & 0x1;
    4894:	3180004c 	andi	r6,r6,1
    4898:	21812b15 	stw	r6,1196(r4)
        regs->reg_0x00a6_en_loadimp_ldo_spibuf = (value >> 6) & 0x1;
        regs->reg_0x00a6_en_loadimp_ldo_digip2 = (value >> 5) & 0x1;
        regs->reg_0x00a6_en_loadimp_ldo_digip1 = (value >> 4) & 0x1;
        regs->reg_0x00a6_pd_ldo_spibuf = (value >> 3) & 0x1;
        regs->reg_0x00a6_pd_ldo_digip2 = (value >> 2) & 0x1;
        regs->reg_0x00a6_pd_ldo_digip1 = (value >> 1) & 0x1;
    489c:	1080004c 	andi	r2,r2,1
    48a0:	20812a15 	stw	r2,1192(r4)
    48a4:	f800283a 	ret
        regs->reg_0x00a6_en_g_ldop = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x00A7)
    48a8:	008029c4 	movi	r2,167
    48ac:	2880061e 	bne	r5,r2,48c8 <LMS7002M_regs_set+0xfb4>
    {
        regs->reg_0x00a7_rdiv_digip2 = (value >> 8) & 0xff;
    48b0:	3005d23a 	srai	r2,r6,8
        regs->reg_0x00a7_rdiv_digip1 = (value >> 0) & 0xff;
    48b4:	31803fcc 	andi	r6,r6,255
    48b8:	21812d15 	stw	r6,1204(r4)
        regs->reg_0x00a6_en_g_ldop = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x00A7)
    {
        regs->reg_0x00a7_rdiv_digip2 = (value >> 8) & 0xff;
    48bc:	10803fcc 	andi	r2,r2,255
    48c0:	20812c15 	stw	r2,1200(r4)
    48c4:	f800283a 	ret
        regs->reg_0x00a7_rdiv_digip1 = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x00a8)
    48c8:	00802a04 	movi	r2,168
    48cc:	2880031e 	bne	r5,r2,48dc <LMS7002M_regs_set+0xfc8>
    {
        regs->reg_0x00a8_value = (value >> 0) & 0xffff;
    48d0:	31bfffcc 	andi	r6,r6,65535
    48d4:	21812e15 	stw	r6,1208(r4)
    48d8:	f800283a 	ret
        return;
    }
    if (addr == 0x00aa)
    48dc:	00802a84 	movi	r2,170
    48e0:	2880031e 	bne	r5,r2,48f0 <LMS7002M_regs_set+0xfdc>
    {
        regs->reg_0x00aa_value = (value >> 0) & 0xffff;
    48e4:	31bfffcc 	andi	r6,r6,65535
    48e8:	21812f15 	stw	r6,1212(r4)
    48ec:	f800283a 	ret
        return;
    }
    if (addr == 0x00ab)
    48f0:	00802ac4 	movi	r2,171
    48f4:	2880031e 	bne	r5,r2,4904 <LMS7002M_regs_set+0xff0>
    {
        regs->reg_0x00ab_value = (value >> 0) & 0xffff;
    48f8:	31bfffcc 	andi	r6,r6,65535
    48fc:	21813015 	stw	r6,1216(r4)
    4900:	f800283a 	ret
        return;
    }
    if (addr == 0x00ad)
    4904:	00802b44 	movi	r2,173
    4908:	2880031e 	bne	r5,r2,4918 <LMS7002M_regs_set+0x1004>
    {
        regs->reg_0x00ad_value = (value >> 0) & 0xffff;
    490c:	31bfffcc 	andi	r6,r6,65535
    4910:	21813115 	stw	r6,1220(r4)
    4914:	f800283a 	ret
        return;
    }
    if (addr == 0x00ae)
    4918:	00802b84 	movi	r2,174
    491c:	2880031e 	bne	r5,r2,492c <LMS7002M_regs_set+0x1018>
    {
        regs->reg_0x00ae_value = (value >> 0) & 0xffff;
    4920:	31bfffcc 	andi	r6,r6,65535
    4924:	21813215 	stw	r6,1224(r4)
    4928:	f800283a 	ret
        return;
    }
    if (addr == 0x0100)
    492c:	00804004 	movi	r2,256
    4930:	2880181e 	bne	r5,r2,4994 <LMS7002M_regs_set+0x1080>
    {
        regs->reg_0x0100_en_lowbwlomx_tmx_trf = (value >> 15) & 0x1;
    4934:	3005d3fa 	srai	r2,r6,15
    4938:	1080004c 	andi	r2,r2,1
    493c:	20813315 	stw	r2,1228(r4)
        regs->reg_0x0100_en_nexttx_trf = (value >> 14) & 0x1;
    4940:	3005d3ba 	srai	r2,r6,14
    4944:	1080004c 	andi	r2,r2,1
    4948:	20813415 	stw	r2,1232(r4)
        regs->reg_0x0100_en_amphf_pdet_trf = (value >> 12) & 0x3;
    494c:	3005d33a 	srai	r2,r6,12
    4950:	108000cc 	andi	r2,r2,3
    4954:	20813515 	stw	r2,1236(r4)
        regs->reg_0x0100_loadr_pdet_trf = (value >> 10) & 0x3;
    4958:	3005d2ba 	srai	r2,r6,10
    495c:	108000cc 	andi	r2,r2,3
    4960:	20813615 	stw	r2,1240(r4)
        regs->reg_0x0100_pd_pdet_trf = (value >> 3) & 0x1;
    4964:	3005d0fa 	srai	r2,r6,3
    4968:	1080004c 	andi	r2,r2,1
    496c:	20813715 	stw	r2,1244(r4)
        regs->reg_0x0100_pd_tlobuf_trf = (value >> 2) & 0x1;
    4970:	3005d0ba 	srai	r2,r6,2
    4974:	1080004c 	andi	r2,r2,1
    4978:	20813815 	stw	r2,1248(r4)
        regs->reg_0x0100_pd_txpad_trf = (value >> 1) & 0x1;
    497c:	3005d07a 	srai	r2,r6,1
        regs->reg_0x0100_en_g_trf = (value >> 0) & 0x1;
    4980:	3180004c 	andi	r6,r6,1
    4984:	21813a15 	stw	r6,1256(r4)
        regs->reg_0x0100_en_nexttx_trf = (value >> 14) & 0x1;
        regs->reg_0x0100_en_amphf_pdet_trf = (value >> 12) & 0x3;
        regs->reg_0x0100_loadr_pdet_trf = (value >> 10) & 0x3;
        regs->reg_0x0100_pd_pdet_trf = (value >> 3) & 0x1;
        regs->reg_0x0100_pd_tlobuf_trf = (value >> 2) & 0x1;
        regs->reg_0x0100_pd_txpad_trf = (value >> 1) & 0x1;
    4988:	1080004c 	andi	r2,r2,1
    498c:	20813915 	stw	r2,1252(r4)
    4990:	f800283a 	ret
        regs->reg_0x0100_en_g_trf = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0101)
    4994:	00804044 	movi	r2,257
    4998:	28800f1e 	bne	r5,r2,49d8 <LMS7002M_regs_set+0x10c4>
    {
        regs->reg_0x0101_f_txpad_trf = (value >> 13) & 0x7;
    499c:	3005d37a 	srai	r2,r6,13
    49a0:	108001cc 	andi	r2,r2,7
    49a4:	20813b15 	stw	r2,1260(r4)
        regs->reg_0x0101_l_loopb_txpad_trf = (value >> 11) & 0x3;
    49a8:	3005d2fa 	srai	r2,r6,11
    49ac:	108000cc 	andi	r2,r2,3
    49b0:	20813c15 	stw	r2,1264(r4)
        regs->reg_0x0101_loss_lin_txpad_trf = (value >> 6) & 0x1f;
    49b4:	3005d1ba 	srai	r2,r6,6
    49b8:	108007cc 	andi	r2,r2,31
    49bc:	20813d15 	stw	r2,1268(r4)
        regs->reg_0x0101_loss_main_txpad_trf = (value >> 1) & 0x1f;
    49c0:	3005d07a 	srai	r2,r6,1
        regs->reg_0x0101_en_loopb_txpad_trf = (value >> 0) & 0x1;
    49c4:	3180004c 	andi	r6,r6,1
    49c8:	21813f15 	stw	r6,1276(r4)
    if (addr == 0x0101)
    {
        regs->reg_0x0101_f_txpad_trf = (value >> 13) & 0x7;
        regs->reg_0x0101_l_loopb_txpad_trf = (value >> 11) & 0x3;
        regs->reg_0x0101_loss_lin_txpad_trf = (value >> 6) & 0x1f;
        regs->reg_0x0101_loss_main_txpad_trf = (value >> 1) & 0x1f;
    49cc:	108007cc 	andi	r2,r2,31
    49d0:	20813e15 	stw	r2,1272(r4)
    49d4:	f800283a 	ret
        regs->reg_0x0101_en_loopb_txpad_trf = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0102)
    49d8:	00804084 	movi	r2,258
    49dc:	28800c1e 	bne	r5,r2,4a10 <LMS7002M_regs_set+0x10fc>
    {
        regs->reg_0x0102_gcas_gndref_txpad_trf = (value >> 15) & 0x1;
    49e0:	3005d3fa 	srai	r2,r6,15
    49e4:	1080004c 	andi	r2,r2,1
    49e8:	20814015 	stw	r2,1280(r4)
        regs->reg_0x0102_ict_lin_txpad_trf = (value >> 10) & 0x1f;
    49ec:	3005d2ba 	srai	r2,r6,10
    49f0:	108007cc 	andi	r2,r2,31
    49f4:	20814115 	stw	r2,1284(r4)
        regs->reg_0x0102_ict_main_txpad_trf = (value >> 5) & 0x1f;
    49f8:	3005d17a 	srai	r2,r6,5
        regs->reg_0x0102_vgcas_txpad_trf = (value >> 0) & 0x1f;
    49fc:	318007cc 	andi	r6,r6,31
    4a00:	21814315 	stw	r6,1292(r4)
    }
    if (addr == 0x0102)
    {
        regs->reg_0x0102_gcas_gndref_txpad_trf = (value >> 15) & 0x1;
        regs->reg_0x0102_ict_lin_txpad_trf = (value >> 10) & 0x1f;
        regs->reg_0x0102_ict_main_txpad_trf = (value >> 5) & 0x1f;
    4a04:	108007cc 	andi	r2,r2,31
    4a08:	20814215 	stw	r2,1288(r4)
    4a0c:	f800283a 	ret
        regs->reg_0x0102_vgcas_txpad_trf = (value >> 0) & 0x1f;
        return;
    }
    if (addr == 0x0103)
    4a10:	008040c4 	movi	r2,259
    4a14:	28800c1e 	bne	r5,r2,4a48 <LMS7002M_regs_set+0x1134>
    {
        regs->reg_0x0103_sel_band1_trf = (value >> 11) & 0x1;
    4a18:	3005d2fa 	srai	r2,r6,11
    4a1c:	1080004c 	andi	r2,r2,1
    4a20:	20814415 	stw	r2,1296(r4)
        regs->reg_0x0103_sel_band2_trf = (value >> 10) & 0x1;
    4a24:	3005d2ba 	srai	r2,r6,10
    4a28:	1080004c 	andi	r2,r2,1
    4a2c:	20814515 	stw	r2,1300(r4)
        regs->reg_0x0103_lobiasn_txm_trf = (value >> 5) & 0x1f;
    4a30:	3005d17a 	srai	r2,r6,5
        regs->reg_0x0103_lobiasp_txx_trf = (value >> 0) & 0x1f;
    4a34:	318007cc 	andi	r6,r6,31
    4a38:	21814715 	stw	r6,1308(r4)
    }
    if (addr == 0x0103)
    {
        regs->reg_0x0103_sel_band1_trf = (value >> 11) & 0x1;
        regs->reg_0x0103_sel_band2_trf = (value >> 10) & 0x1;
        regs->reg_0x0103_lobiasn_txm_trf = (value >> 5) & 0x1f;
    4a3c:	108007cc 	andi	r2,r2,31
    4a40:	20814615 	stw	r2,1304(r4)
    4a44:	f800283a 	ret
        regs->reg_0x0103_lobiasp_txx_trf = (value >> 0) & 0x1f;
        return;
    }
    if (addr == 0x0104)
    4a48:	00804104 	movi	r2,260
    4a4c:	2880061e 	bne	r5,r2,4a68 <LMS7002M_regs_set+0x1154>
    {
        regs->reg_0x0104_cdc_i_trf = (value >> 4) & 0xf;
    4a50:	3005d13a 	srai	r2,r6,4
        regs->reg_0x0104_cdc_q_trf = (value >> 0) & 0xf;
    4a54:	318003cc 	andi	r6,r6,15
    4a58:	21814915 	stw	r6,1316(r4)
        regs->reg_0x0103_lobiasp_txx_trf = (value >> 0) & 0x1f;
        return;
    }
    if (addr == 0x0104)
    {
        regs->reg_0x0104_cdc_i_trf = (value >> 4) & 0xf;
    4a5c:	108003cc 	andi	r2,r2,15
    4a60:	20814815 	stw	r2,1312(r4)
    4a64:	f800283a 	ret
        regs->reg_0x0104_cdc_q_trf = (value >> 0) & 0xf;
        return;
    }
    if (addr == 0x0105)
    4a68:	00804144 	movi	r2,261
    4a6c:	2880151e 	bne	r5,r2,4ac4 <LMS7002M_regs_set+0x11b0>
    {
        regs->reg_0x0105_statpulse_tbb = (value >> 15) & 0x1;
    4a70:	3005d3fa 	srai	r2,r6,15
    4a74:	1080004c 	andi	r2,r2,1
    4a78:	20814a15 	stw	r2,1320(r4)
        regs->reg_0x0105_loopb_tbb = (value >> 12) & 0x7;
    4a7c:	3005d33a 	srai	r2,r6,12
    4a80:	108001cc 	andi	r2,r2,7
    4a84:	20814b15 	stw	r2,1324(r4)
        regs->reg_0x0105_pd_lpfh_tbb = (value >> 4) & 0x1;
    4a88:	3005d13a 	srai	r2,r6,4
    4a8c:	1080004c 	andi	r2,r2,1
    4a90:	20814c15 	stw	r2,1328(r4)
        regs->reg_0x0105_pd_lpfiamp_tbb = (value >> 3) & 0x1;
    4a94:	3005d0fa 	srai	r2,r6,3
    4a98:	1080004c 	andi	r2,r2,1
    4a9c:	20814d15 	stw	r2,1332(r4)
        regs->reg_0x0105_pd_lpflad_tbb = (value >> 2) & 0x1;
    4aa0:	3005d0ba 	srai	r2,r6,2
    4aa4:	1080004c 	andi	r2,r2,1
    4aa8:	20814e15 	stw	r2,1336(r4)
        regs->reg_0x0105_pd_lpfs5_tbb = (value >> 1) & 0x1;
    4aac:	3005d07a 	srai	r2,r6,1
        regs->reg_0x0105_en_g_tbb = (value >> 0) & 0x1;
    4ab0:	3180004c 	andi	r6,r6,1
    4ab4:	21815015 	stw	r6,1344(r4)
        regs->reg_0x0105_statpulse_tbb = (value >> 15) & 0x1;
        regs->reg_0x0105_loopb_tbb = (value >> 12) & 0x7;
        regs->reg_0x0105_pd_lpfh_tbb = (value >> 4) & 0x1;
        regs->reg_0x0105_pd_lpfiamp_tbb = (value >> 3) & 0x1;
        regs->reg_0x0105_pd_lpflad_tbb = (value >> 2) & 0x1;
        regs->reg_0x0105_pd_lpfs5_tbb = (value >> 1) & 0x1;
    4ab8:	1080004c 	andi	r2,r2,1
    4abc:	20814f15 	stw	r2,1340(r4)
    4ac0:	f800283a 	ret
        regs->reg_0x0105_en_g_tbb = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0106)
    4ac4:	00804184 	movi	r2,262
    4ac8:	2880091e 	bne	r5,r2,4af0 <LMS7002M_regs_set+0x11dc>
    {
        regs->reg_0x0106_ict_lpfs5_f_tbb = (value >> 10) & 0x1f;
    4acc:	3005d2ba 	srai	r2,r6,10
    4ad0:	108007cc 	andi	r2,r2,31
    4ad4:	20815115 	stw	r2,1348(r4)
        regs->reg_0x0106_ict_lpfs5_pt_tbb = (value >> 5) & 0x1f;
    4ad8:	3005d17a 	srai	r2,r6,5
        regs->reg_0x0106_ict_lpf_h_pt_tbb = (value >> 0) & 0x1f;
    4adc:	318007cc 	andi	r6,r6,31
    4ae0:	21815315 	stw	r6,1356(r4)
        return;
    }
    if (addr == 0x0106)
    {
        regs->reg_0x0106_ict_lpfs5_f_tbb = (value >> 10) & 0x1f;
        regs->reg_0x0106_ict_lpfs5_pt_tbb = (value >> 5) & 0x1f;
    4ae4:	108007cc 	andi	r2,r2,31
    4ae8:	20815215 	stw	r2,1352(r4)
    4aec:	f800283a 	ret
        regs->reg_0x0106_ict_lpf_h_pt_tbb = (value >> 0) & 0x1f;
        return;
    }
    if (addr == 0x0107)
    4af0:	008041c4 	movi	r2,263
    4af4:	2880091e 	bne	r5,r2,4b1c <LMS7002M_regs_set+0x1208>
    {
        regs->reg_0x0107_ict_lpfh_f_tbb = (value >> 10) & 0x1f;
    4af8:	3005d2ba 	srai	r2,r6,10
    4afc:	108007cc 	andi	r2,r2,31
    4b00:	20815415 	stw	r2,1360(r4)
        regs->reg_0x0107_ict_lpflad_f_tbb = (value >> 5) & 0x1f;
    4b04:	3005d17a 	srai	r2,r6,5
        regs->reg_0x0107_ict_lpflad_pt_tbb = (value >> 0) & 0x1f;
    4b08:	318007cc 	andi	r6,r6,31
    4b0c:	21815615 	stw	r6,1368(r4)
        return;
    }
    if (addr == 0x0107)
    {
        regs->reg_0x0107_ict_lpfh_f_tbb = (value >> 10) & 0x1f;
        regs->reg_0x0107_ict_lpflad_f_tbb = (value >> 5) & 0x1f;
    4b10:	108007cc 	andi	r2,r2,31
    4b14:	20815515 	stw	r2,1364(r4)
    4b18:	f800283a 	ret
        regs->reg_0x0107_ict_lpflad_pt_tbb = (value >> 0) & 0x1f;
        return;
    }
    if (addr == 0x0108)
    4b1c:	00804204 	movi	r2,264
    4b20:	2880091e 	bne	r5,r2,4b48 <LMS7002M_regs_set+0x1234>
    {
        regs->reg_0x0108_cg_iamp_tbb = (value >> 10) & 0x3f;
    4b24:	3005d2ba 	srai	r2,r6,10
    4b28:	10800fcc 	andi	r2,r2,63
    4b2c:	20815715 	stw	r2,1372(r4)
        regs->reg_0x0108_ict_iamp_frp_tbb = (value >> 5) & 0x1f;
    4b30:	3005d17a 	srai	r2,r6,5
        regs->reg_0x0108_ict_iamp_gg_frp_tbb = (value >> 0) & 0x1f;
    4b34:	318007cc 	andi	r6,r6,31
    4b38:	21815915 	stw	r6,1380(r4)
        return;
    }
    if (addr == 0x0108)
    {
        regs->reg_0x0108_cg_iamp_tbb = (value >> 10) & 0x3f;
        regs->reg_0x0108_ict_iamp_frp_tbb = (value >> 5) & 0x1f;
    4b3c:	108007cc 	andi	r2,r2,31
    4b40:	20815815 	stw	r2,1376(r4)
    4b44:	f800283a 	ret
        regs->reg_0x0108_ict_iamp_gg_frp_tbb = (value >> 0) & 0x1f;
        return;
    }
    if (addr == 0x0109)
    4b48:	00804244 	movi	r2,265
    4b4c:	2880061e 	bne	r5,r2,4b68 <LMS7002M_regs_set+0x1254>
    {
        regs->reg_0x0109_rcal_lpfh_tbb = (value >> 8) & 0xff;
    4b50:	3005d23a 	srai	r2,r6,8
        regs->reg_0x0109_rcal_lpflad_tbb = (value >> 0) & 0xff;
    4b54:	31803fcc 	andi	r6,r6,255
    4b58:	21815b15 	stw	r6,1388(r4)
        regs->reg_0x0108_ict_iamp_gg_frp_tbb = (value >> 0) & 0x1f;
        return;
    }
    if (addr == 0x0109)
    {
        regs->reg_0x0109_rcal_lpfh_tbb = (value >> 8) & 0xff;
    4b5c:	10803fcc 	andi	r2,r2,255
    4b60:	20815a15 	stw	r2,1384(r4)
    4b64:	f800283a 	ret
        regs->reg_0x0109_rcal_lpflad_tbb = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x010A)
    4b68:	00804284 	movi	r2,266
    4b6c:	28800c1e 	bne	r5,r2,4ba0 <LMS7002M_regs_set+0x128c>
    {
        regs->reg_0x010a_tstin_tbb = (value >> 14) & 0x3;
    4b70:	3005d3ba 	srai	r2,r6,14
    4b74:	108000cc 	andi	r2,r2,3
    4b78:	20815c15 	stw	r2,1392(r4)
        regs->reg_0x010a_bypladder_tbb = (value >> 13) & 0x1;
    4b7c:	3005d37a 	srai	r2,r6,13
    4b80:	1080004c 	andi	r2,r2,1
    4b84:	20815d15 	stw	r2,1396(r4)
        regs->reg_0x010a_ccal_lpflad_tbb = (value >> 8) & 0x1f;
    4b88:	3005d23a 	srai	r2,r6,8
        regs->reg_0x010a_rcal_lpfs5_tbb = (value >> 0) & 0xff;
    4b8c:	31803fcc 	andi	r6,r6,255
    4b90:	21815f15 	stw	r6,1404(r4)
    }
    if (addr == 0x010A)
    {
        regs->reg_0x010a_tstin_tbb = (value >> 14) & 0x3;
        regs->reg_0x010a_bypladder_tbb = (value >> 13) & 0x1;
        regs->reg_0x010a_ccal_lpflad_tbb = (value >> 8) & 0x1f;
    4b94:	108007cc 	andi	r2,r2,31
    4b98:	20815e15 	stw	r2,1400(r4)
    4b9c:	f800283a 	ret
        regs->reg_0x010a_rcal_lpfs5_tbb = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x010b)
    4ba0:	008042c4 	movi	r2,267
    4ba4:	2880031e 	bne	r5,r2,4bb4 <LMS7002M_regs_set+0x12a0>
    {
        regs->reg_0x010b_value = (value >> 0) & 0xffff;
    4ba8:	31bfffcc 	andi	r6,r6,65535
    4bac:	21816015 	stw	r6,1408(r4)
    4bb0:	f800283a 	ret
        return;
    }
    if (addr == 0x010C)
    4bb4:	00804304 	movi	r2,268
    4bb8:	28801e1e 	bne	r5,r2,4c34 <LMS7002M_regs_set+0x1320>
    {
        regs->reg_0x010c_cdc_i_rfe = (value >> 12) & 0xf;
    4bbc:	3005d33a 	srai	r2,r6,12
    4bc0:	108003cc 	andi	r2,r2,15
    4bc4:	20816115 	stw	r2,1412(r4)
        regs->reg_0x010c_cdc_q_rfe = (value >> 8) & 0xf;
    4bc8:	3005d23a 	srai	r2,r6,8
    4bcc:	108003cc 	andi	r2,r2,15
    4bd0:	20816215 	stw	r2,1416(r4)
        regs->reg_0x010c_pd_lna_rfe = (value >> 7) & 0x1;
    4bd4:	3005d1fa 	srai	r2,r6,7
    4bd8:	1080004c 	andi	r2,r2,1
    4bdc:	20816315 	stw	r2,1420(r4)
        regs->reg_0x010c_pd_rloopb_1_rfe = (value >> 6) & 0x1;
    4be0:	3005d1ba 	srai	r2,r6,6
    4be4:	1080004c 	andi	r2,r2,1
    4be8:	20816415 	stw	r2,1424(r4)
        regs->reg_0x010c_pd_rloopb_2_rfe = (value >> 5) & 0x1;
    4bec:	3005d17a 	srai	r2,r6,5
    4bf0:	1080004c 	andi	r2,r2,1
    4bf4:	20816515 	stw	r2,1428(r4)
        regs->reg_0x010c_pd_mxlobuf_rfe = (value >> 4) & 0x1;
    4bf8:	3005d13a 	srai	r2,r6,4
    4bfc:	1080004c 	andi	r2,r2,1
    4c00:	20816615 	stw	r2,1432(r4)
        regs->reg_0x010c_pd_qgen_rfe = (value >> 3) & 0x1;
    4c04:	3005d0fa 	srai	r2,r6,3
    4c08:	1080004c 	andi	r2,r2,1
    4c0c:	20816715 	stw	r2,1436(r4)
        regs->reg_0x010c_pd_rssi_rfe = (value >> 2) & 0x1;
    4c10:	3005d0ba 	srai	r2,r6,2
    4c14:	1080004c 	andi	r2,r2,1
    4c18:	20816815 	stw	r2,1440(r4)
        regs->reg_0x010c_pd_tia_rfe = (value >> 1) & 0x1;
    4c1c:	3005d07a 	srai	r2,r6,1
        regs->reg_0x010c_en_g_rfe = (value >> 0) & 0x1;
    4c20:	3180004c 	andi	r6,r6,1
    4c24:	21816a15 	stw	r6,1448(r4)
        regs->reg_0x010c_pd_rloopb_1_rfe = (value >> 6) & 0x1;
        regs->reg_0x010c_pd_rloopb_2_rfe = (value >> 5) & 0x1;
        regs->reg_0x010c_pd_mxlobuf_rfe = (value >> 4) & 0x1;
        regs->reg_0x010c_pd_qgen_rfe = (value >> 3) & 0x1;
        regs->reg_0x010c_pd_rssi_rfe = (value >> 2) & 0x1;
        regs->reg_0x010c_pd_tia_rfe = (value >> 1) & 0x1;
    4c28:	1080004c 	andi	r2,r2,1
    4c2c:	20816915 	stw	r2,1444(r4)
    4c30:	f800283a 	ret
        regs->reg_0x010c_en_g_rfe = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x010D)
    4c34:	00804344 	movi	r2,269
    4c38:	2880151e 	bne	r5,r2,4c90 <LMS7002M_regs_set+0x137c>
    {
        regs->reg_0x010d_sel_path_rfe = (value >> 7) & 0x3;
    4c3c:	3005d1fa 	srai	r2,r6,7
    4c40:	108000cc 	andi	r2,r2,3
    4c44:	20816b15 	stw	r2,1452(r4)
        regs->reg_0x010d_en_dcoff_rxfe_rfe = (value >> 6) & 0x1;
    4c48:	3005d1ba 	srai	r2,r6,6
    4c4c:	1080004c 	andi	r2,r2,1
    4c50:	20816c15 	stw	r2,1456(r4)
        regs->reg_0x010d_en_inshsw_lb1_rfe = (value >> 4) & 0x1;
    4c54:	3005d13a 	srai	r2,r6,4
    4c58:	1080004c 	andi	r2,r2,1
    4c5c:	20816d15 	stw	r2,1460(r4)
        regs->reg_0x010d_en_inshsw_lb2_rfe = (value >> 3) & 0x1;
    4c60:	3005d0fa 	srai	r2,r6,3
    4c64:	1080004c 	andi	r2,r2,1
    4c68:	20816e15 	stw	r2,1464(r4)
        regs->reg_0x010d_en_inshsw_l_rfe = (value >> 2) & 0x1;
    4c6c:	3005d0ba 	srai	r2,r6,2
    4c70:	1080004c 	andi	r2,r2,1
    4c74:	20816f15 	stw	r2,1468(r4)
        regs->reg_0x010d_en_inshsw_w_rfe = (value >> 1) & 0x1;
    4c78:	3005d07a 	srai	r2,r6,1
        regs->reg_0x010d_en_nextrx_rfe = (value >> 0) & 0x1;
    4c7c:	3180004c 	andi	r6,r6,1
    4c80:	21817115 	stw	r6,1476(r4)
        regs->reg_0x010d_sel_path_rfe = (value >> 7) & 0x3;
        regs->reg_0x010d_en_dcoff_rxfe_rfe = (value >> 6) & 0x1;
        regs->reg_0x010d_en_inshsw_lb1_rfe = (value >> 4) & 0x1;
        regs->reg_0x010d_en_inshsw_lb2_rfe = (value >> 3) & 0x1;
        regs->reg_0x010d_en_inshsw_l_rfe = (value >> 2) & 0x1;
        regs->reg_0x010d_en_inshsw_w_rfe = (value >> 1) & 0x1;
    4c84:	1080004c 	andi	r2,r2,1
    4c88:	20817015 	stw	r2,1472(r4)
    4c8c:	f800283a 	ret
        regs->reg_0x010d_en_nextrx_rfe = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x010E)
    4c90:	00804384 	movi	r2,270
    4c94:	2880061e 	bne	r5,r2,4cb0 <LMS7002M_regs_set+0x139c>
    {
        regs->reg_0x010e_dcoffi_rfe = (value >> 7) & 0x7f;
    4c98:	3005d1fa 	srai	r2,r6,7
        regs->reg_0x010e_dcoffq_rfe = (value >> 0) & 0x7f;
    4c9c:	31801fcc 	andi	r6,r6,127
    4ca0:	21817315 	stw	r6,1484(r4)
        regs->reg_0x010d_en_nextrx_rfe = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x010E)
    {
        regs->reg_0x010e_dcoffi_rfe = (value >> 7) & 0x7f;
    4ca4:	10801fcc 	andi	r2,r2,127
    4ca8:	20817215 	stw	r2,1480(r4)
    4cac:	f800283a 	ret
        regs->reg_0x010e_dcoffq_rfe = (value >> 0) & 0x7f;
        return;
    }
    if (addr == 0x010F)
    4cb0:	008043c4 	movi	r2,271
    4cb4:	2880091e 	bne	r5,r2,4cdc <LMS7002M_regs_set+0x13c8>
    {
        regs->reg_0x010f_ict_loopb_rfe = (value >> 10) & 0x1f;
    4cb8:	3005d2ba 	srai	r2,r6,10
    4cbc:	108007cc 	andi	r2,r2,31
    4cc0:	20817415 	stw	r2,1488(r4)
        regs->reg_0x010f_ict_tiamain_rfe = (value >> 5) & 0x1f;
    4cc4:	3005d17a 	srai	r2,r6,5
        regs->reg_0x010f_ict_tiaout_rfe = (value >> 0) & 0x1f;
    4cc8:	318007cc 	andi	r6,r6,31
    4ccc:	21817615 	stw	r6,1496(r4)
        return;
    }
    if (addr == 0x010F)
    {
        regs->reg_0x010f_ict_loopb_rfe = (value >> 10) & 0x1f;
        regs->reg_0x010f_ict_tiamain_rfe = (value >> 5) & 0x1f;
    4cd0:	108007cc 	andi	r2,r2,31
    4cd4:	20817515 	stw	r2,1492(r4)
    4cd8:	f800283a 	ret
        regs->reg_0x010f_ict_tiaout_rfe = (value >> 0) & 0x1f;
        return;
    }
    if (addr == 0x0110)
    4cdc:	00804404 	movi	r2,272
    4ce0:	2880091e 	bne	r5,r2,4d08 <LMS7002M_regs_set+0x13f4>
    {
        regs->reg_0x0110_ict_lnacmo_rfe = (value >> 10) & 0x1f;
    4ce4:	3005d2ba 	srai	r2,r6,10
    4ce8:	108007cc 	andi	r2,r2,31
    4cec:	20817715 	stw	r2,1500(r4)
        regs->reg_0x0110_ict_lna_rfe = (value >> 5) & 0x1f;
    4cf0:	3005d17a 	srai	r2,r6,5
        regs->reg_0x0110_ict_lodc_rfe = (value >> 0) & 0x1f;
    4cf4:	318007cc 	andi	r6,r6,31
    4cf8:	21817915 	stw	r6,1508(r4)
        return;
    }
    if (addr == 0x0110)
    {
        regs->reg_0x0110_ict_lnacmo_rfe = (value >> 10) & 0x1f;
        regs->reg_0x0110_ict_lna_rfe = (value >> 5) & 0x1f;
    4cfc:	108007cc 	andi	r2,r2,31
    4d00:	20817815 	stw	r2,1504(r4)
    4d04:	f800283a 	ret
        regs->reg_0x0110_ict_lodc_rfe = (value >> 0) & 0x1f;
        return;
    }
    if (addr == 0x0111)
    4d08:	00804444 	movi	r2,273
    4d0c:	2880061e 	bne	r5,r2,4d28 <LMS7002M_regs_set+0x1414>
    {
        regs->reg_0x0111_cap_rxmxo_rfe = (value >> 5) & 0x1f;
    4d10:	3005d17a 	srai	r2,r6,5
        regs->reg_0x0111_cgsin_lna_rfe = (value >> 0) & 0x1f;
    4d14:	318007cc 	andi	r6,r6,31
    4d18:	21817b15 	stw	r6,1516(r4)
        regs->reg_0x0110_ict_lodc_rfe = (value >> 0) & 0x1f;
        return;
    }
    if (addr == 0x0111)
    {
        regs->reg_0x0111_cap_rxmxo_rfe = (value >> 5) & 0x1f;
    4d1c:	108007cc 	andi	r2,r2,31
    4d20:	20817a15 	stw	r2,1512(r4)
    4d24:	f800283a 	ret
        regs->reg_0x0111_cgsin_lna_rfe = (value >> 0) & 0x1f;
        return;
    }
    if (addr == 0x0112)
    4d28:	00804484 	movi	r2,274
    4d2c:	2880061e 	bne	r5,r2,4d48 <LMS7002M_regs_set+0x1434>
    {
        regs->reg_0x0112_ccomp_tia_rfe = (value >> 12) & 0xf;
    4d30:	3005d33a 	srai	r2,r6,12
        regs->reg_0x0112_cfb_tia_rfe = (value >> 0) & 0xfff;
    4d34:	3183ffcc 	andi	r6,r6,4095
    4d38:	21817d15 	stw	r6,1524(r4)
        regs->reg_0x0111_cgsin_lna_rfe = (value >> 0) & 0x1f;
        return;
    }
    if (addr == 0x0112)
    {
        regs->reg_0x0112_ccomp_tia_rfe = (value >> 12) & 0xf;
    4d3c:	108003cc 	andi	r2,r2,15
    4d40:	20817c15 	stw	r2,1520(r4)
    4d44:	f800283a 	ret
        regs->reg_0x0112_cfb_tia_rfe = (value >> 0) & 0xfff;
        return;
    }
    if (addr == 0x0113)
    4d48:	008044c4 	movi	r2,275
    4d4c:	2880091e 	bne	r5,r2,4d74 <LMS7002M_regs_set+0x1460>
    {
        regs->reg_0x0113_g_lna_rfe = (value >> 6) & 0xf;
    4d50:	3005d1ba 	srai	r2,r6,6
    4d54:	108003cc 	andi	r2,r2,15
    4d58:	20817e15 	stw	r2,1528(r4)
        regs->reg_0x0113_g_rxloopb_rfe = (value >> 2) & 0xf;
    4d5c:	3005d0ba 	srai	r2,r6,2
        regs->reg_0x0113_g_tia_rfe = (value >> 0) & 0x3;
    4d60:	318000cc 	andi	r6,r6,3
    4d64:	21818015 	stw	r6,1536(r4)
        return;
    }
    if (addr == 0x0113)
    {
        regs->reg_0x0113_g_lna_rfe = (value >> 6) & 0xf;
        regs->reg_0x0113_g_rxloopb_rfe = (value >> 2) & 0xf;
    4d68:	108003cc 	andi	r2,r2,15
    4d6c:	20817f15 	stw	r2,1532(r4)
    4d70:	f800283a 	ret
        regs->reg_0x0113_g_tia_rfe = (value >> 0) & 0x3;
        return;
    }
    if (addr == 0x0114)
    4d74:	00804504 	movi	r2,276
    4d78:	2880061e 	bne	r5,r2,4d94 <LMS7002M_regs_set+0x1480>
    {
        regs->reg_0x0114_rcomp_tia_rfe = (value >> 5) & 0xf;
    4d7c:	3005d17a 	srai	r2,r6,5
        regs->reg_0x0114_rfb_tia_rfe = (value >> 0) & 0x1f;
    4d80:	318007cc 	andi	r6,r6,31
    4d84:	21818215 	stw	r6,1544(r4)
        regs->reg_0x0113_g_tia_rfe = (value >> 0) & 0x3;
        return;
    }
    if (addr == 0x0114)
    {
        regs->reg_0x0114_rcomp_tia_rfe = (value >> 5) & 0xf;
    4d88:	108003cc 	andi	r2,r2,15
    4d8c:	20818115 	stw	r2,1540(r4)
    4d90:	f800283a 	ret
        regs->reg_0x0114_rfb_tia_rfe = (value >> 0) & 0x1f;
        return;
    }
    if (addr == 0x0115)
    4d94:	00804544 	movi	r2,277
    4d98:	2880121e 	bne	r5,r2,4de4 <LMS7002M_regs_set+0x14d0>
    {
        regs->reg_0x0115_en_lb_lpfh_rbb = (value >> 15) & 0x1;
    4d9c:	3005d3fa 	srai	r2,r6,15
    4da0:	1080004c 	andi	r2,r2,1
    4da4:	20818315 	stw	r2,1548(r4)
        regs->reg_0x0115_en_lb_lpfl_rbb = (value >> 14) & 0x1;
    4da8:	3005d3ba 	srai	r2,r6,14
    4dac:	1080004c 	andi	r2,r2,1
    4db0:	20818415 	stw	r2,1552(r4)
        regs->reg_0x0115_pd_lpfh_rbb = (value >> 3) & 0x1;
    4db4:	3005d0fa 	srai	r2,r6,3
    4db8:	1080004c 	andi	r2,r2,1
    4dbc:	20818515 	stw	r2,1556(r4)
        regs->reg_0x0115_pd_lpfl_rbb = (value >> 2) & 0x1;
    4dc0:	3005d0ba 	srai	r2,r6,2
    4dc4:	1080004c 	andi	r2,r2,1
    4dc8:	20818615 	stw	r2,1560(r4)
        regs->reg_0x0115_pd_pga_rbb = (value >> 1) & 0x1;
    4dcc:	3005d07a 	srai	r2,r6,1
        regs->reg_0x0115_en_g_rbb = (value >> 0) & 0x1;
    4dd0:	3180004c 	andi	r6,r6,1
    4dd4:	21818815 	stw	r6,1568(r4)
    {
        regs->reg_0x0115_en_lb_lpfh_rbb = (value >> 15) & 0x1;
        regs->reg_0x0115_en_lb_lpfl_rbb = (value >> 14) & 0x1;
        regs->reg_0x0115_pd_lpfh_rbb = (value >> 3) & 0x1;
        regs->reg_0x0115_pd_lpfl_rbb = (value >> 2) & 0x1;
        regs->reg_0x0115_pd_pga_rbb = (value >> 1) & 0x1;
    4dd8:	1080004c 	andi	r2,r2,1
    4ddc:	20818715 	stw	r2,1564(r4)
    4de0:	f800283a 	ret
        regs->reg_0x0115_en_g_rbb = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0116)
    4de4:	00804584 	movi	r2,278
    4de8:	2880091e 	bne	r5,r2,4e10 <LMS7002M_regs_set+0x14fc>
    {
        regs->reg_0x0116_r_ctl_lpf_rbb = (value >> 11) & 0x1f;
    4dec:	3005d2fa 	srai	r2,r6,11
    4df0:	108007cc 	andi	r2,r2,31
    4df4:	20818915 	stw	r2,1572(r4)
        regs->reg_0x0116_rcc_ctl_lpfh_rbb = (value >> 8) & 0x7;
    4df8:	3005d23a 	srai	r2,r6,8
        regs->reg_0x0116_c_ctl_lpfh_rbb = (value >> 0) & 0xff;
    4dfc:	31803fcc 	andi	r6,r6,255
    4e00:	21818b15 	stw	r6,1580(r4)
        return;
    }
    if (addr == 0x0116)
    {
        regs->reg_0x0116_r_ctl_lpf_rbb = (value >> 11) & 0x1f;
        regs->reg_0x0116_rcc_ctl_lpfh_rbb = (value >> 8) & 0x7;
    4e04:	108001cc 	andi	r2,r2,7
    4e08:	20818a15 	stw	r2,1576(r4)
    4e0c:	f800283a 	ret
        regs->reg_0x0116_c_ctl_lpfh_rbb = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x0117)
    4e10:	008045c4 	movi	r2,279
    4e14:	2880061e 	bne	r5,r2,4e30 <LMS7002M_regs_set+0x151c>
    {
        regs->reg_0x0117_rcc_ctl_lpfl_rbb = (value >> 11) & 0x7;
    4e18:	3005d2fa 	srai	r2,r6,11
        regs->reg_0x0117_c_ctl_lpfl_rbb = (value >> 0) & 0x7ff;
    4e1c:	3181ffcc 	andi	r6,r6,2047
    4e20:	21818d15 	stw	r6,1588(r4)
        regs->reg_0x0116_c_ctl_lpfh_rbb = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x0117)
    {
        regs->reg_0x0117_rcc_ctl_lpfl_rbb = (value >> 11) & 0x7;
    4e24:	108001cc 	andi	r2,r2,7
    4e28:	20818c15 	stw	r2,1584(r4)
    4e2c:	f800283a 	ret
        regs->reg_0x0117_c_ctl_lpfl_rbb = (value >> 0) & 0x7ff;
        return;
    }
    if (addr == 0x0118)
    4e30:	00804604 	movi	r2,280
    4e34:	2880091e 	bne	r5,r2,4e5c <LMS7002M_regs_set+0x1548>
    {
        regs->reg_0x0118_input_ctl_pga_rbb = (value >> 13) & 0x7;
    4e38:	3005d37a 	srai	r2,r6,13
    4e3c:	108001cc 	andi	r2,r2,7
    4e40:	20818e15 	stw	r2,1592(r4)
        regs->reg_0x0118_ict_lpf_in_rbb = (value >> 5) & 0x1f;
    4e44:	3005d17a 	srai	r2,r6,5
        regs->reg_0x0118_ict_lpf_out_rbb = (value >> 0) & 0x1f;
    4e48:	318007cc 	andi	r6,r6,31
    4e4c:	21819015 	stw	r6,1600(r4)
        return;
    }
    if (addr == 0x0118)
    {
        regs->reg_0x0118_input_ctl_pga_rbb = (value >> 13) & 0x7;
        regs->reg_0x0118_ict_lpf_in_rbb = (value >> 5) & 0x1f;
    4e50:	108007cc 	andi	r2,r2,31
    4e54:	20818f15 	stw	r2,1596(r4)
    4e58:	f800283a 	ret
        regs->reg_0x0118_ict_lpf_out_rbb = (value >> 0) & 0x1f;
        return;
    }
    if (addr == 0x0119)
    4e5c:	00804644 	movi	r2,281
    4e60:	28800c1e 	bne	r5,r2,4e94 <LMS7002M_regs_set+0x1580>
    {
        regs->reg_0x0119_osw_pga_rbb = (value >> 15) & 0x1;
    4e64:	3005d3fa 	srai	r2,r6,15
    4e68:	1080004c 	andi	r2,r2,1
    4e6c:	20819115 	stw	r2,1604(r4)
        regs->reg_0x0119_ict_pga_out_rbb = (value >> 10) & 0x1f;
    4e70:	3005d2ba 	srai	r2,r6,10
    4e74:	108007cc 	andi	r2,r2,31
    4e78:	20819215 	stw	r2,1608(r4)
        regs->reg_0x0119_ict_pga_in_rbb = (value >> 5) & 0x1f;
    4e7c:	3005d17a 	srai	r2,r6,5
        regs->reg_0x0119_g_pga_rbb = (value >> 0) & 0x1f;
    4e80:	318007cc 	andi	r6,r6,31
    4e84:	21819415 	stw	r6,1616(r4)
    }
    if (addr == 0x0119)
    {
        regs->reg_0x0119_osw_pga_rbb = (value >> 15) & 0x1;
        regs->reg_0x0119_ict_pga_out_rbb = (value >> 10) & 0x1f;
        regs->reg_0x0119_ict_pga_in_rbb = (value >> 5) & 0x1f;
    4e88:	108007cc 	andi	r2,r2,31
    4e8c:	20819315 	stw	r2,1612(r4)
    4e90:	f800283a 	ret
        regs->reg_0x0119_g_pga_rbb = (value >> 0) & 0x1f;
        return;
    }
    if (addr == 0x011A)
    4e94:	00804684 	movi	r2,282
    4e98:	2880061e 	bne	r5,r2,4eb4 <LMS7002M_regs_set+0x15a0>
    {
        regs->reg_0x011a_rcc_ctl_pga_rbb = (value >> 9) & 0x1f;
    4e9c:	3005d27a 	srai	r2,r6,9
        regs->reg_0x011a_c_ctl_pga_rbb = (value >> 0) & 0xff;
    4ea0:	31803fcc 	andi	r6,r6,255
    4ea4:	21819615 	stw	r6,1624(r4)
        regs->reg_0x0119_g_pga_rbb = (value >> 0) & 0x1f;
        return;
    }
    if (addr == 0x011A)
    {
        regs->reg_0x011a_rcc_ctl_pga_rbb = (value >> 9) & 0x1f;
    4ea8:	108007cc 	andi	r2,r2,31
    4eac:	20819515 	stw	r2,1620(r4)
    4eb0:	f800283a 	ret
        regs->reg_0x011a_c_ctl_pga_rbb = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x011B)
    4eb4:	008046c4 	movi	r2,283
    4eb8:	2880031e 	bne	r5,r2,4ec8 <LMS7002M_regs_set+0x15b4>
    {
        regs->reg_0x011b_resrv_rbb = (value >> 0) & 0x7f;
    4ebc:	31801fcc 	andi	r6,r6,127
    4ec0:	21819715 	stw	r6,1628(r4)
    4ec4:	f800283a 	ret
        return;
    }
    if (addr == 0x011C)
    4ec8:	00804704 	movi	r2,284
    4ecc:	2880301e 	bne	r5,r2,4f90 <LMS7002M_regs_set+0x167c>
    {
        regs->reg_0x011c_reset_n = (value >> 15) & 0x1;
    4ed0:	3005d3fa 	srai	r2,r6,15
    4ed4:	1080004c 	andi	r2,r2,1
    4ed8:	20819815 	stw	r2,1632(r4)
        regs->reg_0x011c_spdup_vco = (value >> 14) & 0x1;
    4edc:	3005d3ba 	srai	r2,r6,14
    4ee0:	1080004c 	andi	r2,r2,1
    4ee4:	20819915 	stw	r2,1636(r4)
        regs->reg_0x011c_bypldo_vco = (value >> 13) & 0x1;
    4ee8:	3005d37a 	srai	r2,r6,13
    4eec:	1080004c 	andi	r2,r2,1
    4ef0:	20819a15 	stw	r2,1640(r4)
        regs->reg_0x011c_en_coarsepll = (value >> 12) & 0x1;
    4ef4:	3005d33a 	srai	r2,r6,12
    4ef8:	1080004c 	andi	r2,r2,1
    4efc:	20819b15 	stw	r2,1644(r4)
        regs->reg_0x011c_curlim_vco = (value >> 11) & 0x1;
    4f00:	3005d2fa 	srai	r2,r6,11
    4f04:	1080004c 	andi	r2,r2,1
    4f08:	20819c15 	stw	r2,1648(r4)
        regs->reg_0x011c_en_div2_divprog = (value >> 10) & 0x1;
    4f0c:	3005d2ba 	srai	r2,r6,10
    4f10:	1080004c 	andi	r2,r2,1
    4f14:	20819d15 	stw	r2,1652(r4)
        regs->reg_0x011c_en_intonly_sdm = (value >> 9) & 0x1;
    4f18:	3005d27a 	srai	r2,r6,9
    4f1c:	1080004c 	andi	r2,r2,1
    4f20:	20819e15 	stw	r2,1656(r4)
        regs->reg_0x011c_en_sdm_clk = (value >> 8) & 0x1;
    4f24:	3005d23a 	srai	r2,r6,8
    4f28:	1080004c 	andi	r2,r2,1
    4f2c:	20819f15 	stw	r2,1660(r4)
        regs->reg_0x011c_pd_fbdiv = (value >> 7) & 0x1;
    4f30:	3005d1fa 	srai	r2,r6,7
    4f34:	1080004c 	andi	r2,r2,1
    4f38:	2081a015 	stw	r2,1664(r4)
        regs->reg_0x011c_pd_loch_t2rbuf = (value >> 6) & 0x1;
    4f3c:	3005d1ba 	srai	r2,r6,6
    4f40:	1080004c 	andi	r2,r2,1
    4f44:	2081a115 	stw	r2,1668(r4)
        regs->reg_0x011c_pd_cp = (value >> 5) & 0x1;
    4f48:	3005d17a 	srai	r2,r6,5
    4f4c:	1080004c 	andi	r2,r2,1
    4f50:	2081a215 	stw	r2,1672(r4)
        regs->reg_0x011c_pd_fdiv = (value >> 4) & 0x1;
    4f54:	3005d13a 	srai	r2,r6,4
    4f58:	1080004c 	andi	r2,r2,1
    4f5c:	2081a315 	stw	r2,1676(r4)
        regs->reg_0x011c_pd_sdm = (value >> 3) & 0x1;
    4f60:	3005d0fa 	srai	r2,r6,3
    4f64:	1080004c 	andi	r2,r2,1
    4f68:	2081a415 	stw	r2,1680(r4)
        regs->reg_0x011c_pd_vco_comp = (value >> 2) & 0x1;
    4f6c:	3005d0ba 	srai	r2,r6,2
    4f70:	1080004c 	andi	r2,r2,1
    4f74:	2081a515 	stw	r2,1684(r4)
        regs->reg_0x011c_pd_vco = (value >> 1) & 0x1;
    4f78:	3005d07a 	srai	r2,r6,1
        regs->reg_0x011c_en_g = (value >> 0) & 0x1;
    4f7c:	3180004c 	andi	r6,r6,1
    4f80:	2181a715 	stw	r6,1692(r4)
        regs->reg_0x011c_pd_loch_t2rbuf = (value >> 6) & 0x1;
        regs->reg_0x011c_pd_cp = (value >> 5) & 0x1;
        regs->reg_0x011c_pd_fdiv = (value >> 4) & 0x1;
        regs->reg_0x011c_pd_sdm = (value >> 3) & 0x1;
        regs->reg_0x011c_pd_vco_comp = (value >> 2) & 0x1;
        regs->reg_0x011c_pd_vco = (value >> 1) & 0x1;
    4f84:	1080004c 	andi	r2,r2,1
    4f88:	2081a615 	stw	r2,1688(r4)
    4f8c:	f800283a 	ret
        regs->reg_0x011c_en_g = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x011D)
    4f90:	00804744 	movi	r2,285
    4f94:	2880031e 	bne	r5,r2,4fa4 <LMS7002M_regs_set+0x1690>
    {
        regs->reg_0x011d_frac_sdm = (value >> 0) & 0xffff;
    4f98:	31bfffcc 	andi	r6,r6,65535
    4f9c:	2181a815 	stw	r6,1696(r4)
    4fa0:	f800283a 	ret
        return;
    }
    if (addr == 0x011E)
    4fa4:	00804784 	movi	r2,286
    4fa8:	2880061e 	bne	r5,r2,4fc4 <LMS7002M_regs_set+0x16b0>
    {
        regs->reg_0x011e_int_sdm = (value >> 4) & 0x3ff;
    4fac:	3005d13a 	srai	r2,r6,4
        regs->reg_0x011e_frac_sdm = (value >> 0) & 0xf;
    4fb0:	318003cc 	andi	r6,r6,15
    4fb4:	2181aa15 	stw	r6,1704(r4)
        regs->reg_0x011d_frac_sdm = (value >> 0) & 0xffff;
        return;
    }
    if (addr == 0x011E)
    {
        regs->reg_0x011e_int_sdm = (value >> 4) & 0x3ff;
    4fb8:	1080ffcc 	andi	r2,r2,1023
    4fbc:	2081a915 	stw	r2,1700(r4)
    4fc0:	f800283a 	ret
        regs->reg_0x011e_frac_sdm = (value >> 0) & 0xf;
        return;
    }
    if (addr == 0x011F)
    4fc4:	008047c4 	movi	r2,287
    4fc8:	2880151e 	bne	r5,r2,5020 <LMS7002M_regs_set+0x170c>
    {
        regs->reg_0x011f_pw_div2_loch = (value >> 12) & 0x7;
    4fcc:	3005d33a 	srai	r2,r6,12
    4fd0:	108001cc 	andi	r2,r2,7
    4fd4:	2081ab15 	stw	r2,1708(r4)
        regs->reg_0x011f_pw_div4_loch = (value >> 9) & 0x7;
    4fd8:	3005d27a 	srai	r2,r6,9
    4fdc:	108001cc 	andi	r2,r2,7
    4fe0:	2081ac15 	stw	r2,1712(r4)
        regs->reg_0x011f_div_loch = (value >> 6) & 0x7;
    4fe4:	3005d1ba 	srai	r2,r6,6
    4fe8:	108001cc 	andi	r2,r2,7
    4fec:	2081ad15 	stw	r2,1716(r4)
        regs->reg_0x011f_tst_sx = (value >> 3) & 0x7;
    4ff0:	3005d0fa 	srai	r2,r6,3
    4ff4:	108001cc 	andi	r2,r2,7
    4ff8:	2081ae15 	stw	r2,1720(r4)
        regs->reg_0x011f_sel_sdmclk = (value >> 2) & 0x1;
    4ffc:	3005d0ba 	srai	r2,r6,2
    5000:	1080004c 	andi	r2,r2,1
    5004:	2081af15 	stw	r2,1724(r4)
        regs->reg_0x011f_sx_dither_en = (value >> 1) & 0x1;
    5008:	3005d07a 	srai	r2,r6,1
        regs->reg_0x011f_rev_sdmclk = (value >> 0) & 0x1;
    500c:	3180004c 	andi	r6,r6,1
    5010:	2181b115 	stw	r6,1732(r4)
        regs->reg_0x011f_pw_div2_loch = (value >> 12) & 0x7;
        regs->reg_0x011f_pw_div4_loch = (value >> 9) & 0x7;
        regs->reg_0x011f_div_loch = (value >> 6) & 0x7;
        regs->reg_0x011f_tst_sx = (value >> 3) & 0x7;
        regs->reg_0x011f_sel_sdmclk = (value >> 2) & 0x1;
        regs->reg_0x011f_sx_dither_en = (value >> 1) & 0x1;
    5014:	1080004c 	andi	r2,r2,1
    5018:	2081b015 	stw	r2,1728(r4)
    501c:	f800283a 	ret
        regs->reg_0x011f_rev_sdmclk = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0120)
    5020:	00804804 	movi	r2,288
    5024:	2880061e 	bne	r5,r2,5040 <LMS7002M_regs_set+0x172c>
    {
        regs->reg_0x0120_vdiv_vco = (value >> 8) & 0xff;
    5028:	3005d23a 	srai	r2,r6,8
        regs->reg_0x0120_ict_vco = (value >> 0) & 0xff;
    502c:	31803fcc 	andi	r6,r6,255
    5030:	2181b315 	stw	r6,1740(r4)
        regs->reg_0x011f_rev_sdmclk = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0120)
    {
        regs->reg_0x0120_vdiv_vco = (value >> 8) & 0xff;
    5034:	10803fcc 	andi	r2,r2,255
    5038:	2081b215 	stw	r2,1736(r4)
    503c:	f800283a 	ret
        regs->reg_0x0120_ict_vco = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x0121)
    5040:	00804844 	movi	r2,289
    5044:	28800c1e 	bne	r5,r2,5078 <LMS7002M_regs_set+0x1764>
    {
        regs->reg_0x0121_rsel_ldo_vco = (value >> 11) & 0x1f;
    5048:	3005d2fa 	srai	r2,r6,11
    504c:	108007cc 	andi	r2,r2,31
    5050:	2081b415 	stw	r2,1744(r4)
        regs->reg_0x0121_csw_vco = (value >> 3) & 0xff;
    5054:	3005d0fa 	srai	r2,r6,3
    5058:	10803fcc 	andi	r2,r2,255
    505c:	2081b515 	stw	r2,1748(r4)
        regs->reg_0x0121_sel_vco = (value >> 1) & 0x3;
    5060:	3005d07a 	srai	r2,r6,1
        regs->reg_0x0121_coarse_start = (value >> 0) & 0x1;
    5064:	3180004c 	andi	r6,r6,1
    5068:	2181b715 	stw	r6,1756(r4)
    }
    if (addr == 0x0121)
    {
        regs->reg_0x0121_rsel_ldo_vco = (value >> 11) & 0x1f;
        regs->reg_0x0121_csw_vco = (value >> 3) & 0xff;
        regs->reg_0x0121_sel_vco = (value >> 1) & 0x3;
    506c:	108000cc 	andi	r2,r2,3
    5070:	2081b615 	stw	r2,1752(r4)
    5074:	f800283a 	ret
        regs->reg_0x0121_coarse_start = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0122)
    5078:	00804884 	movi	r2,290
    507c:	2880091e 	bne	r5,r2,50a4 <LMS7002M_regs_set+0x1790>
    {
        regs->reg_0x0122_revph_pfd = (value >> 12) & 0x1;
    5080:	3005d33a 	srai	r2,r6,12
    5084:	1080004c 	andi	r2,r2,1
    5088:	2081b815 	stw	r2,1760(r4)
        regs->reg_0x0122_ioffset_cp = (value >> 6) & 0x3f;
    508c:	3005d1ba 	srai	r2,r6,6
        regs->reg_0x0122_ipulse_cp = (value >> 0) & 0x3f;
    5090:	31800fcc 	andi	r6,r6,63
    5094:	2181ba15 	stw	r6,1768(r4)
        return;
    }
    if (addr == 0x0122)
    {
        regs->reg_0x0122_revph_pfd = (value >> 12) & 0x1;
        regs->reg_0x0122_ioffset_cp = (value >> 6) & 0x3f;
    5098:	10800fcc 	andi	r2,r2,63
    509c:	2081b915 	stw	r2,1764(r4)
    50a0:	f800283a 	ret
        regs->reg_0x0122_ipulse_cp = (value >> 0) & 0x3f;
        return;
    }
    if (addr == 0x0123)
    50a4:	008048c4 	movi	r2,291
    50a8:	2880151e 	bne	r5,r2,5100 <LMS7002M_regs_set+0x17ec>
    {
        regs->reg_0x0123_coarse_stepdone = (value >> 15) & 0x1;
    50ac:	3005d3fa 	srai	r2,r6,15
    50b0:	1080004c 	andi	r2,r2,1
    50b4:	2081bb15 	stw	r2,1772(r4)
        regs->reg_0x0123_coarsepll_compo = (value >> 14) & 0x1;
    50b8:	3005d3ba 	srai	r2,r6,14
    50bc:	1080004c 	andi	r2,r2,1
    50c0:	2081bc15 	stw	r2,1776(r4)
        regs->reg_0x0123_vco_cmpho = (value >> 13) & 0x1;
    50c4:	3005d37a 	srai	r2,r6,13
    50c8:	1080004c 	andi	r2,r2,1
    50cc:	2081bd15 	stw	r2,1780(r4)
        regs->reg_0x0123_vco_cmplo = (value >> 12) & 0x1;
    50d0:	3005d33a 	srai	r2,r6,12
    50d4:	1080004c 	andi	r2,r2,1
    50d8:	2081be15 	stw	r2,1784(r4)
        regs->reg_0x0123_cp2_pll = (value >> 8) & 0xf;
    50dc:	3005d23a 	srai	r2,r6,8
    50e0:	108003cc 	andi	r2,r2,15
    50e4:	2081bf15 	stw	r2,1788(r4)
        regs->reg_0x0123_cp3_pll = (value >> 4) & 0xf;
    50e8:	3005d13a 	srai	r2,r6,4
        regs->reg_0x0123_cz = (value >> 0) & 0xf;
    50ec:	318003cc 	andi	r6,r6,15
    50f0:	2181c115 	stw	r6,1796(r4)
        regs->reg_0x0123_coarse_stepdone = (value >> 15) & 0x1;
        regs->reg_0x0123_coarsepll_compo = (value >> 14) & 0x1;
        regs->reg_0x0123_vco_cmpho = (value >> 13) & 0x1;
        regs->reg_0x0123_vco_cmplo = (value >> 12) & 0x1;
        regs->reg_0x0123_cp2_pll = (value >> 8) & 0xf;
        regs->reg_0x0123_cp3_pll = (value >> 4) & 0xf;
    50f4:	108003cc 	andi	r2,r2,15
    50f8:	2081c015 	stw	r2,1792(r4)
    50fc:	f800283a 	ret
        regs->reg_0x0123_cz = (value >> 0) & 0xf;
        return;
    }
    if (addr == 0x0124)
    5100:	00804904 	movi	r2,292
    5104:	28800f1e 	bne	r5,r2,5144 <LMS7002M_regs_set+0x1830>
    {
        regs->reg_0x0124_en_dir_sxx = (value >> 4) & 0x1;
    5108:	3005d13a 	srai	r2,r6,4
    510c:	1080004c 	andi	r2,r2,1
    5110:	2081c215 	stw	r2,1800(r4)
        regs->reg_0x0124_en_dir_rbb = (value >> 3) & 0x1;
    5114:	3005d0fa 	srai	r2,r6,3
    5118:	1080004c 	andi	r2,r2,1
    511c:	2081c315 	stw	r2,1804(r4)
        regs->reg_0x0124_en_dir_rfe = (value >> 2) & 0x1;
    5120:	3005d0ba 	srai	r2,r6,2
    5124:	1080004c 	andi	r2,r2,1
    5128:	2081c415 	stw	r2,1808(r4)
        regs->reg_0x0124_en_dir_tbb = (value >> 1) & 0x1;
    512c:	3005d07a 	srai	r2,r6,1
        regs->reg_0x0124_en_dir_trf = (value >> 0) & 0x1;
    5130:	3180004c 	andi	r6,r6,1
    5134:	2181c615 	stw	r6,1816(r4)
    if (addr == 0x0124)
    {
        regs->reg_0x0124_en_dir_sxx = (value >> 4) & 0x1;
        regs->reg_0x0124_en_dir_rbb = (value >> 3) & 0x1;
        regs->reg_0x0124_en_dir_rfe = (value >> 2) & 0x1;
        regs->reg_0x0124_en_dir_tbb = (value >> 1) & 0x1;
    5138:	1080004c 	andi	r2,r2,1
    513c:	2081c515 	stw	r2,1812(r4)
    5140:	f800283a 	ret
        regs->reg_0x0124_en_dir_trf = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0125)
    5144:	00804944 	movi	r2,293
    5148:	2880031e 	bne	r5,r2,5158 <LMS7002M_regs_set+0x1844>
    {
        regs->reg_0x0125_value = (value >> 0) & 0xffff;
    514c:	31bfffcc 	andi	r6,r6,65535
    5150:	2181c715 	stw	r6,1820(r4)
    5154:	f800283a 	ret
        return;
    }
    if (addr == 0x0126)
    5158:	00804984 	movi	r2,294
    515c:	2880031e 	bne	r5,r2,516c <LMS7002M_regs_set+0x1858>
    {
        regs->reg_0x0126_value = (value >> 0) & 0xffff;
    5160:	31bfffcc 	andi	r6,r6,65535
    5164:	2181c815 	stw	r6,1824(r4)
    5168:	f800283a 	ret
        return;
    }
    if (addr == 0x0200)
    516c:	00808004 	movi	r2,512
    5170:	28801b1e 	bne	r5,r2,51e0 <LMS7002M_regs_set+0x18cc>
    {
        regs->reg_0x0200_tsgfc = (value >> 9) & 0x1;
    5174:	3005d27a 	srai	r2,r6,9
    5178:	1080004c 	andi	r2,r2,1
    517c:	2081c915 	stw	r2,1828(r4)
        regs->reg_0x0200_tsgfcw = (value >> 7) & 0x3;
    5180:	3005d1fa 	srai	r2,r6,7
    5184:	108000cc 	andi	r2,r2,3
    5188:	2081ca15 	stw	r2,1832(r4)
        regs->reg_0x0200_tsgdcldq = (value >> 6) & 0x1;
    518c:	3005d1ba 	srai	r2,r6,6
    5190:	1080004c 	andi	r2,r2,1
    5194:	2081cb15 	stw	r2,1836(r4)
        regs->reg_0x0200_tsgdcldi = (value >> 5) & 0x1;
    5198:	3005d17a 	srai	r2,r6,5
    519c:	1080004c 	andi	r2,r2,1
    51a0:	2081cc15 	stw	r2,1840(r4)
        regs->reg_0x0200_tsgswapiq = (value >> 4) & 0x1;
    51a4:	3005d13a 	srai	r2,r6,4
    51a8:	1080004c 	andi	r2,r2,1
    51ac:	2081cd15 	stw	r2,1844(r4)
        regs->reg_0x0200_tsgmode = (value >> 3) & 0x1;
    51b0:	3005d0fa 	srai	r2,r6,3
    51b4:	1080004c 	andi	r2,r2,1
    51b8:	2081ce15 	stw	r2,1848(r4)
        regs->reg_0x0200_insel = (value >> 2) & 0x1;
    51bc:	3005d0ba 	srai	r2,r6,2
    51c0:	1080004c 	andi	r2,r2,1
    51c4:	2081cf15 	stw	r2,1852(r4)
        regs->reg_0x0200_bstart = (value >> 1) & 0x1;
    51c8:	3005d07a 	srai	r2,r6,1
        regs->reg_0x0200_en = (value >> 0) & 0x1;
    51cc:	3180004c 	andi	r6,r6,1
    51d0:	2181d115 	stw	r6,1860(r4)
        regs->reg_0x0200_tsgdcldq = (value >> 6) & 0x1;
        regs->reg_0x0200_tsgdcldi = (value >> 5) & 0x1;
        regs->reg_0x0200_tsgswapiq = (value >> 4) & 0x1;
        regs->reg_0x0200_tsgmode = (value >> 3) & 0x1;
        regs->reg_0x0200_insel = (value >> 2) & 0x1;
        regs->reg_0x0200_bstart = (value >> 1) & 0x1;
    51d4:	1080004c 	andi	r2,r2,1
    51d8:	2081d015 	stw	r2,1856(r4)
    51dc:	f800283a 	ret
        regs->reg_0x0200_en = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0201)
    51e0:	00808044 	movi	r2,513
    51e4:	2880031e 	bne	r5,r2,51f4 <LMS7002M_regs_set+0x18e0>
    {
        regs->reg_0x0201_gcorrq = (value >> 0) & 0x7ff;
    51e8:	3181ffcc 	andi	r6,r6,2047
    51ec:	2181d215 	stw	r6,1864(r4)
    51f0:	f800283a 	ret
        return;
    }
    if (addr == 0x0202)
    51f4:	00808084 	movi	r2,514
    51f8:	2880031e 	bne	r5,r2,5208 <LMS7002M_regs_set+0x18f4>
    {
        regs->reg_0x0202_gcorri = (value >> 0) & 0x7ff;
    51fc:	3181ffcc 	andi	r6,r6,2047
    5200:	2181d315 	stw	r6,1868(r4)
    5204:	f800283a 	ret
        return;
    }
    if (addr == 0x0203)
    5208:	008080c4 	movi	r2,515
    520c:	2880061e 	bne	r5,r2,5228 <LMS7002M_regs_set+0x1914>
    {
        regs->reg_0x0203_hbi_ovr = (value >> 12) & 0x7;
    5210:	3005d33a 	srai	r2,r6,12
        regs->reg_0x0203_iqcorr = (value >> 0) & 0xfff;
    5214:	3183ffcc 	andi	r6,r6,4095
    5218:	2181d515 	stw	r6,1876(r4)
        regs->reg_0x0202_gcorri = (value >> 0) & 0x7ff;
        return;
    }
    if (addr == 0x0203)
    {
        regs->reg_0x0203_hbi_ovr = (value >> 12) & 0x7;
    521c:	108001cc 	andi	r2,r2,7
    5220:	2081d415 	stw	r2,1872(r4)
    5224:	f800283a 	ret
        regs->reg_0x0203_iqcorr = (value >> 0) & 0xfff;
        return;
    }
    if (addr == 0x0204)
    5228:	00808104 	movi	r2,516
    522c:	2880061e 	bne	r5,r2,5248 <LMS7002M_regs_set+0x1934>
    {
        regs->reg_0x0204_dccorri = (value >> 8) & 0xff;
    5230:	3005d23a 	srai	r2,r6,8
        regs->reg_0x0204_dccorrq = (value >> 0) & 0xff;
    5234:	31803fcc 	andi	r6,r6,255
    5238:	2181d715 	stw	r6,1884(r4)
        regs->reg_0x0203_iqcorr = (value >> 0) & 0xfff;
        return;
    }
    if (addr == 0x0204)
    {
        regs->reg_0x0204_dccorri = (value >> 8) & 0xff;
    523c:	10803fcc 	andi	r2,r2,255
    5240:	2081d615 	stw	r2,1880(r4)
    5244:	f800283a 	ret
        regs->reg_0x0204_dccorrq = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x0205)
    5248:	00808144 	movi	r2,517
    524c:	2880061e 	bne	r5,r2,5268 <LMS7002M_regs_set+0x1954>
    {
        regs->reg_0x0205_gfir1_l = (value >> 8) & 0x7;
    5250:	3005d23a 	srai	r2,r6,8
        regs->reg_0x0205_gfir1_n = (value >> 0) & 0xff;
    5254:	31803fcc 	andi	r6,r6,255
    5258:	2181d915 	stw	r6,1892(r4)
        regs->reg_0x0204_dccorrq = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x0205)
    {
        regs->reg_0x0205_gfir1_l = (value >> 8) & 0x7;
    525c:	108001cc 	andi	r2,r2,7
    5260:	2081d815 	stw	r2,1888(r4)
    5264:	f800283a 	ret
        regs->reg_0x0205_gfir1_n = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x0206)
    5268:	00808184 	movi	r2,518
    526c:	2880061e 	bne	r5,r2,5288 <LMS7002M_regs_set+0x1974>
    {
        regs->reg_0x0206_gfir2_l = (value >> 8) & 0x7;
    5270:	3005d23a 	srai	r2,r6,8
        regs->reg_0x0206_gfir2_n = (value >> 0) & 0xff;
    5274:	31803fcc 	andi	r6,r6,255
    5278:	2181db15 	stw	r6,1900(r4)
        regs->reg_0x0205_gfir1_n = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x0206)
    {
        regs->reg_0x0206_gfir2_l = (value >> 8) & 0x7;
    527c:	108001cc 	andi	r2,r2,7
    5280:	2081da15 	stw	r2,1896(r4)
    5284:	f800283a 	ret
        regs->reg_0x0206_gfir2_n = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x0207)
    5288:	008081c4 	movi	r2,519
    528c:	2880061e 	bne	r5,r2,52a8 <LMS7002M_regs_set+0x1994>
    {
        regs->reg_0x0207_gfir3_l = (value >> 8) & 0x7;
    5290:	3005d23a 	srai	r2,r6,8
        regs->reg_0x0207_gfir3_n = (value >> 0) & 0xff;
    5294:	31803fcc 	andi	r6,r6,255
    5298:	2181dd15 	stw	r6,1908(r4)
        regs->reg_0x0206_gfir2_n = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x0207)
    {
        regs->reg_0x0207_gfir3_l = (value >> 8) & 0x7;
    529c:	108001cc 	andi	r2,r2,7
    52a0:	2081dc15 	stw	r2,1904(r4)
    52a4:	f800283a 	ret
        regs->reg_0x0207_gfir3_n = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x0208)
    52a8:	00808204 	movi	r2,520
    52ac:	28801e1e 	bne	r5,r2,5328 <LMS7002M_regs_set+0x1a14>
    {
        regs->reg_0x0208_cmix_gain = (value >> 14) & 0x3;
    52b0:	3005d3ba 	srai	r2,r6,14
    52b4:	108000cc 	andi	r2,r2,3
    52b8:	2081de15 	stw	r2,1912(r4)
        regs->reg_0x0208_cmix_sc = (value >> 13) & 0x1;
    52bc:	3005d37a 	srai	r2,r6,13
    52c0:	1080004c 	andi	r2,r2,1
    52c4:	2081df15 	stw	r2,1916(r4)
        regs->reg_0x0208_cmix_byp = (value >> 8) & 0x1;
    52c8:	3005d23a 	srai	r2,r6,8
    52cc:	1080004c 	andi	r2,r2,1
    52d0:	2081e015 	stw	r2,1920(r4)
        regs->reg_0x0208_isinc_byp = (value >> 7) & 0x1;
    52d4:	3005d1fa 	srai	r2,r6,7
    52d8:	1080004c 	andi	r2,r2,1
    52dc:	2081e115 	stw	r2,1924(r4)
        regs->reg_0x0208_gfir3_byp = (value >> 6) & 0x1;
    52e0:	3005d1ba 	srai	r2,r6,6
    52e4:	1080004c 	andi	r2,r2,1
    52e8:	2081e215 	stw	r2,1928(r4)
        regs->reg_0x0208_gfir2_byp = (value >> 5) & 0x1;
    52ec:	3005d17a 	srai	r2,r6,5
    52f0:	1080004c 	andi	r2,r2,1
    52f4:	2081e315 	stw	r2,1932(r4)
        regs->reg_0x0208_gfir1_byp = (value >> 4) & 0x1;
    52f8:	3005d13a 	srai	r2,r6,4
    52fc:	1080004c 	andi	r2,r2,1
    5300:	2081e415 	stw	r2,1936(r4)
        regs->reg_0x0208_dc_byp = (value >> 3) & 0x1;
    5304:	3005d0fa 	srai	r2,r6,3
    5308:	1080004c 	andi	r2,r2,1
    530c:	2081e515 	stw	r2,1940(r4)
        regs->reg_0x0208_gc_byp = (value >> 1) & 0x1;
    5310:	3005d07a 	srai	r2,r6,1
        regs->reg_0x0208_ph_byp = (value >> 0) & 0x1;
    5314:	3180004c 	andi	r6,r6,1
    5318:	2181e715 	stw	r6,1948(r4)
        regs->reg_0x0208_isinc_byp = (value >> 7) & 0x1;
        regs->reg_0x0208_gfir3_byp = (value >> 6) & 0x1;
        regs->reg_0x0208_gfir2_byp = (value >> 5) & 0x1;
        regs->reg_0x0208_gfir1_byp = (value >> 4) & 0x1;
        regs->reg_0x0208_dc_byp = (value >> 3) & 0x1;
        regs->reg_0x0208_gc_byp = (value >> 1) & 0x1;
    531c:	1080004c 	andi	r2,r2,1
    5320:	2081e615 	stw	r2,1944(r4)
    5324:	f800283a 	ret
        regs->reg_0x0208_ph_byp = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0209)
    5328:	00808244 	movi	r2,521
    532c:	2880031e 	bne	r5,r2,533c <LMS7002M_regs_set+0x1a28>
    {
        regs->reg_0x0209_value = (value >> 0) & 0xffff;
    5330:	31bfffcc 	andi	r6,r6,65535
    5334:	2181e815 	stw	r6,1952(r4)
    5338:	f800283a 	ret
        return;
    }
    if (addr == 0x020a)
    533c:	00808284 	movi	r2,522
    5340:	2880031e 	bne	r5,r2,5350 <LMS7002M_regs_set+0x1a3c>
    {
        regs->reg_0x020a_value = (value >> 0) & 0xffff;
    5344:	31bfffcc 	andi	r6,r6,65535
    5348:	2181e915 	stw	r6,1956(r4)
    534c:	f800283a 	ret
        return;
    }
    if (addr == 0x020C)
    5350:	00808304 	movi	r2,524
    5354:	2880031e 	bne	r5,r2,5364 <LMS7002M_regs_set+0x1a50>
    {
        regs->reg_0x020c_dc_reg = (value >> 0) & 0xffff;
    5358:	31bfffcc 	andi	r6,r6,65535
    535c:	2181ea15 	stw	r6,1960(r4)
    5360:	f800283a 	ret
        return;
    }
    if (addr == 0x0240)
    5364:	00809004 	movi	r2,576
    5368:	2880091e 	bne	r5,r2,5390 <LMS7002M_regs_set+0x1a7c>
    {
        regs->reg_0x0240_dthbit = (value >> 5) & 0xf;
    536c:	3005d17a 	srai	r2,r6,5
    5370:	108003cc 	andi	r2,r2,15
    5374:	2081eb15 	stw	r2,1964(r4)
        regs->reg_0x0240_sel = (value >> 1) & 0xf;
    5378:	3005d07a 	srai	r2,r6,1
        regs->reg_0x0240_mode = (value >> 0) & 0x1;
    537c:	3180004c 	andi	r6,r6,1
    5380:	2181ed15 	stw	r6,1972(r4)
        return;
    }
    if (addr == 0x0240)
    {
        regs->reg_0x0240_dthbit = (value >> 5) & 0xf;
        regs->reg_0x0240_sel = (value >> 1) & 0xf;
    5384:	108003cc 	andi	r2,r2,15
    5388:	2081ec15 	stw	r2,1968(r4)
    538c:	f800283a 	ret
        regs->reg_0x0240_mode = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0241)
    5390:	00809044 	movi	r2,577
    5394:	2880031e 	bne	r5,r2,53a4 <LMS7002M_regs_set+0x1a90>
    {
        regs->reg_0x0241_pho = (value >> 0) & 0xffff;
    5398:	31bfffcc 	andi	r6,r6,65535
    539c:	2181ee15 	stw	r6,1976(r4)
    53a0:	f800283a 	ret
        return;
    }
    if (addr == 0x0242)
    53a4:	00809084 	movi	r2,578
    53a8:	2880031e 	bne	r5,r2,53b8 <LMS7002M_regs_set+0x1aa4>
    {
        regs->reg_0x0242_fcw0_hi = (value >> 0) & 0xffff;
    53ac:	31bfffcc 	andi	r6,r6,65535
    53b0:	2181ef15 	stw	r6,1980(r4)
    53b4:	f800283a 	ret
        return;
    }
    if (addr == 0x0243)
    53b8:	008090c4 	movi	r2,579
    53bc:	2880031e 	bne	r5,r2,53cc <LMS7002M_regs_set+0x1ab8>
    {
        regs->reg_0x0243_fcw0_lo = (value >> 0) & 0xffff;
    53c0:	31bfffcc 	andi	r6,r6,65535
    53c4:	2181f015 	stw	r6,1984(r4)
    53c8:	f800283a 	ret
        return;
    }
    if (addr == 0x0400)
    53cc:	00810004 	movi	r2,1024
    53d0:	2880211e 	bne	r5,r2,5458 <LMS7002M_regs_set+0x1b44>
    {
        regs->reg_0x0400_capture = (value >> 15) & 0x1;
    53d4:	3005d3fa 	srai	r2,r6,15
    53d8:	1080004c 	andi	r2,r2,1
    53dc:	2081f115 	stw	r2,1988(r4)
        regs->reg_0x0400_capsel = (value >> 13) & 0x3;
    53e0:	3005d37a 	srai	r2,r6,13
    53e4:	108000cc 	andi	r2,r2,3
    53e8:	2081f215 	stw	r2,1992(r4)
        regs->reg_0x0400_tsgfc = (value >> 9) & 0x1;
    53ec:	3005d27a 	srai	r2,r6,9
    53f0:	1080004c 	andi	r2,r2,1
    53f4:	2081f315 	stw	r2,1996(r4)
        regs->reg_0x0400_tsgfcw = (value >> 7) & 0x3;
    53f8:	3005d1fa 	srai	r2,r6,7
    53fc:	108000cc 	andi	r2,r2,3
    5400:	2081f415 	stw	r2,2000(r4)
        regs->reg_0x0400_tsgdcldq = (value >> 6) & 0x1;
    5404:	3005d1ba 	srai	r2,r6,6
    5408:	1080004c 	andi	r2,r2,1
    540c:	2081f515 	stw	r2,2004(r4)
        regs->reg_0x0400_tsgdcldi = (value >> 5) & 0x1;
    5410:	3005d17a 	srai	r2,r6,5
    5414:	1080004c 	andi	r2,r2,1
    5418:	2081f615 	stw	r2,2008(r4)
        regs->reg_0x0400_tsgswapiq = (value >> 4) & 0x1;
    541c:	3005d13a 	srai	r2,r6,4
    5420:	1080004c 	andi	r2,r2,1
    5424:	2081f715 	stw	r2,2012(r4)
        regs->reg_0x0400_tsgmode = (value >> 3) & 0x1;
    5428:	3005d0fa 	srai	r2,r6,3
    542c:	1080004c 	andi	r2,r2,1
    5430:	2081f815 	stw	r2,2016(r4)
        regs->reg_0x0400_insel = (value >> 2) & 0x1;
    5434:	3005d0ba 	srai	r2,r6,2
    5438:	1080004c 	andi	r2,r2,1
    543c:	2081f915 	stw	r2,2020(r4)
        regs->reg_0x0400_bstart = (value >> 1) & 0x1;
    5440:	3005d07a 	srai	r2,r6,1
        regs->reg_0x0400_en = (value >> 0) & 0x1;
    5444:	3180004c 	andi	r6,r6,1
    5448:	2181fb15 	stw	r6,2028(r4)
        regs->reg_0x0400_tsgdcldq = (value >> 6) & 0x1;
        regs->reg_0x0400_tsgdcldi = (value >> 5) & 0x1;
        regs->reg_0x0400_tsgswapiq = (value >> 4) & 0x1;
        regs->reg_0x0400_tsgmode = (value >> 3) & 0x1;
        regs->reg_0x0400_insel = (value >> 2) & 0x1;
        regs->reg_0x0400_bstart = (value >> 1) & 0x1;
    544c:	1080004c 	andi	r2,r2,1
    5450:	2081fa15 	stw	r2,2024(r4)
    5454:	f800283a 	ret
        regs->reg_0x0400_en = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0401)
    5458:	00810044 	movi	r2,1025
    545c:	2880031e 	bne	r5,r2,546c <LMS7002M_regs_set+0x1b58>
    {
        regs->reg_0x0401_gcorrq = (value >> 0) & 0x7ff;
    5460:	3181ffcc 	andi	r6,r6,2047
    5464:	2181fc15 	stw	r6,2032(r4)
    5468:	f800283a 	ret
        return;
    }
    if (addr == 0x0402)
    546c:	00810084 	movi	r2,1026
    5470:	2880031e 	bne	r5,r2,5480 <LMS7002M_regs_set+0x1b6c>
    {
        regs->reg_0x0402_gcorri = (value >> 0) & 0x7ff;
    5474:	3181ffcc 	andi	r6,r6,2047
    5478:	2181fd15 	stw	r6,2036(r4)
    547c:	f800283a 	ret
        return;
    }
    if (addr == 0x0403)
    5480:	008100c4 	movi	r2,1027
    5484:	2880061e 	bne	r5,r2,54a0 <LMS7002M_regs_set+0x1b8c>
    {
        regs->reg_0x0403_hbd_ovr = (value >> 12) & 0x7;
    5488:	3005d33a 	srai	r2,r6,12
        regs->reg_0x0403_iqcorr = (value >> 0) & 0xfff;
    548c:	3183ffcc 	andi	r6,r6,4095
    5490:	2181ff15 	stw	r6,2044(r4)
        regs->reg_0x0402_gcorri = (value >> 0) & 0x7ff;
        return;
    }
    if (addr == 0x0403)
    {
        regs->reg_0x0403_hbd_ovr = (value >> 12) & 0x7;
    5494:	108001cc 	andi	r2,r2,7
    5498:	2081fe15 	stw	r2,2040(r4)
    549c:	f800283a 	ret
        regs->reg_0x0403_iqcorr = (value >> 0) & 0xfff;
        return;
    }
    if (addr == 0x0404)
    54a0:	00810104 	movi	r2,1028
    54a4:	2880031e 	bne	r5,r2,54b4 <LMS7002M_regs_set+0x1ba0>
    {
        regs->reg_0x0404_dccorr_avg = (value >> 0) & 0x7;
    54a8:	318001cc 	andi	r6,r6,7
    54ac:	21820015 	stw	r6,2048(r4)
    54b0:	f800283a 	ret
        return;
    }
    if (addr == 0x0405)
    54b4:	00810144 	movi	r2,1029
    54b8:	2880061e 	bne	r5,r2,54d4 <LMS7002M_regs_set+0x1bc0>
    {
        regs->reg_0x0405_gfir1_l = (value >> 8) & 0x7;
    54bc:	3005d23a 	srai	r2,r6,8
        regs->reg_0x0405_gfir1_n = (value >> 0) & 0xff;
    54c0:	31803fcc 	andi	r6,r6,255
    54c4:	21820215 	stw	r6,2056(r4)
        regs->reg_0x0404_dccorr_avg = (value >> 0) & 0x7;
        return;
    }
    if (addr == 0x0405)
    {
        regs->reg_0x0405_gfir1_l = (value >> 8) & 0x7;
    54c8:	108001cc 	andi	r2,r2,7
    54cc:	20820115 	stw	r2,2052(r4)
    54d0:	f800283a 	ret
        regs->reg_0x0405_gfir1_n = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x0406)
    54d4:	00810184 	movi	r2,1030
    54d8:	2880061e 	bne	r5,r2,54f4 <LMS7002M_regs_set+0x1be0>
    {
        regs->reg_0x0406_gfir2_l = (value >> 8) & 0x7;
    54dc:	3005d23a 	srai	r2,r6,8
        regs->reg_0x0406_gfir2_n = (value >> 0) & 0xff;
    54e0:	31803fcc 	andi	r6,r6,255
    54e4:	21820415 	stw	r6,2064(r4)
        regs->reg_0x0405_gfir1_n = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x0406)
    {
        regs->reg_0x0406_gfir2_l = (value >> 8) & 0x7;
    54e8:	108001cc 	andi	r2,r2,7
    54ec:	20820315 	stw	r2,2060(r4)
    54f0:	f800283a 	ret
        regs->reg_0x0406_gfir2_n = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x0407)
    54f4:	008101c4 	movi	r2,1031
    54f8:	2880061e 	bne	r5,r2,5514 <LMS7002M_regs_set+0x1c00>
    {
        regs->reg_0x0407_gfir3_l = (value >> 8) & 0x7;
    54fc:	3005d23a 	srai	r2,r6,8
        regs->reg_0x0407_gfir3_n = (value >> 0) & 0xff;
    5500:	31803fcc 	andi	r6,r6,255
    5504:	21820615 	stw	r6,2072(r4)
        regs->reg_0x0406_gfir2_n = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x0407)
    {
        regs->reg_0x0407_gfir3_l = (value >> 8) & 0x7;
    5508:	108001cc 	andi	r2,r2,7
    550c:	20820515 	stw	r2,2068(r4)
    5510:	f800283a 	ret
        regs->reg_0x0407_gfir3_n = (value >> 0) & 0xff;
        return;
    }
    if (addr == 0x0408)
    5514:	00810204 	movi	r2,1032
    5518:	2880031e 	bne	r5,r2,5528 <LMS7002M_regs_set+0x1c14>
    {
        regs->reg_0x0408_agc_k_lsb = (value >> 0) & 0xffff;
    551c:	31bfffcc 	andi	r6,r6,65535
    5520:	21820715 	stw	r6,2076(r4)
    5524:	f800283a 	ret
        return;
    }
    if (addr == 0x0409)
    5528:	00810244 	movi	r2,1033
    552c:	2880061e 	bne	r5,r2,5548 <LMS7002M_regs_set+0x1c34>
    {
        regs->reg_0x0409_agc_adesired = (value >> 4) & 0xfff;
    5530:	3005d13a 	srai	r2,r6,4
        regs->reg_0x0409_agc_k_msb = (value >> 0) & 0x3;
    5534:	318000cc 	andi	r6,r6,3
    5538:	21820915 	stw	r6,2084(r4)
        regs->reg_0x0408_agc_k_lsb = (value >> 0) & 0xffff;
        return;
    }
    if (addr == 0x0409)
    {
        regs->reg_0x0409_agc_adesired = (value >> 4) & 0xfff;
    553c:	1083ffcc 	andi	r2,r2,4095
    5540:	20820815 	stw	r2,2080(r4)
    5544:	f800283a 	ret
        regs->reg_0x0409_agc_k_msb = (value >> 0) & 0x3;
        return;
    }
    if (addr == 0x040A)
    5548:	00810284 	movi	r2,1034
    554c:	2880061e 	bne	r5,r2,5568 <LMS7002M_regs_set+0x1c54>
    {
        regs->reg_0x040a_agc_mode = (value >> 12) & 0x3;
    5550:	3005d33a 	srai	r2,r6,12
        regs->reg_0x040a_agc_avg = (value >> 0) & 0x7;
    5554:	318001cc 	andi	r6,r6,7
    5558:	21820b15 	stw	r6,2092(r4)
        regs->reg_0x0409_agc_k_msb = (value >> 0) & 0x3;
        return;
    }
    if (addr == 0x040A)
    {
        regs->reg_0x040a_agc_mode = (value >> 12) & 0x3;
    555c:	108000cc 	andi	r2,r2,3
    5560:	20820a15 	stw	r2,2088(r4)
    5564:	f800283a 	ret
        regs->reg_0x040a_agc_avg = (value >> 0) & 0x7;
        return;
    }
    if (addr == 0x040B)
    5568:	008102c4 	movi	r2,1035
    556c:	2880031e 	bne	r5,r2,557c <LMS7002M_regs_set+0x1c68>
    {
        regs->reg_0x040b_dc_reg = (value >> 0) & 0xffff;
    5570:	31bfffcc 	andi	r6,r6,65535
    5574:	21820c15 	stw	r6,2096(r4)
    5578:	f800283a 	ret
        return;
    }
    if (addr == 0x040C)
    557c:	00810304 	movi	r2,1036
    5580:	28801e1e 	bne	r5,r2,55fc <LMS7002M_regs_set+0x1ce8>
    {
        regs->reg_0x040c_cmix_gain = (value >> 14) & 0x3;
    5584:	3005d3ba 	srai	r2,r6,14
    5588:	108000cc 	andi	r2,r2,3
    558c:	20820d15 	stw	r2,2100(r4)
        regs->reg_0x040c_cmix_sc = (value >> 13) & 0x1;
    5590:	3005d37a 	srai	r2,r6,13
    5594:	1080004c 	andi	r2,r2,1
    5598:	20820e15 	stw	r2,2104(r4)
        regs->reg_0x040c_cmix_byp = (value >> 7) & 0x1;
    559c:	3005d1fa 	srai	r2,r6,7
    55a0:	1080004c 	andi	r2,r2,1
    55a4:	20820f15 	stw	r2,2108(r4)
        regs->reg_0x040c_agc_byp = (value >> 6) & 0x1;
    55a8:	3005d1ba 	srai	r2,r6,6
    55ac:	1080004c 	andi	r2,r2,1
    55b0:	20821015 	stw	r2,2112(r4)
        regs->reg_0x040c_gfir3_byp = (value >> 5) & 0x1;
    55b4:	3005d17a 	srai	r2,r6,5
    55b8:	1080004c 	andi	r2,r2,1
    55bc:	20821115 	stw	r2,2116(r4)
        regs->reg_0x040c_gfir2_byp = (value >> 4) & 0x1;
    55c0:	3005d13a 	srai	r2,r6,4
    55c4:	1080004c 	andi	r2,r2,1
    55c8:	20821215 	stw	r2,2120(r4)
        regs->reg_0x040c_gfir1_byp = (value >> 3) & 0x1;
    55cc:	3005d0fa 	srai	r2,r6,3
    55d0:	1080004c 	andi	r2,r2,1
    55d4:	20821315 	stw	r2,2124(r4)
        regs->reg_0x040c_dc_byp = (value >> 2) & 0x1;
    55d8:	3005d0ba 	srai	r2,r6,2
    55dc:	1080004c 	andi	r2,r2,1
    55e0:	20821415 	stw	r2,2128(r4)
        regs->reg_0x040c_gc_byp = (value >> 1) & 0x1;
    55e4:	3005d07a 	srai	r2,r6,1
        regs->reg_0x040c_ph_byp = (value >> 0) & 0x1;
    55e8:	3180004c 	andi	r6,r6,1
    55ec:	21821615 	stw	r6,2136(r4)
        regs->reg_0x040c_agc_byp = (value >> 6) & 0x1;
        regs->reg_0x040c_gfir3_byp = (value >> 5) & 0x1;
        regs->reg_0x040c_gfir2_byp = (value >> 4) & 0x1;
        regs->reg_0x040c_gfir1_byp = (value >> 3) & 0x1;
        regs->reg_0x040c_dc_byp = (value >> 2) & 0x1;
        regs->reg_0x040c_gc_byp = (value >> 1) & 0x1;
    55f0:	1080004c 	andi	r2,r2,1
    55f4:	20821515 	stw	r2,2132(r4)
    55f8:	f800283a 	ret
        regs->reg_0x040c_ph_byp = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x040e)
    55fc:	00810384 	movi	r2,1038
    5600:	2880031e 	bne	r5,r2,5610 <LMS7002M_regs_set+0x1cfc>
    {
        regs->reg_0x040e_value = (value >> 0) & 0xffff;
    5604:	31bfffcc 	andi	r6,r6,65535
    5608:	21821715 	stw	r6,2140(r4)
    560c:	f800283a 	ret
        return;
    }
    if (addr == 0x0440)
    5610:	00811004 	movi	r2,1088
    5614:	2880091e 	bne	r5,r2,563c <LMS7002M_regs_set+0x1d28>
    {
        regs->reg_0x0440_dthbit = (value >> 5) & 0xf;
    5618:	3005d17a 	srai	r2,r6,5
    561c:	108003cc 	andi	r2,r2,15
    5620:	20821815 	stw	r2,2144(r4)
        regs->reg_0x0440_sel = (value >> 1) & 0xf;
    5624:	3005d07a 	srai	r2,r6,1
        regs->reg_0x0440_mode = (value >> 0) & 0x1;
    5628:	3180004c 	andi	r6,r6,1
    562c:	21821a15 	stw	r6,2152(r4)
        return;
    }
    if (addr == 0x0440)
    {
        regs->reg_0x0440_dthbit = (value >> 5) & 0xf;
        regs->reg_0x0440_sel = (value >> 1) & 0xf;
    5630:	108003cc 	andi	r2,r2,15
    5634:	20821915 	stw	r2,2148(r4)
    5638:	f800283a 	ret
        regs->reg_0x0440_mode = (value >> 0) & 0x1;
        return;
    }
    if (addr == 0x0441)
    563c:	00811044 	movi	r2,1089
    5640:	2880031e 	bne	r5,r2,5650 <LMS7002M_regs_set+0x1d3c>
    {
        regs->reg_0x0441_pho = (value >> 0) & 0xffff;
    5644:	31bfffcc 	andi	r6,r6,65535
    5648:	21821b15 	stw	r6,2156(r4)
    564c:	f800283a 	ret
        return;
    }
    if (addr == 0x0442)
    5650:	00811084 	movi	r2,1090
    5654:	2880031e 	bne	r5,r2,5664 <LMS7002M_regs_set+0x1d50>
    {
        regs->reg_0x0442_fcw0_hi = (value >> 0) & 0xffff;
    5658:	31bfffcc 	andi	r6,r6,65535
    565c:	21821c15 	stw	r6,2160(r4)
    5660:	f800283a 	ret
        return;
    }
    if (addr == 0x0443)
    5664:	008110c4 	movi	r2,1091
    5668:	2880031e 	bne	r5,r2,5678 <LMS7002M_regs_set+0x1d64>
    {
        regs->reg_0x0443_fcw0_lo = (value >> 0) & 0xffff;
    566c:	31bfffcc 	andi	r6,r6,65535
    5670:	21821d15 	stw	r6,2164(r4)
    5674:	f800283a 	ret
        return;
    }
    if (addr == 0x05c0)
    5678:	00817004 	movi	r2,1472
    567c:	2880031e 	bne	r5,r2,568c <LMS7002M_regs_set+0x1d78>
    {
        regs->reg_0x05c0_value = (value >> 0) & 0xffff;
    5680:	31bfffcc 	andi	r6,r6,65535
    5684:	21821e15 	stw	r6,2168(r4)
    5688:	f800283a 	ret
        return;
    }
    if (addr == 0x05c1)
    568c:	00817044 	movi	r2,1473
    5690:	2880031e 	bne	r5,r2,56a0 <LMS7002M_regs_set+0x1d8c>
    {
        regs->reg_0x05c1_value = (value >> 0) & 0xffff;
    5694:	31bfffcc 	andi	r6,r6,65535
    5698:	21821f15 	stw	r6,2172(r4)
    569c:	f800283a 	ret
        return;
    }
    if (addr == 0x05c2)
    56a0:	00817084 	movi	r2,1474
    56a4:	2880031e 	bne	r5,r2,56b4 <LMS7002M_regs_set+0x1da0>
    {
        regs->reg_0x05c2_value = (value >> 0) & 0xffff;
    56a8:	31bfffcc 	andi	r6,r6,65535
    56ac:	21822015 	stw	r6,2176(r4)
    56b0:	f800283a 	ret
        return;
    }
    if (addr == 0x05c3)
    56b4:	008170c4 	movi	r2,1475
    56b8:	2880031e 	bne	r5,r2,56c8 <LMS7002M_regs_set+0x1db4>
    {
        regs->reg_0x05c3_value = (value >> 0) & 0xffff;
    56bc:	31bfffcc 	andi	r6,r6,65535
    56c0:	21822115 	stw	r6,2180(r4)
    56c4:	f800283a 	ret
        return;
    }
    if (addr == 0x05c4)
    56c8:	00817104 	movi	r2,1476
    56cc:	2880031e 	bne	r5,r2,56dc <LMS7002M_regs_set+0x1dc8>
    {
        regs->reg_0x05c4_value = (value >> 0) & 0xffff;
    56d0:	31bfffcc 	andi	r6,r6,65535
    56d4:	21822215 	stw	r6,2184(r4)
    56d8:	f800283a 	ret
        return;
    }
    if (addr == 0x05c5)
    56dc:	00817144 	movi	r2,1477
    56e0:	2880031e 	bne	r5,r2,56f0 <LMS7002M_regs_set+0x1ddc>
    {
        regs->reg_0x05c5_value = (value >> 0) & 0xffff;
    56e4:	31bfffcc 	andi	r6,r6,65535
    56e8:	21822315 	stw	r6,2188(r4)
    56ec:	f800283a 	ret
        return;
    }
    if (addr == 0x05c6)
    56f0:	00817184 	movi	r2,1478
    56f4:	2880031e 	bne	r5,r2,5704 <LMS7002M_regs_set+0x1df0>
    {
        regs->reg_0x05c6_value = (value >> 0) & 0xffff;
    56f8:	31bfffcc 	andi	r6,r6,65535
    56fc:	21822415 	stw	r6,2192(r4)
    5700:	f800283a 	ret
        return;
    }
    if (addr == 0x05c7)
    5704:	008171c4 	movi	r2,1479
    5708:	2880031e 	bne	r5,r2,5718 <LMS7002M_regs_set+0x1e04>
    {
        regs->reg_0x05c7_value = (value >> 0) & 0xffff;
    570c:	31bfffcc 	andi	r6,r6,65535
    5710:	21822515 	stw	r6,2196(r4)
    5714:	f800283a 	ret
        return;
    }
    if (addr == 0x05c8)
    5718:	00817204 	movi	r2,1480
    571c:	2880031e 	bne	r5,r2,572c <LMS7002M_regs_set+0x1e18>
    {
        regs->reg_0x05c8_value = (value >> 0) & 0xffff;
    5720:	31bfffcc 	andi	r6,r6,65535
    5724:	21822615 	stw	r6,2200(r4)
    5728:	f800283a 	ret
        return;
    }
    if (addr == 0x05c9)
    572c:	00817244 	movi	r2,1481
    5730:	2880031e 	bne	r5,r2,5740 <LMS7002M_regs_set+0x1e2c>
    {
        regs->reg_0x05c9_value = (value >> 0) & 0xffff;
    5734:	31bfffcc 	andi	r6,r6,65535
    5738:	21822715 	stw	r6,2204(r4)
    573c:	f800283a 	ret
        return;
    }
    if (addr == 0x05ca)
    5740:	00817284 	movi	r2,1482
    5744:	2880031e 	bne	r5,r2,5754 <LMS7002M_regs_set+0x1e40>
    {
        regs->reg_0x05ca_value = (value >> 0) & 0xffff;
    5748:	31bfffcc 	andi	r6,r6,65535
    574c:	21822815 	stw	r6,2208(r4)
    5750:	f800283a 	ret
        return;
    }
    if (addr == 0x05cb)
    5754:	008172c4 	movi	r2,1483
    5758:	2880031e 	bne	r5,r2,5768 <LMS7002M_regs_set+0x1e54>
    {
        regs->reg_0x05cb_value = (value >> 0) & 0xffff;
    575c:	31bfffcc 	andi	r6,r6,65535
    5760:	21822915 	stw	r6,2212(r4)
    5764:	f800283a 	ret
        return;
    }
    if (addr == 0x05cc)
    5768:	00817304 	movi	r2,1484
    576c:	2880031e 	bne	r5,r2,577c <LMS7002M_regs_set+0x1e68>
    {
        regs->reg_0x05cc_value = (value >> 0) & 0xffff;
    5770:	31bfffcc 	andi	r6,r6,65535
    5774:	21822a15 	stw	r6,2216(r4)
    5778:	f800283a 	ret
        return;
    }
    if (addr == 0x0600)
    577c:	00818004 	movi	r2,1536
    5780:	2880031e 	bne	r5,r2,5790 <LMS7002M_regs_set+0x1e7c>
    {
        regs->reg_0x0600_value = (value >> 0) & 0xffff;
    5784:	31bfffcc 	andi	r6,r6,65535
    5788:	21822b15 	stw	r6,2220(r4)
    578c:	f800283a 	ret
        return;
    }
    if (addr == 0x0601)
    5790:	00818044 	movi	r2,1537
    5794:	2880031e 	bne	r5,r2,57a4 <LMS7002M_regs_set+0x1e90>
    {
        regs->reg_0x0601_value = (value >> 0) & 0xffff;
    5798:	31bfffcc 	andi	r6,r6,65535
    579c:	21822c15 	stw	r6,2224(r4)
    57a0:	f800283a 	ret
        return;
    }
    if (addr == 0x0602)
    57a4:	00818084 	movi	r2,1538
    57a8:	2880031e 	bne	r5,r2,57b8 <LMS7002M_regs_set+0x1ea4>
    {
        regs->reg_0x0602_value = (value >> 0) & 0xffff;
    57ac:	31bfffcc 	andi	r6,r6,65535
    57b0:	21822d15 	stw	r6,2228(r4)
    57b4:	f800283a 	ret
        return;
    }
    if (addr == 0x0603)
    57b8:	008180c4 	movi	r2,1539
    57bc:	2880031e 	bne	r5,r2,57cc <LMS7002M_regs_set+0x1eb8>
    {
        regs->reg_0x0603_value = (value >> 0) & 0xffff;
    57c0:	31bfffcc 	andi	r6,r6,65535
    57c4:	21822e15 	stw	r6,2232(r4)
    57c8:	f800283a 	ret
        return;
    }
    if (addr == 0x0604)
    57cc:	00818104 	movi	r2,1540
    57d0:	2880031e 	bne	r5,r2,57e0 <LMS7002M_regs_set+0x1ecc>
    {
        regs->reg_0x0604_value = (value >> 0) & 0xffff;
    57d4:	31bfffcc 	andi	r6,r6,65535
    57d8:	21822f15 	stw	r6,2236(r4)
    57dc:	f800283a 	ret
        return;
    }
    if (addr == 0x0605)
    57e0:	00818144 	movi	r2,1541
    57e4:	2880031e 	bne	r5,r2,57f4 <LMS7002M_regs_set+0x1ee0>
    {
        regs->reg_0x0605_value = (value >> 0) & 0xffff;
    57e8:	31bfffcc 	andi	r6,r6,65535
    57ec:	21823015 	stw	r6,2240(r4)
    57f0:	f800283a 	ret
        return;
    }
    if (addr == 0x0606)
    57f4:	00818184 	movi	r2,1542
    57f8:	2880031e 	bne	r5,r2,5808 <LMS7002M_regs_set+0x1ef4>
    {
        regs->reg_0x0606_value = (value >> 0) & 0xffff;
    57fc:	31bfffcc 	andi	r6,r6,65535
    5800:	21823115 	stw	r6,2244(r4)
    5804:	f800283a 	ret
        return;
    }
    if (addr == 0x0640)
    5808:	00819004 	movi	r2,1600
    580c:	2880031e 	bne	r5,r2,581c <LMS7002M_regs_set+0x1f08>
    {
        regs->reg_0x0640_value = (value >> 0) & 0xffff;
    5810:	31bfffcc 	andi	r6,r6,65535
    5814:	21823215 	stw	r6,2248(r4)
    5818:	f800283a 	ret
        return;
    }
    if (addr == 0x0641)
    581c:	00819044 	movi	r2,1601
    5820:	2880021e 	bne	r5,r2,582c <LMS7002M_regs_set+0x1f18>
    {
        regs->reg_0x0641_value = (value >> 0) & 0xffff;
    5824:	31bfffcc 	andi	r6,r6,65535
    5828:	21823315 	stw	r6,2252(r4)
    582c:	f800283a 	ret

00005830 <LMS7002M_regs_init>:
/***********************************************************************
 * Implementation details below
 **********************************************************************/

static inline void LMS7002M_regs_init(LMS7002M_regs_t *regs)
{
    5830:	defff304 	addi	sp,sp,-52
    5834:	dcc00615 	stw	r19,24(sp)
    5838:	dc400415 	stw	r17,16(sp)
    LMS7002M_regs_set(regs, 0x0020, 0xffff);
    583c:	04c00804 	movi	r19,32
    5840:	047fffd4 	movui	r17,65535
    5844:	880d883a 	mov	r6,r17
    5848:	980b883a 	mov	r5,r19
/***********************************************************************
 * Implementation details below
 **********************************************************************/

static inline void LMS7002M_regs_init(LMS7002M_regs_t *regs)
{
    584c:	dfc00c15 	stw	ra,48(sp)
    5850:	df000b15 	stw	fp,44(sp)
    5854:	ddc00a15 	stw	r23,40(sp)
    5858:	dd800915 	stw	r22,36(sp)
    585c:	dd400815 	stw	r21,32(sp)
    5860:	dd000715 	stw	r20,28(sp)
    5864:	dc800515 	stw	r18,20(sp)
    5868:	dc000315 	stw	r16,12(sp)
    586c:	2021883a 	mov	r16,r4
    LMS7002M_regs_set(regs, 0x0020, 0xffff);
    5870:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0021, 0xe9f);
    5874:	8009883a 	mov	r4,r16
    5878:	0183a7c4 	movi	r6,3743
    587c:	01400844 	movi	r5,33
    5880:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0022, 0x7df);
    5884:	8009883a 	mov	r4,r16
    5888:	0181f7c4 	movi	r6,2015
    588c:	01400884 	movi	r5,34
    5890:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0023, 0x5559);
    5894:	8009883a 	mov	r4,r16
    5898:	01955644 	movi	r6,21849
    589c:	014008c4 	movi	r5,35
    58a0:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0024, 0xe4e4);
    58a4:	05393914 	movui	r20,58596
    58a8:	a00d883a 	mov	r6,r20
    58ac:	8009883a 	mov	r4,r16
    58b0:	01400904 	movi	r5,36
    58b4:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0025, 0x101);
    58b8:	04804044 	movi	r18,257
    58bc:	900d883a 	mov	r6,r18
    58c0:	8009883a 	mov	r4,r16
    58c4:	01400944 	movi	r5,37
    58c8:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0026, 0x101);
    58cc:	900d883a 	mov	r6,r18
    58d0:	8009883a 	mov	r4,r16
    58d4:	01400984 	movi	r5,38
    58d8:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0027, 0xe4e4);
    58dc:	a00d883a 	mov	r6,r20
    58e0:	8009883a 	mov	r4,r16
    58e4:	014009c4 	movi	r5,39
    58e8:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0028, 0x101);
    58ec:	900d883a 	mov	r6,r18
    58f0:	8009883a 	mov	r4,r16
    58f4:	01400a04 	movi	r5,40
    58f8:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0029, 0x101);
    58fc:	900d883a 	mov	r6,r18
    5900:	8009883a 	mov	r4,r16
    5904:	01400a44 	movi	r5,41
    5908:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x002A, 0x86);
    590c:	05402184 	movi	r21,134
    5910:	a80d883a 	mov	r6,r21
    5914:	8009883a 	mov	r4,r16
    5918:	01400a84 	movi	r5,42
    591c:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x002B, 0x10);
    5920:	8009883a 	mov	r4,r16
    5924:	01800404 	movi	r6,16
    5928:	01400ac4 	movi	r5,43
    592c:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x002C, 0xffff);
    5930:	880d883a 	mov	r6,r17
    5934:	8009883a 	mov	r4,r16
    5938:	01400b04 	movi	r5,44
    593c:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x002E, 0x0);
    5940:	8009883a 	mov	r4,r16
    5944:	000d883a 	mov	r6,zero
    5948:	01400b84 	movi	r5,46
    594c:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x002F, 0x3840);
    5950:	8009883a 	mov	r4,r16
    5954:	018e1004 	movi	r6,14400
    5958:	01400bc4 	movi	r5,47
    595c:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0081, 0x0);
    5960:	05802044 	movi	r22,129
    5964:	b00b883a 	mov	r5,r22
    5968:	8009883a 	mov	r4,r16
    596c:	000d883a 	mov	r6,zero
    5970:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0082, 0x800b);
    5974:	8009883a 	mov	r4,r16
    5978:	01a002d4 	movui	r6,32779
    597c:	01402084 	movi	r5,130
    5980:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0084, 0x400);
    5984:	05010004 	movi	r20,1024
    5988:	a00d883a 	mov	r6,r20
    598c:	8009883a 	mov	r4,r16
    5990:	01402104 	movi	r5,132
    5994:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0085, 0x1);
    5998:	04400044 	movi	r17,1
    599c:	880d883a 	mov	r6,r17
    59a0:	8009883a 	mov	r4,r16
    59a4:	01402144 	movi	r5,133
    59a8:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0086, 0x4901);
    59ac:	a80b883a 	mov	r5,r21
    59b0:	8009883a 	mov	r4,r16
    59b4:	01924044 	movi	r6,18689
    59b8:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0087, 0x400);
    59bc:	a00d883a 	mov	r6,r20
    59c0:	8009883a 	mov	r4,r16
    59c4:	014021c4 	movi	r5,135
    59c8:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0088, 0x780);
    59cc:	01c02204 	movi	r7,136
    59d0:	0701e004 	movi	fp,1920
    59d4:	380b883a 	mov	r5,r7
    59d8:	e00d883a 	mov	r6,fp
    59dc:	8009883a 	mov	r4,r16
    59e0:	d9c00115 	stw	r7,4(sp)
    59e4:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0089, 0x20);
    59e8:	980d883a 	mov	r6,r19
    59ec:	8009883a 	mov	r4,r16
    59f0:	01402244 	movi	r5,137
    59f4:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x008A, 0x514);
    59f8:	8009883a 	mov	r4,r16
    59fc:	01814504 	movi	r6,1300
    5a00:	01402284 	movi	r5,138
    5a04:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x008B, 0x2100);
    5a08:	8009883a 	mov	r4,r16
    5a0c:	01884004 	movi	r6,8448
    5a10:	014022c4 	movi	r5,139
    5a14:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x008C, 0x67b);
    5a18:	05c19ec4 	movi	r23,1659
    5a1c:	b80d883a 	mov	r6,r23
    5a20:	8009883a 	mov	r4,r16
    5a24:	01402304 	movi	r5,140
    5a28:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x008D, 0x0);
    5a2c:	00802344 	movi	r2,141
    5a30:	100b883a 	mov	r5,r2
    5a34:	8009883a 	mov	r4,r16
    5a38:	000d883a 	mov	r6,zero
    5a3c:	d8800215 	stw	r2,8(sp)
    5a40:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0092, 0x1);
    5a44:	880d883a 	mov	r6,r17
    5a48:	8009883a 	mov	r4,r16
    5a4c:	01402484 	movi	r5,146
    5a50:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0093, 0x0);
    5a54:	8009883a 	mov	r4,r16
    5a58:	000d883a 	mov	r6,zero
    5a5c:	014024c4 	movi	r5,147
    5a60:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0094, 0x0);
    5a64:	8009883a 	mov	r4,r16
    5a68:	000d883a 	mov	r6,zero
    5a6c:	01402504 	movi	r5,148
    5a70:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0095, 0x0);
    5a74:	8009883a 	mov	r4,r16
    5a78:	000d883a 	mov	r6,zero
    5a7c:	01402544 	movi	r5,149
    5a80:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0096, 0x0);
    5a84:	8009883a 	mov	r4,r16
    5a88:	000d883a 	mov	r6,zero
    5a8c:	01402584 	movi	r5,150
    5a90:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0097, 0x0);
    5a94:	8009883a 	mov	r4,r16
    5a98:	000d883a 	mov	r6,zero
    5a9c:	014025c4 	movi	r5,151
    5aa0:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0098, 0x0);
    5aa4:	8009883a 	mov	r4,r16
    5aa8:	000d883a 	mov	r6,zero
    5aac:	01402604 	movi	r5,152
    LMS7002M_regs_set(regs, 0x0099, 0x6565);
    5ab0:	04595944 	movi	r17,25957
    LMS7002M_regs_set(regs, 0x0093, 0x0);
    LMS7002M_regs_set(regs, 0x0094, 0x0);
    LMS7002M_regs_set(regs, 0x0095, 0x0);
    LMS7002M_regs_set(regs, 0x0096, 0x0);
    LMS7002M_regs_set(regs, 0x0097, 0x0);
    LMS7002M_regs_set(regs, 0x0098, 0x0);
    5ab4:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0099, 0x6565);
    5ab8:	880d883a 	mov	r6,r17
    5abc:	8009883a 	mov	r4,r16
    5ac0:	01402644 	movi	r5,153
    5ac4:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x009A, 0x658c);
    5ac8:	05596304 	movi	r21,25996
    5acc:	a80d883a 	mov	r6,r21
    5ad0:	8009883a 	mov	r4,r16
    5ad4:	01402684 	movi	r5,154
    5ad8:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x009B, 0x6565);
    5adc:	880d883a 	mov	r6,r17
    5ae0:	8009883a 	mov	r4,r16
    5ae4:	014026c4 	movi	r5,155
    5ae8:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x009C, 0x658c);
    5aec:	a80d883a 	mov	r6,r21
    5af0:	8009883a 	mov	r4,r16
    5af4:	01402704 	movi	r5,156
    5af8:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x009D, 0x6565);
    5afc:	880d883a 	mov	r6,r17
    5b00:	8009883a 	mov	r4,r16
    5b04:	01402744 	movi	r5,157
    5b08:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x009E, 0x658c);
    5b0c:	00c02784 	movi	r3,158
    5b10:	180b883a 	mov	r5,r3
    5b14:	a80d883a 	mov	r6,r21
    5b18:	8009883a 	mov	r4,r16
    5b1c:	d8c00015 	stw	r3,0(sp)
    5b20:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x009F, 0x658c);
    5b24:	a80d883a 	mov	r6,r21
    5b28:	8009883a 	mov	r4,r16
    5b2c:	014027c4 	movi	r5,159
    5b30:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x00A0, 0x6565);
    5b34:	05402804 	movi	r21,160
    5b38:	880d883a 	mov	r6,r17
    5b3c:	a80b883a 	mov	r5,r21
    5b40:	8009883a 	mov	r4,r16
    5b44:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x00A1, 0x6565);
    5b48:	880d883a 	mov	r6,r17
    5b4c:	8009883a 	mov	r4,r16
    5b50:	01402844 	movi	r5,161
    5b54:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x00A2, 0x6565);
    5b58:	880d883a 	mov	r6,r17
    5b5c:	8009883a 	mov	r4,r16
    5b60:	01402884 	movi	r5,162
    5b64:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x00A3, 0x6565);
    5b68:	880d883a 	mov	r6,r17
    5b6c:	8009883a 	mov	r4,r16
    5b70:	014028c4 	movi	r5,163
    5b74:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x00A4, 0x6565);
    5b78:	880d883a 	mov	r6,r17
    5b7c:	8009883a 	mov	r4,r16
    5b80:	01402904 	movi	r5,164
    5b84:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x00A5, 0x6565);
    5b88:	880d883a 	mov	r6,r17
    5b8c:	8009883a 	mov	r4,r16
    5b90:	01402944 	movi	r5,165
    5b94:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x00A6, 0xf);
    5b98:	8009883a 	mov	r4,r16
    5b9c:	018003c4 	movi	r6,15
    5ba0:	01402984 	movi	r5,166
    5ba4:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x00A7, 0x6565);
    5ba8:	880d883a 	mov	r6,r17
    5bac:	8009883a 	mov	r4,r16
    5bb0:	014029c4 	movi	r5,167
    5bb4:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x00a8, 0x0);
    5bb8:	8009883a 	mov	r4,r16
    5bbc:	000d883a 	mov	r6,zero
    5bc0:	01402a04 	movi	r5,168
    5bc4:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x00aa, 0x0);
    5bc8:	8009883a 	mov	r4,r16
    5bcc:	000d883a 	mov	r6,zero
    5bd0:	01402a84 	movi	r5,170
    5bd4:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x00ab, 0x0);
    5bd8:	8009883a 	mov	r4,r16
    5bdc:	000d883a 	mov	r6,zero
    5be0:	01402ac4 	movi	r5,171
    5be4:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x00ad, 0x3ff);
    5be8:	8009883a 	mov	r4,r16
    5bec:	0180ffc4 	movi	r6,1023
    5bf0:	01402b44 	movi	r5,173
    5bf4:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x00ae, 0xf000);
    5bf8:	8009883a 	mov	r4,r16
    5bfc:	01bc0014 	movui	r6,61440
    5c00:	01402b84 	movi	r5,174
    5c04:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0100, 0x3409);
    5c08:	8009883a 	mov	r4,r16
    5c0c:	018d0244 	movi	r6,13321
    5c10:	01404004 	movi	r5,256
    5c14:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0101, 0x7800);
    5c18:	900b883a 	mov	r5,r18
    5c1c:	8009883a 	mov	r4,r16
    5c20:	019e0004 	movi	r6,30720
    5c24:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0102, 0x3180);
    5c28:	8009883a 	mov	r4,r16
    5c2c:	018c6004 	movi	r6,12672
    5c30:	01404084 	movi	r5,258
    5c34:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0103, 0xa12);
    5c38:	8009883a 	mov	r4,r16
    5c3c:	01828484 	movi	r6,2578
    5c40:	014040c4 	movi	r5,259
    5c44:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0104, 0x88);
    5c48:	d9c00117 	ldw	r7,4(sp)
    5c4c:	8009883a 	mov	r4,r16
    5c50:	01404104 	movi	r5,260
    5c54:	380d883a 	mov	r6,r7
    5c58:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0105, 0x7);
    5c5c:	8009883a 	mov	r4,r16
    5c60:	018001c4 	movi	r6,7
    5c64:	01404144 	movi	r5,261
    5c68:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0106, 0x318c);
    5c6c:	044c6304 	movi	r17,12684
    5c70:	880d883a 	mov	r6,r17
    5c74:	8009883a 	mov	r4,r16
    5c78:	01404184 	movi	r5,262
    5c7c:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0107, 0x318c);
    5c80:	880d883a 	mov	r6,r17
    5c84:	8009883a 	mov	r4,r16
    5c88:	014041c4 	movi	r5,263
    5c8c:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0108, 0x9426);
    5c90:	8009883a 	mov	r4,r16
    5c94:	01a50994 	movui	r6,37926
    5c98:	01404204 	movi	r5,264
    5c9c:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0109, 0x61c1);
    5ca0:	8009883a 	mov	r4,r16
    5ca4:	01987044 	movi	r6,25025
    5ca8:	01404244 	movi	r5,265
    5cac:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x010A, 0x104c);
    5cb0:	8009883a 	mov	r4,r16
    5cb4:	01841304 	movi	r6,4172
    5cb8:	01404284 	movi	r5,266
    5cbc:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x010b, 0x0);
    5cc0:	8009883a 	mov	r4,r16
    5cc4:	000d883a 	mov	r6,zero
    5cc8:	014042c4 	movi	r5,267
    5ccc:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x010C, 0x88fd);
    5cd0:	8009883a 	mov	r4,r16
    5cd4:	01a23f54 	movui	r6,35069
    5cd8:	01404304 	movi	r5,268
    5cdc:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x010D, 0x9e);
    5ce0:	d8c00017 	ldw	r3,0(sp)
    5ce4:	8009883a 	mov	r4,r16
    5ce8:	01404344 	movi	r5,269
    5cec:	180d883a 	mov	r6,r3
    5cf0:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x010E, 0x2040);
    5cf4:	8009883a 	mov	r4,r16
    5cf8:	01881004 	movi	r6,8256
    5cfc:	01404384 	movi	r5,270
    5d00:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x010F, 0x3042);
    5d04:	8009883a 	mov	r4,r16
    5d08:	018c1084 	movi	r6,12354
    5d0c:	014043c4 	movi	r5,271
    5d10:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0110, 0xbf4);
    5d14:	8009883a 	mov	r4,r16
    5d18:	0182fd04 	movi	r6,3060
    5d1c:	01404404 	movi	r5,272
    5d20:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0111, 0x83);
    5d24:	8009883a 	mov	r4,r16
    5d28:	018020c4 	movi	r6,131
    5d2c:	01404444 	movi	r5,273
    5d30:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0112, 0xc0e6);
    5d34:	8009883a 	mov	r4,r16
    5d38:	01b03994 	movui	r6,49382
    5d3c:	01404484 	movi	r5,274
    5d40:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0113, 0x3c3);
    5d44:	8009883a 	mov	r4,r16
    5d48:	0180f0c4 	movi	r6,963
    5d4c:	014044c4 	movi	r5,275
    5d50:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0114, 0x8d);
    5d54:	d8800217 	ldw	r2,8(sp)
    5d58:	8009883a 	mov	r4,r16
    5d5c:	01404504 	movi	r5,276
    5d60:	100d883a 	mov	r6,r2
    5d64:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0115, 0x9);
    5d68:	8009883a 	mov	r4,r16
    5d6c:	01800244 	movi	r6,9
    5d70:	01404544 	movi	r5,277
    5d74:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0116, 0x8180);
    5d78:	8009883a 	mov	r4,r16
    5d7c:	01a06014 	movui	r6,33152
    5d80:	01404584 	movi	r5,278
    5d84:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0117, 0x280c);
    5d88:	8009883a 	mov	r4,r16
    5d8c:	018a0304 	movi	r6,10252
    5d90:	014045c4 	movi	r5,279
    5d94:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0118, 0x18c);
    5d98:	8009883a 	mov	r4,r16
    5d9c:	01806304 	movi	r6,396
    5da0:	01404604 	movi	r5,280
    5da4:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0119, 0x18cb);
    5da8:	8009883a 	mov	r4,r16
    5dac:	018632c4 	movi	r6,6347
    5db0:	01404644 	movi	r5,281
    5db4:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x011A, 0x2e02);
    5db8:	8009883a 	mov	r4,r16
    5dbc:	018b8084 	movi	r6,11778
    5dc0:	01404684 	movi	r5,282
    5dc4:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x011B, 0x0);
    5dc8:	8009883a 	mov	r4,r16
    5dcc:	000d883a 	mov	r6,zero
    5dd0:	014046c4 	movi	r5,283
    5dd4:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x011C, 0xad43);
    5dd8:	8009883a 	mov	r4,r16
    5ddc:	01ab50d4 	movui	r6,44355
    5de0:	01404704 	movi	r5,284
    5de4:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x011D, 0x400);
    5de8:	a00d883a 	mov	r6,r20
    5dec:	8009883a 	mov	r4,r16
    5df0:	01404744 	movi	r5,285
    5df4:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x011E, 0x780);
    5df8:	e00d883a 	mov	r6,fp
    5dfc:	8009883a 	mov	r4,r16
    5e00:	01404784 	movi	r5,286
    5e04:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x011F, 0x3640);
    5e08:	8009883a 	mov	r4,r16
    5e0c:	018d9004 	movi	r6,13888
    5e10:	014047c4 	movi	r5,287
    5e14:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0120, 0xb9ff);
    5e18:	8009883a 	mov	r4,r16
    5e1c:	01ae7fd4 	movui	r6,47615
    5e20:	01404804 	movi	r5,288
    5e24:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0121, 0x3404);
    5e28:	8009883a 	mov	r4,r16
    5e2c:	018d0104 	movi	r6,13316
    5e30:	01404844 	movi	r5,289
    5e34:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0122, 0x33f);
    5e38:	8009883a 	mov	r4,r16
    5e3c:	0180cfc4 	movi	r6,831
    5e40:	01404884 	movi	r5,290
    5e44:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0123, 0x67b);
    5e48:	b80d883a 	mov	r6,r23
    5e4c:	8009883a 	mov	r4,r16
    5e50:	014048c4 	movi	r5,291
    5e54:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0124, 0x0);
    5e58:	8009883a 	mov	r4,r16
    5e5c:	000d883a 	mov	r6,zero
    5e60:	01404904 	movi	r5,292
    5e64:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0125, 0x9400);
    5e68:	8009883a 	mov	r4,r16
    5e6c:	01a50014 	movui	r6,37888
    5e70:	01404944 	movi	r5,293
    5e74:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0126, 0x12ff);
    5e78:	8009883a 	mov	r4,r16
    5e7c:	0184bfc4 	movi	r6,4863
    5e80:	01404984 	movi	r5,294
    5e84:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0200, 0x81);
    5e88:	b00d883a 	mov	r6,r22
    5e8c:	8009883a 	mov	r4,r16
    5e90:	01408004 	movi	r5,512
    5e94:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0201, 0x7ff);
    5e98:	0441ffc4 	movi	r17,2047
    5e9c:	880d883a 	mov	r6,r17
    5ea0:	8009883a 	mov	r4,r16
    5ea4:	01408044 	movi	r5,513
    5ea8:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0202, 0x7ff);
    5eac:	880d883a 	mov	r6,r17
    5eb0:	8009883a 	mov	r4,r16
    5eb4:	01408084 	movi	r5,514
    5eb8:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0203, 0x0);
    5ebc:	8009883a 	mov	r4,r16
    5ec0:	000d883a 	mov	r6,zero
    5ec4:	014080c4 	movi	r5,515
    5ec8:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0204, 0x0);
    5ecc:	8009883a 	mov	r4,r16
    5ed0:	000d883a 	mov	r6,zero
    5ed4:	01408104 	movi	r5,516
    5ed8:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0205, 0x0);
    5edc:	8009883a 	mov	r4,r16
    5ee0:	000d883a 	mov	r6,zero
    5ee4:	01408144 	movi	r5,517
    5ee8:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0206, 0x0);
    5eec:	8009883a 	mov	r4,r16
    5ef0:	000d883a 	mov	r6,zero
    5ef4:	01408184 	movi	r5,518
    5ef8:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0207, 0x0);
    5efc:	8009883a 	mov	r4,r16
    5f00:	000d883a 	mov	r6,zero
    5f04:	014081c4 	movi	r5,519
    5f08:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0208, 0x0);
    5f0c:	8009883a 	mov	r4,r16
    5f10:	000d883a 	mov	r6,zero
    5f14:	01408204 	movi	r5,520
    5f18:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0209, 0x0);
    5f1c:	8009883a 	mov	r4,r16
    5f20:	000d883a 	mov	r6,zero
    5f24:	01408244 	movi	r5,521
    5f28:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x020a, 0x0);
    5f2c:	8009883a 	mov	r4,r16
    5f30:	000d883a 	mov	r6,zero
    5f34:	01408284 	movi	r5,522
    5f38:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x020C, 0x0);
    5f3c:	8009883a 	mov	r4,r16
    5f40:	000d883a 	mov	r6,zero
    5f44:	01408304 	movi	r5,524
    5f48:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0240, 0x20);
    5f4c:	980d883a 	mov	r6,r19
    5f50:	8009883a 	mov	r4,r16
    5f54:	01409004 	movi	r5,576
    5f58:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0241, 0x0);
    5f5c:	8009883a 	mov	r4,r16
    5f60:	000d883a 	mov	r6,zero
    5f64:	01409044 	movi	r5,577
    5f68:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0242, 0x0);
    5f6c:	8009883a 	mov	r4,r16
    5f70:	000d883a 	mov	r6,zero
    5f74:	01409084 	movi	r5,578
    5f78:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0243, 0x0);
    5f7c:	8009883a 	mov	r4,r16
    5f80:	000d883a 	mov	r6,zero
    5f84:	014090c4 	movi	r5,579
    5f88:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0400, 0x81);
    5f8c:	b00d883a 	mov	r6,r22
    5f90:	a00b883a 	mov	r5,r20
    5f94:	8009883a 	mov	r4,r16
    5f98:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0401, 0x7ff);
    5f9c:	880d883a 	mov	r6,r17
    5fa0:	8009883a 	mov	r4,r16
    5fa4:	01410044 	movi	r5,1025
    5fa8:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0402, 0x7ff);
    5fac:	880d883a 	mov	r6,r17
    5fb0:	8009883a 	mov	r4,r16
    5fb4:	01410084 	movi	r5,1026
    5fb8:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0403, 0x0);
    5fbc:	8009883a 	mov	r4,r16
    5fc0:	000d883a 	mov	r6,zero
    5fc4:	014100c4 	movi	r5,1027
    5fc8:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0404, 0x0);
    5fcc:	8009883a 	mov	r4,r16
    5fd0:	000d883a 	mov	r6,zero
    5fd4:	01410104 	movi	r5,1028
    5fd8:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0405, 0x0);
    5fdc:	8009883a 	mov	r4,r16
    5fe0:	000d883a 	mov	r6,zero
    5fe4:	01410144 	movi	r5,1029
    5fe8:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0406, 0x0);
    5fec:	8009883a 	mov	r4,r16
    5ff0:	000d883a 	mov	r6,zero
    5ff4:	01410184 	movi	r5,1030
    5ff8:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0407, 0x0);
    5ffc:	8009883a 	mov	r4,r16
    6000:	000d883a 	mov	r6,zero
    6004:	014101c4 	movi	r5,1031
    6008:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0408, 0x0);
    600c:	8009883a 	mov	r4,r16
    6010:	000d883a 	mov	r6,zero
    6014:	01410204 	movi	r5,1032
    6018:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0409, 0x0);
    601c:	8009883a 	mov	r4,r16
    6020:	000d883a 	mov	r6,zero
    6024:	01410244 	movi	r5,1033
    6028:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x040A, 0x0);
    602c:	8009883a 	mov	r4,r16
    6030:	000d883a 	mov	r6,zero
    6034:	01410284 	movi	r5,1034
    6038:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x040B, 0x0);
    603c:	8009883a 	mov	r4,r16
    6040:	000d883a 	mov	r6,zero
    6044:	014102c4 	movi	r5,1035
    6048:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x040C, 0x0);
    604c:	8009883a 	mov	r4,r16
    6050:	000d883a 	mov	r6,zero
    6054:	01410304 	movi	r5,1036
    6058:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x040e, 0x0);
    605c:	8009883a 	mov	r4,r16
    6060:	000d883a 	mov	r6,zero
    6064:	01410384 	movi	r5,1038
    6068:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0440, 0x20);
    606c:	980d883a 	mov	r6,r19
    6070:	8009883a 	mov	r4,r16
    6074:	01411004 	movi	r5,1088
    6078:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0441, 0x0);
    607c:	8009883a 	mov	r4,r16
    6080:	000d883a 	mov	r6,zero
    6084:	01411044 	movi	r5,1089
    6088:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0442, 0x0);
    608c:	8009883a 	mov	r4,r16
    6090:	000d883a 	mov	r6,zero
    6094:	01411084 	movi	r5,1090
    6098:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0443, 0x0);
    609c:	8009883a 	mov	r4,r16
    60a0:	000d883a 	mov	r6,zero
    60a4:	014110c4 	movi	r5,1091
    60a8:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x05c0, 0x0);
    60ac:	8009883a 	mov	r4,r16
    60b0:	000d883a 	mov	r6,zero
    60b4:	01417004 	movi	r5,1472
    60b8:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x05c1, 0x0);
    60bc:	8009883a 	mov	r4,r16
    60c0:	000d883a 	mov	r6,zero
    60c4:	01417044 	movi	r5,1473
    60c8:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x05c2, 0x0);
    60cc:	8009883a 	mov	r4,r16
    60d0:	000d883a 	mov	r6,zero
    60d4:	01417084 	movi	r5,1474
    60d8:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x05c3, 0x0);
    60dc:	8009883a 	mov	r4,r16
    60e0:	000d883a 	mov	r6,zero
    60e4:	014170c4 	movi	r5,1475
    60e8:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x05c4, 0x0);
    60ec:	8009883a 	mov	r4,r16
    60f0:	000d883a 	mov	r6,zero
    60f4:	01417104 	movi	r5,1476
    60f8:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x05c5, 0x0);
    60fc:	8009883a 	mov	r4,r16
    6100:	000d883a 	mov	r6,zero
    6104:	01417144 	movi	r5,1477
    6108:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x05c6, 0x0);
    610c:	8009883a 	mov	r4,r16
    6110:	000d883a 	mov	r6,zero
    6114:	01417184 	movi	r5,1478
    6118:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x05c7, 0x0);
    611c:	8009883a 	mov	r4,r16
    6120:	000d883a 	mov	r6,zero
    6124:	014171c4 	movi	r5,1479
    6128:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x05c8, 0x0);
    612c:	8009883a 	mov	r4,r16
    6130:	000d883a 	mov	r6,zero
    6134:	01417204 	movi	r5,1480
    6138:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x05c9, 0x0);
    613c:	8009883a 	mov	r4,r16
    6140:	000d883a 	mov	r6,zero
    6144:	01417244 	movi	r5,1481
    6148:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x05ca, 0x0);
    614c:	8009883a 	mov	r4,r16
    6150:	000d883a 	mov	r6,zero
    6154:	01417284 	movi	r5,1482
    6158:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x05cb, 0x0);
    615c:	8009883a 	mov	r4,r16
    6160:	000d883a 	mov	r6,zero
    6164:	014172c4 	movi	r5,1483
    6168:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x05cc, 0x0);
    616c:	8009883a 	mov	r4,r16
    6170:	000d883a 	mov	r6,zero
    6174:	01417304 	movi	r5,1484
    6178:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0600, 0xf00);
    617c:	8009883a 	mov	r4,r16
    6180:	0183c004 	movi	r6,3840
    6184:	01418004 	movi	r5,1536
    6188:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0601, 0x0);
    618c:	8009883a 	mov	r4,r16
    6190:	000d883a 	mov	r6,zero
    6194:	01418044 	movi	r5,1537
    6198:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0602, 0x2000);
    619c:	8009883a 	mov	r4,r16
    61a0:	01880004 	movi	r6,8192
    61a4:	01418084 	movi	r5,1538
    61a8:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0603, 0x0);
    61ac:	8009883a 	mov	r4,r16
    61b0:	000d883a 	mov	r6,zero
    61b4:	014180c4 	movi	r5,1539
    61b8:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0604, 0x0);
    61bc:	8009883a 	mov	r4,r16
    61c0:	000d883a 	mov	r6,zero
    61c4:	01418104 	movi	r5,1540
    61c8:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0605, 0x0);
    61cc:	8009883a 	mov	r4,r16
    61d0:	000d883a 	mov	r6,zero
    61d4:	01418144 	movi	r5,1541
    61d8:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0606, 0x0);
    61dc:	8009883a 	mov	r4,r16
    61e0:	000d883a 	mov	r6,zero
    61e4:	01418184 	movi	r5,1542
    61e8:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0640, 0xa0);
    61ec:	a80d883a 	mov	r6,r21
    61f0:	8009883a 	mov	r4,r16
    61f4:	01419004 	movi	r5,1600
    61f8:	00039140 	call	3914 <LMS7002M_regs_set>
    LMS7002M_regs_set(regs, 0x0641, 0x1020);
    61fc:	01840804 	movi	r6,4128
    6200:	01419044 	movi	r5,1601
    6204:	8009883a 	mov	r4,r16
}
    6208:	dfc00c17 	ldw	ra,48(sp)
    620c:	df000b17 	ldw	fp,44(sp)
    6210:	ddc00a17 	ldw	r23,40(sp)
    6214:	dd800917 	ldw	r22,36(sp)
    6218:	dd400817 	ldw	r21,32(sp)
    621c:	dd000717 	ldw	r20,28(sp)
    6220:	dcc00617 	ldw	r19,24(sp)
    6224:	dc800517 	ldw	r18,20(sp)
    6228:	dc400417 	ldw	r17,16(sp)
    622c:	dc000317 	ldw	r16,12(sp)
    6230:	dec00d04 	addi	sp,sp,52
    LMS7002M_regs_set(regs, 0x0603, 0x0);
    LMS7002M_regs_set(regs, 0x0604, 0x0);
    LMS7002M_regs_set(regs, 0x0605, 0x0);
    LMS7002M_regs_set(regs, 0x0606, 0x0);
    LMS7002M_regs_set(regs, 0x0640, 0xa0);
    LMS7002M_regs_set(regs, 0x0641, 0x1020);
    6234:	00039141 	jmpi	3914 <LMS7002M_regs_set>

00006238 <LMS7002M_create>:

/***********************************************************************
 * Create/destroy implementations
 **********************************************************************/
LMS7002M_t *LMS7002M_create(LMS7002M_spi_transact_t transact)
{
    6238:	defffd04 	addi	sp,sp,-12
    623c:	dc000015 	stw	r16,0(sp)
    LMS7002M_t *self = &static_self;
    if (self == NULL) return NULL;
    self->spi_transact = transact;
    6240:	040000f4 	movhi	r16,3
    6244:	842b0904 	addi	r16,r16,-21468

/***********************************************************************
 * Create/destroy implementations
 **********************************************************************/
LMS7002M_t *LMS7002M_create(LMS7002M_spi_transact_t transact)
{
    6248:	dc400115 	stw	r17,4(sp)
    LMS7002M_t *self = &static_self;
    if (self == NULL) return NULL;
    self->spi_transact = transact;
    LMS7002M_regs_init(&self->_regs[0]);
    624c:	84400104 	addi	r17,r16,4
 **********************************************************************/
LMS7002M_t *LMS7002M_create(LMS7002M_spi_transact_t transact)
{
    LMS7002M_t *self = &static_self;
    if (self == NULL) return NULL;
    self->spi_transact = transact;
    6250:	81000015 	stw	r4,0(r16)
    LMS7002M_regs_init(&self->_regs[0]);
    6254:	8809883a 	mov	r4,r17

/***********************************************************************
 * Create/destroy implementations
 **********************************************************************/
LMS7002M_t *LMS7002M_create(LMS7002M_spi_transact_t transact)
{
    6258:	dfc00215 	stw	ra,8(sp)
    LMS7002M_t *self = &static_self;
    if (self == NULL) return NULL;
    self->spi_transact = transact;
    LMS7002M_regs_init(&self->_regs[0]);
    625c:	00058300 	call	5830 <LMS7002M_regs_init>
    LMS7002M_regs_init(&self->_regs[1]);
    6260:	81023504 	addi	r4,r16,2260
    6264:	00058300 	call	5830 <LMS7002M_regs_init>
    self->sxt_freq = 0.0;
    self->cgen_fref = 0.0;
    self->sxr_fref = 0.0;
    self->sxt_fref = 0.0;
    return self;
}
    6268:	8005883a 	mov	r2,r16
    LMS7002M_t *self = &static_self;
    if (self == NULL) return NULL;
    self->spi_transact = transact;
    LMS7002M_regs_init(&self->_regs[0]);
    LMS7002M_regs_init(&self->_regs[1]);
    self->regs = self->_regs;
    626c:	84446915 	stw	r17,4516(r16)
    self->cgen_freq = 0.0;
    6270:	80046a15 	stw	zero,4520(r16)
    6274:	80046b15 	stw	zero,4524(r16)
    self->sxr_freq = 0.0;
    6278:	80046c15 	stw	zero,4528(r16)
    627c:	80046d15 	stw	zero,4532(r16)
    self->sxt_freq = 0.0;
    6280:	80046e15 	stw	zero,4536(r16)
    6284:	80046f15 	stw	zero,4540(r16)
    self->cgen_fref = 0.0;
    6288:	80047015 	stw	zero,4544(r16)
    628c:	80047115 	stw	zero,4548(r16)
    self->sxr_fref = 0.0;
    6290:	80047215 	stw	zero,4552(r16)
    6294:	80047315 	stw	zero,4556(r16)
    self->sxt_fref = 0.0;
    6298:	80047415 	stw	zero,4560(r16)
    629c:	80047515 	stw	zero,4564(r16)
    return self;
}
    62a0:	dfc00217 	ldw	ra,8(sp)
    62a4:	dc400117 	ldw	r17,4(sp)
    62a8:	dc000017 	ldw	r16,0(sp)
    62ac:	dec00304 	addi	sp,sp,12
    62b0:	f800283a 	ret

000062b4 <LMS7002M_destroy>:

void LMS7002M_destroy(LMS7002M_t *self)
{
    62b4:	f800283a 	ret

000062b8 <LMS7002M_spi_write>:
 * Helper calls to format SPI transactions
 **********************************************************************/
void LMS7002M_spi_write(LMS7002M_t *self, const int addr, const int value)
{
    uint32_t data = (((uint32_t)1) << 31) | (((uint32_t)addr) << 16) | (value & 0xffff);
    self->spi_transact(data, false/*no readback*/);
    62b8:	2806943a 	slli	r3,r5,16
    62bc:	20800017 	ldw	r2,0(r4)
    62c0:	31bfffcc 	andi	r6,r6,65535
    62c4:	31a00034 	orhi	r6,r6,32768
    62c8:	000b883a 	mov	r5,zero
    62cc:	30c8b03a 	or	r4,r6,r3
    62d0:	1000683a 	jmp	r2

000062d4 <LMS7002M_spi_read>:
}

int LMS7002M_spi_read(LMS7002M_t *self, const int addr)
{
    uint32_t data = (((uint32_t)addr) << 16);
    return self->spi_transact(data, true/*readback*/) & 0xffff;
    62d4:	2806943a 	slli	r3,r5,16
    62d8:	20800017 	ldw	r2,0(r4)
    uint32_t data = (((uint32_t)1) << 31) | (((uint32_t)addr) << 16) | (value & 0xffff);
    self->spi_transact(data, false/*no readback*/);
}

int LMS7002M_spi_read(LMS7002M_t *self, const int addr)
{
    62dc:	deffff04 	addi	sp,sp,-4
    62e0:	dfc00015 	stw	ra,0(sp)
    uint32_t data = (((uint32_t)addr) << 16);
    return self->spi_transact(data, true/*readback*/) & 0xffff;
    62e4:	01400044 	movi	r5,1
    62e8:	1809883a 	mov	r4,r3
    62ec:	103ee83a 	callr	r2
}
    62f0:	10bfffcc 	andi	r2,r2,65535
    62f4:	dfc00017 	ldw	ra,0(sp)
    62f8:	dec00104 	addi	sp,sp,4
    62fc:	f800283a 	ret

00006300 <LMS7002M_regs_spi_write>:

void LMS7002M_regs_spi_write(LMS7002M_t *self, const int addr)
{
    6300:	defffc04 	addi	sp,sp,-16
    6304:	dc800215 	stw	r18,8(sp)
    6308:	dc400115 	stw	r17,4(sp)
    630c:	dfc00315 	stw	ra,12(sp)
    6310:	dc000015 	stw	r16,0(sp)
}

static inline int LMS7002M_regs_get(LMS7002M_regs_t *regs, const int addr)
{
    int value = 0;
    if (addr == 0x0020)
    6314:	00c00804 	movi	r3,32
    6318:	2025883a 	mov	r18,r4
    631c:	2823883a 	mov	r17,r5
    int value = LMS7002M_regs_get(self->regs, addr);
    6320:	20846917 	ldw	r2,4516(r4)
    6324:	28c03b1e 	bne	r5,r3,6414 <LMS7002M_regs_spi_write+0x114>
        value |= (regs->reg_0x0020_srst_txfifo & 0x1) << 6;
        value |= (regs->reg_0x0020_rxen_b & 0x1) << 5;
        value |= (regs->reg_0x0020_rxen_a & 0x1) << 4;
        value |= (regs->reg_0x0020_txen_b & 0x1) << 3;
        value |= (regs->reg_0x0020_txen_a & 0x1) << 2;
        value |= (regs->reg_0x0020_mac & 0x3) << 0;
    6328:	10c00017 	ldw	r3,0(r2)
    632c:	180693fa 	slli	r3,r3,15
    6330:	1c3fffcc 	andi	r16,r3,65535
    6334:	10c00117 	ldw	r3,4(r2)
    6338:	18c0004c 	andi	r3,r3,1
    633c:	180693ba 	slli	r3,r3,14
    6340:	80c6b03a 	or	r3,r16,r3
    6344:	14000e17 	ldw	r16,56(r2)
    6348:	840000cc 	andi	r16,r16,3
    634c:	1c20b03a 	or	r16,r3,r16
    6350:	10c00217 	ldw	r3,8(r2)
    6354:	18c0004c 	andi	r3,r3,1
    6358:	1806937a 	slli	r3,r3,13
    635c:	80e0b03a 	or	r16,r16,r3
    6360:	10c00317 	ldw	r3,12(r2)
    6364:	18c0004c 	andi	r3,r3,1
    6368:	1806933a 	slli	r3,r3,12
    636c:	80e0b03a 	or	r16,r16,r3
    6370:	10c00417 	ldw	r3,16(r2)
    6374:	18c0004c 	andi	r3,r3,1
    6378:	180692fa 	slli	r3,r3,11
    637c:	80e0b03a 	or	r16,r16,r3
    6380:	10c00517 	ldw	r3,20(r2)
    6384:	18c0004c 	andi	r3,r3,1
    6388:	180692ba 	slli	r3,r3,10
    638c:	80e0b03a 	or	r16,r16,r3
    6390:	10c00617 	ldw	r3,24(r2)
    6394:	18c0004c 	andi	r3,r3,1
    6398:	1806927a 	slli	r3,r3,9
    639c:	80e0b03a 	or	r16,r16,r3
    63a0:	10c00717 	ldw	r3,28(r2)
    63a4:	18c0004c 	andi	r3,r3,1
    63a8:	1806923a 	slli	r3,r3,8
    63ac:	80e0b03a 	or	r16,r16,r3
    63b0:	10c00817 	ldw	r3,32(r2)
    63b4:	180691fa 	slli	r3,r3,7
    63b8:	18c03fcc 	andi	r3,r3,255
    63bc:	80e0b03a 	or	r16,r16,r3
    63c0:	10c00917 	ldw	r3,36(r2)
    63c4:	18c0004c 	andi	r3,r3,1
    63c8:	180691ba 	slli	r3,r3,6
    63cc:	80e0b03a 	or	r16,r16,r3
    63d0:	10c00a17 	ldw	r3,40(r2)
    63d4:	18c0004c 	andi	r3,r3,1
    63d8:	1806917a 	slli	r3,r3,5
    63dc:	80e0b03a 	or	r16,r16,r3
    63e0:	10c00b17 	ldw	r3,44(r2)
    63e4:	18c0004c 	andi	r3,r3,1
    63e8:	1806913a 	slli	r3,r3,4
    63ec:	80e0b03a 	or	r16,r16,r3
    63f0:	10c00c17 	ldw	r3,48(r2)
    63f4:	18c0004c 	andi	r3,r3,1
    63f8:	180690fa 	slli	r3,r3,3
    63fc:	80e0b03a 	or	r16,r16,r3
    6400:	10c00d17 	ldw	r3,52(r2)
    6404:	18c0004c 	andi	r3,r3,1
    6408:	18c7883a 	add	r3,r3,r3
    640c:	18c7883a 	add	r3,r3,r3
    6410:	00003006 	br	64d4 <LMS7002M_regs_spi_write+0x1d4>
    }
    if (addr == 0x0021)
    6414:	00c00844 	movi	r3,33
    6418:	28c0301e 	bne	r5,r3,64dc <LMS7002M_regs_spi_write+0x1dc>
    {
        value |= (regs->reg_0x0021_tx_clk_pe & 0x1) << 11;
    641c:	11000f17 	ldw	r4,60(r2)
        value |= (regs->reg_0x0021_sdio_ds & 0x1) << 5;
        value |= (regs->reg_0x0021_sdio_pe & 0x1) << 4;
        value |= (regs->reg_0x0021_sdo_pe & 0x1) << 3;
        value |= (regs->reg_0x0021_sclk_pe & 0x1) << 2;
        value |= (regs->reg_0x0021_sen_pe & 0x1) << 1;
        value |= (regs->reg_0x0021_spimode & 0x1) << 0;
    6420:	10c01a17 	ldw	r3,104(r2)
        value |= (regs->reg_0x0020_txen_a & 0x1) << 2;
        value |= (regs->reg_0x0020_mac & 0x3) << 0;
    }
    if (addr == 0x0021)
    {
        value |= (regs->reg_0x0021_tx_clk_pe & 0x1) << 11;
    6424:	2100004c 	andi	r4,r4,1
    6428:	200a92fa 	slli	r5,r4,11
        value |= (regs->reg_0x0021_sdio_ds & 0x1) << 5;
        value |= (regs->reg_0x0021_sdio_pe & 0x1) << 4;
        value |= (regs->reg_0x0021_sdo_pe & 0x1) << 3;
        value |= (regs->reg_0x0021_sclk_pe & 0x1) << 2;
        value |= (regs->reg_0x0021_sen_pe & 0x1) << 1;
        value |= (regs->reg_0x0021_spimode & 0x1) << 0;
    642c:	11001017 	ldw	r4,64(r2)
    6430:	18c0004c 	andi	r3,r3,1
    6434:	2100004c 	andi	r4,r4,1
    6438:	200892ba 	slli	r4,r4,10
    643c:	2148b03a 	or	r4,r4,r5
    6440:	20c6b03a 	or	r3,r4,r3
    6444:	11001117 	ldw	r4,68(r2)
    6448:	2100004c 	andi	r4,r4,1
    644c:	2008927a 	slli	r4,r4,9
    6450:	1906b03a 	or	r3,r3,r4
    6454:	11001217 	ldw	r4,72(r2)
    6458:	2100004c 	andi	r4,r4,1
    645c:	2008923a 	slli	r4,r4,8
    6460:	1906b03a 	or	r3,r3,r4
    6464:	11001317 	ldw	r4,76(r2)
    6468:	200891fa 	slli	r4,r4,7
    646c:	21003fcc 	andi	r4,r4,255
    6470:	1906b03a 	or	r3,r3,r4
    6474:	11001417 	ldw	r4,80(r2)
    6478:	2100004c 	andi	r4,r4,1
    647c:	200891ba 	slli	r4,r4,6
    6480:	1906b03a 	or	r3,r3,r4
    6484:	11001517 	ldw	r4,84(r2)
    6488:	2100004c 	andi	r4,r4,1
    648c:	2008917a 	slli	r4,r4,5
    6490:	1906b03a 	or	r3,r3,r4
    6494:	11001617 	ldw	r4,88(r2)
    6498:	2100004c 	andi	r4,r4,1
    649c:	2008913a 	slli	r4,r4,4
    64a0:	1906b03a 	or	r3,r3,r4
    64a4:	11001717 	ldw	r4,92(r2)
    64a8:	2100004c 	andi	r4,r4,1
    64ac:	200890fa 	slli	r4,r4,3
    64b0:	1920b03a 	or	r16,r3,r4
    64b4:	10c01817 	ldw	r3,96(r2)
    64b8:	18c0004c 	andi	r3,r3,1
    64bc:	18c7883a 	add	r3,r3,r3
    64c0:	18c7883a 	add	r3,r3,r3
    64c4:	80c6b03a 	or	r3,r16,r3
    64c8:	14001917 	ldw	r16,100(r2)
    64cc:	8400004c 	andi	r16,r16,1
    64d0:	8421883a 	add	r16,r16,r16
    64d4:	1c20b03a 	or	r16,r3,r16
    64d8:	00009306 	br	6728 <LMS7002M_regs_spi_write+0x428>
    }
    if (addr == 0x0022)
    64dc:	00c00884 	movi	r3,34
    64e0:	28c0301e 	bne	r5,r3,65a4 <LMS7002M_regs_spi_write+0x2a4>
        value |= (regs->reg_0x0022_diq1_ds & 0x1) << 5;
        value |= (regs->reg_0x0022_diq1_pe & 0x1) << 4;
        value |= (regs->reg_0x0022_iq_sel_en_1_pe & 0x1) << 3;
        value |= (regs->reg_0x0022_txnrx1_pe & 0x1) << 2;
        value |= (regs->reg_0x0022_fclk1_pe & 0x1) << 1;
        value |= (regs->reg_0x0022_mclk1_pe & 0x1) << 0;
    64e4:	11001b17 	ldw	r4,108(r2)
    64e8:	10c01c17 	ldw	r3,112(r2)
    64ec:	2100004c 	andi	r4,r4,1
    64f0:	18c0004c 	andi	r3,r3,1
    64f4:	180692ba 	slli	r3,r3,10
    64f8:	200892fa 	slli	r4,r4,11
    64fc:	20c8b03a 	or	r4,r4,r3
    6500:	10c02617 	ldw	r3,152(r2)
    6504:	18c0004c 	andi	r3,r3,1
    6508:	20c6b03a 	or	r3,r4,r3
    650c:	11001d17 	ldw	r4,116(r2)
    6510:	2100004c 	andi	r4,r4,1
    6514:	2008927a 	slli	r4,r4,9
    6518:	1906b03a 	or	r3,r3,r4
    651c:	11001e17 	ldw	r4,120(r2)
    6520:	2100004c 	andi	r4,r4,1
    6524:	2008923a 	slli	r4,r4,8
    6528:	1906b03a 	or	r3,r3,r4
    652c:	11001f17 	ldw	r4,124(r2)
    6530:	200891fa 	slli	r4,r4,7
    6534:	21003fcc 	andi	r4,r4,255
    6538:	1906b03a 	or	r3,r3,r4
    653c:	11002017 	ldw	r4,128(r2)
    6540:	2100004c 	andi	r4,r4,1
    6544:	200891ba 	slli	r4,r4,6
    6548:	1906b03a 	or	r3,r3,r4
    654c:	11002117 	ldw	r4,132(r2)
    6550:	2100004c 	andi	r4,r4,1
    6554:	2008917a 	slli	r4,r4,5
    6558:	1906b03a 	or	r3,r3,r4
    655c:	11002217 	ldw	r4,136(r2)
    6560:	2100004c 	andi	r4,r4,1
    6564:	2008913a 	slli	r4,r4,4
    6568:	1906b03a 	or	r3,r3,r4
    656c:	11002317 	ldw	r4,140(r2)
    6570:	2100004c 	andi	r4,r4,1
    6574:	200890fa 	slli	r4,r4,3
    6578:	1920b03a 	or	r16,r3,r4
    657c:	10c02417 	ldw	r3,144(r2)
    6580:	18c0004c 	andi	r3,r3,1
    6584:	18c7883a 	add	r3,r3,r3
    6588:	18c7883a 	add	r3,r3,r3
    658c:	80c6b03a 	or	r3,r16,r3
    6590:	14002517 	ldw	r16,148(r2)
    6594:	8400004c 	andi	r16,r16,1
    6598:	8421883a 	add	r16,r16,r16
    659c:	1c20b03a 	or	r16,r3,r16
    65a0:	00006606 	br	673c <LMS7002M_regs_spi_write+0x43c>
    }
    if (addr == 0x0023)
    65a4:	00c008c4 	movi	r3,35
    65a8:	28c03c1e 	bne	r5,r3,669c <LMS7002M_regs_spi_write+0x39c>
    65ac:	11002717 	ldw	r4,156(r2)
    65b0:	10c02817 	ldw	r3,160(r2)
    65b4:	200893fa 	slli	r4,r4,15
    65b8:	18c0004c 	andi	r3,r3,1
    65bc:	180693ba 	slli	r3,r3,14
    65c0:	213fffcc 	andi	r4,r4,65535
    65c4:	20c8b03a 	or	r4,r4,r3
    65c8:	10c03517 	ldw	r3,212(r2)
    65cc:	18c0004c 	andi	r3,r3,1
    65d0:	20c6b03a 	or	r3,r4,r3
    65d4:	11002917 	ldw	r4,164(r2)
    65d8:	2100004c 	andi	r4,r4,1
    65dc:	2008937a 	slli	r4,r4,13
    65e0:	1906b03a 	or	r3,r3,r4
    65e4:	11002a17 	ldw	r4,168(r2)
    65e8:	2100004c 	andi	r4,r4,1
    65ec:	2008933a 	slli	r4,r4,12
    65f0:	1906b03a 	or	r3,r3,r4
    65f4:	11002b17 	ldw	r4,172(r2)
    65f8:	2100004c 	andi	r4,r4,1
    65fc:	200892fa 	slli	r4,r4,11
    6600:	1906b03a 	or	r3,r3,r4
    6604:	11002c17 	ldw	r4,176(r2)
    6608:	2100004c 	andi	r4,r4,1
    660c:	200892ba 	slli	r4,r4,10
    6610:	1906b03a 	or	r3,r3,r4
    6614:	11002d17 	ldw	r4,180(r2)
    6618:	2100004c 	andi	r4,r4,1
    661c:	2008927a 	slli	r4,r4,9
    6620:	1906b03a 	or	r3,r3,r4
    6624:	11002e17 	ldw	r4,184(r2)
    6628:	2100004c 	andi	r4,r4,1
    662c:	2008923a 	slli	r4,r4,8
    6630:	1906b03a 	or	r3,r3,r4
    6634:	11002f17 	ldw	r4,188(r2)
    6638:	2100004c 	andi	r4,r4,1
    663c:	200891ba 	slli	r4,r4,6
    6640:	1906b03a 	or	r3,r3,r4
    6644:	11003017 	ldw	r4,192(r2)
    6648:	2100004c 	andi	r4,r4,1
    664c:	2008917a 	slli	r4,r4,5
    6650:	1906b03a 	or	r3,r3,r4
    6654:	11003117 	ldw	r4,196(r2)
    6658:	2100004c 	andi	r4,r4,1
    665c:	2008913a 	slli	r4,r4,4
    6660:	1906b03a 	or	r3,r3,r4
    6664:	11003217 	ldw	r4,200(r2)
    6668:	2100004c 	andi	r4,r4,1
    666c:	200890fa 	slli	r4,r4,3
    6670:	1920b03a 	or	r16,r3,r4
    6674:	10c03317 	ldw	r3,204(r2)
    6678:	18c0004c 	andi	r3,r3,1
    667c:	18c7883a 	add	r3,r3,r3
    6680:	18c7883a 	add	r3,r3,r3
    6684:	80c6b03a 	or	r3,r16,r3
    6688:	14003417 	ldw	r16,208(r2)
    668c:	8400004c 	andi	r16,r16,1
    6690:	8421883a 	add	r16,r16,r16
    6694:	1c20b03a 	or	r16,r3,r16
    6698:	00002d06 	br	6750 <LMS7002M_regs_spi_write+0x450>
        value |= (regs->reg_0x0023_lml2_mode & 0x1) << 3;
        value |= (regs->reg_0x0023_lml1_fidm & 0x1) << 2;
        value |= (regs->reg_0x0023_lml1_rxntxiq & 0x1) << 1;
        value |= (regs->reg_0x0023_lml1_mode & 0x1) << 0;
    }
    if (addr == 0x0024)
    669c:	00c00904 	movi	r3,36
    66a0:	28c0201e 	bne	r5,r3,6724 <LMS7002M_regs_spi_write+0x424>
    66a4:	10c03617 	ldw	r3,216(r2)
    66a8:	180693ba 	slli	r3,r3,14
    66ac:	1c3fffcc 	andi	r16,r3,65535
    66b0:	10c03717 	ldw	r3,220(r2)
    66b4:	18c000cc 	andi	r3,r3,3
    66b8:	1806933a 	slli	r3,r3,12
    66bc:	80c6b03a 	or	r3,r16,r3
    66c0:	14003d17 	ldw	r16,244(r2)
    66c4:	840000cc 	andi	r16,r16,3
    66c8:	1c20b03a 	or	r16,r3,r16
    66cc:	10c03817 	ldw	r3,224(r2)
    66d0:	18c000cc 	andi	r3,r3,3
    66d4:	180692ba 	slli	r3,r3,10
    66d8:	80e0b03a 	or	r16,r16,r3
    66dc:	10c03917 	ldw	r3,228(r2)
    66e0:	18c000cc 	andi	r3,r3,3
    66e4:	1806923a 	slli	r3,r3,8
    66e8:	80e0b03a 	or	r16,r16,r3
    66ec:	10c03a17 	ldw	r3,232(r2)
    66f0:	180691ba 	slli	r3,r3,6
    66f4:	18c03fcc 	andi	r3,r3,255
    66f8:	80e0b03a 	or	r16,r16,r3
    66fc:	10c03b17 	ldw	r3,236(r2)
    6700:	18c000cc 	andi	r3,r3,3
    6704:	1806913a 	slli	r3,r3,4
    6708:	80e0b03a 	or	r16,r16,r3
    670c:	10c03c17 	ldw	r3,240(r2)
    6710:	18c000cc 	andi	r3,r3,3
    6714:	18c7883a 	add	r3,r3,r3
    6718:	18c7883a 	add	r3,r3,r3
    671c:	80e0b03a 	or	r16,r16,r3
    6720:	00003306 	br	67f0 <LMS7002M_regs_spi_write+0x4f0>
    }
}

static inline int LMS7002M_regs_get(LMS7002M_regs_t *regs, const int addr)
{
    int value = 0;
    6724:	0021883a 	mov	r16,zero
        value |= (regs->reg_0x0024_lml1_bqp & 0x3) << 6;
        value |= (regs->reg_0x0024_lml1_bip & 0x3) << 4;
        value |= (regs->reg_0x0024_lml1_aqp & 0x3) << 2;
        value |= (regs->reg_0x0024_lml1_aip & 0x3) << 0;
    }
    if (addr == 0x0025)
    6728:	00c00944 	movi	r3,37
    672c:	88c0031e 	bne	r17,r3,673c <LMS7002M_regs_spi_write+0x43c>
    {
        value |= (regs->reg_0x0025_value & 0xffff) << 0;
    6730:	10c03e0b 	ldhu	r3,248(r2)
    6734:	80e0b03a 	or	r16,r16,r3
    6738:	00003206 	br	6804 <LMS7002M_regs_spi_write+0x504>
    }
    if (addr == 0x0026)
    673c:	00c00984 	movi	r3,38
    6740:	88c0031e 	bne	r17,r3,6750 <LMS7002M_regs_spi_write+0x450>
    {
        value |= (regs->reg_0x0026_value & 0xffff) << 0;
    6744:	10c03f0b 	ldhu	r3,252(r2)
    6748:	80e0b03a 	or	r16,r16,r3
    674c:	00004806 	br	6870 <LMS7002M_regs_spi_write+0x570>
    }
    if (addr == 0x0027)
    6750:	00c009c4 	movi	r3,39
    6754:	88c0211e 	bne	r17,r3,67dc <LMS7002M_regs_spi_write+0x4dc>
        value |= (regs->reg_0x0027_lml2_s1s & 0x3) << 10;
        value |= (regs->reg_0x0027_lml2_s0s & 0x3) << 8;
        value |= (regs->reg_0x0027_lml2_bqp & 0x3) << 6;
        value |= (regs->reg_0x0027_lml2_bip & 0x3) << 4;
        value |= (regs->reg_0x0027_lml2_aqp & 0x3) << 2;
        value |= (regs->reg_0x0027_lml2_aip & 0x3) << 0;
    6758:	11004017 	ldw	r4,256(r2)
    675c:	10c04117 	ldw	r3,260(r2)
    6760:	11404417 	ldw	r5,272(r2)
    6764:	200893ba 	slli	r4,r4,14
    6768:	18c000cc 	andi	r3,r3,3
    676c:	1806933a 	slli	r3,r3,12
    6770:	213fffcc 	andi	r4,r4,65535
    6774:	280a91ba 	slli	r5,r5,6
    6778:	20c8b03a 	or	r4,r4,r3
    677c:	10c04717 	ldw	r3,284(r2)
    6780:	29403fcc 	andi	r5,r5,255
    6784:	18c000cc 	andi	r3,r3,3
    6788:	20c6b03a 	or	r3,r4,r3
    678c:	11004217 	ldw	r4,264(r2)
    6790:	210000cc 	andi	r4,r4,3
    6794:	200892ba 	slli	r4,r4,10
    6798:	1906b03a 	or	r3,r3,r4
    679c:	11004317 	ldw	r4,268(r2)
    67a0:	210000cc 	andi	r4,r4,3
    67a4:	2008923a 	slli	r4,r4,8
    67a8:	1906b03a 	or	r3,r3,r4
    67ac:	11004517 	ldw	r4,276(r2)
    67b0:	1946b03a 	or	r3,r3,r5
    67b4:	210000cc 	andi	r4,r4,3
    67b8:	2008913a 	slli	r4,r4,4
    67bc:	1908b03a 	or	r4,r3,r4
    67c0:	10c04617 	ldw	r3,280(r2)
    67c4:	18c000cc 	andi	r3,r3,3
    67c8:	18c7883a 	add	r3,r3,r3
    67cc:	18c7883a 	add	r3,r3,r3
    67d0:	20c6b03a 	or	r3,r4,r3
    67d4:	80e0b03a 	or	r16,r16,r3
    67d8:	00004006 	br	68dc <LMS7002M_regs_spi_write+0x5dc>
    }
    if (addr == 0x0028)
    67dc:	00c00a04 	movi	r3,40
    67e0:	88c0031e 	bne	r17,r3,67f0 <LMS7002M_regs_spi_write+0x4f0>
    {
        value |= (regs->reg_0x0028_value & 0xffff) << 0;
    67e4:	10c0480b 	ldhu	r3,288(r2)
    67e8:	80e0b03a 	or	r16,r16,r3
    67ec:	00004406 	br	6900 <LMS7002M_regs_spi_write+0x600>
    }
    if (addr == 0x0029)
    67f0:	00c00a44 	movi	r3,41
    67f4:	88c0031e 	bne	r17,r3,6804 <LMS7002M_regs_spi_write+0x504>
    {
        value |= (regs->reg_0x0029_value & 0xffff) << 0;
    67f8:	10c0490b 	ldhu	r3,292(r2)
    67fc:	80e0b03a 	or	r16,r16,r3
    6800:	00004606 	br	691c <LMS7002M_regs_spi_write+0x61c>
    }
    if (addr == 0x002A)
    6804:	00c00a84 	movi	r3,42
    6808:	88c0191e 	bne	r17,r3,6870 <LMS7002M_regs_spi_write+0x570>
        value |= (regs->reg_0x002a_rx_mux & 0x3) << 10;
        value |= (regs->reg_0x002a_tx_mux & 0x3) << 8;
        value |= (regs->reg_0x002a_txrdclk_mux & 0x3) << 6;
        value |= (regs->reg_0x002a_txwrclk_mux & 0x3) << 4;
        value |= (regs->reg_0x002a_rxrdclk_mux & 0x3) << 2;
        value |= (regs->reg_0x002a_rxwrclk_mux & 0x3) << 0;
    680c:	11404a17 	ldw	r5,296(r2)
    6810:	10c04b17 	ldw	r3,300(r2)
    6814:	11004d17 	ldw	r4,308(r2)
    6818:	294000cc 	andi	r5,r5,3
    681c:	18c000cc 	andi	r3,r3,3
    6820:	1806923a 	slli	r3,r3,8
    6824:	280a92ba 	slli	r5,r5,10
    6828:	210000cc 	andi	r4,r4,3
    682c:	2008913a 	slli	r4,r4,4
    6830:	28cab03a 	or	r5,r5,r3
    6834:	10c04f17 	ldw	r3,316(r2)
    6838:	18c000cc 	andi	r3,r3,3
    683c:	28c6b03a 	or	r3,r5,r3
    6840:	11404c17 	ldw	r5,304(r2)
    6844:	280a91ba 	slli	r5,r5,6
    6848:	29403fcc 	andi	r5,r5,255
    684c:	1946b03a 	or	r3,r3,r5
    6850:	1908b03a 	or	r4,r3,r4
    6854:	10c04e17 	ldw	r3,312(r2)
    6858:	18c000cc 	andi	r3,r3,3
    685c:	18c7883a 	add	r3,r3,r3
    6860:	18c7883a 	add	r3,r3,r3
    6864:	20c6b03a 	or	r3,r4,r3
    6868:	80e0b03a 	or	r16,r16,r3
    686c:	00003906 	br	6954 <LMS7002M_regs_spi_write+0x654>
    }
    if (addr == 0x002B)
    6870:	00c00ac4 	movi	r3,43
    6874:	88c0191e 	bne	r17,r3,68dc <LMS7002M_regs_spi_write+0x5dc>
        value |= (regs->reg_0x002b_fclk2_inv & 0x1) << 15;
        value |= (regs->reg_0x002b_fclk1_inv & 0x1) << 14;
        value |= (regs->reg_0x002b_mclk2src & 0x3) << 4;
        value |= (regs->reg_0x002b_mclk1src & 0x3) << 2;
        value |= (regs->reg_0x002b_txdiven & 0x1) << 1;
        value |= (regs->reg_0x002b_rxdiven & 0x1) << 0;
    6878:	11405017 	ldw	r5,320(r2)
    687c:	10c05117 	ldw	r3,324(r2)
    6880:	11005217 	ldw	r4,328(r2)
    6884:	280a93fa 	slli	r5,r5,15
    6888:	18c0004c 	andi	r3,r3,1
    688c:	180693ba 	slli	r3,r3,14
    6890:	297fffcc 	andi	r5,r5,65535
    6894:	210000cc 	andi	r4,r4,3
    6898:	28cab03a 	or	r5,r5,r3
    689c:	10c05517 	ldw	r3,340(r2)
    68a0:	2008913a 	slli	r4,r4,4
    68a4:	18c0004c 	andi	r3,r3,1
    68a8:	28c6b03a 	or	r3,r5,r3
    68ac:	1908b03a 	or	r4,r3,r4
    68b0:	10c05317 	ldw	r3,332(r2)
    68b4:	18c000cc 	andi	r3,r3,3
    68b8:	18c7883a 	add	r3,r3,r3
    68bc:	18c7883a 	add	r3,r3,r3
    68c0:	20c6b03a 	or	r3,r4,r3
    68c4:	11005417 	ldw	r4,336(r2)
    68c8:	2100004c 	andi	r4,r4,1
    68cc:	2109883a 	add	r4,r4,r4
    68d0:	1906b03a 	or	r3,r3,r4
    68d4:	80e0b03a 	or	r16,r16,r3
    68d8:	00003106 	br	69a0 <LMS7002M_regs_spi_write+0x6a0>
    }
    if (addr == 0x002C)
    68dc:	00c00b04 	movi	r3,44
    68e0:	88c0071e 	bne	r17,r3,6900 <LMS7002M_regs_spi_write+0x600>
    {
        value |= (regs->reg_0x002c_txtspclk_div & 0xff) << 8;
        value |= (regs->reg_0x002c_rxtspclk_div & 0xff) << 0;
    68e4:	10c05617 	ldw	r3,344(r2)
    68e8:	11005703 	ldbu	r4,348(r2)
    68ec:	1806923a 	slli	r3,r3,8
    68f0:	18ffffcc 	andi	r3,r3,65535
    68f4:	1906b03a 	or	r3,r3,r4
    68f8:	80e0b03a 	or	r16,r16,r3
    68fc:	00005306 	br	6a4c <LMS7002M_regs_spi_write+0x74c>
    }
    if (addr == 0x002E)
    6900:	00c00b84 	movi	r3,46
    6904:	88c0051e 	bne	r17,r3,691c <LMS7002M_regs_spi_write+0x61c>
    {
        value |= (regs->reg_0x002e_mimo_siso & 0x1) << 15;
    6908:	10c05817 	ldw	r3,352(r2)
    690c:	180693fa 	slli	r3,r3,15
    6910:	18ffffcc 	andi	r3,r3,65535
    6914:	80e0b03a 	or	r16,r16,r3
    6918:	00006b06 	br	6ac8 <LMS7002M_regs_spi_write+0x7c8>
    }
    if (addr == 0x002F)
    691c:	00c00bc4 	movi	r3,47
    6920:	88c00c1e 	bne	r17,r3,6954 <LMS7002M_regs_spi_write+0x654>
    {
        value |= (regs->reg_0x002f_ver & 0x1f) << 11;
        value |= (regs->reg_0x002f_rev & 0x1f) << 6;
        value |= (regs->reg_0x002f_mask & 0x3f) << 0;
    6924:	10c05917 	ldw	r3,356(r2)
    6928:	180692fa 	slli	r3,r3,11
    692c:	193fffcc 	andi	r4,r3,65535
    6930:	10c05a17 	ldw	r3,360(r2)
    6934:	18c007cc 	andi	r3,r3,31
    6938:	180691ba 	slli	r3,r3,6
    693c:	20c6b03a 	or	r3,r4,r3
    6940:	11005b17 	ldw	r4,364(r2)
    6944:	21000fcc 	andi	r4,r4,63
    6948:	1906b03a 	or	r3,r3,r4
    694c:	80e0b03a 	or	r16,r16,r3
    6950:	00008406 	br	6b64 <LMS7002M_regs_spi_write+0x864>
    }
    if (addr == 0x0081)
    6954:	00c02044 	movi	r3,129
    6958:	88c0111e 	bne	r17,r3,69a0 <LMS7002M_regs_spi_write+0x6a0>
    {
        value |= (regs->reg_0x0081_en_dir_ldo & 0x1) << 3;
        value |= (regs->reg_0x0081_en_dir_cgen & 0x1) << 2;
        value |= (regs->reg_0x0081_en_dir_xbuf & 0x1) << 1;
        value |= (regs->reg_0x0081_en_dir_afe & 0x1) << 0;
    695c:	10c05c17 	ldw	r3,368(r2)
    6960:	18c0004c 	andi	r3,r3,1
    6964:	180890fa 	slli	r4,r3,3
    6968:	10c05d17 	ldw	r3,372(r2)
    696c:	18c0004c 	andi	r3,r3,1
    6970:	18c7883a 	add	r3,r3,r3
    6974:	18c7883a 	add	r3,r3,r3
    6978:	20c6b03a 	or	r3,r4,r3
    697c:	11005f17 	ldw	r4,380(r2)
    6980:	2100004c 	andi	r4,r4,1
    6984:	1906b03a 	or	r3,r3,r4
    6988:	11005e17 	ldw	r4,376(r2)
    698c:	2100004c 	andi	r4,r4,1
    6990:	2109883a 	add	r4,r4,r4
    6994:	1906b03a 	or	r3,r3,r4
    6998:	80e0b03a 	or	r16,r16,r3
    699c:	0000a806 	br	6c40 <LMS7002M_regs_spi_write+0x940>
    }
    if (addr == 0x0082)
    69a0:	00c02084 	movi	r3,130
    69a4:	88c0291e 	bne	r17,r3,6a4c <LMS7002M_regs_spi_write+0x74c>
        value |= (regs->reg_0x0082_pd_afe & 0x1) << 5;
        value |= (regs->reg_0x0082_pd_rx_afe1 & 0x1) << 4;
        value |= (regs->reg_0x0082_pd_rx_afe2 & 0x1) << 3;
        value |= (regs->reg_0x0082_pd_tx_afe1 & 0x1) << 2;
        value |= (regs->reg_0x0082_pd_tx_afe2 & 0x1) << 1;
        value |= (regs->reg_0x0082_en_g_afe & 0x1) << 0;
    69a8:	11006017 	ldw	r4,384(r2)
    69ac:	10c06117 	ldw	r3,388(r2)
    69b0:	11406517 	ldw	r5,404(r2)
    69b4:	2008937a 	slli	r4,r4,13
    69b8:	18c0004c 	andi	r3,r3,1
    69bc:	1806933a 	slli	r3,r3,12
    69c0:	213fffcc 	andi	r4,r4,65535
    69c4:	2940004c 	andi	r5,r5,1
    69c8:	20c8b03a 	or	r4,r4,r3
    69cc:	10c06917 	ldw	r3,420(r2)
    69d0:	280a913a 	slli	r5,r5,4
    69d4:	18c0004c 	andi	r3,r3,1
    69d8:	20c6b03a 	or	r3,r4,r3
    69dc:	11006217 	ldw	r4,392(r2)
    69e0:	210000cc 	andi	r4,r4,3
    69e4:	200892ba 	slli	r4,r4,10
    69e8:	1906b03a 	or	r3,r3,r4
    69ec:	11006317 	ldw	r4,396(r2)
    69f0:	210000cc 	andi	r4,r4,3
    69f4:	2008923a 	slli	r4,r4,8
    69f8:	1906b03a 	or	r3,r3,r4
    69fc:	11006417 	ldw	r4,400(r2)
    6a00:	2100004c 	andi	r4,r4,1
    6a04:	2008917a 	slli	r4,r4,5
    6a08:	1906b03a 	or	r3,r3,r4
    6a0c:	11006617 	ldw	r4,408(r2)
    6a10:	1946b03a 	or	r3,r3,r5
    6a14:	2100004c 	andi	r4,r4,1
    6a18:	200890fa 	slli	r4,r4,3
    6a1c:	1908b03a 	or	r4,r3,r4
    6a20:	10c06717 	ldw	r3,412(r2)
    6a24:	18c0004c 	andi	r3,r3,1
    6a28:	18c7883a 	add	r3,r3,r3
    6a2c:	18c7883a 	add	r3,r3,r3
    6a30:	20c6b03a 	or	r3,r4,r3
    6a34:	11006817 	ldw	r4,416(r2)
    6a38:	2100004c 	andi	r4,r4,1
    6a3c:	2109883a 	add	r4,r4,r4
    6a40:	1906b03a 	or	r3,r3,r4
    6a44:	80e0b03a 	or	r16,r16,r3
    6a48:	00008206 	br	6c54 <LMS7002M_regs_spi_write+0x954>
    }
    if (addr == 0x0084)
    6a4c:	00c02104 	movi	r3,132
    6a50:	88c01d1e 	bne	r17,r3,6ac8 <LMS7002M_regs_spi_write+0x7c8>
        value |= (regs->reg_0x0084_rp_calib_bias & 0x1f) << 6;
        value |= (regs->reg_0x0084_pd_frp_bias & 0x1) << 4;
        value |= (regs->reg_0x0084_pd_f_bias & 0x1) << 3;
        value |= (regs->reg_0x0084_pd_ptrp_bias & 0x1) << 2;
        value |= (regs->reg_0x0084_pd_pt_bias & 0x1) << 1;
        value |= (regs->reg_0x0084_pd_bias_master & 0x1) << 0;
    6a54:	11406a17 	ldw	r5,424(r2)
    6a58:	10c06b17 	ldw	r3,428(r2)
    6a5c:	11006d17 	ldw	r4,436(r2)
    6a60:	294000cc 	andi	r5,r5,3
    6a64:	18c007cc 	andi	r3,r3,31
    6a68:	180691ba 	slli	r3,r3,6
    6a6c:	280a92fa 	slli	r5,r5,11
    6a70:	2100004c 	andi	r4,r4,1
    6a74:	200890fa 	slli	r4,r4,3
    6a78:	28cab03a 	or	r5,r5,r3
    6a7c:	10c07017 	ldw	r3,448(r2)
    6a80:	18c0004c 	andi	r3,r3,1
    6a84:	28c6b03a 	or	r3,r5,r3
    6a88:	11406c17 	ldw	r5,432(r2)
    6a8c:	2940004c 	andi	r5,r5,1
    6a90:	280a913a 	slli	r5,r5,4
    6a94:	1946b03a 	or	r3,r3,r5
    6a98:	1908b03a 	or	r4,r3,r4
    6a9c:	10c06e17 	ldw	r3,440(r2)
    6aa0:	18c0004c 	andi	r3,r3,1
    6aa4:	18c7883a 	add	r3,r3,r3
    6aa8:	18c7883a 	add	r3,r3,r3
    6aac:	20c6b03a 	or	r3,r4,r3
    6ab0:	11006f17 	ldw	r4,444(r2)
    6ab4:	2100004c 	andi	r4,r4,1
    6ab8:	2109883a 	add	r4,r4,r4
    6abc:	1906b03a 	or	r3,r3,r4
    6ac0:	80e0b03a 	or	r16,r16,r3
    6ac4:	00006d06 	br	6c7c <LMS7002M_regs_spi_write+0x97c>
    }
    if (addr == 0x0085)
    6ac8:	00c02144 	movi	r3,133
    6acc:	88c0251e 	bne	r17,r3,6b64 <LMS7002M_regs_spi_write+0x864>
        value |= (regs->reg_0x0085_byp_xbuf_tx & 0x1) << 5;
        value |= (regs->reg_0x0085_en_out2_xbuf_tx & 0x1) << 4;
        value |= (regs->reg_0x0085_en_tbufin_xbuf_rx & 0x1) << 3;
        value |= (regs->reg_0x0085_pd_xbuf_rx & 0x1) << 2;
        value |= (regs->reg_0x0085_pd_xbuf_tx & 0x1) << 1;
        value |= (regs->reg_0x0085_en_g_xbuf & 0x1) << 0;
    6ad0:	11007117 	ldw	r4,452(r2)
    6ad4:	10c07217 	ldw	r3,456(r2)
    6ad8:	11407517 	ldw	r5,468(r2)
    6adc:	2100004c 	andi	r4,r4,1
    6ae0:	180691fa 	slli	r3,r3,7
    6ae4:	2008923a 	slli	r4,r4,8
    6ae8:	2940004c 	andi	r5,r5,1
    6aec:	18c03fcc 	andi	r3,r3,255
    6af0:	20c8b03a 	or	r4,r4,r3
    6af4:	10c07917 	ldw	r3,484(r2)
    6af8:	280a913a 	slli	r5,r5,4
    6afc:	18c0004c 	andi	r3,r3,1
    6b00:	20c6b03a 	or	r3,r4,r3
    6b04:	11007317 	ldw	r4,460(r2)
    6b08:	2100004c 	andi	r4,r4,1
    6b0c:	200891ba 	slli	r4,r4,6
    6b10:	1906b03a 	or	r3,r3,r4
    6b14:	11007417 	ldw	r4,464(r2)
    6b18:	2100004c 	andi	r4,r4,1
    6b1c:	2008917a 	slli	r4,r4,5
    6b20:	1906b03a 	or	r3,r3,r4
    6b24:	11007617 	ldw	r4,472(r2)
    6b28:	1946b03a 	or	r3,r3,r5
    6b2c:	2100004c 	andi	r4,r4,1
    6b30:	200890fa 	slli	r4,r4,3
    6b34:	1908b03a 	or	r4,r3,r4
    6b38:	10c07717 	ldw	r3,476(r2)
    6b3c:	18c0004c 	andi	r3,r3,1
    6b40:	18c7883a 	add	r3,r3,r3
    6b44:	18c7883a 	add	r3,r3,r3
    6b48:	20c6b03a 	or	r3,r4,r3
    6b4c:	11007817 	ldw	r4,480(r2)
    6b50:	2100004c 	andi	r4,r4,1
    6b54:	2109883a 	add	r4,r4,r4
    6b58:	1906b03a 	or	r3,r3,r4
    6b5c:	80e0b03a 	or	r16,r16,r3
    6b60:	00005f06 	br	6ce0 <LMS7002M_regs_spi_write+0x9e0>
    }
    if (addr == 0x0086)
    6b64:	00c02184 	movi	r3,134
    6b68:	88c0351e 	bne	r17,r3,6c40 <LMS7002M_regs_spi_write+0x940>
        value |= (regs->reg_0x0086_pd_fdiv_fb_cgen & 0x1) << 5;
        value |= (regs->reg_0x0086_pd_fdiv_o_cgen & 0x1) << 4;
        value |= (regs->reg_0x0086_pd_sdm_cgen & 0x1) << 3;
        value |= (regs->reg_0x0086_pd_vco_cgen & 0x1) << 2;
        value |= (regs->reg_0x0086_pd_vco_comp_cgen & 0x1) << 1;
        value |= (regs->reg_0x0086_en_g_cgen & 0x1) << 0;
    6b6c:	11007a17 	ldw	r4,488(r2)
    6b70:	10c07b17 	ldw	r3,492(r2)
    6b74:	11408217 	ldw	r5,520(r2)
    6b78:	200893fa 	slli	r4,r4,15
    6b7c:	18c0004c 	andi	r3,r3,1
    6b80:	180693ba 	slli	r3,r3,14
    6b84:	213fffcc 	andi	r4,r4,65535
    6b88:	2940004c 	andi	r5,r5,1
    6b8c:	20c8b03a 	or	r4,r4,r3
    6b90:	10c08617 	ldw	r3,536(r2)
    6b94:	280a913a 	slli	r5,r5,4
    6b98:	18c0004c 	andi	r3,r3,1
    6b9c:	20c6b03a 	or	r3,r4,r3
    6ba0:	11007c17 	ldw	r4,496(r2)
    6ba4:	2100004c 	andi	r4,r4,1
    6ba8:	200892fa 	slli	r4,r4,11
    6bac:	1906b03a 	or	r3,r3,r4
    6bb0:	11007d17 	ldw	r4,500(r2)
    6bb4:	2100004c 	andi	r4,r4,1
    6bb8:	200892ba 	slli	r4,r4,10
    6bbc:	1906b03a 	or	r3,r3,r4
    6bc0:	11007e17 	ldw	r4,504(r2)
    6bc4:	2100004c 	andi	r4,r4,1
    6bc8:	2008927a 	slli	r4,r4,9
    6bcc:	1906b03a 	or	r3,r3,r4
    6bd0:	11007f17 	ldw	r4,508(r2)
    6bd4:	2100004c 	andi	r4,r4,1
    6bd8:	2008923a 	slli	r4,r4,8
    6bdc:	1906b03a 	or	r3,r3,r4
    6be0:	11008017 	ldw	r4,512(r2)
    6be4:	2100004c 	andi	r4,r4,1
    6be8:	200891ba 	slli	r4,r4,6
    6bec:	1906b03a 	or	r3,r3,r4
    6bf0:	11008117 	ldw	r4,516(r2)
    6bf4:	2100004c 	andi	r4,r4,1
    6bf8:	2008917a 	slli	r4,r4,5
    6bfc:	1906b03a 	or	r3,r3,r4
    6c00:	11008317 	ldw	r4,524(r2)
    6c04:	1946b03a 	or	r3,r3,r5
    6c08:	2100004c 	andi	r4,r4,1
    6c0c:	200890fa 	slli	r4,r4,3
    6c10:	1908b03a 	or	r4,r3,r4
    6c14:	10c08417 	ldw	r3,528(r2)
    6c18:	18c0004c 	andi	r3,r3,1
    6c1c:	18c7883a 	add	r3,r3,r3
    6c20:	18c7883a 	add	r3,r3,r3
    6c24:	20c6b03a 	or	r3,r4,r3
    6c28:	11008517 	ldw	r4,532(r2)
    6c2c:	2100004c 	andi	r4,r4,1
    6c30:	2109883a 	add	r4,r4,r4
    6c34:	1906b03a 	or	r3,r3,r4
    6c38:	80e0b03a 	or	r16,r16,r3
    6c3c:	00003e06 	br	6d38 <LMS7002M_regs_spi_write+0xa38>
    }
    if (addr == 0x0087)
    6c40:	00c021c4 	movi	r3,135
    6c44:	88c0031e 	bne	r17,r3,6c54 <LMS7002M_regs_spi_write+0x954>
    {
        value |= (regs->reg_0x0087_frac_sdm_cgen & 0xffff) << 0;
    6c48:	10c0870b 	ldhu	r3,540(r2)
    6c4c:	80e0b03a 	or	r16,r16,r3
    6c50:	00004606 	br	6d6c <LMS7002M_regs_spi_write+0xa6c>
    }
    if (addr == 0x0088)
    6c54:	00c02204 	movi	r3,136
    6c58:	88c0081e 	bne	r17,r3,6c7c <LMS7002M_regs_spi_write+0x97c>
    {
        value |= (regs->reg_0x0088_int_sdm_cgen & 0x3ff) << 4;
        value |= (regs->reg_0x0088_frac_sdm_cgen & 0xf) << 0;
    6c5c:	10c08817 	ldw	r3,544(r2)
    6c60:	18c0ffcc 	andi	r3,r3,1023
    6c64:	1808913a 	slli	r4,r3,4
    6c68:	10c08917 	ldw	r3,548(r2)
    6c6c:	18c003cc 	andi	r3,r3,15
    6c70:	20c6b03a 	or	r3,r4,r3
    6c74:	80e0b03a 	or	r16,r16,r3
    6c78:	00005a06 	br	6de4 <LMS7002M_regs_spi_write+0xae4>
    }
    if (addr == 0x0089)
    6c7c:	00c02244 	movi	r3,137
    6c80:	88c0171e 	bne	r17,r3,6ce0 <LMS7002M_regs_spi_write+0x9e0>
        value |= (regs->reg_0x0089_rev_sdmclk_cgen & 0x1) << 15;
        value |= (regs->reg_0x0089_sel_sdmclk_cgen & 0x1) << 14;
        value |= (regs->reg_0x0089_sx_dither_en_cgen & 0x1) << 13;
        value |= (regs->reg_0x0089_clkh_ov_clkl_cgen & 0x3) << 11;
        value |= (regs->reg_0x0089_div_outch_cgen & 0xff) << 3;
        value |= (regs->reg_0x0089_tst_cgen & 0x7) << 0;
    6c84:	11408a17 	ldw	r5,552(r2)
    6c88:	10c08b17 	ldw	r3,556(r2)
    6c8c:	11008c17 	ldw	r4,560(r2)
    6c90:	280a93fa 	slli	r5,r5,15
    6c94:	18c0004c 	andi	r3,r3,1
    6c98:	180693ba 	slli	r3,r3,14
    6c9c:	297fffcc 	andi	r5,r5,65535
    6ca0:	2100004c 	andi	r4,r4,1
    6ca4:	28cab03a 	or	r5,r5,r3
    6ca8:	10c08f17 	ldw	r3,572(r2)
    6cac:	2008937a 	slli	r4,r4,13
    6cb0:	18c001cc 	andi	r3,r3,7
    6cb4:	28c6b03a 	or	r3,r5,r3
    6cb8:	1908b03a 	or	r4,r3,r4
    6cbc:	10c08d17 	ldw	r3,564(r2)
    6cc0:	18c000cc 	andi	r3,r3,3
    6cc4:	180692fa 	slli	r3,r3,11
    6cc8:	20c6b03a 	or	r3,r4,r3
    6ccc:	11008e03 	ldbu	r4,568(r2)
    6cd0:	200890fa 	slli	r4,r4,3
    6cd4:	1906b03a 	or	r3,r3,r4
    6cd8:	80e0b03a 	or	r16,r16,r3
    6cdc:	00004706 	br	6dfc <LMS7002M_regs_spi_write+0xafc>
    }
    if (addr == 0x008A)
    6ce0:	00c02284 	movi	r3,138
    6ce4:	88c0141e 	bne	r17,r3,6d38 <LMS7002M_regs_spi_write+0xa38>
    {
        value |= (regs->reg_0x008a_rev_clkdac_cgen & 0x1) << 14;
        value |= (regs->reg_0x008a_rev_clkadc_cgen & 0x1) << 13;
        value |= (regs->reg_0x008a_revph_pfd_cgen & 0x1) << 12;
        value |= (regs->reg_0x008a_ioffset_cp_cgen & 0x3f) << 6;
        value |= (regs->reg_0x008a_ipulse_cp_cgen & 0x3f) << 0;
    6ce8:	11409017 	ldw	r5,576(r2)
    6cec:	10c09117 	ldw	r3,580(r2)
    6cf0:	11009217 	ldw	r4,584(r2)
    6cf4:	2940004c 	andi	r5,r5,1
    6cf8:	18c0004c 	andi	r3,r3,1
    6cfc:	1806937a 	slli	r3,r3,13
    6d00:	280a93ba 	slli	r5,r5,14
    6d04:	2100004c 	andi	r4,r4,1
    6d08:	2008933a 	slli	r4,r4,12
    6d0c:	28cab03a 	or	r5,r5,r3
    6d10:	10c09417 	ldw	r3,592(r2)
    6d14:	18c00fcc 	andi	r3,r3,63
    6d18:	28c6b03a 	or	r3,r5,r3
    6d1c:	1908b03a 	or	r4,r3,r4
    6d20:	10c09317 	ldw	r3,588(r2)
    6d24:	18c00fcc 	andi	r3,r3,63
    6d28:	180691ba 	slli	r3,r3,6
    6d2c:	20c6b03a 	or	r3,r4,r3
    6d30:	80e0b03a 	or	r16,r16,r3
    6d34:	00007406 	br	6f08 <LMS7002M_regs_spi_write+0xc08>
    }
    if (addr == 0x008B)
    6d38:	00c022c4 	movi	r3,139
    6d3c:	88c00b1e 	bne	r17,r3,6d6c <LMS7002M_regs_spi_write+0xa6c>
    {
        value |= (regs->reg_0x008b_ict_vco_cgen & 0x1f) << 9;
        value |= (regs->reg_0x008b_csw_vco_cgen & 0xff) << 1;
        value |= (regs->reg_0x008b_coarse_start_cgen & 0x1) << 0;
    6d40:	10c09517 	ldw	r3,596(r2)
    6d44:	18c007cc 	andi	r3,r3,31
    6d48:	1808927a 	slli	r4,r3,9
    6d4c:	10c09603 	ldbu	r3,600(r2)
    6d50:	18c7883a 	add	r3,r3,r3
    6d54:	20c6b03a 	or	r3,r4,r3
    6d58:	11009717 	ldw	r4,604(r2)
    6d5c:	2100004c 	andi	r4,r4,1
    6d60:	1906b03a 	or	r3,r3,r4
    6d64:	80e0b03a 	or	r16,r16,r3
    6d68:	0000aa06 	br	7014 <LMS7002M_regs_spi_write+0xd14>
    }
    if (addr == 0x008C)
    6d6c:	00c02304 	movi	r3,140
    6d70:	88c01c1e 	bne	r17,r3,6de4 <LMS7002M_regs_spi_write+0xae4>
        value |= (regs->reg_0x008c_coarsepll_compo_cgen & 0x1) << 14;
        value |= (regs->reg_0x008c_vco_cmpho_cgen & 0x1) << 13;
        value |= (regs->reg_0x008c_vco_cmplo_cgen & 0x1) << 12;
        value |= (regs->reg_0x008c_cp2_cgen & 0xf) << 8;
        value |= (regs->reg_0x008c_cp3_cgen & 0xf) << 4;
        value |= (regs->reg_0x008c_cz_cgen & 0xf) << 0;
    6d74:	11409817 	ldw	r5,608(r2)
    6d78:	10c09917 	ldw	r3,612(r2)
    6d7c:	11009a17 	ldw	r4,616(r2)
    6d80:	280a93fa 	slli	r5,r5,15
    6d84:	18c0004c 	andi	r3,r3,1
    6d88:	180693ba 	slli	r3,r3,14
    6d8c:	297fffcc 	andi	r5,r5,65535
    6d90:	2100004c 	andi	r4,r4,1
    6d94:	28cab03a 	or	r5,r5,r3
    6d98:	10c09e17 	ldw	r3,632(r2)
    6d9c:	2008937a 	slli	r4,r4,13
    6da0:	18c003cc 	andi	r3,r3,15
    6da4:	28c6b03a 	or	r3,r5,r3
    6da8:	11409b17 	ldw	r5,620(r2)
    6dac:	1906b03a 	or	r3,r3,r4
    6db0:	11009c17 	ldw	r4,624(r2)
    6db4:	2940004c 	andi	r5,r5,1
    6db8:	280a933a 	slli	r5,r5,12
    6dbc:	210003cc 	andi	r4,r4,15
    6dc0:	2008923a 	slli	r4,r4,8
    6dc4:	1946b03a 	or	r3,r3,r5
    6dc8:	1908b03a 	or	r4,r3,r4
    6dcc:	10c09d17 	ldw	r3,628(r2)
    6dd0:	1806913a 	slli	r3,r3,4
    6dd4:	18c03fcc 	andi	r3,r3,255
    6dd8:	20c6b03a 	or	r3,r4,r3
    6ddc:	80e0b03a 	or	r16,r16,r3
    6de0:	0000cf06 	br	7120 <LMS7002M_regs_spi_write+0xe20>
    }
    if (addr == 0x008D)
    6de4:	00c02344 	movi	r3,141
    6de8:	88c0041e 	bne	r17,r3,6dfc <LMS7002M_regs_spi_write+0xafc>
    {
        value |= (regs->reg_0x008d_resrv_cgn & 0x7) << 0;
    6dec:	10c09f17 	ldw	r3,636(r2)
    6df0:	18c001cc 	andi	r3,r3,7
    6df4:	80e0b03a 	or	r16,r16,r3
    6df8:	0000fc06 	br	71ec <LMS7002M_regs_spi_write+0xeec>
    }
    if (addr == 0x0092)
    6dfc:	00c02484 	movi	r3,146
    6e00:	88c0411e 	bne	r17,r3,6f08 <LMS7002M_regs_spi_write+0xc08>
        value |= (regs->reg_0x0092_en_ldo_rbb & 0x1) << 5;
        value |= (regs->reg_0x0092_en_ldo_rxbuf & 0x1) << 4;
        value |= (regs->reg_0x0092_en_ldo_tbb & 0x1) << 3;
        value |= (regs->reg_0x0092_en_ldo_tia12 & 0x1) << 2;
        value |= (regs->reg_0x0092_en_ldo_tia14 & 0x1) << 1;
        value |= (regs->reg_0x0092_en_g_ldo & 0x1) << 0;
    6e04:	1100a017 	ldw	r4,640(r2)
    6e08:	10c0a117 	ldw	r3,644(r2)
    6e0c:	1140ab17 	ldw	r5,684(r2)
    6e10:	200893fa 	slli	r4,r4,15
    6e14:	18c0004c 	andi	r3,r3,1
    6e18:	180693ba 	slli	r3,r3,14
    6e1c:	213fffcc 	andi	r4,r4,65535
    6e20:	2940004c 	andi	r5,r5,1
    6e24:	20c8b03a 	or	r4,r4,r3
    6e28:	10c0af17 	ldw	r3,700(r2)
    6e2c:	280a913a 	slli	r5,r5,4
    6e30:	18c0004c 	andi	r3,r3,1
    6e34:	20c6b03a 	or	r3,r4,r3
    6e38:	1100a217 	ldw	r4,648(r2)
    6e3c:	2100004c 	andi	r4,r4,1
    6e40:	2008937a 	slli	r4,r4,13
    6e44:	1906b03a 	or	r3,r3,r4
    6e48:	1100a317 	ldw	r4,652(r2)
    6e4c:	2100004c 	andi	r4,r4,1
    6e50:	2008933a 	slli	r4,r4,12
    6e54:	1906b03a 	or	r3,r3,r4
    6e58:	1100a417 	ldw	r4,656(r2)
    6e5c:	2100004c 	andi	r4,r4,1
    6e60:	200892fa 	slli	r4,r4,11
    6e64:	1906b03a 	or	r3,r3,r4
    6e68:	1100a517 	ldw	r4,660(r2)
    6e6c:	2100004c 	andi	r4,r4,1
    6e70:	200892ba 	slli	r4,r4,10
    6e74:	1906b03a 	or	r3,r3,r4
    6e78:	1100a617 	ldw	r4,664(r2)
    6e7c:	2100004c 	andi	r4,r4,1
    6e80:	2008927a 	slli	r4,r4,9
    6e84:	1906b03a 	or	r3,r3,r4
    6e88:	1100a717 	ldw	r4,668(r2)
    6e8c:	2100004c 	andi	r4,r4,1
    6e90:	2008923a 	slli	r4,r4,8
    6e94:	1906b03a 	or	r3,r3,r4
    6e98:	1100a817 	ldw	r4,672(r2)
    6e9c:	200891fa 	slli	r4,r4,7
    6ea0:	21003fcc 	andi	r4,r4,255
    6ea4:	1906b03a 	or	r3,r3,r4
    6ea8:	1100a917 	ldw	r4,676(r2)
    6eac:	2100004c 	andi	r4,r4,1
    6eb0:	200891ba 	slli	r4,r4,6
    6eb4:	1906b03a 	or	r3,r3,r4
    6eb8:	1100aa17 	ldw	r4,680(r2)
    6ebc:	2100004c 	andi	r4,r4,1
    6ec0:	2008917a 	slli	r4,r4,5
    6ec4:	1906b03a 	or	r3,r3,r4
    6ec8:	1100ac17 	ldw	r4,688(r2)
    6ecc:	1946b03a 	or	r3,r3,r5
    6ed0:	2100004c 	andi	r4,r4,1
    6ed4:	200890fa 	slli	r4,r4,3
    6ed8:	1908b03a 	or	r4,r3,r4
    6edc:	10c0ad17 	ldw	r3,692(r2)
    6ee0:	18c0004c 	andi	r3,r3,1
    6ee4:	18c7883a 	add	r3,r3,r3
    6ee8:	18c7883a 	add	r3,r3,r3
    6eec:	20c6b03a 	or	r3,r4,r3
    6ef0:	1100ae17 	ldw	r4,696(r2)
    6ef4:	2100004c 	andi	r4,r4,1
    6ef8:	2109883a 	add	r4,r4,r4
    6efc:	1906b03a 	or	r3,r3,r4
    6f00:	80e0b03a 	or	r16,r16,r3
    6f04:	0000fc06 	br	72f8 <LMS7002M_regs_spi_write+0xff8>
    }
    if (addr == 0x0093)
    6f08:	00c024c4 	movi	r3,147
    6f0c:	88c0411e 	bne	r17,r3,7014 <LMS7002M_regs_spi_write+0xd14>
        value |= (regs->reg_0x0093_en_ldo_tpad & 0x1) << 5;
        value |= (regs->reg_0x0093_en_ldo_txbuf & 0x1) << 4;
        value |= (regs->reg_0x0093_en_ldo_vcogn & 0x1) << 3;
        value |= (regs->reg_0x0093_en_ldo_vcosxr & 0x1) << 2;
        value |= (regs->reg_0x0093_en_ldo_vcosxt & 0x1) << 1;
        value |= (regs->reg_0x0093_en_ldo_cpsxt & 0x1) << 0;
    6f10:	1100b017 	ldw	r4,704(r2)
    6f14:	10c0b117 	ldw	r3,708(r2)
    6f18:	1140bb17 	ldw	r5,748(r2)
    6f1c:	200893fa 	slli	r4,r4,15
    6f20:	18c0004c 	andi	r3,r3,1
    6f24:	180693ba 	slli	r3,r3,14
    6f28:	213fffcc 	andi	r4,r4,65535
    6f2c:	2940004c 	andi	r5,r5,1
    6f30:	20c8b03a 	or	r4,r4,r3
    6f34:	10c0bf17 	ldw	r3,764(r2)
    6f38:	280a913a 	slli	r5,r5,4
    6f3c:	18c0004c 	andi	r3,r3,1
    6f40:	20c6b03a 	or	r3,r4,r3
    6f44:	1100b217 	ldw	r4,712(r2)
    6f48:	2100004c 	andi	r4,r4,1
    6f4c:	2008937a 	slli	r4,r4,13
    6f50:	1906b03a 	or	r3,r3,r4
    6f54:	1100b317 	ldw	r4,716(r2)
    6f58:	2100004c 	andi	r4,r4,1
    6f5c:	2008933a 	slli	r4,r4,12
    6f60:	1906b03a 	or	r3,r3,r4
    6f64:	1100b417 	ldw	r4,720(r2)
    6f68:	2100004c 	andi	r4,r4,1
    6f6c:	200892fa 	slli	r4,r4,11
    6f70:	1906b03a 	or	r3,r3,r4
    6f74:	1100b517 	ldw	r4,724(r2)
    6f78:	2100004c 	andi	r4,r4,1
    6f7c:	200892ba 	slli	r4,r4,10
    6f80:	1906b03a 	or	r3,r3,r4
    6f84:	1100b617 	ldw	r4,728(r2)
    6f88:	2100004c 	andi	r4,r4,1
    6f8c:	2008927a 	slli	r4,r4,9
    6f90:	1906b03a 	or	r3,r3,r4
    6f94:	1100b717 	ldw	r4,732(r2)
    6f98:	2100004c 	andi	r4,r4,1
    6f9c:	2008923a 	slli	r4,r4,8
    6fa0:	1906b03a 	or	r3,r3,r4
    6fa4:	1100b817 	ldw	r4,736(r2)
    6fa8:	200891fa 	slli	r4,r4,7
    6fac:	21003fcc 	andi	r4,r4,255
    6fb0:	1906b03a 	or	r3,r3,r4
    6fb4:	1100b917 	ldw	r4,740(r2)
    6fb8:	2100004c 	andi	r4,r4,1
    6fbc:	200891ba 	slli	r4,r4,6
    6fc0:	1906b03a 	or	r3,r3,r4
    6fc4:	1100ba17 	ldw	r4,744(r2)
    6fc8:	2100004c 	andi	r4,r4,1
    6fcc:	2008917a 	slli	r4,r4,5
    6fd0:	1906b03a 	or	r3,r3,r4
    6fd4:	1100bc17 	ldw	r4,752(r2)
    6fd8:	1946b03a 	or	r3,r3,r5
    6fdc:	2100004c 	andi	r4,r4,1
    6fe0:	200890fa 	slli	r4,r4,3
    6fe4:	1908b03a 	or	r4,r3,r4
    6fe8:	10c0bd17 	ldw	r3,756(r2)
    6fec:	18c0004c 	andi	r3,r3,1
    6ff0:	18c7883a 	add	r3,r3,r3
    6ff4:	18c7883a 	add	r3,r3,r3
    6ff8:	20c6b03a 	or	r3,r4,r3
    6ffc:	1100be17 	ldw	r4,760(r2)
    7000:	2100004c 	andi	r4,r4,1
    7004:	2109883a 	add	r4,r4,r4
    7008:	1906b03a 	or	r3,r3,r4
    700c:	80e0b03a 	or	r16,r16,r3
    7010:	0000fc06 	br	7404 <LMS7002M_regs_spi_write+0x1104>
    }
    if (addr == 0x0094)
    7014:	00c02504 	movi	r3,148
    7018:	88c0411e 	bne	r17,r3,7120 <LMS7002M_regs_spi_write+0xe20>
        value |= (regs->reg_0x0094_en_loadimp_ldo_mxrfe & 0x1) << 5;
        value |= (regs->reg_0x0094_en_loadimp_ldo_rbb & 0x1) << 4;
        value |= (regs->reg_0x0094_en_loadimp_ldo_rxbuf & 0x1) << 3;
        value |= (regs->reg_0x0094_en_loadimp_ldo_tbb & 0x1) << 2;
        value |= (regs->reg_0x0094_en_loadimp_ldo_tia12 & 0x1) << 1;
        value |= (regs->reg_0x0094_en_loadimp_ldo_tia14 & 0x1) << 0;
    701c:	1100c017 	ldw	r4,768(r2)
    7020:	10c0c117 	ldw	r3,772(r2)
    7024:	1140cb17 	ldw	r5,812(r2)
    7028:	200893fa 	slli	r4,r4,15
    702c:	18c0004c 	andi	r3,r3,1
    7030:	180693ba 	slli	r3,r3,14
    7034:	213fffcc 	andi	r4,r4,65535
    7038:	2940004c 	andi	r5,r5,1
    703c:	20c8b03a 	or	r4,r4,r3
    7040:	10c0cf17 	ldw	r3,828(r2)
    7044:	280a913a 	slli	r5,r5,4
    7048:	18c0004c 	andi	r3,r3,1
    704c:	20c6b03a 	or	r3,r4,r3
    7050:	1100c217 	ldw	r4,776(r2)
    7054:	2100004c 	andi	r4,r4,1
    7058:	2008937a 	slli	r4,r4,13
    705c:	1906b03a 	or	r3,r3,r4
    7060:	1100c317 	ldw	r4,780(r2)
    7064:	2100004c 	andi	r4,r4,1
    7068:	2008933a 	slli	r4,r4,12
    706c:	1906b03a 	or	r3,r3,r4
    7070:	1100c417 	ldw	r4,784(r2)
    7074:	2100004c 	andi	r4,r4,1
    7078:	200892fa 	slli	r4,r4,11
    707c:	1906b03a 	or	r3,r3,r4
    7080:	1100c517 	ldw	r4,788(r2)
    7084:	2100004c 	andi	r4,r4,1
    7088:	200892ba 	slli	r4,r4,10
    708c:	1906b03a 	or	r3,r3,r4
    7090:	1100c617 	ldw	r4,792(r2)
    7094:	2100004c 	andi	r4,r4,1
    7098:	2008927a 	slli	r4,r4,9
    709c:	1906b03a 	or	r3,r3,r4
    70a0:	1100c717 	ldw	r4,796(r2)
    70a4:	2100004c 	andi	r4,r4,1
    70a8:	2008923a 	slli	r4,r4,8
    70ac:	1906b03a 	or	r3,r3,r4
    70b0:	1100c817 	ldw	r4,800(r2)
    70b4:	200891fa 	slli	r4,r4,7
    70b8:	21003fcc 	andi	r4,r4,255
    70bc:	1906b03a 	or	r3,r3,r4
    70c0:	1100c917 	ldw	r4,804(r2)
    70c4:	2100004c 	andi	r4,r4,1
    70c8:	200891ba 	slli	r4,r4,6
    70cc:	1906b03a 	or	r3,r3,r4
    70d0:	1100ca17 	ldw	r4,808(r2)
    70d4:	2100004c 	andi	r4,r4,1
    70d8:	2008917a 	slli	r4,r4,5
    70dc:	1906b03a 	or	r3,r3,r4
    70e0:	1100cc17 	ldw	r4,816(r2)
    70e4:	1946b03a 	or	r3,r3,r5
    70e8:	2100004c 	andi	r4,r4,1
    70ec:	200890fa 	slli	r4,r4,3
    70f0:	1908b03a 	or	r4,r3,r4
    70f4:	10c0cd17 	ldw	r3,820(r2)
    70f8:	18c0004c 	andi	r3,r3,1
    70fc:	18c7883a 	add	r3,r3,r3
    7100:	18c7883a 	add	r3,r3,r3
    7104:	20c6b03a 	or	r3,r4,r3
    7108:	1100ce17 	ldw	r4,824(r2)
    710c:	2100004c 	andi	r4,r4,1
    7110:	2109883a 	add	r4,r4,r4
    7114:	1906b03a 	or	r3,r3,r4
    7118:	80e0b03a 	or	r16,r16,r3
    711c:	0000e006 	br	74a0 <LMS7002M_regs_spi_write+0x11a0>
    }
    if (addr == 0x0095)
    7120:	00c02544 	movi	r3,149
    7124:	88c0311e 	bne	r17,r3,71ec <LMS7002M_regs_spi_write+0xeec>
        value |= (regs->reg_0x0095_byp_ldo_vcogn & 0x1) << 9;
        value |= (regs->reg_0x0095_byp_ldo_vcosxr & 0x1) << 8;
        value |= (regs->reg_0x0095_byp_ldo_vcosxt & 0x1) << 7;
        value |= (regs->reg_0x0095_en_loadimp_ldo_afe & 0x1) << 2;
        value |= (regs->reg_0x0095_en_loadimp_ldo_cpgn & 0x1) << 1;
        value |= (regs->reg_0x0095_en_loadimp_ldo_cpsxr & 0x1) << 0;
    7128:	1100d017 	ldw	r4,832(r2)
    712c:	10c0d117 	ldw	r3,836(r2)
    7130:	1140d717 	ldw	r5,860(r2)
    7134:	200893fa 	slli	r4,r4,15
    7138:	18c0004c 	andi	r3,r3,1
    713c:	180693ba 	slli	r3,r3,14
    7140:	213fffcc 	andi	r4,r4,65535
    7144:	2940004c 	andi	r5,r5,1
    7148:	20c8b03a 	or	r4,r4,r3
    714c:	10c0db17 	ldw	r3,876(r2)
    7150:	280a923a 	slli	r5,r5,8
    7154:	18c0004c 	andi	r3,r3,1
    7158:	20c6b03a 	or	r3,r4,r3
    715c:	1100d217 	ldw	r4,840(r2)
    7160:	2100004c 	andi	r4,r4,1
    7164:	2008937a 	slli	r4,r4,13
    7168:	1906b03a 	or	r3,r3,r4
    716c:	1100d317 	ldw	r4,844(r2)
    7170:	2100004c 	andi	r4,r4,1
    7174:	2008933a 	slli	r4,r4,12
    7178:	1906b03a 	or	r3,r3,r4
    717c:	1100d417 	ldw	r4,848(r2)
    7180:	2100004c 	andi	r4,r4,1
    7184:	200892fa 	slli	r4,r4,11
    7188:	1906b03a 	or	r3,r3,r4
    718c:	1100d517 	ldw	r4,852(r2)
    7190:	2100004c 	andi	r4,r4,1
    7194:	200892ba 	slli	r4,r4,10
    7198:	1906b03a 	or	r3,r3,r4
    719c:	1100d617 	ldw	r4,856(r2)
    71a0:	2100004c 	andi	r4,r4,1
    71a4:	2008927a 	slli	r4,r4,9
    71a8:	1906b03a 	or	r3,r3,r4
    71ac:	1100d817 	ldw	r4,864(r2)
    71b0:	1946b03a 	or	r3,r3,r5
    71b4:	200891fa 	slli	r4,r4,7
    71b8:	21003fcc 	andi	r4,r4,255
    71bc:	1908b03a 	or	r4,r3,r4
    71c0:	10c0d917 	ldw	r3,868(r2)
    71c4:	18c0004c 	andi	r3,r3,1
    71c8:	18c7883a 	add	r3,r3,r3
    71cc:	18c7883a 	add	r3,r3,r3
    71d0:	20c6b03a 	or	r3,r4,r3
    71d4:	1100da17 	ldw	r4,872(r2)
    71d8:	2100004c 	andi	r4,r4,1
    71dc:	2109883a 	add	r4,r4,r4
    71e0:	1906b03a 	or	r3,r3,r4
    71e4:	80e0b03a 	or	r16,r16,r3
    71e8:	0000b606 	br	74c4 <LMS7002M_regs_spi_write+0x11c4>
    }
    if (addr == 0x0096)
    71ec:	00c02584 	movi	r3,150
    71f0:	88c0411e 	bne	r17,r3,72f8 <LMS7002M_regs_spi_write+0xff8>
        value |= (regs->reg_0x0096_byp_ldo_divsxt & 0x1) << 5;
        value |= (regs->reg_0x0096_byp_ldo_lna12 & 0x1) << 4;
        value |= (regs->reg_0x0096_byp_ldo_lna14 & 0x1) << 3;
        value |= (regs->reg_0x0096_byp_ldo_mxrfe & 0x1) << 2;
        value |= (regs->reg_0x0096_byp_ldo_rbb & 0x1) << 1;
        value |= (regs->reg_0x0096_byp_ldo_rxbuf & 0x1) << 0;
    71f4:	1100dc17 	ldw	r4,880(r2)
    71f8:	10c0dd17 	ldw	r3,884(r2)
    71fc:	1140e717 	ldw	r5,924(r2)
    7200:	200893fa 	slli	r4,r4,15
    7204:	18c0004c 	andi	r3,r3,1
    7208:	180693ba 	slli	r3,r3,14
    720c:	213fffcc 	andi	r4,r4,65535
    7210:	2940004c 	andi	r5,r5,1
    7214:	20c8b03a 	or	r4,r4,r3
    7218:	10c0eb17 	ldw	r3,940(r2)
    721c:	280a913a 	slli	r5,r5,4
    7220:	18c0004c 	andi	r3,r3,1
    7224:	20c6b03a 	or	r3,r4,r3
    7228:	1100de17 	ldw	r4,888(r2)
    722c:	2100004c 	andi	r4,r4,1
    7230:	2008937a 	slli	r4,r4,13
    7234:	1906b03a 	or	r3,r3,r4
    7238:	1100df17 	ldw	r4,892(r2)
    723c:	2100004c 	andi	r4,r4,1
    7240:	2008933a 	slli	r4,r4,12
    7244:	1906b03a 	or	r3,r3,r4
    7248:	1100e017 	ldw	r4,896(r2)
    724c:	2100004c 	andi	r4,r4,1
    7250:	200892fa 	slli	r4,r4,11
    7254:	1906b03a 	or	r3,r3,r4
    7258:	1100e117 	ldw	r4,900(r2)
    725c:	2100004c 	andi	r4,r4,1
    7260:	200892ba 	slli	r4,r4,10
    7264:	1906b03a 	or	r3,r3,r4
    7268:	1100e217 	ldw	r4,904(r2)
    726c:	2100004c 	andi	r4,r4,1
    7270:	2008927a 	slli	r4,r4,9
    7274:	1906b03a 	or	r3,r3,r4
    7278:	1100e317 	ldw	r4,908(r2)
    727c:	2100004c 	andi	r4,r4,1
    7280:	2008923a 	slli	r4,r4,8
    7284:	1906b03a 	or	r3,r3,r4
    7288:	1100e417 	ldw	r4,912(r2)
    728c:	200891fa 	slli	r4,r4,7
    7290:	21003fcc 	andi	r4,r4,255
    7294:	1906b03a 	or	r3,r3,r4
    7298:	1100e517 	ldw	r4,916(r2)
    729c:	2100004c 	andi	r4,r4,1
    72a0:	200891ba 	slli	r4,r4,6
    72a4:	1906b03a 	or	r3,r3,r4
    72a8:	1100e617 	ldw	r4,920(r2)
    72ac:	2100004c 	andi	r4,r4,1
    72b0:	2008917a 	slli	r4,r4,5
    72b4:	1906b03a 	or	r3,r3,r4
    72b8:	1100e817 	ldw	r4,928(r2)
    72bc:	1946b03a 	or	r3,r3,r5
    72c0:	2100004c 	andi	r4,r4,1
    72c4:	200890fa 	slli	r4,r4,3
    72c8:	1908b03a 	or	r4,r3,r4
    72cc:	10c0e917 	ldw	r3,932(r2)
    72d0:	18c0004c 	andi	r3,r3,1
    72d4:	18c7883a 	add	r3,r3,r3
    72d8:	18c7883a 	add	r3,r3,r3
    72dc:	20c6b03a 	or	r3,r4,r3
    72e0:	1100ea17 	ldw	r4,936(r2)
    72e4:	2100004c 	andi	r4,r4,1
    72e8:	2109883a 	add	r4,r4,r4
    72ec:	1906b03a 	or	r3,r3,r4
    72f0:	80e0b03a 	or	r16,r16,r3
    72f4:	00007c06 	br	74e8 <LMS7002M_regs_spi_write+0x11e8>
    }
    if (addr == 0x0097)
    72f8:	00c025c4 	movi	r3,151
    72fc:	88c0411e 	bne	r17,r3,7404 <LMS7002M_regs_spi_write+0x1104>
        value |= (regs->reg_0x0097_spdup_ldo_tlob & 0x1) << 5;
        value |= (regs->reg_0x0097_spdup_ldo_tpad & 0x1) << 4;
        value |= (regs->reg_0x0097_spdup_ldo_txbuf & 0x1) << 3;
        value |= (regs->reg_0x0097_spdup_ldo_vcogn & 0x1) << 2;
        value |= (regs->reg_0x0097_spdup_ldo_vcosxr & 0x1) << 1;
        value |= (regs->reg_0x0097_spdup_ldo_vcosxt & 0x1) << 0;
    7300:	1100ec17 	ldw	r4,944(r2)
    7304:	10c0ed17 	ldw	r3,948(r2)
    7308:	1140f717 	ldw	r5,988(r2)
    730c:	200893fa 	slli	r4,r4,15
    7310:	18c0004c 	andi	r3,r3,1
    7314:	180693ba 	slli	r3,r3,14
    7318:	213fffcc 	andi	r4,r4,65535
    731c:	2940004c 	andi	r5,r5,1
    7320:	20c8b03a 	or	r4,r4,r3
    7324:	10c0fb17 	ldw	r3,1004(r2)
    7328:	280a913a 	slli	r5,r5,4
    732c:	18c0004c 	andi	r3,r3,1
    7330:	20c6b03a 	or	r3,r4,r3
    7334:	1100ee17 	ldw	r4,952(r2)
    7338:	2100004c 	andi	r4,r4,1
    733c:	2008937a 	slli	r4,r4,13
    7340:	1906b03a 	or	r3,r3,r4
    7344:	1100ef17 	ldw	r4,956(r2)
    7348:	2100004c 	andi	r4,r4,1
    734c:	2008933a 	slli	r4,r4,12
    7350:	1906b03a 	or	r3,r3,r4
    7354:	1100f017 	ldw	r4,960(r2)
    7358:	2100004c 	andi	r4,r4,1
    735c:	200892fa 	slli	r4,r4,11
    7360:	1906b03a 	or	r3,r3,r4
    7364:	1100f117 	ldw	r4,964(r2)
    7368:	2100004c 	andi	r4,r4,1
    736c:	200892ba 	slli	r4,r4,10
    7370:	1906b03a 	or	r3,r3,r4
    7374:	1100f217 	ldw	r4,968(r2)
    7378:	2100004c 	andi	r4,r4,1
    737c:	2008927a 	slli	r4,r4,9
    7380:	1906b03a 	or	r3,r3,r4
    7384:	1100f317 	ldw	r4,972(r2)
    7388:	2100004c 	andi	r4,r4,1
    738c:	2008923a 	slli	r4,r4,8
    7390:	1906b03a 	or	r3,r3,r4
    7394:	1100f417 	ldw	r4,976(r2)
    7398:	200891fa 	slli	r4,r4,7
    739c:	21003fcc 	andi	r4,r4,255
    73a0:	1906b03a 	or	r3,r3,r4
    73a4:	1100f517 	ldw	r4,980(r2)
    73a8:	2100004c 	andi	r4,r4,1
    73ac:	200891ba 	slli	r4,r4,6
    73b0:	1906b03a 	or	r3,r3,r4
    73b4:	1100f617 	ldw	r4,984(r2)
    73b8:	2100004c 	andi	r4,r4,1
    73bc:	2008917a 	slli	r4,r4,5
    73c0:	1906b03a 	or	r3,r3,r4
    73c4:	1100f817 	ldw	r4,992(r2)
    73c8:	1946b03a 	or	r3,r3,r5
    73cc:	2100004c 	andi	r4,r4,1
    73d0:	200890fa 	slli	r4,r4,3
    73d4:	1908b03a 	or	r4,r3,r4
    73d8:	10c0f917 	ldw	r3,996(r2)
    73dc:	18c0004c 	andi	r3,r3,1
    73e0:	18c7883a 	add	r3,r3,r3
    73e4:	18c7883a 	add	r3,r3,r3
    73e8:	20c6b03a 	or	r3,r4,r3
    73ec:	1100fa17 	ldw	r4,1000(r2)
    73f0:	2100004c 	andi	r4,r4,1
    73f4:	2109883a 	add	r4,r4,r4
    73f8:	1906b03a 	or	r3,r3,r4
    73fc:	80e0b03a 	or	r16,r16,r3
    7400:	00004206 	br	750c <LMS7002M_regs_spi_write+0x120c>
    }
    if (addr == 0x0098)
    7404:	00c02604 	movi	r3,152
    7408:	88c0251e 	bne	r17,r3,74a0 <LMS7002M_regs_spi_write+0x11a0>
        value |= (regs->reg_0x0098_spdup_ldo_cpsxt & 0x1) << 5;
        value |= (regs->reg_0x0098_spdup_ldo_dig & 0x1) << 4;
        value |= (regs->reg_0x0098_spdup_ldo_diggn & 0x1) << 3;
        value |= (regs->reg_0x0098_spdup_ldo_digsxr & 0x1) << 2;
        value |= (regs->reg_0x0098_spdup_ldo_digsxt & 0x1) << 1;
        value |= (regs->reg_0x0098_spdup_ldo_divgn & 0x1) << 0;
    740c:	1100fc17 	ldw	r4,1008(r2)
    7410:	10c0fd17 	ldw	r3,1012(r2)
    7414:	11410017 	ldw	r5,1024(r2)
    7418:	2100004c 	andi	r4,r4,1
    741c:	180691fa 	slli	r3,r3,7
    7420:	2008923a 	slli	r4,r4,8
    7424:	2940004c 	andi	r5,r5,1
    7428:	18c03fcc 	andi	r3,r3,255
    742c:	20c8b03a 	or	r4,r4,r3
    7430:	10c10417 	ldw	r3,1040(r2)
    7434:	280a913a 	slli	r5,r5,4
    7438:	18c0004c 	andi	r3,r3,1
    743c:	20c6b03a 	or	r3,r4,r3
    7440:	1100fe17 	ldw	r4,1016(r2)
    7444:	2100004c 	andi	r4,r4,1
    7448:	200891ba 	slli	r4,r4,6
    744c:	1906b03a 	or	r3,r3,r4
    7450:	1100ff17 	ldw	r4,1020(r2)
    7454:	2100004c 	andi	r4,r4,1
    7458:	2008917a 	slli	r4,r4,5
    745c:	1906b03a 	or	r3,r3,r4
    7460:	11010117 	ldw	r4,1028(r2)
    7464:	1946b03a 	or	r3,r3,r5
    7468:	2100004c 	andi	r4,r4,1
    746c:	200890fa 	slli	r4,r4,3
    7470:	1908b03a 	or	r4,r3,r4
    7474:	10c10217 	ldw	r3,1032(r2)
    7478:	18c0004c 	andi	r3,r3,1
    747c:	18c7883a 	add	r3,r3,r3
    7480:	18c7883a 	add	r3,r3,r3
    7484:	20c6b03a 	or	r3,r4,r3
    7488:	11010317 	ldw	r4,1036(r2)
    748c:	2100004c 	andi	r4,r4,1
    7490:	2109883a 	add	r4,r4,r4
    7494:	1906b03a 	or	r3,r3,r4
    7498:	80e0b03a 	or	r16,r16,r3
    749c:	00002406 	br	7530 <LMS7002M_regs_spi_write+0x1230>
    }
    if (addr == 0x0099)
    74a0:	00c02644 	movi	r3,153
    74a4:	88c0071e 	bne	r17,r3,74c4 <LMS7002M_regs_spi_write+0x11c4>
    {
        value |= (regs->reg_0x0099_rdiv_vcosxr & 0xff) << 8;
        value |= (regs->reg_0x0099_rdiv_vcosxt & 0xff) << 0;
    74a8:	10c10517 	ldw	r3,1044(r2)
    74ac:	11010603 	ldbu	r4,1048(r2)
    74b0:	1806923a 	slli	r3,r3,8
    74b4:	18ffffcc 	andi	r3,r3,65535
    74b8:	1906b03a 	or	r3,r3,r4
    74bc:	80e0b03a 	or	r16,r16,r3
    74c0:	00002406 	br	7554 <LMS7002M_regs_spi_write+0x1254>
    }
    if (addr == 0x009A)
    74c4:	00c02684 	movi	r3,154
    74c8:	88c0071e 	bne	r17,r3,74e8 <LMS7002M_regs_spi_write+0x11e8>
    {
        value |= (regs->reg_0x009a_rdiv_txbuf & 0xff) << 8;
        value |= (regs->reg_0x009a_rdiv_vcogn & 0xff) << 0;
    74cc:	10c10717 	ldw	r3,1052(r2)
    74d0:	11010803 	ldbu	r4,1056(r2)
    74d4:	1806923a 	slli	r3,r3,8
    74d8:	18ffffcc 	andi	r3,r3,65535
    74dc:	1906b03a 	or	r3,r3,r4
    74e0:	80e0b03a 	or	r16,r16,r3
    74e4:	00002406 	br	7578 <LMS7002M_regs_spi_write+0x1278>
    }
    if (addr == 0x009B)
    74e8:	00c026c4 	movi	r3,155
    74ec:	88c0071e 	bne	r17,r3,750c <LMS7002M_regs_spi_write+0x120c>
    {
        value |= (regs->reg_0x009b_rdiv_tlob & 0xff) << 8;
        value |= (regs->reg_0x009b_rdiv_tpad & 0xff) << 0;
    74f0:	10c10917 	ldw	r3,1060(r2)
    74f4:	11010a03 	ldbu	r4,1064(r2)
    74f8:	1806923a 	slli	r3,r3,8
    74fc:	18ffffcc 	andi	r3,r3,65535
    7500:	1906b03a 	or	r3,r3,r4
    7504:	80e0b03a 	or	r16,r16,r3
    7508:	00002406 	br	759c <LMS7002M_regs_spi_write+0x129c>
    }
    if (addr == 0x009C)
    750c:	00c02704 	movi	r3,156
    7510:	88c0071e 	bne	r17,r3,7530 <LMS7002M_regs_spi_write+0x1230>
    {
        value |= (regs->reg_0x009c_rdiv_tia12 & 0xff) << 8;
        value |= (regs->reg_0x009c_rdiv_tia14 & 0xff) << 0;
    7514:	10c10b17 	ldw	r3,1068(r2)
    7518:	11010c03 	ldbu	r4,1072(r2)
    751c:	1806923a 	slli	r3,r3,8
    7520:	18ffffcc 	andi	r3,r3,65535
    7524:	1906b03a 	or	r3,r3,r4
    7528:	80e0b03a 	or	r16,r16,r3
    752c:	00002406 	br	75c0 <LMS7002M_regs_spi_write+0x12c0>
    }
    if (addr == 0x009D)
    7530:	00c02744 	movi	r3,157
    7534:	88c0071e 	bne	r17,r3,7554 <LMS7002M_regs_spi_write+0x1254>
    {
        value |= (regs->reg_0x009d_rdiv_rxbuf & 0xff) << 8;
        value |= (regs->reg_0x009d_rdiv_tbb & 0xff) << 0;
    7538:	10c10d17 	ldw	r3,1076(r2)
    753c:	11010e03 	ldbu	r4,1080(r2)
    7540:	1806923a 	slli	r3,r3,8
    7544:	18ffffcc 	andi	r3,r3,65535
    7548:	1906b03a 	or	r3,r3,r4
    754c:	80e0b03a 	or	r16,r16,r3
    7550:	00002406 	br	75e4 <LMS7002M_regs_spi_write+0x12e4>
    }
    if (addr == 0x009E)
    7554:	00c02784 	movi	r3,158
    7558:	88c0071e 	bne	r17,r3,7578 <LMS7002M_regs_spi_write+0x1278>
    {
        value |= (regs->reg_0x009e_rdiv_mxrfe & 0xff) << 8;
        value |= (regs->reg_0x009e_rdiv_rbb & 0xff) << 0;
    755c:	10c10f17 	ldw	r3,1084(r2)
    7560:	11011003 	ldbu	r4,1088(r2)
    7564:	1806923a 	slli	r3,r3,8
    7568:	18ffffcc 	andi	r3,r3,65535
    756c:	1906b03a 	or	r3,r3,r4
    7570:	80e0b03a 	or	r16,r16,r3
    7574:	00002406 	br	7608 <LMS7002M_regs_spi_write+0x1308>
    }
    if (addr == 0x009F)
    7578:	00c027c4 	movi	r3,159
    757c:	88c0071e 	bne	r17,r3,759c <LMS7002M_regs_spi_write+0x129c>
    {
        value |= (regs->reg_0x009f_rdiv_lna12 & 0xff) << 8;
        value |= (regs->reg_0x009f_rdiv_lna14 & 0xff) << 0;
    7580:	10c11117 	ldw	r3,1092(r2)
    7584:	11011203 	ldbu	r4,1096(r2)
    7588:	1806923a 	slli	r3,r3,8
    758c:	18ffffcc 	andi	r3,r3,65535
    7590:	1906b03a 	or	r3,r3,r4
    7594:	80e0b03a 	or	r16,r16,r3
    7598:	00002406 	br	762c <LMS7002M_regs_spi_write+0x132c>
    }
    if (addr == 0x00A0)
    759c:	00c02804 	movi	r3,160
    75a0:	88c0071e 	bne	r17,r3,75c0 <LMS7002M_regs_spi_write+0x12c0>
    {
        value |= (regs->reg_0x00a0_rdiv_divsxr & 0xff) << 8;
        value |= (regs->reg_0x00a0_rdiv_divsxt & 0xff) << 0;
    75a4:	10c11317 	ldw	r3,1100(r2)
    75a8:	11011403 	ldbu	r4,1104(r2)
    75ac:	1806923a 	slli	r3,r3,8
    75b0:	18ffffcc 	andi	r3,r3,65535
    75b4:	1906b03a 	or	r3,r3,r4
    75b8:	80e0b03a 	or	r16,r16,r3
    75bc:	00002406 	br	7650 <LMS7002M_regs_spi_write+0x1350>
    }
    if (addr == 0x00A1)
    75c0:	00c02844 	movi	r3,161
    75c4:	88c0071e 	bne	r17,r3,75e4 <LMS7002M_regs_spi_write+0x12e4>
    {
        value |= (regs->reg_0x00a1_rdiv_digsxt & 0xff) << 8;
        value |= (regs->reg_0x00a1_rdiv_divgn & 0xff) << 0;
    75c8:	10c11517 	ldw	r3,1108(r2)
    75cc:	11011603 	ldbu	r4,1112(r2)
    75d0:	1806923a 	slli	r3,r3,8
    75d4:	18ffffcc 	andi	r3,r3,65535
    75d8:	1906b03a 	or	r3,r3,r4
    75dc:	80e0b03a 	or	r16,r16,r3
    75e0:	00002406 	br	7674 <LMS7002M_regs_spi_write+0x1374>
    }
    if (addr == 0x00A2)
    75e4:	00c02884 	movi	r3,162
    75e8:	88c0071e 	bne	r17,r3,7608 <LMS7002M_regs_spi_write+0x1308>
    {
        value |= (regs->reg_0x00a2_rdiv_diggn & 0xff) << 8;
        value |= (regs->reg_0x00a2_rdiv_digsxr & 0xff) << 0;
    75ec:	10c11717 	ldw	r3,1116(r2)
    75f0:	11011803 	ldbu	r4,1120(r2)
    75f4:	1806923a 	slli	r3,r3,8
    75f8:	18ffffcc 	andi	r3,r3,65535
    75fc:	1906b03a 	or	r3,r3,r4
    7600:	80e0b03a 	or	r16,r16,r3
    7604:	00005206 	br	7750 <LMS7002M_regs_spi_write+0x1450>
    }
    if (addr == 0x00A3)
    7608:	00c028c4 	movi	r3,163
    760c:	88c0071e 	bne	r17,r3,762c <LMS7002M_regs_spi_write+0x132c>
    {
        value |= (regs->reg_0x00a3_rdiv_cpsxt & 0xff) << 8;
        value |= (regs->reg_0x00a3_rdiv_dig & 0xff) << 0;
    7610:	10c11917 	ldw	r3,1124(r2)
    7614:	11011a03 	ldbu	r4,1128(r2)
    7618:	1806923a 	slli	r3,r3,8
    761c:	18ffffcc 	andi	r3,r3,65535
    7620:	1906b03a 	or	r3,r3,r4
    7624:	80e0b03a 	or	r16,r16,r3
    7628:	00005206 	br	7774 <LMS7002M_regs_spi_write+0x1474>
    }
    if (addr == 0x00A4)
    762c:	00c02904 	movi	r3,164
    7630:	88c0071e 	bne	r17,r3,7650 <LMS7002M_regs_spi_write+0x1350>
    {
        value |= (regs->reg_0x00a4_rdiv_cpgn & 0xff) << 8;
        value |= (regs->reg_0x00a4_rdiv_cpsxr & 0xff) << 0;
    7634:	10c11b17 	ldw	r3,1132(r2)
    7638:	11011c03 	ldbu	r4,1136(r2)
    763c:	1806923a 	slli	r3,r3,8
    7640:	18ffffcc 	andi	r3,r3,65535
    7644:	1906b03a 	or	r3,r3,r4
    7648:	80e0b03a 	or	r16,r16,r3
    764c:	00004e06 	br	7788 <LMS7002M_regs_spi_write+0x1488>
    }
    if (addr == 0x00A5)
    7650:	00c02944 	movi	r3,165
    7654:	88c0071e 	bne	r17,r3,7674 <LMS7002M_regs_spi_write+0x1374>
    {
        value |= (regs->reg_0x00a5_rdiv_spibuf & 0xff) << 8;
        value |= (regs->reg_0x00a5_rdiv_afe & 0xff) << 0;
    7658:	10c11d17 	ldw	r3,1140(r2)
    765c:	11011e03 	ldbu	r4,1144(r2)
    7660:	1806923a 	slli	r3,r3,8
    7664:	18ffffcc 	andi	r3,r3,65535
    7668:	1906b03a 	or	r3,r3,r4
    766c:	80e0b03a 	or	r16,r16,r3
    7670:	00004a06 	br	779c <LMS7002M_regs_spi_write+0x149c>
    }
    if (addr == 0x00A6)
    7674:	00c02984 	movi	r3,166
    7678:	88c0351e 	bne	r17,r3,7750 <LMS7002M_regs_spi_write+0x1450>
        value |= (regs->reg_0x00a6_en_loadimp_ldo_digip2 & 0x1) << 5;
        value |= (regs->reg_0x00a6_en_loadimp_ldo_digip1 & 0x1) << 4;
        value |= (regs->reg_0x00a6_pd_ldo_spibuf & 0x1) << 3;
        value |= (regs->reg_0x00a6_pd_ldo_digip2 & 0x1) << 2;
        value |= (regs->reg_0x00a6_pd_ldo_digip1 & 0x1) << 1;
        value |= (regs->reg_0x00a6_en_g_ldop & 0x1) << 0;
    767c:	11011f17 	ldw	r4,1148(r2)
    7680:	10c12017 	ldw	r3,1152(r2)
    7684:	11412717 	ldw	r5,1180(r2)
    7688:	2100004c 	andi	r4,r4,1
    768c:	18c0004c 	andi	r3,r3,1
    7690:	180692fa 	slli	r3,r3,11
    7694:	2008933a 	slli	r4,r4,12
    7698:	2940004c 	andi	r5,r5,1
    769c:	280a913a 	slli	r5,r5,4
    76a0:	20c8b03a 	or	r4,r4,r3
    76a4:	10c12b17 	ldw	r3,1196(r2)
    76a8:	18c0004c 	andi	r3,r3,1
    76ac:	20c6b03a 	or	r3,r4,r3
    76b0:	11012117 	ldw	r4,1156(r2)
    76b4:	2100004c 	andi	r4,r4,1
    76b8:	200892ba 	slli	r4,r4,10
    76bc:	1906b03a 	or	r3,r3,r4
    76c0:	11012217 	ldw	r4,1160(r2)
    76c4:	2100004c 	andi	r4,r4,1
    76c8:	2008927a 	slli	r4,r4,9
    76cc:	1906b03a 	or	r3,r3,r4
    76d0:	11012317 	ldw	r4,1164(r2)
    76d4:	2100004c 	andi	r4,r4,1
    76d8:	2008923a 	slli	r4,r4,8
    76dc:	1906b03a 	or	r3,r3,r4
    76e0:	11012417 	ldw	r4,1168(r2)
    76e4:	200891fa 	slli	r4,r4,7
    76e8:	21003fcc 	andi	r4,r4,255
    76ec:	1906b03a 	or	r3,r3,r4
    76f0:	11012517 	ldw	r4,1172(r2)
    76f4:	2100004c 	andi	r4,r4,1
    76f8:	200891ba 	slli	r4,r4,6
    76fc:	1906b03a 	or	r3,r3,r4
    7700:	11012617 	ldw	r4,1176(r2)
    7704:	2100004c 	andi	r4,r4,1
    7708:	2008917a 	slli	r4,r4,5
    770c:	1906b03a 	or	r3,r3,r4
    7710:	11012817 	ldw	r4,1184(r2)
    7714:	1946b03a 	or	r3,r3,r5
    7718:	2100004c 	andi	r4,r4,1
    771c:	200890fa 	slli	r4,r4,3
    7720:	1908b03a 	or	r4,r3,r4
    7724:	10c12917 	ldw	r3,1188(r2)
    7728:	18c0004c 	andi	r3,r3,1
    772c:	18c7883a 	add	r3,r3,r3
    7730:	18c7883a 	add	r3,r3,r3
    7734:	20c6b03a 	or	r3,r4,r3
    7738:	11012a17 	ldw	r4,1192(r2)
    773c:	2100004c 	andi	r4,r4,1
    7740:	2109883a 	add	r4,r4,r4
    7744:	1906b03a 	or	r3,r3,r4
    7748:	80e0b03a 	or	r16,r16,r3
    774c:	00001806 	br	77b0 <LMS7002M_regs_spi_write+0x14b0>
    }
    if (addr == 0x00A7)
    7750:	00c029c4 	movi	r3,167
    7754:	88c0071e 	bne	r17,r3,7774 <LMS7002M_regs_spi_write+0x1474>
    {
        value |= (regs->reg_0x00a7_rdiv_digip2 & 0xff) << 8;
        value |= (regs->reg_0x00a7_rdiv_digip1 & 0xff) << 0;
    7758:	10c12c17 	ldw	r3,1200(r2)
    775c:	11012d03 	ldbu	r4,1204(r2)
    7760:	1806923a 	slli	r3,r3,8
    7764:	18ffffcc 	andi	r3,r3,65535
    7768:	1906b03a 	or	r3,r3,r4
    776c:	80e0b03a 	or	r16,r16,r3
    7770:	00001406 	br	77c4 <LMS7002M_regs_spi_write+0x14c4>
    }
    if (addr == 0x00a8)
    7774:	00c02a04 	movi	r3,168
    7778:	88c0031e 	bne	r17,r3,7788 <LMS7002M_regs_spi_write+0x1488>
    {
        value |= (regs->reg_0x00a8_value & 0xffff) << 0;
    777c:	10c12e0b 	ldhu	r3,1208(r2)
    7780:	80e0b03a 	or	r16,r16,r3
    7784:	00001406 	br	77d8 <LMS7002M_regs_spi_write+0x14d8>
    }
    if (addr == 0x00aa)
    7788:	00c02a84 	movi	r3,170
    778c:	88c0031e 	bne	r17,r3,779c <LMS7002M_regs_spi_write+0x149c>
    {
        value |= (regs->reg_0x00aa_value & 0xffff) << 0;
    7790:	10c12f0b 	ldhu	r3,1212(r2)
    7794:	80e0b03a 	or	r16,r16,r3
    7798:	00003206 	br	7864 <LMS7002M_regs_spi_write+0x1564>
    }
    if (addr == 0x00ab)
    779c:	00c02ac4 	movi	r3,171
    77a0:	88c0031e 	bne	r17,r3,77b0 <LMS7002M_regs_spi_write+0x14b0>
    {
        value |= (regs->reg_0x00ab_value & 0xffff) << 0;
    77a4:	10c1300b 	ldhu	r3,1216(r2)
    77a8:	80e0b03a 	or	r16,r16,r3
    77ac:	00004306 	br	78bc <LMS7002M_regs_spi_write+0x15bc>
    }
    if (addr == 0x00ad)
    77b0:	00c02b44 	movi	r3,173
    77b4:	88c0031e 	bne	r17,r3,77c4 <LMS7002M_regs_spi_write+0x14c4>
    {
        value |= (regs->reg_0x00ad_value & 0xffff) << 0;
    77b8:	10c1310b 	ldhu	r3,1220(r2)
    77bc:	80e0b03a 	or	r16,r16,r3
    77c0:	00005006 	br	7904 <LMS7002M_regs_spi_write+0x1604>
    }
    if (addr == 0x00ae)
    77c4:	00c02b84 	movi	r3,174
    77c8:	88c0031e 	bne	r17,r3,77d8 <LMS7002M_regs_spi_write+0x14d8>
    {
        value |= (regs->reg_0x00ae_value & 0xffff) << 0;
    77cc:	10c1320b 	ldhu	r3,1224(r2)
    77d0:	80e0b03a 	or	r16,r16,r3
    77d4:	00005d06 	br	794c <LMS7002M_regs_spi_write+0x164c>
    }
    if (addr == 0x0100)
    77d8:	00c04004 	movi	r3,256
    77dc:	88c0211e 	bne	r17,r3,7864 <LMS7002M_regs_spi_write+0x1564>
        value |= (regs->reg_0x0100_en_amphf_pdet_trf & 0x3) << 12;
        value |= (regs->reg_0x0100_loadr_pdet_trf & 0x3) << 10;
        value |= (regs->reg_0x0100_pd_pdet_trf & 0x1) << 3;
        value |= (regs->reg_0x0100_pd_tlobuf_trf & 0x1) << 2;
        value |= (regs->reg_0x0100_pd_txpad_trf & 0x1) << 1;
        value |= (regs->reg_0x0100_en_g_trf & 0x1) << 0;
    77e0:	11413317 	ldw	r5,1228(r2)
    77e4:	10c13417 	ldw	r3,1232(r2)
    77e8:	11013517 	ldw	r4,1236(r2)
    77ec:	280a93fa 	slli	r5,r5,15
    77f0:	18c0004c 	andi	r3,r3,1
    77f4:	180693ba 	slli	r3,r3,14
    77f8:	297fffcc 	andi	r5,r5,65535
    77fc:	210000cc 	andi	r4,r4,3
    7800:	28cab03a 	or	r5,r5,r3
    7804:	10c13a17 	ldw	r3,1256(r2)
    7808:	2008933a 	slli	r4,r4,12
    780c:	18c0004c 	andi	r3,r3,1
    7810:	28c6b03a 	or	r3,r5,r3
    7814:	11413617 	ldw	r5,1240(r2)
    7818:	1906b03a 	or	r3,r3,r4
    781c:	11013717 	ldw	r4,1244(r2)
    7820:	294000cc 	andi	r5,r5,3
    7824:	280a92ba 	slli	r5,r5,10
    7828:	2100004c 	andi	r4,r4,1
    782c:	200890fa 	slli	r4,r4,3
    7830:	1946b03a 	or	r3,r3,r5
    7834:	1908b03a 	or	r4,r3,r4
    7838:	10c13817 	ldw	r3,1248(r2)
    783c:	18c0004c 	andi	r3,r3,1
    7840:	18c7883a 	add	r3,r3,r3
    7844:	18c7883a 	add	r3,r3,r3
    7848:	20c6b03a 	or	r3,r4,r3
    784c:	11013917 	ldw	r4,1252(r2)
    7850:	2100004c 	andi	r4,r4,1
    7854:	2109883a 	add	r4,r4,r4
    7858:	1906b03a 	or	r3,r3,r4
    785c:	80e0b03a 	or	r16,r16,r3
    7860:	00004406 	br	7974 <LMS7002M_regs_spi_write+0x1674>
    }
    if (addr == 0x0101)
    7864:	00c04044 	movi	r3,257
    7868:	88c0141e 	bne	r17,r3,78bc <LMS7002M_regs_spi_write+0x15bc>
    {
        value |= (regs->reg_0x0101_f_txpad_trf & 0x7) << 13;
        value |= (regs->reg_0x0101_l_loopb_txpad_trf & 0x3) << 11;
        value |= (regs->reg_0x0101_loss_lin_txpad_trf & 0x1f) << 6;
        value |= (regs->reg_0x0101_loss_main_txpad_trf & 0x1f) << 1;
        value |= (regs->reg_0x0101_en_loopb_txpad_trf & 0x1) << 0;
    786c:	11013b17 	ldw	r4,1260(r2)
    7870:	10c13c17 	ldw	r3,1264(r2)
    7874:	2008937a 	slli	r4,r4,13
    7878:	18c000cc 	andi	r3,r3,3
    787c:	180692fa 	slli	r3,r3,11
    7880:	213fffcc 	andi	r4,r4,65535
    7884:	20c8b03a 	or	r4,r4,r3
    7888:	10c13f17 	ldw	r3,1276(r2)
    788c:	18c0004c 	andi	r3,r3,1
    7890:	20c6b03a 	or	r3,r4,r3
    7894:	11013d17 	ldw	r4,1268(r2)
    7898:	210007cc 	andi	r4,r4,31
    789c:	200891ba 	slli	r4,r4,6
    78a0:	190ab03a 	or	r5,r3,r4
    78a4:	11013e17 	ldw	r4,1272(r2)
    78a8:	20c007cc 	andi	r3,r4,31
    78ac:	18c7883a 	add	r3,r3,r3
    78b0:	28c6b03a 	or	r3,r5,r3
    78b4:	80e0b03a 	or	r16,r16,r3
    78b8:	00004d06 	br	79f0 <LMS7002M_regs_spi_write+0x16f0>
    }
    if (addr == 0x0102)
    78bc:	00c04084 	movi	r3,258
    78c0:	88c0101e 	bne	r17,r3,7904 <LMS7002M_regs_spi_write+0x1604>
    {
        value |= (regs->reg_0x0102_gcas_gndref_txpad_trf & 0x1) << 15;
        value |= (regs->reg_0x0102_ict_lin_txpad_trf & 0x1f) << 10;
        value |= (regs->reg_0x0102_ict_main_txpad_trf & 0x1f) << 5;
        value |= (regs->reg_0x0102_vgcas_txpad_trf & 0x1f) << 0;
    78c4:	11014017 	ldw	r4,1280(r2)
    78c8:	10c14117 	ldw	r3,1284(r2)
    78cc:	200893fa 	slli	r4,r4,15
    78d0:	18c007cc 	andi	r3,r3,31
    78d4:	180692ba 	slli	r3,r3,10
    78d8:	213fffcc 	andi	r4,r4,65535
    78dc:	20c8b03a 	or	r4,r4,r3
    78e0:	10c14317 	ldw	r3,1292(r2)
    78e4:	18c007cc 	andi	r3,r3,31
    78e8:	20c8b03a 	or	r4,r4,r3
    78ec:	10c14217 	ldw	r3,1288(r2)
    78f0:	18c007cc 	andi	r3,r3,31
    78f4:	1806917a 	slli	r3,r3,5
    78f8:	20c6b03a 	or	r3,r4,r3
    78fc:	80e0b03a 	or	r16,r16,r3
    7900:	00004906 	br	7a28 <LMS7002M_regs_spi_write+0x1728>
    }
    if (addr == 0x0103)
    7904:	00c040c4 	movi	r3,259
    7908:	88c0101e 	bne	r17,r3,794c <LMS7002M_regs_spi_write+0x164c>
    {
        value |= (regs->reg_0x0103_sel_band1_trf & 0x1) << 11;
        value |= (regs->reg_0x0103_sel_band2_trf & 0x1) << 10;
        value |= (regs->reg_0x0103_lobiasn_txm_trf & 0x1f) << 5;
        value |= (regs->reg_0x0103_lobiasp_txx_trf & 0x1f) << 0;
    790c:	11014417 	ldw	r4,1296(r2)
    7910:	10c14517 	ldw	r3,1300(r2)
    7914:	2100004c 	andi	r4,r4,1
    7918:	18c0004c 	andi	r3,r3,1
    791c:	180692ba 	slli	r3,r3,10
    7920:	200892fa 	slli	r4,r4,11
    7924:	20c8b03a 	or	r4,r4,r3
    7928:	10c14717 	ldw	r3,1308(r2)
    792c:	18c007cc 	andi	r3,r3,31
    7930:	20c8b03a 	or	r4,r4,r3
    7934:	10c14617 	ldw	r3,1304(r2)
    7938:	18c007cc 	andi	r3,r3,31
    793c:	1806917a 	slli	r3,r3,5
    7940:	20c6b03a 	or	r3,r4,r3
    7944:	80e0b03a 	or	r16,r16,r3
    7948:	00004506 	br	7a60 <LMS7002M_regs_spi_write+0x1760>
    }
    if (addr == 0x0104)
    794c:	00c04104 	movi	r3,260
    7950:	88c0081e 	bne	r17,r3,7974 <LMS7002M_regs_spi_write+0x1674>
    {
        value |= (regs->reg_0x0104_cdc_i_trf & 0xf) << 4;
        value |= (regs->reg_0x0104_cdc_q_trf & 0xf) << 0;
    7954:	10c14817 	ldw	r3,1312(r2)
    7958:	1806913a 	slli	r3,r3,4
    795c:	19003fcc 	andi	r4,r3,255
    7960:	10c14917 	ldw	r3,1316(r2)
    7964:	18c003cc 	andi	r3,r3,15
    7968:	20c6b03a 	or	r3,r4,r3
    796c:	80e0b03a 	or	r16,r16,r3
    7970:	00004906 	br	7a98 <LMS7002M_regs_spi_write+0x1798>
    }
    if (addr == 0x0105)
    7974:	00c04144 	movi	r3,261
    7978:	88c01d1e 	bne	r17,r3,79f0 <LMS7002M_regs_spi_write+0x16f0>
        value |= (regs->reg_0x0105_loopb_tbb & 0x7) << 12;
        value |= (regs->reg_0x0105_pd_lpfh_tbb & 0x1) << 4;
        value |= (regs->reg_0x0105_pd_lpfiamp_tbb & 0x1) << 3;
        value |= (regs->reg_0x0105_pd_lpflad_tbb & 0x1) << 2;
        value |= (regs->reg_0x0105_pd_lpfs5_tbb & 0x1) << 1;
        value |= (regs->reg_0x0105_en_g_tbb & 0x1) << 0;
    797c:	11414a17 	ldw	r5,1320(r2)
    7980:	10c14b17 	ldw	r3,1324(r2)
    7984:	11014d17 	ldw	r4,1332(r2)
    7988:	280a93fa 	slli	r5,r5,15
    798c:	18c001cc 	andi	r3,r3,7
    7990:	1806933a 	slli	r3,r3,12
    7994:	297fffcc 	andi	r5,r5,65535
    7998:	2100004c 	andi	r4,r4,1
    799c:	28cab03a 	or	r5,r5,r3
    79a0:	10c15017 	ldw	r3,1344(r2)
    79a4:	200890fa 	slli	r4,r4,3
    79a8:	18c0004c 	andi	r3,r3,1
    79ac:	28c6b03a 	or	r3,r5,r3
    79b0:	11414c17 	ldw	r5,1328(r2)
    79b4:	2940004c 	andi	r5,r5,1
    79b8:	280a913a 	slli	r5,r5,4
    79bc:	1946b03a 	or	r3,r3,r5
    79c0:	1908b03a 	or	r4,r3,r4
    79c4:	10c14e17 	ldw	r3,1336(r2)
    79c8:	18c0004c 	andi	r3,r3,1
    79cc:	18c7883a 	add	r3,r3,r3
    79d0:	18c7883a 	add	r3,r3,r3
    79d4:	20c6b03a 	or	r3,r4,r3
    79d8:	11014f17 	ldw	r4,1340(r2)
    79dc:	2100004c 	andi	r4,r4,1
    79e0:	2109883a 	add	r4,r4,r4
    79e4:	1906b03a 	or	r3,r3,r4
    79e8:	80e0b03a 	or	r16,r16,r3
    79ec:	00003306 	br	7abc <LMS7002M_regs_spi_write+0x17bc>
    }
    if (addr == 0x0106)
    79f0:	00c04184 	movi	r3,262
    79f4:	88c00c1e 	bne	r17,r3,7a28 <LMS7002M_regs_spi_write+0x1728>
    {
        value |= (regs->reg_0x0106_ict_lpfs5_f_tbb & 0x1f) << 10;
        value |= (regs->reg_0x0106_ict_lpfs5_pt_tbb & 0x1f) << 5;
        value |= (regs->reg_0x0106_ict_lpf_h_pt_tbb & 0x1f) << 0;
    79f8:	10c15117 	ldw	r3,1348(r2)
    79fc:	18c007cc 	andi	r3,r3,31
    7a00:	180892ba 	slli	r4,r3,10
    7a04:	10c15217 	ldw	r3,1352(r2)
    7a08:	18c007cc 	andi	r3,r3,31
    7a0c:	1806917a 	slli	r3,r3,5
    7a10:	20c6b03a 	or	r3,r4,r3
    7a14:	11015317 	ldw	r4,1356(r2)
    7a18:	210007cc 	andi	r4,r4,31
    7a1c:	1906b03a 	or	r3,r3,r4
    7a20:	80e0b03a 	or	r16,r16,r3
    7a24:	00003606 	br	7b00 <LMS7002M_regs_spi_write+0x1800>
    }
    if (addr == 0x0107)
    7a28:	00c041c4 	movi	r3,263
    7a2c:	88c00c1e 	bne	r17,r3,7a60 <LMS7002M_regs_spi_write+0x1760>
    {
        value |= (regs->reg_0x0107_ict_lpfh_f_tbb & 0x1f) << 10;
        value |= (regs->reg_0x0107_ict_lpflad_f_tbb & 0x1f) << 5;
        value |= (regs->reg_0x0107_ict_lpflad_pt_tbb & 0x1f) << 0;
    7a30:	10c15417 	ldw	r3,1360(r2)
    7a34:	18c007cc 	andi	r3,r3,31
    7a38:	180892ba 	slli	r4,r3,10
    7a3c:	10c15517 	ldw	r3,1364(r2)
    7a40:	18c007cc 	andi	r3,r3,31
    7a44:	1806917a 	slli	r3,r3,5
    7a48:	20c6b03a 	or	r3,r4,r3
    7a4c:	11015617 	ldw	r4,1368(r2)
    7a50:	210007cc 	andi	r4,r4,31
    7a54:	1906b03a 	or	r3,r3,r4
    7a58:	80e0b03a 	or	r16,r16,r3
    7a5c:	00002d06 	br	7b14 <LMS7002M_regs_spi_write+0x1814>
    }
    if (addr == 0x0108)
    7a60:	00c04204 	movi	r3,264
    7a64:	88c00c1e 	bne	r17,r3,7a98 <LMS7002M_regs_spi_write+0x1798>
    {
        value |= (regs->reg_0x0108_cg_iamp_tbb & 0x3f) << 10;
        value |= (regs->reg_0x0108_ict_iamp_frp_tbb & 0x1f) << 5;
        value |= (regs->reg_0x0108_ict_iamp_gg_frp_tbb & 0x1f) << 0;
    7a68:	10c15717 	ldw	r3,1372(r2)
    7a6c:	180692ba 	slli	r3,r3,10
    7a70:	193fffcc 	andi	r4,r3,65535
    7a74:	10c15817 	ldw	r3,1376(r2)
    7a78:	18c007cc 	andi	r3,r3,31
    7a7c:	1806917a 	slli	r3,r3,5
    7a80:	20c6b03a 	or	r3,r4,r3
    7a84:	11015917 	ldw	r4,1380(r2)
    7a88:	210007cc 	andi	r4,r4,31
    7a8c:	1906b03a 	or	r3,r3,r4
    7a90:	80e0b03a 	or	r16,r16,r3
    7a94:	00004a06 	br	7bc0 <LMS7002M_regs_spi_write+0x18c0>
    }
    if (addr == 0x0109)
    7a98:	00c04244 	movi	r3,265
    7a9c:	88c0071e 	bne	r17,r3,7abc <LMS7002M_regs_spi_write+0x17bc>
    {
        value |= (regs->reg_0x0109_rcal_lpfh_tbb & 0xff) << 8;
        value |= (regs->reg_0x0109_rcal_lpflad_tbb & 0xff) << 0;
    7aa0:	10c15a17 	ldw	r3,1384(r2)
    7aa4:	11015b03 	ldbu	r4,1388(r2)
    7aa8:	1806923a 	slli	r3,r3,8
    7aac:	18ffffcc 	andi	r3,r3,65535
    7ab0:	1906b03a 	or	r3,r3,r4
    7ab4:	80e0b03a 	or	r16,r16,r3
    7ab8:	00006006 	br	7c3c <LMS7002M_regs_spi_write+0x193c>
    }
    if (addr == 0x010A)
    7abc:	00c04284 	movi	r3,266
    7ac0:	88c00f1e 	bne	r17,r3,7b00 <LMS7002M_regs_spi_write+0x1800>
    {
        value |= (regs->reg_0x010a_tstin_tbb & 0x3) << 14;
        value |= (regs->reg_0x010a_bypladder_tbb & 0x1) << 13;
        value |= (regs->reg_0x010a_ccal_lpflad_tbb & 0x1f) << 8;
        value |= (regs->reg_0x010a_rcal_lpfs5_tbb & 0xff) << 0;
    7ac4:	10c15c17 	ldw	r3,1392(r2)
    7ac8:	180693ba 	slli	r3,r3,14
    7acc:	193fffcc 	andi	r4,r3,65535
    7ad0:	10c15d17 	ldw	r3,1396(r2)
    7ad4:	18c0004c 	andi	r3,r3,1
    7ad8:	1806937a 	slli	r3,r3,13
    7adc:	20c6b03a 	or	r3,r4,r3
    7ae0:	11015f03 	ldbu	r4,1404(r2)
    7ae4:	1908b03a 	or	r4,r3,r4
    7ae8:	10c15e17 	ldw	r3,1400(r2)
    7aec:	18c007cc 	andi	r3,r3,31
    7af0:	1806923a 	slli	r3,r3,8
    7af4:	20c6b03a 	or	r3,r4,r3
    7af8:	80e0b03a 	or	r16,r16,r3
    7afc:	00005906 	br	7c64 <LMS7002M_regs_spi_write+0x1964>
    }
    if (addr == 0x010b)
    7b00:	00c042c4 	movi	r3,267
    7b04:	88c0031e 	bne	r17,r3,7b14 <LMS7002M_regs_spi_write+0x1814>
    {
        value |= (regs->reg_0x010b_value & 0xffff) << 0;
    7b08:	10c1600b 	ldhu	r3,1408(r2)
    7b0c:	80e0b03a 	or	r16,r16,r3
    7b10:	00006206 	br	7c9c <LMS7002M_regs_spi_write+0x199c>
    }
    if (addr == 0x010C)
    7b14:	00c04304 	movi	r3,268
    7b18:	88c0291e 	bne	r17,r3,7bc0 <LMS7002M_regs_spi_write+0x18c0>
        value |= (regs->reg_0x010c_pd_rloopb_2_rfe & 0x1) << 5;
        value |= (regs->reg_0x010c_pd_mxlobuf_rfe & 0x1) << 4;
        value |= (regs->reg_0x010c_pd_qgen_rfe & 0x1) << 3;
        value |= (regs->reg_0x010c_pd_rssi_rfe & 0x1) << 2;
        value |= (regs->reg_0x010c_pd_tia_rfe & 0x1) << 1;
        value |= (regs->reg_0x010c_en_g_rfe & 0x1) << 0;
    7b1c:	11016117 	ldw	r4,1412(r2)
    7b20:	10c16217 	ldw	r3,1416(r2)
    7b24:	11416617 	ldw	r5,1432(r2)
    7b28:	2008933a 	slli	r4,r4,12
    7b2c:	18c003cc 	andi	r3,r3,15
    7b30:	1806923a 	slli	r3,r3,8
    7b34:	213fffcc 	andi	r4,r4,65535
    7b38:	2940004c 	andi	r5,r5,1
    7b3c:	20c8b03a 	or	r4,r4,r3
    7b40:	10c16a17 	ldw	r3,1448(r2)
    7b44:	280a913a 	slli	r5,r5,4
    7b48:	18c0004c 	andi	r3,r3,1
    7b4c:	20c6b03a 	or	r3,r4,r3
    7b50:	11016317 	ldw	r4,1420(r2)
    7b54:	200891fa 	slli	r4,r4,7
    7b58:	21003fcc 	andi	r4,r4,255
    7b5c:	1906b03a 	or	r3,r3,r4
    7b60:	11016417 	ldw	r4,1424(r2)
    7b64:	2100004c 	andi	r4,r4,1
    7b68:	200891ba 	slli	r4,r4,6
    7b6c:	1906b03a 	or	r3,r3,r4
    7b70:	11016517 	ldw	r4,1428(r2)
    7b74:	2100004c 	andi	r4,r4,1
    7b78:	2008917a 	slli	r4,r4,5
    7b7c:	1906b03a 	or	r3,r3,r4
    7b80:	11016717 	ldw	r4,1436(r2)
    7b84:	1946b03a 	or	r3,r3,r5
    7b88:	2100004c 	andi	r4,r4,1
    7b8c:	200890fa 	slli	r4,r4,3
    7b90:	1908b03a 	or	r4,r3,r4
    7b94:	10c16817 	ldw	r3,1440(r2)
    7b98:	18c0004c 	andi	r3,r3,1
    7b9c:	18c7883a 	add	r3,r3,r3
    7ba0:	18c7883a 	add	r3,r3,r3
    7ba4:	20c6b03a 	or	r3,r4,r3
    7ba8:	11016917 	ldw	r4,1444(r2)
    7bac:	2100004c 	andi	r4,r4,1
    7bb0:	2109883a 	add	r4,r4,r4
    7bb4:	1906b03a 	or	r3,r3,r4
    7bb8:	80e0b03a 	or	r16,r16,r3
    7bbc:	00004506 	br	7cd4 <LMS7002M_regs_spi_write+0x19d4>
    }
    if (addr == 0x010D)
    7bc0:	00c04344 	movi	r3,269
    7bc4:	88c01d1e 	bne	r17,r3,7c3c <LMS7002M_regs_spi_write+0x193c>
        value |= (regs->reg_0x010d_en_dcoff_rxfe_rfe & 0x1) << 6;
        value |= (regs->reg_0x010d_en_inshsw_lb1_rfe & 0x1) << 4;
        value |= (regs->reg_0x010d_en_inshsw_lb2_rfe & 0x1) << 3;
        value |= (regs->reg_0x010d_en_inshsw_l_rfe & 0x1) << 2;
        value |= (regs->reg_0x010d_en_inshsw_w_rfe & 0x1) << 1;
        value |= (regs->reg_0x010d_en_nextrx_rfe & 0x1) << 0;
    7bc8:	11416b17 	ldw	r5,1452(r2)
    7bcc:	10c16c17 	ldw	r3,1456(r2)
    7bd0:	11016e17 	ldw	r4,1464(r2)
    7bd4:	294000cc 	andi	r5,r5,3
    7bd8:	18c0004c 	andi	r3,r3,1
    7bdc:	180691ba 	slli	r3,r3,6
    7be0:	280a91fa 	slli	r5,r5,7
    7be4:	2100004c 	andi	r4,r4,1
    7be8:	200890fa 	slli	r4,r4,3
    7bec:	28cab03a 	or	r5,r5,r3
    7bf0:	10c17117 	ldw	r3,1476(r2)
    7bf4:	18c0004c 	andi	r3,r3,1
    7bf8:	28c6b03a 	or	r3,r5,r3
    7bfc:	11416d17 	ldw	r5,1460(r2)
    7c00:	2940004c 	andi	r5,r5,1
    7c04:	280a913a 	slli	r5,r5,4
    7c08:	1946b03a 	or	r3,r3,r5
    7c0c:	1908b03a 	or	r4,r3,r4
    7c10:	10c16f17 	ldw	r3,1468(r2)
    7c14:	18c0004c 	andi	r3,r3,1
    7c18:	18c7883a 	add	r3,r3,r3
    7c1c:	18c7883a 	add	r3,r3,r3
    7c20:	20c6b03a 	or	r3,r4,r3
    7c24:	11017017 	ldw	r4,1472(r2)
    7c28:	2100004c 	andi	r4,r4,1
    7c2c:	2109883a 	add	r4,r4,r4
    7c30:	1906b03a 	or	r3,r3,r4
    7c34:	80e0b03a 	or	r16,r16,r3
    7c38:	00003006 	br	7cfc <LMS7002M_regs_spi_write+0x19fc>
    }
    if (addr == 0x010E)
    7c3c:	00c04384 	movi	r3,270
    7c40:	88c0081e 	bne	r17,r3,7c64 <LMS7002M_regs_spi_write+0x1964>
    {
        value |= (regs->reg_0x010e_dcoffi_rfe & 0x7f) << 7;
        value |= (regs->reg_0x010e_dcoffq_rfe & 0x7f) << 0;
    7c44:	10c17217 	ldw	r3,1480(r2)
    7c48:	18c01fcc 	andi	r3,r3,127
    7c4c:	180891fa 	slli	r4,r3,7
    7c50:	10c17317 	ldw	r3,1484(r2)
    7c54:	18c01fcc 	andi	r3,r3,127
    7c58:	20c6b03a 	or	r3,r4,r3
    7c5c:	80e0b03a 	or	r16,r16,r3
    7c60:	00003006 	br	7d24 <LMS7002M_regs_spi_write+0x1a24>
    }
    if (addr == 0x010F)
    7c64:	00c043c4 	movi	r3,271
    7c68:	88c00c1e 	bne	r17,r3,7c9c <LMS7002M_regs_spi_write+0x199c>
    {
        value |= (regs->reg_0x010f_ict_loopb_rfe & 0x1f) << 10;
        value |= (regs->reg_0x010f_ict_tiamain_rfe & 0x1f) << 5;
        value |= (regs->reg_0x010f_ict_tiaout_rfe & 0x1f) << 0;
    7c6c:	10c17417 	ldw	r3,1488(r2)
    7c70:	18c007cc 	andi	r3,r3,31
    7c74:	180892ba 	slli	r4,r3,10
    7c78:	10c17517 	ldw	r3,1492(r2)
    7c7c:	18c007cc 	andi	r3,r3,31
    7c80:	1806917a 	slli	r3,r3,5
    7c84:	20c6b03a 	or	r3,r4,r3
    7c88:	11017617 	ldw	r4,1496(r2)
    7c8c:	210007cc 	andi	r4,r4,31
    7c90:	1906b03a 	or	r3,r3,r4
    7c94:	80e0b03a 	or	r16,r16,r3
    7c98:	00003106 	br	7d60 <LMS7002M_regs_spi_write+0x1a60>
    }
    if (addr == 0x0110)
    7c9c:	00c04404 	movi	r3,272
    7ca0:	88c00c1e 	bne	r17,r3,7cd4 <LMS7002M_regs_spi_write+0x19d4>
    {
        value |= (regs->reg_0x0110_ict_lnacmo_rfe & 0x1f) << 10;
        value |= (regs->reg_0x0110_ict_lna_rfe & 0x1f) << 5;
        value |= (regs->reg_0x0110_ict_lodc_rfe & 0x1f) << 0;
    7ca4:	10c17717 	ldw	r3,1500(r2)
    7ca8:	18c007cc 	andi	r3,r3,31
    7cac:	180892ba 	slli	r4,r3,10
    7cb0:	10c17817 	ldw	r3,1504(r2)
    7cb4:	18c007cc 	andi	r3,r3,31
    7cb8:	1806917a 	slli	r3,r3,5
    7cbc:	20c6b03a 	or	r3,r4,r3
    7cc0:	11017917 	ldw	r4,1508(r2)
    7cc4:	210007cc 	andi	r4,r4,31
    7cc8:	1906b03a 	or	r3,r3,r4
    7ccc:	80e0b03a 	or	r16,r16,r3
    7cd0:	00002d06 	br	7d88 <LMS7002M_regs_spi_write+0x1a88>
    }
    if (addr == 0x0111)
    7cd4:	00c04444 	movi	r3,273
    7cd8:	88c0081e 	bne	r17,r3,7cfc <LMS7002M_regs_spi_write+0x19fc>
    {
        value |= (regs->reg_0x0111_cap_rxmxo_rfe & 0x1f) << 5;
        value |= (regs->reg_0x0111_cgsin_lna_rfe & 0x1f) << 0;
    7cdc:	10c17a17 	ldw	r3,1512(r2)
    7ce0:	18c007cc 	andi	r3,r3,31
    7ce4:	1808917a 	slli	r4,r3,5
    7ce8:	10c17b17 	ldw	r3,1516(r2)
    7cec:	18c007cc 	andi	r3,r3,31
    7cf0:	20c6b03a 	or	r3,r4,r3
    7cf4:	80e0b03a 	or	r16,r16,r3
    7cf8:	00003e06 	br	7df4 <LMS7002M_regs_spi_write+0x1af4>
    }
    if (addr == 0x0112)
    7cfc:	00c04484 	movi	r3,274
    7d00:	88c0081e 	bne	r17,r3,7d24 <LMS7002M_regs_spi_write+0x1a24>
    {
        value |= (regs->reg_0x0112_ccomp_tia_rfe & 0xf) << 12;
        value |= (regs->reg_0x0112_cfb_tia_rfe & 0xfff) << 0;
    7d04:	10c17c17 	ldw	r3,1520(r2)
    7d08:	1806933a 	slli	r3,r3,12
    7d0c:	193fffcc 	andi	r4,r3,65535
    7d10:	10c17d17 	ldw	r3,1524(r2)
    7d14:	18c3ffcc 	andi	r3,r3,4095
    7d18:	20c6b03a 	or	r3,r4,r3
    7d1c:	80e0b03a 	or	r16,r16,r3
    7d20:	00004106 	br	7e28 <LMS7002M_regs_spi_write+0x1b28>
    }
    if (addr == 0x0113)
    7d24:	00c044c4 	movi	r3,275
    7d28:	88c00d1e 	bne	r17,r3,7d60 <LMS7002M_regs_spi_write+0x1a60>
    {
        value |= (regs->reg_0x0113_g_lna_rfe & 0xf) << 6;
        value |= (regs->reg_0x0113_g_rxloopb_rfe & 0xf) << 2;
        value |= (regs->reg_0x0113_g_tia_rfe & 0x3) << 0;
    7d2c:	10c17e17 	ldw	r3,1528(r2)
    7d30:	18c003cc 	andi	r3,r3,15
    7d34:	180891ba 	slli	r4,r3,6
    7d38:	10c17f17 	ldw	r3,1532(r2)
    7d3c:	18c003cc 	andi	r3,r3,15
    7d40:	18c7883a 	add	r3,r3,r3
    7d44:	18c7883a 	add	r3,r3,r3
    7d48:	20c6b03a 	or	r3,r4,r3
    7d4c:	11018017 	ldw	r4,1536(r2)
    7d50:	210000cc 	andi	r4,r4,3
    7d54:	1906b03a 	or	r3,r3,r4
    7d58:	80e0b03a 	or	r16,r16,r3
    7d5c:	00003c06 	br	7e50 <LMS7002M_regs_spi_write+0x1b50>
    }
    if (addr == 0x0114)
    7d60:	00c04504 	movi	r3,276
    7d64:	88c0081e 	bne	r17,r3,7d88 <LMS7002M_regs_spi_write+0x1a88>
    {
        value |= (regs->reg_0x0114_rcomp_tia_rfe & 0xf) << 5;
        value |= (regs->reg_0x0114_rfb_tia_rfe & 0x1f) << 0;
    7d68:	10c18117 	ldw	r3,1540(r2)
    7d6c:	18c003cc 	andi	r3,r3,15
    7d70:	1808917a 	slli	r4,r3,5
    7d74:	10c18217 	ldw	r3,1544(r2)
    7d78:	18c007cc 	andi	r3,r3,31
    7d7c:	20c6b03a 	or	r3,r4,r3
    7d80:	80e0b03a 	or	r16,r16,r3
    7d84:	00004006 	br	7e88 <LMS7002M_regs_spi_write+0x1b88>
    }
    if (addr == 0x0115)
    7d88:	00c04544 	movi	r3,277
    7d8c:	88c0191e 	bne	r17,r3,7df4 <LMS7002M_regs_spi_write+0x1af4>
        value |= (regs->reg_0x0115_en_lb_lpfh_rbb & 0x1) << 15;
        value |= (regs->reg_0x0115_en_lb_lpfl_rbb & 0x1) << 14;
        value |= (regs->reg_0x0115_pd_lpfh_rbb & 0x1) << 3;
        value |= (regs->reg_0x0115_pd_lpfl_rbb & 0x1) << 2;
        value |= (regs->reg_0x0115_pd_pga_rbb & 0x1) << 1;
        value |= (regs->reg_0x0115_en_g_rbb & 0x1) << 0;
    7d90:	11418317 	ldw	r5,1548(r2)
    7d94:	10c18417 	ldw	r3,1552(r2)
    7d98:	11018517 	ldw	r4,1556(r2)
    7d9c:	280a93fa 	slli	r5,r5,15
    7da0:	18c0004c 	andi	r3,r3,1
    7da4:	180693ba 	slli	r3,r3,14
    7da8:	297fffcc 	andi	r5,r5,65535
    7dac:	2100004c 	andi	r4,r4,1
    7db0:	28cab03a 	or	r5,r5,r3
    7db4:	10c18817 	ldw	r3,1568(r2)
    7db8:	200890fa 	slli	r4,r4,3
    7dbc:	18c0004c 	andi	r3,r3,1
    7dc0:	28c6b03a 	or	r3,r5,r3
    7dc4:	1908b03a 	or	r4,r3,r4
    7dc8:	10c18617 	ldw	r3,1560(r2)
    7dcc:	18c0004c 	andi	r3,r3,1
    7dd0:	18c7883a 	add	r3,r3,r3
    7dd4:	18c7883a 	add	r3,r3,r3
    7dd8:	20c6b03a 	or	r3,r4,r3
    7ddc:	11018717 	ldw	r4,1564(r2)
    7de0:	2100004c 	andi	r4,r4,1
    7de4:	2109883a 	add	r4,r4,r4
    7de8:	1906b03a 	or	r3,r3,r4
    7dec:	80e0b03a 	or	r16,r16,r3
    7df0:	00003706 	br	7ed0 <LMS7002M_regs_spi_write+0x1bd0>
    }
    if (addr == 0x0116)
    7df4:	00c04584 	movi	r3,278
    7df8:	88c00b1e 	bne	r17,r3,7e28 <LMS7002M_regs_spi_write+0x1b28>
    {
        value |= (regs->reg_0x0116_r_ctl_lpf_rbb & 0x1f) << 11;
        value |= (regs->reg_0x0116_rcc_ctl_lpfh_rbb & 0x7) << 8;
        value |= (regs->reg_0x0116_c_ctl_lpfh_rbb & 0xff) << 0;
    7dfc:	10c18917 	ldw	r3,1572(r2)
    7e00:	180692fa 	slli	r3,r3,11
    7e04:	193fffcc 	andi	r4,r3,65535
    7e08:	10c18a17 	ldw	r3,1576(r2)
    7e0c:	18c001cc 	andi	r3,r3,7
    7e10:	1806923a 	slli	r3,r3,8
    7e14:	20c6b03a 	or	r3,r4,r3
    7e18:	11018b03 	ldbu	r4,1580(r2)
    7e1c:	1906b03a 	or	r3,r3,r4
    7e20:	80e0b03a 	or	r16,r16,r3
    7e24:	00003306 	br	7ef4 <LMS7002M_regs_spi_write+0x1bf4>
    }
    if (addr == 0x0117)
    7e28:	00c045c4 	movi	r3,279
    7e2c:	88c0081e 	bne	r17,r3,7e50 <LMS7002M_regs_spi_write+0x1b50>
    {
        value |= (regs->reg_0x0117_rcc_ctl_lpfl_rbb & 0x7) << 11;
        value |= (regs->reg_0x0117_c_ctl_lpfl_rbb & 0x7ff) << 0;
    7e30:	10c18c17 	ldw	r3,1584(r2)
    7e34:	18c001cc 	andi	r3,r3,7
    7e38:	180892fa 	slli	r4,r3,11
    7e3c:	10c18d17 	ldw	r3,1588(r2)
    7e40:	18c1ffcc 	andi	r3,r3,2047
    7e44:	20c6b03a 	or	r3,r4,r3
    7e48:	80e0b03a 	or	r16,r16,r3
    7e4c:	00002f06 	br	7f0c <LMS7002M_regs_spi_write+0x1c0c>
    }
    if (addr == 0x0118)
    7e50:	00c04604 	movi	r3,280
    7e54:	88c00c1e 	bne	r17,r3,7e88 <LMS7002M_regs_spi_write+0x1b88>
    {
        value |= (regs->reg_0x0118_input_ctl_pga_rbb & 0x7) << 13;
        value |= (regs->reg_0x0118_ict_lpf_in_rbb & 0x1f) << 5;
        value |= (regs->reg_0x0118_ict_lpf_out_rbb & 0x1f) << 0;
    7e58:	10c18e17 	ldw	r3,1592(r2)
    7e5c:	1806937a 	slli	r3,r3,13
    7e60:	193fffcc 	andi	r4,r3,65535
    7e64:	10c18f17 	ldw	r3,1596(r2)
    7e68:	18c007cc 	andi	r3,r3,31
    7e6c:	1806917a 	slli	r3,r3,5
    7e70:	20c6b03a 	or	r3,r4,r3
    7e74:	11019017 	ldw	r4,1600(r2)
    7e78:	210007cc 	andi	r4,r4,31
    7e7c:	1906b03a 	or	r3,r3,r4
    7e80:	80e0b03a 	or	r16,r16,r3
    7e84:	00006406 	br	8018 <LMS7002M_regs_spi_write+0x1d18>
    }
    if (addr == 0x0119)
    7e88:	00c04644 	movi	r3,281
    7e8c:	88c0101e 	bne	r17,r3,7ed0 <LMS7002M_regs_spi_write+0x1bd0>
    {
        value |= (regs->reg_0x0119_osw_pga_rbb & 0x1) << 15;
        value |= (regs->reg_0x0119_ict_pga_out_rbb & 0x1f) << 10;
        value |= (regs->reg_0x0119_ict_pga_in_rbb & 0x1f) << 5;
        value |= (regs->reg_0x0119_g_pga_rbb & 0x1f) << 0;
    7e90:	11019117 	ldw	r4,1604(r2)
    7e94:	10c19217 	ldw	r3,1608(r2)
    7e98:	200893fa 	slli	r4,r4,15
    7e9c:	18c007cc 	andi	r3,r3,31
    7ea0:	180692ba 	slli	r3,r3,10
    7ea4:	213fffcc 	andi	r4,r4,65535
    7ea8:	20c8b03a 	or	r4,r4,r3
    7eac:	10c19417 	ldw	r3,1616(r2)
    7eb0:	18c007cc 	andi	r3,r3,31
    7eb4:	20c8b03a 	or	r4,r4,r3
    7eb8:	10c19317 	ldw	r3,1612(r2)
    7ebc:	18c007cc 	andi	r3,r3,31
    7ec0:	1806917a 	slli	r3,r3,5
    7ec4:	20c6b03a 	or	r3,r4,r3
    7ec8:	80e0b03a 	or	r16,r16,r3
    7ecc:	00005706 	br	802c <LMS7002M_regs_spi_write+0x1d2c>
    }
    if (addr == 0x011A)
    7ed0:	00c04684 	movi	r3,282
    7ed4:	88c0071e 	bne	r17,r3,7ef4 <LMS7002M_regs_spi_write+0x1bf4>
    {
        value |= (regs->reg_0x011a_rcc_ctl_pga_rbb & 0x1f) << 9;
        value |= (regs->reg_0x011a_c_ctl_pga_rbb & 0xff) << 0;
    7ed8:	10c19517 	ldw	r3,1620(r2)
    7edc:	11019603 	ldbu	r4,1624(r2)
    7ee0:	18c007cc 	andi	r3,r3,31
    7ee4:	1806927a 	slli	r3,r3,9
    7ee8:	1906b03a 	or	r3,r3,r4
    7eec:	80e0b03a 	or	r16,r16,r3
    7ef0:	00005806 	br	8054 <LMS7002M_regs_spi_write+0x1d54>
    }
    if (addr == 0x011B)
    7ef4:	00c046c4 	movi	r3,283
    7ef8:	88c0041e 	bne	r17,r3,7f0c <LMS7002M_regs_spi_write+0x1c0c>
    {
        value |= (regs->reg_0x011b_resrv_rbb & 0x7f) << 0;
    7efc:	10c19717 	ldw	r3,1628(r2)
    7f00:	18c01fcc 	andi	r3,r3,127
    7f04:	80e0b03a 	or	r16,r16,r3
    7f08:	00007106 	br	80d0 <LMS7002M_regs_spi_write+0x1dd0>
    }
    if (addr == 0x011C)
    7f0c:	00c04704 	movi	r3,284
    7f10:	88c0411e 	bne	r17,r3,8018 <LMS7002M_regs_spi_write+0x1d18>
        value |= (regs->reg_0x011c_pd_cp & 0x1) << 5;
        value |= (regs->reg_0x011c_pd_fdiv & 0x1) << 4;
        value |= (regs->reg_0x011c_pd_sdm & 0x1) << 3;
        value |= (regs->reg_0x011c_pd_vco_comp & 0x1) << 2;
        value |= (regs->reg_0x011c_pd_vco & 0x1) << 1;
        value |= (regs->reg_0x011c_en_g & 0x1) << 0;
    7f14:	11019817 	ldw	r4,1632(r2)
    7f18:	10c19917 	ldw	r3,1636(r2)
    7f1c:	1141a317 	ldw	r5,1676(r2)
    7f20:	200893fa 	slli	r4,r4,15
    7f24:	18c0004c 	andi	r3,r3,1
    7f28:	180693ba 	slli	r3,r3,14
    7f2c:	213fffcc 	andi	r4,r4,65535
    7f30:	2940004c 	andi	r5,r5,1
    7f34:	20c8b03a 	or	r4,r4,r3
    7f38:	10c1a717 	ldw	r3,1692(r2)
    7f3c:	280a913a 	slli	r5,r5,4
    7f40:	18c0004c 	andi	r3,r3,1
    7f44:	20c6b03a 	or	r3,r4,r3
    7f48:	11019a17 	ldw	r4,1640(r2)
    7f4c:	2100004c 	andi	r4,r4,1
    7f50:	2008937a 	slli	r4,r4,13
    7f54:	1906b03a 	or	r3,r3,r4
    7f58:	11019b17 	ldw	r4,1644(r2)
    7f5c:	2100004c 	andi	r4,r4,1
    7f60:	2008933a 	slli	r4,r4,12
    7f64:	1906b03a 	or	r3,r3,r4
    7f68:	11019c17 	ldw	r4,1648(r2)
    7f6c:	2100004c 	andi	r4,r4,1
    7f70:	200892fa 	slli	r4,r4,11
    7f74:	1906b03a 	or	r3,r3,r4
    7f78:	11019d17 	ldw	r4,1652(r2)
    7f7c:	2100004c 	andi	r4,r4,1
    7f80:	200892ba 	slli	r4,r4,10
    7f84:	1906b03a 	or	r3,r3,r4
    7f88:	11019e17 	ldw	r4,1656(r2)
    7f8c:	2100004c 	andi	r4,r4,1
    7f90:	2008927a 	slli	r4,r4,9
    7f94:	1906b03a 	or	r3,r3,r4
    7f98:	11019f17 	ldw	r4,1660(r2)
    7f9c:	2100004c 	andi	r4,r4,1
    7fa0:	2008923a 	slli	r4,r4,8
    7fa4:	1906b03a 	or	r3,r3,r4
    7fa8:	1101a017 	ldw	r4,1664(r2)
    7fac:	200891fa 	slli	r4,r4,7
    7fb0:	21003fcc 	andi	r4,r4,255
    7fb4:	1906b03a 	or	r3,r3,r4
    7fb8:	1101a117 	ldw	r4,1668(r2)
    7fbc:	2100004c 	andi	r4,r4,1
    7fc0:	200891ba 	slli	r4,r4,6
    7fc4:	1906b03a 	or	r3,r3,r4
    7fc8:	1101a217 	ldw	r4,1672(r2)
    7fcc:	2100004c 	andi	r4,r4,1
    7fd0:	2008917a 	slli	r4,r4,5
    7fd4:	1906b03a 	or	r3,r3,r4
    7fd8:	1101a417 	ldw	r4,1680(r2)
    7fdc:	1946b03a 	or	r3,r3,r5
    7fe0:	2100004c 	andi	r4,r4,1
    7fe4:	200890fa 	slli	r4,r4,3
    7fe8:	1908b03a 	or	r4,r3,r4
    7fec:	10c1a517 	ldw	r3,1684(r2)
    7ff0:	18c0004c 	andi	r3,r3,1
    7ff4:	18c7883a 	add	r3,r3,r3
    7ff8:	18c7883a 	add	r3,r3,r3
    7ffc:	20c6b03a 	or	r3,r4,r3
    8000:	1101a617 	ldw	r4,1688(r2)
    8004:	2100004c 	andi	r4,r4,1
    8008:	2109883a 	add	r4,r4,r4
    800c:	1906b03a 	or	r3,r3,r4
    8010:	80e0b03a 	or	r16,r16,r3
    8014:	00003706 	br	80f4 <LMS7002M_regs_spi_write+0x1df4>
    }
    if (addr == 0x011D)
    8018:	00c04744 	movi	r3,285
    801c:	88c0031e 	bne	r17,r3,802c <LMS7002M_regs_spi_write+0x1d2c>
    {
        value |= (regs->reg_0x011d_frac_sdm & 0xffff) << 0;
    8020:	10c1a80b 	ldhu	r3,1696(r2)
    8024:	80e0b03a 	or	r16,r16,r3
    8028:	00004306 	br	8138 <LMS7002M_regs_spi_write+0x1e38>
    }
    if (addr == 0x011E)
    802c:	00c04784 	movi	r3,286
    8030:	88c0081e 	bne	r17,r3,8054 <LMS7002M_regs_spi_write+0x1d54>
    {
        value |= (regs->reg_0x011e_int_sdm & 0x3ff) << 4;
        value |= (regs->reg_0x011e_frac_sdm & 0xf) << 0;
    8034:	10c1a917 	ldw	r3,1700(r2)
    8038:	18c0ffcc 	andi	r3,r3,1023
    803c:	1808913a 	slli	r4,r3,4
    8040:	10c1aa17 	ldw	r3,1704(r2)
    8044:	18c003cc 	andi	r3,r3,15
    8048:	20c6b03a 	or	r3,r4,r3
    804c:	80e0b03a 	or	r16,r16,r3
    8050:	00004706 	br	8170 <LMS7002M_regs_spi_write+0x1e70>
    }
    if (addr == 0x011F)
    8054:	00c047c4 	movi	r3,287
    8058:	88c01d1e 	bne	r17,r3,80d0 <LMS7002M_regs_spi_write+0x1dd0>
        value |= (regs->reg_0x011f_pw_div4_loch & 0x7) << 9;
        value |= (regs->reg_0x011f_div_loch & 0x7) << 6;
        value |= (regs->reg_0x011f_tst_sx & 0x7) << 3;
        value |= (regs->reg_0x011f_sel_sdmclk & 0x1) << 2;
        value |= (regs->reg_0x011f_sx_dither_en & 0x1) << 1;
        value |= (regs->reg_0x011f_rev_sdmclk & 0x1) << 0;
    805c:	1141ab17 	ldw	r5,1708(r2)
    8060:	10c1ac17 	ldw	r3,1712(r2)
    8064:	1101ae17 	ldw	r4,1720(r2)
    8068:	294001cc 	andi	r5,r5,7
    806c:	18c001cc 	andi	r3,r3,7
    8070:	1806927a 	slli	r3,r3,9
    8074:	280a933a 	slli	r5,r5,12
    8078:	210001cc 	andi	r4,r4,7
    807c:	200890fa 	slli	r4,r4,3
    8080:	28cab03a 	or	r5,r5,r3
    8084:	10c1b117 	ldw	r3,1732(r2)
    8088:	18c0004c 	andi	r3,r3,1
    808c:	28c6b03a 	or	r3,r5,r3
    8090:	1141ad17 	ldw	r5,1716(r2)
    8094:	294001cc 	andi	r5,r5,7
    8098:	280a91ba 	slli	r5,r5,6
    809c:	1946b03a 	or	r3,r3,r5
    80a0:	1908b03a 	or	r4,r3,r4
    80a4:	10c1af17 	ldw	r3,1724(r2)
    80a8:	18c0004c 	andi	r3,r3,1
    80ac:	18c7883a 	add	r3,r3,r3
    80b0:	18c7883a 	add	r3,r3,r3
    80b4:	20c6b03a 	or	r3,r4,r3
    80b8:	1101b017 	ldw	r4,1728(r2)
    80bc:	2100004c 	andi	r4,r4,1
    80c0:	2109883a 	add	r4,r4,r4
    80c4:	1906b03a 	or	r3,r3,r4
    80c8:	80e0b03a 	or	r16,r16,r3
    80cc:	00004606 	br	81e8 <LMS7002M_regs_spi_write+0x1ee8>
    }
    if (addr == 0x0120)
    80d0:	00c04804 	movi	r3,288
    80d4:	88c0071e 	bne	r17,r3,80f4 <LMS7002M_regs_spi_write+0x1df4>
    {
        value |= (regs->reg_0x0120_vdiv_vco & 0xff) << 8;
        value |= (regs->reg_0x0120_ict_vco & 0xff) << 0;
    80d8:	10c1b217 	ldw	r3,1736(r2)
    80dc:	1101b303 	ldbu	r4,1740(r2)
    80e0:	1806923a 	slli	r3,r3,8
    80e4:	18ffffcc 	andi	r3,r3,65535
    80e8:	1906b03a 	or	r3,r3,r4
    80ec:	80e0b03a 	or	r16,r16,r3
    80f0:	00005406 	br	8244 <LMS7002M_regs_spi_write+0x1f44>
    }
    if (addr == 0x0121)
    80f4:	00c04844 	movi	r3,289
    80f8:	88c00f1e 	bne	r17,r3,8138 <LMS7002M_regs_spi_write+0x1e38>
    {
        value |= (regs->reg_0x0121_rsel_ldo_vco & 0x1f) << 11;
        value |= (regs->reg_0x0121_csw_vco & 0xff) << 3;
        value |= (regs->reg_0x0121_sel_vco & 0x3) << 1;
        value |= (regs->reg_0x0121_coarse_start & 0x1) << 0;
    80fc:	1141b417 	ldw	r5,1744(r2)
    8100:	10c1b503 	ldbu	r3,1748(r2)
    8104:	1101b717 	ldw	r4,1756(r2)
    8108:	280a92fa 	slli	r5,r5,11
    810c:	180690fa 	slli	r3,r3,3
    8110:	2100004c 	andi	r4,r4,1
    8114:	297fffcc 	andi	r5,r5,65535
    8118:	28c6b03a 	or	r3,r5,r3
    811c:	190ab03a 	or	r5,r3,r4
    8120:	1101b617 	ldw	r4,1752(r2)
    8124:	20c000cc 	andi	r3,r4,3
    8128:	18c7883a 	add	r3,r3,r3
    812c:	28c6b03a 	or	r3,r5,r3
    8130:	80e0b03a 	or	r16,r16,r3
    8134:	00004806 	br	8258 <LMS7002M_regs_spi_write+0x1f58>
    }
    if (addr == 0x0122)
    8138:	00c04884 	movi	r3,290
    813c:	88c00c1e 	bne	r17,r3,8170 <LMS7002M_regs_spi_write+0x1e70>
    {
        value |= (regs->reg_0x0122_revph_pfd & 0x1) << 12;
        value |= (regs->reg_0x0122_ioffset_cp & 0x3f) << 6;
        value |= (regs->reg_0x0122_ipulse_cp & 0x3f) << 0;
    8140:	10c1b817 	ldw	r3,1760(r2)
    8144:	18c0004c 	andi	r3,r3,1
    8148:	1808933a 	slli	r4,r3,12
    814c:	10c1b917 	ldw	r3,1764(r2)
    8150:	18c00fcc 	andi	r3,r3,63
    8154:	180691ba 	slli	r3,r3,6
    8158:	20c6b03a 	or	r3,r4,r3
    815c:	1101ba17 	ldw	r4,1768(r2)
    8160:	21000fcc 	andi	r4,r4,63
    8164:	1906b03a 	or	r3,r3,r4
    8168:	80e0b03a 	or	r16,r16,r3
    816c:	00003f06 	br	826c <LMS7002M_regs_spi_write+0x1f6c>
    }
    if (addr == 0x0123)
    8170:	00c048c4 	movi	r3,291
    8174:	88c01c1e 	bne	r17,r3,81e8 <LMS7002M_regs_spi_write+0x1ee8>
        value |= (regs->reg_0x0123_coarsepll_compo & 0x1) << 14;
        value |= (regs->reg_0x0123_vco_cmpho & 0x1) << 13;
        value |= (regs->reg_0x0123_vco_cmplo & 0x1) << 12;
        value |= (regs->reg_0x0123_cp2_pll & 0xf) << 8;
        value |= (regs->reg_0x0123_cp3_pll & 0xf) << 4;
        value |= (regs->reg_0x0123_cz & 0xf) << 0;
    8178:	1141bb17 	ldw	r5,1772(r2)
    817c:	10c1bc17 	ldw	r3,1776(r2)
    8180:	1101bd17 	ldw	r4,1780(r2)
    8184:	280a93fa 	slli	r5,r5,15
    8188:	18c0004c 	andi	r3,r3,1
    818c:	180693ba 	slli	r3,r3,14
    8190:	297fffcc 	andi	r5,r5,65535
    8194:	2100004c 	andi	r4,r4,1
    8198:	28cab03a 	or	r5,r5,r3
    819c:	10c1c117 	ldw	r3,1796(r2)
    81a0:	2008937a 	slli	r4,r4,13
    81a4:	18c003cc 	andi	r3,r3,15
    81a8:	28c6b03a 	or	r3,r5,r3
    81ac:	1141be17 	ldw	r5,1784(r2)
    81b0:	1906b03a 	or	r3,r3,r4
    81b4:	1101bf17 	ldw	r4,1788(r2)
    81b8:	2940004c 	andi	r5,r5,1
    81bc:	280a933a 	slli	r5,r5,12
    81c0:	210003cc 	andi	r4,r4,15
    81c4:	2008923a 	slli	r4,r4,8
    81c8:	1946b03a 	or	r3,r3,r5
    81cc:	1908b03a 	or	r4,r3,r4
    81d0:	10c1c017 	ldw	r3,1792(r2)
    81d4:	1806913a 	slli	r3,r3,4
    81d8:	18c03fcc 	andi	r3,r3,255
    81dc:	20c6b03a 	or	r3,r4,r3
    81e0:	80e0b03a 	or	r16,r16,r3
    81e4:	00004806 	br	8308 <LMS7002M_regs_spi_write+0x2008>
    }
    if (addr == 0x0124)
    81e8:	00c04904 	movi	r3,292
    81ec:	88c0151e 	bne	r17,r3,8244 <LMS7002M_regs_spi_write+0x1f44>
    {
        value |= (regs->reg_0x0124_en_dir_sxx & 0x1) << 4;
        value |= (regs->reg_0x0124_en_dir_rbb & 0x1) << 3;
        value |= (regs->reg_0x0124_en_dir_rfe & 0x1) << 2;
        value |= (regs->reg_0x0124_en_dir_tbb & 0x1) << 1;
        value |= (regs->reg_0x0124_en_dir_trf & 0x1) << 0;
    81f0:	1101c217 	ldw	r4,1800(r2)
    81f4:	10c1c317 	ldw	r3,1804(r2)
    81f8:	2100004c 	andi	r4,r4,1
    81fc:	18c0004c 	andi	r3,r3,1
    8200:	180690fa 	slli	r3,r3,3
    8204:	2008913a 	slli	r4,r4,4
    8208:	20c8b03a 	or	r4,r4,r3
    820c:	10c1c617 	ldw	r3,1816(r2)
    8210:	18c0004c 	andi	r3,r3,1
    8214:	20c8b03a 	or	r4,r4,r3
    8218:	10c1c417 	ldw	r3,1808(r2)
    821c:	18c0004c 	andi	r3,r3,1
    8220:	18c7883a 	add	r3,r3,r3
    8224:	18c7883a 	add	r3,r3,r3
    8228:	20c6b03a 	or	r3,r4,r3
    822c:	1101c517 	ldw	r4,1812(r2)
    8230:	2100004c 	andi	r4,r4,1
    8234:	2109883a 	add	r4,r4,r4
    8238:	1906b03a 	or	r3,r3,r4
    823c:	80e0b03a 	or	r16,r16,r3
    8240:	00003706 	br	8320 <LMS7002M_regs_spi_write+0x2020>
    }
    if (addr == 0x0125)
    8244:	00c04944 	movi	r3,293
    8248:	88c0031e 	bne	r17,r3,8258 <LMS7002M_regs_spi_write+0x1f58>
    {
        value |= (regs->reg_0x0125_value & 0xffff) << 0;
    824c:	10c1c70b 	ldhu	r3,1820(r2)
    8250:	80e0b03a 	or	r16,r16,r3
    8254:	00003806 	br	8338 <LMS7002M_regs_spi_write+0x2038>
    }
    if (addr == 0x0126)
    8258:	00c04984 	movi	r3,294
    825c:	88c0031e 	bne	r17,r3,826c <LMS7002M_regs_spi_write+0x1f6c>
    {
        value |= (regs->reg_0x0126_value & 0xffff) << 0;
    8260:	10c1c80b 	ldhu	r3,1824(r2)
    8264:	80e0b03a 	or	r16,r16,r3
    8268:	00003d06 	br	8360 <LMS7002M_regs_spi_write+0x2060>
    }
    if (addr == 0x0200)
    826c:	00c08004 	movi	r3,512
    8270:	88c0251e 	bne	r17,r3,8308 <LMS7002M_regs_spi_write+0x2008>
        value |= (regs->reg_0x0200_tsgdcldi & 0x1) << 5;
        value |= (regs->reg_0x0200_tsgswapiq & 0x1) << 4;
        value |= (regs->reg_0x0200_tsgmode & 0x1) << 3;
        value |= (regs->reg_0x0200_insel & 0x1) << 2;
        value |= (regs->reg_0x0200_bstart & 0x1) << 1;
        value |= (regs->reg_0x0200_en & 0x1) << 0;
    8274:	1101c917 	ldw	r4,1828(r2)
    8278:	10c1ca17 	ldw	r3,1832(r2)
    827c:	1141cd17 	ldw	r5,1844(r2)
    8280:	2100004c 	andi	r4,r4,1
    8284:	18c000cc 	andi	r3,r3,3
    8288:	180691fa 	slli	r3,r3,7
    828c:	2008927a 	slli	r4,r4,9
    8290:	2940004c 	andi	r5,r5,1
    8294:	280a913a 	slli	r5,r5,4
    8298:	20c8b03a 	or	r4,r4,r3
    829c:	10c1d117 	ldw	r3,1860(r2)
    82a0:	18c0004c 	andi	r3,r3,1
    82a4:	20c6b03a 	or	r3,r4,r3
    82a8:	1101cb17 	ldw	r4,1836(r2)
    82ac:	2100004c 	andi	r4,r4,1
    82b0:	200891ba 	slli	r4,r4,6
    82b4:	1906b03a 	or	r3,r3,r4
    82b8:	1101cc17 	ldw	r4,1840(r2)
    82bc:	2100004c 	andi	r4,r4,1
    82c0:	2008917a 	slli	r4,r4,5
    82c4:	1906b03a 	or	r3,r3,r4
    82c8:	1101ce17 	ldw	r4,1848(r2)
    82cc:	1946b03a 	or	r3,r3,r5
    82d0:	2100004c 	andi	r4,r4,1
    82d4:	200890fa 	slli	r4,r4,3
    82d8:	1908b03a 	or	r4,r3,r4
    82dc:	10c1cf17 	ldw	r3,1852(r2)
    82e0:	18c0004c 	andi	r3,r3,1
    82e4:	18c7883a 	add	r3,r3,r3
    82e8:	18c7883a 	add	r3,r3,r3
    82ec:	20c6b03a 	or	r3,r4,r3
    82f0:	1101d017 	ldw	r4,1856(r2)
    82f4:	2100004c 	andi	r4,r4,1
    82f8:	2109883a 	add	r4,r4,r4
    82fc:	1906b03a 	or	r3,r3,r4
    8300:	80e0b03a 	or	r16,r16,r3
    8304:	00001f06 	br	8384 <LMS7002M_regs_spi_write+0x2084>
    }
    if (addr == 0x0201)
    8308:	00c08044 	movi	r3,513
    830c:	88c0041e 	bne	r17,r3,8320 <LMS7002M_regs_spi_write+0x2020>
    {
        value |= (regs->reg_0x0201_gcorrq & 0x7ff) << 0;
    8310:	10c1d217 	ldw	r3,1864(r2)
    8314:	18c1ffcc 	andi	r3,r3,2047
    8318:	80e0b03a 	or	r16,r16,r3
    831c:	00002206 	br	83a8 <LMS7002M_regs_spi_write+0x20a8>
    }
    if (addr == 0x0202)
    8320:	00c08084 	movi	r3,514
    8324:	88c0041e 	bne	r17,r3,8338 <LMS7002M_regs_spi_write+0x2038>
    {
        value |= (regs->reg_0x0202_gcorri & 0x7ff) << 0;
    8328:	10c1d317 	ldw	r3,1868(r2)
    832c:	18c1ffcc 	andi	r3,r3,2047
    8330:	80e0b03a 	or	r16,r16,r3
    8334:	00002506 	br	83cc <LMS7002M_regs_spi_write+0x20cc>
    }
    if (addr == 0x0203)
    8338:	00c080c4 	movi	r3,515
    833c:	88c0081e 	bne	r17,r3,8360 <LMS7002M_regs_spi_write+0x2060>
    {
        value |= (regs->reg_0x0203_hbi_ovr & 0x7) << 12;
        value |= (regs->reg_0x0203_iqcorr & 0xfff) << 0;
    8340:	10c1d417 	ldw	r3,1872(r2)
    8344:	18c001cc 	andi	r3,r3,7
    8348:	1808933a 	slli	r4,r3,12
    834c:	10c1d517 	ldw	r3,1876(r2)
    8350:	18c3ffcc 	andi	r3,r3,4095
    8354:	20c6b03a 	or	r3,r4,r3
    8358:	80e0b03a 	or	r16,r16,r3
    835c:	00002406 	br	83f0 <LMS7002M_regs_spi_write+0x20f0>
    }
    if (addr == 0x0204)
    8360:	00c08104 	movi	r3,516
    8364:	88c0071e 	bne	r17,r3,8384 <LMS7002M_regs_spi_write+0x2084>
    {
        value |= (regs->reg_0x0204_dccorri & 0xff) << 8;
        value |= (regs->reg_0x0204_dccorrq & 0xff) << 0;
    8368:	10c1d617 	ldw	r3,1880(r2)
    836c:	1101d703 	ldbu	r4,1884(r2)
    8370:	1806923a 	slli	r3,r3,8
    8374:	18ffffcc 	andi	r3,r3,65535
    8378:	1906b03a 	or	r3,r3,r4
    837c:	80e0b03a 	or	r16,r16,r3
    8380:	00004506 	br	8498 <LMS7002M_regs_spi_write+0x2198>
    }
    if (addr == 0x0205)
    8384:	00c08144 	movi	r3,517
    8388:	88c0071e 	bne	r17,r3,83a8 <LMS7002M_regs_spi_write+0x20a8>
    {
        value |= (regs->reg_0x0205_gfir1_l & 0x7) << 8;
        value |= (regs->reg_0x0205_gfir1_n & 0xff) << 0;
    838c:	10c1d817 	ldw	r3,1888(r2)
    8390:	1101d903 	ldbu	r4,1892(r2)
    8394:	18c001cc 	andi	r3,r3,7
    8398:	1806923a 	slli	r3,r3,8
    839c:	1906b03a 	or	r3,r3,r4
    83a0:	80e0b03a 	or	r16,r16,r3
    83a4:	00004106 	br	84ac <LMS7002M_regs_spi_write+0x21ac>
    }
    if (addr == 0x0206)
    83a8:	00c08184 	movi	r3,518
    83ac:	88c0071e 	bne	r17,r3,83cc <LMS7002M_regs_spi_write+0x20cc>
    {
        value |= (regs->reg_0x0206_gfir2_l & 0x7) << 8;
        value |= (regs->reg_0x0206_gfir2_n & 0xff) << 0;
    83b0:	10c1da17 	ldw	r3,1896(r2)
    83b4:	1101db03 	ldbu	r4,1900(r2)
    83b8:	18c001cc 	andi	r3,r3,7
    83bc:	1806923a 	slli	r3,r3,8
    83c0:	1906b03a 	or	r3,r3,r4
    83c4:	80e0b03a 	or	r16,r16,r3
    83c8:	00003d06 	br	84c0 <LMS7002M_regs_spi_write+0x21c0>
    }
    if (addr == 0x0207)
    83cc:	00c081c4 	movi	r3,519
    83d0:	88c0071e 	bne	r17,r3,83f0 <LMS7002M_regs_spi_write+0x20f0>
    {
        value |= (regs->reg_0x0207_gfir3_l & 0x7) << 8;
        value |= (regs->reg_0x0207_gfir3_n & 0xff) << 0;
    83d4:	10c1dc17 	ldw	r3,1904(r2)
    83d8:	1101dd03 	ldbu	r4,1908(r2)
    83dc:	18c001cc 	andi	r3,r3,7
    83e0:	1806923a 	slli	r3,r3,8
    83e4:	1906b03a 	or	r3,r3,r4
    83e8:	80e0b03a 	or	r16,r16,r3
    83ec:	00003906 	br	84d4 <LMS7002M_regs_spi_write+0x21d4>
    }
    if (addr == 0x0208)
    83f0:	00c08204 	movi	r3,520
    83f4:	88c0281e 	bne	r17,r3,8498 <LMS7002M_regs_spi_write+0x2198>
        value |= (regs->reg_0x0208_gfir3_byp & 0x1) << 6;
        value |= (regs->reg_0x0208_gfir2_byp & 0x1) << 5;
        value |= (regs->reg_0x0208_gfir1_byp & 0x1) << 4;
        value |= (regs->reg_0x0208_dc_byp & 0x1) << 3;
        value |= (regs->reg_0x0208_gc_byp & 0x1) << 1;
        value |= (regs->reg_0x0208_ph_byp & 0x1) << 0;
    83f8:	1101de17 	ldw	r4,1912(r2)
    83fc:	10c1df17 	ldw	r3,1916(r2)
    8400:	200893ba 	slli	r4,r4,14
    8404:	18c0004c 	andi	r3,r3,1
    8408:	1806937a 	slli	r3,r3,13
    840c:	213fffcc 	andi	r4,r4,65535
    8410:	20c8b03a 	or	r4,r4,r3
    8414:	10c1e717 	ldw	r3,1948(r2)
    8418:	18c0004c 	andi	r3,r3,1
    841c:	20c6b03a 	or	r3,r4,r3
    8420:	1101e017 	ldw	r4,1920(r2)
    8424:	2100004c 	andi	r4,r4,1
    8428:	2008923a 	slli	r4,r4,8
    842c:	1906b03a 	or	r3,r3,r4
    8430:	1101e117 	ldw	r4,1924(r2)
    8434:	200891fa 	slli	r4,r4,7
    8438:	21003fcc 	andi	r4,r4,255
    843c:	1906b03a 	or	r3,r3,r4
    8440:	1101e217 	ldw	r4,1928(r2)
    8444:	2100004c 	andi	r4,r4,1
    8448:	200891ba 	slli	r4,r4,6
    844c:	1906b03a 	or	r3,r3,r4
    8450:	1101e317 	ldw	r4,1932(r2)
    8454:	2100004c 	andi	r4,r4,1
    8458:	2008917a 	slli	r4,r4,5
    845c:	1906b03a 	or	r3,r3,r4
    8460:	1101e417 	ldw	r4,1936(r2)
    8464:	2100004c 	andi	r4,r4,1
    8468:	2008913a 	slli	r4,r4,4
    846c:	1906b03a 	or	r3,r3,r4
    8470:	1101e517 	ldw	r4,1940(r2)
    8474:	2100004c 	andi	r4,r4,1
    8478:	200890fa 	slli	r4,r4,3
    847c:	190ab03a 	or	r5,r3,r4
    8480:	1101e617 	ldw	r4,1944(r2)
    8484:	20c0004c 	andi	r3,r4,1
    8488:	18c7883a 	add	r3,r3,r3
    848c:	28c6b03a 	or	r3,r5,r3
    8490:	80e0b03a 	or	r16,r16,r3
    8494:	00001d06 	br	850c <LMS7002M_regs_spi_write+0x220c>
    }
    if (addr == 0x0209)
    8498:	00c08244 	movi	r3,521
    849c:	88c0031e 	bne	r17,r3,84ac <LMS7002M_regs_spi_write+0x21ac>
    {
        value |= (regs->reg_0x0209_value & 0xffff) << 0;
    84a0:	10c1e80b 	ldhu	r3,1952(r2)
    84a4:	80e0b03a 	or	r16,r16,r3
    84a8:	00001d06 	br	8520 <LMS7002M_regs_spi_write+0x2220>
    }
    if (addr == 0x020a)
    84ac:	00c08284 	movi	r3,522
    84b0:	88c0031e 	bne	r17,r3,84c0 <LMS7002M_regs_spi_write+0x21c0>
    {
        value |= (regs->reg_0x020a_value & 0xffff) << 0;
    84b4:	10c1e90b 	ldhu	r3,1956(r2)
    84b8:	80e0b03a 	or	r16,r16,r3
    84bc:	00001d06 	br	8534 <LMS7002M_regs_spi_write+0x2234>
    }
    if (addr == 0x020C)
    84c0:	00c08304 	movi	r3,524
    84c4:	88c0031e 	bne	r17,r3,84d4 <LMS7002M_regs_spi_write+0x21d4>
    {
        value |= (regs->reg_0x020c_dc_reg & 0xffff) << 0;
    84c8:	10c1ea0b 	ldhu	r3,1960(r2)
    84cc:	80e0b03a 	or	r16,r16,r3
    84d0:	00001d06 	br	8548 <LMS7002M_regs_spi_write+0x2248>
    }
    if (addr == 0x0240)
    84d4:	00c09004 	movi	r3,576
    84d8:	88c00c1e 	bne	r17,r3,850c <LMS7002M_regs_spi_write+0x220c>
    {
        value |= (regs->reg_0x0240_dthbit & 0xf) << 5;
        value |= (regs->reg_0x0240_sel & 0xf) << 1;
        value |= (regs->reg_0x0240_mode & 0x1) << 0;
    84dc:	10c1eb17 	ldw	r3,1964(r2)
    84e0:	1101ec17 	ldw	r4,1968(r2)
    84e4:	18c003cc 	andi	r3,r3,15
    84e8:	180a917a 	slli	r5,r3,5
    84ec:	20c003cc 	andi	r3,r4,15
    84f0:	1101ed17 	ldw	r4,1972(r2)
    84f4:	18c7883a 	add	r3,r3,r3
    84f8:	28c6b03a 	or	r3,r5,r3
    84fc:	2100004c 	andi	r4,r4,1
    8500:	1906b03a 	or	r3,r3,r4
    8504:	80e0b03a 	or	r16,r16,r3
    8508:	00003e06 	br	8604 <LMS7002M_regs_spi_write+0x2304>
    }
    if (addr == 0x0241)
    850c:	00c09044 	movi	r3,577
    8510:	88c0031e 	bne	r17,r3,8520 <LMS7002M_regs_spi_write+0x2220>
    {
        value |= (regs->reg_0x0241_pho & 0xffff) << 0;
    8514:	10c1ee0b 	ldhu	r3,1976(r2)
    8518:	80e0b03a 	or	r16,r16,r3
    851c:	00003f06 	br	861c <LMS7002M_regs_spi_write+0x231c>
    }
    if (addr == 0x0242)
    8520:	00c09084 	movi	r3,578
    8524:	88c0031e 	bne	r17,r3,8534 <LMS7002M_regs_spi_write+0x2234>
    {
        value |= (regs->reg_0x0242_fcw0_hi & 0xffff) << 0;
    8528:	10c1ef0b 	ldhu	r3,1980(r2)
    852c:	80e0b03a 	or	r16,r16,r3
    8530:	00004006 	br	8634 <LMS7002M_regs_spi_write+0x2334>
    }
    if (addr == 0x0243)
    8534:	00c090c4 	movi	r3,579
    8538:	88c0031e 	bne	r17,r3,8548 <LMS7002M_regs_spi_write+0x2248>
    {
        value |= (regs->reg_0x0243_fcw0_lo & 0xffff) << 0;
    853c:	10c1f00b 	ldhu	r3,1984(r2)
    8540:	80e0b03a 	or	r16,r16,r3
    8544:	00004506 	br	865c <LMS7002M_regs_spi_write+0x235c>
    }
    if (addr == 0x0400)
    8548:	00c10004 	movi	r3,1024
    854c:	88c02d1e 	bne	r17,r3,8604 <LMS7002M_regs_spi_write+0x2304>
        value |= (regs->reg_0x0400_tsgdcldi & 0x1) << 5;
        value |= (regs->reg_0x0400_tsgswapiq & 0x1) << 4;
        value |= (regs->reg_0x0400_tsgmode & 0x1) << 3;
        value |= (regs->reg_0x0400_insel & 0x1) << 2;
        value |= (regs->reg_0x0400_bstart & 0x1) << 1;
        value |= (regs->reg_0x0400_en & 0x1) << 0;
    8550:	1101f117 	ldw	r4,1988(r2)
    8554:	10c1f217 	ldw	r3,1992(r2)
    8558:	1141f717 	ldw	r5,2012(r2)
    855c:	200893fa 	slli	r4,r4,15
    8560:	18c000cc 	andi	r3,r3,3
    8564:	1806937a 	slli	r3,r3,13
    8568:	213fffcc 	andi	r4,r4,65535
    856c:	2940004c 	andi	r5,r5,1
    8570:	20c8b03a 	or	r4,r4,r3
    8574:	10c1fb17 	ldw	r3,2028(r2)
    8578:	280a913a 	slli	r5,r5,4
    857c:	18c0004c 	andi	r3,r3,1
    8580:	20c6b03a 	or	r3,r4,r3
    8584:	1101f317 	ldw	r4,1996(r2)
    8588:	2100004c 	andi	r4,r4,1
    858c:	2008927a 	slli	r4,r4,9
    8590:	1906b03a 	or	r3,r3,r4
    8594:	1101f417 	ldw	r4,2000(r2)
    8598:	210000cc 	andi	r4,r4,3
    859c:	200891fa 	slli	r4,r4,7
    85a0:	1906b03a 	or	r3,r3,r4
    85a4:	1101f517 	ldw	r4,2004(r2)
    85a8:	2100004c 	andi	r4,r4,1
    85ac:	200891ba 	slli	r4,r4,6
    85b0:	1906b03a 	or	r3,r3,r4
    85b4:	1101f617 	ldw	r4,2008(r2)
    85b8:	2100004c 	andi	r4,r4,1
    85bc:	2008917a 	slli	r4,r4,5
    85c0:	1906b03a 	or	r3,r3,r4
    85c4:	1101f817 	ldw	r4,2016(r2)
    85c8:	1946b03a 	or	r3,r3,r5
    85cc:	2100004c 	andi	r4,r4,1
    85d0:	200890fa 	slli	r4,r4,3
    85d4:	1908b03a 	or	r4,r3,r4
    85d8:	10c1f917 	ldw	r3,2020(r2)
    85dc:	18c0004c 	andi	r3,r3,1
    85e0:	18c7883a 	add	r3,r3,r3
    85e4:	18c7883a 	add	r3,r3,r3
    85e8:	20c6b03a 	or	r3,r4,r3
    85ec:	1101fa17 	ldw	r4,2024(r2)
    85f0:	2100004c 	andi	r4,r4,1
    85f4:	2109883a 	add	r4,r4,r4
    85f8:	1906b03a 	or	r3,r3,r4
    85fc:	80e0b03a 	or	r16,r16,r3
    8600:	00001c06 	br	8674 <LMS7002M_regs_spi_write+0x2374>
    }
    if (addr == 0x0401)
    8604:	00c10044 	movi	r3,1025
    8608:	88c0041e 	bne	r17,r3,861c <LMS7002M_regs_spi_write+0x231c>
    {
        value |= (regs->reg_0x0401_gcorrq & 0x7ff) << 0;
    860c:	10c1fc17 	ldw	r3,2032(r2)
    8610:	18c1ffcc 	andi	r3,r3,2047
    8614:	80e0b03a 	or	r16,r16,r3
    8618:	00001f06 	br	8698 <LMS7002M_regs_spi_write+0x2398>
    }
    if (addr == 0x0402)
    861c:	00c10084 	movi	r3,1026
    8620:	88c0041e 	bne	r17,r3,8634 <LMS7002M_regs_spi_write+0x2334>
    {
        value |= (regs->reg_0x0402_gcorri & 0x7ff) << 0;
    8624:	10c1fd17 	ldw	r3,2036(r2)
    8628:	18c1ffcc 	andi	r3,r3,2047
    862c:	80e0b03a 	or	r16,r16,r3
    8630:	00002206 	br	86bc <LMS7002M_regs_spi_write+0x23bc>
    }
    if (addr == 0x0403)
    8634:	00c100c4 	movi	r3,1027
    8638:	88c0081e 	bne	r17,r3,865c <LMS7002M_regs_spi_write+0x235c>
    {
        value |= (regs->reg_0x0403_hbd_ovr & 0x7) << 12;
        value |= (regs->reg_0x0403_iqcorr & 0xfff) << 0;
    863c:	10c1fe17 	ldw	r3,2040(r2)
    8640:	18c001cc 	andi	r3,r3,7
    8644:	1808933a 	slli	r4,r3,12
    8648:	10c1ff17 	ldw	r3,2044(r2)
    864c:	18c3ffcc 	andi	r3,r3,4095
    8650:	20c6b03a 	or	r3,r4,r3
    8654:	80e0b03a 	or	r16,r16,r3
    8658:	00002106 	br	86e0 <LMS7002M_regs_spi_write+0x23e0>
    }
    if (addr == 0x0404)
    865c:	00c10104 	movi	r3,1028
    8660:	88c0041e 	bne	r17,r3,8674 <LMS7002M_regs_spi_write+0x2374>
    {
        value |= (regs->reg_0x0404_dccorr_avg & 0x7) << 0;
    8664:	10c20017 	ldw	r3,2048(r2)
    8668:	18c001cc 	andi	r3,r3,7
    866c:	80e0b03a 	or	r16,r16,r3
    8670:	00002006 	br	86f4 <LMS7002M_regs_spi_write+0x23f4>
    }
    if (addr == 0x0405)
    8674:	00c10144 	movi	r3,1029
    8678:	88c0071e 	bne	r17,r3,8698 <LMS7002M_regs_spi_write+0x2398>
    {
        value |= (regs->reg_0x0405_gfir1_l & 0x7) << 8;
        value |= (regs->reg_0x0405_gfir1_n & 0xff) << 0;
    867c:	10c20117 	ldw	r3,2052(r2)
    8680:	11020203 	ldbu	r4,2056(r2)
    8684:	18c001cc 	andi	r3,r3,7
    8688:	1806923a 	slli	r3,r3,8
    868c:	1906b03a 	or	r3,r3,r4
    8690:	80e0b03a 	or	r16,r16,r3
    8694:	00002106 	br	871c <LMS7002M_regs_spi_write+0x241c>
    }
    if (addr == 0x0406)
    8698:	00c10184 	movi	r3,1030
    869c:	88c0071e 	bne	r17,r3,86bc <LMS7002M_regs_spi_write+0x23bc>
    {
        value |= (regs->reg_0x0406_gfir2_l & 0x7) << 8;
        value |= (regs->reg_0x0406_gfir2_n & 0xff) << 0;
    86a0:	10c20317 	ldw	r3,2060(r2)
    86a4:	11020403 	ldbu	r4,2064(r2)
    86a8:	18c001cc 	andi	r3,r3,7
    86ac:	1806923a 	slli	r3,r3,8
    86b0:	1906b03a 	or	r3,r3,r4
    86b4:	80e0b03a 	or	r16,r16,r3
    86b8:	00002206 	br	8744 <LMS7002M_regs_spi_write+0x2444>
    }
    if (addr == 0x0407)
    86bc:	00c101c4 	movi	r3,1031
    86c0:	88c0071e 	bne	r17,r3,86e0 <LMS7002M_regs_spi_write+0x23e0>
    {
        value |= (regs->reg_0x0407_gfir3_l & 0x7) << 8;
        value |= (regs->reg_0x0407_gfir3_n & 0xff) << 0;
    86c4:	10c20517 	ldw	r3,2068(r2)
    86c8:	11020603 	ldbu	r4,2072(r2)
    86cc:	18c001cc 	andi	r3,r3,7
    86d0:	1806923a 	slli	r3,r3,8
    86d4:	1906b03a 	or	r3,r3,r4
    86d8:	80e0b03a 	or	r16,r16,r3
    86dc:	00001e06 	br	8758 <LMS7002M_regs_spi_write+0x2458>
    }
    if (addr == 0x0408)
    86e0:	00c10204 	movi	r3,1032
    86e4:	88c0031e 	bne	r17,r3,86f4 <LMS7002M_regs_spi_write+0x23f4>
    {
        value |= (regs->reg_0x0408_agc_k_lsb & 0xffff) << 0;
    86e8:	10c2070b 	ldhu	r3,2076(r2)
    86ec:	80e0b03a 	or	r16,r16,r3
    86f0:	00004406 	br	8804 <LMS7002M_regs_spi_write+0x2504>
    }
    if (addr == 0x0409)
    86f4:	00c10244 	movi	r3,1033
    86f8:	88c0081e 	bne	r17,r3,871c <LMS7002M_regs_spi_write+0x241c>
    {
        value |= (regs->reg_0x0409_agc_adesired & 0xfff) << 4;
        value |= (regs->reg_0x0409_agc_k_msb & 0x3) << 0;
    86fc:	10c20817 	ldw	r3,2080(r2)
    8700:	1806913a 	slli	r3,r3,4
    8704:	193fffcc 	andi	r4,r3,65535
    8708:	10c20917 	ldw	r3,2084(r2)
    870c:	18c000cc 	andi	r3,r3,3
    8710:	20c6b03a 	or	r3,r4,r3
    8714:	80e0b03a 	or	r16,r16,r3
    8718:	00003f06 	br	8818 <LMS7002M_regs_spi_write+0x2518>
    }
    if (addr == 0x040A)
    871c:	00c10284 	movi	r3,1034
    8720:	88c0081e 	bne	r17,r3,8744 <LMS7002M_regs_spi_write+0x2444>
    {
        value |= (regs->reg_0x040a_agc_mode & 0x3) << 12;
        value |= (regs->reg_0x040a_agc_avg & 0x7) << 0;
    8724:	10c20a17 	ldw	r3,2088(r2)
    8728:	18c000cc 	andi	r3,r3,3
    872c:	1808933a 	slli	r4,r3,12
    8730:	10c20b17 	ldw	r3,2092(r2)
    8734:	18c001cc 	andi	r3,r3,7
    8738:	20c6b03a 	or	r3,r4,r3
    873c:	80e0b03a 	or	r16,r16,r3
    8740:	00004306 	br	8850 <LMS7002M_regs_spi_write+0x2550>
    }
    if (addr == 0x040B)
    8744:	00c102c4 	movi	r3,1035
    8748:	88c0031e 	bne	r17,r3,8758 <LMS7002M_regs_spi_write+0x2458>
    {
        value |= (regs->reg_0x040b_dc_reg & 0xffff) << 0;
    874c:	10c20c0b 	ldhu	r3,2096(r2)
    8750:	80e0b03a 	or	r16,r16,r3
    8754:	00004306 	br	8864 <LMS7002M_regs_spi_write+0x2564>
    }
    if (addr == 0x040C)
    8758:	00c10304 	movi	r3,1036
    875c:	88c0291e 	bne	r17,r3,8804 <LMS7002M_regs_spi_write+0x2504>
        value |= (regs->reg_0x040c_gfir3_byp & 0x1) << 5;
        value |= (regs->reg_0x040c_gfir2_byp & 0x1) << 4;
        value |= (regs->reg_0x040c_gfir1_byp & 0x1) << 3;
        value |= (regs->reg_0x040c_dc_byp & 0x1) << 2;
        value |= (regs->reg_0x040c_gc_byp & 0x1) << 1;
        value |= (regs->reg_0x040c_ph_byp & 0x1) << 0;
    8760:	11020d17 	ldw	r4,2100(r2)
    8764:	10c20e17 	ldw	r3,2104(r2)
    8768:	11421217 	ldw	r5,2120(r2)
    876c:	200893ba 	slli	r4,r4,14
    8770:	18c0004c 	andi	r3,r3,1
    8774:	1806937a 	slli	r3,r3,13
    8778:	213fffcc 	andi	r4,r4,65535
    877c:	2940004c 	andi	r5,r5,1
    8780:	20c8b03a 	or	r4,r4,r3
    8784:	10c21617 	ldw	r3,2136(r2)
    8788:	280a913a 	slli	r5,r5,4
    878c:	18c0004c 	andi	r3,r3,1
    8790:	20c6b03a 	or	r3,r4,r3
    8794:	11020f17 	ldw	r4,2108(r2)
    8798:	200891fa 	slli	r4,r4,7
    879c:	21003fcc 	andi	r4,r4,255
    87a0:	1906b03a 	or	r3,r3,r4
    87a4:	11021017 	ldw	r4,2112(r2)
    87a8:	2100004c 	andi	r4,r4,1
    87ac:	200891ba 	slli	r4,r4,6
    87b0:	1906b03a 	or	r3,r3,r4
    87b4:	11021117 	ldw	r4,2116(r2)
    87b8:	2100004c 	andi	r4,r4,1
    87bc:	2008917a 	slli	r4,r4,5
    87c0:	1906b03a 	or	r3,r3,r4
    87c4:	11021317 	ldw	r4,2124(r2)
    87c8:	1946b03a 	or	r3,r3,r5
    87cc:	2100004c 	andi	r4,r4,1
    87d0:	200890fa 	slli	r4,r4,3
    87d4:	1908b03a 	or	r4,r3,r4
    87d8:	10c21417 	ldw	r3,2128(r2)
    87dc:	18c0004c 	andi	r3,r3,1
    87e0:	18c7883a 	add	r3,r3,r3
    87e4:	18c7883a 	add	r3,r3,r3
    87e8:	20c6b03a 	or	r3,r4,r3
    87ec:	11021517 	ldw	r4,2132(r2)
    87f0:	2100004c 	andi	r4,r4,1
    87f4:	2109883a 	add	r4,r4,r4
    87f8:	1906b03a 	or	r3,r3,r4
    87fc:	80e0b03a 	or	r16,r16,r3
    8800:	00001d06 	br	8878 <LMS7002M_regs_spi_write+0x2578>
    }
    if (addr == 0x040e)
    8804:	00c10384 	movi	r3,1038
    8808:	88c0031e 	bne	r17,r3,8818 <LMS7002M_regs_spi_write+0x2518>
    {
        value |= (regs->reg_0x040e_value & 0xffff) << 0;
    880c:	10c2170b 	ldhu	r3,2140(r2)
    8810:	80e0b03a 	or	r16,r16,r3
    8814:	00001d06 	br	888c <LMS7002M_regs_spi_write+0x258c>
    }
    if (addr == 0x0440)
    8818:	00c11004 	movi	r3,1088
    881c:	88c00c1e 	bne	r17,r3,8850 <LMS7002M_regs_spi_write+0x2550>
    {
        value |= (regs->reg_0x0440_dthbit & 0xf) << 5;
        value |= (regs->reg_0x0440_sel & 0xf) << 1;
        value |= (regs->reg_0x0440_mode & 0x1) << 0;
    8820:	10c21817 	ldw	r3,2144(r2)
    8824:	11021917 	ldw	r4,2148(r2)
    8828:	18c003cc 	andi	r3,r3,15
    882c:	180a917a 	slli	r5,r3,5
    8830:	20c003cc 	andi	r3,r4,15
    8834:	11021a17 	ldw	r4,2152(r2)
    8838:	18c7883a 	add	r3,r3,r3
    883c:	28c6b03a 	or	r3,r5,r3
    8840:	2100004c 	andi	r4,r4,1
    8844:	1906b03a 	or	r3,r3,r4
    8848:	80e0b03a 	or	r16,r16,r3
    884c:	00001406 	br	88a0 <LMS7002M_regs_spi_write+0x25a0>
    }
    if (addr == 0x0441)
    8850:	00c11044 	movi	r3,1089
    8854:	88c0031e 	bne	r17,r3,8864 <LMS7002M_regs_spi_write+0x2564>
    {
        value |= (regs->reg_0x0441_pho & 0xffff) << 0;
    8858:	10c21b0b 	ldhu	r3,2156(r2)
    885c:	80e0b03a 	or	r16,r16,r3
    8860:	00001406 	br	88b4 <LMS7002M_regs_spi_write+0x25b4>
    }
    if (addr == 0x0442)
    8864:	00c11084 	movi	r3,1090
    8868:	88c0031e 	bne	r17,r3,8878 <LMS7002M_regs_spi_write+0x2578>
    {
        value |= (regs->reg_0x0442_fcw0_hi & 0xffff) << 0;
    886c:	10c21c0b 	ldhu	r3,2160(r2)
    8870:	80e0b03a 	or	r16,r16,r3
    8874:	00001406 	br	88c8 <LMS7002M_regs_spi_write+0x25c8>
    }
    if (addr == 0x0443)
    8878:	00c110c4 	movi	r3,1091
    887c:	88c0031e 	bne	r17,r3,888c <LMS7002M_regs_spi_write+0x258c>
    {
        value |= (regs->reg_0x0443_fcw0_lo & 0xffff) << 0;
    8880:	10c21d0b 	ldhu	r3,2164(r2)
    8884:	80e0b03a 	or	r16,r16,r3
    8888:	00001406 	br	88dc <LMS7002M_regs_spi_write+0x25dc>
    }
    if (addr == 0x05c0)
    888c:	00c17004 	movi	r3,1472
    8890:	88c0031e 	bne	r17,r3,88a0 <LMS7002M_regs_spi_write+0x25a0>
    {
        value |= (regs->reg_0x05c0_value & 0xffff) << 0;
    8894:	10c21e0b 	ldhu	r3,2168(r2)
    8898:	80e0b03a 	or	r16,r16,r3
    889c:	00001406 	br	88f0 <LMS7002M_regs_spi_write+0x25f0>
    }
    if (addr == 0x05c1)
    88a0:	00c17044 	movi	r3,1473
    88a4:	88c0031e 	bne	r17,r3,88b4 <LMS7002M_regs_spi_write+0x25b4>
    {
        value |= (regs->reg_0x05c1_value & 0xffff) << 0;
    88a8:	10c21f0b 	ldhu	r3,2172(r2)
    88ac:	80e0b03a 	or	r16,r16,r3
    88b0:	00001406 	br	8904 <LMS7002M_regs_spi_write+0x2604>
    }
    if (addr == 0x05c2)
    88b4:	00c17084 	movi	r3,1474
    88b8:	88c0031e 	bne	r17,r3,88c8 <LMS7002M_regs_spi_write+0x25c8>
    {
        value |= (regs->reg_0x05c2_value & 0xffff) << 0;
    88bc:	10c2200b 	ldhu	r3,2176(r2)
    88c0:	80e0b03a 	or	r16,r16,r3
    88c4:	00001406 	br	8918 <LMS7002M_regs_spi_write+0x2618>
    }
    if (addr == 0x05c3)
    88c8:	00c170c4 	movi	r3,1475
    88cc:	88c0031e 	bne	r17,r3,88dc <LMS7002M_regs_spi_write+0x25dc>
    {
        value |= (regs->reg_0x05c3_value & 0xffff) << 0;
    88d0:	10c2210b 	ldhu	r3,2180(r2)
    88d4:	80e0b03a 	or	r16,r16,r3
    88d8:	00001406 	br	892c <LMS7002M_regs_spi_write+0x262c>
    }
    if (addr == 0x05c4)
    88dc:	00c17104 	movi	r3,1476
    88e0:	88c0031e 	bne	r17,r3,88f0 <LMS7002M_regs_spi_write+0x25f0>
    {
        value |= (regs->reg_0x05c4_value & 0xffff) << 0;
    88e4:	10c2220b 	ldhu	r3,2184(r2)
    88e8:	80e0b03a 	or	r16,r16,r3
    88ec:	00001406 	br	8940 <LMS7002M_regs_spi_write+0x2640>
    }
    if (addr == 0x05c5)
    88f0:	00c17144 	movi	r3,1477
    88f4:	88c0031e 	bne	r17,r3,8904 <LMS7002M_regs_spi_write+0x2604>
    {
        value |= (regs->reg_0x05c5_value & 0xffff) << 0;
    88f8:	10c2230b 	ldhu	r3,2188(r2)
    88fc:	80e0b03a 	or	r16,r16,r3
    8900:	00001406 	br	8954 <LMS7002M_regs_spi_write+0x2654>
    }
    if (addr == 0x05c6)
    8904:	00c17184 	movi	r3,1478
    8908:	88c0031e 	bne	r17,r3,8918 <LMS7002M_regs_spi_write+0x2618>
    {
        value |= (regs->reg_0x05c6_value & 0xffff) << 0;
    890c:	10c2240b 	ldhu	r3,2192(r2)
    8910:	80e0b03a 	or	r16,r16,r3
    8914:	00001406 	br	8968 <LMS7002M_regs_spi_write+0x2668>
    }
    if (addr == 0x05c7)
    8918:	00c171c4 	movi	r3,1479
    891c:	88c0031e 	bne	r17,r3,892c <LMS7002M_regs_spi_write+0x262c>
    {
        value |= (regs->reg_0x05c7_value & 0xffff) << 0;
    8920:	10c2250b 	ldhu	r3,2196(r2)
    8924:	80e0b03a 	or	r16,r16,r3
    8928:	00001406 	br	897c <LMS7002M_regs_spi_write+0x267c>
    }
    if (addr == 0x05c8)
    892c:	00c17204 	movi	r3,1480
    8930:	88c0031e 	bne	r17,r3,8940 <LMS7002M_regs_spi_write+0x2640>
    {
        value |= (regs->reg_0x05c8_value & 0xffff) << 0;
    8934:	10c2260b 	ldhu	r3,2200(r2)
    8938:	80e0b03a 	or	r16,r16,r3
    893c:	00001406 	br	8990 <LMS7002M_regs_spi_write+0x2690>
    }
    if (addr == 0x05c9)
    8940:	00c17244 	movi	r3,1481
    8944:	88c0031e 	bne	r17,r3,8954 <LMS7002M_regs_spi_write+0x2654>
    {
        value |= (regs->reg_0x05c9_value & 0xffff) << 0;
    8948:	10c2270b 	ldhu	r3,2204(r2)
    894c:	80e0b03a 	or	r16,r16,r3
    8950:	00001406 	br	89a4 <LMS7002M_regs_spi_write+0x26a4>
    }
    if (addr == 0x05ca)
    8954:	00c17284 	movi	r3,1482
    8958:	88c0031e 	bne	r17,r3,8968 <LMS7002M_regs_spi_write+0x2668>
    {
        value |= (regs->reg_0x05ca_value & 0xffff) << 0;
    895c:	10c2280b 	ldhu	r3,2208(r2)
    8960:	80e0b03a 	or	r16,r16,r3
    8964:	00001406 	br	89b8 <LMS7002M_regs_spi_write+0x26b8>
    }
    if (addr == 0x05cb)
    8968:	00c172c4 	movi	r3,1483
    896c:	88c0031e 	bne	r17,r3,897c <LMS7002M_regs_spi_write+0x267c>
    {
        value |= (regs->reg_0x05cb_value & 0xffff) << 0;
    8970:	10c2290b 	ldhu	r3,2212(r2)
    8974:	80e0b03a 	or	r16,r16,r3
    8978:	00001406 	br	89cc <LMS7002M_regs_spi_write+0x26cc>
    }
    if (addr == 0x05cc)
    897c:	00c17304 	movi	r3,1484
    8980:	88c0031e 	bne	r17,r3,8990 <LMS7002M_regs_spi_write+0x2690>
    {
        value |= (regs->reg_0x05cc_value & 0xffff) << 0;
    8984:	10c22a0b 	ldhu	r3,2216(r2)
    8988:	80e0b03a 	or	r16,r16,r3
    898c:	00001406 	br	89e0 <LMS7002M_regs_spi_write+0x26e0>
    }
    if (addr == 0x0600)
    8990:	00c18004 	movi	r3,1536
    8994:	88c0031e 	bne	r17,r3,89a4 <LMS7002M_regs_spi_write+0x26a4>
    {
        value |= (regs->reg_0x0600_value & 0xffff) << 0;
    8998:	10c22b0b 	ldhu	r3,2220(r2)
    899c:	80e0b03a 	or	r16,r16,r3
    89a0:	00001306 	br	89f0 <LMS7002M_regs_spi_write+0x26f0>
    }
    if (addr == 0x0601)
    89a4:	00c18044 	movi	r3,1537
    89a8:	88c0031e 	bne	r17,r3,89b8 <LMS7002M_regs_spi_write+0x26b8>
    {
        value |= (regs->reg_0x0601_value & 0xffff) << 0;
    89ac:	10c22c0b 	ldhu	r3,2224(r2)
    89b0:	80e0b03a 	or	r16,r16,r3
    89b4:	00001206 	br	8a00 <LMS7002M_regs_spi_write+0x2700>
    }
    if (addr == 0x0602)
    89b8:	00c18084 	movi	r3,1538
    89bc:	88c0031e 	bne	r17,r3,89cc <LMS7002M_regs_spi_write+0x26cc>
    {
        value |= (regs->reg_0x0602_value & 0xffff) << 0;
    89c0:	10c22d0b 	ldhu	r3,2228(r2)
    89c4:	80e0b03a 	or	r16,r16,r3
    89c8:	00001106 	br	8a10 <LMS7002M_regs_spi_write+0x2710>
    }
    if (addr == 0x0603)
    89cc:	00c180c4 	movi	r3,1539
    89d0:	88c0031e 	bne	r17,r3,89e0 <LMS7002M_regs_spi_write+0x26e0>
    {
        value |= (regs->reg_0x0603_value & 0xffff) << 0;
    89d4:	10c22e0b 	ldhu	r3,2232(r2)
    89d8:	80e0b03a 	or	r16,r16,r3
    89dc:	00001006 	br	8a20 <LMS7002M_regs_spi_write+0x2720>
    }
    if (addr == 0x0604)
    89e0:	00c18104 	movi	r3,1540
    89e4:	88c0021e 	bne	r17,r3,89f0 <LMS7002M_regs_spi_write+0x26f0>
    {
        value |= (regs->reg_0x0604_value & 0xffff) << 0;
    89e8:	10822f0b 	ldhu	r2,2236(r2)
    89ec:	00000f06 	br	8a2c <LMS7002M_regs_spi_write+0x272c>
    }
    if (addr == 0x0605)
    89f0:	00c18144 	movi	r3,1541
    89f4:	88c0021e 	bne	r17,r3,8a00 <LMS7002M_regs_spi_write+0x2700>
    {
        value |= (regs->reg_0x0605_value & 0xffff) << 0;
    89f8:	1082300b 	ldhu	r2,2240(r2)
    89fc:	00000b06 	br	8a2c <LMS7002M_regs_spi_write+0x272c>
    }
    if (addr == 0x0606)
    8a00:	00c18184 	movi	r3,1542
    8a04:	88c0021e 	bne	r17,r3,8a10 <LMS7002M_regs_spi_write+0x2710>
    {
        value |= (regs->reg_0x0606_value & 0xffff) << 0;
    8a08:	1082310b 	ldhu	r2,2244(r2)
    8a0c:	00000706 	br	8a2c <LMS7002M_regs_spi_write+0x272c>
    }
    if (addr == 0x0640)
    8a10:	00c19004 	movi	r3,1600
    8a14:	88c0021e 	bne	r17,r3,8a20 <LMS7002M_regs_spi_write+0x2720>
    {
        value |= (regs->reg_0x0640_value & 0xffff) << 0;
    8a18:	1082320b 	ldhu	r2,2248(r2)
    8a1c:	00000306 	br	8a2c <LMS7002M_regs_spi_write+0x272c>
    }
    if (addr == 0x0641)
    8a20:	00c19044 	movi	r3,1601
    8a24:	88c0021e 	bne	r17,r3,8a30 <LMS7002M_regs_spi_write+0x2730>
    {
        value |= (regs->reg_0x0641_value & 0xffff) << 0;
    8a28:	1082330b 	ldhu	r2,2252(r2)
    8a2c:	80a0b03a 	or	r16,r16,r2
    LMS7002M_spi_write(self, addr, value);
    8a30:	800d883a 	mov	r6,r16
    8a34:	880b883a 	mov	r5,r17
    8a38:	9009883a 	mov	r4,r18
    8a3c:	00062b80 	call	62b8 <LMS7002M_spi_write>

    //for CHAB mode: duplicate to the CHB register shadow
    if (self->regs->reg_0x0020_mac == REG_0X0020_MAC_CHAB)
    8a40:	90846917 	ldw	r2,4516(r18)
    8a44:	10c00e17 	ldw	r3,56(r2)
    8a48:	008000c4 	movi	r2,3
    8a4c:	1880091e 	bne	r3,r2,8a74 <LMS7002M_regs_spi_write+0x2774>
    {
        LMS7002M_regs_set(&self->_regs[1], addr, value);
    8a50:	800d883a 	mov	r6,r16
    8a54:	880b883a 	mov	r5,r17
    8a58:	91023504 	addi	r4,r18,2260
    }
}
    8a5c:	dfc00317 	ldw	ra,12(sp)
    8a60:	dc800217 	ldw	r18,8(sp)
    8a64:	dc400117 	ldw	r17,4(sp)
    8a68:	dc000017 	ldw	r16,0(sp)
    8a6c:	dec00404 	addi	sp,sp,16
    LMS7002M_spi_write(self, addr, value);

    //for CHAB mode: duplicate to the CHB register shadow
    if (self->regs->reg_0x0020_mac == REG_0X0020_MAC_CHAB)
    {
        LMS7002M_regs_set(&self->_regs[1], addr, value);
    8a70:	00039141 	jmpi	3914 <LMS7002M_regs_set>
    }
}
    8a74:	dfc00317 	ldw	ra,12(sp)
    8a78:	dc800217 	ldw	r18,8(sp)
    8a7c:	dc400117 	ldw	r17,4(sp)
    8a80:	dc000017 	ldw	r16,0(sp)
    8a84:	dec00404 	addi	sp,sp,16
    8a88:	f800283a 	ret

00008a8c <LMS7002M_regs_spi_read>:

void LMS7002M_regs_spi_read(LMS7002M_t *self, const int addr)
{
    8a8c:	defffd04 	addi	sp,sp,-12
    8a90:	dc000015 	stw	r16,0(sp)
    LMS7002M_regs_set(self->regs, addr, LMS7002M_spi_read(self, addr));
    8a94:	24046917 	ldw	r16,4516(r4)
        LMS7002M_regs_set(&self->_regs[1], addr, value);
    }
}

void LMS7002M_regs_spi_read(LMS7002M_t *self, const int addr)
{
    8a98:	dc400115 	stw	r17,4(sp)
    8a9c:	dfc00215 	stw	ra,8(sp)
    8aa0:	2823883a 	mov	r17,r5
    LMS7002M_regs_set(self->regs, addr, LMS7002M_spi_read(self, addr));
    8aa4:	00062d40 	call	62d4 <LMS7002M_spi_read>
    8aa8:	100d883a 	mov	r6,r2
    8aac:	880b883a 	mov	r5,r17
    8ab0:	8009883a 	mov	r4,r16
}
    8ab4:	dfc00217 	ldw	ra,8(sp)
    8ab8:	dc400117 	ldw	r17,4(sp)
    8abc:	dc000017 	ldw	r16,0(sp)
    8ac0:	dec00304 	addi	sp,sp,12
    }
}

void LMS7002M_regs_spi_read(LMS7002M_t *self, const int addr)
{
    LMS7002M_regs_set(self->regs, addr, LMS7002M_spi_read(self, addr));
    8ac4:	00039141 	jmpi	3914 <LMS7002M_regs_set>

00008ac8 <LMS7002M_regs>:
}

LMS7002M_regs_t *LMS7002M_regs(LMS7002M_t *self)
{
    return self->regs;
}
    8ac8:	20846917 	ldw	r2,4516(r4)
    8acc:	f800283a 	ret

00008ad0 <LMS7002M_regs_to_rfic>:

void LMS7002M_regs_to_rfic(LMS7002M_t *self)
{
    8ad0:	defffc04 	addi	sp,sp,-16
    8ad4:	dc400115 	stw	r17,4(sp)
    LMS7002M_set_mac_ch(self, LMS_CHA);
    8ad8:	01401044 	movi	r5,65
    for (const int *addrp = LMS7002M_regs_addrs(); *addrp != 0; addrp++)
    8adc:	044000f4 	movhi	r17,3
{
    return self->regs;
}

void LMS7002M_regs_to_rfic(LMS7002M_t *self)
{
    8ae0:	dc000015 	stw	r16,0(sp)
    8ae4:	dfc00315 	stw	ra,12(sp)
    8ae8:	dc800215 	stw	r18,8(sp)
    8aec:	2021883a 	mov	r16,r4
    LMS7002M_set_mac_ch(self, LMS_CHA);
    for (const int *addrp = LMS7002M_regs_addrs(); *addrp != 0; addrp++)
    8af0:	8c63b804 	addi	r17,r17,-28960
    return self->regs;
}

void LMS7002M_regs_to_rfic(LMS7002M_t *self)
{
    LMS7002M_set_mac_ch(self, LMS_CHA);
    8af4:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>
    for (const int *addrp = LMS7002M_regs_addrs(); *addrp != 0; addrp++)
    8af8:	89400017 	ldw	r5,0(r17)
    8afc:	28000426 	beq	r5,zero,8b10 <LMS7002M_regs_to_rfic+0x40>
    {
        LMS7002M_regs_spi_write(self, *addrp);
    8b00:	8009883a 	mov	r4,r16
    8b04:	00063000 	call	6300 <LMS7002M_regs_spi_write>
}

void LMS7002M_regs_to_rfic(LMS7002M_t *self)
{
    LMS7002M_set_mac_ch(self, LMS_CHA);
    for (const int *addrp = LMS7002M_regs_addrs(); *addrp != 0; addrp++)
    8b08:	8c400104 	addi	r17,r17,4
    8b0c:	003ffa06 	br	8af8 <__alt_data_end+0xfffca2f8>
    {
        LMS7002M_regs_spi_write(self, *addrp);
    }

    LMS7002M_set_mac_ch(self, LMS_CHB);
    8b10:	01401084 	movi	r5,66
    8b14:	8009883a 	mov	r4,r16
    for (const int *addrp = LMS7002M_regs_addrs(); *addrp != 0; addrp++)
    8b18:	044000f4 	movhi	r17,3
    for (const int *addrp = LMS7002M_regs_addrs(); *addrp != 0; addrp++)
    {
        LMS7002M_regs_spi_write(self, *addrp);
    }

    LMS7002M_set_mac_ch(self, LMS_CHB);
    8b1c:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>
    for (const int *addrp = LMS7002M_regs_addrs(); *addrp != 0; addrp++)
    8b20:	8c63b804 	addi	r17,r17,-28960
    {
        //ignore registers that do not depend on MAC
        if (*addrp < 0x0100) continue;
    8b24:	04803fc4 	movi	r18,255
    {
        LMS7002M_regs_spi_write(self, *addrp);
    }

    LMS7002M_set_mac_ch(self, LMS_CHB);
    for (const int *addrp = LMS7002M_regs_addrs(); *addrp != 0; addrp++)
    8b28:	89400017 	ldw	r5,0(r17)
    8b2c:	28000526 	beq	r5,zero,8b44 <LMS7002M_regs_to_rfic+0x74>
    {
        //ignore registers that do not depend on MAC
        if (*addrp < 0x0100) continue;
    8b30:	9140020e 	bge	r18,r5,8b3c <LMS7002M_regs_to_rfic+0x6c>

        LMS7002M_regs_spi_write(self, *addrp);
    8b34:	8009883a 	mov	r4,r16
    8b38:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    {
        LMS7002M_regs_spi_write(self, *addrp);
    }

    LMS7002M_set_mac_ch(self, LMS_CHB);
    for (const int *addrp = LMS7002M_regs_addrs(); *addrp != 0; addrp++)
    8b3c:	8c400104 	addi	r17,r17,4
    8b40:	003ff906 	br	8b28 <__alt_data_end+0xfffca328>
        LMS7002M_regs_spi_write(self, *addrp);
    }

    //ensure that we cache the chips actual version register
    //used in the codebase to handle hardware rev differences
    LMS7002M_regs_spi_read(self, 0x002f);
    8b44:	01400bc4 	movi	r5,47
    8b48:	8009883a 	mov	r4,r16
}
    8b4c:	dfc00317 	ldw	ra,12(sp)
    8b50:	dc800217 	ldw	r18,8(sp)
    8b54:	dc400117 	ldw	r17,4(sp)
    8b58:	dc000017 	ldw	r16,0(sp)
    8b5c:	dec00404 	addi	sp,sp,16
        LMS7002M_regs_spi_write(self, *addrp);
    }

    //ensure that we cache the chips actual version register
    //used in the codebase to handle hardware rev differences
    LMS7002M_regs_spi_read(self, 0x002f);
    8b60:	0008a8c1 	jmpi	8a8c <LMS7002M_regs_spi_read>

00008b64 <LMS7002M_rfic_to_regs>:
}

void LMS7002M_rfic_to_regs(LMS7002M_t *self)
{
    8b64:	defffd04 	addi	sp,sp,-12
    8b68:	dc000015 	stw	r16,0(sp)
    LMS7002M_set_mac_ch(self, LMS_CHA);
    8b6c:	01401044 	movi	r5,65
    for (const int *addrp = LMS7002M_regs_addrs(); *addrp != 0; addrp++)
    8b70:	040000f4 	movhi	r16,3
    //used in the codebase to handle hardware rev differences
    LMS7002M_regs_spi_read(self, 0x002f);
}

void LMS7002M_rfic_to_regs(LMS7002M_t *self)
{
    8b74:	dc400115 	stw	r17,4(sp)
    8b78:	dfc00215 	stw	ra,8(sp)
    8b7c:	2023883a 	mov	r17,r4
    LMS7002M_set_mac_ch(self, LMS_CHA);
    for (const int *addrp = LMS7002M_regs_addrs(); *addrp != 0; addrp++)
    8b80:	8423b804 	addi	r16,r16,-28960
    LMS7002M_regs_spi_read(self, 0x002f);
}

void LMS7002M_rfic_to_regs(LMS7002M_t *self)
{
    LMS7002M_set_mac_ch(self, LMS_CHA);
    8b84:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>
    for (const int *addrp = LMS7002M_regs_addrs(); *addrp != 0; addrp++)
    8b88:	81400017 	ldw	r5,0(r16)
    8b8c:	28000426 	beq	r5,zero,8ba0 <LMS7002M_rfic_to_regs+0x3c>
    {
        LMS7002M_regs_spi_read(self, *addrp);
    8b90:	8809883a 	mov	r4,r17
    8b94:	0008a8c0 	call	8a8c <LMS7002M_regs_spi_read>
}

void LMS7002M_rfic_to_regs(LMS7002M_t *self)
{
    LMS7002M_set_mac_ch(self, LMS_CHA);
    for (const int *addrp = LMS7002M_regs_addrs(); *addrp != 0; addrp++)
    8b98:	84000104 	addi	r16,r16,4
    8b9c:	003ffa06 	br	8b88 <__alt_data_end+0xfffca388>
    {
        LMS7002M_regs_spi_read(self, *addrp);
    }

    LMS7002M_set_mac_ch(self, LMS_CHB);
    8ba0:	01401084 	movi	r5,66
    8ba4:	8809883a 	mov	r4,r17
    for (const int *addrp = LMS7002M_regs_addrs(); *addrp != 0; addrp++)
    8ba8:	040000f4 	movhi	r16,3
    for (const int *addrp = LMS7002M_regs_addrs(); *addrp != 0; addrp++)
    {
        LMS7002M_regs_spi_read(self, *addrp);
    }

    LMS7002M_set_mac_ch(self, LMS_CHB);
    8bac:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>
    for (const int *addrp = LMS7002M_regs_addrs(); *addrp != 0; addrp++)
    8bb0:	8423b804 	addi	r16,r16,-28960
    8bb4:	81400017 	ldw	r5,0(r16)
    8bb8:	28000426 	beq	r5,zero,8bcc <LMS7002M_rfic_to_regs+0x68>
    {
        LMS7002M_regs_spi_read(self, *addrp);
    8bbc:	8809883a 	mov	r4,r17
    8bc0:	0008a8c0 	call	8a8c <LMS7002M_regs_spi_read>
    {
        LMS7002M_regs_spi_read(self, *addrp);
    }

    LMS7002M_set_mac_ch(self, LMS_CHB);
    for (const int *addrp = LMS7002M_regs_addrs(); *addrp != 0; addrp++)
    8bc4:	84000104 	addi	r16,r16,4
    8bc8:	003ffa06 	br	8bb4 <__alt_data_end+0xfffca3b4>
    {
        LMS7002M_regs_spi_read(self, *addrp);
    }
}
    8bcc:	dfc00217 	ldw	ra,8(sp)
    8bd0:	dc400117 	ldw	r17,4(sp)
    8bd4:	dc000017 	ldw	r16,0(sp)
    8bd8:	dec00304 	addi	sp,sp,12
    8bdc:	f800283a 	ret

00008be0 <LMS7002M_dump_ini>:

int LMS7002M_dump_ini(LMS7002M_t *self, const char *path)
{
    8be0:	defff904 	addi	sp,sp,-28
    8be4:	dc400115 	stw	r17,4(sp)
    8be8:	2023883a 	mov	r17,r4
    8bec:	2809883a 	mov	r4,r5
    FILE *p = fopen(path, "w");
    8bf0:	014000f4 	movhi	r5,3
    8bf4:	29648a04 	addi	r5,r5,-28120
        LMS7002M_regs_spi_read(self, *addrp);
    }
}

int LMS7002M_dump_ini(LMS7002M_t *self, const char *path)
{
    8bf8:	dfc00615 	stw	ra,24(sp)
    8bfc:	dd400515 	stw	r21,20(sp)
    8c00:	dd000415 	stw	r20,16(sp)
    8c04:	dcc00315 	stw	r19,12(sp)
    8c08:	dc800215 	stw	r18,8(sp)
    8c0c:	dc000015 	stw	r16,0(sp)
    FILE *p = fopen(path, "w");
    8c10:	0010bd40 	call	10bd4 <fopen>
    if (p == NULL) return -1;
    8c14:	10009726 	beq	r2,zero,8e74 <LMS7002M_dump_ini+0x294>

    fprintf(p, "[FILE INFO]\n");
    8c18:	010000f4 	movhi	r4,3
    8c1c:	100b883a 	mov	r5,r2
    8c20:	21235104 	addi	r4,r4,-29372
    8c24:	1021883a 	mov	r16,r2
    8c28:	0010cd40 	call	10cd4 <fputs>
    fprintf(p, "type=LMS7002 configuration\n");
    8c2c:	010000f4 	movhi	r4,3
    8c30:	800b883a 	mov	r5,r16
    8c34:	21235504 	addi	r4,r4,-29356
    8c38:	0010cd40 	call	10cd4 <fputs>
    fprintf(p, "version=1\n");
    8c3c:	010000f4 	movhi	r4,3
    8c40:	800b883a 	mov	r5,r16
    8c44:	21235c04 	addi	r4,r4,-29328
    8c48:	0010cd40 	call	10cd4 <fputs>

    fprintf(p, "[Frequencies]\n");
    8c4c:	010000f4 	movhi	r4,3
    8c50:	800b883a 	mov	r5,r16
    8c54:	21235f04 	addi	r4,r4,-29316
    8c58:	0010cd40 	call	10cd4 <fputs>
    fprintf(p, "CGEN frequency MHz=%f\n", self->cgen_freq/1e6);
    8c5c:	89046a17 	ldw	r4,4520(r17)
    8c60:	89446b17 	ldw	r5,4524(r17)
    8c64:	01d04bf4 	movhi	r7,16687
    8c68:	000d883a 	mov	r6,zero
    8c6c:	39e12004 	addi	r7,r7,-31616
    8c70:	002634c0 	call	2634c <__divdf3>
    8c74:	014000f4 	movhi	r5,3
    8c78:	180f883a 	mov	r7,r3
    8c7c:	100d883a 	mov	r6,r2
    8c80:	29636304 	addi	r5,r5,-29300
    8c84:	8009883a 	mov	r4,r16
    8c88:	0010c140 	call	10c14 <fprintf>
    fprintf(p, "SXR frequency MHz=%f\n", self->sxr_freq/1e6);
    8c8c:	89046c17 	ldw	r4,4528(r17)
    8c90:	89446d17 	ldw	r5,4532(r17)
    8c94:	01d04bf4 	movhi	r7,16687
    8c98:	000d883a 	mov	r6,zero
    8c9c:	39e12004 	addi	r7,r7,-31616
    8ca0:	002634c0 	call	2634c <__divdf3>
    8ca4:	014000f4 	movhi	r5,3
    8ca8:	180f883a 	mov	r7,r3
    8cac:	100d883a 	mov	r6,r2
    8cb0:	29636904 	addi	r5,r5,-29276
    8cb4:	8009883a 	mov	r4,r16
    8cb8:	0010c140 	call	10c14 <fprintf>
    fprintf(p, "SXT frequency MHz=%f\n", self->sxt_freq/1e6);
    8cbc:	89046e17 	ldw	r4,4536(r17)
    8cc0:	89446f17 	ldw	r5,4540(r17)
    8cc4:	01d04bf4 	movhi	r7,16687
    8cc8:	000d883a 	mov	r6,zero
    8ccc:	39e12004 	addi	r7,r7,-31616
    8cd0:	002634c0 	call	2634c <__divdf3>
    8cd4:	014000f4 	movhi	r5,3
    8cd8:	100d883a 	mov	r6,r2
    8cdc:	180f883a 	mov	r7,r3
    8ce0:	29636f04 	addi	r5,r5,-29252
    8ce4:	8009883a 	mov	r4,r16
    8ce8:	0010c140 	call	10c14 <fprintf>

    size_t i = 0;
    const int *addrs = LMS7002M_regs_addrs();

    fprintf(p, "[LMS7002 registers ch.A]\n");
    8cec:	010000f4 	movhi	r4,3
    8cf0:	800b883a 	mov	r5,r16
    8cf4:	21237504 	addi	r4,r4,-29228
    8cf8:	0010cd40 	call	10cd4 <fputs>
    LMS7002M_set_mac_ch(self, LMS_CHA);
    8cfc:	01401044 	movi	r5,65
    8d00:	8809883a 	mov	r4,r17
    i = 0;
    while (addrs[i] != 0x0000)
    8d04:	054000f4 	movhi	r21,3

    size_t i = 0;
    const int *addrs = LMS7002M_regs_addrs();

    fprintf(p, "[LMS7002 registers ch.A]\n");
    LMS7002M_set_mac_ch(self, LMS_CHA);
    8d08:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>
    i = 0;
    while (addrs[i] != 0x0000)
    8d0c:	0027883a 	mov	r19,zero
    8d10:	ad63b804 	addi	r21,r21,-28960
    8d14:	9cc00104 	addi	r19,r19,4
    8d18:	9d45883a 	add	r2,r19,r21
    8d1c:	14bfff17 	ldw	r18,-4(r2)
    8d20:	050000f4 	movhi	r20,3
    8d24:	a523b804 	addi	r20,r20,-28960
    8d28:	90000a26 	beq	r18,zero,8d54 <LMS7002M_dump_ini+0x174>
    {
        fprintf(p, "0x%04x=0x%04x\n", addrs[i], LMS7002M_spi_read(self, addrs[i]));
    8d2c:	900b883a 	mov	r5,r18
    8d30:	8809883a 	mov	r4,r17
    8d34:	00062d40 	call	62d4 <LMS7002M_spi_read>
    8d38:	014000f4 	movhi	r5,3
    8d3c:	100f883a 	mov	r7,r2
    8d40:	900d883a 	mov	r6,r18
    8d44:	29637c04 	addi	r5,r5,-29200
    8d48:	8009883a 	mov	r4,r16
    8d4c:	0010c140 	call	10c14 <fprintf>
    8d50:	003ff006 	br	8d14 <__alt_data_end+0xfffca514>
        i++;
    }

    fprintf(p, "[LMS7002 registers ch.B]\n");
    8d54:	010000f4 	movhi	r4,3
    8d58:	800b883a 	mov	r5,r16
    8d5c:	21238004 	addi	r4,r4,-29184
    8d60:	0010cd40 	call	10cd4 <fputs>
    LMS7002M_set_mac_ch(self, LMS_CHB);
    8d64:	01401084 	movi	r5,66
    8d68:	8809883a 	mov	r4,r17
    8d6c:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>
    i = 0;
    while (addrs[i] != 0x0000)
    8d70:	0027883a 	mov	r19,zero
    8d74:	9cc00104 	addi	r19,r19,4
    8d78:	9d05883a 	add	r2,r19,r20
    8d7c:	14bfff17 	ldw	r18,-4(r2)
    8d80:	90000a26 	beq	r18,zero,8dac <LMS7002M_dump_ini+0x1cc>
    {
        fprintf(p, "0x%04x=0x%04x\n", addrs[i], LMS7002M_spi_read(self, addrs[i]));
    8d84:	900b883a 	mov	r5,r18
    8d88:	8809883a 	mov	r4,r17
    8d8c:	00062d40 	call	62d4 <LMS7002M_spi_read>
    8d90:	014000f4 	movhi	r5,3
    8d94:	100f883a 	mov	r7,r2
    8d98:	900d883a 	mov	r6,r18
    8d9c:	29637c04 	addi	r5,r5,-29200
    8da0:	8009883a 	mov	r4,r16
    8da4:	0010c140 	call	10c14 <fprintf>
    8da8:	003ff206 	br	8d74 <__alt_data_end+0xfffca574>
        i++;
    }

    fprintf(p, "[Reference clocks]\n");
    8dac:	010000f4 	movhi	r4,3
    8db0:	800b883a 	mov	r5,r16
    8db4:	21238704 	addi	r4,r4,-29156
    8db8:	0010cd40 	call	10cd4 <fputs>
    fprintf(p, "CGEN reference frequency MHz=%f\n", self->cgen_fref/1e6);
    8dbc:	89047017 	ldw	r4,4544(r17)
    8dc0:	89447117 	ldw	r5,4548(r17)
    8dc4:	01d04bf4 	movhi	r7,16687
    8dc8:	000d883a 	mov	r6,zero
    8dcc:	39e12004 	addi	r7,r7,-31616
    8dd0:	002634c0 	call	2634c <__divdf3>
    8dd4:	014000f4 	movhi	r5,3
    8dd8:	180f883a 	mov	r7,r3
    8ddc:	8009883a 	mov	r4,r16
    8de0:	100d883a 	mov	r6,r2
    8de4:	29638c04 	addi	r5,r5,-29136
    8de8:	0010c140 	call	10c14 <fprintf>
    fprintf(p, "SXR reference frequency MHz=%f\n", self->sxr_fref/1e6);
    8dec:	89047217 	ldw	r4,4552(r17)
    8df0:	89447317 	ldw	r5,4556(r17)
    8df4:	01d04bf4 	movhi	r7,16687
    8df8:	000d883a 	mov	r6,zero
    8dfc:	39e12004 	addi	r7,r7,-31616
    8e00:	002634c0 	call	2634c <__divdf3>
    8e04:	014000f4 	movhi	r5,3
    8e08:	180f883a 	mov	r7,r3
    8e0c:	8009883a 	mov	r4,r16
    8e10:	100d883a 	mov	r6,r2
    8e14:	29639504 	addi	r5,r5,-29100
    8e18:	0010c140 	call	10c14 <fprintf>
    fprintf(p, "SXT reference frequency MHz=%f\n", self->sxt_fref/1e6);
    8e1c:	89047417 	ldw	r4,4560(r17)
    8e20:	89447517 	ldw	r5,4564(r17)
    8e24:	01d04bf4 	movhi	r7,16687
    8e28:	000d883a 	mov	r6,zero
    8e2c:	39e12004 	addi	r7,r7,-31616
    8e30:	002634c0 	call	2634c <__divdf3>
    8e34:	014000f4 	movhi	r5,3
    8e38:	8009883a 	mov	r4,r16
    8e3c:	100d883a 	mov	r6,r2
    8e40:	180f883a 	mov	r7,r3
    8e44:	29639d04 	addi	r5,r5,-29068
    8e48:	0010c140 	call	10c14 <fprintf>

    return fclose(p);
    8e4c:	8009883a 	mov	r4,r16
}
    8e50:	dfc00617 	ldw	ra,24(sp)
    8e54:	dd400517 	ldw	r21,20(sp)
    8e58:	dd000417 	ldw	r20,16(sp)
    8e5c:	dcc00317 	ldw	r19,12(sp)
    8e60:	dc800217 	ldw	r18,8(sp)
    8e64:	dc400117 	ldw	r17,4(sp)
    8e68:	dc000017 	ldw	r16,0(sp)
    8e6c:	dec00704 	addi	sp,sp,28
    fprintf(p, "[Reference clocks]\n");
    fprintf(p, "CGEN reference frequency MHz=%f\n", self->cgen_fref/1e6);
    fprintf(p, "SXR reference frequency MHz=%f\n", self->sxr_fref/1e6);
    fprintf(p, "SXT reference frequency MHz=%f\n", self->sxt_fref/1e6);

    return fclose(p);
    8e70:	00104741 	jmpi	10474 <fclose>
}
    8e74:	00bfffc4 	movi	r2,-1
    8e78:	dfc00617 	ldw	ra,24(sp)
    8e7c:	dd400517 	ldw	r21,20(sp)
    8e80:	dd000417 	ldw	r20,16(sp)
    8e84:	dcc00317 	ldw	r19,12(sp)
    8e88:	dc800217 	ldw	r18,8(sp)
    8e8c:	dc400117 	ldw	r17,4(sp)
    8e90:	dc000017 	ldw	r16,0(sp)
    8e94:	dec00704 	addi	sp,sp,28
    8e98:	f800283a 	ret

00008e9c <LMS7002M_load_ini>:

int LMS7002M_load_ini(LMS7002M_t *self, const char *path)
{
    8e9c:	defffa04 	addi	sp,sp,-24
    8ea0:	dc400315 	stw	r17,12(sp)
    8ea4:	2023883a 	mov	r17,r4
    8ea8:	2809883a 	mov	r4,r5
    FILE *p = fopen(path, "r");
    8eac:	014000f4 	movhi	r5,3
    8eb0:	2963a504 	addi	r5,r5,-29036

    return fclose(p);
}

int LMS7002M_load_ini(LMS7002M_t *self, const char *path)
{
    8eb4:	dfc00515 	stw	ra,20(sp)
    8eb8:	dc800415 	stw	r18,16(sp)
    8ebc:	dc000215 	stw	r16,8(sp)
    FILE *p = fopen(path, "r");
    8ec0:	0010bd40 	call	10bd4 <fopen>
    if (p == NULL) return -1;
    8ec4:	10002c26 	beq	r2,zero,8f78 <LMS7002M_load_ini+0xdc>
    8ec8:	04801044 	movi	r18,65
            {
                //LMS7_logf(LMS7_INFO, "Found section %s", line);
                write_reg_ok = true;
                chan = LMS_CHB;
            }
            else write_reg_ok = false;
    8ecc:	0021883a 	mov	r16,zero
            line[ret-1] = '\0'; //strip newline
            ret--;
        }

        //parse ini sections
        if (line[0] == '[')
    8ed0:	0005883a 	mov	r2,zero
    8ed4:	10c00007 	ldb	r3,0(r2)
    8ed8:	008016c4 	movi	r2,91
    8edc:	18800f1e 	bne	r3,r2,8f1c <LMS7002M_load_ini+0x80>
        {
            if (strcmp(line, "[LMS7002 registers ch.A]") == 0)
    8ee0:	014000f4 	movhi	r5,3
    8ee4:	2963a604 	addi	r5,r5,-29032
    8ee8:	0009883a 	mov	r4,zero
    8eec:	00136840 	call	13684 <strcmp>
    8ef0:	1000021e 	bne	r2,zero,8efc <LMS7002M_load_ini+0x60>
            {
                //LMS7_logf(LMS7_INFO, "Found section %s", line);
                write_reg_ok = true;
                chan = LMS_CHA;
    8ef4:	04801044 	movi	r18,65
    8ef8:	00000606 	br	8f14 <LMS7002M_load_ini+0x78>
            }
            else if (strcmp(line, "[LMS7002 registers ch.B]") == 0)
    8efc:	014000f4 	movhi	r5,3
    8f00:	2963ad04 	addi	r5,r5,-29004
    8f04:	0009883a 	mov	r4,zero
    8f08:	00136840 	call	13684 <strcmp>
    8f0c:	103fef1e 	bne	r2,zero,8ecc <__alt_data_end+0xfffca6cc>
            {
                //LMS7_logf(LMS7_INFO, "Found section %s", line);
                write_reg_ok = true;
                chan = LMS_CHB;
    8f10:	04801084 	movi	r18,66
                chan = LMS_CHA;
            }
            else if (strcmp(line, "[LMS7002 registers ch.B]") == 0)
            {
                //LMS7_logf(LMS7_INFO, "Found section %s", line);
                write_reg_ok = true;
    8f14:	04000044 	movi	r16,1
    8f18:	003fed06 	br	8ed0 <__alt_data_end+0xfffca6d0>
            }
            else write_reg_ok = false;
        }

        //parse values
        else if (write_reg_ok)
    8f1c:	80803fcc 	andi	r2,r16,255
    8f20:	103feb26 	beq	r2,zero,8ed0 <__alt_data_end+0xfffca6d0>
        {
            unsigned int addr = 0, value = 0;
            ret = sscanf(line, "0x%04x=0x%04x", &addr, &value);
    8f24:	014000f4 	movhi	r5,3
    8f28:	d80f883a 	mov	r7,sp
    8f2c:	d9800104 	addi	r6,sp,4
    8f30:	2963b404 	addi	r5,r5,-28976
    8f34:	0009883a 	mov	r4,zero
        }

        //parse values
        else if (write_reg_ok)
        {
            unsigned int addr = 0, value = 0;
    8f38:	d8000115 	stw	zero,4(sp)
    8f3c:	d8000015 	stw	zero,0(sp)
            ret = sscanf(line, "0x%04x=0x%04x", &addr, &value);
    8f40:	00134540 	call	13454 <sscanf>
            if (ret > 0)
    8f44:	00bfe20e 	bge	zero,r2,8ed0 <__alt_data_end+0xfffca6d0>
            {
                LMS7002M_set_mac_ch(self, chan);
    8f48:	900b883a 	mov	r5,r18
    8f4c:	8809883a 	mov	r4,r17
    8f50:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>
                LMS7002M_spi_write(self, addr, value);
    8f54:	d9800017 	ldw	r6,0(sp)
    8f58:	d9400117 	ldw	r5,4(sp)
    8f5c:	8809883a 	mov	r4,r17
    8f60:	00062b80 	call	62b8 <LMS7002M_spi_write>
                LMS7002M_regs_set(self->regs, addr, value);
    8f64:	d9800017 	ldw	r6,0(sp)
    8f68:	d9400117 	ldw	r5,4(sp)
    8f6c:	89046917 	ldw	r4,4516(r17)
    8f70:	00039140 	call	3914 <LMS7002M_regs_set>
    8f74:	003fd606 	br	8ed0 <__alt_data_end+0xfffca6d0>

        free(line);
    }

    return fclose(p);
}
    8f78:	00bfffc4 	movi	r2,-1
    8f7c:	dfc00517 	ldw	ra,20(sp)
    8f80:	dc800417 	ldw	r18,16(sp)
    8f84:	dc400317 	ldw	r17,12(sp)
    8f88:	dc000217 	ldw	r16,8(sp)
    8f8c:	dec00604 	addi	sp,sp,24
    8f90:	f800283a 	ret

00008f94 <LMS7002M_ldo_enable>:
///

#include "LMS7002M_impl.h"

void LMS7002M_ldo_enable(LMS7002M_t *self, const bool enable, const int group)
{
    8f94:	defffc04 	addi	sp,sp,-16
    8f98:	dc800215 	stw	r18,8(sp)
    8f9c:	dc000015 	stw	r16,0(sp)
    8fa0:	3025883a 	mov	r18,r6
    8fa4:	2821883a 	mov	r16,r5
    //LDO is a global register space
    LMS7002M_set_mac_ch(self, LMS_CHAB);
    8fa8:	014010c4 	movi	r5,67
///

#include "LMS7002M_impl.h"

void LMS7002M_ldo_enable(LMS7002M_t *self, const bool enable, const int group)
{
    8fac:	dc400115 	stw	r17,4(sp)
    8fb0:	dfc00315 	stw	ra,12(sp)
    8fb4:	2023883a 	mov	r17,r4
    //LDO is a global register space
    LMS7002M_set_mac_ch(self, LMS_CHAB);
    8fb8:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    //TODO, we can implement more groups, for now only 1
    if (group != LMS7002M_LDO_ALL) return;
    8fbc:	9000311e 	bne	r18,zero,9084 <LMS7002M_ldo_enable+0xf0>

    const int val = enable?1:0;

    self->regs->reg_0x0092_en_ldo_dig= val;
    8fc0:	88846917 	ldw	r2,4516(r17)
    LMS7002M_set_mac_ch(self, LMS_CHAB);

    //TODO, we can implement more groups, for now only 1
    if (group != LMS7002M_LDO_ALL) return;

    const int val = enable?1:0;
    8fc4:	80c03fcc 	andi	r3,r16,255
    self->regs->reg_0x00a6_en_g_ldop = 1;
    self->regs->reg_0x00a6_pd_ldo_digip1 = enable?0:1;
    self->regs->reg_0x00a6_pd_ldo_digip2 = enable?0:1;
    self->regs->reg_0x00a6_pd_ldo_spibuf = enable?0:1;

    LMS7002M_regs_spi_write(self, 0x0092);
    8fc8:	8809883a 	mov	r4,r17
    //TODO, we can implement more groups, for now only 1
    if (group != LMS7002M_LDO_ALL) return;

    const int val = enable?1:0;

    self->regs->reg_0x0092_en_ldo_dig= val;
    8fcc:	10c0a015 	stw	r3,640(r2)
    self->regs->reg_0x0092_en_ldo_diggn= val;
    8fd0:	10c0a115 	stw	r3,644(r2)
    self->regs->reg_0x0092_en_ldo_digsxr= val;
    8fd4:	10c0a215 	stw	r3,648(r2)
    self->regs->reg_0x0092_en_ldo_digsxt= val;
    8fd8:	10c0a315 	stw	r3,652(r2)
    self->regs->reg_0x0092_en_ldo_divgn= val;
    8fdc:	10c0a415 	stw	r3,656(r2)
    self->regs->reg_0x0092_en_ldo_divsxr= val;
    8fe0:	10c0a515 	stw	r3,660(r2)
    self->regs->reg_0x0092_en_ldo_divsxt= val;
    8fe4:	10c0a615 	stw	r3,664(r2)
    self->regs->reg_0x0092_en_ldo_lna12= val;
    8fe8:	10c0a715 	stw	r3,668(r2)
    self->regs->reg_0x0092_en_ldo_lna14= val;
    8fec:	10c0a815 	stw	r3,672(r2)
    self->regs->reg_0x0092_en_ldo_mxrfe= val;
    8ff0:	10c0a915 	stw	r3,676(r2)
    self->regs->reg_0x0092_en_ldo_rbb= val;
    8ff4:	10c0aa15 	stw	r3,680(r2)
    self->regs->reg_0x0092_en_ldo_rxbuf= val;
    8ff8:	10c0ab15 	stw	r3,684(r2)
    self->regs->reg_0x0092_en_ldo_tbb= val;
    8ffc:	10c0ac15 	stw	r3,688(r2)
    self->regs->reg_0x0092_en_ldo_tia12= val;
    9000:	10c0ad15 	stw	r3,692(r2)
    self->regs->reg_0x0092_en_ldo_tia14= val;
    9004:	10c0ae15 	stw	r3,696(r2)
    self->regs->reg_0x0092_en_g_ldo= val;
    9008:	10c0af15 	stw	r3,700(r2)

    self->regs->reg_0x0093_en_ldo_afe= val;
    900c:	10c0b615 	stw	r3,728(r2)
    self->regs->reg_0x0093_en_ldo_cpgn= val;
    9010:	10c0b715 	stw	r3,732(r2)
    self->regs->reg_0x0093_en_ldo_cpsxr= val;
    9014:	10c0b815 	stw	r3,736(r2)
    self->regs->reg_0x0093_en_ldo_tlob= val;
    9018:	10c0b915 	stw	r3,740(r2)
    self->regs->reg_0x0093_en_ldo_tpad= val;
    901c:	10c0ba15 	stw	r3,744(r2)
    self->regs->reg_0x0093_en_ldo_txbuf= val;
    9020:	10c0bb15 	stw	r3,748(r2)
    self->regs->reg_0x0093_en_ldo_vcogn= val;
    9024:	10c0bc15 	stw	r3,752(r2)
    self->regs->reg_0x0093_en_ldo_vcosxr= val;
    9028:	10c0bd15 	stw	r3,756(r2)
    self->regs->reg_0x0093_en_ldo_vcosxt= val;
    902c:	10c0be15 	stw	r3,760(r2)
    self->regs->reg_0x0093_en_ldo_cpsxt= val;
    9030:	10c0bf15 	stw	r3,764(r2)

    self->regs->reg_0x00a6_en_g_ldop = 1;
    9034:	00c00044 	movi	r3,1
    self->regs->reg_0x00a6_pd_ldo_digip1 = enable?0:1;
    9038:	80caf03a 	xor	r5,r16,r3
    903c:	29403fcc 	andi	r5,r5,255
    9040:	11412a15 	stw	r5,1192(r2)
    self->regs->reg_0x00a6_pd_ldo_digip2 = enable?0:1;
    9044:	11412915 	stw	r5,1188(r2)
    self->regs->reg_0x00a6_pd_ldo_spibuf = enable?0:1;
    9048:	11412815 	stw	r5,1184(r2)
    self->regs->reg_0x0093_en_ldo_vcogn= val;
    self->regs->reg_0x0093_en_ldo_vcosxr= val;
    self->regs->reg_0x0093_en_ldo_vcosxt= val;
    self->regs->reg_0x0093_en_ldo_cpsxt= val;

    self->regs->reg_0x00a6_en_g_ldop = 1;
    904c:	10c12b15 	stw	r3,1196(r2)
    self->regs->reg_0x00a6_pd_ldo_digip1 = enable?0:1;
    self->regs->reg_0x00a6_pd_ldo_digip2 = enable?0:1;
    self->regs->reg_0x00a6_pd_ldo_spibuf = enable?0:1;

    LMS7002M_regs_spi_write(self, 0x0092);
    9050:	01402484 	movi	r5,146
    9054:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x0093);
    9058:	8809883a 	mov	r4,r17
    905c:	014024c4 	movi	r5,147
    9060:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x00a6);
    9064:	01402984 	movi	r5,166
    9068:	8809883a 	mov	r4,r17
}
    906c:	dfc00317 	ldw	ra,12(sp)
    9070:	dc800217 	ldw	r18,8(sp)
    9074:	dc400117 	ldw	r17,4(sp)
    9078:	dc000017 	ldw	r16,0(sp)
    907c:	dec00404 	addi	sp,sp,16
    self->regs->reg_0x00a6_pd_ldo_digip2 = enable?0:1;
    self->regs->reg_0x00a6_pd_ldo_spibuf = enable?0:1;

    LMS7002M_regs_spi_write(self, 0x0092);
    LMS7002M_regs_spi_write(self, 0x0093);
    LMS7002M_regs_spi_write(self, 0x00a6);
    9080:	00063001 	jmpi	6300 <LMS7002M_regs_spi_write>
}
    9084:	dfc00317 	ldw	ra,12(sp)
    9088:	dc800217 	ldw	r18,8(sp)
    908c:	dc400117 	ldw	r17,4(sp)
    9090:	dc000017 	ldw	r16,0(sp)
    9094:	dec00404 	addi	sp,sp,16
    9098:	f800283a 	ret

0000909c <__lms7002m_diq_index>:
    }
}

static inline int __lms7002m_diq_index(const int search, const int positions[4])
{
    for (size_t i = 0; i < 4; i++)
    909c:	0005883a 	mov	r2,zero
    90a0:	00c00104 	movi	r3,4
    {
        if (search == positions[i]) return i;
    90a4:	29800017 	ldw	r6,0(r5)
    90a8:	31000426 	beq	r6,r4,90bc <__lms7002m_diq_index+0x20>
    }
}

static inline int __lms7002m_diq_index(const int search, const int positions[4])
{
    for (size_t i = 0; i < 4; i++)
    90ac:	10800044 	addi	r2,r2,1
    90b0:	29400104 	addi	r5,r5,4
    90b4:	10fffb1e 	bne	r2,r3,90a4 <__alt_data_end+0xfffca8a4>
    {
        if (search == positions[i]) return i;
    }
    return 0; //dont care
    90b8:	0005883a 	mov	r2,zero
}
    90bc:	f800283a 	ret

000090c0 <LMS7002M_set_mac_ch>:
    }
    LMS7002M_regs_spi_write(self, 0x002A);
}

void LMS7002M_set_mac_ch(LMS7002M_t *self, const LMS7002M_chan_t channel)
{
    90c0:	defffd04 	addi	sp,sp,-12
    90c4:	dc000015 	stw	r16,0(sp)
    90c8:	dfc00215 	stw	ra,8(sp)
    90cc:	dc400115 	stw	r17,4(sp)
    //pick the register map and setting based on channel
    int newValue = 0;
    LMS7002M_regs_t *regs = NULL;
    switch (channel)
    90d0:	00801084 	movi	r2,66
    }
    LMS7002M_regs_spi_write(self, 0x002A);
}

void LMS7002M_set_mac_ch(LMS7002M_t *self, const LMS7002M_chan_t channel)
{
    90d4:	2021883a 	mov	r16,r4
    90d8:	20c00104 	addi	r3,r4,4
    //pick the register map and setting based on channel
    int newValue = 0;
    LMS7002M_regs_t *regs = NULL;
    switch (channel)
    90dc:	28800726 	beq	r5,r2,90fc <LMS7002M_set_mac_ch+0x3c>
    90e0:	008010c4 	movi	r2,67
    90e4:	28800826 	beq	r5,r2,9108 <LMS7002M_set_mac_ch+0x48>
    90e8:	00801044 	movi	r2,65
    90ec:	2880091e 	bne	r5,r2,9114 <LMS7002M_set_mac_ch+0x54>
    {
    case LMS_CHA:
        newValue = REG_0X0020_MAC_CHA;
        regs = &self->_regs[0];
    90f0:	1823883a 	mov	r17,r3
    int newValue = 0;
    LMS7002M_regs_t *regs = NULL;
    switch (channel)
    {
    case LMS_CHA:
        newValue = REG_0X0020_MAC_CHA;
    90f4:	00800044 	movi	r2,1
        regs = &self->_regs[0];
        break;
    90f8:	00000806 	br	911c <LMS7002M_set_mac_ch+0x5c>

    case LMS_CHB:
        newValue = REG_0X0020_MAC_CHB;
        regs = &self->_regs[1];
    90fc:	24423504 	addi	r17,r4,2260
        newValue = REG_0X0020_MAC_CHA;
        regs = &self->_regs[0];
        break;

    case LMS_CHB:
        newValue = REG_0X0020_MAC_CHB;
    9100:	00800084 	movi	r2,2
        regs = &self->_regs[1];
        break;
    9104:	00000506 	br	911c <LMS7002M_set_mac_ch+0x5c>
    //specifying CHAB is a convenience to set both channels
    //however, we have to pick a single register shadow
    //we recommended to not use CHAB in most cases
    case LMS_CHAB:
        newValue = REG_0X0020_MAC_CHAB;
        regs = &self->_regs[0];
    9108:	1823883a 	mov	r17,r3

    //specifying CHAB is a convenience to set both channels
    //however, we have to pick a single register shadow
    //we recommended to not use CHAB in most cases
    case LMS_CHAB:
        newValue = REG_0X0020_MAC_CHAB;
    910c:	008000c4 	movi	r2,3
        regs = &self->_regs[0];
        break;
    9110:	00000206 	br	911c <LMS7002M_set_mac_ch+0x5c>

void LMS7002M_set_mac_ch(LMS7002M_t *self, const LMS7002M_chan_t channel)
{
    //pick the register map and setting based on channel
    int newValue = 0;
    LMS7002M_regs_t *regs = NULL;
    9114:	0023883a 	mov	r17,zero
}

void LMS7002M_set_mac_ch(LMS7002M_t *self, const LMS7002M_chan_t channel)
{
    //pick the register map and setting based on channel
    int newValue = 0;
    9118:	0005883a 	mov	r2,zero
        regs = &self->_regs[0];
        break;
    }

    //manually pick the first shadow bank for this setting
    self->regs = self->_regs;
    911c:	80c46915 	stw	r3,4516(r16)
    if (self->regs->reg_0x0020_mac != newValue)
    9120:	80c00f17 	ldw	r3,60(r16)
    9124:	10c00426 	beq	r2,r3,9138 <LMS7002M_set_mac_ch+0x78>
    {
        self->regs->reg_0x0020_mac = newValue;
    9128:	80800f15 	stw	r2,60(r16)
        LMS7002M_regs_spi_write(self, 0x0020);
    912c:	01400804 	movi	r5,32
    9130:	8009883a 	mov	r4,r16
    9134:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    }

    //now select the user's desired shadow bank for further calls
    self->regs = regs;
    9138:	84446915 	stw	r17,4516(r16)
}
    913c:	dfc00217 	ldw	ra,8(sp)
    9140:	dc400117 	ldw	r17,4(sp)
    9144:	dc000017 	ldw	r16,0(sp)
    9148:	dec00304 	addi	sp,sp,12
    914c:	f800283a 	ret

00009150 <LMS7002M_set_spi_mode>:

#include <stdlib.h>
#include "LMS7002M_impl.h"

void LMS7002M_set_spi_mode(LMS7002M_t *self, const int numWires)
{
    9150:	defffd04 	addi	sp,sp,-12
    9154:	dc400115 	stw	r17,4(sp)
    9158:	2823883a 	mov	r17,r5
    //LML is in global register space
    LMS7002M_set_mac_ch(self, LMS_CHAB);
    915c:	014010c4 	movi	r5,67

#include <stdlib.h>
#include "LMS7002M_impl.h"

void LMS7002M_set_spi_mode(LMS7002M_t *self, const int numWires)
{
    9160:	dc000015 	stw	r16,0(sp)
    9164:	dfc00215 	stw	ra,8(sp)
    9168:	2021883a 	mov	r16,r4
    //LML is in global register space
    LMS7002M_set_mac_ch(self, LMS_CHAB);
    916c:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    if (numWires == 3) self->regs->reg_0x0021_spimode = REG_0X0021_SPIMODE_3WIRE;
    9170:	008000c4 	movi	r2,3
    9174:	8880031e 	bne	r17,r2,9184 <LMS7002M_set_spi_mode+0x34>
    9178:	80846917 	ldw	r2,4516(r16)
    917c:	10001a15 	stw	zero,104(r2)
    9180:	00000506 	br	9198 <LMS7002M_set_spi_mode+0x48>
    if (numWires == 4) self->regs->reg_0x0021_spimode = REG_0X0021_SPIMODE_4WIRE;
    9184:	00800104 	movi	r2,4
    9188:	8880031e 	bne	r17,r2,9198 <LMS7002M_set_spi_mode+0x48>
    918c:	80846917 	ldw	r2,4516(r16)
    9190:	00c00044 	movi	r3,1
    9194:	10c01a15 	stw	r3,104(r2)
    LMS7002M_regs_spi_write(self, 0x0021);
    9198:	01400844 	movi	r5,33
    919c:	8009883a 	mov	r4,r16
}
    91a0:	dfc00217 	ldw	ra,8(sp)
    91a4:	dc400117 	ldw	r17,4(sp)
    91a8:	dc000017 	ldw	r16,0(sp)
    91ac:	dec00304 	addi	sp,sp,12
    //LML is in global register space
    LMS7002M_set_mac_ch(self, LMS_CHAB);

    if (numWires == 3) self->regs->reg_0x0021_spimode = REG_0X0021_SPIMODE_3WIRE;
    if (numWires == 4) self->regs->reg_0x0021_spimode = REG_0X0021_SPIMODE_4WIRE;
    LMS7002M_regs_spi_write(self, 0x0021);
    91b0:	00063001 	jmpi	6300 <LMS7002M_regs_spi_write>

000091b4 <LMS7002M_reset>:
}

void LMS7002M_reset(LMS7002M_t *self)
{
    91b4:	defffd04 	addi	sp,sp,-12
    //LML is in global register space
    LMS7002M_set_mac_ch(self, LMS_CHAB);
    91b8:	014010c4 	movi	r5,67
    if (numWires == 4) self->regs->reg_0x0021_spimode = REG_0X0021_SPIMODE_4WIRE;
    LMS7002M_regs_spi_write(self, 0x0021);
}

void LMS7002M_reset(LMS7002M_t *self)
{
    91bc:	dfc00215 	stw	ra,8(sp)
    91c0:	dc400115 	stw	r17,4(sp)
    91c4:	dc000015 	stw	r16,0(sp)
    //LML is in global register space
    LMS7002M_set_mac_ch(self, LMS_CHAB);

    LMS7002M_spi_write(self, 0x0020, 0x0);
    91c8:	04400804 	movi	r17,32
    if (numWires == 4) self->regs->reg_0x0021_spimode = REG_0X0021_SPIMODE_4WIRE;
    LMS7002M_regs_spi_write(self, 0x0021);
}

void LMS7002M_reset(LMS7002M_t *self)
{
    91cc:	2021883a 	mov	r16,r4
    //LML is in global register space
    LMS7002M_set_mac_ch(self, LMS_CHAB);
    91d0:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    LMS7002M_spi_write(self, 0x0020, 0x0);
    91d4:	000d883a 	mov	r6,zero
    91d8:	880b883a 	mov	r5,r17
    91dc:	8009883a 	mov	r4,r16
    91e0:	00062b80 	call	62b8 <LMS7002M_spi_write>
    LMS7002M_regs_spi_write(self, 0x0020);
    91e4:	880b883a 	mov	r5,r17
    91e8:	8009883a 	mov	r4,r16
    91ec:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x002E);//must write
    91f0:	01400b84 	movi	r5,46
    91f4:	8009883a 	mov	r4,r16
}
    91f8:	dfc00217 	ldw	ra,8(sp)
    91fc:	dc400117 	ldw	r17,4(sp)
    9200:	dc000017 	ldw	r16,0(sp)
    9204:	dec00304 	addi	sp,sp,12
    //LML is in global register space
    LMS7002M_set_mac_ch(self, LMS_CHAB);

    LMS7002M_spi_write(self, 0x0020, 0x0);
    LMS7002M_regs_spi_write(self, 0x0020);
    LMS7002M_regs_spi_write(self, 0x002E);//must write
    9208:	00063001 	jmpi	6300 <LMS7002M_regs_spi_write>

0000920c <LMS7002M_reset_lml_fifo>:
}

void LMS7002M_reset_lml_fifo(LMS7002M_t *self, const LMS7002M_dir_t direction)
{
    920c:	defffd04 	addi	sp,sp,-12
    9210:	dc000015 	stw	r16,0(sp)
    9214:	2821883a 	mov	r16,r5
    //LML is in global register space
    LMS7002M_set_mac_ch(self, LMS_CHAB);
    9218:	014010c4 	movi	r5,67
    LMS7002M_regs_spi_write(self, 0x0020);
    LMS7002M_regs_spi_write(self, 0x002E);//must write
}

void LMS7002M_reset_lml_fifo(LMS7002M_t *self, const LMS7002M_dir_t direction)
{
    921c:	dc400115 	stw	r17,4(sp)
    9220:	dfc00215 	stw	ra,8(sp)
    9224:	2023883a 	mov	r17,r4
    //LML is in global register space
    LMS7002M_set_mac_ch(self, LMS_CHAB);
    9228:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    //put into reset
    if (direction == LMS_RX)
    922c:	00800084 	movi	r2,2
    9230:	8080051e 	bne	r16,r2,9248 <LMS7002M_reset_lml_fifo+0x3c>
    {
        self->regs->reg_0x0020_srst_rxfifo = 0;
    9234:	88846917 	ldw	r2,4516(r17)
    9238:	10000815 	stw	zero,32(r2)
        self->regs->reg_0x0020_lrst_rx_a = 0;
    923c:	10000615 	stw	zero,24(r2)
        self->regs->reg_0x0020_lrst_rx_b = 0;
    9240:	10000415 	stw	zero,16(r2)
    9244:	00000606 	br	9260 <LMS7002M_reset_lml_fifo+0x54>
    }
    if (direction == LMS_TX)
    9248:	00800044 	movi	r2,1
    924c:	8080041e 	bne	r16,r2,9260 <LMS7002M_reset_lml_fifo+0x54>
    {
        self->regs->reg_0x0020_srst_txfifo = 0;
    9250:	88846917 	ldw	r2,4516(r17)
    9254:	10000915 	stw	zero,36(r2)
        self->regs->reg_0x0020_lrst_tx_a = 0;
    9258:	10000215 	stw	zero,8(r2)
        self->regs->reg_0x0020_lrst_tx_b = 0;
    925c:	10000015 	stw	zero,0(r2)
    }
    LMS7002M_regs_spi_write(self, 0x0020);
    9260:	01400804 	movi	r5,32
    9264:	8809883a 	mov	r4,r17
    9268:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    //clear resets
    if (direction == LMS_RX)
    926c:	00c00084 	movi	r3,2
    9270:	00800044 	movi	r2,1
    9274:	80c0051e 	bne	r16,r3,928c <LMS7002M_reset_lml_fifo+0x80>
    {
        self->regs->reg_0x0020_srst_rxfifo = 1;
    9278:	88c46917 	ldw	r3,4516(r17)
    927c:	18800815 	stw	r2,32(r3)
        self->regs->reg_0x0020_lrst_rx_a = 1;
    9280:	18800615 	stw	r2,24(r3)
        self->regs->reg_0x0020_lrst_rx_b = 1;
    9284:	18800415 	stw	r2,16(r3)
    9288:	00000506 	br	92a0 <LMS7002M_reset_lml_fifo+0x94>
    }
    if (direction == LMS_TX)
    928c:	8080041e 	bne	r16,r2,92a0 <LMS7002M_reset_lml_fifo+0x94>
    {
        self->regs->reg_0x0020_srst_txfifo = 1;
    9290:	88846917 	ldw	r2,4516(r17)
    9294:	14000915 	stw	r16,36(r2)
        self->regs->reg_0x0020_lrst_tx_a = 1;
    9298:	14000215 	stw	r16,8(r2)
        self->regs->reg_0x0020_lrst_tx_b = 1;
    929c:	14000015 	stw	r16,0(r2)
    }
    LMS7002M_regs_spi_write(self, 0x0020);
    92a0:	01400804 	movi	r5,32
    92a4:	8809883a 	mov	r4,r17
}
    92a8:	dfc00217 	ldw	ra,8(sp)
    92ac:	dc400117 	ldw	r17,4(sp)
    92b0:	dc000017 	ldw	r16,0(sp)
    92b4:	dec00304 	addi	sp,sp,12
    {
        self->regs->reg_0x0020_srst_txfifo = 1;
        self->regs->reg_0x0020_lrst_tx_a = 1;
        self->regs->reg_0x0020_lrst_tx_b = 1;
    }
    LMS7002M_regs_spi_write(self, 0x0020);
    92b8:	00063001 	jmpi	6300 <LMS7002M_regs_spi_write>

000092bc <LMS7002M_power_down>:
}

void LMS7002M_power_down(LMS7002M_t *self)
{
    92bc:	defff904 	addi	sp,sp,-28
    92c0:	dc400115 	stw	r17,4(sp)
    //LML is in global register space
    LMS7002M_set_mac_ch(self, LMS_CHAB);
    92c4:	044010c4 	movi	r17,67
    92c8:	880b883a 	mov	r5,r17
    }
    LMS7002M_regs_spi_write(self, 0x0020);
}

void LMS7002M_power_down(LMS7002M_t *self)
{
    92cc:	dfc00615 	stw	ra,24(sp)
    92d0:	dd400515 	stw	r21,20(sp)
    92d4:	dd000415 	stw	r20,16(sp)
    92d8:	dcc00315 	stw	r19,12(sp)
    92dc:	dc800215 	stw	r18,8(sp)
    92e0:	dc000015 	stw	r16,0(sp)
    92e4:	2021883a 	mov	r16,r4
    //LML is in global register space
    LMS7002M_set_mac_ch(self, LMS_CHAB);
    92e8:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    self->regs->reg_0x0020_rxen_a = 0;
    92ec:	80846917 	ldw	r2,4516(r16)
    self->regs->reg_0x0020_rxen_b = 0;
    self->regs->reg_0x0020_txen_a = 0;
    self->regs->reg_0x0020_txen_b = 0;
    LMS7002M_regs_spi_write(self, 0x0020);
    92f0:	8009883a 	mov	r4,r16
    92f4:	01400804 	movi	r5,32
void LMS7002M_power_down(LMS7002M_t *self)
{
    //LML is in global register space
    LMS7002M_set_mac_ch(self, LMS_CHAB);

    self->regs->reg_0x0020_rxen_a = 0;
    92f8:	10000b15 	stw	zero,44(r2)
    self->regs->reg_0x0020_rxen_b = 0;
    92fc:	10000a15 	stw	zero,40(r2)
    self->regs->reg_0x0020_txen_a = 0;
    9300:	10000d15 	stw	zero,52(r2)
    self->regs->reg_0x0020_txen_b = 0;
    9304:	10000c15 	stw	zero,48(r2)
    LMS7002M_regs_spi_write(self, 0x0020);
    9308:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    LMS7002M_ldo_enable(self, false, LMS7002M_LDO_ALL);
    930c:	8009883a 	mov	r4,r16
    9310:	000d883a 	mov	r6,zero
    9314:	000b883a 	mov	r5,zero
    9318:	0008f940 	call	8f94 <LMS7002M_ldo_enable>
    LMS7002M_afe_enable(self, LMS_TX, LMS_CHA, false);
    931c:	04800044 	movi	r18,1
    9320:	05401044 	movi	r21,65
    9324:	a80d883a 	mov	r6,r21
    9328:	900b883a 	mov	r5,r18
    932c:	8009883a 	mov	r4,r16
    9330:	000f883a 	mov	r7,zero
    9334:	0000c580 	call	c58 <LMS7002M_afe_enable>
    LMS7002M_afe_enable(self, LMS_TX, LMS_CHB, false);
    9338:	05001084 	movi	r20,66
    933c:	a00d883a 	mov	r6,r20
    9340:	900b883a 	mov	r5,r18
    9344:	8009883a 	mov	r4,r16
    9348:	000f883a 	mov	r7,zero
    934c:	0000c580 	call	c58 <LMS7002M_afe_enable>
    LMS7002M_afe_enable(self, LMS_RX, LMS_CHA, false);
    9350:	04c00084 	movi	r19,2
    9354:	a80d883a 	mov	r6,r21
    9358:	980b883a 	mov	r5,r19
    935c:	8009883a 	mov	r4,r16
    9360:	000f883a 	mov	r7,zero
    9364:	0000c580 	call	c58 <LMS7002M_afe_enable>
    LMS7002M_afe_enable(self, LMS_RX, LMS_CHB, false);
    9368:	000f883a 	mov	r7,zero
    936c:	a00d883a 	mov	r6,r20
    9370:	980b883a 	mov	r5,r19
    9374:	8009883a 	mov	r4,r16
    9378:	0000c580 	call	c58 <LMS7002M_afe_enable>
    LMS7002M_rxtsp_enable(self, LMS_CHAB, false);
    937c:	880b883a 	mov	r5,r17
    9380:	8009883a 	mov	r4,r16
    9384:	000d883a 	mov	r6,zero
    9388:	000b6200 	call	b620 <LMS7002M_rxtsp_enable>
    LMS7002M_txtsp_enable(self, LMS_CHAB, false);
    938c:	880b883a 	mov	r5,r17
    9390:	8009883a 	mov	r4,r16
    9394:	000d883a 	mov	r6,zero
    9398:	000d9840 	call	d984 <LMS7002M_txtsp_enable>
    LMS7002M_rbb_enable(self, LMS_CHAB, false);
    939c:	880b883a 	mov	r5,r17
    93a0:	8009883a 	mov	r4,r16
    93a4:	000d883a 	mov	r6,zero
    93a8:	00099d40 	call	99d4 <LMS7002M_rbb_enable>
    LMS7002M_tbb_enable(self, LMS_CHAB, false);
    93ac:	880b883a 	mov	r5,r17
    93b0:	8009883a 	mov	r4,r16
    93b4:	000d883a 	mov	r6,zero
    93b8:	000c5600 	call	c560 <LMS7002M_tbb_enable>
    LMS7002M_rfe_enable(self, LMS_CHAB, false);
    93bc:	880b883a 	mov	r5,r17
    93c0:	8009883a 	mov	r4,r16
    93c4:	000d883a 	mov	r6,zero
    93c8:	0009d240 	call	9d24 <LMS7002M_rfe_enable>
    LMS7002M_trf_enable(self, LMS_CHAB, false);
    93cc:	880b883a 	mov	r5,r17
    93d0:	8009883a 	mov	r4,r16
    93d4:	000d883a 	mov	r6,zero
    93d8:	000c6d40 	call	c6d4 <LMS7002M_trf_enable>
    LMS7002M_sxx_enable(self, LMS_RX, false);
    93dc:	980b883a 	mov	r5,r19
    93e0:	8009883a 	mov	r4,r16
    93e4:	000d883a 	mov	r6,zero
    93e8:	000bcb40 	call	bcb4 <LMS7002M_sxx_enable>
    LMS7002M_sxx_enable(self, LMS_TX, false);
    93ec:	000d883a 	mov	r6,zero
    93f0:	900b883a 	mov	r5,r18
    93f4:	8009883a 	mov	r4,r16
}
    93f8:	dfc00617 	ldw	ra,24(sp)
    93fc:	dd400517 	ldw	r21,20(sp)
    9400:	dd000417 	ldw	r20,16(sp)
    9404:	dcc00317 	ldw	r19,12(sp)
    9408:	dc800217 	ldw	r18,8(sp)
    940c:	dc400117 	ldw	r17,4(sp)
    9410:	dc000017 	ldw	r16,0(sp)
    9414:	dec00704 	addi	sp,sp,28
    LMS7002M_rbb_enable(self, LMS_CHAB, false);
    LMS7002M_tbb_enable(self, LMS_CHAB, false);
    LMS7002M_rfe_enable(self, LMS_CHAB, false);
    LMS7002M_trf_enable(self, LMS_CHAB, false);
    LMS7002M_sxx_enable(self, LMS_RX, false);
    LMS7002M_sxx_enable(self, LMS_TX, false);
    9418:	000bcb41 	jmpi	bcb4 <LMS7002M_sxx_enable>

0000941c <LMS7002M_configure_lml_port>:
}

void LMS7002M_configure_lml_port(LMS7002M_t *self, const LMS7002M_port_t portNo, const LMS7002M_dir_t direction, const int mclkDiv)
{
    941c:	defffb04 	addi	sp,sp,-20
    9420:	dc800215 	stw	r18,8(sp)
    9424:	2825883a 	mov	r18,r5
    //LML is in global register space
    LMS7002M_set_mac_ch(self, LMS_CHAB);
    9428:	014010c4 	movi	r5,67
    LMS7002M_sxx_enable(self, LMS_RX, false);
    LMS7002M_sxx_enable(self, LMS_TX, false);
}

void LMS7002M_configure_lml_port(LMS7002M_t *self, const LMS7002M_port_t portNo, const LMS7002M_dir_t direction, const int mclkDiv)
{
    942c:	dcc00315 	stw	r19,12(sp)
    9430:	dc400115 	stw	r17,4(sp)
    9434:	dc000015 	stw	r16,0(sp)
    9438:	2023883a 	mov	r17,r4
    943c:	dfc00415 	stw	ra,16(sp)
    9440:	3027883a 	mov	r19,r6
    9444:	3821883a 	mov	r16,r7
    //LML is in global register space
    LMS7002M_set_mac_ch(self, LMS_CHAB);
    9448:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    //set TRXIQ on both ports
    if (portNo == LMS_PORT1)
    944c:	00c00044 	movi	r3,1
    9450:	88846917 	ldw	r2,4516(r17)
    9454:	90c0041e 	bne	r18,r3,9468 <LMS7002M_configure_lml_port+0x4c>
    {
        self->regs->reg_0x0023_lml1_mode = REG_0X0023_LML1_MODE_TRXIQ;
        self->regs->reg_0x0023_lml1_rxntxiq = (direction==LMS_TX)?
    9458:	98c6c03a 	cmpne	r3,r19,r3
    LMS7002M_set_mac_ch(self, LMS_CHAB);

    //set TRXIQ on both ports
    if (portNo == LMS_PORT1)
    {
        self->regs->reg_0x0023_lml1_mode = REG_0X0023_LML1_MODE_TRXIQ;
    945c:	10003515 	stw	zero,212(r2)
        self->regs->reg_0x0023_lml1_rxntxiq = (direction==LMS_TX)?
    9460:	10c03415 	stw	r3,208(r2)
    9464:	00000506 	br	947c <LMS7002M_configure_lml_port+0x60>
            REG_0X0023_LML1_RXNTXIQ_RXIQ:REG_0X0023_LML1_RXNTXIQ_TXIQ; //WARNING: TX/RX perspective swap
    }
    if (portNo == LMS_PORT2)
    9468:	00c00084 	movi	r3,2
    946c:	90c0031e 	bne	r18,r3,947c <LMS7002M_configure_lml_port+0x60>
    {
        self->regs->reg_0x0023_lml2_mode = REG_0X0023_LML2_MODE_TRXIQ;
        self->regs->reg_0x0023_lml2_rxntxiq = (direction==LMS_TX)?
    9470:	98c00058 	cmpnei	r3,r19,1
        self->regs->reg_0x0023_lml1_rxntxiq = (direction==LMS_TX)?
            REG_0X0023_LML1_RXNTXIQ_RXIQ:REG_0X0023_LML1_RXNTXIQ_TXIQ; //WARNING: TX/RX perspective swap
    }
    if (portNo == LMS_PORT2)
    {
        self->regs->reg_0x0023_lml2_mode = REG_0X0023_LML2_MODE_TRXIQ;
    9474:	10003215 	stw	zero,200(r2)
        self->regs->reg_0x0023_lml2_rxntxiq = (direction==LMS_TX)?
    9478:	10c03115 	stw	r3,196(r2)
            REG_0X0023_LML2_RXNTXIQ_RXIQ:REG_0X0023_LML2_RXNTXIQ_TXIQ; //WARNING: TX/RX perspective swap
    }

    //automatic directions based on mode above
    self->regs->reg_0x0023_enabledirctr1 = 0;
    947c:	10002d15 	stw	zero,180(r2)
    self->regs->reg_0x0023_enabledirctr2 = 0;
    9480:	10002b15 	stw	zero,172(r2)

    //set the FIFO rd and wr clock muxes based on direction
    if (direction == LMS_TX)
    9484:	00c00044 	movi	r3,1
    9488:	01000084 	movi	r4,2
    948c:	98c0081e 	bne	r19,r3,94b0 <LMS7002M_configure_lml_port+0x94>
    {
        self->regs->reg_0x002a_txrdclk_mux = REG_0X002A_TXRDCLK_MUX_TXTSPCLK;
        self->regs->reg_0x002a_txwrclk_mux = (portNo==LMS_PORT1)?REG_0X002A_TXWRCLK_MUX_FCLK1:REG_0X002A_TXWRCLK_MUX_FCLK2;
    9490:	90c6c03a 	cmpne	r3,r18,r3
    self->regs->reg_0x0023_enabledirctr2 = 0;

    //set the FIFO rd and wr clock muxes based on direction
    if (direction == LMS_TX)
    {
        self->regs->reg_0x002a_txrdclk_mux = REG_0X002A_TXRDCLK_MUX_TXTSPCLK;
    9494:	11004c15 	stw	r4,304(r2)
        self->regs->reg_0x002a_txwrclk_mux = (portNo==LMS_PORT1)?REG_0X002A_TXWRCLK_MUX_FCLK1:REG_0X002A_TXWRCLK_MUX_FCLK2;
    9498:	10c04d15 	stw	r3,308(r2)
    }

    //data stream muxes
    if (direction == LMS_TX)
    {
        self->regs->reg_0x002a_tx_mux = (portNo==LMS_PORT1)?REG_0X002A_TX_MUX_PORT1:REG_0X002A_TX_MUX_PORT2;
    949c:	10c04b15 	stw	r3,300(r2)
    {
        self->regs->reg_0x002a_rx_mux = REG_0X002A_RX_MUX_RXTSP;
    }

    //clock mux (outputs to mclk pin)
    if (portNo == LMS_PORT1)
    94a0:	94c0381e 	bne	r18,r19,9584 <LMS7002M_configure_lml_port+0x168>
    {
        self->regs->reg_0x002b_mclk1src = (direction==LMS_TX)?
            ((mclkDiv==1)?REG_0X002B_MCLK1SRC_TXTSPCLKA:REG_0X002B_MCLK1SRC_TXTSPCLKA_DIV):
    94a4:	84c7003a 	cmpeq	r3,r16,r19
    94a8:	1806907a 	slli	r3,r3,1
    94ac:	00000a06 	br	94d8 <LMS7002M_configure_lml_port+0xbc>
    if (direction == LMS_TX)
    {
        self->regs->reg_0x002a_txrdclk_mux = REG_0X002A_TXRDCLK_MUX_TXTSPCLK;
        self->regs->reg_0x002a_txwrclk_mux = (portNo==LMS_PORT1)?REG_0X002A_TXWRCLK_MUX_FCLK1:REG_0X002A_TXWRCLK_MUX_FCLK2;
    }
    if (direction == LMS_RX)
    94b0:	9900041e 	bne	r19,r4,94c4 <LMS7002M_configure_lml_port+0xa8>
    {
        self->regs->reg_0x002a_rxrdclk_mux = (portNo==LMS_PORT1)?REG_0X002A_RXRDCLK_MUX_MCLK1:REG_0X002A_RXRDCLK_MUX_MCLK2;
    94b4:	91400058 	cmpnei	r5,r18,1
    94b8:	11404e15 	stw	r5,312(r2)
        self->regs->reg_0x002a_rxwrclk_mux = REG_0X002A_RXWRCLK_MUX_RXTSPCLK;
    94bc:	14c04f15 	stw	r19,316(r2)
    {
        self->regs->reg_0x002a_tx_mux = (portNo==LMS_PORT1)?REG_0X002A_TX_MUX_PORT1:REG_0X002A_TX_MUX_PORT2;
    }
    if (direction == LMS_RX)
    {
        self->regs->reg_0x002a_rx_mux = REG_0X002A_RX_MUX_RXTSP;
    94c0:	10004a15 	stw	zero,296(r2)
    }

    //clock mux (outputs to mclk pin)
    if (portNo == LMS_PORT1)
    94c4:	90c0061e 	bne	r18,r3,94e0 <LMS7002M_configure_lml_port+0xc4>
    {
        self->regs->reg_0x002b_mclk1src = (direction==LMS_TX)?
            ((mclkDiv==1)?REG_0X002B_MCLK1SRC_TXTSPCLKA:REG_0X002B_MCLK1SRC_TXTSPCLKA_DIV):
            ((mclkDiv==1)?REG_0X002B_MCLK1SRC_RXTSPCLKA:REG_0X002B_MCLK1SRC_RXTSPCLKA_DIV);
    94c8:	80c0021e 	bne	r16,r3,94d4 <LMS7002M_configure_lml_port+0xb8>
    94cc:	00c000c4 	movi	r3,3
    94d0:	00000106 	br	94d8 <LMS7002M_configure_lml_port+0xbc>
    94d4:	00c00044 	movi	r3,1
    }

    //clock mux (outputs to mclk pin)
    if (portNo == LMS_PORT1)
    {
        self->regs->reg_0x002b_mclk1src = (direction==LMS_TX)?
    94d8:	10c05315 	stw	r3,332(r2)
    94dc:	00000406 	br	94f0 <LMS7002M_configure_lml_port+0xd4>
            ((mclkDiv==1)?REG_0X002B_MCLK1SRC_TXTSPCLKA:REG_0X002B_MCLK1SRC_TXTSPCLKA_DIV):
            ((mclkDiv==1)?REG_0X002B_MCLK1SRC_RXTSPCLKA:REG_0X002B_MCLK1SRC_RXTSPCLKA_DIV);
    }
    if (portNo == LMS_PORT2)
    94e0:	91000d1e 	bne	r18,r4,9518 <LMS7002M_configure_lml_port+0xfc>
    {
        self->regs->reg_0x002b_mclk2src = (direction==LMS_TX)?
            ((mclkDiv==1)?REG_0X002B_MCLK2SRC_TXTSPCLKA:REG_0X002B_MCLK2SRC_TXTSPCLKA_DIV):
            ((mclkDiv==1)?REG_0X002B_MCLK2SRC_RXTSPCLKA:REG_0X002B_MCLK2SRC_RXTSPCLKA_DIV);
    94e4:	80c02b1e 	bne	r16,r3,9594 <LMS7002M_configure_lml_port+0x178>
    94e8:	048000c4 	movi	r18,3
            ((mclkDiv==1)?REG_0X002B_MCLK1SRC_TXTSPCLKA:REG_0X002B_MCLK1SRC_TXTSPCLKA_DIV):
            ((mclkDiv==1)?REG_0X002B_MCLK1SRC_RXTSPCLKA:REG_0X002B_MCLK1SRC_RXTSPCLKA_DIV);
    }
    if (portNo == LMS_PORT2)
    {
        self->regs->reg_0x002b_mclk2src = (direction==LMS_TX)?
    94ec:	14805215 	stw	r18,328(r2)
            ((mclkDiv==1)?REG_0X002B_MCLK2SRC_TXTSPCLKA:REG_0X002B_MCLK2SRC_TXTSPCLKA_DIV):
            ((mclkDiv==1)?REG_0X002B_MCLK2SRC_RXTSPCLKA:REG_0X002B_MCLK2SRC_RXTSPCLKA_DIV);
    }

    //clock divider (outputs to mclk pin)
    if (direction == LMS_TX)
    94f0:	00c00044 	movi	r3,1
    94f4:	98c0081e 	bne	r19,r3,9518 <LMS7002M_configure_lml_port+0xfc>
    {
        self->regs->reg_0x002b_txdiven = (mclkDiv > 1)?1:0;
        self->regs->reg_0x002c_txtspclk_div = (mclkDiv/2)-1;
    94f8:	800ed7fa 	srli	r7,r16,31
    }

    //clock divider (outputs to mclk pin)
    if (direction == LMS_TX)
    {
        self->regs->reg_0x002b_txdiven = (mclkDiv > 1)?1:0;
    94fc:	80c00088 	cmpgei	r3,r16,2
    9500:	10c05415 	stw	r3,336(r2)
        self->regs->reg_0x002c_txtspclk_div = (mclkDiv/2)-1;
    9504:	3c21883a 	add	r16,r7,r16
    9508:	8021d07a 	srai	r16,r16,1
    950c:	843fffc4 	addi	r16,r16,-1
    9510:	14005615 	stw	r16,344(r2)
    9514:	00000906 	br	953c <LMS7002M_configure_lml_port+0x120>
    }
    if (direction == LMS_RX)
    9518:	00c00084 	movi	r3,2
    951c:	98c0071e 	bne	r19,r3,953c <LMS7002M_configure_lml_port+0x120>
    {
        self->regs->reg_0x002b_rxdiven = (mclkDiv > 1)?1:0;
        self->regs->reg_0x002c_rxtspclk_div = (mclkDiv/2)-1;
    9520:	800ed7fa 	srli	r7,r16,31
        self->regs->reg_0x002b_txdiven = (mclkDiv > 1)?1:0;
        self->regs->reg_0x002c_txtspclk_div = (mclkDiv/2)-1;
    }
    if (direction == LMS_RX)
    {
        self->regs->reg_0x002b_rxdiven = (mclkDiv > 1)?1:0;
    9524:	80c6403a 	cmpge	r3,r16,r3
    9528:	10c05515 	stw	r3,340(r2)
        self->regs->reg_0x002c_rxtspclk_div = (mclkDiv/2)-1;
    952c:	3c21883a 	add	r16,r7,r16
    9530:	8021d07a 	srai	r16,r16,1
    9534:	843fffc4 	addi	r16,r16,-1
    9538:	14005715 	stw	r16,348(r2)
    }

    LMS7002M_regs_spi_write(self, 0x0023);
    953c:	8809883a 	mov	r4,r17
    9540:	014008c4 	movi	r5,35
    9544:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x002A);
    9548:	8809883a 	mov	r4,r17
    954c:	01400a84 	movi	r5,42
    9550:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x002B);
    9554:	8809883a 	mov	r4,r17
    9558:	01400ac4 	movi	r5,43
    955c:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x002C);
    9560:	01400b04 	movi	r5,44
    9564:	8809883a 	mov	r4,r17
}
    9568:	dfc00417 	ldw	ra,16(sp)
    956c:	dcc00317 	ldw	r19,12(sp)
    9570:	dc800217 	ldw	r18,8(sp)
    9574:	dc400117 	ldw	r17,4(sp)
    9578:	dc000017 	ldw	r16,0(sp)
    957c:	dec00504 	addi	sp,sp,20
    }

    LMS7002M_regs_spi_write(self, 0x0023);
    LMS7002M_regs_spi_write(self, 0x002A);
    LMS7002M_regs_spi_write(self, 0x002B);
    LMS7002M_regs_spi_write(self, 0x002C);
    9580:	00063001 	jmpi	6300 <LMS7002M_regs_spi_write>
    {
        self->regs->reg_0x002b_mclk1src = (direction==LMS_TX)?
            ((mclkDiv==1)?REG_0X002B_MCLK1SRC_TXTSPCLKA:REG_0X002B_MCLK1SRC_TXTSPCLKA_DIV):
            ((mclkDiv==1)?REG_0X002B_MCLK1SRC_RXTSPCLKA:REG_0X002B_MCLK1SRC_RXTSPCLKA_DIV);
    }
    if (portNo == LMS_PORT2)
    9584:	913fdc1e 	bne	r18,r4,94f8 <__alt_data_end+0xfffcacf8>
    {
        self->regs->reg_0x002b_mclk2src = (direction==LMS_TX)?
            ((mclkDiv==1)?REG_0X002B_MCLK2SRC_TXTSPCLKA:REG_0X002B_MCLK2SRC_TXTSPCLKA_DIV):
    9588:	84ffd826 	beq	r16,r19,94ec <__alt_data_end+0xfffcacec>
    958c:	0025883a 	mov	r18,zero
    9590:	003fd606 	br	94ec <__alt_data_end+0xfffcacec>
            ((mclkDiv==1)?REG_0X002B_MCLK2SRC_RXTSPCLKA:REG_0X002B_MCLK2SRC_RXTSPCLKA_DIV);
    9594:	04800044 	movi	r18,1
    9598:	003fd406 	br	94ec <__alt_data_end+0xfffcacec>

0000959c <LMS7002M_invert_fclk>:
    LMS7002M_regs_spi_write(self, 0x002B);
    LMS7002M_regs_spi_write(self, 0x002C);
}

void LMS7002M_invert_fclk(LMS7002M_t *self, const bool invert)
{
    959c:	defffd04 	addi	sp,sp,-12
    95a0:	dc000015 	stw	r16,0(sp)
    95a4:	2821883a 	mov	r16,r5
    //LML is in global register space
    LMS7002M_set_mac_ch(self, LMS_CHAB);
    95a8:	014010c4 	movi	r5,67
    LMS7002M_regs_spi_write(self, 0x002B);
    LMS7002M_regs_spi_write(self, 0x002C);
}

void LMS7002M_invert_fclk(LMS7002M_t *self, const bool invert)
{
    95ac:	dc400115 	stw	r17,4(sp)
    95b0:	dfc00215 	stw	ra,8(sp)
    95b4:	2023883a 	mov	r17,r4
    //LML is in global register space
    LMS7002M_set_mac_ch(self, LMS_CHAB);
    95b8:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    self->regs->reg_0x002b_fclk1_inv = invert?1:0;
    95bc:	88846917 	ldw	r2,4516(r17)
    95c0:	81403fcc 	andi	r5,r16,255
    self->regs->reg_0x002b_fclk2_inv = invert?1:0;
    LMS7002M_regs_spi_write(self, 0x002B);
    95c4:	8809883a 	mov	r4,r17
void LMS7002M_invert_fclk(LMS7002M_t *self, const bool invert)
{
    //LML is in global register space
    LMS7002M_set_mac_ch(self, LMS_CHAB);

    self->regs->reg_0x002b_fclk1_inv = invert?1:0;
    95c8:	11405115 	stw	r5,324(r2)
    self->regs->reg_0x002b_fclk2_inv = invert?1:0;
    95cc:	11405015 	stw	r5,320(r2)
    LMS7002M_regs_spi_write(self, 0x002B);
    95d0:	01400ac4 	movi	r5,43
}
    95d4:	dfc00217 	ldw	ra,8(sp)
    95d8:	dc400117 	ldw	r17,4(sp)
    95dc:	dc000017 	ldw	r16,0(sp)
    95e0:	dec00304 	addi	sp,sp,12
    //LML is in global register space
    LMS7002M_set_mac_ch(self, LMS_CHAB);

    self->regs->reg_0x002b_fclk1_inv = invert?1:0;
    self->regs->reg_0x002b_fclk2_inv = invert?1:0;
    LMS7002M_regs_spi_write(self, 0x002B);
    95e4:	00063001 	jmpi	6300 <LMS7002M_regs_spi_write>

000095e8 <LMS7002M_setup_digital_loopback>:
}

void LMS7002M_setup_digital_loopback(LMS7002M_t *self)
{
    95e8:	defffe04 	addi	sp,sp,-8
    //LML is in global register space
    LMS7002M_set_mac_ch(self, LMS_CHAB);
    95ec:	014010c4 	movi	r5,67
    self->regs->reg_0x002b_fclk2_inv = invert?1:0;
    LMS7002M_regs_spi_write(self, 0x002B);
}

void LMS7002M_setup_digital_loopback(LMS7002M_t *self)
{
    95f0:	dc000015 	stw	r16,0(sp)
    95f4:	dfc00115 	stw	ra,4(sp)
    95f8:	2021883a 	mov	r16,r4
    //LML is in global register space
    LMS7002M_set_mac_ch(self, LMS_CHAB);
    95fc:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    self->regs->reg_0x002a_rx_mux = REG_0X002A_RX_MUX_TXFIFO;
    9600:	80846917 	ldw	r2,4516(r16)
    9604:	01000044 	movi	r4,1
    //self->regs->reg_0x002a_rx_mux = REG_0X002A_RX_MUX_LFSR;
    if (self->regs->reg_0x002a_txwrclk_mux == REG_0X002A_TXWRCLK_MUX_FCLK1)
    9608:	10c04d17 	ldw	r3,308(r2)
void LMS7002M_setup_digital_loopback(LMS7002M_t *self)
{
    //LML is in global register space
    LMS7002M_set_mac_ch(self, LMS_CHAB);

    self->regs->reg_0x002a_rx_mux = REG_0X002A_RX_MUX_TXFIFO;
    960c:	11004a15 	stw	r4,296(r2)
    //self->regs->reg_0x002a_rx_mux = REG_0X002A_RX_MUX_LFSR;
    if (self->regs->reg_0x002a_txwrclk_mux == REG_0X002A_TXWRCLK_MUX_FCLK1)
    9610:	1800021e 	bne	r3,zero,961c <LMS7002M_setup_digital_loopback+0x34>
    {
        self->regs->reg_0x002a_rxwrclk_mux = REG_0X002A_RXWRCLK_MUX_FCLK1;
    9614:	10004f15 	stw	zero,316(r2)
    9618:	00000206 	br	9624 <LMS7002M_setup_digital_loopback+0x3c>
    }
    if (self->regs->reg_0x002a_txwrclk_mux == REG_0X002A_TXWRCLK_MUX_FCLK2)
    961c:	1900011e 	bne	r3,r4,9624 <LMS7002M_setup_digital_loopback+0x3c>
    {
        self->regs->reg_0x002a_rxwrclk_mux = REG_0X002A_RXWRCLK_MUX_FCLK2;
    9620:	10c04f15 	stw	r3,316(r2)
    }
    LMS7002M_regs_spi_write(self, 0x002A);
    9624:	01400a84 	movi	r5,42
    9628:	8009883a 	mov	r4,r16
}
    962c:	dfc00117 	ldw	ra,4(sp)
    9630:	dc000017 	ldw	r16,0(sp)
    9634:	dec00204 	addi	sp,sp,8
    }
    if (self->regs->reg_0x002a_txwrclk_mux == REG_0X002A_TXWRCLK_MUX_FCLK2)
    {
        self->regs->reg_0x002a_rxwrclk_mux = REG_0X002A_RXWRCLK_MUX_FCLK2;
    }
    LMS7002M_regs_spi_write(self, 0x002A);
    9638:	00063001 	jmpi	6300 <LMS7002M_regs_spi_write>

0000963c <LMS7002M_set_mac_dir>:
    self->regs = regs;
}

void LMS7002M_set_mac_dir(LMS7002M_t *self, const LMS7002M_dir_t direction)
{
    switch (direction)
    963c:	00800044 	movi	r2,1
    9640:	28800426 	beq	r5,r2,9654 <LMS7002M_set_mac_dir+0x18>
    9644:	00800084 	movi	r2,2
    9648:	2880041e 	bne	r5,r2,965c <LMS7002M_set_mac_dir+0x20>
    {
    case LMS_RX: LMS7002M_set_mac_ch(self, LMS_CHA); break;
    964c:	01401044 	movi	r5,65
    9650:	00000106 	br	9658 <LMS7002M_set_mac_dir+0x1c>
    case LMS_TX: LMS7002M_set_mac_ch(self, LMS_CHB); break;
    9654:	01401084 	movi	r5,66
    9658:	00090c01 	jmpi	90c0 <LMS7002M_set_mac_ch>
    965c:	f800283a 	ret

00009660 <LMS7002M_set_diq_mux>:
    }
    return 0; //dont care
}

void LMS7002M_set_diq_mux(LMS7002M_t *self, const LMS7002M_dir_t direction, const int positions[4])
{
    9660:	defffb04 	addi	sp,sp,-20
    9664:	dcc00315 	stw	r19,12(sp)
    9668:	2827883a 	mov	r19,r5
    //LML is in global register space
    LMS7002M_set_mac_ch(self, LMS_CHAB);
    966c:	014010c4 	movi	r5,67
    }
    return 0; //dont care
}

void LMS7002M_set_diq_mux(LMS7002M_t *self, const LMS7002M_dir_t direction, const int positions[4])
{
    9670:	dc800215 	stw	r18,8(sp)
    9674:	dc000015 	stw	r16,0(sp)
    9678:	dfc00415 	stw	ra,16(sp)
    967c:	dc400115 	stw	r17,4(sp)
    9680:	2025883a 	mov	r18,r4
    9684:	3021883a 	mov	r16,r6
    //LML is in global register space
    LMS7002M_set_mac_ch(self, LMS_CHAB);
    9688:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    //set the same config on both ports, only one is used as per port config

    if (direction == LMS_TX)
    968c:	00800044 	movi	r2,1
    9690:	9880221e 	bne	r19,r2,971c <LMS7002M_set_diq_mux+0xbc>
    {
        self->regs->reg_0x0024_lml1_bqp = __lms7002m_diq_index(LMS7002M_LML_BQ, positions);
    9694:	94446917 	ldw	r17,4516(r18)
    9698:	800b883a 	mov	r5,r16
    969c:	010000c4 	movi	r4,3
    96a0:	000909c0 	call	909c <__lms7002m_diq_index>
        self->regs->reg_0x0024_lml1_bip = __lms7002m_diq_index(LMS7002M_LML_BI, positions);
    96a4:	800b883a 	mov	r5,r16
    96a8:	01000084 	movi	r4,2

    //set the same config on both ports, only one is used as per port config

    if (direction == LMS_TX)
    {
        self->regs->reg_0x0024_lml1_bqp = __lms7002m_diq_index(LMS7002M_LML_BQ, positions);
    96ac:	88803a15 	stw	r2,232(r17)
        self->regs->reg_0x0024_lml1_bip = __lms7002m_diq_index(LMS7002M_LML_BI, positions);
    96b0:	000909c0 	call	909c <__lms7002m_diq_index>
        self->regs->reg_0x0024_lml1_aqp = __lms7002m_diq_index(LMS7002M_LML_AQ, positions);
    96b4:	800b883a 	mov	r5,r16
    96b8:	9809883a 	mov	r4,r19
    //set the same config on both ports, only one is used as per port config

    if (direction == LMS_TX)
    {
        self->regs->reg_0x0024_lml1_bqp = __lms7002m_diq_index(LMS7002M_LML_BQ, positions);
        self->regs->reg_0x0024_lml1_bip = __lms7002m_diq_index(LMS7002M_LML_BI, positions);
    96bc:	88803b15 	stw	r2,236(r17)
        self->regs->reg_0x0024_lml1_aqp = __lms7002m_diq_index(LMS7002M_LML_AQ, positions);
    96c0:	000909c0 	call	909c <__lms7002m_diq_index>
        self->regs->reg_0x0024_lml1_aip = __lms7002m_diq_index(LMS7002M_LML_AI, positions);
    96c4:	800b883a 	mov	r5,r16
    96c8:	0009883a 	mov	r4,zero

    if (direction == LMS_TX)
    {
        self->regs->reg_0x0024_lml1_bqp = __lms7002m_diq_index(LMS7002M_LML_BQ, positions);
        self->regs->reg_0x0024_lml1_bip = __lms7002m_diq_index(LMS7002M_LML_BI, positions);
        self->regs->reg_0x0024_lml1_aqp = __lms7002m_diq_index(LMS7002M_LML_AQ, positions);
    96cc:	88803c15 	stw	r2,240(r17)
        self->regs->reg_0x0024_lml1_aip = __lms7002m_diq_index(LMS7002M_LML_AI, positions);
    96d0:	000909c0 	call	909c <__lms7002m_diq_index>
        self->regs->reg_0x0027_lml2_bqp = __lms7002m_diq_index(LMS7002M_LML_BQ, positions);
    96d4:	800b883a 	mov	r5,r16
    96d8:	010000c4 	movi	r4,3
    if (direction == LMS_TX)
    {
        self->regs->reg_0x0024_lml1_bqp = __lms7002m_diq_index(LMS7002M_LML_BQ, positions);
        self->regs->reg_0x0024_lml1_bip = __lms7002m_diq_index(LMS7002M_LML_BI, positions);
        self->regs->reg_0x0024_lml1_aqp = __lms7002m_diq_index(LMS7002M_LML_AQ, positions);
        self->regs->reg_0x0024_lml1_aip = __lms7002m_diq_index(LMS7002M_LML_AI, positions);
    96dc:	88803d15 	stw	r2,244(r17)
        self->regs->reg_0x0027_lml2_bqp = __lms7002m_diq_index(LMS7002M_LML_BQ, positions);
    96e0:	000909c0 	call	909c <__lms7002m_diq_index>
        self->regs->reg_0x0027_lml2_bip = __lms7002m_diq_index(LMS7002M_LML_BI, positions);
    96e4:	800b883a 	mov	r5,r16
    96e8:	01000084 	movi	r4,2
    {
        self->regs->reg_0x0024_lml1_bqp = __lms7002m_diq_index(LMS7002M_LML_BQ, positions);
        self->regs->reg_0x0024_lml1_bip = __lms7002m_diq_index(LMS7002M_LML_BI, positions);
        self->regs->reg_0x0024_lml1_aqp = __lms7002m_diq_index(LMS7002M_LML_AQ, positions);
        self->regs->reg_0x0024_lml1_aip = __lms7002m_diq_index(LMS7002M_LML_AI, positions);
        self->regs->reg_0x0027_lml2_bqp = __lms7002m_diq_index(LMS7002M_LML_BQ, positions);
    96ec:	88804415 	stw	r2,272(r17)
        self->regs->reg_0x0027_lml2_bip = __lms7002m_diq_index(LMS7002M_LML_BI, positions);
    96f0:	000909c0 	call	909c <__lms7002m_diq_index>
        self->regs->reg_0x0027_lml2_aqp = __lms7002m_diq_index(LMS7002M_LML_AQ, positions);
    96f4:	800b883a 	mov	r5,r16
    96f8:	9809883a 	mov	r4,r19
        self->regs->reg_0x0024_lml1_bqp = __lms7002m_diq_index(LMS7002M_LML_BQ, positions);
        self->regs->reg_0x0024_lml1_bip = __lms7002m_diq_index(LMS7002M_LML_BI, positions);
        self->regs->reg_0x0024_lml1_aqp = __lms7002m_diq_index(LMS7002M_LML_AQ, positions);
        self->regs->reg_0x0024_lml1_aip = __lms7002m_diq_index(LMS7002M_LML_AI, positions);
        self->regs->reg_0x0027_lml2_bqp = __lms7002m_diq_index(LMS7002M_LML_BQ, positions);
        self->regs->reg_0x0027_lml2_bip = __lms7002m_diq_index(LMS7002M_LML_BI, positions);
    96fc:	88804515 	stw	r2,276(r17)
        self->regs->reg_0x0027_lml2_aqp = __lms7002m_diq_index(LMS7002M_LML_AQ, positions);
    9700:	000909c0 	call	909c <__lms7002m_diq_index>
    9704:	88804615 	stw	r2,280(r17)
        self->regs->reg_0x0027_lml2_aip = __lms7002m_diq_index(LMS7002M_LML_AI, positions);
    9708:	800b883a 	mov	r5,r16
    970c:	0009883a 	mov	r4,zero
    9710:	000909c0 	call	909c <__lms7002m_diq_index>
    9714:	88804715 	stw	r2,284(r17)
    9718:	00001306 	br	9768 <LMS7002M_set_diq_mux+0x108>
    }

    if (direction == LMS_RX)
    971c:	00800084 	movi	r2,2
    9720:	9880111e 	bne	r19,r2,9768 <LMS7002M_set_diq_mux+0x108>
    {
        self->regs->reg_0x0024_lml1_s3s = positions[3];
    9724:	80c00317 	ldw	r3,12(r16)
    9728:	90846917 	ldw	r2,4516(r18)
    972c:	10c03615 	stw	r3,216(r2)
        self->regs->reg_0x0024_lml1_s2s = positions[2];
    9730:	80c00217 	ldw	r3,8(r16)
    9734:	10c03715 	stw	r3,220(r2)
        self->regs->reg_0x0024_lml1_s1s = positions[1];
    9738:	80c00117 	ldw	r3,4(r16)
    973c:	10c03815 	stw	r3,224(r2)
        self->regs->reg_0x0024_lml1_s0s = positions[0];
    9740:	80c00017 	ldw	r3,0(r16)
    9744:	10c03915 	stw	r3,228(r2)
        self->regs->reg_0x0027_lml2_s3s = positions[3];
    9748:	80c00317 	ldw	r3,12(r16)
    974c:	10c04015 	stw	r3,256(r2)
        self->regs->reg_0x0027_lml2_s2s = positions[2];
    9750:	80c00217 	ldw	r3,8(r16)
    9754:	10c04115 	stw	r3,260(r2)
        self->regs->reg_0x0027_lml2_s1s = positions[1];
    9758:	80c00117 	ldw	r3,4(r16)
    975c:	10c04215 	stw	r3,264(r2)
        self->regs->reg_0x0027_lml2_s0s = positions[0];
    9760:	80c00017 	ldw	r3,0(r16)
    9764:	10c04315 	stw	r3,268(r2)
    }

    LMS7002M_regs_spi_write(self, 0x0024);
    9768:	9009883a 	mov	r4,r18
    976c:	01400904 	movi	r5,36
    9770:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x0027);
    9774:	014009c4 	movi	r5,39
    9778:	9009883a 	mov	r4,r18
}
    977c:	dfc00417 	ldw	ra,16(sp)
    9780:	dcc00317 	ldw	r19,12(sp)
    9784:	dc800217 	ldw	r18,8(sp)
    9788:	dc400117 	ldw	r17,4(sp)
    978c:	dc000017 	ldw	r16,0(sp)
    9790:	dec00504 	addi	sp,sp,20
        self->regs->reg_0x0027_lml2_s1s = positions[1];
        self->regs->reg_0x0027_lml2_s0s = positions[0];
    }

    LMS7002M_regs_spi_write(self, 0x0024);
    LMS7002M_regs_spi_write(self, 0x0027);
    9794:	00063001 	jmpi	6300 <LMS7002M_regs_spi_write>

00009798 <default_handler>:
/***********************************************************************
 * Default log message handler implementation
 **********************************************************************/
void default_handler(const LMS7_log_level_t level, const char *message)
{
    switch (level)
    9798:	213fffc4 	addi	r4,r4,-1
    979c:	008001c4 	movi	r2,7

/***********************************************************************
 * Default log message handler implementation
 **********************************************************************/
void default_handler(const LMS7_log_level_t level, const char *message)
{
    97a0:	280d883a 	mov	r6,r5
    switch (level)
    97a4:	11002936 	bltu	r2,r4,984c <default_handler+0xb4>
    97a8:	200890ba 	slli	r4,r4,2
    97ac:	00800074 	movhi	r2,1
    97b0:	10a5f104 	addi	r2,r2,-26684
    97b4:	2089883a 	add	r4,r4,r2
    97b8:	20c00017 	ldw	r3,0(r4)
    97bc:	d0a00417 	ldw	r2,-32752(gp)
    97c0:	1800683a 	jmp	r3
    97c4:	000097e4 	muli	zero,zero,607
    97c8:	000097f0 	cmpltui	zero,zero,607
    97cc:	00009800 	call	980 <main+0x34>
    97d0:	0000980c 	andi	zero,zero,608
    97d4:	00009818 	cmpnei	zero,zero,608
    97d8:	00009824 	muli	zero,zero,608
    97dc:	00009830 	cmpltui	zero,zero,608
    97e0:	0000983c 	xorhi	zero,zero,608
    {
    case LMS7_FATAL:    fprintf(stderr, ANSI_COLOR_BOLD ANSI_COLOR_RED "[FATAL] %s" ANSI_COLOR_RESET "\n", message); break;
    97e4:	014000f4 	movhi	r5,3
    97e8:	29644e04 	addi	r5,r5,-28360
    97ec:	00000206 	br	97f8 <default_handler+0x60>
    case LMS7_CRITICAL: fprintf(stderr, ANSI_COLOR_BOLD ANSI_COLOR_RED "[CRITICAL] %s" ANSI_COLOR_RESET "\n", message); break;
    97f0:	014000f4 	movhi	r5,3
    97f4:	29645504 	addi	r5,r5,-28332
    97f8:	11000317 	ldw	r4,12(r2)
    97fc:	00001206 	br	9848 <default_handler+0xb0>
    case LMS7_ERROR:    fprintf(stderr, ANSI_COLOR_BOLD ANSI_COLOR_RED "[ERROR] %s" ANSI_COLOR_RESET "\n", message); break;
    9800:	014000f4 	movhi	r5,3
    9804:	29645c04 	addi	r5,r5,-28304
    9808:	003ffb06 	br	97f8 <__alt_data_end+0xfffcaff8>
    case LMS7_WARNING:  fprintf(stderr, ANSI_COLOR_BOLD ANSI_COLOR_YELLOW "[WARNING] %s" ANSI_COLOR_RESET "\n", message); break;
    980c:	014000f4 	movhi	r5,3
    9810:	29646304 	addi	r5,r5,-28276
    9814:	003ff806 	br	97f8 <__alt_data_end+0xfffcaff8>
    case LMS7_NOTICE:   fprintf(stdout, ANSI_COLOR_GREEN "[NOTICE] %s" ANSI_COLOR_RESET "\n", message); break;
    9818:	014000f4 	movhi	r5,3
    981c:	29646a04 	addi	r5,r5,-28248
    9820:	00000806 	br	9844 <default_handler+0xac>
    case LMS7_INFO:     fprintf(stdout, "[INFO] %s\n", message); break;
    9824:	014000f4 	movhi	r5,3
    9828:	29647004 	addi	r5,r5,-28224
    982c:	00000506 	br	9844 <default_handler+0xac>
    case LMS7_DEBUG:    fprintf(stdout, "[DEBUG] %s\n", message); break;
    9830:	014000f4 	movhi	r5,3
    9834:	29647304 	addi	r5,r5,-28212
    9838:	00000206 	br	9844 <default_handler+0xac>
    case LMS7_TRACE:    fprintf(stdout, "[TRACE] %s\n", message); break;
    983c:	014000f4 	movhi	r5,3
    9840:	29647604 	addi	r5,r5,-28200
    9844:	11000217 	ldw	r4,8(r2)
    9848:	0010c141 	jmpi	10c14 <fprintf>
    984c:	f800283a 	ret

00009850 <LMS7_set_log_level>:
static LMS7_log_level_t _log_level = LMS7_NOTICE;
static LMS7_log_handler_t _log_handler = default_handler;

void LMS7_set_log_level(const LMS7_log_level_t level)
{
    _log_level = level;
    9850:	d1200115 	stw	r4,-32764(gp)
    9854:	f800283a 	ret

00009858 <LMS7_log>:
}

void LMS7_log(const LMS7_log_level_t level, const char *message)
{
    if (level > _log_level) return;
    9858:	d0a00117 	ldw	r2,-32764(gp)
    985c:	11000236 	bltu	r2,r4,9868 <LMS7_log+0x10>
    _log_handler(level, message);
    9860:	d0a00017 	ldw	r2,-32768(gp)
    9864:	1000683a 	jmp	r2
    9868:	f800283a 	ret

0000986c <LMS7_vlogf>:
}

void LMS7_vlogf(const LMS7_log_level_t level, const char *format, va_list args)
{
    if (level > _log_level) return;
    986c:	d0a00117 	ldw	r2,-32764(gp)
    9870:	11000b36 	bltu	r2,r4,98a0 <LMS7_vlogf+0x34>
    if (level > _log_level) return;
    _log_handler(level, message);
}

void LMS7_vlogf(const LMS7_log_level_t level, const char *format, va_list args)
{
    9874:	defffe04 	addi	sp,sp,-8
    9878:	dc000015 	stw	r16,0(sp)
    if (level > _log_level) return;
    char *message;
    //if (vasprintf(&message, format, args) < 0) return;
    LMS7_log(level, message);
    987c:	0021883a 	mov	r16,zero
    9880:	800b883a 	mov	r5,r16
    if (level > _log_level) return;
    _log_handler(level, message);
}

void LMS7_vlogf(const LMS7_log_level_t level, const char *format, va_list args)
{
    9884:	dfc00115 	stw	ra,4(sp)
    if (level > _log_level) return;
    char *message;
    //if (vasprintf(&message, format, args) < 0) return;
    LMS7_log(level, message);
    9888:	00098580 	call	9858 <LMS7_log>
    free(message);
    988c:	8009883a 	mov	r4,r16
}
    9890:	dfc00117 	ldw	ra,4(sp)
    9894:	dc000017 	ldw	r16,0(sp)
    9898:	dec00204 	addi	sp,sp,8
{
    if (level > _log_level) return;
    char *message;
    //if (vasprintf(&message, format, args) < 0) return;
    LMS7_log(level, message);
    free(message);
    989c:	0011e1c1 	jmpi	11e1c <free>
    98a0:	f800283a 	ret

000098a4 <LMS7_set_log_handler>:
}

void LMS7_set_log_handler(const LMS7_log_handler_t handler)
{
    _log_handler = handler;
    98a4:	d1200015 	stw	r4,-32768(gp)
    98a8:	f800283a 	ret

000098ac <LMS7002M_set_nco_freq>:

#include <stdlib.h>
#include "LMS7002M_impl.h"

void LMS7002M_set_nco_freq(LMS7002M_t *self, const LMS7002M_dir_t direction, const LMS7002M_chan_t channel, const double freqRel)
{
    98ac:	defff804 	addi	sp,sp,-32
    98b0:	dc400115 	stw	r17,4(sp)
    98b4:	2023883a 	mov	r17,r4
    printf("Test de funcion");
    98b8:	010000f4 	movhi	r4,3
    98bc:	21247904 	addi	r4,r4,-28188

#include <stdlib.h>
#include "LMS7002M_impl.h"

void LMS7002M_set_nco_freq(LMS7002M_t *self, const LMS7002M_dir_t direction, const LMS7002M_chan_t channel, const double freqRel)
{
    98c0:	dfc00615 	stw	ra,24(sp)
    98c4:	dd400515 	stw	r21,20(sp)
    98c8:	dd000415 	stw	r20,16(sp)
    98cc:	dc800215 	stw	r18,8(sp)
    98d0:	dc000015 	stw	r16,0(sp)
    98d4:	2825883a 	mov	r18,r5
    98d8:	3021883a 	mov	r16,r6
    98dc:	d9c00715 	stw	r7,28(sp)
    98e0:	382b883a 	mov	r21,r7
    98e4:	dcc00315 	stw	r19,12(sp)
    98e8:	dd000817 	ldw	r20,32(sp)
    printf("Test de funcion");
    98ec:	0012b7c0 	call	12b7c <printf>
    LMS7002M_set_mac_ch(self, channel);
    98f0:	800b883a 	mov	r5,r16
    98f4:	8809883a 	mov	r4,r17
    98f8:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    //handle sign flip for RX NCO on newer masks of the RFIC
    int sign = 1;
    if (self->regs->reg_0x002f_mask != 0 && direction == LMS_RX) sign = -1;
    98fc:	8c046917 	ldw	r16,4516(r17)
    9900:	80805b17 	ldw	r2,364(r16)
    9904:	10000226 	beq	r2,zero,9910 <LMS7002M_set_nco_freq+0x64>
    9908:	00800084 	movi	r2,2
    990c:	90800226 	beq	r18,r2,9918 <LMS7002M_set_nco_freq+0x6c>
{
    printf("Test de funcion");
    LMS7002M_set_mac_ch(self, channel);

    //handle sign flip for RX NCO on newer masks of the RFIC
    int sign = 1;
    9910:	04c00044 	movi	r19,1
    9914:	00000106 	br	991c <LMS7002M_set_nco_freq+0x70>
    if (self->regs->reg_0x002f_mask != 0 && direction == LMS_RX) sign = -1;
    9918:	04ffffc4 	movi	r19,-1

    uint32_t freqWord = sign*(int32_t)(freqRel*4294967296.0);
    991c:	000d883a 	mov	r6,zero
    9920:	01d07c34 	movhi	r7,16880
    9924:	a809883a 	mov	r4,r21
    9928:	a00b883a 	mov	r5,r20
    992c:	0026f740 	call	26f74 <__muldf3>
    9930:	180b883a 	mov	r5,r3
    9934:	1009883a 	mov	r4,r2
    9938:	00280dc0 	call	280dc <__fixdfsi>
    993c:	1009883a 	mov	r4,r2
    9940:	980b883a 	mov	r5,r19
    9944:	002587c0 	call	2587c <__mulsi3>
    const int freqHi = freqWord >> 16;
    const int freqLo = freqWord & 0xffff;

    if (direction == LMS_TX)
    9948:	01000044 	movi	r4,1
    //handle sign flip for RX NCO on newer masks of the RFIC
    int sign = 1;
    if (self->regs->reg_0x002f_mask != 0 && direction == LMS_RX) sign = -1;

    uint32_t freqWord = sign*(int32_t)(freqRel*4294967296.0);
    const int freqHi = freqWord >> 16;
    994c:	1006d43a 	srli	r3,r2,16
    const int freqLo = freqWord & 0xffff;
    9950:	10bfffcc 	andi	r2,r2,65535

    if (direction == LMS_TX)
    9954:	9100051e 	bne	r18,r4,996c <LMS7002M_set_nco_freq+0xc0>
    {
        self->regs->reg_0x0240_sel = 0; //table entry 0 will be used
    9958:	8001ec15 	stw	zero,1968(r16)
        self->regs->reg_0x0240_mode = REG_0X0240_MODE_FCW;
    995c:	8001ed15 	stw	zero,1972(r16)

        //load 32-bit frequency word into table entry 0
        self->regs->reg_0x0242_fcw0_hi = freqHi;
    9960:	80c1ef15 	stw	r3,1980(r16)
        self->regs->reg_0x0243_fcw0_lo = freqLo;
    9964:	8081f015 	stw	r2,1984(r16)
    9968:	00001806 	br	99cc <LMS7002M_set_nco_freq+0x120>
    }

    if (direction == LMS_RX)
    996c:	01000084 	movi	r4,2
    9970:	9100161e 	bne	r18,r4,99cc <LMS7002M_set_nco_freq+0x120>
    {
        self->regs->reg_0x0440_sel = 0; //table entry 0 will be used
    9974:	80021915 	stw	zero,2148(r16)
        self->regs->reg_0x0440_mode = REG_0X0440_MODE_FCW;
    9978:	80021a15 	stw	zero,2152(r16)

        //load 32-bit frequency word into table entry 0
        self->regs->reg_0x0442_fcw0_hi = freqHi;
    997c:	80c21c15 	stw	r3,2160(r16)
        self->regs->reg_0x0443_fcw0_lo = freqLo;
    9980:	80821d15 	stw	r2,2164(r16)
    }

    //write the registers
    const int addrTop = (direction==LMS_RX)?0x0400:0x0200;
    9984:	04010004 	movi	r16,1024
    LMS7002M_regs_spi_write(self, addrTop | 0x0040);
    9988:	81401014 	ori	r5,r16,64
    998c:	8809883a 	mov	r4,r17
    9990:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, addrTop | 0x0042);
    9994:	81401094 	ori	r5,r16,66
    9998:	8809883a 	mov	r4,r17
    999c:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, addrTop | 0x0043);
    99a0:	814010d4 	ori	r5,r16,67
    99a4:	8809883a 	mov	r4,r17
}
    99a8:	dfc00617 	ldw	ra,24(sp)
    99ac:	dd400517 	ldw	r21,20(sp)
    99b0:	dd000417 	ldw	r20,16(sp)
    99b4:	dcc00317 	ldw	r19,12(sp)
    99b8:	dc800217 	ldw	r18,8(sp)
    99bc:	dc400117 	ldw	r17,4(sp)
    99c0:	dc000017 	ldw	r16,0(sp)
    99c4:	dec00804 	addi	sp,sp,32

    //write the registers
    const int addrTop = (direction==LMS_RX)?0x0400:0x0200;
    LMS7002M_regs_spi_write(self, addrTop | 0x0040);
    LMS7002M_regs_spi_write(self, addrTop | 0x0042);
    LMS7002M_regs_spi_write(self, addrTop | 0x0043);
    99c8:	00063001 	jmpi	6300 <LMS7002M_regs_spi_write>
        self->regs->reg_0x0442_fcw0_hi = freqHi;
        self->regs->reg_0x0443_fcw0_lo = freqLo;
    }

    //write the registers
    const int addrTop = (direction==LMS_RX)?0x0400:0x0200;
    99cc:	04008004 	movi	r16,512
    99d0:	003fed06 	br	9988 <__alt_data_end+0xfffcb188>

000099d4 <LMS7002M_rbb_enable>:
#include "LMS7002M_impl.h"
#include <math.h> //pow
#include <LMS7002M/LMS7002M_logger.h>

void LMS7002M_rbb_enable(LMS7002M_t *self, const LMS7002M_chan_t channel, const bool enable)
{
    99d4:	defffd04 	addi	sp,sp,-12
    99d8:	dfc00215 	stw	ra,8(sp)
    99dc:	dc400115 	stw	r17,4(sp)
    99e0:	dc000015 	stw	r16,0(sp)
    99e4:	3023883a 	mov	r17,r6
    99e8:	2021883a 	mov	r16,r4
    LMS7002M_set_mac_ch(self, channel);
    99ec:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>
    self->regs->reg_0x0124_en_dir_rbb = 1;
    99f0:	80846917 	ldw	r2,4516(r16)
    99f4:	00c00044 	movi	r3,1
    LMS7002M_regs_spi_write(self, 0x0124);
    99f8:	8009883a 	mov	r4,r16
#include <LMS7002M/LMS7002M_logger.h>

void LMS7002M_rbb_enable(LMS7002M_t *self, const LMS7002M_chan_t channel, const bool enable)
{
    LMS7002M_set_mac_ch(self, channel);
    self->regs->reg_0x0124_en_dir_rbb = 1;
    99fc:	10c1c315 	stw	r3,1804(r2)
    LMS7002M_regs_spi_write(self, 0x0124);
    9a00:	01404904 	movi	r5,292
    9a04:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    self->regs->reg_0x0115_en_g_rbb = enable?1:0;
    9a08:	80846917 	ldw	r2,4516(r16)
    9a0c:	8c403fcc 	andi	r17,r17,255
    self->regs->reg_0x0115_pd_pga_rbb = 0;

    LMS7002M_regs_spi_write(self, 0x0115);
    9a10:	01404544 	movi	r5,277
    9a14:	8009883a 	mov	r4,r16
{
    LMS7002M_set_mac_ch(self, channel);
    self->regs->reg_0x0124_en_dir_rbb = 1;
    LMS7002M_regs_spi_write(self, 0x0124);

    self->regs->reg_0x0115_en_g_rbb = enable?1:0;
    9a18:	14418815 	stw	r17,1568(r2)
    self->regs->reg_0x0115_pd_pga_rbb = 0;
    9a1c:	10018715 	stw	zero,1564(r2)

    LMS7002M_regs_spi_write(self, 0x0115);
}
    9a20:	dfc00217 	ldw	ra,8(sp)
    9a24:	dc400117 	ldw	r17,4(sp)
    9a28:	dc000017 	ldw	r16,0(sp)
    9a2c:	dec00304 	addi	sp,sp,12
    LMS7002M_regs_spi_write(self, 0x0124);

    self->regs->reg_0x0115_en_g_rbb = enable?1:0;
    self->regs->reg_0x0115_pd_pga_rbb = 0;

    LMS7002M_regs_spi_write(self, 0x0115);
    9a30:	00063001 	jmpi	6300 <LMS7002M_regs_spi_write>

00009a34 <LMS7002M_rbb_set_path>:
}

void LMS7002M_rbb_set_path(LMS7002M_t *self, const LMS7002M_chan_t channel, const int path)
{
    9a34:	defffd04 	addi	sp,sp,-12
    9a38:	dc400115 	stw	r17,4(sp)
    9a3c:	dc000015 	stw	r16,0(sp)
    9a40:	2023883a 	mov	r17,r4
    9a44:	dfc00215 	stw	ra,8(sp)
    9a48:	3021883a 	mov	r16,r6
    LMS7002M_set_mac_ch(self, channel);
    9a4c:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    self->regs->reg_0x0115_pd_lpfh_rbb = 1;
    9a50:	88846917 	ldw	r2,4516(r17)
    9a54:	00c00044 	movi	r3,1
    self->regs->reg_0x0115_pd_lpfl_rbb = 1;
    self->regs->reg_0x0115_en_lb_lpfh_rbb = 0;
    self->regs->reg_0x0115_en_lb_lpfl_rbb = 0;

    switch (path)
    9a58:	01000084 	movi	r4,2

void LMS7002M_rbb_set_path(LMS7002M_t *self, const LMS7002M_chan_t channel, const int path)
{
    LMS7002M_set_mac_ch(self, channel);

    self->regs->reg_0x0115_pd_lpfh_rbb = 1;
    9a5c:	10c18515 	stw	r3,1556(r2)
    self->regs->reg_0x0115_pd_lpfl_rbb = 1;
    9a60:	10c18615 	stw	r3,1560(r2)
    self->regs->reg_0x0115_en_lb_lpfh_rbb = 0;
    9a64:	10018315 	stw	zero,1548(r2)
    self->regs->reg_0x0115_en_lb_lpfl_rbb = 0;
    9a68:	10018415 	stw	zero,1552(r2)

    switch (path)
    9a6c:	81001626 	beq	r16,r4,9ac8 <LMS7002M_rbb_set_path+0x94>
    9a70:	24000516 	blt	r4,r16,9a88 <LMS7002M_rbb_set_path+0x54>
    9a74:	80001026 	beq	r16,zero,9ab8 <LMS7002M_rbb_set_path+0x84>
    9a78:	80c0161e 	bne	r16,r3,9ad4 <LMS7002M_rbb_set_path+0xa0>
    case LMS7002M_RBB_LB_BYP:
        self->regs->reg_0x0118_input_ctl_pga_rbb = REG_0X0118_INPUT_CTL_PGA_RBB_TBB;
        break;

    case LMS7002M_RBB_LB_LBF:
        self->regs->reg_0x0115_pd_lpfl_rbb = 0;
    9a7c:	10018615 	stw	zero,1560(r2)
        self->regs->reg_0x0115_en_lb_lpfl_rbb = 1;
    9a80:	14018415 	stw	r16,1552(r2)
    9a84:	00000e06 	br	9ac0 <LMS7002M_rbb_set_path+0x8c>
    self->regs->reg_0x0115_pd_lpfh_rbb = 1;
    self->regs->reg_0x0115_pd_lpfl_rbb = 1;
    self->regs->reg_0x0115_en_lb_lpfh_rbb = 0;
    self->regs->reg_0x0115_en_lb_lpfl_rbb = 0;

    switch (path)
    9a88:	01401204 	movi	r5,72
    9a8c:	81400826 	beq	r16,r5,9ab0 <LMS7002M_rbb_set_path+0x7c>
    9a90:	00c01304 	movi	r3,76
    9a94:	80c00426 	beq	r16,r3,9aa8 <LMS7002M_rbb_set_path+0x74>
    9a98:	00c01084 	movi	r3,66
    9a9c:	80c00d1e 	bne	r16,r3,9ad4 <LMS7002M_rbb_set_path+0xa0>
    {
    case LMS7002M_RBB_BYP:
        self->regs->reg_0x0118_input_ctl_pga_rbb = REG_0X0118_INPUT_CTL_PGA_RBB_BYPASS;
    9aa0:	11018e15 	stw	r4,1592(r2)
        break;
    9aa4:	00000b06 	br	9ad4 <LMS7002M_rbb_set_path+0xa0>

    case LMS7002M_RBB_LBF:
        self->regs->reg_0x0115_pd_lpfl_rbb = 0;
    9aa8:	10018615 	stw	zero,1560(r2)
    9aac:	00000406 	br	9ac0 <LMS7002M_rbb_set_path+0x8c>
        self->regs->reg_0x0118_input_ctl_pga_rbb = REG_0X0118_INPUT_CTL_PGA_RBB_LPFL;
        break;

    case LMS7002M_RBB_HBF:
        self->regs->reg_0x0115_pd_lpfh_rbb = 0;
    9ab0:	10018515 	stw	zero,1556(r2)
    9ab4:	00000606 	br	9ad0 <LMS7002M_rbb_set_path+0x9c>
        self->regs->reg_0x0118_input_ctl_pga_rbb = REG_0X0118_INPUT_CTL_PGA_RBB_LPFH;
        break;

    case LMS7002M_RBB_LB_BYP:
        self->regs->reg_0x0118_input_ctl_pga_rbb = REG_0X0118_INPUT_CTL_PGA_RBB_TBB;
    9ab8:	00c000c4 	movi	r3,3
    9abc:	00000406 	br	9ad0 <LMS7002M_rbb_set_path+0x9c>
        break;

    case LMS7002M_RBB_LB_LBF:
        self->regs->reg_0x0115_pd_lpfl_rbb = 0;
        self->regs->reg_0x0115_en_lb_lpfl_rbb = 1;
        self->regs->reg_0x0118_input_ctl_pga_rbb = REG_0X0118_INPUT_CTL_PGA_RBB_LPFL;
    9ac0:	10018e15 	stw	zero,1592(r2)
        break;
    9ac4:	00000306 	br	9ad4 <LMS7002M_rbb_set_path+0xa0>

    case LMS7002M_RBB_LB_HBF:
        self->regs->reg_0x0115_pd_lpfh_rbb = 0;
    9ac8:	10018515 	stw	zero,1556(r2)
        self->regs->reg_0x0115_en_lb_lpfh_rbb = 1;
    9acc:	10c18315 	stw	r3,1548(r2)
        self->regs->reg_0x0118_input_ctl_pga_rbb = REG_0X0118_INPUT_CTL_PGA_RBB_LPFH;
    9ad0:	10c18e15 	stw	r3,1592(r2)
        break;
    }

    LMS7002M_regs_spi_write(self, 0x0115);
    9ad4:	8809883a 	mov	r4,r17
    9ad8:	01404544 	movi	r5,277
    9adc:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x0118);
    9ae0:	01404604 	movi	r5,280
    9ae4:	8809883a 	mov	r4,r17
}
    9ae8:	dfc00217 	ldw	ra,8(sp)
    9aec:	dc400117 	ldw	r17,4(sp)
    9af0:	dc000017 	ldw	r16,0(sp)
    9af4:	dec00304 	addi	sp,sp,12
        self->regs->reg_0x0118_input_ctl_pga_rbb = REG_0X0118_INPUT_CTL_PGA_RBB_LPFH;
        break;
    }

    LMS7002M_regs_spi_write(self, 0x0115);
    LMS7002M_regs_spi_write(self, 0x0118);
    9af8:	00063001 	jmpi	6300 <LMS7002M_regs_spi_write>

00009afc <LMS7002M_rbb_set_test_out>:
}

void LMS7002M_rbb_set_test_out(LMS7002M_t *self, const LMS7002M_chan_t channel, const bool enable)
{
    9afc:	defffd04 	addi	sp,sp,-12
    9b00:	dc400115 	stw	r17,4(sp)
    9b04:	dc000015 	stw	r16,0(sp)
    9b08:	2023883a 	mov	r17,r4
    9b0c:	3021883a 	mov	r16,r6
    9b10:	dfc00215 	stw	ra,8(sp)
    LMS7002M_set_mac_ch(self, channel);
    9b14:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    self->regs->reg_0x0119_osw_pga_rbb = enable?1:0;
    9b18:	88846917 	ldw	r2,4516(r17)
    9b1c:	84003fcc 	andi	r16,r16,255

    LMS7002M_regs_spi_write(self, 0x0119);
    9b20:	01404644 	movi	r5,281
    9b24:	8809883a 	mov	r4,r17

void LMS7002M_rbb_set_test_out(LMS7002M_t *self, const LMS7002M_chan_t channel, const bool enable)
{
    LMS7002M_set_mac_ch(self, channel);

    self->regs->reg_0x0119_osw_pga_rbb = enable?1:0;
    9b28:	14019115 	stw	r16,1604(r2)

    LMS7002M_regs_spi_write(self, 0x0119);
}
    9b2c:	dfc00217 	ldw	ra,8(sp)
    9b30:	dc400117 	ldw	r17,4(sp)
    9b34:	dc000017 	ldw	r16,0(sp)
    9b38:	dec00304 	addi	sp,sp,12
{
    LMS7002M_set_mac_ch(self, channel);

    self->regs->reg_0x0119_osw_pga_rbb = enable?1:0;

    LMS7002M_regs_spi_write(self, 0x0119);
    9b3c:	00063001 	jmpi	6300 <LMS7002M_regs_spi_write>

00009b40 <LMS7002M_rbb_set_pga>:
}

double LMS7002M_rbb_set_pga(LMS7002M_t *self, const LMS7002M_chan_t channel, const double gain)
{
    9b40:	defffa04 	addi	sp,sp,-24
    9b44:	dfc00515 	stw	ra,20(sp)
    9b48:	dc800215 	stw	r18,8(sp)
    9b4c:	dc400115 	stw	r17,4(sp)
    9b50:	3025883a 	mov	r18,r6
    9b54:	2023883a 	mov	r17,r4
    9b58:	dc000015 	stw	r16,0(sp)
    9b5c:	dd000415 	stw	r20,16(sp)
    9b60:	3821883a 	mov	r16,r7
    9b64:	dcc00315 	stw	r19,12(sp)
    LMS7002M_set_mac_ch(self, channel);
    9b68:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    int G_PGA_RBB = (int)(gain + 12.5);
    9b6c:	9009883a 	mov	r4,r18
    9b70:	000d883a 	mov	r6,zero
    9b74:	01d00a74 	movhi	r7,16425
    9b78:	800b883a 	mov	r5,r16
    9b7c:	0025aa00 	call	25aa0 <__adddf3>
    9b80:	180b883a 	mov	r5,r3
    9b84:	1009883a 	mov	r4,r2
    9b88:	00280dc0 	call	280dc <__fixdfsi>
    if (G_PGA_RBB > 0x1f) G_PGA_RBB = 0x1f;
    9b8c:	00c007c4 	movi	r3,31
    9b90:	8c846917 	ldw	r18,4516(r17)
    9b94:	18805b16 	blt	r3,r2,9d04 <LMS7002M_rbb_set_pga+0x1c4>
    9b98:	1021883a 	mov	r16,r2
    9b9c:	1000010e 	bge	r2,zero,9ba4 <LMS7002M_rbb_set_pga+0x64>
    9ba0:	0021883a 	mov	r16,zero
    if (G_PGA_RBB < 0) G_PGA_RBB = 0;
    self->regs->reg_0x0119_g_pga_rbb = G_PGA_RBB;

    self->regs->reg_0x011a_rcc_ctl_pga_rbb = (430.0*pow(0.65, (G_PGA_RBB/10.0))-110.35)/20.4516 + 16;
    9ba4:	8009883a 	mov	r4,r16
    LMS7002M_set_mac_ch(self, channel);

    int G_PGA_RBB = (int)(gain + 12.5);
    if (G_PGA_RBB > 0x1f) G_PGA_RBB = 0x1f;
    if (G_PGA_RBB < 0) G_PGA_RBB = 0;
    self->regs->reg_0x0119_g_pga_rbb = G_PGA_RBB;
    9ba8:	94019415 	stw	r16,1616(r18)

    self->regs->reg_0x011a_rcc_ctl_pga_rbb = (430.0*pow(0.65, (G_PGA_RBB/10.0))-110.35)/20.4516 + 16;
    9bac:	002815c0 	call	2815c <__floatsidf>
    9bb0:	000d883a 	mov	r6,zero
    9bb4:	01d00934 	movhi	r7,16420
    9bb8:	1009883a 	mov	r4,r2
    9bbc:	180b883a 	mov	r5,r3
    9bc0:	1029883a 	mov	r20,r2
    9bc4:	1827883a 	mov	r19,r3
    9bc8:	002634c0 	call	2634c <__divdf3>
    9bcc:	01333374 	movhi	r4,52429
    9bd0:	014ff974 	movhi	r5,16357
    9bd4:	100d883a 	mov	r6,r2
    9bd8:	180f883a 	mov	r7,r3
    9bdc:	21333344 	addi	r4,r4,-13107
    9be0:	29733304 	addi	r5,r5,-13108
    9be4:	000e7280 	call	e728 <pow>
    9be8:	01d01ef4 	movhi	r7,16507
    9bec:	000d883a 	mov	r6,zero
    9bf0:	39f80004 	addi	r7,r7,-8192
    9bf4:	1009883a 	mov	r4,r2
    9bf8:	180b883a 	mov	r5,r3
    9bfc:	0026f740 	call	26f74 <__muldf3>
    9c00:	019999b4 	movhi	r6,26214
    9c04:	01d01734 	movhi	r7,16476
    9c08:	31999984 	addi	r6,r6,26214
    9c0c:	39e59984 	addi	r7,r7,-27034
    9c10:	1009883a 	mov	r4,r2
    9c14:	180b883a 	mov	r5,r3
    9c18:	00277e00 	call	277e0 <__subdf3>
    9c1c:	0183aff4 	movhi	r6,3775
    9c20:	01d00d34 	movhi	r7,16436
    9c24:	31b7e904 	addi	r6,r6,-8284
    9c28:	39dce704 	addi	r7,r7,29596
    9c2c:	1009883a 	mov	r4,r2
    9c30:	180b883a 	mov	r5,r3
    9c34:	002634c0 	call	2634c <__divdf3>
    9c38:	000d883a 	mov	r6,zero
    9c3c:	01d00c34 	movhi	r7,16432
    9c40:	1009883a 	mov	r4,r2
    9c44:	180b883a 	mov	r5,r3
    9c48:	0025aa00 	call	25aa0 <__adddf3>
    9c4c:	180b883a 	mov	r5,r3
    9c50:	1009883a 	mov	r4,r2
    9c54:	00280dc0 	call	280dc <__fixdfsi>
    9c58:	90819515 	stw	r2,1620(r18)

    if (0 <= G_PGA_RBB && G_PGA_RBB < 8) self->regs->reg_0x011a_c_ctl_pga_rbb = 3;
    9c5c:	00c001c4 	movi	r3,7
    9c60:	8005883a 	mov	r2,r16
    9c64:	1c000316 	blt	r3,r16,9c74 <LMS7002M_rbb_set_pga+0x134>
    9c68:	88c46917 	ldw	r3,4516(r17)
    9c6c:	010000c4 	movi	r4,3
    9c70:	19019615 	stw	r4,1624(r3)
    if (8 <= G_PGA_RBB && G_PGA_RBB < 13) self->regs->reg_0x011a_c_ctl_pga_rbb = 2;
    9c74:	10fffe04 	addi	r3,r2,-8
    9c78:	01000104 	movi	r4,4
    9c7c:	20c00336 	bltu	r4,r3,9c8c <LMS7002M_rbb_set_pga+0x14c>
    9c80:	88c46917 	ldw	r3,4516(r17)
    9c84:	01000084 	movi	r4,2
    9c88:	19019615 	stw	r4,1624(r3)
    if (13 <= G_PGA_RBB && G_PGA_RBB < 21) self->regs->reg_0x011a_c_ctl_pga_rbb = 1;
    9c8c:	10bffcc4 	addi	r2,r2,-13
    9c90:	00c001c4 	movi	r3,7
    9c94:	18800436 	bltu	r3,r2,9ca8 <LMS7002M_rbb_set_pga+0x168>
    9c98:	88846917 	ldw	r2,4516(r17)
    9c9c:	00c00044 	movi	r3,1
    9ca0:	10c19615 	stw	r3,1624(r2)
    9ca4:	00000406 	br	9cb8 <LMS7002M_rbb_set_pga+0x178>
    if (21 <= G_PGA_RBB) self->regs->reg_0x011a_c_ctl_pga_rbb = 0;
    9ca8:	00800504 	movi	r2,20
    9cac:	1400020e 	bge	r2,r16,9cb8 <LMS7002M_rbb_set_pga+0x178>
    9cb0:	88846917 	ldw	r2,4516(r17)
    9cb4:	10019615 	stw	zero,1624(r2)

    LMS7002M_regs_spi_write(self, 0x0119);
    9cb8:	8809883a 	mov	r4,r17
    9cbc:	01404644 	movi	r5,281
    9cc0:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x011A);
    9cc4:	8809883a 	mov	r4,r17
    9cc8:	01404684 	movi	r5,282
    9ccc:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    return G_PGA_RBB - 12.0;
    9cd0:	000d883a 	mov	r6,zero
    9cd4:	01d00a34 	movhi	r7,16424
    9cd8:	a009883a 	mov	r4,r20
    9cdc:	980b883a 	mov	r5,r19
    9ce0:	00277e00 	call	277e0 <__subdf3>
}
    9ce4:	dfc00517 	ldw	ra,20(sp)
    9ce8:	dd000417 	ldw	r20,16(sp)
    9cec:	dcc00317 	ldw	r19,12(sp)
    9cf0:	dc800217 	ldw	r18,8(sp)
    9cf4:	dc400117 	ldw	r17,4(sp)
    9cf8:	dc000017 	ldw	r16,0(sp)
    9cfc:	dec00604 	addi	sp,sp,24
    9d00:	f800283a 	ret
    int G_PGA_RBB = (int)(gain + 12.5);
    if (G_PGA_RBB > 0x1f) G_PGA_RBB = 0x1f;
    if (G_PGA_RBB < 0) G_PGA_RBB = 0;
    self->regs->reg_0x0119_g_pga_rbb = G_PGA_RBB;

    self->regs->reg_0x011a_rcc_ctl_pga_rbb = (430.0*pow(0.65, (G_PGA_RBB/10.0))-110.35)/20.4516 + 16;
    9d04:	00800404 	movi	r2,16
    9d08:	90819515 	stw	r2,1620(r18)
    LMS7002M_set_mac_ch(self, channel);

    int G_PGA_RBB = (int)(gain + 12.5);
    if (G_PGA_RBB > 0x1f) G_PGA_RBB = 0x1f;
    if (G_PGA_RBB < 0) G_PGA_RBB = 0;
    self->regs->reg_0x0119_g_pga_rbb = G_PGA_RBB;
    9d0c:	90c19415 	stw	r3,1616(r18)

    self->regs->reg_0x011a_rcc_ctl_pga_rbb = (430.0*pow(0.65, (G_PGA_RBB/10.0))-110.35)/20.4516 + 16;

    if (0 <= G_PGA_RBB && G_PGA_RBB < 8) self->regs->reg_0x011a_c_ctl_pga_rbb = 3;
    9d10:	1805883a 	mov	r2,r3
    int G_PGA_RBB = (int)(gain + 12.5);
    if (G_PGA_RBB > 0x1f) G_PGA_RBB = 0x1f;
    if (G_PGA_RBB < 0) G_PGA_RBB = 0;
    self->regs->reg_0x0119_g_pga_rbb = G_PGA_RBB;

    self->regs->reg_0x011a_rcc_ctl_pga_rbb = (430.0*pow(0.65, (G_PGA_RBB/10.0))-110.35)/20.4516 + 16;
    9d14:	0029883a 	mov	r20,zero
    9d18:	04d00ff4 	movhi	r19,16447
double LMS7002M_rbb_set_pga(LMS7002M_t *self, const LMS7002M_chan_t channel, const double gain)
{
    LMS7002M_set_mac_ch(self, channel);

    int G_PGA_RBB = (int)(gain + 12.5);
    if (G_PGA_RBB > 0x1f) G_PGA_RBB = 0x1f;
    9d1c:	1821883a 	mov	r16,r3
    9d20:	003fd406 	br	9c74 <__alt_data_end+0xfffcb474>

00009d24 <LMS7002M_rfe_enable>:

#include <stdlib.h>
#include "LMS7002M_impl.h"

void LMS7002M_rfe_enable(LMS7002M_t *self, const LMS7002M_chan_t channel, const bool enable)
{
    9d24:	defffb04 	addi	sp,sp,-20
    9d28:	dfc00415 	stw	ra,16(sp)
    9d2c:	dcc00315 	stw	r19,12(sp)
    9d30:	dc800215 	stw	r18,8(sp)
    9d34:	dc400115 	stw	r17,4(sp)
    9d38:	dc000015 	stw	r16,0(sp)
    9d3c:	2023883a 	mov	r17,r4
    9d40:	3021883a 	mov	r16,r6
    9d44:	2827883a 	mov	r19,r5
    LMS7002M_set_mac_ch(self, channel);
    9d48:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>
    self->regs->reg_0x0124_en_dir_rfe = 1;
    9d4c:	88846917 	ldw	r2,4516(r17)
    9d50:	00c00044 	movi	r3,1
    LMS7002M_regs_spi_write(self, 0x0124);
    9d54:	01404904 	movi	r5,292
#include "LMS7002M_impl.h"

void LMS7002M_rfe_enable(LMS7002M_t *self, const LMS7002M_chan_t channel, const bool enable)
{
    LMS7002M_set_mac_ch(self, channel);
    self->regs->reg_0x0124_en_dir_rfe = 1;
    9d58:	10c1c415 	stw	r3,1808(r2)
    LMS7002M_regs_spi_write(self, 0x0124);
    9d5c:	8809883a 	mov	r4,r17
    9d60:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    self->regs->reg_0x010c_en_g_rfe = enable?1:0;
    9d64:	88846917 	ldw	r2,4516(r17)
    self->regs->reg_0x010c_pd_mxlobuf_rfe = enable?0:1;
    9d68:	8180005c 	xori	r6,r16,1
    9d6c:	31803fcc 	andi	r6,r6,255
{
    LMS7002M_set_mac_ch(self, channel);
    self->regs->reg_0x0124_en_dir_rfe = 1;
    LMS7002M_regs_spi_write(self, 0x0124);

    self->regs->reg_0x010c_en_g_rfe = enable?1:0;
    9d70:	84803fcc 	andi	r18,r16,255
    self->regs->reg_0x010c_pd_mxlobuf_rfe = enable?0:1;
    self->regs->reg_0x010c_pd_qgen_rfe = enable?0:1;
    self->regs->reg_0x010c_pd_tia_rfe = enable?0:1;
    self->regs->reg_0x010c_pd_lna_rfe = enable?0:1;
    LMS7002M_regs_spi_write(self, 0x010C);
    9d74:	01404304 	movi	r5,268
{
    LMS7002M_set_mac_ch(self, channel);
    self->regs->reg_0x0124_en_dir_rfe = 1;
    LMS7002M_regs_spi_write(self, 0x0124);

    self->regs->reg_0x010c_en_g_rfe = enable?1:0;
    9d78:	14816a15 	stw	r18,1448(r2)
    self->regs->reg_0x010c_pd_mxlobuf_rfe = enable?0:1;
    9d7c:	11816615 	stw	r6,1432(r2)
    self->regs->reg_0x010c_pd_qgen_rfe = enable?0:1;
    9d80:	11816715 	stw	r6,1436(r2)
    self->regs->reg_0x010c_pd_tia_rfe = enable?0:1;
    9d84:	11816915 	stw	r6,1444(r2)
    self->regs->reg_0x010c_pd_lna_rfe = enable?0:1;
    9d88:	11816315 	stw	r6,1420(r2)
    LMS7002M_regs_spi_write(self, 0x010C);
    9d8c:	8809883a 	mov	r4,r17
    9d90:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    //the chB LO enable register is a chA register
    if (channel != LMS_CHA)
    9d94:	01401044 	movi	r5,65
    9d98:	99400d26 	beq	r19,r5,9dd0 <LMS7002M_rfe_enable+0xac>
    {
        LMS7002M_set_mac_ch(self, LMS_CHA);
    9d9c:	8809883a 	mov	r4,r17
    9da0:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>
        self->regs->reg_0x010d_en_nextrx_rfe = enable?1:0;
    9da4:	88846917 	ldw	r2,4516(r17)
        LMS7002M_regs_spi_write(self, 0x010d);
    9da8:	01404344 	movi	r5,269
    9dac:	8809883a 	mov	r4,r17

    //the chB LO enable register is a chA register
    if (channel != LMS_CHA)
    {
        LMS7002M_set_mac_ch(self, LMS_CHA);
        self->regs->reg_0x010d_en_nextrx_rfe = enable?1:0;
    9db0:	14817115 	stw	r18,1476(r2)
        LMS7002M_regs_spi_write(self, 0x010d);
    }
}
    9db4:	dfc00417 	ldw	ra,16(sp)
    9db8:	dcc00317 	ldw	r19,12(sp)
    9dbc:	dc800217 	ldw	r18,8(sp)
    9dc0:	dc400117 	ldw	r17,4(sp)
    9dc4:	dc000017 	ldw	r16,0(sp)
    9dc8:	dec00504 	addi	sp,sp,20
    //the chB LO enable register is a chA register
    if (channel != LMS_CHA)
    {
        LMS7002M_set_mac_ch(self, LMS_CHA);
        self->regs->reg_0x010d_en_nextrx_rfe = enable?1:0;
        LMS7002M_regs_spi_write(self, 0x010d);
    9dcc:	00063001 	jmpi	6300 <LMS7002M_regs_spi_write>
    }
}
    9dd0:	dfc00417 	ldw	ra,16(sp)
    9dd4:	dcc00317 	ldw	r19,12(sp)
    9dd8:	dc800217 	ldw	r18,8(sp)
    9ddc:	dc400117 	ldw	r17,4(sp)
    9de0:	dc000017 	ldw	r16,0(sp)
    9de4:	dec00504 	addi	sp,sp,20
    9de8:	f800283a 	ret

00009dec <LMS7002M_rfe_set_path>:

void LMS7002M_rfe_set_path(LMS7002M_t *self, const LMS7002M_chan_t channel, const int path)
{
    9dec:	defffc04 	addi	sp,sp,-16
    9df0:	dc800215 	stw	r18,8(sp)
    9df4:	dc400115 	stw	r17,4(sp)
    9df8:	dc000015 	stw	r16,0(sp)
    9dfc:	2023883a 	mov	r17,r4
    9e00:	dfc00315 	stw	ra,12(sp)
    9e04:	2825883a 	mov	r18,r5
    9e08:	3021883a 	mov	r16,r6
    LMS7002M_set_mac_ch(self, channel);
    9e0c:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>
    self->regs->reg_0x010c_pd_lna_rfe = 1;
    9e10:	88846917 	ldw	r2,4516(r17)
    9e14:	00c00044 	movi	r3,1
    self->regs->reg_0x010d_en_inshsw_lb1_rfe = 1;
    self->regs->reg_0x010d_en_inshsw_lb2_rfe = 1;
    self->regs->reg_0x010d_sel_path_rfe = REG_0X010D_SEL_PATH_RFE_NONE;
    bool enb_trf_loopback = false;

    switch (path)
    9e18:	01001204 	movi	r4,72
}

void LMS7002M_rfe_set_path(LMS7002M_t *self, const LMS7002M_chan_t channel, const int path)
{
    LMS7002M_set_mac_ch(self, channel);
    self->regs->reg_0x010c_pd_lna_rfe = 1;
    9e1c:	10c16315 	stw	r3,1420(r2)
    self->regs->reg_0x010c_pd_rloopb_1_rfe = 1;
    9e20:	10c16415 	stw	r3,1424(r2)
    self->regs->reg_0x010c_pd_rloopb_2_rfe = 1;
    9e24:	10c16515 	stw	r3,1428(r2)
    self->regs->reg_0x010d_en_inshsw_l_rfe = 1;
    9e28:	10c16f15 	stw	r3,1468(r2)
    self->regs->reg_0x010d_en_inshsw_w_rfe = 1;
    9e2c:	10c17015 	stw	r3,1472(r2)
    self->regs->reg_0x010d_en_inshsw_lb1_rfe = 1;
    9e30:	10c16d15 	stw	r3,1460(r2)
    self->regs->reg_0x010d_en_inshsw_lb2_rfe = 1;
    9e34:	10c16e15 	stw	r3,1464(r2)
    self->regs->reg_0x010d_sel_path_rfe = REG_0X010D_SEL_PATH_RFE_NONE;
    bool enb_trf_loopback = false;

    switch (path)
    9e38:	81001726 	beq	r16,r4,9e98 <LMS7002M_rfe_set_path+0xac>
    9e3c:	24000516 	blt	r4,r16,9e54 <LMS7002M_rfe_set_path+0x68>
    9e40:	01000c44 	movi	r4,49
    9e44:	81000926 	beq	r16,r4,9e6c <LMS7002M_rfe_set_path+0x80>
    9e48:	01000c84 	movi	r4,50
    9e4c:	81000c26 	beq	r16,r4,9e80 <LMS7002M_rfe_set_path+0x94>
    9e50:	00000406 	br	9e64 <LMS7002M_rfe_set_path+0x78>
    9e54:	00c01304 	movi	r3,76
    9e58:	80c01226 	beq	r16,r3,9ea4 <LMS7002M_rfe_set_path+0xb8>
    9e5c:	00c015c4 	movi	r3,87
    9e60:	80c01526 	beq	r16,r3,9eb8 <LMS7002M_rfe_set_path+0xcc>
    self->regs->reg_0x010c_pd_rloopb_2_rfe = 1;
    self->regs->reg_0x010d_en_inshsw_l_rfe = 1;
    self->regs->reg_0x010d_en_inshsw_w_rfe = 1;
    self->regs->reg_0x010d_en_inshsw_lb1_rfe = 1;
    self->regs->reg_0x010d_en_inshsw_lb2_rfe = 1;
    self->regs->reg_0x010d_sel_path_rfe = REG_0X010D_SEL_PATH_RFE_NONE;
    9e64:	10016b15 	stw	zero,1452(r2)
    9e68:	00001706 	br	9ec8 <LMS7002M_rfe_set_path+0xdc>
    bool enb_trf_loopback = false;

    switch (path)
    {
    case LMS7002M_RFE_LB1:
        self->regs->reg_0x010d_sel_path_rfe = REG_0X010D_SEL_PATH_RFE_LNAW;
    9e6c:	010000c4 	movi	r4,3
    9e70:	11016b15 	stw	r4,1452(r2)
        self->regs->reg_0x010c_pd_rloopb_1_rfe = 0;
    9e74:	10016415 	stw	zero,1424(r2)
        self->regs->reg_0x010d_en_inshsw_lb1_rfe = 0;
    9e78:	10016d15 	stw	zero,1460(r2)
    9e7c:	00000406 	br	9e90 <LMS7002M_rfe_set_path+0xa4>
        enb_trf_loopback = true;
        break;

    case LMS7002M_RFE_LB2:
        self->regs->reg_0x010d_sel_path_rfe = REG_0X010D_SEL_PATH_RFE_LNAL;
    9e80:	01000084 	movi	r4,2
    9e84:	11016b15 	stw	r4,1452(r2)
        self->regs->reg_0x010c_pd_rloopb_2_rfe = 0;
    9e88:	10016515 	stw	zero,1428(r2)
        self->regs->reg_0x010d_en_inshsw_lb2_rfe = 0;
    9e8c:	10016e15 	stw	zero,1464(r2)
        enb_trf_loopback = true;
    9e90:	1821883a 	mov	r16,r3
        break;
    9e94:	00000d06 	br	9ecc <LMS7002M_rfe_set_path+0xe0>

    case LMS7002M_RFE_NONE:
        break;

    case LMS7002M_RFE_LNAH:
        self->regs->reg_0x010d_sel_path_rfe = REG_0X010D_SEL_PATH_RFE_LNAH;
    9e98:	10c16b15 	stw	r3,1452(r2)
        self->regs->reg_0x010c_pd_lna_rfe = 0;
    9e9c:	10016315 	stw	zero,1420(r2)
    9ea0:	00000906 	br	9ec8 <LMS7002M_rfe_set_path+0xdc>
        break;

    case LMS7002M_RFE_LNAL:
        self->regs->reg_0x010d_sel_path_rfe = REG_0X010D_SEL_PATH_RFE_LNAL;
    9ea4:	00c00084 	movi	r3,2
    9ea8:	10c16b15 	stw	r3,1452(r2)
        self->regs->reg_0x010c_pd_lna_rfe = 0;
    9eac:	10016315 	stw	zero,1420(r2)
        self->regs->reg_0x010d_en_inshsw_l_rfe = 0;
    9eb0:	10016f15 	stw	zero,1468(r2)
    9eb4:	00000406 	br	9ec8 <LMS7002M_rfe_set_path+0xdc>
        break;

    case LMS7002M_RFE_LNAW:
        self->regs->reg_0x010d_sel_path_rfe = REG_0X010D_SEL_PATH_RFE_LNAW;
    9eb8:	00c000c4 	movi	r3,3
    9ebc:	10c16b15 	stw	r3,1452(r2)
        self->regs->reg_0x010c_pd_lna_rfe = 0;
    9ec0:	10016315 	stw	zero,1420(r2)
        self->regs->reg_0x010d_en_inshsw_w_rfe = 0;
    9ec4:	10017015 	stw	zero,1472(r2)
    self->regs->reg_0x010d_en_inshsw_l_rfe = 1;
    self->regs->reg_0x010d_en_inshsw_w_rfe = 1;
    self->regs->reg_0x010d_en_inshsw_lb1_rfe = 1;
    self->regs->reg_0x010d_en_inshsw_lb2_rfe = 1;
    self->regs->reg_0x010d_sel_path_rfe = REG_0X010D_SEL_PATH_RFE_NONE;
    bool enb_trf_loopback = false;
    9ec8:	0021883a 	mov	r16,zero
        self->regs->reg_0x010c_pd_lna_rfe = 0;
        self->regs->reg_0x010d_en_inshsw_w_rfe = 0;
        break;
    }

    LMS7002M_regs_spi_write(self, 0x010C);
    9ecc:	8809883a 	mov	r4,r17
    9ed0:	01404304 	movi	r5,268
    9ed4:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x010D);
    9ed8:	8809883a 	mov	r4,r17
    9edc:	01404344 	movi	r5,269
    9ee0:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_trf_enable_loopback(self, channel, enb_trf_loopback);
    9ee4:	81803fcc 	andi	r6,r16,255
    9ee8:	900b883a 	mov	r5,r18
    9eec:	8809883a 	mov	r4,r17
}
    9ef0:	dfc00317 	ldw	ra,12(sp)
    9ef4:	dc800217 	ldw	r18,8(sp)
    9ef8:	dc400117 	ldw	r17,4(sp)
    9efc:	dc000017 	ldw	r16,0(sp)
    9f00:	dec00404 	addi	sp,sp,16
        break;
    }

    LMS7002M_regs_spi_write(self, 0x010C);
    LMS7002M_regs_spi_write(self, 0x010D);
    LMS7002M_trf_enable_loopback(self, channel, enb_trf_loopback);
    9f04:	000c7e01 	jmpi	c7e0 <LMS7002M_trf_enable_loopback>

00009f08 <LMS7002M_rfe_set_lna>:
}

double LMS7002M_rfe_set_lna(LMS7002M_t *self, const LMS7002M_chan_t channel, const double gain)
{
    9f08:	defffb04 	addi	sp,sp,-20
    9f0c:	dcc00315 	stw	r19,12(sp)
    9f10:	dc000015 	stw	r16,0(sp)
    9f14:	2027883a 	mov	r19,r4
    9f18:	2821883a 	mov	r16,r5
    9f1c:	3009883a 	mov	r4,r6
    9f20:	380b883a 	mov	r5,r7
    const double gmax = 30;
    double val = gain - gmax;
    9f24:	000d883a 	mov	r6,zero
    9f28:	01d00fb4 	movhi	r7,16446
    LMS7002M_regs_spi_write(self, 0x010D);
    LMS7002M_trf_enable_loopback(self, channel, enb_trf_loopback);
}

double LMS7002M_rfe_set_lna(LMS7002M_t *self, const LMS7002M_chan_t channel, const double gain)
{
    9f2c:	dfc00415 	stw	ra,16(sp)
    9f30:	dc800215 	stw	r18,8(sp)
    9f34:	dc400115 	stw	r17,4(sp)
    const double gmax = 30;
    double val = gain - gmax;
    9f38:	00277e00 	call	277e0 <__subdf3>

    LMS7002M_set_mac_ch(self, channel);
    9f3c:	800b883a 	mov	r5,r16
    9f40:	9809883a 	mov	r4,r19
}

double LMS7002M_rfe_set_lna(LMS7002M_t *self, const LMS7002M_chan_t channel, const double gain)
{
    const double gmax = 30;
    double val = gain - gmax;
    9f44:	1025883a 	mov	r18,r2
    9f48:	1823883a 	mov	r17,r3

    LMS7002M_set_mac_ch(self, channel);
    9f4c:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    if (val >= 0) self->regs->reg_0x0113_g_lna_rfe = 15, val = 0;
    9f50:	000d883a 	mov	r6,zero
    9f54:	000f883a 	mov	r7,zero
    9f58:	9009883a 	mov	r4,r18
    9f5c:	880b883a 	mov	r5,r17
    9f60:	0026da40 	call	26da4 <__gedf2>
    9f64:	9c046917 	ldw	r16,4516(r19)
    9f68:	10000416 	blt	r2,zero,9f7c <LMS7002M_rfe_set_lna+0x74>
    9f6c:	008003c4 	movi	r2,15
    9f70:	80817e15 	stw	r2,1528(r16)
    9f74:	0021883a 	mov	r16,zero
    9f78:	00008506 	br	a190 <LMS7002M_rfe_set_lna+0x288>
    else if (val >= -1) self->regs->reg_0x0113_g_lna_rfe = 14, val = -1;
    9f7c:	000d883a 	mov	r6,zero
    9f80:	01effc34 	movhi	r7,49136
    9f84:	9009883a 	mov	r4,r18
    9f88:	880b883a 	mov	r5,r17
    9f8c:	0026da40 	call	26da4 <__gedf2>
    9f90:	10000416 	blt	r2,zero,9fa4 <LMS7002M_rfe_set_lna+0x9c>
    9f94:	00800384 	movi	r2,14
    9f98:	80817e15 	stw	r2,1528(r16)
    9f9c:	042ffc34 	movhi	r16,49136
    9fa0:	00007b06 	br	a190 <LMS7002M_rfe_set_lna+0x288>
    else if (val >= -2) self->regs->reg_0x0113_g_lna_rfe = 13, val = -2;
    9fa4:	000d883a 	mov	r6,zero
    9fa8:	01f00034 	movhi	r7,49152
    9fac:	9009883a 	mov	r4,r18
    9fb0:	880b883a 	mov	r5,r17
    9fb4:	0026da40 	call	26da4 <__gedf2>
    9fb8:	10000416 	blt	r2,zero,9fcc <LMS7002M_rfe_set_lna+0xc4>
    9fbc:	00800344 	movi	r2,13
    9fc0:	80817e15 	stw	r2,1528(r16)
    9fc4:	04300034 	movhi	r16,49152
    9fc8:	00007106 	br	a190 <LMS7002M_rfe_set_lna+0x288>
    else if (val >= -3) self->regs->reg_0x0113_g_lna_rfe = 12, val = -3;
    9fcc:	000d883a 	mov	r6,zero
    9fd0:	01f00234 	movhi	r7,49160
    9fd4:	9009883a 	mov	r4,r18
    9fd8:	880b883a 	mov	r5,r17
    9fdc:	0026da40 	call	26da4 <__gedf2>
    9fe0:	10000416 	blt	r2,zero,9ff4 <LMS7002M_rfe_set_lna+0xec>
    9fe4:	00800304 	movi	r2,12
    9fe8:	80817e15 	stw	r2,1528(r16)
    9fec:	04300234 	movhi	r16,49160
    9ff0:	00006706 	br	a190 <LMS7002M_rfe_set_lna+0x288>
    else if (val >= -4) self->regs->reg_0x0113_g_lna_rfe = 11, val = -4;
    9ff4:	000d883a 	mov	r6,zero
    9ff8:	01f00434 	movhi	r7,49168
    9ffc:	9009883a 	mov	r4,r18
    a000:	880b883a 	mov	r5,r17
    a004:	0026da40 	call	26da4 <__gedf2>
    a008:	10000416 	blt	r2,zero,a01c <LMS7002M_rfe_set_lna+0x114>
    a00c:	008002c4 	movi	r2,11
    a010:	80817e15 	stw	r2,1528(r16)
    a014:	04300434 	movhi	r16,49168
    a018:	00005d06 	br	a190 <LMS7002M_rfe_set_lna+0x288>
    else if (val >= -5) self->regs->reg_0x0113_g_lna_rfe = 10, val = -5;
    a01c:	000d883a 	mov	r6,zero
    a020:	01f00534 	movhi	r7,49172
    a024:	9009883a 	mov	r4,r18
    a028:	880b883a 	mov	r5,r17
    a02c:	0026da40 	call	26da4 <__gedf2>
    a030:	10000416 	blt	r2,zero,a044 <LMS7002M_rfe_set_lna+0x13c>
    a034:	00800284 	movi	r2,10
    a038:	80817e15 	stw	r2,1528(r16)
    a03c:	04300534 	movhi	r16,49172
    a040:	00005306 	br	a190 <LMS7002M_rfe_set_lna+0x288>
    else if (val >= -6) self->regs->reg_0x0113_g_lna_rfe = 9, val = -6;
    a044:	000d883a 	mov	r6,zero
    a048:	01f00634 	movhi	r7,49176
    a04c:	9009883a 	mov	r4,r18
    a050:	880b883a 	mov	r5,r17
    a054:	0026da40 	call	26da4 <__gedf2>
    a058:	10000416 	blt	r2,zero,a06c <LMS7002M_rfe_set_lna+0x164>
    a05c:	00800244 	movi	r2,9
    a060:	80817e15 	stw	r2,1528(r16)
    a064:	04300634 	movhi	r16,49176
    a068:	00004906 	br	a190 <LMS7002M_rfe_set_lna+0x288>
    else if (val >= -9) self->regs->reg_0x0113_g_lna_rfe = 8, val = -9;
    a06c:	000d883a 	mov	r6,zero
    a070:	01f008b4 	movhi	r7,49186
    a074:	9009883a 	mov	r4,r18
    a078:	880b883a 	mov	r5,r17
    a07c:	0026da40 	call	26da4 <__gedf2>
    a080:	10000416 	blt	r2,zero,a094 <LMS7002M_rfe_set_lna+0x18c>
    a084:	00800204 	movi	r2,8
    a088:	80817e15 	stw	r2,1528(r16)
    a08c:	043008b4 	movhi	r16,49186
    a090:	00003f06 	br	a190 <LMS7002M_rfe_set_lna+0x288>
    else if (val >= -12) self->regs->reg_0x0113_g_lna_rfe = 7, val = -12;
    a094:	000d883a 	mov	r6,zero
    a098:	01f00a34 	movhi	r7,49192
    a09c:	9009883a 	mov	r4,r18
    a0a0:	880b883a 	mov	r5,r17
    a0a4:	0026da40 	call	26da4 <__gedf2>
    a0a8:	10000416 	blt	r2,zero,a0bc <LMS7002M_rfe_set_lna+0x1b4>
    a0ac:	008001c4 	movi	r2,7
    a0b0:	80817e15 	stw	r2,1528(r16)
    a0b4:	04300a34 	movhi	r16,49192
    a0b8:	00003506 	br	a190 <LMS7002M_rfe_set_lna+0x288>
    else if (val >= -15) self->regs->reg_0x0113_g_lna_rfe = 6, val = -15;
    a0bc:	000d883a 	mov	r6,zero
    a0c0:	01f00bb4 	movhi	r7,49198
    a0c4:	9009883a 	mov	r4,r18
    a0c8:	880b883a 	mov	r5,r17
    a0cc:	0026da40 	call	26da4 <__gedf2>
    a0d0:	10000416 	blt	r2,zero,a0e4 <LMS7002M_rfe_set_lna+0x1dc>
    a0d4:	00800184 	movi	r2,6
    a0d8:	80817e15 	stw	r2,1528(r16)
    a0dc:	04300bb4 	movhi	r16,49198
    a0e0:	00002b06 	br	a190 <LMS7002M_rfe_set_lna+0x288>
    else if (val >= -18) self->regs->reg_0x0113_g_lna_rfe = 5, val = -18;
    a0e4:	000d883a 	mov	r6,zero
    a0e8:	01f00cb4 	movhi	r7,49202
    a0ec:	9009883a 	mov	r4,r18
    a0f0:	880b883a 	mov	r5,r17
    a0f4:	0026da40 	call	26da4 <__gedf2>
    a0f8:	10000416 	blt	r2,zero,a10c <LMS7002M_rfe_set_lna+0x204>
    a0fc:	00800144 	movi	r2,5
    a100:	80817e15 	stw	r2,1528(r16)
    a104:	04300cb4 	movhi	r16,49202
    a108:	00002106 	br	a190 <LMS7002M_rfe_set_lna+0x288>
    else if (val >= -21) self->regs->reg_0x0113_g_lna_rfe = 4, val = -21;
    a10c:	000d883a 	mov	r6,zero
    a110:	01f00d74 	movhi	r7,49205
    a114:	9009883a 	mov	r4,r18
    a118:	880b883a 	mov	r5,r17
    a11c:	0026da40 	call	26da4 <__gedf2>
    a120:	10000416 	blt	r2,zero,a134 <LMS7002M_rfe_set_lna+0x22c>
    a124:	00800104 	movi	r2,4
    a128:	80817e15 	stw	r2,1528(r16)
    a12c:	04300d74 	movhi	r16,49205
    a130:	00001706 	br	a190 <LMS7002M_rfe_set_lna+0x288>
    else if (val >= -24) self->regs->reg_0x0113_g_lna_rfe = 3, val = -24;
    a134:	000d883a 	mov	r6,zero
    a138:	01f00e34 	movhi	r7,49208
    a13c:	9009883a 	mov	r4,r18
    a140:	880b883a 	mov	r5,r17
    a144:	0026da40 	call	26da4 <__gedf2>
    a148:	10000416 	blt	r2,zero,a15c <LMS7002M_rfe_set_lna+0x254>
    a14c:	008000c4 	movi	r2,3
    a150:	80817e15 	stw	r2,1528(r16)
    a154:	04300e34 	movhi	r16,49208
    a158:	00000d06 	br	a190 <LMS7002M_rfe_set_lna+0x288>
    else if (val >= -27) self->regs->reg_0x0113_g_lna_rfe = 2, val = -27;
    a15c:	000d883a 	mov	r6,zero
    a160:	01f00ef4 	movhi	r7,49211
    a164:	9009883a 	mov	r4,r18
    a168:	880b883a 	mov	r5,r17
    a16c:	0026da40 	call	26da4 <__gedf2>
    a170:	10000416 	blt	r2,zero,a184 <LMS7002M_rfe_set_lna+0x27c>
    a174:	00800084 	movi	r2,2
    a178:	80817e15 	stw	r2,1528(r16)
    a17c:	04300ef4 	movhi	r16,49211
    a180:	00000306 	br	a190 <LMS7002M_rfe_set_lna+0x288>
    else self->regs->reg_0x0113_g_lna_rfe = 1, val = -30;
    a184:	00800044 	movi	r2,1
    a188:	80817e15 	stw	r2,1528(r16)
    a18c:	04300fb4 	movhi	r16,49214

    LMS7002M_regs_spi_write(self, 0x0113);
    a190:	9809883a 	mov	r4,r19
    a194:	014044c4 	movi	r5,275
    a198:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    return val + gmax;
    a19c:	000d883a 	mov	r6,zero
    a1a0:	01d00fb4 	movhi	r7,16446
    a1a4:	0009883a 	mov	r4,zero
    a1a8:	800b883a 	mov	r5,r16
    a1ac:	0025aa00 	call	25aa0 <__adddf3>
}
    a1b0:	dfc00417 	ldw	ra,16(sp)
    a1b4:	dcc00317 	ldw	r19,12(sp)
    a1b8:	dc800217 	ldw	r18,8(sp)
    a1bc:	dc400117 	ldw	r17,4(sp)
    a1c0:	dc000017 	ldw	r16,0(sp)
    a1c4:	dec00504 	addi	sp,sp,20
    a1c8:	f800283a 	ret

0000a1cc <LMS7002M_rfe_set_loopback_lna>:

double LMS7002M_rfe_set_loopback_lna(LMS7002M_t *self, const LMS7002M_chan_t channel, const double gain)
{
    a1cc:	defffb04 	addi	sp,sp,-20
    a1d0:	dcc00315 	stw	r19,12(sp)
    a1d4:	dc000015 	stw	r16,0(sp)
    a1d8:	2027883a 	mov	r19,r4
    a1dc:	2821883a 	mov	r16,r5
    a1e0:	3009883a 	mov	r4,r6
    a1e4:	380b883a 	mov	r5,r7
    const double gmax = 40;
    double val = gain - gmax;
    a1e8:	000d883a 	mov	r6,zero
    a1ec:	01d01134 	movhi	r7,16452

    return val + gmax;
}

double LMS7002M_rfe_set_loopback_lna(LMS7002M_t *self, const LMS7002M_chan_t channel, const double gain)
{
    a1f0:	dfc00415 	stw	ra,16(sp)
    a1f4:	dc800215 	stw	r18,8(sp)
    a1f8:	dc400115 	stw	r17,4(sp)
    const double gmax = 40;
    double val = gain - gmax;
    a1fc:	00277e00 	call	277e0 <__subdf3>

    LMS7002M_set_mac_ch(self, channel);
    a200:	800b883a 	mov	r5,r16
    a204:	9809883a 	mov	r4,r19
}

double LMS7002M_rfe_set_loopback_lna(LMS7002M_t *self, const LMS7002M_chan_t channel, const double gain)
{
    const double gmax = 40;
    double val = gain - gmax;
    a208:	1025883a 	mov	r18,r2
    a20c:	1823883a 	mov	r17,r3

    LMS7002M_set_mac_ch(self, channel);
    a210:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    if (val >= 0) self->regs->reg_0x0113_g_rxloopb_rfe = 15, val = 0;
    a214:	000d883a 	mov	r6,zero
    a218:	000f883a 	mov	r7,zero
    a21c:	9009883a 	mov	r4,r18
    a220:	880b883a 	mov	r5,r17
    a224:	0026da40 	call	26da4 <__gedf2>
    a228:	9c046917 	ldw	r16,4516(r19)
    a22c:	10000516 	blt	r2,zero,a244 <LMS7002M_rfe_set_loopback_lna+0x78>
    a230:	008003c4 	movi	r2,15
    a234:	80817f15 	stw	r2,1532(r16)
    a238:	0023883a 	mov	r17,zero
    a23c:	0021883a 	mov	r16,zero
    a240:	0000a906 	br	a4e8 <LMS7002M_rfe_set_loopback_lna+0x31c>
    else if (val >= -0.5) self->regs->reg_0x0113_g_rxloopb_rfe = 14, val = -0.5;
    a244:	000d883a 	mov	r6,zero
    a248:	01eff834 	movhi	r7,49120
    a24c:	9009883a 	mov	r4,r18
    a250:	880b883a 	mov	r5,r17
    a254:	0026da40 	call	26da4 <__gedf2>
    a258:	10000516 	blt	r2,zero,a270 <LMS7002M_rfe_set_loopback_lna+0xa4>
    a25c:	00800384 	movi	r2,14
    a260:	80817f15 	stw	r2,1532(r16)
    a264:	0023883a 	mov	r17,zero
    a268:	042ff834 	movhi	r16,49120
    a26c:	00009e06 	br	a4e8 <LMS7002M_rfe_set_loopback_lna+0x31c>
    else if (val >= -1) self->regs->reg_0x0113_g_rxloopb_rfe = 13, val = -1;
    a270:	000d883a 	mov	r6,zero
    a274:	01effc34 	movhi	r7,49136
    a278:	9009883a 	mov	r4,r18
    a27c:	880b883a 	mov	r5,r17
    a280:	0026da40 	call	26da4 <__gedf2>
    a284:	10000516 	blt	r2,zero,a29c <LMS7002M_rfe_set_loopback_lna+0xd0>
    a288:	00800344 	movi	r2,13
    a28c:	80817f15 	stw	r2,1532(r16)
    a290:	0023883a 	mov	r17,zero
    a294:	042ffc34 	movhi	r16,49136
    a298:	00009306 	br	a4e8 <LMS7002M_rfe_set_loopback_lna+0x31c>
    else if (val >= -1.6) self->regs->reg_0x0113_g_rxloopb_rfe = 12, val = -1.6;
    a29c:	01a666b4 	movhi	r6,39322
    a2a0:	01effeb4 	movhi	r7,49146
    a2a4:	31a66684 	addi	r6,r6,-26214
    a2a8:	39e66644 	addi	r7,r7,-26215
    a2ac:	9009883a 	mov	r4,r18
    a2b0:	880b883a 	mov	r5,r17
    a2b4:	0026da40 	call	26da4 <__gedf2>
    a2b8:	10000716 	blt	r2,zero,a2d8 <LMS7002M_rfe_set_loopback_lna+0x10c>
    a2bc:	00800304 	movi	r2,12
    a2c0:	80817f15 	stw	r2,1532(r16)
    a2c4:	046666b4 	movhi	r17,39322
    a2c8:	042ffeb4 	movhi	r16,49146
    a2cc:	8c666684 	addi	r17,r17,-26214
    a2d0:	84266644 	addi	r16,r16,-26215
    a2d4:	00008406 	br	a4e8 <LMS7002M_rfe_set_loopback_lna+0x31c>
    else if (val >= -2.4) self->regs->reg_0x0113_g_rxloopb_rfe = 11, val = -2.4;
    a2d8:	018cccf4 	movhi	r6,13107
    a2dc:	01f000f4 	movhi	r7,49155
    a2e0:	318cccc4 	addi	r6,r6,13107
    a2e4:	39ccccc4 	addi	r7,r7,13107
    a2e8:	9009883a 	mov	r4,r18
    a2ec:	880b883a 	mov	r5,r17
    a2f0:	0026da40 	call	26da4 <__gedf2>
    a2f4:	10000716 	blt	r2,zero,a314 <LMS7002M_rfe_set_loopback_lna+0x148>
    a2f8:	008002c4 	movi	r2,11
    a2fc:	80817f15 	stw	r2,1532(r16)
    a300:	044cccf4 	movhi	r17,13107
    a304:	043000f4 	movhi	r16,49155
    a308:	8c4cccc4 	addi	r17,r17,13107
    a30c:	840cccc4 	addi	r16,r16,13107
    a310:	00007506 	br	a4e8 <LMS7002M_rfe_set_loopback_lna+0x31c>
    else if (val >= -3) self->regs->reg_0x0113_g_rxloopb_rfe = 10, val = -3;
    a314:	000d883a 	mov	r6,zero
    a318:	01f00234 	movhi	r7,49160
    a31c:	9009883a 	mov	r4,r18
    a320:	880b883a 	mov	r5,r17
    a324:	0026da40 	call	26da4 <__gedf2>
    a328:	10000516 	blt	r2,zero,a340 <LMS7002M_rfe_set_loopback_lna+0x174>
    a32c:	00800284 	movi	r2,10
    a330:	80817f15 	stw	r2,1532(r16)
    a334:	0023883a 	mov	r17,zero
    a338:	04300234 	movhi	r16,49160
    a33c:	00006a06 	br	a4e8 <LMS7002M_rfe_set_loopback_lna+0x31c>
    else if (val >= -4) self->regs->reg_0x0113_g_rxloopb_rfe = 9, val = -4;
    a340:	000d883a 	mov	r6,zero
    a344:	01f00434 	movhi	r7,49168
    a348:	9009883a 	mov	r4,r18
    a34c:	880b883a 	mov	r5,r17
    a350:	0026da40 	call	26da4 <__gedf2>
    a354:	10000516 	blt	r2,zero,a36c <LMS7002M_rfe_set_loopback_lna+0x1a0>
    a358:	00800244 	movi	r2,9
    a35c:	80817f15 	stw	r2,1532(r16)
    a360:	0023883a 	mov	r17,zero
    a364:	04300434 	movhi	r16,49168
    a368:	00005f06 	br	a4e8 <LMS7002M_rfe_set_loopback_lna+0x31c>
    else if (val >= -5) self->regs->reg_0x0113_g_rxloopb_rfe = 8, val = -5;
    a36c:	000d883a 	mov	r6,zero
    a370:	01f00534 	movhi	r7,49172
    a374:	9009883a 	mov	r4,r18
    a378:	880b883a 	mov	r5,r17
    a37c:	0026da40 	call	26da4 <__gedf2>
    a380:	10000516 	blt	r2,zero,a398 <LMS7002M_rfe_set_loopback_lna+0x1cc>
    a384:	00800204 	movi	r2,8
    a388:	80817f15 	stw	r2,1532(r16)
    a38c:	0023883a 	mov	r17,zero
    a390:	04300534 	movhi	r16,49172
    a394:	00005406 	br	a4e8 <LMS7002M_rfe_set_loopback_lna+0x31c>
    else if (val >= -6.2) self->regs->reg_0x0113_g_rxloopb_rfe = 7, val = -6.2;
    a398:	01b33374 	movhi	r6,52429
    a39c:	01f00674 	movhi	r7,49177
    a3a0:	31b33344 	addi	r6,r6,-13107
    a3a4:	39f33304 	addi	r7,r7,-13108
    a3a8:	9009883a 	mov	r4,r18
    a3ac:	880b883a 	mov	r5,r17
    a3b0:	0026da40 	call	26da4 <__gedf2>
    a3b4:	10000716 	blt	r2,zero,a3d4 <LMS7002M_rfe_set_loopback_lna+0x208>
    a3b8:	008001c4 	movi	r2,7
    a3bc:	80817f15 	stw	r2,1532(r16)
    a3c0:	04733374 	movhi	r17,52429
    a3c4:	04300674 	movhi	r16,49177
    a3c8:	8c733344 	addi	r17,r17,-13107
    a3cc:	84333304 	addi	r16,r16,-13108
    a3d0:	00004506 	br	a4e8 <LMS7002M_rfe_set_loopback_lna+0x31c>
    else if (val >= -7.5) self->regs->reg_0x0113_g_rxloopb_rfe = 6, val = -7.5;
    a3d4:	000d883a 	mov	r6,zero
    a3d8:	01f007b4 	movhi	r7,49182
    a3dc:	9009883a 	mov	r4,r18
    a3e0:	880b883a 	mov	r5,r17
    a3e4:	0026da40 	call	26da4 <__gedf2>
    a3e8:	10000516 	blt	r2,zero,a400 <LMS7002M_rfe_set_loopback_lna+0x234>
    a3ec:	00800184 	movi	r2,6
    a3f0:	80817f15 	stw	r2,1532(r16)
    a3f4:	0023883a 	mov	r17,zero
    a3f8:	043007b4 	movhi	r16,49182
    a3fc:	00003a06 	br	a4e8 <LMS7002M_rfe_set_loopback_lna+0x31c>
    else if (val >= -9) self->regs->reg_0x0113_g_rxloopb_rfe = 5, val = -9;
    a400:	000d883a 	mov	r6,zero
    a404:	01f008b4 	movhi	r7,49186
    a408:	9009883a 	mov	r4,r18
    a40c:	880b883a 	mov	r5,r17
    a410:	0026da40 	call	26da4 <__gedf2>
    a414:	10000516 	blt	r2,zero,a42c <LMS7002M_rfe_set_loopback_lna+0x260>
    a418:	00800144 	movi	r2,5
    a41c:	80817f15 	stw	r2,1532(r16)
    a420:	0023883a 	mov	r17,zero
    a424:	043008b4 	movhi	r16,49186
    a428:	00002f06 	br	a4e8 <LMS7002M_rfe_set_loopback_lna+0x31c>
    else if (val >= -11) self->regs->reg_0x0113_g_rxloopb_rfe = 4, val = -11;
    a42c:	000d883a 	mov	r6,zero
    a430:	01f009b4 	movhi	r7,49190
    a434:	9009883a 	mov	r4,r18
    a438:	880b883a 	mov	r5,r17
    a43c:	0026da40 	call	26da4 <__gedf2>
    a440:	10000516 	blt	r2,zero,a458 <LMS7002M_rfe_set_loopback_lna+0x28c>
    a444:	00800104 	movi	r2,4
    a448:	80817f15 	stw	r2,1532(r16)
    a44c:	0023883a 	mov	r17,zero
    a450:	043009b4 	movhi	r16,49190
    a454:	00002406 	br	a4e8 <LMS7002M_rfe_set_loopback_lna+0x31c>
    else if (val >= -14) self->regs->reg_0x0113_g_rxloopb_rfe = 3, val = -14;
    a458:	000d883a 	mov	r6,zero
    a45c:	01f00b34 	movhi	r7,49196
    a460:	9009883a 	mov	r4,r18
    a464:	880b883a 	mov	r5,r17
    a468:	0026da40 	call	26da4 <__gedf2>
    a46c:	10000516 	blt	r2,zero,a484 <LMS7002M_rfe_set_loopback_lna+0x2b8>
    a470:	008000c4 	movi	r2,3
    a474:	80817f15 	stw	r2,1532(r16)
    a478:	0023883a 	mov	r17,zero
    a47c:	04300b34 	movhi	r16,49196
    a480:	00001906 	br	a4e8 <LMS7002M_rfe_set_loopback_lna+0x31c>
    else if (val >= -17) self->regs->reg_0x0113_g_rxloopb_rfe = 2, val = -17;
    a484:	000d883a 	mov	r6,zero
    a488:	01f00c74 	movhi	r7,49201
    a48c:	9009883a 	mov	r4,r18
    a490:	880b883a 	mov	r5,r17
    a494:	0026da40 	call	26da4 <__gedf2>
    a498:	10000516 	blt	r2,zero,a4b0 <LMS7002M_rfe_set_loopback_lna+0x2e4>
    a49c:	00800084 	movi	r2,2
    a4a0:	80817f15 	stw	r2,1532(r16)
    a4a4:	0023883a 	mov	r17,zero
    a4a8:	04300c74 	movhi	r16,49201
    a4ac:	00000e06 	br	a4e8 <LMS7002M_rfe_set_loopback_lna+0x31c>
    else if (val >= -24) self->regs->reg_0x0113_g_rxloopb_rfe = 1, val = -24;
    a4b0:	000d883a 	mov	r6,zero
    a4b4:	01f00e34 	movhi	r7,49208
    a4b8:	9009883a 	mov	r4,r18
    a4bc:	880b883a 	mov	r5,r17
    a4c0:	0026da40 	call	26da4 <__gedf2>
    a4c4:	10000516 	blt	r2,zero,a4dc <LMS7002M_rfe_set_loopback_lna+0x310>
    a4c8:	00800044 	movi	r2,1
    a4cc:	80817f15 	stw	r2,1532(r16)
    a4d0:	0023883a 	mov	r17,zero
    a4d4:	04300e34 	movhi	r16,49208
    a4d8:	00000306 	br	a4e8 <LMS7002M_rfe_set_loopback_lna+0x31c>
    else self->regs->reg_0x0113_g_rxloopb_rfe = 0, val = -40;
    a4dc:	80017f15 	stw	zero,1532(r16)
    a4e0:	0023883a 	mov	r17,zero
    a4e4:	04301134 	movhi	r16,49220

    LMS7002M_regs_spi_write(self, 0x0113);
    a4e8:	9809883a 	mov	r4,r19
    a4ec:	014044c4 	movi	r5,275
    a4f0:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    return val + gmax;
    a4f4:	000d883a 	mov	r6,zero
    a4f8:	01d01134 	movhi	r7,16452
    a4fc:	8809883a 	mov	r4,r17
    a500:	800b883a 	mov	r5,r16
    a504:	0025aa00 	call	25aa0 <__adddf3>
}
    a508:	dfc00417 	ldw	ra,16(sp)
    a50c:	dcc00317 	ldw	r19,12(sp)
    a510:	dc800217 	ldw	r18,8(sp)
    a514:	dc400117 	ldw	r17,4(sp)
    a518:	dc000017 	ldw	r16,0(sp)
    a51c:	dec00504 	addi	sp,sp,20
    a520:	f800283a 	ret

0000a524 <LMS7002M_rfe_set_tia>:

double LMS7002M_rfe_set_tia(LMS7002M_t *self, const LMS7002M_chan_t channel, const double gain)
{
    a524:	defffb04 	addi	sp,sp,-20
    a528:	dc400115 	stw	r17,4(sp)
    a52c:	dc000015 	stw	r16,0(sp)
    a530:	2023883a 	mov	r17,r4
    a534:	2821883a 	mov	r16,r5
    a538:	3009883a 	mov	r4,r6
    a53c:	380b883a 	mov	r5,r7
    const double gmax = 12;
    double val = gain - gmax;
    a540:	000d883a 	mov	r6,zero
    a544:	01d00a34 	movhi	r7,16424

    return val + gmax;
}

double LMS7002M_rfe_set_tia(LMS7002M_t *self, const LMS7002M_chan_t channel, const double gain)
{
    a548:	dfc00415 	stw	ra,16(sp)
    a54c:	dcc00315 	stw	r19,12(sp)
    a550:	dc800215 	stw	r18,8(sp)
    const double gmax = 12;
    double val = gain - gmax;
    a554:	00277e00 	call	277e0 <__subdf3>

    LMS7002M_set_mac_ch(self, channel);
    a558:	800b883a 	mov	r5,r16
    a55c:	8809883a 	mov	r4,r17
}

double LMS7002M_rfe_set_tia(LMS7002M_t *self, const LMS7002M_chan_t channel, const double gain)
{
    const double gmax = 12;
    double val = gain - gmax;
    a560:	1027883a 	mov	r19,r2
    a564:	1825883a 	mov	r18,r3

    LMS7002M_set_mac_ch(self, channel);
    a568:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    if (val >= 0) self->regs->reg_0x0113_g_tia_rfe = 3, val = 0;
    a56c:	000d883a 	mov	r6,zero
    a570:	000f883a 	mov	r7,zero
    a574:	9809883a 	mov	r4,r19
    a578:	900b883a 	mov	r5,r18
    a57c:	0026da40 	call	26da4 <__gedf2>
    a580:	8c046917 	ldw	r16,4516(r17)
    a584:	10000416 	blt	r2,zero,a598 <LMS7002M_rfe_set_tia+0x74>
    a588:	008000c4 	movi	r2,3
    a58c:	80818015 	stw	r2,1536(r16)
    a590:	0021883a 	mov	r16,zero
    a594:	00000d06 	br	a5cc <LMS7002M_rfe_set_tia+0xa8>
    else if (val >= -3) self->regs->reg_0x0113_g_tia_rfe = 2, val = -3;
    a598:	000d883a 	mov	r6,zero
    a59c:	01f00234 	movhi	r7,49160
    a5a0:	9809883a 	mov	r4,r19
    a5a4:	900b883a 	mov	r5,r18
    a5a8:	0026da40 	call	26da4 <__gedf2>
    a5ac:	10000416 	blt	r2,zero,a5c0 <LMS7002M_rfe_set_tia+0x9c>
    a5b0:	00800084 	movi	r2,2
    a5b4:	80818015 	stw	r2,1536(r16)
    a5b8:	04300234 	movhi	r16,49160
    a5bc:	00000306 	br	a5cc <LMS7002M_rfe_set_tia+0xa8>
    else self->regs->reg_0x0113_g_tia_rfe = 1, val = -12;
    a5c0:	00800044 	movi	r2,1
    a5c4:	80818015 	stw	r2,1536(r16)
    a5c8:	04300a34 	movhi	r16,49192

    LMS7002M_regs_spi_write(self, 0x0113);
    a5cc:	8809883a 	mov	r4,r17
    a5d0:	014044c4 	movi	r5,275
    a5d4:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    return val + gmax;
    a5d8:	000d883a 	mov	r6,zero
    a5dc:	01d00a34 	movhi	r7,16424
    a5e0:	0009883a 	mov	r4,zero
    a5e4:	800b883a 	mov	r5,r16
    a5e8:	0025aa00 	call	25aa0 <__adddf3>
}
    a5ec:	dfc00417 	ldw	ra,16(sp)
    a5f0:	dcc00317 	ldw	r19,12(sp)
    a5f4:	dc800217 	ldw	r18,8(sp)
    a5f8:	dc400117 	ldw	r17,4(sp)
    a5fc:	dc000017 	ldw	r16,0(sp)
    a600:	dec00504 	addi	sp,sp,20
    a604:	f800283a 	ret

0000a608 <setup_rx_cal_tone>:

/***********************************************************************
 * Re-tune the RX LO based on the bandwidth
 **********************************************************************/
static int setup_rx_cal_tone(LMS7002M_t *self, const LMS7002M_chan_t channel, const double bw)
{
    a608:	defff404 	addi	sp,sp,-48
    a60c:	dc800815 	stw	r18,32(sp)
    a610:	dc400715 	stw	r17,28(sp)
    a614:	3025883a 	mov	r18,r6
    a618:	2823883a 	mov	r17,r5
    LMS7002M_sxx_enable(self, LMS_RX, true);
    a61c:	01800044 	movi	r6,1
    a620:	01400084 	movi	r5,2

/***********************************************************************
 * Re-tune the RX LO based on the bandwidth
 **********************************************************************/
static int setup_rx_cal_tone(LMS7002M_t *self, const LMS7002M_chan_t channel, const double bw)
{
    a624:	dfc00b15 	stw	ra,44(sp)
    LMS7002M_sxx_enable(self, LMS_RX, true);
    a628:	d9c00515 	stw	r7,20(sp)

/***********************************************************************
 * Re-tune the RX LO based on the bandwidth
 **********************************************************************/
static int setup_rx_cal_tone(LMS7002M_t *self, const LMS7002M_chan_t channel, const double bw)
{
    a62c:	dc000615 	stw	r16,24(sp)
    a630:	dd000a15 	stw	r20,40(sp)
    a634:	2021883a 	mov	r16,r4
    a638:	dcc00915 	stw	r19,36(sp)
    LMS7002M_sxx_enable(self, LMS_RX, true);
    a63c:	000bcb40 	call	bcb4 <LMS7002M_sxx_enable>
    LMS7002M_sxt_to_sxr(self, false);
    a640:	000b883a 	mov	r5,zero
    a644:	8009883a 	mov	r4,r16
    a648:	000c3d40 	call	c3d4 <LMS7002M_sxt_to_sxr>
    int status = 0;
    LMS7002M_set_mac_ch(self, channel);
    a64c:	880b883a 	mov	r5,r17
    a650:	8009883a 	mov	r4,r16
    a654:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>
    const double sxr_freq = self->sxt_freq-bw;
    a658:	d9c00517 	ldw	r7,20(sp)
    a65c:	81046e17 	ldw	r4,4536(r16)
    a660:	81446f17 	ldw	r5,4540(r16)
    a664:	900d883a 	mov	r6,r18
    a668:	00277e00 	call	277e0 <__subdf3>
    double sxr_freq_actual = 0;
    status = LMS7002M_set_lo_freq(self, LMS_RX, self->sxr_fref, sxr_freq, &sxr_freq_actual);
    a66c:	81847217 	ldw	r6,4552(r16)
    a670:	81c47317 	ldw	r7,4556(r16)
    a674:	d9000304 	addi	r4,sp,12
    a678:	d9000215 	stw	r4,8(sp)
    a67c:	01400084 	movi	r5,2
    a680:	8009883a 	mov	r4,r16
    a684:	d8800015 	stw	r2,0(sp)
    a688:	d8c00115 	stw	r3,4(sp)
    LMS7002M_sxx_enable(self, LMS_RX, true);
    LMS7002M_sxt_to_sxr(self, false);
    int status = 0;
    LMS7002M_set_mac_ch(self, channel);
    const double sxr_freq = self->sxt_freq-bw;
    double sxr_freq_actual = 0;
    a68c:	d8000315 	stw	zero,12(sp)
    a690:	d8000415 	stw	zero,16(sp)
    status = LMS7002M_set_lo_freq(self, LMS_RX, self->sxr_fref, sxr_freq, &sxr_freq_actual);
    a694:	000c04c0 	call	c04c <LMS7002M_set_lo_freq>
    a698:	1025883a 	mov	r18,r2
    LMS7002M_set_mac_ch(self, channel);
    a69c:	880b883a 	mov	r5,r17
    a6a0:	8009883a 	mov	r4,r16
    a6a4:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>
    if (status != 0)
    a6a8:	90001c1e 	bne	r18,zero,a71c <setup_rx_cal_tone+0x114>
        //LMS7_logf(LMS7_ERROR, "LMS7002M_set_lo_freq(LMS_RX, %f MHz)", sxr_freq/1e6);
        goto done;
    }
    double rxtsp_rate = self->cgen_freq/4;
    const double rx_nco_freq = (self->sxt_freq-sxr_freq_actual)-1e6;
    LMS7002M_rxtsp_set_freq(self, channel, rx_nco_freq/rxtsp_rate);
    a6ac:	d9800317 	ldw	r6,12(sp)
    a6b0:	d9c00417 	ldw	r7,16(sp)
    a6b4:	81046e17 	ldw	r4,4536(r16)
    a6b8:	81446f17 	ldw	r5,4540(r16)
    a6bc:	00277e00 	call	277e0 <__subdf3>
    a6c0:	01d04bf4 	movhi	r7,16687
    a6c4:	000d883a 	mov	r6,zero
    a6c8:	39e12004 	addi	r7,r7,-31616
    a6cc:	1009883a 	mov	r4,r2
    a6d0:	180b883a 	mov	r5,r3
    a6d4:	00277e00 	call	277e0 <__subdf3>
    a6d8:	81046a17 	ldw	r4,4520(r16)
    a6dc:	81446b17 	ldw	r5,4524(r16)
    a6e0:	000d883a 	mov	r6,zero
    a6e4:	01cff434 	movhi	r7,16336
    a6e8:	1029883a 	mov	r20,r2
    a6ec:	1827883a 	mov	r19,r3
    a6f0:	0026f740 	call	26f74 <__muldf3>
    a6f4:	100d883a 	mov	r6,r2
    a6f8:	180f883a 	mov	r7,r3
    a6fc:	a009883a 	mov	r4,r20
    a700:	980b883a 	mov	r5,r19
    a704:	002634c0 	call	2634c <__divdf3>
    a708:	100d883a 	mov	r6,r2
    a70c:	180f883a 	mov	r7,r3
    a710:	880b883a 	mov	r5,r17
    a714:	8009883a 	mov	r4,r16
    a718:	000b7880 	call	b788 <LMS7002M_rxtsp_set_freq>

    done:
    return status;
}
    a71c:	9005883a 	mov	r2,r18
    a720:	dfc00b17 	ldw	ra,44(sp)
    a724:	dd000a17 	ldw	r20,40(sp)
    a728:	dcc00917 	ldw	r19,36(sp)
    a72c:	dc800817 	ldw	r18,32(sp)
    a730:	dc400717 	ldw	r17,28(sp)
    a734:	dc000617 	ldw	r16,24(sp)
    a738:	dec00c04 	addi	sp,sp,48
    a73c:	f800283a 	ret

0000a740 <rx_cal_loop.isra.0>:

/***********************************************************************
 * Rx calibration loop
 **********************************************************************/
static int rx_cal_loop(
    a740:	defff404 	addi	sp,sp,-48
    a744:	dfc00b15 	stw	ra,44(sp)
    a748:	dd000615 	stw	r20,24(sp)
    a74c:	dcc00515 	stw	r19,20(sp)
    a750:	dc800415 	stw	r18,16(sp)
    a754:	dc000215 	stw	r16,8(sp)
    a758:	2825883a 	mov	r18,r5
    a75c:	2021883a 	mov	r16,r4
    LMS7002M_t *self, const LMS7002M_chan_t channel, const double bw,
    int *reg_ptr, const int reg_addr, const int reg_max, const char *reg_name)
{
    LMS7002M_set_mac_ch(self, channel);
    a760:	d9800015 	stw	r6,0(sp)
    a764:	d9c00115 	stw	r7,4(sp)
}

/***********************************************************************
 * Rx calibration loop
 **********************************************************************/
static int rx_cal_loop(
    a768:	df000a15 	stw	fp,40(sp)
    a76c:	ddc00915 	stw	r23,36(sp)
    a770:	dd800815 	stw	r22,32(sp)
    a774:	dd400715 	stw	r21,28(sp)
    a778:	dc400315 	stw	r17,12(sp)
    a77c:	dcc00c17 	ldw	r19,48(sp)
    LMS7002M_t *self, const LMS7002M_chan_t channel, const double bw,
    int *reg_ptr, const int reg_addr, const int reg_max, const char *reg_name)
{
    LMS7002M_set_mac_ch(self, channel);
    a780:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    //--- cgen already set prior ---//

    //--- gain selection ---//
    const int rssi_value_50k = cal_gain_selection(self, channel);
    a784:	900b883a 	mov	r5,r18
    a788:	8009883a 	mov	r4,r16
    a78c:	00034500 	call	3450 <cal_gain_selection>

    //--- setup calibration tone ---//
    int status = setup_rx_cal_tone(self, channel, bw);
    a790:	d9800017 	ldw	r6,0(sp)
    a794:	d9c00117 	ldw	r7,4(sp)
    a798:	900b883a 	mov	r5,r18
    a79c:	8009883a 	mov	r4,r16
    LMS7002M_set_mac_ch(self, channel);

    //--- cgen already set prior ---//

    //--- gain selection ---//
    const int rssi_value_50k = cal_gain_selection(self, channel);
    a7a0:	1029883a 	mov	r20,r2

    //--- setup calibration tone ---//
    int status = setup_rx_cal_tone(self, channel, bw);
    a7a4:	000a6080 	call	a608 <setup_rx_cal_tone>
    if (status != 0) return status;
    a7a8:	1000441e 	bne	r2,zero,a8bc <rx_cal_loop.isra.0+0x17c>

    //--- calibration loop ---//
    size_t iter = 0;
    uint16_t rssi_value = cal_read_rssi(self, channel);
    a7ac:	900b883a 	mov	r5,r18
    a7b0:	8009883a 	mov	r4,r16
    a7b4:	00010e80 	call	10e8 <cal_read_rssi>
    const int adjust = (rssi_value < rssi_value_50k*0.7071)?-1:+1;
    a7b8:	a009883a 	mov	r4,r20
    int status = setup_rx_cal_tone(self, channel, bw);
    if (status != 0) return status;

    //--- calibration loop ---//
    size_t iter = 0;
    uint16_t rssi_value = cal_read_rssi(self, channel);
    a7bc:	1023883a 	mov	r17,r2
    const int adjust = (rssi_value < rssi_value_50k*0.7071)?-1:+1;
    a7c0:	002815c0 	call	2815c <__floatsidf>
    a7c4:	018b7834 	movhi	r6,11744
    a7c8:	01cff9f4 	movhi	r7,16359
    a7cc:	318346c4 	addi	r6,r6,3355
    a7d0:	39e82404 	addi	r7,r7,-24432
    a7d4:	180b883a 	mov	r5,r3
    a7d8:	1009883a 	mov	r4,r2
    a7dc:	0026f740 	call	26f74 <__muldf3>
    a7e0:	893fffcc 	andi	r4,r17,65535
    a7e4:	1029883a 	mov	r20,r2
    a7e8:	182b883a 	mov	r21,r3
    a7ec:	002815c0 	call	2815c <__floatsidf>
    a7f0:	a00d883a 	mov	r6,r20
    a7f4:	a80f883a 	mov	r7,r21
    a7f8:	1009883a 	mov	r4,r2
    a7fc:	180b883a 	mov	r5,r3
    a800:	0026e800 	call	26e80 <__ledf2>
    a804:	10000216 	blt	r2,zero,a810 <rx_cal_loop.isra.0+0xd0>
    a808:	04400044 	movi	r17,1
    a80c:	00000106 	br	a814 <rx_cal_loop.isra.0+0xd4>
    a810:	047fffc4 	movi	r17,-1
    a814:	07008044 	movi	fp,513
        }

        *reg_ptr += adjust;
        LMS7002M_regs_spi_write(self, reg_addr);
        rssi_value = cal_read_rssi(self, channel);
        if (rssi_value > rssi_value_50k*0.7071 && adjust < 0) break;
    a818:	05bfffc4 	movi	r22,-1
        if (rssi_value < rssi_value_50k*0.7071 && adjust > 0) break;
    a81c:	05c00044 	movi	r23,1
    a820:	e73fffc4 	addi	fp,fp,-1
    size_t iter = 0;
    uint16_t rssi_value = cal_read_rssi(self, channel);
    const int adjust = (rssi_value < rssi_value_50k*0.7071)?-1:+1;
    while (true)
    {
        if (iter++ == MAX_CAL_LOOP_ITERS)
    a824:	e000021e 	bne	fp,zero,a830 <rx_cal_loop.isra.0+0xf0>
        {
            //LMS7_logf(LMS7_ERROR, "failed to converge when calibrating %s", reg_name);
            return -1;
    a828:	00bfffc4 	movi	r2,-1
    a82c:	00002306 	br	a8bc <rx_cal_loop.isra.0+0x17c>
        }

        *reg_ptr += adjust;
    a830:	98800017 	ldw	r2,0(r19)
        LMS7002M_regs_spi_write(self, reg_addr);
    a834:	d9400d17 	ldw	r5,52(sp)
    a838:	8009883a 	mov	r4,r16
        {
            //LMS7_logf(LMS7_ERROR, "failed to converge when calibrating %s", reg_name);
            return -1;
        }

        *reg_ptr += adjust;
    a83c:	1445883a 	add	r2,r2,r17
    a840:	98800015 	stw	r2,0(r19)
        LMS7002M_regs_spi_write(self, reg_addr);
    a844:	00063000 	call	6300 <LMS7002M_regs_spi_write>
        rssi_value = cal_read_rssi(self, channel);
    a848:	900b883a 	mov	r5,r18
    a84c:	8009883a 	mov	r4,r16
    a850:	00010e80 	call	10e8 <cal_read_rssi>
        if (rssi_value > rssi_value_50k*0.7071 && adjust < 0) break;
    a854:	113fffcc 	andi	r4,r2,65535
    a858:	002815c0 	call	2815c <__floatsidf>
    a85c:	180f883a 	mov	r7,r3
    a860:	100d883a 	mov	r6,r2
    a864:	a009883a 	mov	r4,r20
    a868:	a80b883a 	mov	r5,r21
    a86c:	d8c00115 	stw	r3,4(sp)
    a870:	d8800015 	stw	r2,0(sp)
    a874:	0026e800 	call	26e80 <__ledf2>
    a878:	d8c00117 	ldw	r3,4(sp)
    a87c:	da000017 	ldw	r8,0(sp)
    a880:	1000010e 	bge	r2,zero,a888 <rx_cal_loop.isra.0+0x148>
    a884:	8d800c26 	beq	r17,r22,a8b8 <rx_cal_loop.isra.0+0x178>
        if (rssi_value < rssi_value_50k*0.7071 && adjust > 0) break;
    a888:	400d883a 	mov	r6,r8
    a88c:	180f883a 	mov	r7,r3
    a890:	a009883a 	mov	r4,r20
    a894:	a80b883a 	mov	r5,r21
    a898:	0026da40 	call	26da4 <__gedf2>
    a89c:	0080010e 	bge	zero,r2,a8a4 <rx_cal_loop.isra.0+0x164>
    a8a0:	8dc00526 	beq	r17,r23,a8b8 <rx_cal_loop.isra.0+0x178>
        if (*reg_ptr == 0 || *reg_ptr == reg_max)
    a8a4:	98800017 	ldw	r2,0(r19)
    a8a8:	103fdf26 	beq	r2,zero,a828 <__alt_data_end+0xfffcc028>
    a8ac:	d8c00e17 	ldw	r3,56(sp)
    a8b0:	10ffdb1e 	bne	r2,r3,a820 <__alt_data_end+0xfffcc020>
    a8b4:	003fdc06 	br	a828 <__alt_data_end+0xfffcc028>
            //LMS7_logf(LMS7_ERROR, "failed to cal %s -> %d", reg_name, *reg_ptr);
            return -1;
        }
    }
    //LMS7_logf(LMS7_DEBUG, "%s = %d", reg_name, *reg_ptr);
    return 0;
    a8b8:	0005883a 	mov	r2,zero
}
    a8bc:	dfc00b17 	ldw	ra,44(sp)
    a8c0:	df000a17 	ldw	fp,40(sp)
    a8c4:	ddc00917 	ldw	r23,36(sp)
    a8c8:	dd800817 	ldw	r22,32(sp)
    a8cc:	dd400717 	ldw	r21,28(sp)
    a8d0:	dd000617 	ldw	r20,24(sp)
    a8d4:	dcc00517 	ldw	r19,20(sp)
    a8d8:	dc800417 	ldw	r18,16(sp)
    a8dc:	dc400317 	ldw	r17,12(sp)
    a8e0:	dc000217 	ldw	r16,8(sp)
    a8e4:	dec00c04 	addi	sp,sp,48
    a8e8:	f800283a 	ret

0000a8ec <rx_cal_init>:

/***********************************************************************
 * Prepare for RX filter self-calibration
 **********************************************************************/
int rx_cal_init(LMS7002M_t *self, const LMS7002M_chan_t channel)
{
    a8ec:	defff604 	addi	sp,sp,-40
    a8f0:	dfc00915 	stw	ra,36(sp)
    a8f4:	dd000815 	stw	r20,32(sp)
    a8f8:	dcc00715 	stw	r19,28(sp)
    a8fc:	dc800615 	stw	r18,24(sp)
    a900:	dc400515 	stw	r17,20(sp)
    a904:	2825883a 	mov	r18,r5
    a908:	dc000415 	stw	r16,16(sp)
    a90c:	2021883a 	mov	r16,r4
    int status = 0;
    LMS7002M_set_mac_ch(self, channel);
    a910:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>
    const int g_tia_rfe_user = LMS7002M_regs(self)->reg_0x0113_g_tia_rfe;
    a914:	8009883a 	mov	r4,r16
    a918:	0008ac80 	call	8ac8 <LMS7002M_regs>

    //--- rfe ---
    set_addrs_to_default(self, channel, 0x010C, 0x0114);
    a91c:	01c04504 	movi	r7,276
    a920:	01804304 	movi	r6,268
    a924:	900b883a 	mov	r5,r18
    a928:	8009883a 	mov	r4,r16
 **********************************************************************/
int rx_cal_init(LMS7002M_t *self, const LMS7002M_chan_t channel)
{
    int status = 0;
    LMS7002M_set_mac_ch(self, channel);
    const int g_tia_rfe_user = LMS7002M_regs(self)->reg_0x0113_g_tia_rfe;
    a92c:	14418017 	ldw	r17,1536(r2)

    //--- rfe ---
    set_addrs_to_default(self, channel, 0x010C, 0x0114);
    a930:	00011400 	call	1140 <set_addrs_to_default>
    LMS7002M_regs(self)->reg_0x010d_sel_path_rfe = 2;
    a934:	8009883a 	mov	r4,r16
    a938:	0008ac80 	call	8ac8 <LMS7002M_regs>
    a93c:	04c00084 	movi	r19,2
    a940:	14c16b15 	stw	r19,1452(r2)
    LMS7002M_regs(self)->reg_0x0113_g_rxloopb_rfe = 8;
    a944:	8009883a 	mov	r4,r16
    a948:	0008ac80 	call	8ac8 <LMS7002M_regs>
    a94c:	00c00204 	movi	r3,8
    a950:	10c17f15 	stw	r3,1532(r2)
    LMS7002M_regs(self)->reg_0x010c_pd_rloopb_2_rfe = 0;
    a954:	8009883a 	mov	r4,r16
    a958:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs(self)->reg_0x010d_en_inshsw_lb2_rfe = 0;
    a95c:	8009883a 	mov	r4,r16

    //--- rfe ---
    set_addrs_to_default(self, channel, 0x010C, 0x0114);
    LMS7002M_regs(self)->reg_0x010d_sel_path_rfe = 2;
    LMS7002M_regs(self)->reg_0x0113_g_rxloopb_rfe = 8;
    LMS7002M_regs(self)->reg_0x010c_pd_rloopb_2_rfe = 0;
    a960:	10016515 	stw	zero,1428(r2)
    LMS7002M_regs(self)->reg_0x010d_en_inshsw_lb2_rfe = 0;
    a964:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs(self)->reg_0x010c_pd_mxlobuf_rfe = 0;
    a968:	8009883a 	mov	r4,r16
    //--- rfe ---
    set_addrs_to_default(self, channel, 0x010C, 0x0114);
    LMS7002M_regs(self)->reg_0x010d_sel_path_rfe = 2;
    LMS7002M_regs(self)->reg_0x0113_g_rxloopb_rfe = 8;
    LMS7002M_regs(self)->reg_0x010c_pd_rloopb_2_rfe = 0;
    LMS7002M_regs(self)->reg_0x010d_en_inshsw_lb2_rfe = 0;
    a96c:	10016e15 	stw	zero,1464(r2)
    LMS7002M_regs(self)->reg_0x010c_pd_mxlobuf_rfe = 0;
    a970:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs(self)->reg_0x010c_pd_qgen_rfe = 0;
    a974:	8009883a 	mov	r4,r16
    set_addrs_to_default(self, channel, 0x010C, 0x0114);
    LMS7002M_regs(self)->reg_0x010d_sel_path_rfe = 2;
    LMS7002M_regs(self)->reg_0x0113_g_rxloopb_rfe = 8;
    LMS7002M_regs(self)->reg_0x010c_pd_rloopb_2_rfe = 0;
    LMS7002M_regs(self)->reg_0x010d_en_inshsw_lb2_rfe = 0;
    LMS7002M_regs(self)->reg_0x010c_pd_mxlobuf_rfe = 0;
    a978:	10016615 	stw	zero,1432(r2)
    LMS7002M_regs(self)->reg_0x010c_pd_qgen_rfe = 0;
    a97c:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs(self)->reg_0x010f_ict_tiamain_rfe = 2;
    a980:	8009883a 	mov	r4,r16
    LMS7002M_regs(self)->reg_0x010d_sel_path_rfe = 2;
    LMS7002M_regs(self)->reg_0x0113_g_rxloopb_rfe = 8;
    LMS7002M_regs(self)->reg_0x010c_pd_rloopb_2_rfe = 0;
    LMS7002M_regs(self)->reg_0x010d_en_inshsw_lb2_rfe = 0;
    LMS7002M_regs(self)->reg_0x010c_pd_mxlobuf_rfe = 0;
    LMS7002M_regs(self)->reg_0x010c_pd_qgen_rfe = 0;
    a984:	10016715 	stw	zero,1436(r2)
    LMS7002M_regs(self)->reg_0x010f_ict_tiamain_rfe = 2;
    a988:	0008ac80 	call	8ac8 <LMS7002M_regs>
    a98c:	14c17515 	stw	r19,1492(r2)
    LMS7002M_regs(self)->reg_0x010f_ict_tiaout_rfe = 2;
    a990:	8009883a 	mov	r4,r16
    a994:	0008ac80 	call	8ac8 <LMS7002M_regs>
    a998:	14c17615 	stw	r19,1496(r2)
    LMS7002M_regs(self)->reg_0x0114_rfb_tia_rfe = 16;
    a99c:	8009883a 	mov	r4,r16
    a9a0:	0008ac80 	call	8ac8 <LMS7002M_regs>
    a9a4:	00c00404 	movi	r3,16
    a9a8:	10c18215 	stw	r3,1544(r2)
    LMS7002M_regs(self)->reg_0x0113_g_tia_rfe = g_tia_rfe_user;
    a9ac:	8009883a 	mov	r4,r16
    a9b0:	0008ac80 	call	8ac8 <LMS7002M_regs>
    a9b4:	14418015 	stw	r17,1536(r2)
    LMS7002M_regs_spi_write(self, 0x0113);
    a9b8:	014044c4 	movi	r5,275
    a9bc:	8009883a 	mov	r4,r16
    a9c0:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x0114);
    a9c4:	01404504 	movi	r5,276
    a9c8:	8009883a 	mov	r4,r16
    a9cc:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x010c);
    a9d0:	01404304 	movi	r5,268
    a9d4:	8009883a 	mov	r4,r16
    a9d8:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x010d);
    a9dc:	01404344 	movi	r5,269
    a9e0:	8009883a 	mov	r4,r16
    a9e4:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x010f);
    a9e8:	014043c4 	movi	r5,271
    a9ec:	8009883a 	mov	r4,r16
    a9f0:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    //--- rbb ---
    set_addrs_to_default(self, channel, 0x0115, 0x011B);
    a9f4:	01c046c4 	movi	r7,283
    a9f8:	01804544 	movi	r6,277
    a9fc:	900b883a 	mov	r5,r18
    aa00:	8009883a 	mov	r4,r16
    aa04:	00011400 	call	1140 <set_addrs_to_default>
    LMS7002M_regs(self)->reg_0x0119_ict_pga_out_rbb = 20;
    aa08:	8009883a 	mov	r4,r16
    aa0c:	0008ac80 	call	8ac8 <LMS7002M_regs>
    aa10:	04400504 	movi	r17,20
    aa14:	14419215 	stw	r17,1608(r2)
    LMS7002M_regs(self)->reg_0x0119_ict_pga_in_rbb = 20;
    aa18:	8009883a 	mov	r4,r16
    aa1c:	0008ac80 	call	8ac8 <LMS7002M_regs>
    aa20:	14419315 	stw	r17,1612(r2)
    LMS7002M_regs(self)->reg_0x011a_c_ctl_pga_rbb = 3;
    aa24:	8009883a 	mov	r4,r16
    aa28:	0008ac80 	call	8ac8 <LMS7002M_regs>
    aa2c:	00c000c4 	movi	r3,3
    aa30:	10c19615 	stw	r3,1624(r2)
    LMS7002M_regs_spi_write(self, 0x0119);
    aa34:	01404644 	movi	r5,281
    aa38:	8009883a 	mov	r4,r16
    aa3c:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x011a);
    aa40:	01404684 	movi	r5,282
    aa44:	8009883a 	mov	r4,r16
    aa48:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    //--- trf ---
    set_addrs_to_default(self, channel, 0x0100, 0x0104);
    aa4c:	01c04104 	movi	r7,260
    aa50:	01804004 	movi	r6,256
    aa54:	900b883a 	mov	r5,r18
    aa58:	8009883a 	mov	r4,r16
    aa5c:	00011400 	call	1140 <set_addrs_to_default>
    LMS7002M_regs(self)->reg_0x0101_l_loopb_txpad_trf = 0;
    aa60:	8009883a 	mov	r4,r16
    aa64:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs(self)->reg_0x0101_en_loopb_txpad_trf = 1;
    aa68:	8009883a 	mov	r4,r16
    LMS7002M_regs_spi_write(self, 0x0119);
    LMS7002M_regs_spi_write(self, 0x011a);

    //--- trf ---
    set_addrs_to_default(self, channel, 0x0100, 0x0104);
    LMS7002M_regs(self)->reg_0x0101_l_loopb_txpad_trf = 0;
    aa6c:	10013c15 	stw	zero,1264(r2)
    LMS7002M_regs(self)->reg_0x0101_en_loopb_txpad_trf = 1;
    aa70:	0008ac80 	call	8ac8 <LMS7002M_regs>
    aa74:	04400044 	movi	r17,1
    LMS7002M_regs(self)->reg_0x0103_sel_band1_trf = 0;
    aa78:	8009883a 	mov	r4,r16
    LMS7002M_regs_spi_write(self, 0x011a);

    //--- trf ---
    set_addrs_to_default(self, channel, 0x0100, 0x0104);
    LMS7002M_regs(self)->reg_0x0101_l_loopb_txpad_trf = 0;
    LMS7002M_regs(self)->reg_0x0101_en_loopb_txpad_trf = 1;
    aa7c:	14413f15 	stw	r17,1276(r2)
    LMS7002M_regs(self)->reg_0x0103_sel_band1_trf = 0;
    aa80:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs(self)->reg_0x0103_sel_band2_trf = 1;
    aa84:	8009883a 	mov	r4,r16

    //--- trf ---
    set_addrs_to_default(self, channel, 0x0100, 0x0104);
    LMS7002M_regs(self)->reg_0x0101_l_loopb_txpad_trf = 0;
    LMS7002M_regs(self)->reg_0x0101_en_loopb_txpad_trf = 1;
    LMS7002M_regs(self)->reg_0x0103_sel_band1_trf = 0;
    aa88:	10014415 	stw	zero,1296(r2)
    LMS7002M_regs(self)->reg_0x0103_sel_band2_trf = 1;
    aa8c:	0008ac80 	call	8ac8 <LMS7002M_regs>
    aa90:	14414515 	stw	r17,1300(r2)
    LMS7002M_regs_spi_write(self, 0x0100);
    aa94:	01404004 	movi	r5,256
    aa98:	8009883a 	mov	r4,r16
    aa9c:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x0101);
    aaa0:	01404044 	movi	r5,257
    aaa4:	8009883a 	mov	r4,r16
    aaa8:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x0103);
    aaac:	014040c4 	movi	r5,259
    aab0:	8009883a 	mov	r4,r16
    aab4:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    //--- tbb ---
    set_addrs_to_default(self, channel, 0x0105, 0x010B);
    aab8:	01c042c4 	movi	r7,267
    aabc:	01804144 	movi	r6,261
    aac0:	900b883a 	mov	r5,r18
    aac4:	8009883a 	mov	r4,r16
    aac8:	00011400 	call	1140 <set_addrs_to_default>
    LMS7002M_regs(self)->reg_0x0108_cg_iamp_tbb = 1;
    aacc:	8009883a 	mov	r4,r16
    aad0:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs(self)->reg_0x0108_ict_iamp_frp_tbb = 1;
    aad4:	8009883a 	mov	r4,r16
    LMS7002M_regs_spi_write(self, 0x0101);
    LMS7002M_regs_spi_write(self, 0x0103);

    //--- tbb ---
    set_addrs_to_default(self, channel, 0x0105, 0x010B);
    LMS7002M_regs(self)->reg_0x0108_cg_iamp_tbb = 1;
    aad8:	14415715 	stw	r17,1372(r2)
    LMS7002M_regs(self)->reg_0x0108_ict_iamp_frp_tbb = 1;
    aadc:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs(self)->reg_0x0108_ict_iamp_gg_frp_tbb = 6;
    aae0:	8009883a 	mov	r4,r16
    LMS7002M_regs_spi_write(self, 0x0103);

    //--- tbb ---
    set_addrs_to_default(self, channel, 0x0105, 0x010B);
    LMS7002M_regs(self)->reg_0x0108_cg_iamp_tbb = 1;
    LMS7002M_regs(self)->reg_0x0108_ict_iamp_frp_tbb = 1;
    aae4:	14415815 	stw	r17,1376(r2)
    LMS7002M_regs(self)->reg_0x0108_ict_iamp_gg_frp_tbb = 6;
    aae8:	0008ac80 	call	8ac8 <LMS7002M_regs>
    aaec:	00c00184 	movi	r3,6
    aaf0:	10c15915 	stw	r3,1380(r2)
    LMS7002M_regs_spi_write(self, 0x0108);
    aaf4:	01404204 	movi	r5,264
    aaf8:	8009883a 	mov	r4,r16
    aafc:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    //--- rfe and trf nextrx -- must write to chA ---//
    LMS7002M_set_mac_ch(self, LMS_CHA);
    ab00:	01401044 	movi	r5,65
    ab04:	8009883a 	mov	r4,r16
    ab08:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>
    LMS7002M_regs(self)->reg_0x010d_en_nextrx_rfe = (channel == LMS_CHA)?0:1;
    ab0c:	8009883a 	mov	r4,r16
    ab10:	0008ac80 	call	8ac8 <LMS7002M_regs>
    ab14:	95001058 	cmpnei	r20,r18,65
    LMS7002M_regs(self)->reg_0x0100_en_nexttx_trf = (channel == LMS_CHA)?0:1;
    ab18:	8009883a 	mov	r4,r16
    LMS7002M_regs(self)->reg_0x0108_ict_iamp_gg_frp_tbb = 6;
    LMS7002M_regs_spi_write(self, 0x0108);

    //--- rfe and trf nextrx -- must write to chA ---//
    LMS7002M_set_mac_ch(self, LMS_CHA);
    LMS7002M_regs(self)->reg_0x010d_en_nextrx_rfe = (channel == LMS_CHA)?0:1;
    ab1c:	15017115 	stw	r20,1476(r2)
    LMS7002M_regs(self)->reg_0x0100_en_nexttx_trf = (channel == LMS_CHA)?0:1;
    ab20:	0008ac80 	call	8ac8 <LMS7002M_regs>
    ab24:	15013415 	stw	r20,1232(r2)
    LMS7002M_regs_spi_write(self, 0x010d);
    ab28:	01404344 	movi	r5,269
    ab2c:	8009883a 	mov	r4,r16
    ab30:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x0100);
    ab34:	01404004 	movi	r5,256
    ab38:	8009883a 	mov	r4,r16
    ab3c:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_set_mac_ch(self, channel);
    ab40:	900b883a 	mov	r5,r18
    ab44:	8009883a 	mov	r4,r16
    ab48:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    //--- afe ---
    LMS7002M_afe_enable(self, LMS_RX, channel, true);
    ab4c:	980b883a 	mov	r5,r19
    ab50:	880f883a 	mov	r7,r17
    ab54:	900d883a 	mov	r6,r18
    ab58:	8009883a 	mov	r4,r16
    ab5c:	0000c580 	call	c58 <LMS7002M_afe_enable>
    LMS7002M_afe_enable(self, LMS_TX, channel, true);
    ab60:	880f883a 	mov	r7,r17
    ab64:	900d883a 	mov	r6,r18
    ab68:	880b883a 	mov	r5,r17
    ab6c:	8009883a 	mov	r4,r16
    ab70:	0000c580 	call	c58 <LMS7002M_afe_enable>
    LMS7002M_set_mac_ch(self, channel);
    ab74:	900b883a 	mov	r5,r18
    ab78:	8009883a 	mov	r4,r16
    ab7c:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    //--- bias -- must write to chA ---//
    LMS7002M_set_mac_ch(self, LMS_CHA);
    ab80:	01401044 	movi	r5,65
    ab84:	8009883a 	mov	r4,r16
    ab88:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>
    const int rp_calib_bias = LMS7002M_regs(self)->reg_0x0084_rp_calib_bias;
    ab8c:	8009883a 	mov	r4,r16
    ab90:	0008ac80 	call	8ac8 <LMS7002M_regs>
    set_addrs_to_default(self, channel, 0x0083, 0x0084);
    ab94:	01c02104 	movi	r7,132
    ab98:	018020c4 	movi	r6,131
    ab9c:	900b883a 	mov	r5,r18
    aba0:	8009883a 	mov	r4,r16
    LMS7002M_afe_enable(self, LMS_TX, channel, true);
    LMS7002M_set_mac_ch(self, channel);

    //--- bias -- must write to chA ---//
    LMS7002M_set_mac_ch(self, LMS_CHA);
    const int rp_calib_bias = LMS7002M_regs(self)->reg_0x0084_rp_calib_bias;
    aba4:	14c06b17 	ldw	r19,428(r2)
    set_addrs_to_default(self, channel, 0x0083, 0x0084);
    aba8:	00011400 	call	1140 <set_addrs_to_default>
    LMS7002M_regs(self)->reg_0x0084_rp_calib_bias = rp_calib_bias;
    abac:	8009883a 	mov	r4,r16
    abb0:	0008ac80 	call	8ac8 <LMS7002M_regs>
    abb4:	14c06b15 	stw	r19,428(r2)
    LMS7002M_set_mac_ch(self, channel);
    abb8:	900b883a 	mov	r5,r18
    abbc:	8009883a 	mov	r4,r16
    abc0:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    //--- sxt ---
    const double sxt_freq = 500e6;
    status = LMS7002M_set_lo_freq(self, LMS_TX, self->sxt_fref, sxt_freq, NULL);
    abc4:	81847417 	ldw	r6,4560(r16)
    abc8:	81c47517 	ldw	r7,4564(r16)
    abcc:	00906fb4 	movhi	r2,16830
    abd0:	10b35944 	addi	r2,r2,-12955
    abd4:	880b883a 	mov	r5,r17
    abd8:	8009883a 	mov	r4,r16
    abdc:	d8000215 	stw	zero,8(sp)
    abe0:	d8000015 	stw	zero,0(sp)
    abe4:	d8800115 	stw	r2,4(sp)
    abe8:	000c04c0 	call	c04c <LMS7002M_set_lo_freq>
    LMS7002M_set_mac_ch(self, channel);
    abec:	900b883a 	mov	r5,r18
    abf0:	8009883a 	mov	r4,r16
    abf4:	d8800315 	stw	r2,12(sp)
    abf8:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>
    if (status != 0)
    abfc:	d8800317 	ldw	r2,12(sp)
    ac00:	10004d1e 	bne	r2,zero,ad38 <rx_cal_init+0x44c>
        //LMS7_logf(LMS7_ERROR, "LMS7002M_set_lo_freq(LMS_TX, %f MHz)", sxt_freq/1e6);
        goto done;
    }

    //--- TxTSP ---
    set_addrs_to_default(self, channel, 0x0200, 0x020c);
    ac04:	01c08304 	movi	r7,524
    ac08:	01808004 	movi	r6,512
    ac0c:	900b883a 	mov	r5,r18
    ac10:	8009883a 	mov	r4,r16
    ac14:	00011400 	call	1140 <set_addrs_to_default>
    LMS7002M_regs(self)->reg_0x0200_tsgmode = 1;
    ac18:	8009883a 	mov	r4,r16
    ac1c:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs(self)->reg_0x0200_insel = 1;
    ac20:	8009883a 	mov	r4,r16
        goto done;
    }

    //--- TxTSP ---
    set_addrs_to_default(self, channel, 0x0200, 0x020c);
    LMS7002M_regs(self)->reg_0x0200_tsgmode = 1;
    ac24:	1441ce15 	stw	r17,1848(r2)
    LMS7002M_regs(self)->reg_0x0200_insel = 1;
    ac28:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs(self)->reg_0x0208_cmix_byp = 1;
    ac2c:	8009883a 	mov	r4,r16
    }

    //--- TxTSP ---
    set_addrs_to_default(self, channel, 0x0200, 0x020c);
    LMS7002M_regs(self)->reg_0x0200_tsgmode = 1;
    LMS7002M_regs(self)->reg_0x0200_insel = 1;
    ac30:	1441cf15 	stw	r17,1852(r2)
    LMS7002M_regs(self)->reg_0x0208_cmix_byp = 1;
    ac34:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs(self)->reg_0x0208_gfir3_byp = 1;
    ac38:	8009883a 	mov	r4,r16

    //--- TxTSP ---
    set_addrs_to_default(self, channel, 0x0200, 0x020c);
    LMS7002M_regs(self)->reg_0x0200_tsgmode = 1;
    LMS7002M_regs(self)->reg_0x0200_insel = 1;
    LMS7002M_regs(self)->reg_0x0208_cmix_byp = 1;
    ac3c:	1441e015 	stw	r17,1920(r2)
    LMS7002M_regs(self)->reg_0x0208_gfir3_byp = 1;
    ac40:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs(self)->reg_0x0208_gfir2_byp = 1;
    ac44:	8009883a 	mov	r4,r16
    //--- TxTSP ---
    set_addrs_to_default(self, channel, 0x0200, 0x020c);
    LMS7002M_regs(self)->reg_0x0200_tsgmode = 1;
    LMS7002M_regs(self)->reg_0x0200_insel = 1;
    LMS7002M_regs(self)->reg_0x0208_cmix_byp = 1;
    LMS7002M_regs(self)->reg_0x0208_gfir3_byp = 1;
    ac48:	1441e215 	stw	r17,1928(r2)
    LMS7002M_regs(self)->reg_0x0208_gfir2_byp = 1;
    ac4c:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs(self)->reg_0x0208_gfir1_byp = 1;
    ac50:	8009883a 	mov	r4,r16
    set_addrs_to_default(self, channel, 0x0200, 0x020c);
    LMS7002M_regs(self)->reg_0x0200_tsgmode = 1;
    LMS7002M_regs(self)->reg_0x0200_insel = 1;
    LMS7002M_regs(self)->reg_0x0208_cmix_byp = 1;
    LMS7002M_regs(self)->reg_0x0208_gfir3_byp = 1;
    LMS7002M_regs(self)->reg_0x0208_gfir2_byp = 1;
    ac54:	1441e315 	stw	r17,1932(r2)
    LMS7002M_regs(self)->reg_0x0208_gfir1_byp = 1;
    ac58:	0008ac80 	call	8ac8 <LMS7002M_regs>
    ac5c:	1441e415 	stw	r17,1936(r2)
    LMS7002M_regs_spi_write(self, 0x0200);
    ac60:	8009883a 	mov	r4,r16
    ac64:	01408004 	movi	r5,512
    ac68:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x0208);
    ac6c:	8009883a 	mov	r4,r16
    ac70:	01408204 	movi	r5,520
    ac74:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_txtsp_tsg_const(self, channel, 0x7fff, 0x8000);
    ac78:	900b883a 	mov	r5,r18
    ac7c:	8009883a 	mov	r4,r16
    ac80:	01e00014 	movui	r7,32768
    ac84:	019fffc4 	movi	r6,32767
    ac88:	000db800 	call	db80 <LMS7002M_txtsp_tsg_const>

    //--- RxTSP ---
    set_addrs_to_default(self, channel, 0x0400, 0x040f);
    ac8c:	01c103c4 	movi	r7,1039
    ac90:	01810004 	movi	r6,1024
    ac94:	900b883a 	mov	r5,r18
    ac98:	8009883a 	mov	r4,r16
    ac9c:	00011400 	call	1140 <set_addrs_to_default>
    LMS7002M_regs(self)->reg_0x040a_agc_mode = 1;
    aca0:	8009883a 	mov	r4,r16
    aca4:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs(self)->reg_0x040c_gfir3_byp = 1;
    aca8:	8009883a 	mov	r4,r16
    LMS7002M_regs_spi_write(self, 0x0208);
    LMS7002M_txtsp_tsg_const(self, channel, 0x7fff, 0x8000);

    //--- RxTSP ---
    set_addrs_to_default(self, channel, 0x0400, 0x040f);
    LMS7002M_regs(self)->reg_0x040a_agc_mode = 1;
    acac:	14420a15 	stw	r17,2088(r2)
    LMS7002M_regs(self)->reg_0x040c_gfir3_byp = 1;
    acb0:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs(self)->reg_0x040c_gfir2_byp = 1;
    acb4:	8009883a 	mov	r4,r16
    LMS7002M_txtsp_tsg_const(self, channel, 0x7fff, 0x8000);

    //--- RxTSP ---
    set_addrs_to_default(self, channel, 0x0400, 0x040f);
    LMS7002M_regs(self)->reg_0x040a_agc_mode = 1;
    LMS7002M_regs(self)->reg_0x040c_gfir3_byp = 1;
    acb8:	14421115 	stw	r17,2116(r2)
    LMS7002M_regs(self)->reg_0x040c_gfir2_byp = 1;
    acbc:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs(self)->reg_0x040c_gfir1_byp = 1;
    acc0:	8009883a 	mov	r4,r16

    //--- RxTSP ---
    set_addrs_to_default(self, channel, 0x0400, 0x040f);
    LMS7002M_regs(self)->reg_0x040a_agc_mode = 1;
    LMS7002M_regs(self)->reg_0x040c_gfir3_byp = 1;
    LMS7002M_regs(self)->reg_0x040c_gfir2_byp = 1;
    acc4:	14421215 	stw	r17,2120(r2)
    LMS7002M_regs(self)->reg_0x040c_gfir1_byp = 1;
    acc8:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs(self)->reg_0x040a_agc_avg = 7;
    accc:	8009883a 	mov	r4,r16
    //--- RxTSP ---
    set_addrs_to_default(self, channel, 0x0400, 0x040f);
    LMS7002M_regs(self)->reg_0x040a_agc_mode = 1;
    LMS7002M_regs(self)->reg_0x040c_gfir3_byp = 1;
    LMS7002M_regs(self)->reg_0x040c_gfir2_byp = 1;
    LMS7002M_regs(self)->reg_0x040c_gfir1_byp = 1;
    acd0:	14421315 	stw	r17,2124(r2)
    LMS7002M_regs(self)->reg_0x040a_agc_avg = 7;
    acd4:	0008ac80 	call	8ac8 <LMS7002M_regs>
    acd8:	00c001c4 	movi	r3,7
    acdc:	10c20b15 	stw	r3,2092(r2)
    LMS7002M_regs(self)->reg_0x040c_cmix_gain = 1;
    ace0:	8009883a 	mov	r4,r16
    ace4:	0008ac80 	call	8ac8 <LMS7002M_regs>
    ace8:	14420d15 	stw	r17,2100(r2)
    LMS7002M_regs_spi_write(self, 0x040a);
    acec:	8009883a 	mov	r4,r16
    acf0:	01410284 	movi	r5,1034
    acf4:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x040c);
    acf8:	8009883a 	mov	r4,r16
    acfc:	01410304 	movi	r5,1036
    ad00:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    //--- initial cal tone ---//
    status = setup_rx_cal_tone(self, channel, 50e3);
    ad04:	01d03a34 	movhi	r7,16616
    ad08:	000d883a 	mov	r6,zero
    ad0c:	39da8004 	addi	r7,r7,27136
    ad10:	900b883a 	mov	r5,r18
    ad14:	8009883a 	mov	r4,r16
    if (status != 0) goto done;

    done:
    return status;
}
    ad18:	dfc00917 	ldw	ra,36(sp)
    ad1c:	dd000817 	ldw	r20,32(sp)
    ad20:	dcc00717 	ldw	r19,28(sp)
    ad24:	dc800617 	ldw	r18,24(sp)
    ad28:	dc400517 	ldw	r17,20(sp)
    ad2c:	dc000417 	ldw	r16,16(sp)
    ad30:	dec00a04 	addi	sp,sp,40
    LMS7002M_regs(self)->reg_0x040c_cmix_gain = 1;
    LMS7002M_regs_spi_write(self, 0x040a);
    LMS7002M_regs_spi_write(self, 0x040c);

    //--- initial cal tone ---//
    status = setup_rx_cal_tone(self, channel, 50e3);
    ad34:	000a6081 	jmpi	a608 <setup_rx_cal_tone>
    if (status != 0) goto done;

    done:
    return status;
}
    ad38:	dfc00917 	ldw	ra,36(sp)
    ad3c:	dd000817 	ldw	r20,32(sp)
    ad40:	dcc00717 	ldw	r19,28(sp)
    ad44:	dc800617 	ldw	r18,24(sp)
    ad48:	dc400517 	ldw	r17,20(sp)
    ad4c:	dc000417 	ldw	r16,16(sp)
    ad50:	dec00a04 	addi	sp,sp,40
    ad54:	f800283a 	ret

0000ad58 <LMS7002M_rbb_set_filter_bw>:

/***********************************************************************
 * Rx calibration dispatcher
 **********************************************************************/
int LMS7002M_rbb_set_filter_bw(LMS7002M_t *self, const LMS7002M_chan_t channel, double bw, double *bwactual)
{
    ad58:	defb8504 	addi	sp,sp,-4588
    ad5c:	dd847715 	stw	r22,4572(sp)
    ad60:	dd047515 	stw	r20,4564(sp)
    ad64:	dc847315 	stw	r18,4556(sp)
    ad68:	dc447215 	stw	r17,4552(sp)
    ad6c:	dc047115 	stw	r16,4548(sp)
    ad70:	3023883a 	mov	r17,r6
    ad74:	3825883a 	mov	r18,r7
    ad78:	dfc47a15 	stw	ra,4584(sp)
    ad7c:	df047915 	stw	fp,4580(sp)
    ad80:	ddc47815 	stw	r23,4576(sp)
    ad84:	dd447615 	stw	r21,4568(sp)
    ad88:	dcc47415 	stw	r19,4560(sp)
    ad8c:	2021883a 	mov	r16,r4
    ad90:	2829883a 	mov	r20,r5
    ad94:	dd847b17 	ldw	r22,4588(sp)
    LMS7002M_set_mac_ch(self, channel);
    ad98:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>
    int status = 0;
    if (bw < 0.5) bw = 0.5; //low-band starts at 0.5
    ad9c:	000d883a 	mov	r6,zero
    ada0:	01cff834 	movhi	r7,16352
    ada4:	8809883a 	mov	r4,r17
    ada8:	900b883a 	mov	r5,r18
    adac:	0026e800 	call	26e80 <__ledf2>
    adb0:	10000916 	blt	r2,zero,add8 <LMS7002M_rbb_set_filter_bw+0x80>
    const int path = (bw < 20e6)?LMS7002M_RBB_LBF:LMS7002M_RBB_HBF;
    adb4:	01d05cf4 	movhi	r7,16755
    adb8:	000d883a 	mov	r6,zero
    adbc:	39c4b404 	addi	r7,r7,4816
    adc0:	8809883a 	mov	r4,r17
    adc4:	900b883a 	mov	r5,r18
    adc8:	0026e800 	call	26e80 <__ledf2>
    adcc:	10000416 	blt	r2,zero,ade0 <LMS7002M_rbb_set_filter_bw+0x88>
    add0:	05401204 	movi	r21,72
    add4:	00000306 	br	ade4 <LMS7002M_rbb_set_filter_bw+0x8c>
 **********************************************************************/
int LMS7002M_rbb_set_filter_bw(LMS7002M_t *self, const LMS7002M_chan_t channel, double bw, double *bwactual)
{
    LMS7002M_set_mac_ch(self, channel);
    int status = 0;
    if (bw < 0.5) bw = 0.5; //low-band starts at 0.5
    add8:	0023883a 	mov	r17,zero
    addc:	048ff834 	movhi	r18,16352
    const int path = (bw < 20e6)?LMS7002M_RBB_LBF:LMS7002M_RBB_HBF;
    ade0:	05401304 	movi	r21,76

    //check for initialized reference frequencies
    if (self->cgen_fref == 0.0)
    ade4:	81047017 	ldw	r4,4544(r16)
    ade8:	81447117 	ldw	r5,4548(r16)
    adec:	000d883a 	mov	r6,zero
    adf0:	000f883a 	mov	r7,zero
    adf4:	0026d1c0 	call	26d1c <__eqdf2>
    adf8:	1001f726 	beq	r2,zero,b5d8 <LMS7002M_rbb_set_filter_bw+0x880>
    {
        //LMS7_logf(LMS7_ERROR, "cgen_fref not initialized");
        return -1;
    }
    if (self->sxr_fref == 0.0)
    adfc:	81047217 	ldw	r4,4552(r16)
    ae00:	81447317 	ldw	r5,4556(r16)
    ae04:	000d883a 	mov	r6,zero
    ae08:	000f883a 	mov	r7,zero
    ae0c:	0026d1c0 	call	26d1c <__eqdf2>
    ae10:	1001f126 	beq	r2,zero,b5d8 <LMS7002M_rbb_set_filter_bw+0x880>
    {
        //LMS7_logf(LMS7_ERROR, "sxr_fref not initialized");
        return -1;
    }
    if (self->sxt_fref == 0.0)
    ae14:	81047417 	ldw	r4,4560(r16)
    ae18:	81447517 	ldw	r5,4564(r16)
    ae1c:	000d883a 	mov	r6,zero
    ae20:	000f883a 	mov	r7,zero
    ae24:	0026d1c0 	call	26d1c <__eqdf2>
    ae28:	1001eb26 	beq	r2,zero,b5d8 <LMS7002M_rbb_set_filter_bw+0x880>

    ////////////////////////////////////////////////////////////////////
    // Save register map
    ////////////////////////////////////////////////////////////////////
    LMS7002M_regs_t saved_map[2];
    memcpy(saved_map, self->_regs, sizeof(saved_map));
    ae2c:	85c00104 	addi	r23,r16,4
    ae30:	01846804 	movi	r6,4512
    ae34:	b80b883a 	mov	r5,r23
    ae38:	d9000304 	addi	r4,sp,12
    ae3c:	00127200 	call	12720 <memcpy>

    ////////////////////////////////////////////////////////////////////
    // Clocking configuration
    ////////////////////////////////////////////////////////////////////
    status = cal_setup_cgen(self, bw);
    ae40:	880b883a 	mov	r5,r17
    ae44:	900d883a 	mov	r6,r18
    ae48:	8009883a 	mov	r4,r16
    ae4c:	00035400 	call	3540 <cal_setup_cgen>
    ae50:	1027883a 	mov	r19,r2
    if (status != 0)
    ae54:	10016c1e 	bne	r2,zero,b408 <LMS7002M_rbb_set_filter_bw+0x6b0>
    }

    ////////////////////////////////////////////////////////////////////
    // Load initial calibration state
    ////////////////////////////////////////////////////////////////////
    status = rx_cal_init(self, channel);
    ae58:	a00b883a 	mov	r5,r20
    ae5c:	8009883a 	mov	r4,r16
    ae60:	000a8ec0 	call	a8ec <rx_cal_init>
    ae64:	1027883a 	mov	r19,r2
    if (status != 0)
    ae68:	1001671e 	bne	r2,zero,b408 <LMS7002M_rbb_set_filter_bw+0x6b0>
 * Perform RFE TIA filter calibration
 **********************************************************************/
static int rx_cal_tia_rfe(LMS7002M_t *self, const LMS7002M_chan_t channel, const double bw)
{
    int status = 0;
    LMS7002M_set_mac_ch(self, channel);
    ae6c:	a00b883a 	mov	r5,r20
    ae70:	8009883a 	mov	r4,r16
    ae74:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>
    const int g_tia_rfe_user = LMS7002M_regs(self)->reg_0x0113_g_tia_rfe;
    ae78:	8009883a 	mov	r4,r16
    ae7c:	0008ac80 	call	8ac8 <LMS7002M_regs>

    //--- check filter bounds ---//
    if (bw < 0.5e6 || bw > 60e6)
    ae80:	01d047f4 	movhi	r7,16671
    ae84:	000d883a 	mov	r6,zero
    ae88:	39e12004 	addi	r7,r7,-31616
    ae8c:	8809883a 	mov	r4,r17
    ae90:	900b883a 	mov	r5,r18
 **********************************************************************/
static int rx_cal_tia_rfe(LMS7002M_t *self, const LMS7002M_chan_t channel, const double bw)
{
    int status = 0;
    LMS7002M_set_mac_ch(self, channel);
    const int g_tia_rfe_user = LMS7002M_regs(self)->reg_0x0113_g_tia_rfe;
    ae94:	14c18017 	ldw	r19,1536(r2)

    //--- check filter bounds ---//
    if (bw < 0.5e6 || bw > 60e6)
    ae98:	0026e800 	call	26e80 <__ledf2>
    ae9c:	1001d216 	blt	r2,zero,b5e8 <LMS7002M_rbb_set_filter_bw+0x890>
    aea0:	01d06374 	movhi	r7,16781
    aea4:	000d883a 	mov	r6,zero
    aea8:	39e70e04 	addi	r7,r7,-25544
    aeac:	8809883a 	mov	r4,r17
    aeb0:	900b883a 	mov	r5,r18
    aeb4:	0026da40 	call	26da4 <__gedf2>
    aeb8:	0081cb16 	blt	zero,r2,b5e8 <LMS7002M_rbb_set_filter_bw+0x890>
    }

    //--- cfb_tia_rfe, ccomp_tia_rfe ---//
    int cfb_tia_rfe = 0;
    int ccomp_tia_rfe = 0;
    if (g_tia_rfe_user == 3 || g_tia_rfe_user == 2)
    aebc:	98bfff84 	addi	r2,r19,-2
    aec0:	00c00044 	movi	r3,1
    aec4:	18801436 	bltu	r3,r2,af18 <LMS7002M_rbb_set_filter_bw+0x1c0>
    {
        cfb_tia_rfe = (int)(1680e6/bw - 10);
    aec8:	01507674 	movhi	r5,16857
    aecc:	880d883a 	mov	r6,r17
    aed0:	900f883a 	mov	r7,r18
    aed4:	0009883a 	mov	r4,zero
    aed8:	29422c44 	addi	r5,r5,2225
    aedc:	002634c0 	call	2634c <__divdf3>
    aee0:	000d883a 	mov	r6,zero
    aee4:	01d00934 	movhi	r7,16420
    aee8:	1009883a 	mov	r4,r2
    aeec:	180b883a 	mov	r5,r3
    aef0:	00277e00 	call	277e0 <__subdf3>
    aef4:	180b883a 	mov	r5,r3
    aef8:	1009883a 	mov	r4,r2
    aefc:	00280dc0 	call	280dc <__fixdfsi>
        ccomp_tia_rfe = cfb_tia_rfe/100;
    af00:	01401904 	movi	r5,100
    af04:	1009883a 	mov	r4,r2
    //--- cfb_tia_rfe, ccomp_tia_rfe ---//
    int cfb_tia_rfe = 0;
    int ccomp_tia_rfe = 0;
    if (g_tia_rfe_user == 3 || g_tia_rfe_user == 2)
    {
        cfb_tia_rfe = (int)(1680e6/bw - 10);
    af08:	1027883a 	mov	r19,r2
        ccomp_tia_rfe = cfb_tia_rfe/100;
    af0c:	00256c80 	call	256c8 <__divsi3>
    af10:	1039883a 	mov	fp,r2
    af14:	00001406 	br	af68 <LMS7002M_rbb_set_filter_bw+0x210>
    }
    else if (g_tia_rfe_user == 1)
    af18:	98c1b31e 	bne	r19,r3,b5e8 <LMS7002M_rbb_set_filter_bw+0x890>
    {
        cfb_tia_rfe = (int)(5400e6/bw - 10);
    af1c:	01507d34 	movhi	r5,16884
    af20:	880d883a 	mov	r6,r17
    af24:	900f883a 	mov	r7,r18
    af28:	01180034 	movhi	r4,24576
    af2c:	294775c4 	addi	r5,r5,7639
    af30:	002634c0 	call	2634c <__divdf3>
    af34:	000d883a 	mov	r6,zero
    af38:	01d00934 	movhi	r7,16420
    af3c:	1009883a 	mov	r4,r2
    af40:	180b883a 	mov	r5,r3
    af44:	00277e00 	call	277e0 <__subdf3>
    af48:	180b883a 	mov	r5,r3
    af4c:	1009883a 	mov	r4,r2
    af50:	00280dc0 	call	280dc <__fixdfsi>
        ccomp_tia_rfe = (int)(cfb_tia_rfe/100 + 1);
    af54:	01401904 	movi	r5,100
    af58:	1009883a 	mov	r4,r2
        cfb_tia_rfe = (int)(1680e6/bw - 10);
        ccomp_tia_rfe = cfb_tia_rfe/100;
    }
    else if (g_tia_rfe_user == 1)
    {
        cfb_tia_rfe = (int)(5400e6/bw - 10);
    af5c:	1027883a 	mov	r19,r2
        ccomp_tia_rfe = (int)(cfb_tia_rfe/100 + 1);
    af60:	00256c80 	call	256c8 <__divsi3>
    af64:	17000044 	addi	fp,r2,1
        //LMS7_logf(LMS7_ERROR, "g_tia_rfe must be [1, 2, or 3], got %d", g_tia_rfe_user);
        status = -1;
        goto done;
    }
    if (ccomp_tia_rfe > 15) ccomp_tia_rfe = 15;
    LMS7002M_regs(self)->reg_0x0112_cfb_tia_rfe = cfb_tia_rfe;
    af68:	8009883a 	mov	r4,r16
    af6c:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs(self)->reg_0x0112_ccomp_tia_rfe = ccomp_tia_rfe;
    af70:	8009883a 	mov	r4,r16
        //LMS7_logf(LMS7_ERROR, "g_tia_rfe must be [1, 2, or 3], got %d", g_tia_rfe_user);
        status = -1;
        goto done;
    }
    if (ccomp_tia_rfe > 15) ccomp_tia_rfe = 15;
    LMS7002M_regs(self)->reg_0x0112_cfb_tia_rfe = cfb_tia_rfe;
    af74:	14c17d15 	stw	r19,1524(r2)
    LMS7002M_regs(self)->reg_0x0112_ccomp_tia_rfe = ccomp_tia_rfe;
    af78:	0008ac80 	call	8ac8 <LMS7002M_regs>
    af7c:	010003c4 	movi	r4,15
    af80:	e007883a 	mov	r3,fp
    af84:	2700010e 	bge	r4,fp,af8c <LMS7002M_rbb_set_filter_bw+0x234>
    af88:	2007883a 	mov	r3,r4
    af8c:	10c17c15 	stw	r3,1520(r2)
    LMS7002M_regs_spi_write(self, 0x0112);
    af90:	01404484 	movi	r5,274
    af94:	8009883a 	mov	r4,r16
    af98:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    //--- rcomp_tia_rfe ---//
    int rcomp_tia_rfe = (int)(15-2*cfb_tia_rfe/100);
    af9c:	9809883a 	mov	r4,r19
    afa0:	017ff384 	movi	r5,-50
    afa4:	00256c80 	call	256c8 <__divsi3>
    if (rcomp_tia_rfe < 0) rcomp_tia_rfe = 0;
    LMS7002M_regs(self)->reg_0x0114_rcomp_tia_rfe = rcomp_tia_rfe;
    afa8:	8009883a 	mov	r4,r16
    LMS7002M_regs(self)->reg_0x0112_cfb_tia_rfe = cfb_tia_rfe;
    LMS7002M_regs(self)->reg_0x0112_ccomp_tia_rfe = ccomp_tia_rfe;
    LMS7002M_regs_spi_write(self, 0x0112);

    //--- rcomp_tia_rfe ---//
    int rcomp_tia_rfe = (int)(15-2*cfb_tia_rfe/100);
    afac:	14c003c4 	addi	r19,r2,15
    if (rcomp_tia_rfe < 0) rcomp_tia_rfe = 0;
    LMS7002M_regs(self)->reg_0x0114_rcomp_tia_rfe = rcomp_tia_rfe;
    afb0:	0008ac80 	call	8ac8 <LMS7002M_regs>
    afb4:	9807883a 	mov	r3,r19
    afb8:	9800010e 	bge	r19,zero,afc0 <LMS7002M_rbb_set_filter_bw+0x268>
    afbc:	0007883a 	mov	r3,zero
    afc0:	10c18115 	stw	r3,1540(r2)
    LMS7002M_regs_spi_write(self, 0x0114);
    afc4:	01404504 	movi	r5,276
    afc8:	8009883a 	mov	r4,r16
    afcc:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    //--- rbb path ---//
    LMS7002M_regs(self)->reg_0x0118_input_ctl_pga_rbb = 2;
    afd0:	8009883a 	mov	r4,r16
    afd4:	0008ac80 	call	8ac8 <LMS7002M_regs>
    afd8:	07000084 	movi	fp,2
    LMS7002M_regs(self)->reg_0x0115_pd_lpfl_rbb = 0;
    afdc:	8009883a 	mov	r4,r16
    if (rcomp_tia_rfe < 0) rcomp_tia_rfe = 0;
    LMS7002M_regs(self)->reg_0x0114_rcomp_tia_rfe = rcomp_tia_rfe;
    LMS7002M_regs_spi_write(self, 0x0114);

    //--- rbb path ---//
    LMS7002M_regs(self)->reg_0x0118_input_ctl_pga_rbb = 2;
    afe0:	17018e15 	stw	fp,1592(r2)
    LMS7002M_regs(self)->reg_0x0115_pd_lpfl_rbb = 0;
    afe4:	0008ac80 	call	8ac8 <LMS7002M_regs>
    afe8:	10018615 	stw	zero,1560(r2)
    LMS7002M_regs_spi_write(self, 0x0118);
    afec:	01404604 	movi	r5,280
    aff0:	8009883a 	mov	r4,r16
    aff4:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x0115);
    aff8:	01404544 	movi	r5,277
    affc:	8009883a 	mov	r4,r16
    b000:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    //--- calibration ---//
    status = rx_cal_loop(self, channel, bw,
        &LMS7002M_regs(self)->reg_0x0112_cfb_tia_rfe,
    b004:	8009883a 	mov	r4,r16
    b008:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs(self)->reg_0x0115_pd_lpfl_rbb = 0;
    LMS7002M_regs_spi_write(self, 0x0118);
    LMS7002M_regs_spi_write(self, 0x0115);

    //--- calibration ---//
    status = rx_cal_loop(self, channel, bw,
    b00c:	00c3ffc4 	movi	r3,4095
    b010:	d8c00215 	stw	r3,8(sp)
    b014:	10817d04 	addi	r2,r2,1524
    b018:	00c04484 	movi	r3,274
    b01c:	d8c00115 	stw	r3,4(sp)
    b020:	d8800015 	stw	r2,0(sp)
    b024:	880d883a 	mov	r6,r17
    b028:	900f883a 	mov	r7,r18
    b02c:	a00b883a 	mov	r5,r20
    b030:	8009883a 	mov	r4,r16
    b034:	000a7400 	call	a740 <rx_cal_loop.isra.0>
    b038:	1027883a 	mov	r19,r2

    ////////////////////////////////////////////////////////////////////
    // RFE TIA calibration
    ////////////////////////////////////////////////////////////////////
    status = rx_cal_tia_rfe(self, channel, bw);
    if (status != 0)
    b03c:	1000f21e 	bne	r2,zero,b408 <LMS7002M_rbb_set_filter_bw+0x6b0>
    }

    ////////////////////////////////////////////////////////////////////
    // Initialize calibration again for LPF
    ////////////////////////////////////////////////////////////////////
    status = rx_cal_init(self, channel);
    b040:	a00b883a 	mov	r5,r20
    b044:	8009883a 	mov	r4,r16
    b048:	000a8ec0 	call	a8ec <rx_cal_init>
    b04c:	1027883a 	mov	r19,r2
    if (status != 0)
    b050:	1000ed1e 	bne	r2,zero,b408 <LMS7002M_rbb_set_filter_bw+0x6b0>
    }

    ////////////////////////////////////////////////////////////////////
    // RBB LPF calibration
    ////////////////////////////////////////////////////////////////////
    if (path == LMS7002M_RBB_LBF) status = rx_cal_rbb_lpfl(self, channel, bw);
    b054:	00801304 	movi	r2,76
    b058:	a880781e 	bne	r21,r2,b23c <LMS7002M_rbb_set_filter_bw+0x4e4>
 * Perform RBB LPFL filter calibration
 **********************************************************************/
static int rx_cal_rbb_lpfl(LMS7002M_t *self, const LMS7002M_chan_t channel, const double bw)
{
    int status = 0;
    LMS7002M_set_mac_ch(self, channel);
    b05c:	a00b883a 	mov	r5,r20
    b060:	8009883a 	mov	r4,r16
    b064:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    //--- check filter bounds ---//
    if (bw < 0.5e6 || bw > 20e6)
    b068:	01d047f4 	movhi	r7,16671
    b06c:	000d883a 	mov	r6,zero
    b070:	39e12004 	addi	r7,r7,-31616
    b074:	8809883a 	mov	r4,r17
    b078:	900b883a 	mov	r5,r18
    b07c:	0026e800 	call	26e80 <__ledf2>
    b080:	10015916 	blt	r2,zero,b5e8 <LMS7002M_rbb_set_filter_bw+0x890>
    b084:	01d05cf4 	movhi	r7,16755
    b088:	000d883a 	mov	r6,zero
    b08c:	39c4b404 	addi	r7,r7,4816
    b090:	8809883a 	mov	r4,r17
    b094:	900b883a 	mov	r5,r18
    b098:	0026da40 	call	26da4 <__gedf2>
    b09c:	00815216 	blt	zero,r2,b5e8 <LMS7002M_rbb_set_filter_bw+0x890>
        status = -1;
        goto done;
    }

    //--- c_ctl_lpfl_rbb, rcc_ctl_lpfl_rbb ---//
    LMS7002M_regs(self)->reg_0x0117_c_ctl_lpfl_rbb = (int)(2160e6/bw - 103);
    b0a0:	8009883a 	mov	r4,r16
    b0a4:	0008ac80 	call	8ac8 <LMS7002M_regs>
    b0a8:	01507834 	movhi	r5,16864
    b0ac:	880d883a 	mov	r6,r17
    b0b0:	900f883a 	mov	r7,r18
    b0b4:	01200034 	movhi	r4,32768
    b0b8:	2945f7c4 	addi	r5,r5,6111
    b0bc:	1027883a 	mov	r19,r2
    b0c0:	002634c0 	call	2634c <__divdf3>
    b0c4:	01d016b4 	movhi	r7,16474
    b0c8:	000d883a 	mov	r6,zero
    b0cc:	39f00004 	addi	r7,r7,-16384
    b0d0:	1009883a 	mov	r4,r2
    b0d4:	180b883a 	mov	r5,r3
    b0d8:	00277e00 	call	277e0 <__subdf3>
    b0dc:	1009883a 	mov	r4,r2
    b0e0:	180b883a 	mov	r5,r3
    b0e4:	00280dc0 	call	280dc <__fixdfsi>
    int rcc_ctl_lpfl_rbb = 0;
    if      (bw > 15e6)  rcc_ctl_lpfl_rbb = 5;
    b0e8:	01d05b74 	movhi	r7,16749
        status = -1;
        goto done;
    }

    //--- c_ctl_lpfl_rbb, rcc_ctl_lpfl_rbb ---//
    LMS7002M_regs(self)->reg_0x0117_c_ctl_lpfl_rbb = (int)(2160e6/bw - 103);
    b0ec:	98818d15 	stw	r2,1588(r19)
    int rcc_ctl_lpfl_rbb = 0;
    if      (bw > 15e6)  rcc_ctl_lpfl_rbb = 5;
    b0f0:	000d883a 	mov	r6,zero
    b0f4:	39e70e04 	addi	r7,r7,-25544
    b0f8:	8809883a 	mov	r4,r17
    b0fc:	900b883a 	mov	r5,r18
    b100:	0026da40 	call	26da4 <__gedf2>
    b104:	00801f16 	blt	zero,r2,b184 <LMS7002M_rbb_set_filter_bw+0x42c>
    else if (bw > 10e6)  rcc_ctl_lpfl_rbb = 4;
    b108:	01d058f4 	movhi	r7,16739
    b10c:	000d883a 	mov	r6,zero
    b110:	39c4b404 	addi	r7,r7,4816
    b114:	8809883a 	mov	r4,r17
    b118:	900b883a 	mov	r5,r18
    b11c:	0026da40 	call	26da4 <__gedf2>
    b120:	00801a16 	blt	zero,r2,b18c <LMS7002M_rbb_set_filter_bw+0x434>
    else if (bw > 5e6)   rcc_ctl_lpfl_rbb = 3;
    b124:	01d054f4 	movhi	r7,16723
    b128:	000d883a 	mov	r6,zero
    b12c:	39c4b404 	addi	r7,r7,4816
    b130:	8809883a 	mov	r4,r17
    b134:	900b883a 	mov	r5,r18
    b138:	0026da40 	call	26da4 <__gedf2>
    b13c:	00801516 	blt	zero,r2,b194 <LMS7002M_rbb_set_filter_bw+0x43c>
    else if (bw > 3e6)   rcc_ctl_lpfl_rbb = 2;
    b140:	01d051f4 	movhi	r7,16711
    b144:	000d883a 	mov	r6,zero
    b148:	39f8d804 	addi	r7,r7,-7328
    b14c:	8809883a 	mov	r4,r17
    b150:	900b883a 	mov	r5,r18
    b154:	0026da40 	call	26da4 <__gedf2>
    b158:	00801016 	blt	zero,r2,b19c <LMS7002M_rbb_set_filter_bw+0x444>
    }

    //--- c_ctl_lpfl_rbb, rcc_ctl_lpfl_rbb ---//
    LMS7002M_regs(self)->reg_0x0117_c_ctl_lpfl_rbb = (int)(2160e6/bw - 103);
    int rcc_ctl_lpfl_rbb = 0;
    if      (bw > 15e6)  rcc_ctl_lpfl_rbb = 5;
    b15c:	01d04d74 	movhi	r7,16693
    b160:	000d883a 	mov	r6,zero
    b164:	39d73004 	addi	r7,r7,23744
    b168:	8809883a 	mov	r4,r17
    b16c:	900b883a 	mov	r5,r18
    b170:	04c00044 	movi	r19,1
    b174:	0026da40 	call	26da4 <__gedf2>
    b178:	00800916 	blt	zero,r2,b1a0 <LMS7002M_rbb_set_filter_bw+0x448>
    b17c:	0027883a 	mov	r19,zero
    b180:	00000706 	br	b1a0 <LMS7002M_rbb_set_filter_bw+0x448>
    b184:	04c00144 	movi	r19,5
    b188:	00000506 	br	b1a0 <LMS7002M_rbb_set_filter_bw+0x448>
    else if (bw > 10e6)  rcc_ctl_lpfl_rbb = 4;
    b18c:	04c00104 	movi	r19,4
    b190:	00000306 	br	b1a0 <LMS7002M_rbb_set_filter_bw+0x448>
    else if (bw > 5e6)   rcc_ctl_lpfl_rbb = 3;
    b194:	04c000c4 	movi	r19,3
    b198:	00000106 	br	b1a0 <LMS7002M_rbb_set_filter_bw+0x448>
    else if (bw > 3e6)   rcc_ctl_lpfl_rbb = 2;
    b19c:	e027883a 	mov	r19,fp
    else if (bw > 1.4e6) rcc_ctl_lpfl_rbb = 1;
    else                 rcc_ctl_lpfl_rbb = 0;
    LMS7002M_regs(self)->reg_0x0117_rcc_ctl_lpfl_rbb = rcc_ctl_lpfl_rbb;
    b1a0:	8009883a 	mov	r4,r16
    b1a4:	0008ac80 	call	8ac8 <LMS7002M_regs>
    b1a8:	14c18c15 	stw	r19,1584(r2)
    LMS7002M_regs_spi_write(self, 0x0117);
    b1ac:	04c045c4 	movi	r19,279
    b1b0:	980b883a 	mov	r5,r19
    b1b4:	8009883a 	mov	r4,r16
    b1b8:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    //--- tia rfe registers ---//
    LMS7002M_regs(self)->reg_0x0112_cfb_tia_rfe = 15;
    b1bc:	8009883a 	mov	r4,r16
    b1c0:	0008ac80 	call	8ac8 <LMS7002M_regs>
    b1c4:	00c003c4 	movi	r3,15
    b1c8:	10c17d15 	stw	r3,1524(r2)
    LMS7002M_regs(self)->reg_0x0112_ccomp_tia_rfe = 1;
    b1cc:	8009883a 	mov	r4,r16
    b1d0:	d8c47015 	stw	r3,4544(sp)
    b1d4:	07000044 	movi	fp,1
    b1d8:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs(self)->reg_0x0114_rcomp_tia_rfe = 15;
    b1dc:	8009883a 	mov	r4,r16
    LMS7002M_regs(self)->reg_0x0117_rcc_ctl_lpfl_rbb = rcc_ctl_lpfl_rbb;
    LMS7002M_regs_spi_write(self, 0x0117);

    //--- tia rfe registers ---//
    LMS7002M_regs(self)->reg_0x0112_cfb_tia_rfe = 15;
    LMS7002M_regs(self)->reg_0x0112_ccomp_tia_rfe = 1;
    b1e0:	17017c15 	stw	fp,1520(r2)
    LMS7002M_regs(self)->reg_0x0114_rcomp_tia_rfe = 15;
    b1e4:	0008ac80 	call	8ac8 <LMS7002M_regs>
    b1e8:	d8c47017 	ldw	r3,4544(sp)
    LMS7002M_regs(self)->reg_0x0113_g_tia_rfe = 1;
    b1ec:	8009883a 	mov	r4,r16
    LMS7002M_regs_spi_write(self, 0x0117);

    //--- tia rfe registers ---//
    LMS7002M_regs(self)->reg_0x0112_cfb_tia_rfe = 15;
    LMS7002M_regs(self)->reg_0x0112_ccomp_tia_rfe = 1;
    LMS7002M_regs(self)->reg_0x0114_rcomp_tia_rfe = 15;
    b1f0:	10c18115 	stw	r3,1540(r2)
    LMS7002M_regs(self)->reg_0x0113_g_tia_rfe = 1;
    b1f4:	0008ac80 	call	8ac8 <LMS7002M_regs>
    b1f8:	17018015 	stw	fp,1536(r2)
    LMS7002M_regs_spi_write(self, 0x0112);
    b1fc:	01404484 	movi	r5,274
    b200:	8009883a 	mov	r4,r16
    b204:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x0113);
    b208:	014044c4 	movi	r5,275
    b20c:	8009883a 	mov	r4,r16
    b210:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x0114);
    b214:	01404504 	movi	r5,276
    b218:	8009883a 	mov	r4,r16
    b21c:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    //--- calibration ---//
    status = rx_cal_loop(self, channel, bw,
        &LMS7002M_regs(self)->reg_0x0117_c_ctl_lpfl_rbb,
    b220:	8009883a 	mov	r4,r16
    b224:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs_spi_write(self, 0x0112);
    LMS7002M_regs_spi_write(self, 0x0113);
    LMS7002M_regs_spi_write(self, 0x0114);

    //--- calibration ---//
    status = rx_cal_loop(self, channel, bw,
    b228:	00c1ffc4 	movi	r3,2047
    b22c:	d8c00215 	stw	r3,8(sp)
    b230:	dcc00115 	stw	r19,4(sp)
    b234:	10818d04 	addi	r2,r2,1588
    b238:	00006c06 	br	b3ec <LMS7002M_rbb_set_filter_bw+0x694>

    ////////////////////////////////////////////////////////////////////
    // RBB LPF calibration
    ////////////////////////////////////////////////////////////////////
    if (path == LMS7002M_RBB_LBF) status = rx_cal_rbb_lpfl(self, channel, bw);
    if (path == LMS7002M_RBB_HBF) status = rx_cal_rbb_lpfh(self, channel, bw);
    b23c:	00801204 	movi	r2,72
    b240:	a880711e 	bne	r21,r2,b408 <LMS7002M_rbb_set_filter_bw+0x6b0>
/***********************************************************************
 * Perform RBB LPFH filter calibration
 **********************************************************************/
static int rx_cal_rbb_lpfh(LMS7002M_t *self, const LMS7002M_chan_t channel, const double bw)
{
    LMS7002M_set_mac_ch(self, channel);
    b244:	a00b883a 	mov	r5,r20
    b248:	8009883a 	mov	r4,r16
    b24c:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    //--- check filter bounds ---//
    if (bw < 20e6 || bw > 60e6)
    b250:	01d05cf4 	movhi	r7,16755
    b254:	000d883a 	mov	r6,zero
    b258:	39c4b404 	addi	r7,r7,4816
    b25c:	8809883a 	mov	r4,r17
    b260:	900b883a 	mov	r5,r18
    b264:	0026e800 	call	26e80 <__ledf2>
    b268:	1000df16 	blt	r2,zero,b5e8 <LMS7002M_rbb_set_filter_bw+0x890>
    b26c:	01d06374 	movhi	r7,16781
    b270:	000d883a 	mov	r6,zero
    b274:	39e70e04 	addi	r7,r7,-25544
    b278:	8809883a 	mov	r4,r17
    b27c:	900b883a 	mov	r5,r18
    b280:	0026da40 	call	26da4 <__gedf2>
    b284:	0080d816 	blt	zero,r2,b5e8 <LMS7002M_rbb_set_filter_bw+0x890>
        //LMS7_logf(LMS7_ERROR, "LPFH bandwidth not in range[0.5 to 60 MHz]");
        return -1;
    }

    //--- c_ctl_lpfl_rbb, rcc_ctl_lpfl_rbb ---//
    LMS7002M_regs(self)->reg_0x0116_c_ctl_lpfh_rbb = (int)(6000e6/bw - 50);
    b288:	8009883a 	mov	r4,r16
    b28c:	0008ac80 	call	8ac8 <LMS7002M_regs>
    b290:	01507db4 	movhi	r5,16886
    b294:	880d883a 	mov	r6,r17
    b298:	900f883a 	mov	r7,r18
    b29c:	01300034 	movhi	r4,49152
    b2a0:	295682c4 	addi	r5,r5,23051
    b2a4:	1027883a 	mov	r19,r2
    b2a8:	002634c0 	call	2634c <__divdf3>
    b2ac:	000d883a 	mov	r6,zero
    b2b0:	01d01274 	movhi	r7,16457
    b2b4:	1009883a 	mov	r4,r2
    b2b8:	180b883a 	mov	r5,r3
    b2bc:	00277e00 	call	277e0 <__subdf3>
    b2c0:	180b883a 	mov	r5,r3
    b2c4:	1009883a 	mov	r4,r2
    b2c8:	00280dc0 	call	280dc <__fixdfsi>
    int rcc_ctl_lpfh_rbb = (int)(bw/10e6 - 3);
    b2cc:	01d058f4 	movhi	r7,16739
        //LMS7_logf(LMS7_ERROR, "LPFH bandwidth not in range[0.5 to 60 MHz]");
        return -1;
    }

    //--- c_ctl_lpfl_rbb, rcc_ctl_lpfl_rbb ---//
    LMS7002M_regs(self)->reg_0x0116_c_ctl_lpfh_rbb = (int)(6000e6/bw - 50);
    b2d0:	98818b15 	stw	r2,1580(r19)
    int rcc_ctl_lpfh_rbb = (int)(bw/10e6 - 3);
    b2d4:	000d883a 	mov	r6,zero
    b2d8:	39c4b404 	addi	r7,r7,4816
    b2dc:	8809883a 	mov	r4,r17
    b2e0:	900b883a 	mov	r5,r18
    b2e4:	002634c0 	call	2634c <__divdf3>
    b2e8:	000d883a 	mov	r6,zero
    b2ec:	01d00234 	movhi	r7,16392
    b2f0:	1009883a 	mov	r4,r2
    b2f4:	180b883a 	mov	r5,r3
    b2f8:	00277e00 	call	277e0 <__subdf3>
    b2fc:	180b883a 	mov	r5,r3
    b300:	1009883a 	mov	r4,r2
    b304:	00280dc0 	call	280dc <__fixdfsi>
    if (rcc_ctl_lpfh_rbb < 0) rcc_ctl_lpfh_rbb = 0;
    LMS7002M_regs(self)->reg_0x0116_rcc_ctl_lpfh_rbb = rcc_ctl_lpfh_rbb;
    b308:	8009883a 	mov	r4,r16
        return -1;
    }

    //--- c_ctl_lpfl_rbb, rcc_ctl_lpfl_rbb ---//
    LMS7002M_regs(self)->reg_0x0116_c_ctl_lpfh_rbb = (int)(6000e6/bw - 50);
    int rcc_ctl_lpfh_rbb = (int)(bw/10e6 - 3);
    b30c:	1027883a 	mov	r19,r2
    if (rcc_ctl_lpfh_rbb < 0) rcc_ctl_lpfh_rbb = 0;
    LMS7002M_regs(self)->reg_0x0116_rcc_ctl_lpfh_rbb = rcc_ctl_lpfh_rbb;
    b310:	0008ac80 	call	8ac8 <LMS7002M_regs>
    b314:	9807883a 	mov	r3,r19
    b318:	9800010e 	bge	r19,zero,b320 <LMS7002M_rbb_set_filter_bw+0x5c8>
    b31c:	0007883a 	mov	r3,zero
    LMS7002M_regs_spi_write(self, 0x0116);
    b320:	07004584 	movi	fp,278
    b324:	e00b883a 	mov	r5,fp

    //--- c_ctl_lpfl_rbb, rcc_ctl_lpfl_rbb ---//
    LMS7002M_regs(self)->reg_0x0116_c_ctl_lpfh_rbb = (int)(6000e6/bw - 50);
    int rcc_ctl_lpfh_rbb = (int)(bw/10e6 - 3);
    if (rcc_ctl_lpfh_rbb < 0) rcc_ctl_lpfh_rbb = 0;
    LMS7002M_regs(self)->reg_0x0116_rcc_ctl_lpfh_rbb = rcc_ctl_lpfh_rbb;
    b328:	10c18a15 	stw	r3,1576(r2)
    LMS7002M_regs_spi_write(self, 0x0116);
    b32c:	8009883a 	mov	r4,r16
    b330:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    //--- tia rfe registers and rbb ---//
    LMS7002M_regs(self)->reg_0x0112_cfb_tia_rfe = 15;
    b334:	8009883a 	mov	r4,r16
    b338:	0008ac80 	call	8ac8 <LMS7002M_regs>
    b33c:	00c003c4 	movi	r3,15
    b340:	10c17d15 	stw	r3,1524(r2)
    LMS7002M_regs(self)->reg_0x0112_ccomp_tia_rfe = 1;
    b344:	8009883a 	mov	r4,r16
    b348:	04c00044 	movi	r19,1
    b34c:	d8c47015 	stw	r3,4544(sp)
    b350:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs(self)->reg_0x0114_rcomp_tia_rfe = 15;
    b354:	8009883a 	mov	r4,r16
    LMS7002M_regs(self)->reg_0x0116_rcc_ctl_lpfh_rbb = rcc_ctl_lpfh_rbb;
    LMS7002M_regs_spi_write(self, 0x0116);

    //--- tia rfe registers and rbb ---//
    LMS7002M_regs(self)->reg_0x0112_cfb_tia_rfe = 15;
    LMS7002M_regs(self)->reg_0x0112_ccomp_tia_rfe = 1;
    b358:	14c17c15 	stw	r19,1520(r2)
    LMS7002M_regs(self)->reg_0x0114_rcomp_tia_rfe = 15;
    b35c:	0008ac80 	call	8ac8 <LMS7002M_regs>
    b360:	d8c47017 	ldw	r3,4544(sp)
    LMS7002M_regs(self)->reg_0x0113_g_tia_rfe = 1;
    b364:	8009883a 	mov	r4,r16
    LMS7002M_regs_spi_write(self, 0x0116);

    //--- tia rfe registers and rbb ---//
    LMS7002M_regs(self)->reg_0x0112_cfb_tia_rfe = 15;
    LMS7002M_regs(self)->reg_0x0112_ccomp_tia_rfe = 1;
    LMS7002M_regs(self)->reg_0x0114_rcomp_tia_rfe = 15;
    b368:	10c18115 	stw	r3,1540(r2)
    LMS7002M_regs(self)->reg_0x0113_g_tia_rfe = 1;
    b36c:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs(self)->reg_0x0115_pd_lpfh_rbb = 0;
    b370:	8009883a 	mov	r4,r16

    //--- tia rfe registers and rbb ---//
    LMS7002M_regs(self)->reg_0x0112_cfb_tia_rfe = 15;
    LMS7002M_regs(self)->reg_0x0112_ccomp_tia_rfe = 1;
    LMS7002M_regs(self)->reg_0x0114_rcomp_tia_rfe = 15;
    LMS7002M_regs(self)->reg_0x0113_g_tia_rfe = 1;
    b374:	14c18015 	stw	r19,1536(r2)
    LMS7002M_regs(self)->reg_0x0115_pd_lpfh_rbb = 0;
    b378:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs(self)->reg_0x0115_pd_lpfl_rbb = 1;
    b37c:	8009883a 	mov	r4,r16
    //--- tia rfe registers and rbb ---//
    LMS7002M_regs(self)->reg_0x0112_cfb_tia_rfe = 15;
    LMS7002M_regs(self)->reg_0x0112_ccomp_tia_rfe = 1;
    LMS7002M_regs(self)->reg_0x0114_rcomp_tia_rfe = 15;
    LMS7002M_regs(self)->reg_0x0113_g_tia_rfe = 1;
    LMS7002M_regs(self)->reg_0x0115_pd_lpfh_rbb = 0;
    b380:	10018515 	stw	zero,1556(r2)
    LMS7002M_regs(self)->reg_0x0115_pd_lpfl_rbb = 1;
    b384:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs(self)->reg_0x0118_input_ctl_pga_rbb = 1;
    b388:	8009883a 	mov	r4,r16
    LMS7002M_regs(self)->reg_0x0112_cfb_tia_rfe = 15;
    LMS7002M_regs(self)->reg_0x0112_ccomp_tia_rfe = 1;
    LMS7002M_regs(self)->reg_0x0114_rcomp_tia_rfe = 15;
    LMS7002M_regs(self)->reg_0x0113_g_tia_rfe = 1;
    LMS7002M_regs(self)->reg_0x0115_pd_lpfh_rbb = 0;
    LMS7002M_regs(self)->reg_0x0115_pd_lpfl_rbb = 1;
    b38c:	14c18615 	stw	r19,1560(r2)
    LMS7002M_regs(self)->reg_0x0118_input_ctl_pga_rbb = 1;
    b390:	0008ac80 	call	8ac8 <LMS7002M_regs>
    b394:	14c18e15 	stw	r19,1592(r2)
    LMS7002M_regs_spi_write(self, 0x0112);
    b398:	01404484 	movi	r5,274
    b39c:	8009883a 	mov	r4,r16
    b3a0:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x0113);
    b3a4:	014044c4 	movi	r5,275
    b3a8:	8009883a 	mov	r4,r16
    b3ac:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x0114);
    b3b0:	01404504 	movi	r5,276
    b3b4:	8009883a 	mov	r4,r16
    b3b8:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x0115);
    b3bc:	01404544 	movi	r5,277
    b3c0:	8009883a 	mov	r4,r16
    b3c4:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x0118);
    b3c8:	01404604 	movi	r5,280
    b3cc:	8009883a 	mov	r4,r16
    b3d0:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    //--- calibration ---//
    return rx_cal_loop(self, channel, bw,
        &LMS7002M_regs(self)->reg_0x0116_c_ctl_lpfh_rbb,
    b3d4:	8009883a 	mov	r4,r16
    b3d8:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs_spi_write(self, 0x0114);
    LMS7002M_regs_spi_write(self, 0x0115);
    LMS7002M_regs_spi_write(self, 0x0118);

    //--- calibration ---//
    return rx_cal_loop(self, channel, bw,
    b3dc:	00c03fc4 	movi	r3,255
    b3e0:	d8c00215 	stw	r3,8(sp)
    b3e4:	df000115 	stw	fp,4(sp)
    b3e8:	10818b04 	addi	r2,r2,1580
    b3ec:	d8800015 	stw	r2,0(sp)
    b3f0:	880d883a 	mov	r6,r17
    b3f4:	900f883a 	mov	r7,r18
    b3f8:	a00b883a 	mov	r5,r20
    b3fc:	8009883a 	mov	r4,r16
    b400:	000a7400 	call	a740 <rx_cal_loop.isra.0>
    b404:	1027883a 	mov	r19,r2
    done:

    ////////////////////////////////////////////////////////////////////
    // stash tia + rbb calibration results
    ////////////////////////////////////////////////////////////////////
    LMS7002M_set_mac_ch(self, channel);
    b408:	a00b883a 	mov	r5,r20
    b40c:	8009883a 	mov	r4,r16
    b410:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>
    const int cfb_tia_rfe = LMS7002M_regs(self)->reg_0x0112_cfb_tia_rfe;
    b414:	8009883a 	mov	r4,r16
    b418:	0008ac80 	call	8ac8 <LMS7002M_regs>
    b41c:	12c17d17 	ldw	r11,1524(r2)
    const int ccomp_tia_rfe = LMS7002M_regs(self)->reg_0x0112_ccomp_tia_rfe;
    b420:	8009883a 	mov	r4,r16
    b424:	dac46b15 	stw	r11,4524(sp)
    b428:	0008ac80 	call	8ac8 <LMS7002M_regs>
    b42c:	12817c17 	ldw	r10,1520(r2)
    const int rcomp_tia_rfe = LMS7002M_regs(self)->reg_0x0114_rcomp_tia_rfe;
    b430:	8009883a 	mov	r4,r16
    b434:	da846c15 	stw	r10,4528(sp)
    b438:	0008ac80 	call	8ac8 <LMS7002M_regs>
    b43c:	12418117 	ldw	r9,1540(r2)
    const int rcc_ctl_lpfl_rbb = LMS7002M_regs(self)->reg_0x0117_rcc_ctl_lpfl_rbb;
    b440:	8009883a 	mov	r4,r16
    b444:	da446d15 	stw	r9,4532(sp)
    b448:	0008ac80 	call	8ac8 <LMS7002M_regs>
    b44c:	12018c17 	ldw	r8,1584(r2)
    const int c_ctl_lpfl_rbb = LMS7002M_regs(self)->reg_0x0117_c_ctl_lpfl_rbb;
    b450:	8009883a 	mov	r4,r16
    b454:	da046e15 	stw	r8,4536(sp)
    b458:	0008ac80 	call	8ac8 <LMS7002M_regs>
    b45c:	11c18d17 	ldw	r7,1588(r2)
    const int rcc_ctl_lpfh_rbb = LMS7002M_regs(self)->reg_0x0116_rcc_ctl_lpfh_rbb;
    b460:	8009883a 	mov	r4,r16
    b464:	d9c46f15 	stw	r7,4540(sp)
    b468:	0008ac80 	call	8ac8 <LMS7002M_regs>
    b46c:	10c18a17 	ldw	r3,1576(r2)
    const int c_ctl_lpfh_rbb = LMS7002M_regs(self)->reg_0x0116_c_ctl_lpfh_rbb;
    b470:	8009883a 	mov	r4,r16
    b474:	d8c47015 	stw	r3,4544(sp)
    b478:	0008ac80 	call	8ac8 <LMS7002M_regs>

    ////////////////////////////////////////////////////////////////////
    // restore original register values
    ////////////////////////////////////////////////////////////////////
    memcpy(self->_regs, saved_map, sizeof(saved_map));
    b47c:	01846804 	movi	r6,4512
    b480:	d9400304 	addi	r5,sp,12
    b484:	b809883a 	mov	r4,r23
    const int ccomp_tia_rfe = LMS7002M_regs(self)->reg_0x0112_ccomp_tia_rfe;
    const int rcomp_tia_rfe = LMS7002M_regs(self)->reg_0x0114_rcomp_tia_rfe;
    const int rcc_ctl_lpfl_rbb = LMS7002M_regs(self)->reg_0x0117_rcc_ctl_lpfl_rbb;
    const int c_ctl_lpfl_rbb = LMS7002M_regs(self)->reg_0x0117_c_ctl_lpfl_rbb;
    const int rcc_ctl_lpfh_rbb = LMS7002M_regs(self)->reg_0x0116_rcc_ctl_lpfh_rbb;
    const int c_ctl_lpfh_rbb = LMS7002M_regs(self)->reg_0x0116_c_ctl_lpfh_rbb;
    b488:	17018b17 	ldw	fp,1580(r2)

    ////////////////////////////////////////////////////////////////////
    // restore original register values
    ////////////////////////////////////////////////////////////////////
    memcpy(self->_regs, saved_map, sizeof(saved_map));
    b48c:	00127200 	call	12720 <memcpy>
    LMS7002M_regs_to_rfic(self);
    b490:	8009883a 	mov	r4,r16
    b494:	0008ad00 	call	8ad0 <LMS7002M_regs_to_rfic>
    LMS7002M_set_mac_ch(self, channel);
    b498:	a00b883a 	mov	r5,r20
    b49c:	8009883a 	mov	r4,r16
    b4a0:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    ////////////////////////////////////////////////////////////////////
    // apply tia calibration results
    ////////////////////////////////////////////////////////////////////
    LMS7002M_set_mac_ch(self, channel);
    b4a4:	a00b883a 	mov	r5,r20
    b4a8:	8009883a 	mov	r4,r16
    b4ac:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>
    LMS7002M_regs(self)->reg_0x010f_ict_tiamain_rfe = 2;
    b4b0:	8009883a 	mov	r4,r16
    b4b4:	0008ac80 	call	8ac8 <LMS7002M_regs>
    b4b8:	05c00084 	movi	r23,2
    b4bc:	15c17515 	stw	r23,1492(r2)
    LMS7002M_regs(self)->reg_0x010f_ict_tiaout_rfe = 2;
    b4c0:	8009883a 	mov	r4,r16
    b4c4:	0008ac80 	call	8ac8 <LMS7002M_regs>
    b4c8:	15c17615 	stw	r23,1496(r2)
    LMS7002M_regs(self)->reg_0x0114_rfb_tia_rfe = 16;
    b4cc:	8009883a 	mov	r4,r16
    b4d0:	0008ac80 	call	8ac8 <LMS7002M_regs>
    b4d4:	05c00404 	movi	r23,16
    LMS7002M_regs(self)->reg_0x0112_cfb_tia_rfe = cfb_tia_rfe;
    b4d8:	8009883a 	mov	r4,r16
    // apply tia calibration results
    ////////////////////////////////////////////////////////////////////
    LMS7002M_set_mac_ch(self, channel);
    LMS7002M_regs(self)->reg_0x010f_ict_tiamain_rfe = 2;
    LMS7002M_regs(self)->reg_0x010f_ict_tiaout_rfe = 2;
    LMS7002M_regs(self)->reg_0x0114_rfb_tia_rfe = 16;
    b4dc:	15c18215 	stw	r23,1544(r2)
    LMS7002M_regs(self)->reg_0x0112_cfb_tia_rfe = cfb_tia_rfe;
    b4e0:	0008ac80 	call	8ac8 <LMS7002M_regs>
    b4e4:	dac46b17 	ldw	r11,4524(sp)
    LMS7002M_regs(self)->reg_0x0112_ccomp_tia_rfe = ccomp_tia_rfe;
    b4e8:	8009883a 	mov	r4,r16
    ////////////////////////////////////////////////////////////////////
    LMS7002M_set_mac_ch(self, channel);
    LMS7002M_regs(self)->reg_0x010f_ict_tiamain_rfe = 2;
    LMS7002M_regs(self)->reg_0x010f_ict_tiaout_rfe = 2;
    LMS7002M_regs(self)->reg_0x0114_rfb_tia_rfe = 16;
    LMS7002M_regs(self)->reg_0x0112_cfb_tia_rfe = cfb_tia_rfe;
    b4ec:	12c17d15 	stw	r11,1524(r2)
    LMS7002M_regs(self)->reg_0x0112_ccomp_tia_rfe = ccomp_tia_rfe;
    b4f0:	0008ac80 	call	8ac8 <LMS7002M_regs>
    b4f4:	da846c17 	ldw	r10,4528(sp)
    LMS7002M_regs(self)->reg_0x0114_rcomp_tia_rfe = rcomp_tia_rfe;
    b4f8:	8009883a 	mov	r4,r16
    LMS7002M_set_mac_ch(self, channel);
    LMS7002M_regs(self)->reg_0x010f_ict_tiamain_rfe = 2;
    LMS7002M_regs(self)->reg_0x010f_ict_tiaout_rfe = 2;
    LMS7002M_regs(self)->reg_0x0114_rfb_tia_rfe = 16;
    LMS7002M_regs(self)->reg_0x0112_cfb_tia_rfe = cfb_tia_rfe;
    LMS7002M_regs(self)->reg_0x0112_ccomp_tia_rfe = ccomp_tia_rfe;
    b4fc:	12817c15 	stw	r10,1520(r2)
    LMS7002M_regs(self)->reg_0x0114_rcomp_tia_rfe = rcomp_tia_rfe;
    b500:	0008ac80 	call	8ac8 <LMS7002M_regs>
    b504:	da446d17 	ldw	r9,4532(sp)
    LMS7002M_regs_spi_write(self, 0x010f);
    b508:	014043c4 	movi	r5,271
    b50c:	8009883a 	mov	r4,r16
    LMS7002M_regs(self)->reg_0x010f_ict_tiamain_rfe = 2;
    LMS7002M_regs(self)->reg_0x010f_ict_tiaout_rfe = 2;
    LMS7002M_regs(self)->reg_0x0114_rfb_tia_rfe = 16;
    LMS7002M_regs(self)->reg_0x0112_cfb_tia_rfe = cfb_tia_rfe;
    LMS7002M_regs(self)->reg_0x0112_ccomp_tia_rfe = ccomp_tia_rfe;
    LMS7002M_regs(self)->reg_0x0114_rcomp_tia_rfe = rcomp_tia_rfe;
    b510:	12418115 	stw	r9,1540(r2)
    LMS7002M_regs_spi_write(self, 0x010f);
    b514:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x0114);
    b518:	01404504 	movi	r5,276
    b51c:	8009883a 	mov	r4,r16
    b520:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x0112);
    b524:	01404484 	movi	r5,274
    b528:	8009883a 	mov	r4,r16
    b52c:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    ////////////////////////////////////////////////////////////////////
    // apply rbb calibration results
    ////////////////////////////////////////////////////////////////////
    LMS7002M_regs(self)->reg_0x0117_rcc_ctl_lpfl_rbb = rcc_ctl_lpfl_rbb;
    b530:	8009883a 	mov	r4,r16
    b534:	0008ac80 	call	8ac8 <LMS7002M_regs>
    b538:	da046e17 	ldw	r8,4536(sp)
    LMS7002M_regs(self)->reg_0x0117_c_ctl_lpfl_rbb = c_ctl_lpfl_rbb;
    b53c:	8009883a 	mov	r4,r16
    LMS7002M_regs_spi_write(self, 0x0112);

    ////////////////////////////////////////////////////////////////////
    // apply rbb calibration results
    ////////////////////////////////////////////////////////////////////
    LMS7002M_regs(self)->reg_0x0117_rcc_ctl_lpfl_rbb = rcc_ctl_lpfl_rbb;
    b540:	12018c15 	stw	r8,1584(r2)
    LMS7002M_regs(self)->reg_0x0117_c_ctl_lpfl_rbb = c_ctl_lpfl_rbb;
    b544:	0008ac80 	call	8ac8 <LMS7002M_regs>
    b548:	d9c46f17 	ldw	r7,4540(sp)
    LMS7002M_regs(self)->reg_0x0116_rcc_ctl_lpfh_rbb = rcc_ctl_lpfh_rbb;
    b54c:	8009883a 	mov	r4,r16

    ////////////////////////////////////////////////////////////////////
    // apply rbb calibration results
    ////////////////////////////////////////////////////////////////////
    LMS7002M_regs(self)->reg_0x0117_rcc_ctl_lpfl_rbb = rcc_ctl_lpfl_rbb;
    LMS7002M_regs(self)->reg_0x0117_c_ctl_lpfl_rbb = c_ctl_lpfl_rbb;
    b550:	11c18d15 	stw	r7,1588(r2)
    LMS7002M_regs(self)->reg_0x0116_rcc_ctl_lpfh_rbb = rcc_ctl_lpfh_rbb;
    b554:	0008ac80 	call	8ac8 <LMS7002M_regs>
    b558:	d8c47017 	ldw	r3,4544(sp)
    LMS7002M_regs(self)->reg_0x0116_c_ctl_lpfh_rbb = c_ctl_lpfh_rbb;
    b55c:	8009883a 	mov	r4,r16
    ////////////////////////////////////////////////////////////////////
    // apply rbb calibration results
    ////////////////////////////////////////////////////////////////////
    LMS7002M_regs(self)->reg_0x0117_rcc_ctl_lpfl_rbb = rcc_ctl_lpfl_rbb;
    LMS7002M_regs(self)->reg_0x0117_c_ctl_lpfl_rbb = c_ctl_lpfl_rbb;
    LMS7002M_regs(self)->reg_0x0116_rcc_ctl_lpfh_rbb = rcc_ctl_lpfh_rbb;
    b560:	10c18a15 	stw	r3,1576(r2)
    LMS7002M_regs(self)->reg_0x0116_c_ctl_lpfh_rbb = c_ctl_lpfh_rbb;
    b564:	0008ac80 	call	8ac8 <LMS7002M_regs>
    b568:	17018b15 	stw	fp,1580(r2)
    LMS7002M_regs(self)->reg_0x0119_ict_pga_out_rbb = 20;
    b56c:	8009883a 	mov	r4,r16
    b570:	0008ac80 	call	8ac8 <LMS7002M_regs>
    b574:	07000504 	movi	fp,20
    LMS7002M_regs(self)->reg_0x0119_ict_pga_in_rbb = 20;
    b578:	8009883a 	mov	r4,r16
    ////////////////////////////////////////////////////////////////////
    LMS7002M_regs(self)->reg_0x0117_rcc_ctl_lpfl_rbb = rcc_ctl_lpfl_rbb;
    LMS7002M_regs(self)->reg_0x0117_c_ctl_lpfl_rbb = c_ctl_lpfl_rbb;
    LMS7002M_regs(self)->reg_0x0116_rcc_ctl_lpfh_rbb = rcc_ctl_lpfh_rbb;
    LMS7002M_regs(self)->reg_0x0116_c_ctl_lpfh_rbb = c_ctl_lpfh_rbb;
    LMS7002M_regs(self)->reg_0x0119_ict_pga_out_rbb = 20;
    b57c:	17019215 	stw	fp,1608(r2)
    LMS7002M_regs(self)->reg_0x0119_ict_pga_in_rbb = 20;
    b580:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs(self)->reg_0x0116_r_ctl_lpf_rbb = 16;
    b584:	8009883a 	mov	r4,r16
    LMS7002M_regs(self)->reg_0x0117_rcc_ctl_lpfl_rbb = rcc_ctl_lpfl_rbb;
    LMS7002M_regs(self)->reg_0x0117_c_ctl_lpfl_rbb = c_ctl_lpfl_rbb;
    LMS7002M_regs(self)->reg_0x0116_rcc_ctl_lpfh_rbb = rcc_ctl_lpfh_rbb;
    LMS7002M_regs(self)->reg_0x0116_c_ctl_lpfh_rbb = c_ctl_lpfh_rbb;
    LMS7002M_regs(self)->reg_0x0119_ict_pga_out_rbb = 20;
    LMS7002M_regs(self)->reg_0x0119_ict_pga_in_rbb = 20;
    b588:	17019315 	stw	fp,1612(r2)
    LMS7002M_regs(self)->reg_0x0116_r_ctl_lpf_rbb = 16;
    b58c:	0008ac80 	call	8ac8 <LMS7002M_regs>
    b590:	15c18915 	stw	r23,1572(r2)
    LMS7002M_regs_spi_write(self, 0x0117);
    b594:	014045c4 	movi	r5,279
    b598:	8009883a 	mov	r4,r16
    b59c:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x0119);
    b5a0:	01404644 	movi	r5,281
    b5a4:	8009883a 	mov	r4,r16
    b5a8:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x0116);
    b5ac:	01404584 	movi	r5,278
    b5b0:	8009883a 	mov	r4,r16
    b5b4:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    ////////////////////////////////////////////////////////////////////
    // set the filter selection
    ////////////////////////////////////////////////////////////////////
    LMS7002M_rbb_set_path(self, channel, path);
    b5b8:	a80d883a 	mov	r6,r21
    b5bc:	a00b883a 	mov	r5,r20
    b5c0:	8009883a 	mov	r4,r16
    b5c4:	0009a340 	call	9a34 <LMS7002M_rbb_set_path>

    if (bwactual != NULL) *bwactual = bw;
    b5c8:	b0000526 	beq	r22,zero,b5e0 <LMS7002M_rbb_set_filter_bw+0x888>
    b5cc:	b4400015 	stw	r17,0(r22)
    b5d0:	b4800115 	stw	r18,4(r22)
    b5d4:	00000206 	br	b5e0 <LMS7002M_rbb_set_filter_bw+0x888>

    //check for initialized reference frequencies
    if (self->cgen_fref == 0.0)
    {
        //LMS7_logf(LMS7_ERROR, "cgen_fref not initialized");
        return -1;
    b5d8:	00bfffc4 	movi	r2,-1
    b5dc:	00000406 	br	b5f0 <LMS7002M_rbb_set_filter_bw+0x898>
    // set the filter selection
    ////////////////////////////////////////////////////////////////////
    LMS7002M_rbb_set_path(self, channel, path);

    if (bwactual != NULL) *bwactual = bw;
    return status;
    b5e0:	9805883a 	mov	r2,r19
    b5e4:	00000206 	br	b5f0 <LMS7002M_rbb_set_filter_bw+0x898>

    //--- check filter bounds ---//
    if (bw < 0.5e6 || bw > 20e6)
    {
        //LMS7_logf(LMS7_ERROR, "LPFL bandwidth not in range[0.5 to 20 MHz]");
        status = -1;
    b5e8:	04ffffc4 	movi	r19,-1
    b5ec:	003f8606 	br	b408 <__alt_data_end+0xfffccc08>
    ////////////////////////////////////////////////////////////////////
    LMS7002M_rbb_set_path(self, channel, path);

    if (bwactual != NULL) *bwactual = bw;
    return status;
}
    b5f0:	dfc47a17 	ldw	ra,4584(sp)
    b5f4:	df047917 	ldw	fp,4580(sp)
    b5f8:	ddc47817 	ldw	r23,4576(sp)
    b5fc:	dd847717 	ldw	r22,4572(sp)
    b600:	dd447617 	ldw	r21,4568(sp)
    b604:	dd047517 	ldw	r20,4564(sp)
    b608:	dcc47417 	ldw	r19,4560(sp)
    b60c:	dc847317 	ldw	r18,4556(sp)
    b610:	dc447217 	ldw	r17,4552(sp)
    b614:	dc047117 	ldw	r16,4548(sp)
    b618:	dec47b04 	addi	sp,sp,4588
    b61c:	f800283a 	ret

0000b620 <LMS7002M_rxtsp_enable>:
#include <stdlib.h>
#include <math.h> //M_PI
#include "LMS7002M_impl.h"

void LMS7002M_rxtsp_enable(LMS7002M_t *self, const LMS7002M_chan_t channel, const bool enable)
{
    b620:	defffd04 	addi	sp,sp,-12
    b624:	dfc00215 	stw	ra,8(sp)
    b628:	dc400115 	stw	r17,4(sp)
    b62c:	dc000015 	stw	r16,0(sp)
    b630:	3023883a 	mov	r17,r6
    b634:	2021883a 	mov	r16,r4
    LMS7002M_set_mac_ch(self, channel);
    b638:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    self->regs->reg_0x0400_en = enable?1:0;
    b63c:	80846917 	ldw	r2,4516(r16)
    b640:	8c403fcc 	andi	r17,r17,255
    self->regs->reg_0x0400_bstart = 0;
    self->regs->reg_0x0400_insel = REG_0X0400_INSEL_LML; //r19 regs - probably means baseband input
    LMS7002M_regs_spi_write(self, 0x0400);
    b644:	8009883a 	mov	r4,r16

void LMS7002M_rxtsp_enable(LMS7002M_t *self, const LMS7002M_chan_t channel, const bool enable)
{
    LMS7002M_set_mac_ch(self, channel);

    self->regs->reg_0x0400_en = enable?1:0;
    b648:	1441fb15 	stw	r17,2028(r2)
    self->regs->reg_0x0400_bstart = 0;
    self->regs->reg_0x0400_insel = REG_0X0400_INSEL_LML; //r19 regs - probably means baseband input
    LMS7002M_regs_spi_write(self, 0x0400);
    b64c:	04410004 	movi	r17,1024
    b650:	880b883a 	mov	r5,r17
void LMS7002M_rxtsp_enable(LMS7002M_t *self, const LMS7002M_chan_t channel, const bool enable)
{
    LMS7002M_set_mac_ch(self, channel);

    self->regs->reg_0x0400_en = enable?1:0;
    self->regs->reg_0x0400_bstart = 0;
    b654:	1001fa15 	stw	zero,2024(r2)
    self->regs->reg_0x0400_insel = REG_0X0400_INSEL_LML; //r19 regs - probably means baseband input
    b658:	1001f915 	stw	zero,2020(r2)
    LMS7002M_regs_spi_write(self, 0x0400);
    b65c:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    self->regs->reg_0x0403_hbd_ovr = REG_0X0403_HBD_OVR_BYPASS;
    b660:	80846917 	ldw	r2,4516(r16)
    b664:	00c001c4 	movi	r3,7
    self->regs->reg_0x040c_gfir1_byp = 1;
    self->regs->reg_0x040c_dc_byp = 1;
    self->regs->reg_0x040c_gc_byp = 1;
    self->regs->reg_0x040c_ph_byp = 1;

    LMS7002M_regs_spi_write(self, 0x0400);
    b668:	880b883a 	mov	r5,r17
    self->regs->reg_0x0400_en = enable?1:0;
    self->regs->reg_0x0400_bstart = 0;
    self->regs->reg_0x0400_insel = REG_0X0400_INSEL_LML; //r19 regs - probably means baseband input
    LMS7002M_regs_spi_write(self, 0x0400);

    self->regs->reg_0x0403_hbd_ovr = REG_0X0403_HBD_OVR_BYPASS;
    b66c:	10c1fe15 	stw	r3,2040(r2)

    self->regs->reg_0x040a_agc_mode = REG_0X040A_AGC_MODE_BYPASS;
    b670:	00c00084 	movi	r3,2
    b674:	10c20a15 	stw	r3,2088(r2)

    self->regs->reg_0x040c_cmix_byp = 1;
    b678:	00c00044 	movi	r3,1
    b67c:	10c20f15 	stw	r3,2108(r2)
    self->regs->reg_0x040c_agc_byp = 1;
    b680:	10c21015 	stw	r3,2112(r2)
    self->regs->reg_0x040c_gfir3_byp = 1;
    b684:	10c21115 	stw	r3,2116(r2)
    self->regs->reg_0x040c_gfir2_byp = 1;
    b688:	10c21215 	stw	r3,2120(r2)
    self->regs->reg_0x040c_gfir1_byp = 1;
    b68c:	10c21315 	stw	r3,2124(r2)
    self->regs->reg_0x040c_dc_byp = 1;
    b690:	10c21415 	stw	r3,2128(r2)
    self->regs->reg_0x040c_gc_byp = 1;
    b694:	10c21515 	stw	r3,2132(r2)
    self->regs->reg_0x040c_ph_byp = 1;
    b698:	10c21615 	stw	r3,2136(r2)

    LMS7002M_regs_spi_write(self, 0x0400);
    b69c:	8009883a 	mov	r4,r16
    b6a0:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x0403);
    b6a4:	8009883a 	mov	r4,r16
    b6a8:	014100c4 	movi	r5,1027
    b6ac:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x040a);
    b6b0:	8009883a 	mov	r4,r16
    b6b4:	01410284 	movi	r5,1034
    b6b8:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x040c);
    b6bc:	01410304 	movi	r5,1036
    b6c0:	8009883a 	mov	r4,r16
}
    b6c4:	dfc00217 	ldw	ra,8(sp)
    b6c8:	dc400117 	ldw	r17,4(sp)
    b6cc:	dc000017 	ldw	r16,0(sp)
    b6d0:	dec00304 	addi	sp,sp,12
    self->regs->reg_0x040c_ph_byp = 1;

    LMS7002M_regs_spi_write(self, 0x0400);
    LMS7002M_regs_spi_write(self, 0x0403);
    LMS7002M_regs_spi_write(self, 0x040a);
    LMS7002M_regs_spi_write(self, 0x040c);
    b6d4:	00063001 	jmpi	6300 <LMS7002M_regs_spi_write>

0000b6d8 <LMS7002M_rxtsp_set_decim>:
}

void LMS7002M_rxtsp_set_decim(LMS7002M_t *self, const LMS7002M_chan_t channel, const size_t decim)
{
    b6d8:	defffd04 	addi	sp,sp,-12
    b6dc:	dc400115 	stw	r17,4(sp)
    b6e0:	dc000015 	stw	r16,0(sp)
    b6e4:	dfc00215 	stw	ra,8(sp)
    b6e8:	2021883a 	mov	r16,r4
    b6ec:	3023883a 	mov	r17,r6
    LMS7002M_set_mac_ch(self, channel);
    b6f0:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    if (decim == 1) self->regs->reg_0x0403_hbd_ovr = REG_0X0403_HBD_OVR_BYPASS;
    b6f4:	00c00044 	movi	r3,1
    b6f8:	88c0041e 	bne	r17,r3,b70c <LMS7002M_rxtsp_set_decim+0x34>
    b6fc:	80846917 	ldw	r2,4516(r16)
    b700:	00c001c4 	movi	r3,7
    b704:	10c1fe15 	stw	r3,2040(r2)
    b708:	00001306 	br	b758 <LMS7002M_rxtsp_set_decim+0x80>
    if (decim == 2) self->regs->reg_0x0403_hbd_ovr = 0;
    b70c:	00800084 	movi	r2,2
    b710:	8880031e 	bne	r17,r2,b720 <LMS7002M_rxtsp_set_decim+0x48>
    b714:	80846917 	ldw	r2,4516(r16)
    b718:	1001fe15 	stw	zero,2040(r2)
    b71c:	00000e06 	br	b758 <LMS7002M_rxtsp_set_decim+0x80>
    if (decim == 4) self->regs->reg_0x0403_hbd_ovr = 1;
    b720:	01000104 	movi	r4,4
    b724:	8900021e 	bne	r17,r4,b730 <LMS7002M_rxtsp_set_decim+0x58>
    b728:	80846917 	ldw	r2,4516(r16)
    b72c:	00000e06 	br	b768 <LMS7002M_rxtsp_set_decim+0x90>
    if (decim == 8) self->regs->reg_0x0403_hbd_ovr = 2;
    b730:	00c00204 	movi	r3,8
    b734:	88c0031e 	bne	r17,r3,b744 <LMS7002M_rxtsp_set_decim+0x6c>
    b738:	80c46917 	ldw	r3,4516(r16)
    b73c:	1881fe15 	stw	r2,2040(r3)
    b740:	00000a06 	br	b76c <LMS7002M_rxtsp_set_decim+0x94>
    if (decim == 16) self->regs->reg_0x0403_hbd_ovr = 3;
    b744:	00800404 	movi	r2,16
    b748:	8880031e 	bne	r17,r2,b758 <LMS7002M_rxtsp_set_decim+0x80>
    b74c:	80846917 	ldw	r2,4516(r16)
    b750:	00c000c4 	movi	r3,3
    b754:	00000406 	br	b768 <LMS7002M_rxtsp_set_decim+0x90>
    if (decim == 32) self->regs->reg_0x0403_hbd_ovr = 4;
    b758:	00800804 	movi	r2,32
    b75c:	8880031e 	bne	r17,r2,b76c <LMS7002M_rxtsp_set_decim+0x94>
    b760:	80846917 	ldw	r2,4516(r16)
    b764:	00c00104 	movi	r3,4
    b768:	10c1fe15 	stw	r3,2040(r2)

    LMS7002M_regs_spi_write(self, 0x0403);
    b76c:	014100c4 	movi	r5,1027
    b770:	8009883a 	mov	r4,r16
}
    b774:	dfc00217 	ldw	ra,8(sp)
    b778:	dc400117 	ldw	r17,4(sp)
    b77c:	dc000017 	ldw	r16,0(sp)
    b780:	dec00304 	addi	sp,sp,12
    if (decim == 4) self->regs->reg_0x0403_hbd_ovr = 1;
    if (decim == 8) self->regs->reg_0x0403_hbd_ovr = 2;
    if (decim == 16) self->regs->reg_0x0403_hbd_ovr = 3;
    if (decim == 32) self->regs->reg_0x0403_hbd_ovr = 4;

    LMS7002M_regs_spi_write(self, 0x0403);
    b784:	00063001 	jmpi	6300 <LMS7002M_regs_spi_write>

0000b788 <LMS7002M_rxtsp_set_freq>:
}

void LMS7002M_rxtsp_set_freq(LMS7002M_t *self, const LMS7002M_chan_t channel, const double freqRel)
{
    b788:	defff804 	addi	sp,sp,-32
    b78c:	dd400615 	stw	r21,24(sp)
    b790:	dd000515 	stw	r20,20(sp)
    b794:	dc800315 	stw	r18,12(sp)
    b798:	dc400215 	stw	r17,8(sp)
    b79c:	dc000115 	stw	r16,4(sp)
    b7a0:	3023883a 	mov	r17,r6
    b7a4:	2021883a 	mov	r16,r4
    b7a8:	3825883a 	mov	r18,r7
    b7ac:	dfc00715 	stw	ra,28(sp)
    b7b0:	dcc00415 	stw	r19,16(sp)
    b7b4:	2829883a 	mov	r20,r5
    LMS7002M_set_mac_ch(self, channel);
    b7b8:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>
    self->regs->reg_0x040c_cmix_byp = (freqRel==0.0)?1:0;
    b7bc:	000d883a 	mov	r6,zero
    b7c0:	000f883a 	mov	r7,zero
    b7c4:	8809883a 	mov	r4,r17
    b7c8:	900b883a 	mov	r5,r18
    b7cc:	85446917 	ldw	r21,4516(r16)
    b7d0:	0026d1c0 	call	26d1c <__eqdf2>
    b7d4:	10000226 	beq	r2,zero,b7e0 <LMS7002M_rxtsp_set_freq+0x58>
    b7d8:	0027883a 	mov	r19,zero
    b7dc:	00000106 	br	b7e4 <LMS7002M_rxtsp_set_freq+0x5c>
    b7e0:	04c00044 	movi	r19,1
    LMS7002M_regs_spi_write(self, 0x040c);
    b7e4:	8009883a 	mov	r4,r16
}

void LMS7002M_rxtsp_set_freq(LMS7002M_t *self, const LMS7002M_chan_t channel, const double freqRel)
{
    LMS7002M_set_mac_ch(self, channel);
    self->regs->reg_0x040c_cmix_byp = (freqRel==0.0)?1:0;
    b7e8:	acc20f15 	stw	r19,2108(r21)
    LMS7002M_regs_spi_write(self, 0x040c);
    b7ec:	01410304 	movi	r5,1036
    b7f0:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_set_nco_freq(self, LMS_RX, channel, freqRel);
    b7f4:	880f883a 	mov	r7,r17
    b7f8:	dc800015 	stw	r18,0(sp)
    b7fc:	a00d883a 	mov	r6,r20
    b800:	01400084 	movi	r5,2
    b804:	8009883a 	mov	r4,r16
    b808:	00098ac0 	call	98ac <LMS7002M_set_nco_freq>
}
    b80c:	dfc00717 	ldw	ra,28(sp)
    b810:	dd400617 	ldw	r21,24(sp)
    b814:	dd000517 	ldw	r20,20(sp)
    b818:	dcc00417 	ldw	r19,16(sp)
    b81c:	dc800317 	ldw	r18,12(sp)
    b820:	dc400217 	ldw	r17,8(sp)
    b824:	dc000117 	ldw	r16,4(sp)
    b828:	dec00804 	addi	sp,sp,32
    b82c:	f800283a 	ret

0000b830 <LMS7002M_rxtsp_tsg_const>:

void LMS7002M_rxtsp_tsg_const(LMS7002M_t *self, const LMS7002M_chan_t channel, const int valI, const int valQ)
{
    b830:	defffa04 	addi	sp,sp,-24
    b834:	dfc00515 	stw	ra,20(sp)
    b838:	dd000415 	stw	r20,16(sp)
    b83c:	dcc00315 	stw	r19,12(sp)
    b840:	3829883a 	mov	r20,r7
    b844:	3027883a 	mov	r19,r6
    b848:	dc800215 	stw	r18,8(sp)
    b84c:	dc400115 	stw	r17,4(sp)
    b850:	dc000015 	stw	r16,0(sp)
    b854:	2021883a 	mov	r16,r4
    LMS7002M_set_mac_ch(self, channel);
    b858:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    //muxes
    self->regs->reg_0x0400_tsgfc = REG_0X0400_TSGFC_FS;
    b85c:	80846917 	ldw	r2,4516(r16)
    self->regs->reg_0x0400_tsgmode = REG_0X0400_TSGMODE_DC;
    self->regs->reg_0x0400_insel = REG_0X0400_INSEL_TEST;
    LMS7002M_regs_spi_write(self, 0x0400);
    b860:	04410004 	movi	r17,1024
void LMS7002M_rxtsp_tsg_const(LMS7002M_t *self, const LMS7002M_chan_t channel, const int valI, const int valQ)
{
    LMS7002M_set_mac_ch(self, channel);

    //muxes
    self->regs->reg_0x0400_tsgfc = REG_0X0400_TSGFC_FS;
    b864:	04800044 	movi	r18,1
    b868:	1481f315 	stw	r18,1996(r2)
    self->regs->reg_0x0400_tsgmode = REG_0X0400_TSGMODE_DC;
    b86c:	1481f815 	stw	r18,2016(r2)
    self->regs->reg_0x0400_insel = REG_0X0400_INSEL_TEST;
    b870:	1481f915 	stw	r18,2020(r2)
    LMS7002M_regs_spi_write(self, 0x0400);
    b874:	880b883a 	mov	r5,r17
    b878:	8009883a 	mov	r4,r16
    b87c:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    //load I
    self->regs->reg_0x040b_dc_reg = valI;
    b880:	80846917 	ldw	r2,4516(r16)
    LMS7002M_regs_spi_write(self, 0x040b);
    b884:	8009883a 	mov	r4,r16
    self->regs->reg_0x0400_tsgmode = REG_0X0400_TSGMODE_DC;
    self->regs->reg_0x0400_insel = REG_0X0400_INSEL_TEST;
    LMS7002M_regs_spi_write(self, 0x0400);

    //load I
    self->regs->reg_0x040b_dc_reg = valI;
    b888:	14c20c15 	stw	r19,2096(r2)
    LMS7002M_regs_spi_write(self, 0x040b);
    b88c:	04c102c4 	movi	r19,1035
    b890:	980b883a 	mov	r5,r19
    b894:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    self->regs->reg_0x0400_tsgdcldi = 0;
    b898:	80846917 	ldw	r2,4516(r16)
    LMS7002M_regs_spi_write(self, 0x0400);
    b89c:	880b883a 	mov	r5,r17
    b8a0:	8009883a 	mov	r4,r16
    LMS7002M_regs_spi_write(self, 0x0400);

    //load I
    self->regs->reg_0x040b_dc_reg = valI;
    LMS7002M_regs_spi_write(self, 0x040b);
    self->regs->reg_0x0400_tsgdcldi = 0;
    b8a4:	1001f615 	stw	zero,2008(r2)
    LMS7002M_regs_spi_write(self, 0x0400);
    b8a8:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    self->regs->reg_0x0400_tsgdcldi = 1;
    b8ac:	80846917 	ldw	r2,4516(r16)
    LMS7002M_regs_spi_write(self, 0x0400);
    b8b0:	880b883a 	mov	r5,r17
    b8b4:	8009883a 	mov	r4,r16
    //load I
    self->regs->reg_0x040b_dc_reg = valI;
    LMS7002M_regs_spi_write(self, 0x040b);
    self->regs->reg_0x0400_tsgdcldi = 0;
    LMS7002M_regs_spi_write(self, 0x0400);
    self->regs->reg_0x0400_tsgdcldi = 1;
    b8b8:	1481f615 	stw	r18,2008(r2)
    LMS7002M_regs_spi_write(self, 0x0400);
    b8bc:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    self->regs->reg_0x0400_tsgdcldi = 0;
    b8c0:	80846917 	ldw	r2,4516(r16)
    LMS7002M_regs_spi_write(self, 0x0400);
    b8c4:	880b883a 	mov	r5,r17
    b8c8:	8009883a 	mov	r4,r16
    LMS7002M_regs_spi_write(self, 0x040b);
    self->regs->reg_0x0400_tsgdcldi = 0;
    LMS7002M_regs_spi_write(self, 0x0400);
    self->regs->reg_0x0400_tsgdcldi = 1;
    LMS7002M_regs_spi_write(self, 0x0400);
    self->regs->reg_0x0400_tsgdcldi = 0;
    b8cc:	1001f615 	stw	zero,2008(r2)
    LMS7002M_regs_spi_write(self, 0x0400);
    b8d0:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    //load Q
    self->regs->reg_0x040b_dc_reg = valQ;
    b8d4:	80846917 	ldw	r2,4516(r16)
    LMS7002M_regs_spi_write(self, 0x040b);
    b8d8:	980b883a 	mov	r5,r19
    b8dc:	8009883a 	mov	r4,r16
    LMS7002M_regs_spi_write(self, 0x0400);
    self->regs->reg_0x0400_tsgdcldi = 0;
    LMS7002M_regs_spi_write(self, 0x0400);

    //load Q
    self->regs->reg_0x040b_dc_reg = valQ;
    b8e0:	15020c15 	stw	r20,2096(r2)
    LMS7002M_regs_spi_write(self, 0x040b);
    b8e4:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    self->regs->reg_0x0400_tsgdcldq = 0;
    b8e8:	80846917 	ldw	r2,4516(r16)
    LMS7002M_regs_spi_write(self, 0x0400);
    b8ec:	880b883a 	mov	r5,r17
    b8f0:	8009883a 	mov	r4,r16
    LMS7002M_regs_spi_write(self, 0x0400);

    //load Q
    self->regs->reg_0x040b_dc_reg = valQ;
    LMS7002M_regs_spi_write(self, 0x040b);
    self->regs->reg_0x0400_tsgdcldq = 0;
    b8f4:	1001f515 	stw	zero,2004(r2)
    LMS7002M_regs_spi_write(self, 0x0400);
    b8f8:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    self->regs->reg_0x0400_tsgdcldq = 1;
    b8fc:	80846917 	ldw	r2,4516(r16)
    LMS7002M_regs_spi_write(self, 0x0400);
    b900:	880b883a 	mov	r5,r17
    b904:	8009883a 	mov	r4,r16
    //load Q
    self->regs->reg_0x040b_dc_reg = valQ;
    LMS7002M_regs_spi_write(self, 0x040b);
    self->regs->reg_0x0400_tsgdcldq = 0;
    LMS7002M_regs_spi_write(self, 0x0400);
    self->regs->reg_0x0400_tsgdcldq = 1;
    b908:	1481f515 	stw	r18,2004(r2)
    LMS7002M_regs_spi_write(self, 0x0400);
    b90c:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    self->regs->reg_0x0400_tsgdcldq = 0;
    b910:	80846917 	ldw	r2,4516(r16)
    LMS7002M_regs_spi_write(self, 0x0400);
    b914:	880b883a 	mov	r5,r17
    b918:	8009883a 	mov	r4,r16
    LMS7002M_regs_spi_write(self, 0x040b);
    self->regs->reg_0x0400_tsgdcldq = 0;
    LMS7002M_regs_spi_write(self, 0x0400);
    self->regs->reg_0x0400_tsgdcldq = 1;
    LMS7002M_regs_spi_write(self, 0x0400);
    self->regs->reg_0x0400_tsgdcldq = 0;
    b91c:	1001f515 	stw	zero,2004(r2)
    LMS7002M_regs_spi_write(self, 0x0400);
}
    b920:	dfc00517 	ldw	ra,20(sp)
    b924:	dd000417 	ldw	r20,16(sp)
    b928:	dcc00317 	ldw	r19,12(sp)
    b92c:	dc800217 	ldw	r18,8(sp)
    b930:	dc400117 	ldw	r17,4(sp)
    b934:	dc000017 	ldw	r16,0(sp)
    b938:	dec00604 	addi	sp,sp,24
    self->regs->reg_0x0400_tsgdcldq = 0;
    LMS7002M_regs_spi_write(self, 0x0400);
    self->regs->reg_0x0400_tsgdcldq = 1;
    LMS7002M_regs_spi_write(self, 0x0400);
    self->regs->reg_0x0400_tsgdcldq = 0;
    LMS7002M_regs_spi_write(self, 0x0400);
    b93c:	00063001 	jmpi	6300 <LMS7002M_regs_spi_write>

0000b940 <LMS7002M_rxtsp_tsg_tone>:
}

void LMS7002M_rxtsp_tsg_tone(LMS7002M_t *self, const LMS7002M_chan_t channel)
{
    b940:	defffc04 	addi	sp,sp,-16
    b944:	dfc00315 	stw	ra,12(sp)
    b948:	dc800215 	stw	r18,8(sp)
    b94c:	dc400115 	stw	r17,4(sp)
    b950:	dc000015 	stw	r16,0(sp)
    b954:	2021883a 	mov	r16,r4
    LMS7002M_set_mac_ch(self, channel);
    b958:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    //muxes
    self->regs->reg_0x0400_tsgmode = REG_0X0400_TSGMODE_NCO;
    b95c:	80846917 	ldw	r2,4516(r16)
    self->regs->reg_0x0400_insel = REG_0X0400_INSEL_TEST;
    b960:	04800044 	movi	r18,1
    LMS7002M_regs_spi_write(self, 0x0400);
    b964:	04410004 	movi	r17,1024
{
    LMS7002M_set_mac_ch(self, channel);

    //muxes
    self->regs->reg_0x0400_tsgmode = REG_0X0400_TSGMODE_NCO;
    self->regs->reg_0x0400_insel = REG_0X0400_INSEL_TEST;
    b968:	1481f915 	stw	r18,2020(r2)
    LMS7002M_regs_spi_write(self, 0x0400);
    b96c:	880b883a 	mov	r5,r17
    b970:	8009883a 	mov	r4,r16
void LMS7002M_rxtsp_tsg_tone(LMS7002M_t *self, const LMS7002M_chan_t channel)
{
    LMS7002M_set_mac_ch(self, channel);

    //muxes
    self->regs->reg_0x0400_tsgmode = REG_0X0400_TSGMODE_NCO;
    b974:	1001f815 	stw	zero,2016(r2)
    self->regs->reg_0x0400_insel = REG_0X0400_INSEL_TEST;
    LMS7002M_regs_spi_write(self, 0x0400);
    b978:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    self->regs->reg_0x0400_tsgfcw = REG_0X0400_TSGFCW_DIV8;
    b97c:	80846917 	ldw	r2,4516(r16)
    LMS7002M_regs_spi_write(self, 0x0400);
    b980:	880b883a 	mov	r5,r17
    b984:	8009883a 	mov	r4,r16
    //muxes
    self->regs->reg_0x0400_tsgmode = REG_0X0400_TSGMODE_NCO;
    self->regs->reg_0x0400_insel = REG_0X0400_INSEL_TEST;
    LMS7002M_regs_spi_write(self, 0x0400);

    self->regs->reg_0x0400_tsgfcw = REG_0X0400_TSGFCW_DIV8;
    b988:	1481f415 	stw	r18,2000(r2)
    LMS7002M_regs_spi_write(self, 0x0400);
}
    b98c:	dfc00317 	ldw	ra,12(sp)
    b990:	dc800217 	ldw	r18,8(sp)
    b994:	dc400117 	ldw	r17,4(sp)
    b998:	dc000017 	ldw	r16,0(sp)
    b99c:	dec00404 	addi	sp,sp,16
    self->regs->reg_0x0400_tsgmode = REG_0X0400_TSGMODE_NCO;
    self->regs->reg_0x0400_insel = REG_0X0400_INSEL_TEST;
    LMS7002M_regs_spi_write(self, 0x0400);

    self->regs->reg_0x0400_tsgfcw = REG_0X0400_TSGFCW_DIV8;
    LMS7002M_regs_spi_write(self, 0x0400);
    b9a0:	00063001 	jmpi	6300 <LMS7002M_regs_spi_write>

0000b9a4 <LMS7002M_rxtsp_read_rssi>:
}

uint16_t LMS7002M_rxtsp_read_rssi(LMS7002M_t *self, const LMS7002M_chan_t channel)
{
    b9a4:	defffd04 	addi	sp,sp,-12
    b9a8:	dc000015 	stw	r16,0(sp)
    b9ac:	dfc00215 	stw	ra,8(sp)
    b9b0:	2021883a 	mov	r16,r4
    b9b4:	dc400115 	stw	r17,4(sp)
    LMS7002M_set_mac_ch(self, channel);
    b9b8:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    if (self->regs->reg_0x040c_agc_byp != 0)
    b9bc:	80846917 	ldw	r2,4516(r16)
    b9c0:	10c21017 	ldw	r3,2112(r2)
    b9c4:	18000426 	beq	r3,zero,b9d8 <LMS7002M_rxtsp_read_rssi+0x34>
    {
        self->regs->reg_0x040c_agc_byp = 0;
    b9c8:	10021015 	stw	zero,2112(r2)
        LMS7002M_regs_spi_write(self, 0x040c);
    b9cc:	01410304 	movi	r5,1036
    b9d0:	8009883a 	mov	r4,r16
    b9d4:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    }

    if (self->regs->reg_0x040a_agc_mode != REG_0X040A_AGC_MODE_RSSI)
    b9d8:	80846917 	ldw	r2,4516(r16)
    b9dc:	00c00044 	movi	r3,1
    b9e0:	11020a17 	ldw	r4,2088(r2)
    b9e4:	20c00426 	beq	r4,r3,b9f8 <LMS7002M_rxtsp_read_rssi+0x54>
    {
        self->regs->reg_0x040a_agc_mode = REG_0X040A_AGC_MODE_RSSI;
    b9e8:	10c20a15 	stw	r3,2088(r2)
        LMS7002M_regs_spi_write(self, 0x040a);
    b9ec:	01410284 	movi	r5,1034
    b9f0:	8009883a 	mov	r4,r16
    b9f4:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    }

    self->regs->reg_0x0400_capsel = REG_0X0400_CAPSEL_RSSI;
    b9f8:	80846917 	ldw	r2,4516(r16)
    self->regs->reg_0x0400_capture = 0;
    LMS7002M_regs_spi_write(self, 0x0400);
    b9fc:	8009883a 	mov	r4,r16
    ba00:	01410004 	movi	r5,1024
    {
        self->regs->reg_0x040a_agc_mode = REG_0X040A_AGC_MODE_RSSI;
        LMS7002M_regs_spi_write(self, 0x040a);
    }

    self->regs->reg_0x0400_capsel = REG_0X0400_CAPSEL_RSSI;
    ba04:	1001f215 	stw	zero,1992(r2)
    self->regs->reg_0x0400_capture = 0;
    ba08:	1001f115 	stw	zero,1988(r2)
    LMS7002M_regs_spi_write(self, 0x0400);
    ba0c:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    //trigger capture to capd readback regs
    self->regs->reg_0x0400_capture = 1;
    ba10:	80846917 	ldw	r2,4516(r16)
    ba14:	00c00044 	movi	r3,1
    LMS7002M_regs_spi_write(self, 0x0400);
    ba18:	8009883a 	mov	r4,r16
    self->regs->reg_0x0400_capsel = REG_0X0400_CAPSEL_RSSI;
    self->regs->reg_0x0400_capture = 0;
    LMS7002M_regs_spi_write(self, 0x0400);

    //trigger capture to capd readback regs
    self->regs->reg_0x0400_capture = 1;
    ba1c:	10c1f115 	stw	r3,1988(r2)
    LMS7002M_regs_spi_write(self, 0x0400);
    ba20:	01410004 	movi	r5,1024
    ba24:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    const int rssi_lo = LMS7002M_spi_read(self, 0x040E);
    ba28:	8009883a 	mov	r4,r16
    ba2c:	01410384 	movi	r5,1038
    ba30:	00062d40 	call	62d4 <LMS7002M_spi_read>
    const int rssi_hi = LMS7002M_spi_read(self, 0x040F);
    ba34:	014103c4 	movi	r5,1039
    ba38:	8009883a 	mov	r4,r16

    //trigger capture to capd readback regs
    self->regs->reg_0x0400_capture = 1;
    LMS7002M_regs_spi_write(self, 0x0400);

    const int rssi_lo = LMS7002M_spi_read(self, 0x040E);
    ba3c:	1023883a 	mov	r17,r2
    const int rssi_hi = LMS7002M_spi_read(self, 0x040F);
    ba40:	00062d40 	call	62d4 <LMS7002M_spi_read>
    const int rssi_int = (rssi_hi << 2) | rssi_lo;

    return (uint16_t)rssi_int;
    ba44:	1085883a 	add	r2,r2,r2
    ba48:	1085883a 	add	r2,r2,r2
}
    ba4c:	1444b03a 	or	r2,r2,r17
    ba50:	dfc00217 	ldw	ra,8(sp)
    ba54:	dc400117 	ldw	r17,4(sp)
    ba58:	dc000017 	ldw	r16,0(sp)
    ba5c:	dec00304 	addi	sp,sp,12
    ba60:	f800283a 	ret

0000ba64 <LMS7002M_rxtsp_set_dc_correction>:
void LMS7002M_rxtsp_set_dc_correction(
    LMS7002M_t *self,
    const LMS7002M_chan_t channel,
    const bool enabled,
    const int window)
{
    ba64:	defffc04 	addi	sp,sp,-16
    ba68:	dfc00315 	stw	ra,12(sp)
    ba6c:	dc800215 	stw	r18,8(sp)
    ba70:	dc400115 	stw	r17,4(sp)
    ba74:	3825883a 	mov	r18,r7
    ba78:	2023883a 	mov	r17,r4
    ba7c:	dc000015 	stw	r16,0(sp)
    ba80:	3021883a 	mov	r16,r6
    LMS7002M_set_mac_ch(self, channel);
    ba84:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    self->regs->reg_0x040c_dc_byp = (enabled)?0:1;
    ba88:	88846917 	ldw	r2,4516(r17)
    ba8c:	8400005c 	xori	r16,r16,1
    ba90:	84003fcc 	andi	r16,r16,255
    ba94:	14021415 	stw	r16,2128(r2)
    LMS7002M_regs_spi_write(self, 0x040c);
    ba98:	8809883a 	mov	r4,r17
    ba9c:	01410304 	movi	r5,1036
    baa0:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    self->regs->reg_0x0404_dccorr_avg = window;
    baa4:	88846917 	ldw	r2,4516(r17)
    LMS7002M_regs_spi_write(self, 0x0404);
    baa8:	01410104 	movi	r5,1028
    baac:	8809883a 	mov	r4,r17
    LMS7002M_set_mac_ch(self, channel);

    self->regs->reg_0x040c_dc_byp = (enabled)?0:1;
    LMS7002M_regs_spi_write(self, 0x040c);

    self->regs->reg_0x0404_dccorr_avg = window;
    bab0:	14820015 	stw	r18,2048(r2)
    LMS7002M_regs_spi_write(self, 0x0404);
}
    bab4:	dfc00317 	ldw	ra,12(sp)
    bab8:	dc800217 	ldw	r18,8(sp)
    babc:	dc400117 	ldw	r17,4(sp)
    bac0:	dc000017 	ldw	r16,0(sp)
    bac4:	dec00404 	addi	sp,sp,16

    self->regs->reg_0x040c_dc_byp = (enabled)?0:1;
    LMS7002M_regs_spi_write(self, 0x040c);

    self->regs->reg_0x0404_dccorr_avg = window;
    LMS7002M_regs_spi_write(self, 0x0404);
    bac8:	00063001 	jmpi	6300 <LMS7002M_regs_spi_write>

0000bacc <LMS7002M_rxtsp_set_iq_correction>:
void LMS7002M_rxtsp_set_iq_correction(
    LMS7002M_t *self,
    const LMS7002M_chan_t channel,
    const double phase,
    const double gain)
{
    bacc:	defff804 	addi	sp,sp,-32
    bad0:	dd800615 	stw	r22,24(sp)
    bad4:	dd400515 	stw	r21,20(sp)
    bad8:	dc800215 	stw	r18,8(sp)
    badc:	dc400115 	stw	r17,4(sp)
    bae0:	dc000015 	stw	r16,0(sp)
    bae4:	302d883a 	mov	r22,r6
    bae8:	382b883a 	mov	r21,r7
    baec:	dfc00715 	stw	ra,28(sp)
    baf0:	dd000415 	stw	r20,16(sp)
    baf4:	dcc00315 	stw	r19,12(sp)
    baf8:	2021883a 	mov	r16,r4
    bafc:	dc800817 	ldw	r18,32(sp)
    bb00:	dc400917 	ldw	r17,36(sp)
    LMS7002M_set_mac_ch(self, channel);
    bb04:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    const bool bypassPhase = (phase == 0.0);
    bb08:	000d883a 	mov	r6,zero
    bb0c:	000f883a 	mov	r7,zero
    bb10:	b009883a 	mov	r4,r22
    bb14:	a80b883a 	mov	r5,r21
    bb18:	0026d1c0 	call	26d1c <__eqdf2>
    bb1c:	10000226 	beq	r2,zero,bb28 <LMS7002M_rxtsp_set_iq_correction+0x5c>
    bb20:	0029883a 	mov	r20,zero
    bb24:	00000106 	br	bb2c <LMS7002M_rxtsp_set_iq_correction+0x60>
    bb28:	05000044 	movi	r20,1
    const bool bypassGain = (gain == 1.0) || (gain == 0.0);
    bb2c:	000d883a 	mov	r6,zero
    bb30:	01cffc34 	movhi	r7,16368
    bb34:	9009883a 	mov	r4,r18
    bb38:	880b883a 	mov	r5,r17
    bb3c:	0026d1c0 	call	26d1c <__eqdf2>
    bb40:	04c00044 	movi	r19,1
    bb44:	10000726 	beq	r2,zero,bb64 <LMS7002M_rxtsp_set_iq_correction+0x98>
    bb48:	000d883a 	mov	r6,zero
    bb4c:	000f883a 	mov	r7,zero
    bb50:	9009883a 	mov	r4,r18
    bb54:	880b883a 	mov	r5,r17
    bb58:	0026d1c0 	call	26d1c <__eqdf2>
    bb5c:	10000126 	beq	r2,zero,bb64 <LMS7002M_rxtsp_set_iq_correction+0x98>
    bb60:	0027883a 	mov	r19,zero
    self->regs->reg_0x040c_ph_byp = bypassPhase?1:0;
    bb64:	80846917 	ldw	r2,4516(r16)
    bb68:	a5003fcc 	andi	r20,r20,255
    self->regs->reg_0x040c_gc_byp = bypassGain?1:0;
    LMS7002M_regs_spi_write(self, 0x040c);
    bb6c:	01410304 	movi	r5,1036
{
    LMS7002M_set_mac_ch(self, channel);

    const bool bypassPhase = (phase == 0.0);
    const bool bypassGain = (gain == 1.0) || (gain == 0.0);
    self->regs->reg_0x040c_ph_byp = bypassPhase?1:0;
    bb70:	15021615 	stw	r20,2136(r2)
    self->regs->reg_0x040c_gc_byp = bypassGain?1:0;
    bb74:	14c21515 	stw	r19,2132(r2)
    LMS7002M_regs_spi_write(self, 0x040c);
    bb78:	8009883a 	mov	r4,r16
    bb7c:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    self->regs->reg_0x0403_iqcorr = (int)(2047*(phase/(M_PI/2)));
    bb80:	01951134 	movhi	r6,21572
    bb84:	01cffe74 	movhi	r7,16377
    bb88:	318b4604 	addi	r6,r6,11544
    bb8c:	39c87ec4 	addi	r7,r7,8699
    bb90:	b009883a 	mov	r4,r22
    bb94:	a80b883a 	mov	r5,r21
    bb98:	002634c0 	call	2634c <__divdf3>
    bb9c:	01d02834 	movhi	r7,16544
    bba0:	000d883a 	mov	r6,zero
    bba4:	39ff0004 	addi	r7,r7,-1024
    bba8:	1009883a 	mov	r4,r2
    bbac:	180b883a 	mov	r5,r3
    bbb0:	0026f740 	call	26f74 <__muldf3>
    bbb4:	84c46917 	ldw	r19,4516(r16)
    bbb8:	1009883a 	mov	r4,r2
    bbbc:	180b883a 	mov	r5,r3
    bbc0:	00280dc0 	call	280dc <__fixdfsi>
    self->regs->reg_0x0402_gcorri = 2047;
    bbc4:	0501ffc4 	movi	r20,2047
    const bool bypassGain = (gain == 1.0) || (gain == 0.0);
    self->regs->reg_0x040c_ph_byp = bypassPhase?1:0;
    self->regs->reg_0x040c_gc_byp = bypassGain?1:0;
    LMS7002M_regs_spi_write(self, 0x040c);

    self->regs->reg_0x0403_iqcorr = (int)(2047*(phase/(M_PI/2)));
    bbc8:	9881ff15 	stw	r2,2044(r19)
    self->regs->reg_0x0402_gcorri = 2047;
    bbcc:	9d01fd15 	stw	r20,2036(r19)
    self->regs->reg_0x0401_gcorrq = 2047;
    if (gain > 1.0) self->regs->reg_0x0401_gcorrq = (int)((1.0/gain)*2047);
    bbd0:	000d883a 	mov	r6,zero
    bbd4:	01cffc34 	movhi	r7,16368
    bbd8:	9009883a 	mov	r4,r18
    bbdc:	880b883a 	mov	r5,r17
    bbe0:	0026da40 	call	26da4 <__gedf2>
    bbe4:	00800216 	blt	zero,r2,bbf0 <LMS7002M_rxtsp_set_iq_correction+0x124>
    self->regs->reg_0x040c_gc_byp = bypassGain?1:0;
    LMS7002M_regs_spi_write(self, 0x040c);

    self->regs->reg_0x0403_iqcorr = (int)(2047*(phase/(M_PI/2)));
    self->regs->reg_0x0402_gcorri = 2047;
    self->regs->reg_0x0401_gcorrq = 2047;
    bbe8:	9d01fc15 	stw	r20,2032(r19)
    bbec:	00000f06 	br	bc2c <LMS7002M_rxtsp_set_iq_correction+0x160>
    if (gain > 1.0) self->regs->reg_0x0401_gcorrq = (int)((1.0/gain)*2047);
    bbf0:	900d883a 	mov	r6,r18
    bbf4:	880f883a 	mov	r7,r17
    bbf8:	0009883a 	mov	r4,zero
    bbfc:	014ffc34 	movhi	r5,16368
    bc00:	002634c0 	call	2634c <__divdf3>
    bc04:	01d02834 	movhi	r7,16544
    bc08:	000d883a 	mov	r6,zero
    bc0c:	39ff0004 	addi	r7,r7,-1024
    bc10:	1009883a 	mov	r4,r2
    bc14:	180b883a 	mov	r5,r3
    bc18:	0026f740 	call	26f74 <__muldf3>
    bc1c:	1009883a 	mov	r4,r2
    bc20:	180b883a 	mov	r5,r3
    bc24:	00280dc0 	call	280dc <__fixdfsi>
    bc28:	9881fc15 	stw	r2,2032(r19)
    if (gain < 1.0) self->regs->reg_0x0402_gcorri = (int)((gain/1.0)*2047);
    bc2c:	000d883a 	mov	r6,zero
    bc30:	01cffc34 	movhi	r7,16368
    bc34:	9009883a 	mov	r4,r18
    bc38:	880b883a 	mov	r5,r17
    bc3c:	0026e800 	call	26e80 <__ledf2>
    bc40:	10000a0e 	bge	r2,zero,bc6c <LMS7002M_rxtsp_set_iq_correction+0x1a0>
    bc44:	01d02834 	movhi	r7,16544
    bc48:	000d883a 	mov	r6,zero
    bc4c:	39ff0004 	addi	r7,r7,-1024
    bc50:	9009883a 	mov	r4,r18
    bc54:	880b883a 	mov	r5,r17
    bc58:	0026f740 	call	26f74 <__muldf3>
    bc5c:	1009883a 	mov	r4,r2
    bc60:	180b883a 	mov	r5,r3
    bc64:	00280dc0 	call	280dc <__fixdfsi>
    bc68:	9881fd15 	stw	r2,2036(r19)

    LMS7002M_regs_spi_write(self, 0x0403);
    bc6c:	8009883a 	mov	r4,r16
    bc70:	014100c4 	movi	r5,1027
    bc74:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x0402);
    bc78:	8009883a 	mov	r4,r16
    bc7c:	01410084 	movi	r5,1026
    bc80:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x0401);
    bc84:	01410044 	movi	r5,1025
    bc88:	8009883a 	mov	r4,r16
}
    bc8c:	dfc00717 	ldw	ra,28(sp)
    bc90:	dd800617 	ldw	r22,24(sp)
    bc94:	dd400517 	ldw	r21,20(sp)
    bc98:	dd000417 	ldw	r20,16(sp)
    bc9c:	dcc00317 	ldw	r19,12(sp)
    bca0:	dc800217 	ldw	r18,8(sp)
    bca4:	dc400117 	ldw	r17,4(sp)
    bca8:	dc000017 	ldw	r16,0(sp)
    bcac:	dec00804 	addi	sp,sp,32
    if (gain > 1.0) self->regs->reg_0x0401_gcorrq = (int)((1.0/gain)*2047);
    if (gain < 1.0) self->regs->reg_0x0402_gcorri = (int)((gain/1.0)*2047);

    LMS7002M_regs_spi_write(self, 0x0403);
    LMS7002M_regs_spi_write(self, 0x0402);
    LMS7002M_regs_spi_write(self, 0x0401);
    bcb0:	00063001 	jmpi	6300 <LMS7002M_regs_spi_write>

0000bcb4 <LMS7002M_sxx_enable>:
#include "LMS7002M_impl.h"
#include "LMS7002M_vco.h"
#include <LMS7002M/LMS7002M_logger.h>

void LMS7002M_sxx_enable(LMS7002M_t *self, const LMS7002M_dir_t direction, const bool enable)
{
    bcb4:	defffd04 	addi	sp,sp,-12
    bcb8:	dfc00215 	stw	ra,8(sp)
    bcbc:	dc400115 	stw	r17,4(sp)
    bcc0:	dc000015 	stw	r16,0(sp)
    bcc4:	3023883a 	mov	r17,r6
    bcc8:	2021883a 	mov	r16,r4
    LMS7002M_set_mac_dir(self, direction);
    bccc:	000963c0 	call	963c <LMS7002M_set_mac_dir>
    self->regs->reg_0x0124_en_dir_sxx = 1;
    bcd0:	80846917 	ldw	r2,4516(r16)
    bcd4:	00c00044 	movi	r3,1
    LMS7002M_regs_spi_write(self, 0x0124);
    bcd8:	8009883a 	mov	r4,r16
#include <LMS7002M/LMS7002M_logger.h>

void LMS7002M_sxx_enable(LMS7002M_t *self, const LMS7002M_dir_t direction, const bool enable)
{
    LMS7002M_set_mac_dir(self, direction);
    self->regs->reg_0x0124_en_dir_sxx = 1;
    bcdc:	10c1c215 	stw	r3,1800(r2)
    LMS7002M_regs_spi_write(self, 0x0124);
    bce0:	01404904 	movi	r5,292
    bce4:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    self->regs->reg_0x011c_en_g = enable?1:0;
    bce8:	80846917 	ldw	r2,4516(r16)
    bcec:	8c403fcc 	andi	r17,r17,255
    LMS7002M_regs_spi_write(self, 0x011c);
    bcf0:	01404704 	movi	r5,284
    bcf4:	8009883a 	mov	r4,r16
{
    LMS7002M_set_mac_dir(self, direction);
    self->regs->reg_0x0124_en_dir_sxx = 1;
    LMS7002M_regs_spi_write(self, 0x0124);

    self->regs->reg_0x011c_en_g = enable?1:0;
    bcf8:	1441a715 	stw	r17,1692(r2)
    LMS7002M_regs_spi_write(self, 0x011c);
}
    bcfc:	dfc00217 	ldw	ra,8(sp)
    bd00:	dc400117 	ldw	r17,4(sp)
    bd04:	dc000017 	ldw	r16,0(sp)
    bd08:	dec00304 	addi	sp,sp,12
    LMS7002M_set_mac_dir(self, direction);
    self->regs->reg_0x0124_en_dir_sxx = 1;
    LMS7002M_regs_spi_write(self, 0x0124);

    self->regs->reg_0x011c_en_g = enable?1:0;
    LMS7002M_regs_spi_write(self, 0x011c);
    bd0c:	00063001 	jmpi	6300 <LMS7002M_regs_spi_write>

0000bd10 <LMS7002M_sxx_calc_tune_state>:

int LMS7002M_sxx_calc_tune_state(
    const double fref, const double fout,
    const double VCO_LO, const double VCO_HI,
    LMS7002M_sxx_tune_state *s)
{
    bd10:	deffef04 	addi	sp,sp,-68
    bd14:	d8801117 	ldw	r2,68(sp)
    bd18:	dcc00a15 	stw	r19,40(sp)
    bd1c:	dcc01517 	ldw	r19,84(sp)
    bd20:	d8800115 	stw	r2,4(sp)
    bd24:	d8801217 	ldw	r2,72(sp)
    bd28:	df000f15 	stw	fp,60(sp)
    bd2c:	ddc00e15 	stw	r23,56(sp)
    bd30:	d8800215 	stw	r2,8(sp)
    bd34:	d8801317 	ldw	r2,76(sp)
    bd38:	dd800d15 	stw	r22,52(sp)
    bd3c:	dd400c15 	stw	r21,48(sp)
    bd40:	d8800315 	stw	r2,12(sp)
    bd44:	d8801417 	ldw	r2,80(sp)
    bd48:	dd000b15 	stw	r20,44(sp)
    bd4c:	dfc01015 	stw	ra,64(sp)
    bd50:	dc800915 	stw	r18,36(sp)
    bd54:	dc400815 	stw	r17,32(sp)
    bd58:	dc000715 	stw	r16,28(sp)
    bd5c:	d8800415 	stw	r2,16(sp)
    s->fvco = 0;
    s->fdiv = 0;
    s->good = false;

    //calculation loop to find dividers that are possible
    for (s->DIV_LOCH_SX = 6; s->DIV_LOCH_SX >= 0; --(s->DIV_LOCH_SX))
    bd60:	00800184 	movi	r2,6

int LMS7002M_sxx_calc_tune_state(
    const double fref, const double fout,
    const double VCO_LO, const double VCO_HI,
    LMS7002M_sxx_tune_state *s)
{
    bd64:	d9000015 	stw	r4,0(sp)
    bd68:	2829883a 	mov	r20,r5
    bd6c:	302b883a 	mov	r21,r6
    bd70:	382d883a 	mov	r22,r7
    //The equations:
    // fref * N = fvco
    // fout = Fvco / divRatio_LOCH / 2
    s->DIV_LOCH_SX = -1;
    int divRatio_LOCH = 0;
    s->Ndiv = 0;
    bd74:	98000115 	stw	zero,4(r19)
    bd78:	98000215 	stw	zero,8(r19)
    s->fvco = 0;
    bd7c:	98000515 	stw	zero,20(r19)
    bd80:	98000615 	stw	zero,24(r19)
    s->fdiv = 0;
    bd84:	98000715 	stw	zero,28(r19)
    s->good = false;
    bd88:	98000905 	stb	zero,36(r19)

    //calculation loop to find dividers that are possible
    for (s->DIV_LOCH_SX = 6; s->DIV_LOCH_SX >= 0; --(s->DIV_LOCH_SX))
    bd8c:	98800015 	stw	r2,0(r19)
    {
        //try the next divider power
        divRatio_LOCH = 1 << s->DIV_LOCH_SX;
        s->fdiv = divRatio_LOCH*2;
    bd90:	05c00044 	movi	r23,1
        s->Ndiv = fout*s->fdiv/fref;
        s->fvco = fout*s->fdiv;
        //LMS7_logf(LMS7_DEBUG, "fdiv = %d, Ndiv = %f, fvco = %f MHz", s->fdiv, s->Ndiv, s->fvco/1e6);

        //check dividers and vco in range...
        if (s->fdiv > 128) return -1;
    bd94:	07002004 	movi	fp,128
    s->fvco = 0;
    s->fdiv = 0;
    s->good = false;

    //calculation loop to find dividers that are possible
    for (s->DIV_LOCH_SX = 6; s->DIV_LOCH_SX >= 0; --(s->DIV_LOCH_SX))
    bd98:	9c000017 	ldw	r16,0(r19)
    bd9c:	80003416 	blt	r16,zero,be70 <LMS7002M_sxx_calc_tune_state+0x160>
    {
        //try the next divider power
        divRatio_LOCH = 1 << s->DIV_LOCH_SX;
        s->fdiv = divRatio_LOCH*2;
    bda0:	bc12983a 	sll	r9,r23,r16
    bda4:	4a53883a 	add	r9,r9,r9
    bda8:	9a400715 	stw	r9,28(r19)

        s->Ndiv = fout*s->fdiv/fref;
    bdac:	4809883a 	mov	r4,r9
    bdb0:	da400515 	stw	r9,20(sp)
    bdb4:	002815c0 	call	2815c <__floatsidf>
    bdb8:	a80d883a 	mov	r6,r21
    bdbc:	b00f883a 	mov	r7,r22
    bdc0:	1009883a 	mov	r4,r2
    bdc4:	180b883a 	mov	r5,r3
    bdc8:	0026f740 	call	26f74 <__muldf3>
    bdcc:	d9800017 	ldw	r6,0(sp)
    bdd0:	a00f883a 	mov	r7,r20
    bdd4:	1009883a 	mov	r4,r2
    bdd8:	180b883a 	mov	r5,r3
    bddc:	1025883a 	mov	r18,r2
    bde0:	1823883a 	mov	r17,r3
    bde4:	002634c0 	call	2634c <__divdf3>
        s->fvco = fout*s->fdiv;
        //LMS7_logf(LMS7_DEBUG, "fdiv = %d, Ndiv = %f, fvco = %f MHz", s->fdiv, s->Ndiv, s->fvco/1e6);

        //check dividers and vco in range...
        if (s->fdiv > 128) return -1;
    bde8:	da400517 	ldw	r9,20(sp)
    {
        //try the next divider power
        divRatio_LOCH = 1 << s->DIV_LOCH_SX;
        s->fdiv = divRatio_LOCH*2;

        s->Ndiv = fout*s->fdiv/fref;
    bdec:	98800115 	stw	r2,4(r19)
    bdf0:	98c00215 	stw	r3,8(r19)
        s->fvco = fout*s->fdiv;
    bdf4:	9c800515 	stw	r18,20(r19)
    bdf8:	9c400615 	stw	r17,24(r19)
        //LMS7_logf(LMS7_DEBUG, "fdiv = %d, Ndiv = %f, fvco = %f MHz", s->fdiv, s->Ndiv, s->fvco/1e6);

        //check dividers and vco in range...
        if (s->fdiv > 128) return -1;
    bdfc:	e2405516 	blt	fp,r9,bf54 <LMS7002M_sxx_calc_tune_state+0x244>
        if (s->Ndiv < 4) return -1;
    be00:	180b883a 	mov	r5,r3
    be04:	000d883a 	mov	r6,zero
    be08:	01d00434 	movhi	r7,16400
    be0c:	1009883a 	mov	r4,r2
    be10:	d8c00615 	stw	r3,24(sp)
    be14:	d8800515 	stw	r2,20(sp)
    be18:	0026e800 	call	26e80 <__ledf2>
    be1c:	d8c00617 	ldw	r3,24(sp)
    be20:	da800517 	ldw	r10,20(sp)
    be24:	10004b16 	blt	r2,zero,bf54 <LMS7002M_sxx_calc_tune_state+0x244>
        if (s->Ndiv > 512) continue;
    be28:	000d883a 	mov	r6,zero
    be2c:	01d02034 	movhi	r7,16512
    be30:	5009883a 	mov	r4,r10
    be34:	180b883a 	mov	r5,r3
    be38:	0026da40 	call	26da4 <__gedf2>
    be3c:	00802716 	blt	zero,r2,bedc <LMS7002M_sxx_calc_tune_state+0x1cc>

        //check vco boundaries
        if (s->fvco < VCO_LO) continue;
    be40:	d9800117 	ldw	r6,4(sp)
    be44:	d9c00217 	ldw	r7,8(sp)
    be48:	9009883a 	mov	r4,r18
    be4c:	880b883a 	mov	r5,r17
    be50:	0026e800 	call	26e80 <__ledf2>
    be54:	10002116 	blt	r2,zero,bedc <LMS7002M_sxx_calc_tune_state+0x1cc>
        if (s->fvco > VCO_HI) continue;
    be58:	d9800317 	ldw	r6,12(sp)
    be5c:	d9c00417 	ldw	r7,16(sp)
    be60:	9009883a 	mov	r4,r18
    be64:	880b883a 	mov	r5,r17
    be68:	0026da40 	call	26da4 <__gedf2>
    be6c:	00801b16 	blt	zero,r2,bedc <LMS7002M_sxx_calc_tune_state+0x1cc>
        break; //its good
    }
    //LMS7_logf(LMS7_DEBUG, "fdiv = %d, Ndiv = %f, fvco = %f MHz", s->fdiv, s->Ndiv, s->fvco/1e6);

    //deal with VCO divider
    s->EN_DIV2 = (s->fvco > 5.5e9)?1:0;
    be70:	9c400517 	ldw	r17,20(r19)
    be74:	9c000617 	ldw	r16,24(r19)
    be78:	01d07d34 	movhi	r7,16884
    be7c:	019c0034 	movhi	r6,28672
    be80:	39df4d44 	addi	r7,r7,32053
    be84:	8809883a 	mov	r4,r17
    be88:	800b883a 	mov	r5,r16
    be8c:	04800044 	movi	r18,1
    be90:	0026da40 	call	26da4 <__gedf2>
    be94:	00800116 	blt	zero,r2,be9c <LMS7002M_sxx_calc_tune_state+0x18c>
    be98:	0025883a 	mov	r18,zero

    //compensate for the lack of doubling when disabled
    if (s->EN_DIV2 != 0) s->Ndiv /= 2;
    be9c:	01d07d34 	movhi	r7,16884
        break; //its good
    }
    //LMS7_logf(LMS7_DEBUG, "fdiv = %d, Ndiv = %f, fvco = %f MHz", s->fdiv, s->Ndiv, s->fvco/1e6);

    //deal with VCO divider
    s->EN_DIV2 = (s->fvco > 5.5e9)?1:0;
    bea0:	9c800815 	stw	r18,32(r19)

    //compensate for the lack of doubling when disabled
    if (s->EN_DIV2 != 0) s->Ndiv /= 2;
    bea4:	019c0034 	movhi	r6,28672
    bea8:	39df4d44 	addi	r7,r7,32053
    beac:	8809883a 	mov	r4,r17
    beb0:	800b883a 	mov	r5,r16
    beb4:	0026da40 	call	26da4 <__gedf2>
    beb8:	00800b0e 	bge	zero,r2,bee8 <LMS7002M_sxx_calc_tune_state+0x1d8>
    bebc:	99000117 	ldw	r4,4(r19)
    bec0:	99400217 	ldw	r5,8(r19)
    bec4:	000d883a 	mov	r6,zero
    bec8:	01cff834 	movhi	r7,16352
    becc:	0026f740 	call	26f74 <__muldf3>
    bed0:	98800115 	stw	r2,4(r19)
    bed4:	98c00215 	stw	r3,8(r19)
    bed8:	00000306 	br	bee8 <LMS7002M_sxx_calc_tune_state+0x1d8>
    s->fvco = 0;
    s->fdiv = 0;
    s->good = false;

    //calculation loop to find dividers that are possible
    for (s->DIV_LOCH_SX = 6; s->DIV_LOCH_SX >= 0; --(s->DIV_LOCH_SX))
    bedc:	843fffc4 	addi	r16,r16,-1
    bee0:	9c000015 	stw	r16,0(r19)
    bee4:	003fac06 	br	bd98 <__alt_data_end+0xfffcd598>

    //compensate for the lack of doubling when disabled
    if (s->EN_DIV2 != 0) s->Ndiv /= 2;

    //split N into fractional and integer parts
    s->Nint = (int)s->Ndiv - 4;
    bee8:	9c400117 	ldw	r17,4(r19)
    beec:	9c000217 	ldw	r16,8(r19)
    bef0:	8809883a 	mov	r4,r17
    bef4:	800b883a 	mov	r5,r16
    bef8:	00280dc0 	call	280dc <__fixdfsi>
    befc:	10ffff04 	addi	r3,r2,-4
    s->Nfrac = (int)((s->Ndiv-((int)(s->Ndiv)))*(1 << 20));
    bf00:	1009883a 	mov	r4,r2

    //compensate for the lack of doubling when disabled
    if (s->EN_DIV2 != 0) s->Ndiv /= 2;

    //split N into fractional and integer parts
    s->Nint = (int)s->Ndiv - 4;
    bf04:	98c00315 	stw	r3,12(r19)
    s->Nfrac = (int)((s->Ndiv-((int)(s->Ndiv)))*(1 << 20));
    bf08:	002815c0 	call	2815c <__floatsidf>
    bf0c:	100d883a 	mov	r6,r2
    bf10:	180f883a 	mov	r7,r3
    bf14:	8809883a 	mov	r4,r17
    bf18:	800b883a 	mov	r5,r16
    bf1c:	00277e00 	call	277e0 <__subdf3>
    bf20:	000d883a 	mov	r6,zero
    bf24:	01d04c34 	movhi	r7,16688
    bf28:	1009883a 	mov	r4,r2
    bf2c:	180b883a 	mov	r5,r3
    bf30:	0026f740 	call	26f74 <__muldf3>
    bf34:	1009883a 	mov	r4,r2
    bf38:	180b883a 	mov	r5,r3
    bf3c:	00280dc0 	call	280dc <__fixdfsi>
    bf40:	98800415 	stw	r2,16(r19)

    s->good = true;
    bf44:	00800044 	movi	r2,1
    bf48:	98800905 	stb	r2,36(r19)
    return 0;
    bf4c:	0005883a 	mov	r2,zero
    bf50:	00000106 	br	bf58 <LMS7002M_sxx_calc_tune_state+0x248>
        s->Ndiv = fout*s->fdiv/fref;
        s->fvco = fout*s->fdiv;
        //LMS7_logf(LMS7_DEBUG, "fdiv = %d, Ndiv = %f, fvco = %f MHz", s->fdiv, s->Ndiv, s->fvco/1e6);

        //check dividers and vco in range...
        if (s->fdiv > 128) return -1;
    bf54:	00bfffc4 	movi	r2,-1
    s->Nint = (int)s->Ndiv - 4;
    s->Nfrac = (int)((s->Ndiv-((int)(s->Ndiv)))*(1 << 20));

    s->good = true;
    return 0;
}
    bf58:	dfc01017 	ldw	ra,64(sp)
    bf5c:	df000f17 	ldw	fp,60(sp)
    bf60:	ddc00e17 	ldw	r23,56(sp)
    bf64:	dd800d17 	ldw	r22,52(sp)
    bf68:	dd400c17 	ldw	r21,48(sp)
    bf6c:	dd000b17 	ldw	r20,44(sp)
    bf70:	dcc00a17 	ldw	r19,40(sp)
    bf74:	dc800917 	ldw	r18,36(sp)
    bf78:	dc400817 	ldw	r17,32(sp)
    bf7c:	dc000717 	ldw	r16,28(sp)
    bf80:	dec01104 	addi	sp,sp,68
    bf84:	f800283a 	ret

0000bf88 <LMS7002M_sxx_apply_tune_state>:

void LMS7002M_sxx_apply_tune_state(LMS7002M_t *self, const LMS7002M_sxx_tune_state *s)
{
    bf88:	defffd04 	addi	sp,sp,-12
    bf8c:	dc400115 	stw	r17,4(sp)
    //configure and enable synthesizer
    self->regs->reg_0x011c_en_intonly_sdm = 0; //support frac-N
    bf90:	20846917 	ldw	r2,4516(r4)
    s->good = true;
    return 0;
}

void LMS7002M_sxx_apply_tune_state(LMS7002M_t *self, const LMS7002M_sxx_tune_state *s)
{
    bf94:	2823883a 	mov	r17,r5
    self->regs->reg_0x011c_pd_vco = 0; //enable
    self->regs->reg_0x011c_pd_vco_comp = 0; //enable
    self->regs->reg_0x011c_en_g = 1;
    self->regs->reg_0x011c_en_coarsepll = 0;
    self->regs->reg_0x0121_coarse_start = 0;
    self->regs->reg_0x011c_en_div2_divprog = s->EN_DIV2;
    bf98:	29400817 	ldw	r5,32(r5)
    s->good = true;
    return 0;
}

void LMS7002M_sxx_apply_tune_state(LMS7002M_t *self, const LMS7002M_sxx_tune_state *s)
{
    bf9c:	dfc00215 	stw	ra,8(sp)
    bfa0:	dc000015 	stw	r16,0(sp)
    //configure and enable synthesizer
    self->regs->reg_0x011c_en_intonly_sdm = 0; //support frac-N
    self->regs->reg_0x011c_en_sdm_clk = 1; //enable
    bfa4:	00c00044 	movi	r3,1
    bfa8:	10c19f15 	stw	r3,1660(r2)
    self->regs->reg_0x011c_pd_fbdiv = 0; //enable
    self->regs->reg_0x011c_pd_fdiv = 0; //enable
    self->regs->reg_0x011c_pd_sdm = 0; //enable
    self->regs->reg_0x011c_pd_vco = 0; //enable
    self->regs->reg_0x011c_pd_vco_comp = 0; //enable
    self->regs->reg_0x011c_en_g = 1;
    bfac:	10c1a715 	stw	r3,1692(r2)
    self->regs->reg_0x011c_en_coarsepll = 0;
    self->regs->reg_0x0121_coarse_start = 0;
    self->regs->reg_0x011c_en_div2_divprog = s->EN_DIV2;
    bfb0:	11419d15 	stw	r5,1652(r2)
    self->regs->reg_0x011c_spdup_vco = 1; //fast settling
    bfb4:	10c19915 	stw	r3,1636(r2)
}

void LMS7002M_sxx_apply_tune_state(LMS7002M_t *self, const LMS7002M_sxx_tune_state *s)
{
    //configure and enable synthesizer
    self->regs->reg_0x011c_en_intonly_sdm = 0; //support frac-N
    bfb8:	10019e15 	stw	zero,1656(r2)
    self->regs->reg_0x011c_en_sdm_clk = 1; //enable
    self->regs->reg_0x011c_pd_cp = 0; //enable
    bfbc:	1001a215 	stw	zero,1672(r2)
    self->regs->reg_0x011c_pd_fbdiv = 0; //enable
    bfc0:	1001a015 	stw	zero,1664(r2)
    self->regs->reg_0x011c_pd_fdiv = 0; //enable
    bfc4:	1001a315 	stw	zero,1676(r2)
    self->regs->reg_0x011c_pd_sdm = 0; //enable
    bfc8:	1001a415 	stw	zero,1680(r2)
    self->regs->reg_0x011c_pd_vco = 0; //enable
    bfcc:	1001a615 	stw	zero,1688(r2)
    self->regs->reg_0x011c_pd_vco_comp = 0; //enable
    bfd0:	1001a515 	stw	zero,1684(r2)
    self->regs->reg_0x011c_en_g = 1;
    self->regs->reg_0x011c_en_coarsepll = 0;
    bfd4:	10019b15 	stw	zero,1644(r2)
    self->regs->reg_0x0121_coarse_start = 0;
    bfd8:	1001b715 	stw	zero,1756(r2)
    self->regs->reg_0x011c_en_div2_divprog = s->EN_DIV2;
    self->regs->reg_0x011c_spdup_vco = 1; //fast settling
    LMS7002M_regs_spi_write(self, 0x011c);
    bfdc:	01404704 	movi	r5,284
    s->good = true;
    return 0;
}

void LMS7002M_sxx_apply_tune_state(LMS7002M_t *self, const LMS7002M_sxx_tune_state *s)
{
    bfe0:	2021883a 	mov	r16,r4
    self->regs->reg_0x011c_en_g = 1;
    self->regs->reg_0x011c_en_coarsepll = 0;
    self->regs->reg_0x0121_coarse_start = 0;
    self->regs->reg_0x011c_en_div2_divprog = s->EN_DIV2;
    self->regs->reg_0x011c_spdup_vco = 1; //fast settling
    LMS7002M_regs_spi_write(self, 0x011c);
    bfe4:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    //program the N divider
    self->regs->reg_0x011d_frac_sdm = (s->Nfrac) & 0xffff; //lower 16 bits
    bfe8:	88800417 	ldw	r2,16(r17)
    bfec:	80c46917 	ldw	r3,4516(r16)
    self->regs->reg_0x011e_frac_sdm = (s->Nfrac) >> 16; //upper 4 bits
    self->regs->reg_0x011e_int_sdm = s->Nint;
    //LMS7_logf(LMS7_DEBUG, "fdiv = %d, Ndiv = %f, Nint = %d, Nfrac = %d, DIV_LOCH_SX = %d, fvco = %f MHz", s->fdiv, s->Ndiv, s->Nint, s->Nfrac, s->DIV_LOCH_SX, s->fvco/1e6);
    LMS7002M_regs_spi_write(self, 0x011d);
    bff0:	01404744 	movi	r5,285
    self->regs->reg_0x011c_en_div2_divprog = s->EN_DIV2;
    self->regs->reg_0x011c_spdup_vco = 1; //fast settling
    LMS7002M_regs_spi_write(self, 0x011c);

    //program the N divider
    self->regs->reg_0x011d_frac_sdm = (s->Nfrac) & 0xffff; //lower 16 bits
    bff4:	113fffcc 	andi	r4,r2,65535
    self->regs->reg_0x011e_frac_sdm = (s->Nfrac) >> 16; //upper 4 bits
    bff8:	1005d43a 	srai	r2,r2,16
    self->regs->reg_0x011c_en_div2_divprog = s->EN_DIV2;
    self->regs->reg_0x011c_spdup_vco = 1; //fast settling
    LMS7002M_regs_spi_write(self, 0x011c);

    //program the N divider
    self->regs->reg_0x011d_frac_sdm = (s->Nfrac) & 0xffff; //lower 16 bits
    bffc:	1901a815 	stw	r4,1696(r3)
    self->regs->reg_0x011e_frac_sdm = (s->Nfrac) >> 16; //upper 4 bits
    self->regs->reg_0x011e_int_sdm = s->Nint;
    //LMS7_logf(LMS7_DEBUG, "fdiv = %d, Ndiv = %f, Nint = %d, Nfrac = %d, DIV_LOCH_SX = %d, fvco = %f MHz", s->fdiv, s->Ndiv, s->Nint, s->Nfrac, s->DIV_LOCH_SX, s->fvco/1e6);
    LMS7002M_regs_spi_write(self, 0x011d);
    c000:	8009883a 	mov	r4,r16
    self->regs->reg_0x011c_spdup_vco = 1; //fast settling
    LMS7002M_regs_spi_write(self, 0x011c);

    //program the N divider
    self->regs->reg_0x011d_frac_sdm = (s->Nfrac) & 0xffff; //lower 16 bits
    self->regs->reg_0x011e_frac_sdm = (s->Nfrac) >> 16; //upper 4 bits
    c004:	1881aa15 	stw	r2,1704(r3)
    self->regs->reg_0x011e_int_sdm = s->Nint;
    c008:	88800317 	ldw	r2,12(r17)
    c00c:	1881a915 	stw	r2,1700(r3)
    //LMS7_logf(LMS7_DEBUG, "fdiv = %d, Ndiv = %f, Nint = %d, Nfrac = %d, DIV_LOCH_SX = %d, fvco = %f MHz", s->fdiv, s->Ndiv, s->Nint, s->Nfrac, s->DIV_LOCH_SX, s->fvco/1e6);
    LMS7002M_regs_spi_write(self, 0x011d);
    c010:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x011e);
    c014:	8009883a 	mov	r4,r16
    c018:	01404784 	movi	r5,286
    c01c:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    //program the feedback divider
    self->regs->reg_0x011f_sel_sdmclk = REG_0X011F_SEL_SDMCLK_CLK_DIV;
    c020:	80846917 	ldw	r2,4516(r16)
    self->regs->reg_0x011f_div_loch = s->DIV_LOCH_SX;
    c024:	88c00017 	ldw	r3,0(r17)
    LMS7002M_regs_spi_write(self, 0x011f);
    c028:	014047c4 	movi	r5,287
    c02c:	8009883a 	mov	r4,r16
    //LMS7_logf(LMS7_DEBUG, "fdiv = %d, Ndiv = %f, Nint = %d, Nfrac = %d, DIV_LOCH_SX = %d, fvco = %f MHz", s->fdiv, s->Ndiv, s->Nint, s->Nfrac, s->DIV_LOCH_SX, s->fvco/1e6);
    LMS7002M_regs_spi_write(self, 0x011d);
    LMS7002M_regs_spi_write(self, 0x011e);

    //program the feedback divider
    self->regs->reg_0x011f_sel_sdmclk = REG_0X011F_SEL_SDMCLK_CLK_DIV;
    c030:	1001af15 	stw	zero,1724(r2)
    self->regs->reg_0x011f_div_loch = s->DIV_LOCH_SX;
    c034:	10c1ad15 	stw	r3,1716(r2)
    LMS7002M_regs_spi_write(self, 0x011f);
}
    c038:	dfc00217 	ldw	ra,8(sp)
    c03c:	dc400117 	ldw	r17,4(sp)
    c040:	dc000017 	ldw	r16,0(sp)
    c044:	dec00304 	addi	sp,sp,12
    LMS7002M_regs_spi_write(self, 0x011e);

    //program the feedback divider
    self->regs->reg_0x011f_sel_sdmclk = REG_0X011F_SEL_SDMCLK_CLK_DIV;
    self->regs->reg_0x011f_div_loch = s->DIV_LOCH_SX;
    LMS7002M_regs_spi_write(self, 0x011f);
    c048:	00063001 	jmpi	6300 <LMS7002M_regs_spi_write>

0000c04c <LMS7002M_set_lo_freq>:
}

int LMS7002M_set_lo_freq(LMS7002M_t *self, const LMS7002M_dir_t direction, const double fref, const double fout, double *factual)
{
    c04c:	deffd004 	addi	sp,sp,-192
    c050:	dfc02f15 	stw	ra,188(sp)
    c054:	df002e15 	stw	fp,184(sp)
    c058:	ddc02d15 	stw	r23,180(sp)
    c05c:	dd802c15 	stw	r22,176(sp)
    c060:	dd402b15 	stw	r21,172(sp)
    c064:	dd002a15 	stw	r20,168(sp)
    c068:	dd403017 	ldw	r21,192(sp)
    c06c:	dd003117 	ldw	r20,196(sp)
    c070:	dcc02915 	stw	r19,164(sp)
    c074:	dc802815 	stw	r18,160(sp)
    c078:	dc402715 	stw	r17,156(sp)
    c07c:	3025883a 	mov	r18,r6
    c080:	3823883a 	mov	r17,r7
    c084:	dc002615 	stw	r16,152(sp)
    c088:	282f883a 	mov	r23,r5
    c08c:	2021883a 	mov	r16,r4
    //LMS7_logf(LMS7_INFO, "SXX tune %f MHz (fref=%f MHz) begin", fout/1e6, fref/1e6);

    LMS7002M_set_mac_dir(self, direction);
    c090:	000963c0 	call	963c <LMS7002M_set_mac_dir>

    //reset
    self->regs->reg_0x011c_reset_n = 0;
    c094:	80846917 	ldw	r2,4516(r16)
    LMS7002M_regs_spi_write(self, 0x011c);
    c098:	01404704 	movi	r5,284
    c09c:	8009883a 	mov	r4,r16
    //LMS7_logf(LMS7_INFO, "SXX tune %f MHz (fref=%f MHz) begin", fout/1e6, fref/1e6);

    LMS7002M_set_mac_dir(self, direction);

    //reset
    self->regs->reg_0x011c_reset_n = 0;
    c0a0:	10019815 	stw	zero,1632(r2)
    LMS7002M_regs_spi_write(self, 0x011c);
    c0a4:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    self->regs->reg_0x011c_reset_n = 1;
    c0a8:	80846917 	ldw	r2,4516(r16)
    c0ac:	00c00044 	movi	r3,1
    LMS7002M_regs_spi_write(self, 0x011c);
    c0b0:	01404704 	movi	r5,284
    LMS7002M_set_mac_dir(self, direction);

    //reset
    self->regs->reg_0x011c_reset_n = 0;
    LMS7002M_regs_spi_write(self, 0x011c);
    self->regs->reg_0x011c_reset_n = 1;
    c0b4:	10c19815 	stw	r3,1632(r2)
    LMS7002M_regs_spi_write(self, 0x011c);
    c0b8:	8009883a 	mov	r4,r16
    c0bc:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    //state for each VCO
    LMS7002M_sxx_tune_state states[3];
    LMS7002M_sxx_calc_tune_state(fref, fout, LMS7002M_SXX_VCOL_LO, LMS7002M_SXX_VCOL_HI, states+0);
    c0c0:	d8800504 	addi	r2,sp,20
    c0c4:	d8800415 	stw	r2,16(sp)
    c0c8:	00960034 	movhi	r2,22528
    c0cc:	d8800215 	stw	r2,8(sp)
    c0d0:	00907cf4 	movhi	r2,16883
    c0d4:	109d0584 	addi	r2,r2,29718
    c0d8:	d8800315 	stw	r2,12(sp)
    c0dc:	00b00034 	movhi	r2,49152
    c0e0:	d8800015 	stw	r2,0(sp)
    c0e4:	00907b34 	movhi	r2,16876
    c0e8:	1093fb04 	addi	r2,r2,20460
    c0ec:	a80d883a 	mov	r6,r21
    c0f0:	a00f883a 	mov	r7,r20
    c0f4:	9009883a 	mov	r4,r18
    c0f8:	880b883a 	mov	r5,r17
    c0fc:	d8800115 	stw	r2,4(sp)
    c100:	000bd100 	call	bd10 <LMS7002M_sxx_calc_tune_state>
    LMS7002M_sxx_calc_tune_state(fref, fout, LMS7002M_SXX_VCOM_LO, LMS7002M_SXX_VCOM_HI, states+1);
    c104:	d8800f04 	addi	r2,sp,60
    c108:	d8800415 	stw	r2,16(sp)
    c10c:	00907e74 	movhi	r2,16889
    c110:	108a4744 	addi	r2,r2,10525
    c114:	d8800315 	stw	r2,12(sp)
    c118:	00a90034 	movhi	r2,41984
    c11c:	d8800015 	stw	r2,0(sp)
    c120:	00907cb4 	movhi	r2,16882
    c124:	04f20034 	movhi	r19,51200
    c128:	109ecb44 	addi	r2,r2,31533
    c12c:	dcc00215 	stw	r19,8(sp)
    c130:	a80d883a 	mov	r6,r21
    c134:	a00f883a 	mov	r7,r20
    c138:	9009883a 	mov	r4,r18
    c13c:	880b883a 	mov	r5,r17
    c140:	d8800115 	stw	r2,4(sp)
    c144:	000bd100 	call	bd10 <LMS7002M_sxx_calc_tune_state>
    LMS7002M_sxx_calc_tune_state(fref, fout, LMS7002M_SXX_VCOH_LO, LMS7002M_SXX_VCOH_HI, states+2);
    c148:	d8801904 	addi	r2,sp,100
    c14c:	d8800415 	stw	r2,16(sp)
    c150:	00907f74 	movhi	r2,16893
    c154:	10af2904 	addi	r2,r2,-17244
    c158:	d8800315 	stw	r2,12(sp)
    c15c:	00907df4 	movhi	r2,16887
    c160:	109f7784 	addi	r2,r2,32222
    c164:	dcc00215 	stw	r19,8(sp)
    c168:	dcc00015 	stw	r19,0(sp)
    c16c:	d8800115 	stw	r2,4(sp)
    c170:	a80d883a 	mov	r6,r21
    c174:	a00f883a 	mov	r7,r20
    c178:	9009883a 	mov	r4,r18
    c17c:	880b883a 	mov	r5,r17
    c180:	000bd100 	call	bd10 <LMS7002M_sxx_calc_tune_state>

    //try several VCO settings to establish the best one
    int SEL_VCO_best = -1;
    int CSW_VCO_best = -1;
    c184:	04ffffc4 	movi	r19,-1
    c188:	da400e04 	addi	r9,sp,56

    for (int SEL_VCO_i = 0; SEL_VCO_i < 3; SEL_VCO_i++)
    c18c:	0039883a 	mov	fp,zero
    LMS7002M_sxx_calc_tune_state(fref, fout, LMS7002M_SXX_VCOL_LO, LMS7002M_SXX_VCOL_HI, states+0);
    LMS7002M_sxx_calc_tune_state(fref, fout, LMS7002M_SXX_VCOM_LO, LMS7002M_SXX_VCOM_HI, states+1);
    LMS7002M_sxx_calc_tune_state(fref, fout, LMS7002M_SXX_VCOH_LO, LMS7002M_SXX_VCOH_HI, states+2);

    //try several VCO settings to establish the best one
    int SEL_VCO_best = -1;
    c190:	982d883a 	mov	r22,r19
        if (LMS7002M_tune_vco(self,
            &self->regs->reg_0x0121_csw_vco, 0x0121,
            &self->regs->reg_0x0123_vco_cmpho,
            &self->regs->reg_0x0123_vco_cmplo, 0x0123) != 0) continue;

        if (CSW_VCO_best == -1 || abs(self->regs->reg_0x0121_csw_vco-128) < abs(CSW_VCO_best-128))
    c194:	9817883a 	mov	r11,r19

    //try several VCO settings to establish the best one
    int SEL_VCO_best = -1;
    int CSW_VCO_best = -1;

    for (int SEL_VCO_i = 0; SEL_VCO_i < 3; SEL_VCO_i++)
    c198:	028000c4 	movi	r10,3
    {
        LMS7002M_sxx_tune_state *s = states+SEL_VCO_i;

        //filter out states without reasonable tune values
        if (!s->good) continue;
    c19c:	48800003 	ldbu	r2,0(r9)
    c1a0:	497ff704 	addi	r5,r9,-36
    c1a4:	10002426 	beq	r2,zero,c238 <LMS7002M_set_lo_freq+0x1ec>

        //apply the configuration
        LMS7002M_sxx_apply_tune_state(self, s);
    c1a8:	8009883a 	mov	r4,r16
    c1ac:	da402315 	stw	r9,140(sp)
    c1b0:	da802515 	stw	r10,148(sp)
    c1b4:	dac02415 	stw	r11,144(sp)
    c1b8:	000bf880 	call	bf88 <LMS7002M_sxx_apply_tune_state>

        //select vco based on freq
        //LMS7_logf(LMS7_DEBUG, "Testing for SEL_VCO = %d", SEL_VCO_i);
        self->regs->reg_0x0121_sel_vco = SEL_VCO_i;
    c1bc:	80846917 	ldw	r2,4516(r16)
        LMS7002M_regs_spi_write(self, 0x0121);
    c1c0:	01404844 	movi	r5,289
    c1c4:	8009883a 	mov	r4,r16
        //apply the configuration
        LMS7002M_sxx_apply_tune_state(self, s);

        //select vco based on freq
        //LMS7_logf(LMS7_DEBUG, "Testing for SEL_VCO = %d", SEL_VCO_i);
        self->regs->reg_0x0121_sel_vco = SEL_VCO_i;
    c1c8:	1701b615 	stw	fp,1752(r2)
        LMS7002M_regs_spi_write(self, 0x0121);
    c1cc:	00063000 	call	6300 <LMS7002M_regs_spi_write>

        //select the correct CSW for this VCO frequency
        if (LMS7002M_tune_vco(self,
            &self->regs->reg_0x0121_csw_vco, 0x0121,
    c1d0:	81446917 	ldw	r5,4516(r16)
        //LMS7_logf(LMS7_DEBUG, "Testing for SEL_VCO = %d", SEL_VCO_i);
        self->regs->reg_0x0121_sel_vco = SEL_VCO_i;
        LMS7002M_regs_spi_write(self, 0x0121);

        //select the correct CSW for this VCO frequency
        if (LMS7002M_tune_vco(self,
    c1d4:	00c048c4 	movi	r3,291
    c1d8:	d8c00115 	stw	r3,4(sp)
    c1dc:	2881be04 	addi	r2,r5,1784
    c1e0:	29c1bd04 	addi	r7,r5,1780
    c1e4:	d8800015 	stw	r2,0(sp)
    c1e8:	01804844 	movi	r6,289
    c1ec:	2941b504 	addi	r5,r5,1748
    c1f0:	8009883a 	mov	r4,r16
    c1f4:	000e16c0 	call	e16c <LMS7002M_tune_vco>
    c1f8:	da402317 	ldw	r9,140(sp)
    c1fc:	da802517 	ldw	r10,148(sp)
    c200:	dac02417 	ldw	r11,144(sp)
    c204:	10000c1e 	bne	r2,zero,c238 <LMS7002M_set_lo_freq+0x1ec>
    c208:	81446917 	ldw	r5,4516(r16)
            &self->regs->reg_0x0121_csw_vco, 0x0121,
            &self->regs->reg_0x0123_vco_cmpho,
            &self->regs->reg_0x0123_vco_cmplo, 0x0123) != 0) continue;

        if (CSW_VCO_best == -1 || abs(self->regs->reg_0x0121_csw_vco-128) < abs(CSW_VCO_best-128))
    c20c:	9ac00826 	beq	r19,r11,c230 <LMS7002M_set_lo_freq+0x1e4>
    c210:	2881b517 	ldw	r2,1748(r5)
    c214:	10bfe004 	addi	r2,r2,-128
    c218:	1000010e 	bge	r2,zero,c220 <LMS7002M_set_lo_freq+0x1d4>
    c21c:	0085c83a 	sub	r2,zero,r2
    c220:	993fe004 	addi	r4,r19,-128
    c224:	2000010e 	bge	r4,zero,c22c <LMS7002M_set_lo_freq+0x1e0>
    c228:	0109c83a 	sub	r4,zero,r4
    c22c:	1100020e 	bge	r2,r4,c238 <LMS7002M_set_lo_freq+0x1ec>
        {
            SEL_VCO_best = SEL_VCO_i;
            CSW_VCO_best = self->regs->reg_0x0121_csw_vco;
    c230:	2cc1b517 	ldw	r19,1748(r5)
    c234:	e02d883a 	mov	r22,fp

    //try several VCO settings to establish the best one
    int SEL_VCO_best = -1;
    int CSW_VCO_best = -1;

    for (int SEL_VCO_i = 0; SEL_VCO_i < 3; SEL_VCO_i++)
    c238:	e7000044 	addi	fp,fp,1
    c23c:	4a400a04 	addi	r9,r9,40
    c240:	e2bfd61e 	bne	fp,r10,c19c <__alt_data_end+0xfffcd99c>
            CSW_VCO_best = self->regs->reg_0x0121_csw_vco;
        }
    }

    //failed to tune any VCO
    if (SEL_VCO_best == -1)
    c244:	00bfffc4 	movi	r2,-1
    c248:	b080061e 	bne	r22,r2,c264 <LMS7002M_set_lo_freq+0x218>
    {
        LMS7_log(LMS7_ERROR, "VCO select FAIL");
    c24c:	014000f4 	movhi	r5,3
    c250:	29634d04 	addi	r5,r5,-29388
    c254:	e009883a 	mov	r4,fp
    c258:	00098580 	call	9858 <LMS7_log>
        return -3;
    c25c:	00bfff44 	movi	r2,-3
    c260:	00005006 	br	c3a4 <LMS7002M_set_lo_freq+0x358>
    }
    //LMS7_logf(LMS7_DEBUG, "Choosing SEL_VCO = %d", SEL_VCO_best);

    //select the best VCO now
    self->regs->reg_0x0121_csw_vco = CSW_VCO_best;
    c264:	80846917 	ldw	r2,4516(r16)
    self->regs->reg_0x0121_sel_vco = SEL_VCO_best;
    LMS7002M_regs_spi_write(self, 0x0121);
    c268:	01404844 	movi	r5,289
    c26c:	8009883a 	mov	r4,r16
        return -3;
    }
    //LMS7_logf(LMS7_DEBUG, "Choosing SEL_VCO = %d", SEL_VCO_best);

    //select the best VCO now
    self->regs->reg_0x0121_csw_vco = CSW_VCO_best;
    c270:	14c1b515 	stw	r19,1748(r2)
    self->regs->reg_0x0121_sel_vco = SEL_VCO_best;
    c274:	1581b615 	stw	r22,1752(r2)
    LMS7002M_regs_spi_write(self, 0x0121);
    c278:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    self->regs->reg_0x011c_spdup_vco = 0; //done with fast settling
    c27c:	80846917 	ldw	r2,4516(r16)
    LMS7002M_regs_spi_write(self, 0x011c);
    c280:	01404704 	movi	r5,284
    c284:	8009883a 	mov	r4,r16
    //select the best VCO now
    self->regs->reg_0x0121_csw_vco = CSW_VCO_best;
    self->regs->reg_0x0121_sel_vco = SEL_VCO_best;
    LMS7002M_regs_spi_write(self, 0x0121);

    self->regs->reg_0x011c_spdup_vco = 0; //done with fast settling
    c288:	10019915 	stw	zero,1636(r2)
    LMS7002M_regs_spi_write(self, 0x011c);
    c28c:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    //apply the best configuration
    LMS7002M_sxx_tune_state *s = states+SEL_VCO_best;
    c290:	01400a04 	movi	r5,40
    c294:	b009883a 	mov	r4,r22
    c298:	002587c0 	call	2587c <__mulsi3>
    c29c:	d9000504 	addi	r4,sp,20
    c2a0:	20a7883a 	add	r19,r4,r2
    LMS7002M_sxx_apply_tune_state(self, s);
    c2a4:	980b883a 	mov	r5,r19
    c2a8:	8009883a 	mov	r4,r16
    c2ac:	000bf880 	call	bf88 <LMS7002M_sxx_apply_tune_state>

    //after a successful tune, stash the frequency
    if (direction == LMS_RX) self->sxr_freq = fout;
    c2b0:	00800084 	movi	r2,2
    c2b4:	b880051e 	bne	r23,r2,c2cc <LMS7002M_set_lo_freq+0x280>
    c2b8:	85446c15 	stw	r21,4528(r16)
    c2bc:	85046d15 	stw	r20,4532(r16)
    if (direction == LMS_TX) self->sxt_freq = fout;
    if (direction == LMS_RX) self->sxr_fref = fref;
    c2c0:	84847215 	stw	r18,4552(r16)
    c2c4:	84447315 	stw	r17,4556(r16)
    c2c8:	00000606 	br	c2e4 <LMS7002M_set_lo_freq+0x298>
    LMS7002M_sxx_tune_state *s = states+SEL_VCO_best;
    LMS7002M_sxx_apply_tune_state(self, s);

    //after a successful tune, stash the frequency
    if (direction == LMS_RX) self->sxr_freq = fout;
    if (direction == LMS_TX) self->sxt_freq = fout;
    c2cc:	00800044 	movi	r2,1
    c2d0:	b880041e 	bne	r23,r2,c2e4 <LMS7002M_set_lo_freq+0x298>
    c2d4:	85446e15 	stw	r21,4536(r16)
    c2d8:	85046f15 	stw	r20,4540(r16)
    if (direction == LMS_RX) self->sxr_fref = fref;
    if (direction == LMS_TX) self->sxt_fref = fref;
    c2dc:	84847415 	stw	r18,4560(r16)
    c2e0:	84447515 	stw	r17,4564(r16)

    //calculate the actual rate
    if (factual != NULL) *factual = (1 << s->EN_DIV2) * fref * ((s->Nint+4) + (s->Nfrac/((double)(1 << 20)))) / s->fdiv;
    c2e4:	d8803217 	ldw	r2,200(sp)
    c2e8:	10002d26 	beq	r2,zero,c3a0 <LMS7002M_set_lo_freq+0x354>
    c2ec:	99000317 	ldw	r4,12(r19)
    c2f0:	21000104 	addi	r4,r4,4
    c2f4:	002815c0 	call	2815c <__floatsidf>
    c2f8:	99000417 	ldw	r4,16(r19)
    c2fc:	1029883a 	mov	r20,r2
    c300:	1821883a 	mov	r16,r3
    c304:	002815c0 	call	2815c <__floatsidf>
    c308:	000d883a 	mov	r6,zero
    c30c:	01cfac34 	movhi	r7,16048
    c310:	1009883a 	mov	r4,r2
    c314:	180b883a 	mov	r5,r3
    c318:	0026f740 	call	26f74 <__muldf3>
    c31c:	800b883a 	mov	r5,r16
    c320:	100d883a 	mov	r6,r2
    c324:	180f883a 	mov	r7,r3
    c328:	a009883a 	mov	r4,r20
    c32c:	0025aa00 	call	25aa0 <__adddf3>
    c330:	1029883a 	mov	r20,r2
    c334:	98800817 	ldw	r2,32(r19)
    c338:	01000044 	movi	r4,1
    c33c:	1821883a 	mov	r16,r3
    c340:	2088983a 	sll	r4,r4,r2
    c344:	002815c0 	call	2815c <__floatsidf>
    c348:	880f883a 	mov	r7,r17
    c34c:	900d883a 	mov	r6,r18
    c350:	1009883a 	mov	r4,r2
    c354:	180b883a 	mov	r5,r3
    c358:	0026f740 	call	26f74 <__muldf3>
    c35c:	800b883a 	mov	r5,r16
    c360:	100d883a 	mov	r6,r2
    c364:	180f883a 	mov	r7,r3
    c368:	a009883a 	mov	r4,r20
    c36c:	0026f740 	call	26f74 <__muldf3>
    c370:	99000717 	ldw	r4,28(r19)
    c374:	1023883a 	mov	r17,r2
    c378:	1821883a 	mov	r16,r3
    c37c:	002815c0 	call	2815c <__floatsidf>
    c380:	8809883a 	mov	r4,r17
    c384:	100d883a 	mov	r6,r2
    c388:	180f883a 	mov	r7,r3
    c38c:	800b883a 	mov	r5,r16
    c390:	002634c0 	call	2634c <__divdf3>
    c394:	d9003217 	ldw	r4,200(sp)
    c398:	20800015 	stw	r2,0(r4)
    c39c:	20c00115 	stw	r3,4(r4)

    return 0; //OK
    c3a0:	0005883a 	mov	r2,zero
}
    c3a4:	dfc02f17 	ldw	ra,188(sp)
    c3a8:	df002e17 	ldw	fp,184(sp)
    c3ac:	ddc02d17 	ldw	r23,180(sp)
    c3b0:	dd802c17 	ldw	r22,176(sp)
    c3b4:	dd402b17 	ldw	r21,172(sp)
    c3b8:	dd002a17 	ldw	r20,168(sp)
    c3bc:	dcc02917 	ldw	r19,164(sp)
    c3c0:	dc802817 	ldw	r18,160(sp)
    c3c4:	dc402717 	ldw	r17,156(sp)
    c3c8:	dc002617 	ldw	r16,152(sp)
    c3cc:	dec03004 	addi	sp,sp,192
    c3d0:	f800283a 	ret

0000c3d4 <LMS7002M_sxt_to_sxr>:

void LMS7002M_sxt_to_sxr(LMS7002M_t *self, const bool enable)
{
    c3d4:	defffd04 	addi	sp,sp,-12
    c3d8:	dc000015 	stw	r16,0(sp)
    c3dc:	2821883a 	mov	r16,r5
    LMS7002M_set_mac_dir(self, LMS_TX);
    c3e0:	01400044 	movi	r5,1

    return 0; //OK
}

void LMS7002M_sxt_to_sxr(LMS7002M_t *self, const bool enable)
{
    c3e4:	dc400115 	stw	r17,4(sp)
    c3e8:	dfc00215 	stw	ra,8(sp)
    c3ec:	2023883a 	mov	r17,r4
    LMS7002M_set_mac_dir(self, LMS_TX);
    c3f0:	000963c0 	call	963c <LMS7002M_set_mac_dir>
    self->regs->reg_0x011c_pd_loch_t2rbuf = enable?0:1;
    c3f4:	88846917 	ldw	r2,4516(r17)
    c3f8:	8400005c 	xori	r16,r16,1
    c3fc:	84003fcc 	andi	r16,r16,255
    LMS7002M_regs_spi_write(self, 0x011c);
    c400:	01404704 	movi	r5,284
    c404:	8809883a 	mov	r4,r17
}

void LMS7002M_sxt_to_sxr(LMS7002M_t *self, const bool enable)
{
    LMS7002M_set_mac_dir(self, LMS_TX);
    self->regs->reg_0x011c_pd_loch_t2rbuf = enable?0:1;
    c408:	1401a115 	stw	r16,1668(r2)
    LMS7002M_regs_spi_write(self, 0x011c);
}
    c40c:	dfc00217 	ldw	ra,8(sp)
    c410:	dc400117 	ldw	r17,4(sp)
    c414:	dc000017 	ldw	r16,0(sp)
    c418:	dec00304 	addi	sp,sp,12

void LMS7002M_sxt_to_sxr(LMS7002M_t *self, const bool enable)
{
    LMS7002M_set_mac_dir(self, LMS_TX);
    self->regs->reg_0x011c_pd_loch_t2rbuf = enable?0:1;
    LMS7002M_regs_spi_write(self, 0x011c);
    c41c:	00063001 	jmpi	6300 <LMS7002M_regs_spi_write>

0000c420 <LMS7002M_tbb_set_path>:

    LMS7002M_regs_spi_write(self, 0x0105);
}

void LMS7002M_tbb_set_path(LMS7002M_t *self, const LMS7002M_chan_t channel, const int path)
{
    c420:	defffd04 	addi	sp,sp,-12
    c424:	dc400115 	stw	r17,4(sp)
    c428:	dc000015 	stw	r16,0(sp)
    c42c:	2023883a 	mov	r17,r4
    c430:	dfc00215 	stw	ra,8(sp)
    c434:	3021883a 	mov	r16,r6
    LMS7002M_set_mac_ch(self, channel);
    c438:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    self->regs->reg_0x0105_pd_lpfh_tbb = 1;
    c43c:	88846917 	ldw	r2,4516(r17)
    c440:	00c00044 	movi	r3,1
    c444:	10c14c15 	stw	r3,1328(r2)
    self->regs->reg_0x0105_pd_lpflad_tbb = 1;
    c448:	10c14e15 	stw	r3,1336(r2)
    self->regs->reg_0x0105_pd_lpfs5_tbb = 1;
    c44c:	10c14f15 	stw	r3,1340(r2)
    self->regs->reg_0x010a_bypladder_tbb = 1;
    c450:	10c15d15 	stw	r3,1396(r2)

    switch (path)
    c454:	00c01204 	movi	r3,72
    c458:	80c00f26 	beq	r16,r3,c498 <LMS7002M_tbb_set_path+0x78>
    c45c:	1c000516 	blt	r3,r16,c474 <LMS7002M_tbb_set_path+0x54>
    c460:	00c01044 	movi	r3,65
    c464:	80c00d1e 	bne	r16,r3,c49c <LMS7002M_tbb_set_path+0x7c>
    case LMS7002M_TBB_S5:
        self->regs->reg_0x0105_pd_lpfs5_tbb = 0;
        break;

    case LMS7002M_TBB_LAD:
        self->regs->reg_0x010a_bypladder_tbb = 0;
    c468:	10015d15 	stw	zero,1396(r2)
        self->regs->reg_0x0105_pd_lpflad_tbb = 0;
    c46c:	10014e15 	stw	zero,1336(r2)
        break;
    c470:	00000a06 	br	c49c <LMS7002M_tbb_set_path+0x7c>
    self->regs->reg_0x0105_pd_lpfh_tbb = 1;
    self->regs->reg_0x0105_pd_lpflad_tbb = 1;
    self->regs->reg_0x0105_pd_lpfs5_tbb = 1;
    self->regs->reg_0x010a_bypladder_tbb = 1;

    switch (path)
    c474:	00c01304 	movi	r3,76
    c478:	80c00326 	beq	r16,r3,c488 <LMS7002M_tbb_set_path+0x68>
    c47c:	00c014c4 	movi	r3,83
    c480:	80c00326 	beq	r16,r3,c490 <LMS7002M_tbb_set_path+0x70>
    c484:	00000506 	br	c49c <LMS7002M_tbb_set_path+0x7c>
        self->regs->reg_0x010a_bypladder_tbb = 0;
        self->regs->reg_0x0105_pd_lpflad_tbb = 0;
        break;

    case LMS7002M_TBB_LBF:
        self->regs->reg_0x010a_bypladder_tbb = 0;
    c488:	10015d15 	stw	zero,1396(r2)
        self->regs->reg_0x0105_pd_lpflad_tbb = 0;
    c48c:	10014e15 	stw	zero,1336(r2)
        self->regs->reg_0x0105_pd_lpfs5_tbb = 0;
    c490:	10014f15 	stw	zero,1340(r2)
        break;
    c494:	00000106 	br	c49c <LMS7002M_tbb_set_path+0x7c>

    case LMS7002M_TBB_HBF:
        self->regs->reg_0x0105_pd_lpfh_tbb = 0;
    c498:	10014c15 	stw	zero,1328(r2)
        break;
    }

    LMS7002M_regs_spi_write(self, 0x0105);
    c49c:	8809883a 	mov	r4,r17
    c4a0:	01404144 	movi	r5,261
    c4a4:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x010A);
    c4a8:	01404284 	movi	r5,266
    c4ac:	8809883a 	mov	r4,r17
}
    c4b0:	dfc00217 	ldw	ra,8(sp)
    c4b4:	dc400117 	ldw	r17,4(sp)
    c4b8:	dc000017 	ldw	r16,0(sp)
    c4bc:	dec00304 	addi	sp,sp,12
        self->regs->reg_0x0105_pd_lpfh_tbb = 0;
        break;
    }

    LMS7002M_regs_spi_write(self, 0x0105);
    LMS7002M_regs_spi_write(self, 0x010A);
    c4c0:	00063001 	jmpi	6300 <LMS7002M_regs_spi_write>

0000c4c4 <LMS7002M_tbb_set_test_in>:
}

void LMS7002M_tbb_set_test_in(LMS7002M_t *self, const LMS7002M_chan_t channel, const int path)
{
    c4c4:	defffd04 	addi	sp,sp,-12
    c4c8:	dc400115 	stw	r17,4(sp)
    c4cc:	dc000015 	stw	r16,0(sp)
    c4d0:	3023883a 	mov	r17,r6
    c4d4:	2021883a 	mov	r16,r4
    c4d8:	dfc00215 	stw	ra,8(sp)
    LMS7002M_set_mac_ch(self, channel);
    c4dc:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>
    self->regs->reg_0x010a_tstin_tbb = path;
    c4e0:	80846917 	ldw	r2,4516(r16)
    LMS7002M_regs_spi_write(self, 0x010a);
    c4e4:	01404284 	movi	r5,266
    c4e8:	8009883a 	mov	r4,r16
}

void LMS7002M_tbb_set_test_in(LMS7002M_t *self, const LMS7002M_chan_t channel, const int path)
{
    LMS7002M_set_mac_ch(self, channel);
    self->regs->reg_0x010a_tstin_tbb = path;
    c4ec:	14415c15 	stw	r17,1392(r2)
    LMS7002M_regs_spi_write(self, 0x010a);
}
    c4f0:	dfc00217 	ldw	ra,8(sp)
    c4f4:	dc400117 	ldw	r17,4(sp)
    c4f8:	dc000017 	ldw	r16,0(sp)
    c4fc:	dec00304 	addi	sp,sp,12

void LMS7002M_tbb_set_test_in(LMS7002M_t *self, const LMS7002M_chan_t channel, const int path)
{
    LMS7002M_set_mac_ch(self, channel);
    self->regs->reg_0x010a_tstin_tbb = path;
    LMS7002M_regs_spi_write(self, 0x010a);
    c500:	00063001 	jmpi	6300 <LMS7002M_regs_spi_write>

0000c504 <LMS7002M_tbb_enable_loopback>:
}

void LMS7002M_tbb_enable_loopback(LMS7002M_t *self, const LMS7002M_chan_t channel, const int mode, const bool swap)
{
    c504:	defffc04 	addi	sp,sp,-16
    c508:	dc800215 	stw	r18,8(sp)
    c50c:	dc400115 	stw	r17,4(sp)
    c510:	2025883a 	mov	r18,r4
    c514:	dc000015 	stw	r16,0(sp)
    c518:	3023883a 	mov	r17,r6
    c51c:	3821883a 	mov	r16,r7
    c520:	dfc00315 	stw	ra,12(sp)
    LMS7002M_set_mac_ch(self, channel);
    c524:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    self->regs->reg_0x0105_loopb_tbb = mode;
    self->regs->reg_0x0105_loopb_tbb |= swap?(1 << 2):0;
    c528:	81c03fcc 	andi	r7,r16,255
    c52c:	380ec03a 	cmpne	r7,r7,zero
    c530:	380e90ba 	slli	r7,r7,2

void LMS7002M_tbb_enable_loopback(LMS7002M_t *self, const LMS7002M_chan_t channel, const int mode, const bool swap)
{
    LMS7002M_set_mac_ch(self, channel);

    self->regs->reg_0x0105_loopb_tbb = mode;
    c534:	90846917 	ldw	r2,4516(r18)
    self->regs->reg_0x0105_loopb_tbb |= swap?(1 << 2):0;

    LMS7002M_regs_spi_write(self, 0x0105);
    c538:	01404144 	movi	r5,261
void LMS7002M_tbb_enable_loopback(LMS7002M_t *self, const LMS7002M_chan_t channel, const int mode, const bool swap)
{
    LMS7002M_set_mac_ch(self, channel);

    self->regs->reg_0x0105_loopb_tbb = mode;
    self->regs->reg_0x0105_loopb_tbb |= swap?(1 << 2):0;
    c53c:	3c4eb03a 	or	r7,r7,r17

    LMS7002M_regs_spi_write(self, 0x0105);
    c540:	9009883a 	mov	r4,r18
void LMS7002M_tbb_enable_loopback(LMS7002M_t *self, const LMS7002M_chan_t channel, const int mode, const bool swap)
{
    LMS7002M_set_mac_ch(self, channel);

    self->regs->reg_0x0105_loopb_tbb = mode;
    self->regs->reg_0x0105_loopb_tbb |= swap?(1 << 2):0;
    c544:	11c14b15 	stw	r7,1324(r2)

    LMS7002M_regs_spi_write(self, 0x0105);
}
    c548:	dfc00317 	ldw	ra,12(sp)
    c54c:	dc800217 	ldw	r18,8(sp)
    c550:	dc400117 	ldw	r17,4(sp)
    c554:	dc000017 	ldw	r16,0(sp)
    c558:	dec00404 	addi	sp,sp,16
    LMS7002M_set_mac_ch(self, channel);

    self->regs->reg_0x0105_loopb_tbb = mode;
    self->regs->reg_0x0105_loopb_tbb |= swap?(1 << 2):0;

    LMS7002M_regs_spi_write(self, 0x0105);
    c55c:	00063001 	jmpi	6300 <LMS7002M_regs_spi_write>

0000c560 <LMS7002M_tbb_enable>:
#include <stdlib.h>
#include "LMS7002M_impl.h"
#include <LMS7002M/LMS7002M_logger.h>

void LMS7002M_tbb_enable(LMS7002M_t *self, const LMS7002M_chan_t channel, const bool enable)
{
    c560:	defffc04 	addi	sp,sp,-16
    c564:	dfc00315 	stw	ra,12(sp)
    c568:	dc800215 	stw	r18,8(sp)
    c56c:	dc400115 	stw	r17,4(sp)
    c570:	2825883a 	mov	r18,r5
    c574:	3023883a 	mov	r17,r6
    c578:	dc000015 	stw	r16,0(sp)
    c57c:	2021883a 	mov	r16,r4
    LMS7002M_set_mac_ch(self, channel);
    c580:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>
    self->regs->reg_0x0124_en_dir_tbb = 1;
    c584:	80846917 	ldw	r2,4516(r16)
    c588:	00c00044 	movi	r3,1
    LMS7002M_regs_spi_write(self, 0x0124);
    c58c:	8009883a 	mov	r4,r16
#include <LMS7002M/LMS7002M_logger.h>

void LMS7002M_tbb_enable(LMS7002M_t *self, const LMS7002M_chan_t channel, const bool enable)
{
    LMS7002M_set_mac_ch(self, channel);
    self->regs->reg_0x0124_en_dir_tbb = 1;
    c590:	10c1c515 	stw	r3,1812(r2)
    LMS7002M_regs_spi_write(self, 0x0124);
    c594:	01404904 	movi	r5,292
    c598:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    self->regs->reg_0x0105_en_g_tbb = enable?1:0;
    c59c:	80846917 	ldw	r2,4516(r16)
    c5a0:	8c403fcc 	andi	r17,r17,255
    LMS7002M_tbb_set_test_in(self, channel, LMS7002M_TBB_TSTIN_OFF);
    c5a4:	900b883a 	mov	r5,r18
{
    LMS7002M_set_mac_ch(self, channel);
    self->regs->reg_0x0124_en_dir_tbb = 1;
    LMS7002M_regs_spi_write(self, 0x0124);

    self->regs->reg_0x0105_en_g_tbb = enable?1:0;
    c5a8:	14415015 	stw	r17,1344(r2)
    LMS7002M_tbb_set_test_in(self, channel, LMS7002M_TBB_TSTIN_OFF);
    c5ac:	8009883a 	mov	r4,r16
    c5b0:	000d883a 	mov	r6,zero
    c5b4:	000c4c40 	call	c4c4 <LMS7002M_tbb_set_test_in>
    LMS7002M_tbb_enable_loopback(self, channel, LMS7002M_TBB_LB_DISCONNECTED, false);
    c5b8:	900b883a 	mov	r5,r18
    c5bc:	8009883a 	mov	r4,r16
    c5c0:	000f883a 	mov	r7,zero
    c5c4:	000d883a 	mov	r6,zero
    c5c8:	000c5040 	call	c504 <LMS7002M_tbb_enable_loopback>

    LMS7002M_regs_spi_write(self, 0x0105);
    c5cc:	01404144 	movi	r5,261
    c5d0:	8009883a 	mov	r4,r16
}
    c5d4:	dfc00317 	ldw	ra,12(sp)
    c5d8:	dc800217 	ldw	r18,8(sp)
    c5dc:	dc400117 	ldw	r17,4(sp)
    c5e0:	dc000017 	ldw	r16,0(sp)
    c5e4:	dec00404 	addi	sp,sp,16

    self->regs->reg_0x0105_en_g_tbb = enable?1:0;
    LMS7002M_tbb_set_test_in(self, channel, LMS7002M_TBB_TSTIN_OFF);
    LMS7002M_tbb_enable_loopback(self, channel, LMS7002M_TBB_LB_DISCONNECTED, false);

    LMS7002M_regs_spi_write(self, 0x0105);
    c5e8:	00063001 	jmpi	6300 <LMS7002M_regs_spi_write>

0000c5ec <LMS7_time_tps>:
#include <unistd.h>

long long LMS7_time_tps(void)
{
    return 1000000;
}
    c5ec:	008003f4 	movhi	r2,15
    c5f0:	10909004 	addi	r2,r2,16960
    c5f4:	0007883a 	mov	r3,zero
    c5f8:	f800283a 	ret

0000c5fc <LMS7_time_now>:

long long LMS7_time_now(void)
{
    c5fc:	defffd04 	addi	sp,sp,-12
    struct timeval now_tv;
    gettimeofday(&now_tv, NULL);
    c600:	d809883a 	mov	r4,sp
    c604:	000b883a 	mov	r5,zero
{
    return 1000000;
}

long long LMS7_time_now(void)
{
    c608:	dfc00215 	stw	ra,8(sp)
    struct timeval now_tv;
    gettimeofday(&now_tv, NULL);
    c60c:	002854c0 	call	2854c <gettimeofday>
    return (LMS7_time_tps()*now_tv.tv_sec) + now_tv.tv_usec;
    c610:	d9000017 	ldw	r4,0(sp)
    c614:	018003f4 	movhi	r6,15
    c618:	31909004 	addi	r6,r6,16960
    c61c:	200bd7fa 	srai	r5,r4,31
    c620:	000f883a 	mov	r7,zero
    c624:	00243300 	call	24330 <__muldi3>
    c628:	d9000117 	ldw	r4,4(sp)
    c62c:	200dd7fa 	srai	r6,r4,31
    c630:	1109883a 	add	r4,r2,r4
    c634:	208b803a 	cmpltu	r5,r4,r2
    c638:	1987883a 	add	r3,r3,r6
}
    c63c:	2005883a 	mov	r2,r4
    c640:	28c7883a 	add	r3,r5,r3
    c644:	dfc00217 	ldw	ra,8(sp)
    c648:	dec00304 	addi	sp,sp,12
    c64c:	f800283a 	ret

0000c650 <LMS7_sleep_until>:
{
    LMS7_sleep_until(LMS7_time_now() + ticks);
}

void LMS7_sleep_until(const long long ticks)
{
    c650:	defffd04 	addi	sp,sp,-12
    c654:	dc400115 	stw	r17,4(sp)
    c658:	dc000015 	stw	r16,0(sp)
    c65c:	dfc00215 	stw	ra,8(sp)
    c660:	2021883a 	mov	r16,r4
    c664:	2823883a 	mov	r17,r5
    //we must loop in case of spurious wake-ups
    while (true)
    {
        const long long left = ticks - LMS7_time_now();
    c668:	000c5fc0 	call	c5fc <LMS7_time_now>
        if (left < 0) break; //time expired -> done here
    c66c:	8085c83a 	sub	r2,r16,r2
    c670:	8085803a 	cmpltu	r2,r16,r2
    c674:	88c7c83a 	sub	r3,r17,r3
    c678:	1887c83a 	sub	r3,r3,r2
    c67c:	183ffa0e 	bge	r3,zero,c668 <__alt_data_end+0xfffcde68>
        //struct timeval tv;
        //tv.tv_sec = left/LMS7_time_tps();
        //tv.tv_usec = left%LMS7_time_tps();
        //select(1, NULL, NULL, NULL, &tv);
    }
}
    c680:	dfc00217 	ldw	ra,8(sp)
    c684:	dc400117 	ldw	r17,4(sp)
    c688:	dc000017 	ldw	r16,0(sp)
    c68c:	dec00304 	addi	sp,sp,12
    c690:	f800283a 	ret

0000c694 <LMS7_sleep_for>:
    gettimeofday(&now_tv, NULL);
    return (LMS7_time_tps()*now_tv.tv_sec) + now_tv.tv_usec;
}

void LMS7_sleep_for(const long long ticks)
{
    c694:	defffd04 	addi	sp,sp,-12
    c698:	dc400115 	stw	r17,4(sp)
    c69c:	dc000015 	stw	r16,0(sp)
    c6a0:	2823883a 	mov	r17,r5
    c6a4:	2021883a 	mov	r16,r4
    c6a8:	dfc00215 	stw	ra,8(sp)
    LMS7_sleep_until(LMS7_time_now() + ticks);
    c6ac:	000c5fc0 	call	c5fc <LMS7_time_now>
    c6b0:	1409883a 	add	r4,r2,r16
    c6b4:	2085803a 	cmpltu	r2,r4,r2
    c6b8:	1c4b883a 	add	r5,r3,r17
    c6bc:	114b883a 	add	r5,r2,r5
}
    c6c0:	dfc00217 	ldw	ra,8(sp)
    c6c4:	dc400117 	ldw	r17,4(sp)
    c6c8:	dc000017 	ldw	r16,0(sp)
    c6cc:	dec00304 	addi	sp,sp,12
    return (LMS7_time_tps()*now_tv.tv_sec) + now_tv.tv_usec;
}

void LMS7_sleep_for(const long long ticks)
{
    LMS7_sleep_until(LMS7_time_now() + ticks);
    c6d0:	000c6501 	jmpi	c650 <LMS7_sleep_until>

0000c6d4 <LMS7002M_trf_enable>:
#include <stdlib.h>
#include <math.h> //exp
#include "LMS7002M_impl.h"

void LMS7002M_trf_enable(LMS7002M_t *self, const LMS7002M_chan_t channel, const bool enable)
{
    c6d4:	defffb04 	addi	sp,sp,-20
    c6d8:	dfc00415 	stw	ra,16(sp)
    c6dc:	dcc00315 	stw	r19,12(sp)
    c6e0:	dc800215 	stw	r18,8(sp)
    c6e4:	dc400115 	stw	r17,4(sp)
    c6e8:	dc000015 	stw	r16,0(sp)
    c6ec:	3023883a 	mov	r17,r6
    c6f0:	2021883a 	mov	r16,r4
    c6f4:	2827883a 	mov	r19,r5
    LMS7002M_set_mac_ch(self, channel);
    c6f8:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>
    self->regs->reg_0x0124_en_dir_trf = 1;
    c6fc:	80846917 	ldw	r2,4516(r16)
    c700:	00c00044 	movi	r3,1
    LMS7002M_regs_spi_write(self, 0x0124);
    c704:	01404904 	movi	r5,292
#include "LMS7002M_impl.h"

void LMS7002M_trf_enable(LMS7002M_t *self, const LMS7002M_chan_t channel, const bool enable)
{
    LMS7002M_set_mac_ch(self, channel);
    self->regs->reg_0x0124_en_dir_trf = 1;
    c708:	10c1c615 	stw	r3,1816(r2)
    LMS7002M_regs_spi_write(self, 0x0124);
    c70c:	8009883a 	mov	r4,r16
    c710:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    self->regs->reg_0x0100_en_g_trf = enable?1:0;
    c714:	80846917 	ldw	r2,4516(r16)
    c718:	8c803fcc 	andi	r18,r17,255
    self->regs->reg_0x0100_pd_tlobuf_trf = enable?0:1;
    c71c:	8c40005c 	xori	r17,r17,1
    c720:	8c403fcc 	andi	r17,r17,255
    self->regs->reg_0x0100_pd_txpad_trf = enable?0:1;
    LMS7002M_regs_spi_write(self, 0x0100);
    c724:	01404004 	movi	r5,256
{
    LMS7002M_set_mac_ch(self, channel);
    self->regs->reg_0x0124_en_dir_trf = 1;
    LMS7002M_regs_spi_write(self, 0x0124);

    self->regs->reg_0x0100_en_g_trf = enable?1:0;
    c728:	14813a15 	stw	r18,1256(r2)
    self->regs->reg_0x0100_pd_tlobuf_trf = enable?0:1;
    c72c:	14413815 	stw	r17,1248(r2)
    self->regs->reg_0x0100_pd_txpad_trf = enable?0:1;
    c730:	14413915 	stw	r17,1252(r2)
    LMS7002M_regs_spi_write(self, 0x0100);
    c734:	8009883a 	mov	r4,r16
    c738:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    //the chB LO enable register is a chA register
    if (channel != LMS_CHA)
    c73c:	01401044 	movi	r5,65
    c740:	99400d26 	beq	r19,r5,c778 <LMS7002M_trf_enable+0xa4>
    {
        LMS7002M_set_mac_ch(self, LMS_CHA);
    c744:	8009883a 	mov	r4,r16
    c748:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>
        self->regs->reg_0x0100_en_nexttx_trf = enable?1:0;
    c74c:	80846917 	ldw	r2,4516(r16)
        LMS7002M_regs_spi_write(self, 0x0100);
    c750:	01404004 	movi	r5,256
    c754:	8009883a 	mov	r4,r16

    //the chB LO enable register is a chA register
    if (channel != LMS_CHA)
    {
        LMS7002M_set_mac_ch(self, LMS_CHA);
        self->regs->reg_0x0100_en_nexttx_trf = enable?1:0;
    c758:	14813415 	stw	r18,1232(r2)
        LMS7002M_regs_spi_write(self, 0x0100);
    }
}
    c75c:	dfc00417 	ldw	ra,16(sp)
    c760:	dcc00317 	ldw	r19,12(sp)
    c764:	dc800217 	ldw	r18,8(sp)
    c768:	dc400117 	ldw	r17,4(sp)
    c76c:	dc000017 	ldw	r16,0(sp)
    c770:	dec00504 	addi	sp,sp,20
    //the chB LO enable register is a chA register
    if (channel != LMS_CHA)
    {
        LMS7002M_set_mac_ch(self, LMS_CHA);
        self->regs->reg_0x0100_en_nexttx_trf = enable?1:0;
        LMS7002M_regs_spi_write(self, 0x0100);
    c774:	00063001 	jmpi	6300 <LMS7002M_regs_spi_write>
    }
}
    c778:	dfc00417 	ldw	ra,16(sp)
    c77c:	dcc00317 	ldw	r19,12(sp)
    c780:	dc800217 	ldw	r18,8(sp)
    c784:	dc400117 	ldw	r17,4(sp)
    c788:	dc000017 	ldw	r16,0(sp)
    c78c:	dec00504 	addi	sp,sp,20
    c790:	f800283a 	ret

0000c794 <LMS7002M_trf_select_band>:

void LMS7002M_trf_select_band(LMS7002M_t *self, const LMS7002M_chan_t channel, const int band)
{
    c794:	defffd04 	addi	sp,sp,-12
    c798:	dc400115 	stw	r17,4(sp)
    c79c:	dc000015 	stw	r16,0(sp)
    c7a0:	2023883a 	mov	r17,r4
    c7a4:	3021883a 	mov	r16,r6
    c7a8:	dfc00215 	stw	ra,8(sp)
    LMS7002M_set_mac_ch(self, channel);
    c7ac:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>
    self->regs->reg_0x0103_sel_band1_trf = (band == 1)?1:0;
    c7b0:	88846917 	ldw	r2,4516(r17)
    c7b4:	80c00060 	cmpeqi	r3,r16,1
    self->regs->reg_0x0103_sel_band2_trf = (band == 2)?1:0;
    LMS7002M_regs_spi_write(self, 0x0103);
    c7b8:	014040c4 	movi	r5,259

void LMS7002M_trf_select_band(LMS7002M_t *self, const LMS7002M_chan_t channel, const int band)
{
    LMS7002M_set_mac_ch(self, channel);
    self->regs->reg_0x0103_sel_band1_trf = (band == 1)?1:0;
    self->regs->reg_0x0103_sel_band2_trf = (band == 2)?1:0;
    c7bc:	840000a0 	cmpeqi	r16,r16,2
    LMS7002M_regs_spi_write(self, 0x0103);
    c7c0:	8809883a 	mov	r4,r17
}

void LMS7002M_trf_select_band(LMS7002M_t *self, const LMS7002M_chan_t channel, const int band)
{
    LMS7002M_set_mac_ch(self, channel);
    self->regs->reg_0x0103_sel_band1_trf = (band == 1)?1:0;
    c7c4:	10c14415 	stw	r3,1296(r2)
    self->regs->reg_0x0103_sel_band2_trf = (band == 2)?1:0;
    c7c8:	14014515 	stw	r16,1300(r2)
    LMS7002M_regs_spi_write(self, 0x0103);
}
    c7cc:	dfc00217 	ldw	ra,8(sp)
    c7d0:	dc400117 	ldw	r17,4(sp)
    c7d4:	dc000017 	ldw	r16,0(sp)
    c7d8:	dec00304 	addi	sp,sp,12
void LMS7002M_trf_select_band(LMS7002M_t *self, const LMS7002M_chan_t channel, const int band)
{
    LMS7002M_set_mac_ch(self, channel);
    self->regs->reg_0x0103_sel_band1_trf = (band == 1)?1:0;
    self->regs->reg_0x0103_sel_band2_trf = (band == 2)?1:0;
    LMS7002M_regs_spi_write(self, 0x0103);
    c7dc:	00063001 	jmpi	6300 <LMS7002M_regs_spi_write>

0000c7e0 <LMS7002M_trf_enable_loopback>:
}

void LMS7002M_trf_enable_loopback(LMS7002M_t *self, const LMS7002M_chan_t channel, const bool enable)
{
    c7e0:	defffd04 	addi	sp,sp,-12
    c7e4:	dc400115 	stw	r17,4(sp)
    c7e8:	dc000015 	stw	r16,0(sp)
    c7ec:	2023883a 	mov	r17,r4
    c7f0:	3021883a 	mov	r16,r6
    c7f4:	dfc00215 	stw	ra,8(sp)
    LMS7002M_set_mac_ch(self, channel);
    c7f8:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>
    self->regs->reg_0x0101_en_loopb_txpad_trf = enable?1:0;
    c7fc:	88846917 	ldw	r2,4516(r17)
    c800:	84003fcc 	andi	r16,r16,255
    LMS7002M_regs_spi_write(self, 0x0101);
    c804:	01404044 	movi	r5,257
    c808:	8809883a 	mov	r4,r17
}

void LMS7002M_trf_enable_loopback(LMS7002M_t *self, const LMS7002M_chan_t channel, const bool enable)
{
    LMS7002M_set_mac_ch(self, channel);
    self->regs->reg_0x0101_en_loopb_txpad_trf = enable?1:0;
    c80c:	14013f15 	stw	r16,1276(r2)
    LMS7002M_regs_spi_write(self, 0x0101);
}
    c810:	dfc00217 	ldw	ra,8(sp)
    c814:	dc400117 	ldw	r17,4(sp)
    c818:	dc000017 	ldw	r16,0(sp)
    c81c:	dec00304 	addi	sp,sp,12

void LMS7002M_trf_enable_loopback(LMS7002M_t *self, const LMS7002M_chan_t channel, const bool enable)
{
    LMS7002M_set_mac_ch(self, channel);
    self->regs->reg_0x0101_en_loopb_txpad_trf = enable?1:0;
    LMS7002M_regs_spi_write(self, 0x0101);
    c820:	00063001 	jmpi	6300 <LMS7002M_regs_spi_write>

0000c824 <LMS7002M_trf_set_pad>:
}

double LMS7002M_trf_set_pad(LMS7002M_t *self, const LMS7002M_chan_t channel, const double gain)
{
    c824:	defffb04 	addi	sp,sp,-20
    c828:	dcc00315 	stw	r19,12(sp)
    c82c:	dc800215 	stw	r18,8(sp)
    c830:	2827883a 	mov	r19,r5
    c834:	2025883a 	mov	r18,r4
    const double pmax = 0;
    double loss = pmax-gain;
    c838:	000b883a 	mov	r5,zero
    c83c:	0009883a 	mov	r4,zero
    self->regs->reg_0x0101_en_loopb_txpad_trf = enable?1:0;
    LMS7002M_regs_spi_write(self, 0x0101);
}

double LMS7002M_trf_set_pad(LMS7002M_t *self, const LMS7002M_chan_t channel, const double gain)
{
    c840:	dc400115 	stw	r17,4(sp)
    c844:	dc000015 	stw	r16,0(sp)
    c848:	dfc00415 	stw	ra,16(sp)
    const double pmax = 0;
    double loss = pmax-gain;
    c84c:	00277e00 	call	277e0 <__subdf3>

    //different scaling realm
    if (loss > 10) loss = (loss+10)/2;
    c850:	000d883a 	mov	r6,zero
    c854:	01d00934 	movhi	r7,16420
    c858:	1009883a 	mov	r4,r2
    c85c:	180b883a 	mov	r5,r3
}

double LMS7002M_trf_set_pad(LMS7002M_t *self, const LMS7002M_chan_t channel, const double gain)
{
    const double pmax = 0;
    double loss = pmax-gain;
    c860:	1023883a 	mov	r17,r2
    c864:	1821883a 	mov	r16,r3

    //different scaling realm
    if (loss > 10) loss = (loss+10)/2;
    c868:	0026da40 	call	26da4 <__gedf2>
    c86c:	00800c0e 	bge	zero,r2,c8a0 <LMS7002M_trf_set_pad+0x7c>
    c870:	8809883a 	mov	r4,r17
    c874:	800b883a 	mov	r5,r16
    c878:	000d883a 	mov	r6,zero
    c87c:	01d00934 	movhi	r7,16420
    c880:	0025aa00 	call	25aa0 <__adddf3>
    c884:	000d883a 	mov	r6,zero
    c888:	01cff834 	movhi	r7,16352
    c88c:	1009883a 	mov	r4,r2
    c890:	180b883a 	mov	r5,r3
    c894:	0026f740 	call	26f74 <__muldf3>
    c898:	1023883a 	mov	r17,r2
    c89c:	1821883a 	mov	r16,r3

    //clip
    if (loss > 31) loss = 31;
    c8a0:	000d883a 	mov	r6,zero
    c8a4:	01d00ff4 	movhi	r7,16447
    c8a8:	8809883a 	mov	r4,r17
    c8ac:	800b883a 	mov	r5,r16
    c8b0:	0026da40 	call	26da4 <__gedf2>
    c8b4:	00800916 	blt	zero,r2,c8dc <LMS7002M_trf_set_pad+0xb8>
    if (loss < 0) loss = 0;
    c8b8:	000d883a 	mov	r6,zero
    c8bc:	000f883a 	mov	r7,zero
    c8c0:	8809883a 	mov	r4,r17
    c8c4:	800b883a 	mov	r5,r16
    c8c8:	0026e800 	call	26e80 <__ledf2>
    c8cc:	1000050e 	bge	r2,zero,c8e4 <LMS7002M_trf_set_pad+0xc0>
    c8d0:	0023883a 	mov	r17,zero
    c8d4:	0021883a 	mov	r16,zero
    c8d8:	00000206 	br	c8e4 <LMS7002M_trf_set_pad+0xc0>

    //different scaling realm
    if (loss > 10) loss = (loss+10)/2;

    //clip
    if (loss > 31) loss = 31;
    c8dc:	0023883a 	mov	r17,zero
    c8e0:	04100ff4 	movhi	r16,16447
    if (loss < 0) loss = 0;

    //integer round
    int loss_int = (int)(loss + 0.5);
    c8e4:	000d883a 	mov	r6,zero
    c8e8:	01cff834 	movhi	r7,16352
    c8ec:	800b883a 	mov	r5,r16
    c8f0:	8809883a 	mov	r4,r17
    c8f4:	0025aa00 	call	25aa0 <__adddf3>
    c8f8:	180b883a 	mov	r5,r3
    c8fc:	1009883a 	mov	r4,r2
    c900:	00280dc0 	call	280dc <__fixdfsi>

    LMS7002M_set_mac_ch(self, channel);
    c904:	980b883a 	mov	r5,r19
    c908:	9009883a 	mov	r4,r18
    //clip
    if (loss > 31) loss = 31;
    if (loss < 0) loss = 0;

    //integer round
    int loss_int = (int)(loss + 0.5);
    c90c:	1021883a 	mov	r16,r2

    LMS7002M_set_mac_ch(self, channel);
    c910:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>
    self->regs->reg_0x0101_loss_lin_txpad_trf = loss_int;
    c914:	90846917 	ldw	r2,4516(r18)
    self->regs->reg_0x0101_loss_main_txpad_trf = loss_int;
    LMS7002M_regs_spi_write(self, 0x0101);
    c918:	01404044 	movi	r5,257
    c91c:	9009883a 	mov	r4,r18

    //integer round
    int loss_int = (int)(loss + 0.5);

    LMS7002M_set_mac_ch(self, channel);
    self->regs->reg_0x0101_loss_lin_txpad_trf = loss_int;
    c920:	14013d15 	stw	r16,1268(r2)
    self->regs->reg_0x0101_loss_main_txpad_trf = loss_int;
    c924:	14013e15 	stw	r16,1272(r2)
    LMS7002M_regs_spi_write(self, 0x0101);
    c928:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    if (loss_int > 10) return pmax-10-2*(loss_int-10);
    c92c:	00800284 	movi	r2,10
    c930:	1400080e 	bge	r2,r16,c954 <LMS7002M_trf_set_pad+0x130>
    c934:	813ffd84 	addi	r4,r16,-10
    c938:	2109883a 	add	r4,r4,r4
    c93c:	002815c0 	call	2815c <__floatsidf>
    c940:	100d883a 	mov	r6,r2
    c944:	180f883a 	mov	r7,r3
    c948:	0009883a 	mov	r4,zero
    c94c:	01700934 	movhi	r5,49188
    c950:	00000606 	br	c96c <LMS7002M_trf_set_pad+0x148>
    return pmax-loss_int;
    c954:	8009883a 	mov	r4,r16
    c958:	002815c0 	call	2815c <__floatsidf>
    c95c:	100d883a 	mov	r6,r2
    c960:	180f883a 	mov	r7,r3
    c964:	0009883a 	mov	r4,zero
    c968:	000b883a 	mov	r5,zero
    c96c:	00277e00 	call	277e0 <__subdf3>
}
    c970:	dfc00417 	ldw	ra,16(sp)
    c974:	dcc00317 	ldw	r19,12(sp)
    c978:	dc800217 	ldw	r18,8(sp)
    c97c:	dc400117 	ldw	r17,4(sp)
    c980:	dc000017 	ldw	r16,0(sp)
    c984:	dec00504 	addi	sp,sp,20
    c988:	f800283a 	ret

0000c98c <LMS7002M_trf_set_loopback_pad>:

double LMS7002M_trf_set_loopback_pad(LMS7002M_t *self, const LMS7002M_chan_t channel, const double gain)
{
    c98c:	defffa04 	addi	sp,sp,-24
    c990:	dc400115 	stw	r17,4(sp)
    c994:	dc000015 	stw	r16,0(sp)
    c998:	3023883a 	mov	r17,r6
    c99c:	3821883a 	mov	r16,r7
    //there are 4 discrete gain values, use the midpoints
    double actual = 0.0;
    int val = 0;
    if      (gain >= (-1.4-0)/2)   val = 0, actual = 0.0;
    c9a0:	019999b4 	movhi	r6,26214
    c9a4:	01eff9b4 	movhi	r7,49126
    if (loss_int > 10) return pmax-10-2*(loss_int-10);
    return pmax-loss_int;
}

double LMS7002M_trf_set_loopback_pad(LMS7002M_t *self, const LMS7002M_chan_t channel, const double gain)
{
    c9a8:	dd000415 	stw	r20,16(sp)
    c9ac:	dcc00315 	stw	r19,12(sp)
    c9b0:	2829883a 	mov	r20,r5
    c9b4:	2027883a 	mov	r19,r4
    //there are 4 discrete gain values, use the midpoints
    double actual = 0.0;
    int val = 0;
    if      (gain >= (-1.4-0)/2)   val = 0, actual = 0.0;
    c9b8:	31999984 	addi	r6,r6,26214
    c9bc:	39d99984 	addi	r7,r7,26214
    c9c0:	8809883a 	mov	r4,r17
    c9c4:	800b883a 	mov	r5,r16
    if (loss_int > 10) return pmax-10-2*(loss_int-10);
    return pmax-loss_int;
}

double LMS7002M_trf_set_loopback_pad(LMS7002M_t *self, const LMS7002M_chan_t channel, const double gain)
{
    c9c8:	dfc00515 	stw	ra,20(sp)
    c9cc:	dc800215 	stw	r18,8(sp)
    //there are 4 discrete gain values, use the midpoints
    double actual = 0.0;
    int val = 0;
    if      (gain >= (-1.4-0)/2)   val = 0, actual = 0.0;
    c9d0:	0026da40 	call	26da4 <__gedf2>
    c9d4:	1000160e 	bge	r2,zero,ca30 <LMS7002M_trf_set_loopback_pad+0xa4>
    else if (gain >= (-1.4-3.3)/2) val = 1, actual = -1.4;
    c9d8:	01b33374 	movhi	r6,52429
    c9dc:	01f000f4 	movhi	r7,49155
    c9e0:	31b33304 	addi	r6,r6,-13108
    c9e4:	39f33304 	addi	r7,r7,-13108
    c9e8:	8809883a 	mov	r4,r17
    c9ec:	800b883a 	mov	r5,r16
    c9f0:	0026da40 	call	26da4 <__gedf2>
    c9f4:	1000120e 	bge	r2,zero,ca40 <LMS7002M_trf_set_loopback_pad+0xb4>
    else if (gain >= (-3.3-4.3)/2) val = 2, actual = -3.3;
    c9f8:	019999b4 	movhi	r6,26214
    c9fc:	01f003b4 	movhi	r7,49166
    ca00:	31999984 	addi	r6,r6,26214
    ca04:	39d99984 	addi	r7,r7,26214
    ca08:	8809883a 	mov	r4,r17
    ca0c:	800b883a 	mov	r5,r16
    ca10:	0026da40 	call	26da4 <__gedf2>
    ca14:	10000f0e 	bge	r2,zero,ca54 <LMS7002M_trf_set_loopback_pad+0xc8>
    else                           val = 3, actual = -4.3;
    ca18:	044cccf4 	movhi	r17,13107
    ca1c:	04300474 	movhi	r16,49169
    ca20:	048000c4 	movi	r18,3
    ca24:	8c4cccc4 	addi	r17,r17,13107
    ca28:	840cccc4 	addi	r16,r16,13107
    ca2c:	00000e06 	br	ca68 <LMS7002M_trf_set_loopback_pad+0xdc>
double LMS7002M_trf_set_loopback_pad(LMS7002M_t *self, const LMS7002M_chan_t channel, const double gain)
{
    //there are 4 discrete gain values, use the midpoints
    double actual = 0.0;
    int val = 0;
    if      (gain >= (-1.4-0)/2)   val = 0, actual = 0.0;
    ca30:	0025883a 	mov	r18,zero
    ca34:	0023883a 	mov	r17,zero
    ca38:	0021883a 	mov	r16,zero
    ca3c:	00000a06 	br	ca68 <LMS7002M_trf_set_loopback_pad+0xdc>
    else if (gain >= (-1.4-3.3)/2) val = 1, actual = -1.4;
    ca40:	045999b4 	movhi	r17,26214
    ca44:	04800044 	movi	r18,1
    ca48:	8c599984 	addi	r17,r17,26214
    ca4c:	042ffdb4 	movhi	r16,49142
    ca50:	00000406 	br	ca64 <LMS7002M_trf_set_loopback_pad+0xd8>
    else if (gain >= (-3.3-4.3)/2) val = 2, actual = -3.3;
    ca54:	045999b4 	movhi	r17,26214
    ca58:	04800084 	movi	r18,2
    ca5c:	8c599984 	addi	r17,r17,26214
    ca60:	043002b4 	movhi	r16,49162
    ca64:	84199984 	addi	r16,r16,26214
    else                           val = 3, actual = -4.3;

    LMS7002M_set_mac_ch(self, channel);
    ca68:	a00b883a 	mov	r5,r20
    ca6c:	9809883a 	mov	r4,r19
    ca70:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>
    self->regs->reg_0x0101_l_loopb_txpad_trf = val;
    ca74:	98846917 	ldw	r2,4516(r19)
    LMS7002M_regs_spi_write(self, 0x0101);
    ca78:	01404044 	movi	r5,257
    ca7c:	9809883a 	mov	r4,r19
    else if (gain >= (-1.4-3.3)/2) val = 1, actual = -1.4;
    else if (gain >= (-3.3-4.3)/2) val = 2, actual = -3.3;
    else                           val = 3, actual = -4.3;

    LMS7002M_set_mac_ch(self, channel);
    self->regs->reg_0x0101_l_loopb_txpad_trf = val;
    ca80:	14813c15 	stw	r18,1264(r2)
    LMS7002M_regs_spi_write(self, 0x0101);
    ca84:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    return actual;
}
    ca88:	8805883a 	mov	r2,r17
    ca8c:	8007883a 	mov	r3,r16
    ca90:	dfc00517 	ldw	ra,20(sp)
    ca94:	dd000417 	ldw	r20,16(sp)
    ca98:	dcc00317 	ldw	r19,12(sp)
    ca9c:	dc800217 	ldw	r18,8(sp)
    caa0:	dc400117 	ldw	r17,4(sp)
    caa4:	dc000017 	ldw	r16,0(sp)
    caa8:	dec00604 	addi	sp,sp,24
    caac:	f800283a 	ret

0000cab0 <setup_tx_cal_tone>:

/***********************************************************************
 * Re-tune the CORDICs based on the bandwidth
 **********************************************************************/
static void setup_tx_cal_tone(LMS7002M_t *self, const LMS7002M_chan_t channel, const double bw)
{
    cab0:	defffb04 	addi	sp,sp,-20
    cab4:	dfc00415 	stw	ra,16(sp)
    cab8:	dcc00315 	stw	r19,12(sp)
    cabc:	dc800215 	stw	r18,8(sp)
    cac0:	3027883a 	mov	r19,r6
    cac4:	3825883a 	mov	r18,r7
    cac8:	dc400115 	stw	r17,4(sp)
    cacc:	dc000015 	stw	r16,0(sp)
    cad0:	2823883a 	mov	r17,r5
    cad4:	2021883a 	mov	r16,r4
    LMS7002M_set_mac_ch(self, channel);
    cad8:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>
    const double txtsp_rate = self->cgen_freq;
    const double tx_nco_freq = bw;
    LMS7002M_txtsp_set_freq(self, channel, tx_nco_freq/txtsp_rate);
    cadc:	81846a17 	ldw	r6,4520(r16)
    cae0:	81c46b17 	ldw	r7,4524(r16)
    cae4:	9809883a 	mov	r4,r19
    cae8:	900b883a 	mov	r5,r18
    caec:	002634c0 	call	2634c <__divdf3>
    caf0:	100d883a 	mov	r6,r2
    caf4:	180f883a 	mov	r7,r3
    caf8:	880b883a 	mov	r5,r17
    cafc:	8009883a 	mov	r4,r16
    cb00:	000dad80 	call	dad8 <LMS7002M_txtsp_set_freq>

    const double rxtsp_rate = self->cgen_freq/4;
    const double rx_nco_freq = tx_nco_freq-1e6;
    LMS7002M_rxtsp_set_freq(self, channel, rx_nco_freq/rxtsp_rate);
    cb04:	01d04bf4 	movhi	r7,16687
    cb08:	9809883a 	mov	r4,r19
    cb0c:	900b883a 	mov	r5,r18
    cb10:	000d883a 	mov	r6,zero
    cb14:	39e12004 	addi	r7,r7,-31616
    cb18:	00277e00 	call	277e0 <__subdf3>
    cb1c:	81046a17 	ldw	r4,4520(r16)
    cb20:	81446b17 	ldw	r5,4524(r16)
    cb24:	000d883a 	mov	r6,zero
    cb28:	01cff434 	movhi	r7,16336
    cb2c:	1027883a 	mov	r19,r2
    cb30:	1825883a 	mov	r18,r3
    cb34:	0026f740 	call	26f74 <__muldf3>
    cb38:	9809883a 	mov	r4,r19
    cb3c:	900b883a 	mov	r5,r18
    cb40:	100d883a 	mov	r6,r2
    cb44:	180f883a 	mov	r7,r3
    cb48:	002634c0 	call	2634c <__divdf3>
    cb4c:	100d883a 	mov	r6,r2
    cb50:	180f883a 	mov	r7,r3
    cb54:	880b883a 	mov	r5,r17
    cb58:	8009883a 	mov	r4,r16
}
    cb5c:	dfc00417 	ldw	ra,16(sp)
    cb60:	dcc00317 	ldw	r19,12(sp)
    cb64:	dc800217 	ldw	r18,8(sp)
    cb68:	dc400117 	ldw	r17,4(sp)
    cb6c:	dc000017 	ldw	r16,0(sp)
    cb70:	dec00504 	addi	sp,sp,20
    const double tx_nco_freq = bw;
    LMS7002M_txtsp_set_freq(self, channel, tx_nco_freq/txtsp_rate);

    const double rxtsp_rate = self->cgen_freq/4;
    const double rx_nco_freq = tx_nco_freq-1e6;
    LMS7002M_rxtsp_set_freq(self, channel, rx_nco_freq/rxtsp_rate);
    cb74:	000b7881 	jmpi	b788 <LMS7002M_rxtsp_set_freq>

0000cb78 <tx_cal_loop.isra.0.constprop.1>:
}

/***********************************************************************
 * Tx calibration loop
 **********************************************************************/
static int tx_cal_loop(
    cb78:	defff404 	addi	sp,sp,-48
    cb7c:	dfc00b15 	stw	ra,44(sp)
    cb80:	dd800815 	stw	r22,32(sp)
    cb84:	dd000615 	stw	r20,24(sp)
    cb88:	dcc00515 	stw	r19,20(sp)
    cb8c:	dc800415 	stw	r18,16(sp)
    cb90:	dc400315 	stw	r17,12(sp)
    cb94:	2825883a 	mov	r18,r5
    cb98:	dc000215 	stw	r16,8(sp)
    LMS7002M_t *self, const LMS7002M_chan_t channel, const double bw,
    int *reg_ptr, const int reg_addr, const int reg_max, const char *reg_name)
{
    LMS7002M_set_mac_ch(self, channel);
    cb9c:	d9800015 	stw	r6,0(sp)
}

/***********************************************************************
 * Tx calibration loop
 **********************************************************************/
static int tx_cal_loop(
    cba0:	2021883a 	mov	r16,r4
    LMS7002M_t *self, const LMS7002M_chan_t channel, const double bw,
    int *reg_ptr, const int reg_addr, const int reg_max, const char *reg_name)
{
    LMS7002M_set_mac_ch(self, channel);
    cba4:	d9c00115 	stw	r7,4(sp)
}

/***********************************************************************
 * Tx calibration loop
 **********************************************************************/
static int tx_cal_loop(
    cba8:	df000a15 	stw	fp,40(sp)
    cbac:	ddc00915 	stw	r23,36(sp)
    cbb0:	dd400715 	stw	r21,28(sp)
    cbb4:	dd800c17 	ldw	r22,48(sp)
    LMS7002M_t *self, const LMS7002M_chan_t channel, const double bw,
    int *reg_ptr, const int reg_addr, const int reg_max, const char *reg_name)
{
    LMS7002M_set_mac_ch(self, channel);
    cbb8:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    //--- cgen already set prior ---//

    //--- gain selection ---//
    const int rssi_value_50k = cal_gain_selection(self, channel);
    cbbc:	900b883a 	mov	r5,r18
    cbc0:	8009883a 	mov	r4,r16
    cbc4:	00034500 	call	3450 <cal_gain_selection>

    //--- setup calibration tone ---//
    setup_tx_cal_tone(self, channel, bw);
    cbc8:	d9800017 	ldw	r6,0(sp)
    cbcc:	d9c00117 	ldw	r7,4(sp)
    cbd0:	900b883a 	mov	r5,r18
    cbd4:	8009883a 	mov	r4,r16
    LMS7002M_set_mac_ch(self, channel);

    //--- cgen already set prior ---//

    //--- gain selection ---//
    const int rssi_value_50k = cal_gain_selection(self, channel);
    cbd8:	1027883a 	mov	r19,r2

    //--- setup calibration tone ---//
    setup_tx_cal_tone(self, channel, bw);
    cbdc:	000cab00 	call	cab0 <setup_tx_cal_tone>

    //--- calibration loop ---//
    size_t iter = 0;
    uint16_t rssi_value = cal_read_rssi(self, channel);
    cbe0:	900b883a 	mov	r5,r18
    cbe4:	8009883a 	mov	r4,r16
    cbe8:	00010e80 	call	10e8 <cal_read_rssi>
    int adjust = (rssi_value < rssi_value_50k*0.7071)?-1:+1;
    cbec:	9809883a 	mov	r4,r19
    //--- setup calibration tone ---//
    setup_tx_cal_tone(self, channel, bw);

    //--- calibration loop ---//
    size_t iter = 0;
    uint16_t rssi_value = cal_read_rssi(self, channel);
    cbf0:	1023883a 	mov	r17,r2
    int adjust = (rssi_value < rssi_value_50k*0.7071)?-1:+1;
    cbf4:	002815c0 	call	2815c <__floatsidf>
    cbf8:	018b7834 	movhi	r6,11744
    cbfc:	01cff9f4 	movhi	r7,16359
    cc00:	318346c4 	addi	r6,r6,3355
    cc04:	39e82404 	addi	r7,r7,-24432
    cc08:	180b883a 	mov	r5,r3
    cc0c:	1009883a 	mov	r4,r2
    cc10:	0026f740 	call	26f74 <__muldf3>
    cc14:	893fffcc 	andi	r4,r17,65535
    cc18:	1027883a 	mov	r19,r2
    cc1c:	1829883a 	mov	r20,r3
    cc20:	002815c0 	call	2815c <__floatsidf>
    cc24:	980d883a 	mov	r6,r19
    cc28:	a00f883a 	mov	r7,r20
    cc2c:	1009883a 	mov	r4,r2
    cc30:	180b883a 	mov	r5,r3
    cc34:	0026e800 	call	26e80 <__ledf2>
    cc38:	10000216 	blt	r2,zero,cc44 <tx_cal_loop.isra.0.constprop.1+0xcc>
    cc3c:	04400044 	movi	r17,1
    cc40:	00000106 	br	cc48 <tx_cal_loop.isra.0.constprop.1+0xd0>
    cc44:	047fffc4 	movi	r17,-1
            //LMS7_logf(LMS7_ERROR, "failed to cal %s -> %d", reg_name, *reg_ptr);
            return -1;
        }

        rssi_value = cal_read_rssi(self, channel);
        adjust = (rssi_value < rssi_value_50k*0.7071)?-1:+1;
    cc48:	05408044 	movi	r21,513
        LMS7002M_regs_spi_write(self, 0x010a);

        rssi_value = cal_read_rssi(self, channel);
        if (rssi_value > rssi_value_50k*0.7071 && adjust < 0) break;
        if (rssi_value < rssi_value_50k*0.7071 && adjust > 0) break;
        if (LMS7002M_regs(self)->reg_0x010a_ccal_lpflad_tbb != 0 &&
    cc4c:	05c007c4 	movi	r23,31
            LMS7002M_regs(self)->reg_0x010a_ccal_lpflad_tbb != 31) continue;

        *reg_ptr -= adjust*5;
        LMS7002M_regs(self)->reg_0x010a_ccal_lpflad_tbb = 16;
    cc50:	07000404 	movi	fp,16
    cc54:	ad7fffc4 	addi	r21,r21,-1
    size_t iter = 0;
    uint16_t rssi_value = cal_read_rssi(self, channel);
    int adjust = (rssi_value < rssi_value_50k*0.7071)?-1:+1;
    while (true)
    {
        if (iter++ == MAX_CAL_LOOP_ITERS)
    cc58:	a8004c26 	beq	r21,zero,cd8c <tx_cal_loop.isra.0.constprop.1+0x214>
        {
            //LMS7_logf(LMS7_ERROR, "failed to converge when calibrating %s", reg_name);
            return -1;
        }

        LMS7002M_regs(self)->reg_0x010a_ccal_lpflad_tbb += adjust;
    cc5c:	8009883a 	mov	r4,r16
    cc60:	0008ac80 	call	8ac8 <LMS7002M_regs>
    cc64:	10c15e17 	ldw	r3,1400(r2)
        LMS7002M_regs_spi_write(self, 0x010a);
    cc68:	01404284 	movi	r5,266
    cc6c:	8009883a 	mov	r4,r16
        {
            //LMS7_logf(LMS7_ERROR, "failed to converge when calibrating %s", reg_name);
            return -1;
        }

        LMS7002M_regs(self)->reg_0x010a_ccal_lpflad_tbb += adjust;
    cc70:	1c47883a 	add	r3,r3,r17
    cc74:	10c15e15 	stw	r3,1400(r2)
        LMS7002M_regs_spi_write(self, 0x010a);
    cc78:	00063000 	call	6300 <LMS7002M_regs_spi_write>

        rssi_value = cal_read_rssi(self, channel);
    cc7c:	900b883a 	mov	r5,r18
    cc80:	8009883a 	mov	r4,r16
    cc84:	00010e80 	call	10e8 <cal_read_rssi>
        if (rssi_value > rssi_value_50k*0.7071 && adjust < 0) break;
    cc88:	113fffcc 	andi	r4,r2,65535
    cc8c:	002815c0 	call	2815c <__floatsidf>
    cc90:	180f883a 	mov	r7,r3
    cc94:	100d883a 	mov	r6,r2
    cc98:	9809883a 	mov	r4,r19
    cc9c:	a00b883a 	mov	r5,r20
    cca0:	d8c00115 	stw	r3,4(sp)
    cca4:	d8800015 	stw	r2,0(sp)
    cca8:	0026e800 	call	26e80 <__ledf2>
    ccac:	d8c00117 	ldw	r3,4(sp)
    ccb0:	da000017 	ldw	r8,0(sp)
    ccb4:	1000020e 	bge	r2,zero,ccc0 <tx_cal_loop.isra.0.constprop.1+0x148>
    ccb8:	00bfffc4 	movi	r2,-1
    ccbc:	88803526 	beq	r17,r2,cd94 <tx_cal_loop.isra.0.constprop.1+0x21c>
        if (rssi_value < rssi_value_50k*0.7071 && adjust > 0) break;
    ccc0:	400d883a 	mov	r6,r8
    ccc4:	180f883a 	mov	r7,r3
    ccc8:	9809883a 	mov	r4,r19
    cccc:	a00b883a 	mov	r5,r20
    ccd0:	0026da40 	call	26da4 <__gedf2>
    ccd4:	0080020e 	bge	zero,r2,cce0 <tx_cal_loop.isra.0.constprop.1+0x168>
    ccd8:	00800044 	movi	r2,1
    ccdc:	88802d26 	beq	r17,r2,cd94 <tx_cal_loop.isra.0.constprop.1+0x21c>
        if (LMS7002M_regs(self)->reg_0x010a_ccal_lpflad_tbb != 0 &&
    cce0:	8009883a 	mov	r4,r16
    cce4:	0008ac80 	call	8ac8 <LMS7002M_regs>
    cce8:	10815e17 	ldw	r2,1400(r2)
    ccec:	1000131e 	bne	r2,zero,cd3c <tx_cal_loop.isra.0.constprop.1+0x1c4>
            LMS7002M_regs(self)->reg_0x010a_ccal_lpflad_tbb != 31) continue;

        *reg_ptr -= adjust*5;
    ccf0:	017ffec4 	movi	r5,-5
    ccf4:	8809883a 	mov	r4,r17
    ccf8:	002587c0 	call	2587c <__mulsi3>
    ccfc:	b0c00017 	ldw	r3,0(r22)
        LMS7002M_regs(self)->reg_0x010a_ccal_lpflad_tbb = 16;
    cd00:	8009883a 	mov	r4,r16
        if (rssi_value > rssi_value_50k*0.7071 && adjust < 0) break;
        if (rssi_value < rssi_value_50k*0.7071 && adjust > 0) break;
        if (LMS7002M_regs(self)->reg_0x010a_ccal_lpflad_tbb != 0 &&
            LMS7002M_regs(self)->reg_0x010a_ccal_lpflad_tbb != 31) continue;

        *reg_ptr -= adjust*5;
    cd04:	1885883a 	add	r2,r3,r2
    cd08:	b0800015 	stw	r2,0(r22)
        LMS7002M_regs(self)->reg_0x010a_ccal_lpflad_tbb = 16;
    cd0c:	0008ac80 	call	8ac8 <LMS7002M_regs>
    cd10:	17015e15 	stw	fp,1400(r2)
        LMS7002M_regs_spi_write(self, 0x010a);
    cd14:	01404284 	movi	r5,266
    cd18:	8009883a 	mov	r4,r16
    cd1c:	00063000 	call	6300 <LMS7002M_regs_spi_write>
        LMS7002M_regs_spi_write(self, reg_addr);
    cd20:	d9400d17 	ldw	r5,52(sp)
    cd24:	8009883a 	mov	r4,r16
    cd28:	00063000 	call	6300 <LMS7002M_regs_spi_write>

        if (*reg_ptr < 0 || *reg_ptr > reg_max)
    cd2c:	b0800017 	ldw	r2,0(r22)
    cd30:	00c03fc4 	movi	r3,255
    cd34:	1880062e 	bgeu	r3,r2,cd50 <tx_cal_loop.isra.0.constprop.1+0x1d8>
    cd38:	00001406 	br	cd8c <tx_cal_loop.isra.0.constprop.1+0x214>

        rssi_value = cal_read_rssi(self, channel);
        if (rssi_value > rssi_value_50k*0.7071 && adjust < 0) break;
        if (rssi_value < rssi_value_50k*0.7071 && adjust > 0) break;
        if (LMS7002M_regs(self)->reg_0x010a_ccal_lpflad_tbb != 0 &&
            LMS7002M_regs(self)->reg_0x010a_ccal_lpflad_tbb != 31) continue;
    cd3c:	8009883a 	mov	r4,r16
    cd40:	0008ac80 	call	8ac8 <LMS7002M_regs>
        LMS7002M_regs_spi_write(self, 0x010a);

        rssi_value = cal_read_rssi(self, channel);
        if (rssi_value > rssi_value_50k*0.7071 && adjust < 0) break;
        if (rssi_value < rssi_value_50k*0.7071 && adjust > 0) break;
        if (LMS7002M_regs(self)->reg_0x010a_ccal_lpflad_tbb != 0 &&
    cd44:	10815e17 	ldw	r2,1400(r2)
    cd48:	15ffc21e 	bne	r2,r23,cc54 <__alt_data_end+0xfffce454>
    cd4c:	003fe806 	br	ccf0 <__alt_data_end+0xfffce4f0>
        {
            //LMS7_logf(LMS7_ERROR, "failed to cal %s -> %d", reg_name, *reg_ptr);
            return -1;
        }

        rssi_value = cal_read_rssi(self, channel);
    cd50:	900b883a 	mov	r5,r18
    cd54:	8009883a 	mov	r4,r16
    cd58:	00010e80 	call	10e8 <cal_read_rssi>
        adjust = (rssi_value < rssi_value_50k*0.7071)?-1:+1;
    cd5c:	113fffcc 	andi	r4,r2,65535
    cd60:	002815c0 	call	2815c <__floatsidf>
    cd64:	100d883a 	mov	r6,r2
    cd68:	180f883a 	mov	r7,r3
    cd6c:	9809883a 	mov	r4,r19
    cd70:	a00b883a 	mov	r5,r20
    cd74:	0026da40 	call	26da4 <__gedf2>
    cd78:	0080020e 	bge	zero,r2,cd84 <tx_cal_loop.isra.0.constprop.1+0x20c>
    cd7c:	047fffc4 	movi	r17,-1
    cd80:	003fb406 	br	cc54 <__alt_data_end+0xfffce454>
    cd84:	04400044 	movi	r17,1
    cd88:	003fb206 	br	cc54 <__alt_data_end+0xfffce454>
    while (true)
    {
        if (iter++ == MAX_CAL_LOOP_ITERS)
        {
            //LMS7_logf(LMS7_ERROR, "failed to converge when calibrating %s", reg_name);
            return -1;
    cd8c:	00bfffc4 	movi	r2,-1
    cd90:	00000106 	br	cd98 <tx_cal_loop.isra.0.constprop.1+0x220>
        rssi_value = cal_read_rssi(self, channel);
        adjust = (rssi_value < rssi_value_50k*0.7071)?-1:+1;
    }
    //LMS7_logf(LMS7_DEBUG, "%s = %d", reg_name, *reg_ptr);
    //LMS7_logf(LMS7_DEBUG, "ccal_lpflad_tbb = %d", LMS7002M_regs(self)->reg_0x010a_ccal_lpflad_tbb);
    return 0;
    cd94:	0005883a 	mov	r2,zero
}
    cd98:	dfc00b17 	ldw	ra,44(sp)
    cd9c:	df000a17 	ldw	fp,40(sp)
    cda0:	ddc00917 	ldw	r23,36(sp)
    cda4:	dd800817 	ldw	r22,32(sp)
    cda8:	dd400717 	ldw	r21,28(sp)
    cdac:	dd000617 	ldw	r20,24(sp)
    cdb0:	dcc00517 	ldw	r19,20(sp)
    cdb4:	dc800417 	ldw	r18,16(sp)
    cdb8:	dc400317 	ldw	r17,12(sp)
    cdbc:	dc000217 	ldw	r16,8(sp)
    cdc0:	dec00c04 	addi	sp,sp,48
    cdc4:	f800283a 	ret

0000cdc8 <tx_cal_init>:

/***********************************************************************
 * Prepare for TX filter self-calibration
 **********************************************************************/
int tx_cal_init(LMS7002M_t *self, const LMS7002M_chan_t channel)
{
    cdc8:	defff904 	addi	sp,sp,-28
    cdcc:	dfc00615 	stw	ra,24(sp)
    cdd0:	dd400515 	stw	r21,20(sp)
    cdd4:	dd000415 	stw	r20,16(sp)
    cdd8:	dcc00315 	stw	r19,12(sp)
    cddc:	dc800215 	stw	r18,8(sp)
    cde0:	dc400115 	stw	r17,4(sp)
    cde4:	2825883a 	mov	r18,r5
    cde8:	dc000015 	stw	r16,0(sp)
    cdec:	2021883a 	mov	r16,r4
    int status = 0;
    LMS7002M_set_mac_ch(self, channel);
    cdf0:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    //--- rfe ---
    LMS7002M_regs(self)->reg_0x010c_en_g_rfe = 0;
    cdf4:	8009883a 	mov	r4,r16
    cdf8:	0008ac80 	call	8ac8 <LMS7002M_regs>
    cdfc:	10016a15 	stw	zero,1448(r2)
    LMS7002M_regs_spi_write(self, 0x010c);
    ce00:	8009883a 	mov	r4,r16
    ce04:	01404304 	movi	r5,268
    ce08:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    //--- rbb ---
    set_addrs_to_default(self, channel, 0x0115, 0x011B);
    ce0c:	04c04544 	movi	r19,277
    ce10:	980d883a 	mov	r6,r19
    ce14:	01c046c4 	movi	r7,283
    ce18:	900b883a 	mov	r5,r18
    ce1c:	8009883a 	mov	r4,r16
    ce20:	00011400 	call	1140 <set_addrs_to_default>
    LMS7002M_regs(self)->reg_0x0115_pd_lpfl_rbb = 1;
    ce24:	8009883a 	mov	r4,r16
    ce28:	04400044 	movi	r17,1
    ce2c:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs(self)->reg_0x0118_input_ctl_pga_rbb = 3;
    ce30:	8009883a 	mov	r4,r16
    LMS7002M_regs(self)->reg_0x010c_en_g_rfe = 0;
    LMS7002M_regs_spi_write(self, 0x010c);

    //--- rbb ---
    set_addrs_to_default(self, channel, 0x0115, 0x011B);
    LMS7002M_regs(self)->reg_0x0115_pd_lpfl_rbb = 1;
    ce34:	14418615 	stw	r17,1560(r2)
    LMS7002M_regs(self)->reg_0x0118_input_ctl_pga_rbb = 3;
    ce38:	0008ac80 	call	8ac8 <LMS7002M_regs>
    ce3c:	050000c4 	movi	r20,3
    LMS7002M_regs(self)->reg_0x0119_ict_pga_out_rbb = 20;
    ce40:	8009883a 	mov	r4,r16
    LMS7002M_regs_spi_write(self, 0x010c);

    //--- rbb ---
    set_addrs_to_default(self, channel, 0x0115, 0x011B);
    LMS7002M_regs(self)->reg_0x0115_pd_lpfl_rbb = 1;
    LMS7002M_regs(self)->reg_0x0118_input_ctl_pga_rbb = 3;
    ce44:	15018e15 	stw	r20,1592(r2)
    LMS7002M_regs(self)->reg_0x0119_ict_pga_out_rbb = 20;
    ce48:	0008ac80 	call	8ac8 <LMS7002M_regs>
    ce4c:	05400504 	movi	r21,20
    LMS7002M_regs(self)->reg_0x0119_ict_pga_in_rbb = 20;
    ce50:	8009883a 	mov	r4,r16

    //--- rbb ---
    set_addrs_to_default(self, channel, 0x0115, 0x011B);
    LMS7002M_regs(self)->reg_0x0115_pd_lpfl_rbb = 1;
    LMS7002M_regs(self)->reg_0x0118_input_ctl_pga_rbb = 3;
    LMS7002M_regs(self)->reg_0x0119_ict_pga_out_rbb = 20;
    ce54:	15419215 	stw	r21,1608(r2)
    LMS7002M_regs(self)->reg_0x0119_ict_pga_in_rbb = 20;
    ce58:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs(self)->reg_0x011a_c_ctl_pga_rbb = 3;
    ce5c:	8009883a 	mov	r4,r16
    //--- rbb ---
    set_addrs_to_default(self, channel, 0x0115, 0x011B);
    LMS7002M_regs(self)->reg_0x0115_pd_lpfl_rbb = 1;
    LMS7002M_regs(self)->reg_0x0118_input_ctl_pga_rbb = 3;
    LMS7002M_regs(self)->reg_0x0119_ict_pga_out_rbb = 20;
    LMS7002M_regs(self)->reg_0x0119_ict_pga_in_rbb = 20;
    ce60:	15419315 	stw	r21,1612(r2)
    LMS7002M_regs(self)->reg_0x011a_c_ctl_pga_rbb = 3;
    ce64:	0008ac80 	call	8ac8 <LMS7002M_regs>
    ce68:	15019615 	stw	r20,1624(r2)
    LMS7002M_regs_spi_write(self, 0x0115);
    ce6c:	980b883a 	mov	r5,r19
    ce70:	8009883a 	mov	r4,r16
    ce74:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x0118);
    ce78:	8009883a 	mov	r4,r16
    ce7c:	01404604 	movi	r5,280
    ce80:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x0119);
    ce84:	8009883a 	mov	r4,r16
    ce88:	01404644 	movi	r5,281
    ce8c:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x011a);
    ce90:	01404684 	movi	r5,282
    ce94:	8009883a 	mov	r4,r16
    ce98:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    //--- trf ---
    LMS7002M_regs(self)->reg_0x0100_en_g_trf = 0;
    ce9c:	8009883a 	mov	r4,r16
    cea0:	0008ac80 	call	8ac8 <LMS7002M_regs>
    cea4:	10013a15 	stw	zero,1256(r2)
    LMS7002M_regs_spi_write(self, 0x0100);
    cea8:	8009883a 	mov	r4,r16
    ceac:	01404004 	movi	r5,256
    ceb0:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    //--- tbb ---
    set_addrs_to_default(self, channel, 0x0105, 0x010B);
    ceb4:	01c042c4 	movi	r7,267
    ceb8:	01804144 	movi	r6,261
    cebc:	900b883a 	mov	r5,r18
    cec0:	8009883a 	mov	r4,r16
    cec4:	00011400 	call	1140 <set_addrs_to_default>
    LMS7002M_regs(self)->reg_0x0108_cg_iamp_tbb = 1;
    cec8:	8009883a 	mov	r4,r16
    cecc:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs(self)->reg_0x0108_ict_iamp_frp_tbb = 1;
    ced0:	8009883a 	mov	r4,r16
    LMS7002M_regs(self)->reg_0x0100_en_g_trf = 0;
    LMS7002M_regs_spi_write(self, 0x0100);

    //--- tbb ---
    set_addrs_to_default(self, channel, 0x0105, 0x010B);
    LMS7002M_regs(self)->reg_0x0108_cg_iamp_tbb = 1;
    ced4:	14415715 	stw	r17,1372(r2)
    LMS7002M_regs(self)->reg_0x0108_ict_iamp_frp_tbb = 1;
    ced8:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs(self)->reg_0x0108_ict_iamp_gg_frp_tbb = 6;
    cedc:	8009883a 	mov	r4,r16
    LMS7002M_regs_spi_write(self, 0x0100);

    //--- tbb ---
    set_addrs_to_default(self, channel, 0x0105, 0x010B);
    LMS7002M_regs(self)->reg_0x0108_cg_iamp_tbb = 1;
    LMS7002M_regs(self)->reg_0x0108_ict_iamp_frp_tbb = 1;
    cee0:	14415815 	stw	r17,1376(r2)
    LMS7002M_regs(self)->reg_0x0108_ict_iamp_gg_frp_tbb = 6;
    cee4:	0008ac80 	call	8ac8 <LMS7002M_regs>
    cee8:	00c00184 	movi	r3,6
    ceec:	10c15915 	stw	r3,1380(r2)
    LMS7002M_regs_spi_write(self, 0x0108);
    cef0:	8009883a 	mov	r4,r16
    cef4:	01404204 	movi	r5,264
    cef8:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    //--- afe ---
    LMS7002M_afe_enable(self, LMS_RX, channel, true);
    cefc:	880f883a 	mov	r7,r17
    cf00:	900d883a 	mov	r6,r18
    cf04:	8009883a 	mov	r4,r16
    cf08:	01400084 	movi	r5,2
    cf0c:	0000c580 	call	c58 <LMS7002M_afe_enable>
    LMS7002M_afe_enable(self, LMS_TX, channel, true);
    cf10:	880f883a 	mov	r7,r17
    cf14:	900d883a 	mov	r6,r18
    cf18:	880b883a 	mov	r5,r17
    cf1c:	8009883a 	mov	r4,r16
    cf20:	0000c580 	call	c58 <LMS7002M_afe_enable>
    LMS7002M_set_mac_ch(self, channel);
    cf24:	900b883a 	mov	r5,r18
    cf28:	8009883a 	mov	r4,r16
    cf2c:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    //--- bias -- must write to chA ---//
    LMS7002M_set_mac_ch(self, LMS_CHA);
    cf30:	01401044 	movi	r5,65
    cf34:	8009883a 	mov	r4,r16
    cf38:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>
    const int rp_calib_bias = LMS7002M_regs(self)->reg_0x0084_rp_calib_bias;
    cf3c:	8009883a 	mov	r4,r16
    cf40:	0008ac80 	call	8ac8 <LMS7002M_regs>
    set_addrs_to_default(self, channel, 0x0083, 0x0084);
    cf44:	01c02104 	movi	r7,132
    cf48:	018020c4 	movi	r6,131
    cf4c:	900b883a 	mov	r5,r18
    cf50:	8009883a 	mov	r4,r16
    LMS7002M_afe_enable(self, LMS_TX, channel, true);
    LMS7002M_set_mac_ch(self, channel);

    //--- bias -- must write to chA ---//
    LMS7002M_set_mac_ch(self, LMS_CHA);
    const int rp_calib_bias = LMS7002M_regs(self)->reg_0x0084_rp_calib_bias;
    cf54:	14c06b17 	ldw	r19,428(r2)
    set_addrs_to_default(self, channel, 0x0083, 0x0084);
    cf58:	00011400 	call	1140 <set_addrs_to_default>
    LMS7002M_regs(self)->reg_0x0084_rp_calib_bias = rp_calib_bias;
    cf5c:	8009883a 	mov	r4,r16
    cf60:	0008ac80 	call	8ac8 <LMS7002M_regs>
    cf64:	14c06b15 	stw	r19,428(r2)
    LMS7002M_set_mac_ch(self, channel);
    cf68:	900b883a 	mov	r5,r18
    cf6c:	8009883a 	mov	r4,r16
    cf70:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    //--- TxTSP ---
    set_addrs_to_default(self, channel, 0x0200, 0x020c);
    cf74:	04c08004 	movi	r19,512
    cf78:	980d883a 	mov	r6,r19
    cf7c:	01c08304 	movi	r7,524
    cf80:	900b883a 	mov	r5,r18
    cf84:	8009883a 	mov	r4,r16
    cf88:	00011400 	call	1140 <set_addrs_to_default>
    LMS7002M_regs(self)->reg_0x0200_tsgmode = 1;
    cf8c:	8009883a 	mov	r4,r16
    cf90:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs(self)->reg_0x0200_insel = 1;
    cf94:	8009883a 	mov	r4,r16
    LMS7002M_regs(self)->reg_0x0084_rp_calib_bias = rp_calib_bias;
    LMS7002M_set_mac_ch(self, channel);

    //--- TxTSP ---
    set_addrs_to_default(self, channel, 0x0200, 0x020c);
    LMS7002M_regs(self)->reg_0x0200_tsgmode = 1;
    cf98:	1441ce15 	stw	r17,1848(r2)
    LMS7002M_regs(self)->reg_0x0200_insel = 1;
    cf9c:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs(self)->reg_0x0208_gfir3_byp = 1;
    cfa0:	8009883a 	mov	r4,r16
    LMS7002M_set_mac_ch(self, channel);

    //--- TxTSP ---
    set_addrs_to_default(self, channel, 0x0200, 0x020c);
    LMS7002M_regs(self)->reg_0x0200_tsgmode = 1;
    LMS7002M_regs(self)->reg_0x0200_insel = 1;
    cfa4:	1441cf15 	stw	r17,1852(r2)
    LMS7002M_regs(self)->reg_0x0208_gfir3_byp = 1;
    cfa8:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs(self)->reg_0x0208_gfir2_byp = 1;
    cfac:	8009883a 	mov	r4,r16

    //--- TxTSP ---
    set_addrs_to_default(self, channel, 0x0200, 0x020c);
    LMS7002M_regs(self)->reg_0x0200_tsgmode = 1;
    LMS7002M_regs(self)->reg_0x0200_insel = 1;
    LMS7002M_regs(self)->reg_0x0208_gfir3_byp = 1;
    cfb0:	1441e215 	stw	r17,1928(r2)
    LMS7002M_regs(self)->reg_0x0208_gfir2_byp = 1;
    cfb4:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs(self)->reg_0x0208_gfir1_byp = 1;
    cfb8:	8009883a 	mov	r4,r16
    //--- TxTSP ---
    set_addrs_to_default(self, channel, 0x0200, 0x020c);
    LMS7002M_regs(self)->reg_0x0200_tsgmode = 1;
    LMS7002M_regs(self)->reg_0x0200_insel = 1;
    LMS7002M_regs(self)->reg_0x0208_gfir3_byp = 1;
    LMS7002M_regs(self)->reg_0x0208_gfir2_byp = 1;
    cfbc:	1441e315 	stw	r17,1932(r2)
    LMS7002M_regs(self)->reg_0x0208_gfir1_byp = 1;
    cfc0:	0008ac80 	call	8ac8 <LMS7002M_regs>
    cfc4:	1441e415 	stw	r17,1936(r2)
    LMS7002M_regs_spi_write(self, 0x0200);
    cfc8:	980b883a 	mov	r5,r19
    cfcc:	8009883a 	mov	r4,r16
    cfd0:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x0208);
    cfd4:	8009883a 	mov	r4,r16
    cfd8:	01408204 	movi	r5,520
    cfdc:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_txtsp_tsg_const(self, channel, 0x7fff, 0x8000);
    cfe0:	900b883a 	mov	r5,r18
    cfe4:	8009883a 	mov	r4,r16
    cfe8:	01e00014 	movui	r7,32768
    cfec:	019fffc4 	movi	r6,32767
    cff0:	000db800 	call	db80 <LMS7002M_txtsp_tsg_const>

    //--- RxTSP ---
    set_addrs_to_default(self, channel, 0x0400, 0x040f);
    cff4:	01c103c4 	movi	r7,1039
    cff8:	01810004 	movi	r6,1024
    cffc:	900b883a 	mov	r5,r18
    d000:	8009883a 	mov	r4,r16
    d004:	00011400 	call	1140 <set_addrs_to_default>
    LMS7002M_regs(self)->reg_0x040a_agc_mode = 1;
    d008:	8009883a 	mov	r4,r16
    d00c:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs(self)->reg_0x040c_gfir3_byp = 1;
    d010:	8009883a 	mov	r4,r16
    LMS7002M_regs_spi_write(self, 0x0208);
    LMS7002M_txtsp_tsg_const(self, channel, 0x7fff, 0x8000);

    //--- RxTSP ---
    set_addrs_to_default(self, channel, 0x0400, 0x040f);
    LMS7002M_regs(self)->reg_0x040a_agc_mode = 1;
    d014:	14420a15 	stw	r17,2088(r2)
    LMS7002M_regs(self)->reg_0x040c_gfir3_byp = 1;
    d018:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs(self)->reg_0x040c_gfir2_byp = 1;
    d01c:	8009883a 	mov	r4,r16
    LMS7002M_txtsp_tsg_const(self, channel, 0x7fff, 0x8000);

    //--- RxTSP ---
    set_addrs_to_default(self, channel, 0x0400, 0x040f);
    LMS7002M_regs(self)->reg_0x040a_agc_mode = 1;
    LMS7002M_regs(self)->reg_0x040c_gfir3_byp = 1;
    d020:	14421115 	stw	r17,2116(r2)
    LMS7002M_regs(self)->reg_0x040c_gfir2_byp = 1;
    d024:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs(self)->reg_0x040c_gfir1_byp = 1;
    d028:	8009883a 	mov	r4,r16

    //--- RxTSP ---
    set_addrs_to_default(self, channel, 0x0400, 0x040f);
    LMS7002M_regs(self)->reg_0x040a_agc_mode = 1;
    LMS7002M_regs(self)->reg_0x040c_gfir3_byp = 1;
    LMS7002M_regs(self)->reg_0x040c_gfir2_byp = 1;
    d02c:	14421215 	stw	r17,2120(r2)
    LMS7002M_regs(self)->reg_0x040c_gfir1_byp = 1;
    d030:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs(self)->reg_0x040a_agc_avg = 7;
    d034:	8009883a 	mov	r4,r16
    //--- RxTSP ---
    set_addrs_to_default(self, channel, 0x0400, 0x040f);
    LMS7002M_regs(self)->reg_0x040a_agc_mode = 1;
    LMS7002M_regs(self)->reg_0x040c_gfir3_byp = 1;
    LMS7002M_regs(self)->reg_0x040c_gfir2_byp = 1;
    LMS7002M_regs(self)->reg_0x040c_gfir1_byp = 1;
    d038:	14421315 	stw	r17,2124(r2)
    LMS7002M_regs(self)->reg_0x040a_agc_avg = 7;
    d03c:	0008ac80 	call	8ac8 <LMS7002M_regs>
    d040:	00c001c4 	movi	r3,7
    d044:	10c20b15 	stw	r3,2092(r2)
    LMS7002M_regs(self)->reg_0x040c_cmix_gain = 1;
    d048:	8009883a 	mov	r4,r16
    d04c:	0008ac80 	call	8ac8 <LMS7002M_regs>
    d050:	14420d15 	stw	r17,2100(r2)
    LMS7002M_regs_spi_write(self, 0x040a);
    d054:	8009883a 	mov	r4,r16
    d058:	01410284 	movi	r5,1034
    d05c:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x040c);
    d060:	8009883a 	mov	r4,r16
    d064:	01410304 	movi	r5,1036
    d068:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    //--- initial cal tone ---//
    setup_tx_cal_tone(self, channel, 50e3);
    d06c:	01d03a34 	movhi	r7,16616
    d070:	000d883a 	mov	r6,zero
    d074:	39da8004 	addi	r7,r7,27136
    d078:	900b883a 	mov	r5,r18
    d07c:	8009883a 	mov	r4,r16
    d080:	000cab00 	call	cab0 <setup_tx_cal_tone>

    return status;
}
    d084:	0005883a 	mov	r2,zero
    d088:	dfc00617 	ldw	ra,24(sp)
    d08c:	dd400517 	ldw	r21,20(sp)
    d090:	dd000417 	ldw	r20,16(sp)
    d094:	dcc00317 	ldw	r19,12(sp)
    d098:	dc800217 	ldw	r18,8(sp)
    d09c:	dc400117 	ldw	r17,4(sp)
    d0a0:	dc000017 	ldw	r16,0(sp)
    d0a4:	dec00704 	addi	sp,sp,28
    d0a8:	f800283a 	ret

0000d0ac <LMS7002M_tbb_set_filter_bw>:

/***********************************************************************
 * Tx calibration dispatcher
 **********************************************************************/
int LMS7002M_tbb_set_filter_bw(LMS7002M_t *self, const LMS7002M_chan_t channel, double bw, double *bwactual)
{
    d0ac:	defb8604 	addi	sp,sp,-4584
    d0b0:	dd047415 	stw	r20,4560(sp)
    d0b4:	dc847215 	stw	r18,4552(sp)
    d0b8:	dc447115 	stw	r17,4548(sp)
    d0bc:	dc047015 	stw	r16,4544(sp)
    d0c0:	3023883a 	mov	r17,r6
    d0c4:	3825883a 	mov	r18,r7
    d0c8:	dfc47915 	stw	ra,4580(sp)
    d0cc:	df047815 	stw	fp,4576(sp)
    d0d0:	ddc47715 	stw	r23,4572(sp)
    d0d4:	dd847615 	stw	r22,4568(sp)
    d0d8:	dd447515 	stw	r21,4564(sp)
    d0dc:	dcc47315 	stw	r19,4556(sp)
    d0e0:	2021883a 	mov	r16,r4
    d0e4:	2829883a 	mov	r20,r5
    LMS7002M_set_mac_ch(self, channel);
    d0e8:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>
    const double lpflad_start = 3e6;
    const double lpflad_stop = 13e6;
    const double lpfh_start = 28e6;
    const double lpf5_start = lpflad_start; //FIXME -> 0.8e6

    if (bw < lpf5_start) bw = lpf5_start;
    d0ec:	01d051f4 	movhi	r7,16711
    d0f0:	000d883a 	mov	r6,zero
    d0f4:	39f8d804 	addi	r7,r7,-7328
    d0f8:	8809883a 	mov	r4,r17
    d0fc:	900b883a 	mov	r5,r18
    d100:	0026e800 	call	26e80 <__ledf2>
    d104:	10001d16 	blt	r2,zero,d17c <LMS7002M_tbb_set_filter_bw+0xd0>
    if (bw > lpflad_stop && bw < lpfh_start) bw = lpfh_start; //clip up to high-band
    d108:	01d05a74 	movhi	r7,16745
    d10c:	000d883a 	mov	r6,zero
    d110:	39f2ea04 	addi	r7,r7,-13400
    d114:	8809883a 	mov	r4,r17
    d118:	900b883a 	mov	r5,r18
    d11c:	0026da40 	call	26da4 <__gedf2>
    d120:	0080070e 	bge	zero,r2,d140 <LMS7002M_tbb_set_filter_bw+0x94>
    d124:	01d05ef4 	movhi	r7,16763
    d128:	000d883a 	mov	r6,zero
    d12c:	39ecfc04 	addi	r7,r7,-19472
    d130:	8809883a 	mov	r4,r17
    d134:	900b883a 	mov	r5,r18
    d138:	0026e800 	call	26e80 <__ledf2>
    d13c:	10001316 	blt	r2,zero,d18c <LMS7002M_tbb_set_filter_bw+0xe0>
    const int path = (bw < lpflad_start)?LMS7002M_TBB_S5:(bw <= lpflad_stop)?LMS7002M_TBB_LAD:LMS7002M_RBB_HBF;
    d140:	01d051f4 	movhi	r7,16711
    d144:	000d883a 	mov	r6,zero
    d148:	39f8d804 	addi	r7,r7,-7328
    d14c:	8809883a 	mov	r4,r17
    d150:	900b883a 	mov	r5,r18
    d154:	0026e800 	call	26e80 <__ledf2>
    d158:	10001116 	blt	r2,zero,d1a0 <LMS7002M_tbb_set_filter_bw+0xf4>
    d15c:	01d05a74 	movhi	r7,16745
    d160:	000d883a 	mov	r6,zero
    d164:	39f2ea04 	addi	r7,r7,-13400
    d168:	8809883a 	mov	r4,r17
    d16c:	900b883a 	mov	r5,r18
    d170:	0026e800 	call	26e80 <__ledf2>
    d174:	00800c0e 	bge	zero,r2,d1a8 <LMS7002M_tbb_set_filter_bw+0xfc>
    d178:	00000706 	br	d198 <LMS7002M_tbb_set_filter_bw+0xec>
    const double lpflad_start = 3e6;
    const double lpflad_stop = 13e6;
    const double lpfh_start = 28e6;
    const double lpf5_start = lpflad_start; //FIXME -> 0.8e6

    if (bw < lpf5_start) bw = lpf5_start;
    d17c:	049051f4 	movhi	r18,16711
    d180:	0023883a 	mov	r17,zero
    d184:	94b8d804 	addi	r18,r18,-7328
    d188:	00000706 	br	d1a8 <LMS7002M_tbb_set_filter_bw+0xfc>
    if (bw > lpflad_stop && bw < lpfh_start) bw = lpfh_start; //clip up to high-band
    d18c:	04905ef4 	movhi	r18,16763
    d190:	0023883a 	mov	r17,zero
    d194:	94acfc04 	addi	r18,r18,-19472
    const int path = (bw < lpflad_start)?LMS7002M_TBB_S5:(bw <= lpflad_stop)?LMS7002M_TBB_LAD:LMS7002M_RBB_HBF;
    d198:	05401204 	movi	r21,72
    d19c:	00000306 	br	d1ac <LMS7002M_tbb_set_filter_bw+0x100>
    d1a0:	054014c4 	movi	r21,83
    d1a4:	00000106 	br	d1ac <LMS7002M_tbb_set_filter_bw+0x100>
    d1a8:	05401044 	movi	r21,65

    ////////////////////////////////////////////////////////////////////
    // Save register map
    ////////////////////////////////////////////////////////////////////
    LMS7002M_regs_t saved_map[2];
    memcpy(saved_map, self->_regs, sizeof(saved_map));
    d1ac:	80800104 	addi	r2,r16,4
    d1b0:	01846804 	movi	r6,4512
    d1b4:	100b883a 	mov	r5,r2
    d1b8:	d9000204 	addi	r4,sp,8
    d1bc:	d8846a15 	stw	r2,4520(sp)
    d1c0:	00127200 	call	12720 <memcpy>

    ////////////////////////////////////////////////////////////////////
    // Clocking configuration
    ////////////////////////////////////////////////////////////////////
    status = cal_setup_cgen(self, bw);
    d1c4:	880b883a 	mov	r5,r17
    d1c8:	900d883a 	mov	r6,r18
    d1cc:	8009883a 	mov	r4,r16
    d1d0:	00035400 	call	3540 <cal_setup_cgen>
    d1d4:	1027883a 	mov	r19,r2
    if (status != 0)
    d1d8:	1001971e 	bne	r2,zero,d838 <LMS7002M_tbb_set_filter_bw+0x78c>
    }

    ////////////////////////////////////////////////////////////////////
    // Load initial calibration state
    ////////////////////////////////////////////////////////////////////
    status = tx_cal_init(self, channel);
    d1dc:	a00b883a 	mov	r5,r20
    d1e0:	8009883a 	mov	r4,r16
    d1e4:	000cdc80 	call	cdc8 <tx_cal_init>
    d1e8:	1027883a 	mov	r19,r2
    if (status != 0)
    d1ec:	1001921e 	bne	r2,zero,d838 <LMS7002M_tbb_set_filter_bw+0x78c>
    {
        //LMS7_logf(LMS7_ERROR, "tx_cal_init() failed");
        goto done;
    }
    LMS7002M_tbb_set_path(self, channel, path);
    d1f0:	a80d883a 	mov	r6,r21
    d1f4:	a00b883a 	mov	r5,r20
    d1f8:	8009883a 	mov	r4,r16
    d1fc:	000c4200 	call	c420 <LMS7002M_tbb_set_path>

    ////////////////////////////////////////////////////////////////////
    // TBB LPF calibration
    ////////////////////////////////////////////////////////////////////
    if (path == LMS7002M_TBB_S5)  status = tx_cal_tbb_lpfs5(self, channel, bw);
    d200:	008014c4 	movi	r2,83
    d204:	a880801e 	bne	r21,r2,d408 <LMS7002M_tbb_set_filter_bw+0x35c>
/***********************************************************************
 * Perform TBB LPFS5 filter calibration
 **********************************************************************/
static int tx_cal_tbb_lpfs5(LMS7002M_t *self, const LMS7002M_chan_t channel, const double bw)
{
    LMS7002M_set_mac_ch(self, channel);
    d208:	a00b883a 	mov	r5,r20
    d20c:	8009883a 	mov	r4,r16
    d210:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    //--- check filter bounds ---//
    if (bw < 0.8e6 || bw > 3.2e6)
    d214:	01d04a34 	movhi	r7,16680
    d218:	000d883a 	mov	r6,zero
    d21c:	39da8004 	addi	r7,r7,27136
    d220:	8809883a 	mov	r4,r17
    d224:	900b883a 	mov	r5,r18
    d228:	0026e800 	call	26e80 <__ledf2>
    d22c:	10018116 	blt	r2,zero,d834 <LMS7002M_tbb_set_filter_bw+0x788>
    d230:	01d05234 	movhi	r7,16712
    d234:	000d883a 	mov	r6,zero
    d238:	39da8004 	addi	r7,r7,27136
    d23c:	8809883a 	mov	r4,r17
    d240:	900b883a 	mov	r5,r18
    d244:	0026da40 	call	26da4 <__gedf2>
    d248:	00817a16 	blt	zero,r2,d834 <LMS7002M_tbb_set_filter_bw+0x788>
        //LMS7_logf(LMS7_ERROR, "LPFS5 bandwidth not in range[0.8 to 3.2 MHz]");
        return -1;
    }

    //--- setup rcal, path ---//
    const double f = bw/1e6;
    d24c:	01d04bf4 	movhi	r7,16687
    d250:	000d883a 	mov	r6,zero
    d254:	39e12004 	addi	r7,r7,-31616
    d258:	8809883a 	mov	r4,r17
    d25c:	900b883a 	mov	r5,r18
    d260:	002634c0 	call	2634c <__divdf3>
    const double p1 = 1.93821841029921E-15;
    const double p2 = -0.0429694461214244;
    const double p3 = 0.253501254059498;
    const double p4 = 88.9545445989649;
    const double p5 = -48.0847491316861;
    const int rcal_lpfs5_tbb = (int)(f*f*f*f*p1 + f*f*f*p2 + f*f*p3 + f*p4 + p5);
    d264:	100d883a 	mov	r6,r2
    d268:	180f883a 	mov	r7,r3
    d26c:	1009883a 	mov	r4,r2
    d270:	180b883a 	mov	r5,r3
        //LMS7_logf(LMS7_ERROR, "LPFS5 bandwidth not in range[0.8 to 3.2 MHz]");
        return -1;
    }

    //--- setup rcal, path ---//
    const double f = bw/1e6;
    d274:	102d883a 	mov	r22,r2
    d278:	182f883a 	mov	r23,r3
    const double p1 = 1.93821841029921E-15;
    const double p2 = -0.0429694461214244;
    const double p3 = 0.253501254059498;
    const double p4 = 88.9545445989649;
    const double p5 = -48.0847491316861;
    const int rcal_lpfs5_tbb = (int)(f*f*f*f*p1 + f*f*f*p2 + f*f*p3 + f*p4 + p5);
    d27c:	0026f740 	call	26f74 <__muldf3>
    d280:	100d883a 	mov	r6,r2
    d284:	180f883a 	mov	r7,r3
    d288:	b80b883a 	mov	r5,r23
    d28c:	b009883a 	mov	r4,r22
    d290:	d8c46f15 	stw	r3,4540(sp)
    d294:	d8846e15 	stw	r2,4536(sp)
    d298:	0026f740 	call	26f74 <__muldf3>
    LMS7002M_regs(self)->reg_0x010a_rcal_lpfs5_tbb = rcal_lpfs5_tbb;
    d29c:	8009883a 	mov	r4,r16
    const double p1 = 1.93821841029921E-15;
    const double p2 = -0.0429694461214244;
    const double p3 = 0.253501254059498;
    const double p4 = 88.9545445989649;
    const double p5 = -48.0847491316861;
    const int rcal_lpfs5_tbb = (int)(f*f*f*f*p1 + f*f*f*p2 + f*f*p3 + f*p4 + p5);
    d2a0:	1827883a 	mov	r19,r3
    d2a4:	1039883a 	mov	fp,r2
    LMS7002M_regs(self)->reg_0x010a_rcal_lpfs5_tbb = rcal_lpfs5_tbb;
    d2a8:	0008ac80 	call	8ac8 <LMS7002M_regs>
    d2ac:	e00d883a 	mov	r6,fp
    d2b0:	980f883a 	mov	r7,r19
    d2b4:	b009883a 	mov	r4,r22
    d2b8:	b80b883a 	mov	r5,r23
    d2bc:	d8846d15 	stw	r2,4532(sp)
    d2c0:	0026f740 	call	26f74 <__muldf3>
    d2c4:	018d4234 	movhi	r6,13576
    d2c8:	01cf3874 	movhi	r7,15585
    d2cc:	319ae704 	addi	r6,r6,27548
    d2d0:	39dd4e84 	addi	r7,r7,30010
    d2d4:	1009883a 	mov	r4,r2
    d2d8:	180b883a 	mov	r5,r3
    d2dc:	0026f740 	call	26f74 <__muldf3>
    d2e0:	0196e8f4 	movhi	r6,23459
    d2e4:	01efe9b4 	movhi	r7,49062
    d2e8:	e009883a 	mov	r4,fp
    d2ec:	980b883a 	mov	r5,r19
    d2f0:	318cdc44 	addi	r6,r6,13169
    d2f4:	39c005c4 	addi	r7,r7,23
    d2f8:	d8c46c15 	stw	r3,4528(sp)
    d2fc:	d8846b15 	stw	r2,4524(sp)
    d300:	0026f740 	call	26f74 <__muldf3>
    d304:	db846b17 	ldw	r14,4524(sp)
    d308:	db446c17 	ldw	r13,4528(sp)
    d30c:	100d883a 	mov	r6,r2
    d310:	7009883a 	mov	r4,r14
    d314:	680b883a 	mov	r5,r13
    d318:	180f883a 	mov	r7,r3
    d31c:	0025aa00 	call	25aa0 <__adddf3>
    d320:	dac46e17 	ldw	r11,4536(sp)
    d324:	da846f17 	ldw	r10,4540(sp)
    d328:	0194bb34 	movhi	r6,21228
    d32c:	01cff434 	movhi	r7,16336
    d330:	5809883a 	mov	r4,r11
    d334:	500b883a 	mov	r5,r10
    d338:	31a374c4 	addi	r6,r6,-29229
    d33c:	39ce5744 	addi	r7,r7,14685
    d340:	1039883a 	mov	fp,r2
    d344:	1827883a 	mov	r19,r3
    d348:	0026f740 	call	26f74 <__muldf3>
    d34c:	e009883a 	mov	r4,fp
    d350:	980b883a 	mov	r5,r19
    d354:	100d883a 	mov	r6,r2
    d358:	180f883a 	mov	r7,r3
    d35c:	0025aa00 	call	25aa0 <__adddf3>
    d360:	01908ef4 	movhi	r6,16955
    d364:	01d015b4 	movhi	r7,16470
    d368:	31b20b04 	addi	r6,r6,-14292
    d36c:	39cf45c4 	addi	r7,r7,15639
    d370:	b009883a 	mov	r4,r22
    d374:	b80b883a 	mov	r5,r23
    d378:	1827883a 	mov	r19,r3
    d37c:	1039883a 	mov	fp,r2
    d380:	0026f740 	call	26f74 <__muldf3>
    d384:	980b883a 	mov	r5,r19
    d388:	100d883a 	mov	r6,r2
    d38c:	180f883a 	mov	r7,r3
    d390:	e009883a 	mov	r4,fp
    d394:	0025aa00 	call	25aa0 <__adddf3>
    d398:	0183cfb4 	movhi	r6,3902
    d39c:	01d01234 	movhi	r7,16456
    d3a0:	319e9944 	addi	r6,r6,31333
    d3a4:	39c2b644 	addi	r7,r7,2777
    d3a8:	1009883a 	mov	r4,r2
    d3ac:	180b883a 	mov	r5,r3
    d3b0:	00277e00 	call	277e0 <__subdf3>
    d3b4:	180b883a 	mov	r5,r3
    d3b8:	1009883a 	mov	r4,r2
    d3bc:	00280dc0 	call	280dc <__fixdfsi>
    d3c0:	da046d17 	ldw	r8,4532(sp)
    LMS7002M_regs(self)->reg_0x0105_loopb_tbb = 3;
    d3c4:	8009883a 	mov	r4,r16
    LMS7002M_regs_spi_write(self, 0x0105);
    LMS7002M_regs_spi_write(self, 0x010a);
    d3c8:	04c04284 	movi	r19,266
    const double p2 = -0.0429694461214244;
    const double p3 = 0.253501254059498;
    const double p4 = 88.9545445989649;
    const double p5 = -48.0847491316861;
    const int rcal_lpfs5_tbb = (int)(f*f*f*f*p1 + f*f*f*p2 + f*f*p3 + f*p4 + p5);
    LMS7002M_regs(self)->reg_0x010a_rcal_lpfs5_tbb = rcal_lpfs5_tbb;
    d3cc:	40815f15 	stw	r2,1404(r8)
    LMS7002M_regs(self)->reg_0x0105_loopb_tbb = 3;
    d3d0:	0008ac80 	call	8ac8 <LMS7002M_regs>
    d3d4:	00c000c4 	movi	r3,3
    d3d8:	10c14b15 	stw	r3,1324(r2)
    LMS7002M_regs_spi_write(self, 0x0105);
    d3dc:	01404144 	movi	r5,261
    d3e0:	8009883a 	mov	r4,r16
    d3e4:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x010a);
    d3e8:	980b883a 	mov	r5,r19
    d3ec:	8009883a 	mov	r4,r16
    d3f0:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    //--- calibration ---//
    return tx_cal_loop(self, channel, bw,
        &LMS7002M_regs(self)->reg_0x010a_rcal_lpfs5_tbb,
    d3f4:	8009883a 	mov	r4,r16
    d3f8:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs(self)->reg_0x0105_loopb_tbb = 3;
    LMS7002M_regs_spi_write(self, 0x0105);
    LMS7002M_regs_spi_write(self, 0x010a);

    //--- calibration ---//
    return tx_cal_loop(self, channel, bw,
    d3fc:	10815f04 	addi	r2,r2,1404
    d400:	dcc00115 	stw	r19,4(sp)
    d404:	00008106 	br	d60c <LMS7002M_tbb_set_filter_bw+0x560>

    ////////////////////////////////////////////////////////////////////
    // TBB LPF calibration
    ////////////////////////////////////////////////////////////////////
    if (path == LMS7002M_TBB_S5)  status = tx_cal_tbb_lpfs5(self, channel, bw);
    if (path == LMS7002M_TBB_LAD) status = tx_cal_tbb_lpflad(self, channel, bw);
    d408:	00801044 	movi	r2,65
    d40c:	a880871e 	bne	r21,r2,d62c <LMS7002M_tbb_set_filter_bw+0x580>
 * Perform TBB LPFLAD filter calibration
 **********************************************************************/
static int tx_cal_tbb_lpflad(LMS7002M_t *self, const LMS7002M_chan_t channel, const double bw)
{
    int status = 0;
    LMS7002M_set_mac_ch(self, channel);
    d410:	a00b883a 	mov	r5,r20
    d414:	8009883a 	mov	r4,r16
    d418:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    //--- check filter bounds ---//
    if (bw < 2e6 || bw > 16e6)
    d41c:	01d04ff4 	movhi	r7,16703
    d420:	000d883a 	mov	r6,zero
    d424:	39e12004 	addi	r7,r7,-31616
    d428:	8809883a 	mov	r4,r17
    d42c:	900b883a 	mov	r5,r18
    d430:	0026e800 	call	26e80 <__ledf2>
    d434:	1000ff16 	blt	r2,zero,d834 <LMS7002M_tbb_set_filter_bw+0x788>
    d438:	01d05bf4 	movhi	r7,16751
    d43c:	000d883a 	mov	r6,zero
    d440:	39e12004 	addi	r7,r7,-31616
    d444:	8809883a 	mov	r4,r17
    d448:	900b883a 	mov	r5,r18
    d44c:	0026da40 	call	26da4 <__gedf2>
    d450:	0080f816 	blt	zero,r2,d834 <LMS7002M_tbb_set_filter_bw+0x788>
        status = -1;
        goto done;
    }

    //--- setup rcal, path ---//
    const double f = bw/1e6;
    d454:	01d04bf4 	movhi	r7,16687
    d458:	000d883a 	mov	r6,zero
    d45c:	39e12004 	addi	r7,r7,-31616
    d460:	8809883a 	mov	r4,r17
    d464:	900b883a 	mov	r5,r18
    d468:	002634c0 	call	2634c <__divdf3>
    const double p1 = 1.29858903647958E-16;
    const double p2 = -0.000110746929967704;
    const double p3 = 0.00277593485991029;
    const double p4 = 21.0384293169607;
    const double p5 = -48.4092606238297;
    const int rcal_lpflad_tbb = (int)(f*f*f*f*p1 + f*f*f*p2 + f*f*p3 + f*p4 + p5);
    d46c:	100d883a 	mov	r6,r2
    d470:	180f883a 	mov	r7,r3
    d474:	1009883a 	mov	r4,r2
    d478:	180b883a 	mov	r5,r3
        status = -1;
        goto done;
    }

    //--- setup rcal, path ---//
    const double f = bw/1e6;
    d47c:	102d883a 	mov	r22,r2
    d480:	182f883a 	mov	r23,r3
    const double p1 = 1.29858903647958E-16;
    const double p2 = -0.000110746929967704;
    const double p3 = 0.00277593485991029;
    const double p4 = 21.0384293169607;
    const double p5 = -48.4092606238297;
    const int rcal_lpflad_tbb = (int)(f*f*f*f*p1 + f*f*f*p2 + f*f*p3 + f*p4 + p5);
    d484:	0026f740 	call	26f74 <__muldf3>
    d488:	100d883a 	mov	r6,r2
    d48c:	180f883a 	mov	r7,r3
    d490:	b80b883a 	mov	r5,r23
    d494:	b009883a 	mov	r4,r22
    d498:	d8c46f15 	stw	r3,4540(sp)
    d49c:	d8846e15 	stw	r2,4536(sp)
    d4a0:	0026f740 	call	26f74 <__muldf3>
    LMS7002M_regs(self)->reg_0x0109_rcal_lpflad_tbb = rcal_lpflad_tbb;
    d4a4:	8009883a 	mov	r4,r16
    const double p1 = 1.29858903647958E-16;
    const double p2 = -0.000110746929967704;
    const double p3 = 0.00277593485991029;
    const double p4 = 21.0384293169607;
    const double p5 = -48.4092606238297;
    const int rcal_lpflad_tbb = (int)(f*f*f*f*p1 + f*f*f*p2 + f*f*p3 + f*p4 + p5);
    d4a8:	1827883a 	mov	r19,r3
    d4ac:	1039883a 	mov	fp,r2
    LMS7002M_regs(self)->reg_0x0109_rcal_lpflad_tbb = rcal_lpflad_tbb;
    d4b0:	0008ac80 	call	8ac8 <LMS7002M_regs>
    d4b4:	e00d883a 	mov	r6,fp
    d4b8:	980f883a 	mov	r7,r19
    d4bc:	b009883a 	mov	r4,r22
    d4c0:	b80b883a 	mov	r5,r23
    d4c4:	d8846d15 	stw	r2,4532(sp)
    d4c8:	0026f740 	call	26f74 <__muldf3>
    d4cc:	01aac3b4 	movhi	r6,43790
    d4d0:	01cf28f4 	movhi	r7,15523
    d4d4:	31b04e44 	addi	r6,r6,-16071
    d4d8:	39edbc84 	addi	r7,r7,-18702
    d4dc:	1009883a 	mov	r4,r2
    d4e0:	180b883a 	mov	r5,r3
    d4e4:	0026f740 	call	26f74 <__muldf3>
    d4e8:	01b13db4 	movhi	r6,50422
    d4ec:	01efc774 	movhi	r7,48925
    d4f0:	e009883a 	mov	r4,fp
    d4f4:	980b883a 	mov	r5,r19
    d4f8:	31afa684 	addi	r6,r6,-16742
    d4fc:	39c20644 	addi	r7,r7,2073
    d500:	d8c46c15 	stw	r3,4528(sp)
    d504:	d8846b15 	stw	r2,4524(sp)
    d508:	0026f740 	call	26f74 <__muldf3>
    d50c:	db846b17 	ldw	r14,4524(sp)
    d510:	db446c17 	ldw	r13,4528(sp)
    d514:	100d883a 	mov	r6,r2
    d518:	7009883a 	mov	r4,r14
    d51c:	680b883a 	mov	r5,r13
    d520:	180f883a 	mov	r7,r3
    d524:	0025aa00 	call	25aa0 <__adddf3>
    d528:	dac46e17 	ldw	r11,4536(sp)
    d52c:	da846f17 	ldw	r10,4540(sp)
    d530:	01ab8374 	movhi	r6,44557
    d534:	01cfd9f4 	movhi	r7,16231
    d538:	5809883a 	mov	r4,r11
    d53c:	500b883a 	mov	r5,r10
    d540:	319c6044 	addi	r6,r6,29057
    d544:	39ef6384 	addi	r7,r7,-17010
    d548:	1039883a 	mov	fp,r2
    d54c:	1827883a 	mov	r19,r3
    d550:	0026f740 	call	26f74 <__muldf3>
    d554:	e009883a 	mov	r4,fp
    d558:	980b883a 	mov	r5,r19
    d55c:	100d883a 	mov	r6,r2
    d560:	180f883a 	mov	r7,r3
    d564:	0025aa00 	call	25aa0 <__adddf3>
    d568:	01a03d34 	movhi	r6,33012
    d56c:	01d00d74 	movhi	r7,16437
    d570:	31a371c4 	addi	r6,r6,-29241
    d574:	39c27584 	addi	r7,r7,2518
    d578:	b009883a 	mov	r4,r22
    d57c:	b80b883a 	mov	r5,r23
    d580:	1827883a 	mov	r19,r3
    d584:	1039883a 	mov	fp,r2
    d588:	0026f740 	call	26f74 <__muldf3>
    d58c:	980b883a 	mov	r5,r19
    d590:	100d883a 	mov	r6,r2
    d594:	180f883a 	mov	r7,r3
    d598:	e009883a 	mov	r4,fp
    d59c:	0025aa00 	call	25aa0 <__adddf3>
    d5a0:	01a9bc74 	movhi	r6,42737
    d5a4:	01d01234 	movhi	r7,16456
    d5a8:	319c73c4 	addi	r6,r6,29135
    d5ac:	39cd1884 	addi	r7,r7,13410
    d5b0:	1009883a 	mov	r4,r2
    d5b4:	180b883a 	mov	r5,r3
    d5b8:	00277e00 	call	277e0 <__subdf3>
    d5bc:	180b883a 	mov	r5,r3
    d5c0:	1009883a 	mov	r4,r2
    d5c4:	00280dc0 	call	280dc <__fixdfsi>
    d5c8:	da046d17 	ldw	r8,4532(sp)
    LMS7002M_regs(self)->reg_0x0105_loopb_tbb = 2;
    d5cc:	8009883a 	mov	r4,r16
    LMS7002M_regs_spi_write(self, 0x0105);
    LMS7002M_regs_spi_write(self, 0x0109);
    d5d0:	04c04244 	movi	r19,265
    const double p2 = -0.000110746929967704;
    const double p3 = 0.00277593485991029;
    const double p4 = 21.0384293169607;
    const double p5 = -48.4092606238297;
    const int rcal_lpflad_tbb = (int)(f*f*f*f*p1 + f*f*f*p2 + f*f*p3 + f*p4 + p5);
    LMS7002M_regs(self)->reg_0x0109_rcal_lpflad_tbb = rcal_lpflad_tbb;
    d5d4:	40815b15 	stw	r2,1388(r8)
    LMS7002M_regs(self)->reg_0x0105_loopb_tbb = 2;
    d5d8:	0008ac80 	call	8ac8 <LMS7002M_regs>
    d5dc:	00c00084 	movi	r3,2
    d5e0:	10c14b15 	stw	r3,1324(r2)
    LMS7002M_regs_spi_write(self, 0x0105);
    d5e4:	01404144 	movi	r5,261
    d5e8:	8009883a 	mov	r4,r16
    d5ec:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x0109);
    d5f0:	980b883a 	mov	r5,r19
    d5f4:	8009883a 	mov	r4,r16
    d5f8:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    //--- calibration ---//
    status = tx_cal_loop(self, channel, bw,
        &LMS7002M_regs(self)->reg_0x0109_rcal_lpflad_tbb,
    d5fc:	8009883a 	mov	r4,r16
    d600:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs(self)->reg_0x0105_loopb_tbb = 2;
    LMS7002M_regs_spi_write(self, 0x0105);
    LMS7002M_regs_spi_write(self, 0x0109);

    //--- calibration ---//
    status = tx_cal_loop(self, channel, bw,
    d604:	10815b04 	addi	r2,r2,1388
    d608:	dcc00115 	stw	r19,4(sp)
    d60c:	d8800015 	stw	r2,0(sp)
    d610:	880d883a 	mov	r6,r17
    d614:	900f883a 	mov	r7,r18
    d618:	a00b883a 	mov	r5,r20
    d61c:	8009883a 	mov	r4,r16
    d620:	000cb780 	call	cb78 <tx_cal_loop.isra.0.constprop.1>
    d624:	1027883a 	mov	r19,r2
    d628:	00008306 	br	d838 <LMS7002M_tbb_set_filter_bw+0x78c>
    ////////////////////////////////////////////////////////////////////
    // TBB LPF calibration
    ////////////////////////////////////////////////////////////////////
    if (path == LMS7002M_TBB_S5)  status = tx_cal_tbb_lpfs5(self, channel, bw);
    if (path == LMS7002M_TBB_LAD) status = tx_cal_tbb_lpflad(self, channel, bw);
    if (path == LMS7002M_RBB_HBF) status = tx_cal_tbb_lpfh(self, channel, bw);
    d62c:	00801204 	movi	r2,72
    d630:	a880811e 	bne	r21,r2,d838 <LMS7002M_tbb_set_filter_bw+0x78c>
 * Perform TBB LPFH filter calibration
 **********************************************************************/
static int tx_cal_tbb_lpfh(LMS7002M_t *self, const LMS7002M_chan_t channel, const double bw)
{
    int status = 0;
    LMS7002M_set_mac_ch(self, channel);
    d634:	a00b883a 	mov	r5,r20
    d638:	8009883a 	mov	r4,r16
    d63c:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    //--- check filter bounds ---//
    if (bw < 28e6 || bw > 60e6)
    d640:	01d05ef4 	movhi	r7,16763
    d644:	000d883a 	mov	r6,zero
    d648:	39ecfc04 	addi	r7,r7,-19472
    d64c:	8809883a 	mov	r4,r17
    d650:	900b883a 	mov	r5,r18
    d654:	0026e800 	call	26e80 <__ledf2>
    d658:	10007616 	blt	r2,zero,d834 <LMS7002M_tbb_set_filter_bw+0x788>
    d65c:	01d06374 	movhi	r7,16781
    d660:	000d883a 	mov	r6,zero
    d664:	39e70e04 	addi	r7,r7,-25544
    d668:	8809883a 	mov	r4,r17
    d66c:	900b883a 	mov	r5,r18
    d670:	0026da40 	call	26da4 <__gedf2>
    d674:	00806f16 	blt	zero,r2,d834 <LMS7002M_tbb_set_filter_bw+0x788>
        status = -1;
        goto done;
    }

    //--- setup rcal, path ---//
    const double f = bw/1e6;
    d678:	01d04bf4 	movhi	r7,16687
    d67c:	000d883a 	mov	r6,zero
    d680:	39e12004 	addi	r7,r7,-31616
    d684:	8809883a 	mov	r4,r17
    d688:	900b883a 	mov	r5,r18
    d68c:	002634c0 	call	2634c <__divdf3>
    const double p1 = 1.10383261611112E-06;
    const double p2 = -0.000210800032517545;
    const double p3 = 0.0190494874803309;
    const double p4 = 1.43317445923528;
    const double p5 = -47.6950779298333;
    const int rcal_lpfh_tbb = (int)(f*f*f*f*p1 + f*f*f*p2 + f*f*p3 + f*p4 + p5);
    d690:	100d883a 	mov	r6,r2
    d694:	180f883a 	mov	r7,r3
    d698:	1009883a 	mov	r4,r2
    d69c:	180b883a 	mov	r5,r3
        status = -1;
        goto done;
    }

    //--- setup rcal, path ---//
    const double f = bw/1e6;
    d6a0:	102f883a 	mov	r23,r2
    d6a4:	182d883a 	mov	r22,r3
    const double p1 = 1.10383261611112E-06;
    const double p2 = -0.000210800032517545;
    const double p3 = 0.0190494874803309;
    const double p4 = 1.43317445923528;
    const double p5 = -47.6950779298333;
    const int rcal_lpfh_tbb = (int)(f*f*f*f*p1 + f*f*f*p2 + f*f*p3 + f*p4 + p5);
    d6a8:	0026f740 	call	26f74 <__muldf3>
    d6ac:	100d883a 	mov	r6,r2
    d6b0:	180f883a 	mov	r7,r3
    d6b4:	b00b883a 	mov	r5,r22
    d6b8:	b809883a 	mov	r4,r23
    d6bc:	d8c46f15 	stw	r3,4540(sp)
    d6c0:	d8846e15 	stw	r2,4536(sp)
    d6c4:	0026f740 	call	26f74 <__muldf3>
    LMS7002M_regs(self)->reg_0x0109_rcal_lpfh_tbb = rcal_lpfh_tbb;
    d6c8:	8009883a 	mov	r4,r16
    const double p1 = 1.10383261611112E-06;
    const double p2 = -0.000210800032517545;
    const double p3 = 0.0190494874803309;
    const double p4 = 1.43317445923528;
    const double p5 = -47.6950779298333;
    const int rcal_lpfh_tbb = (int)(f*f*f*f*p1 + f*f*f*p2 + f*f*p3 + f*p4 + p5);
    d6cc:	1827883a 	mov	r19,r3
    d6d0:	1039883a 	mov	fp,r2
    LMS7002M_regs(self)->reg_0x0109_rcal_lpfh_tbb = rcal_lpfh_tbb;
    d6d4:	0008ac80 	call	8ac8 <LMS7002M_regs>
    d6d8:	e00d883a 	mov	r6,fp
    d6dc:	980f883a 	mov	r7,r19
    d6e0:	b809883a 	mov	r4,r23
    d6e4:	b00b883a 	mov	r5,r22
    d6e8:	d8846d15 	stw	r2,4532(sp)
    d6ec:	0026f740 	call	26f74 <__muldf3>
    d6f0:	01b2fab4 	movhi	r6,52202
    d6f4:	01cfacf4 	movhi	r7,16051
    d6f8:	31a3c744 	addi	r6,r6,-28899
    d6fc:	39e13b04 	addi	r7,r7,-31508
    d700:	1009883a 	mov	r4,r2
    d704:	180b883a 	mov	r5,r3
    d708:	0026f740 	call	26f74 <__muldf3>
    d70c:	019f71f4 	movhi	r6,32199
    d710:	01efcb34 	movhi	r7,48940
    d714:	e009883a 	mov	r4,fp
    d718:	980b883a 	mov	r5,r19
    d71c:	31bda204 	addi	r6,r6,-2424
    d720:	39e85184 	addi	r7,r7,-24250
    d724:	d8c46c15 	stw	r3,4528(sp)
    d728:	d8846b15 	stw	r2,4524(sp)
    d72c:	0026f740 	call	26f74 <__muldf3>
    d730:	db846b17 	ldw	r14,4524(sp)
    d734:	db446c17 	ldw	r13,4528(sp)
    d738:	100d883a 	mov	r6,r2
    d73c:	7009883a 	mov	r4,r14
    d740:	680b883a 	mov	r5,r13
    d744:	180f883a 	mov	r7,r3
    d748:	0025aa00 	call	25aa0 <__adddf3>
    d74c:	dac46e17 	ldw	r11,4536(sp)
    d750:	da846f17 	ldw	r10,4540(sp)
    d754:	019dbbf4 	movhi	r6,30447
    d758:	01cfe534 	movhi	r7,16276
    d75c:	5809883a 	mov	r4,r11
    d760:	500b883a 	mov	r5,r10
    d764:	318c12c4 	addi	r6,r6,12363
    d768:	39e06d44 	addi	r7,r7,-32331
    d76c:	1039883a 	mov	fp,r2
    d770:	1827883a 	mov	r19,r3
    d774:	0026f740 	call	26f74 <__muldf3>
    d778:	e009883a 	mov	r4,fp
    d77c:	980b883a 	mov	r5,r19
    d780:	100d883a 	mov	r6,r2
    d784:	180f883a 	mov	r7,r3
    d788:	0025aa00 	call	25aa0 <__adddf3>
    d78c:	0195dfb4 	movhi	r6,22398
    d790:	01cffdf4 	movhi	r7,16375
    d794:	318315c4 	addi	r6,r6,3159
    d798:	39fb9204 	addi	r7,r7,-4536
    d79c:	b809883a 	mov	r4,r23
    d7a0:	b00b883a 	mov	r5,r22
    d7a4:	1827883a 	mov	r19,r3
    d7a8:	1039883a 	mov	fp,r2
    d7ac:	0026f740 	call	26f74 <__muldf3>
    d7b0:	980b883a 	mov	r5,r19
    d7b4:	100d883a 	mov	r6,r2
    d7b8:	180f883a 	mov	r7,r3
    d7bc:	e009883a 	mov	r4,fp
    d7c0:	0025aa00 	call	25aa0 <__adddf3>
    d7c4:	01941234 	movhi	r6,20552
    d7c8:	01d01234 	movhi	r7,16456
    d7cc:	3199c604 	addi	r6,r6,26392
    d7d0:	39f63e04 	addi	r7,r7,-9992
    d7d4:	1009883a 	mov	r4,r2
    d7d8:	180b883a 	mov	r5,r3
    d7dc:	00277e00 	call	277e0 <__subdf3>
    d7e0:	180b883a 	mov	r5,r3
    d7e4:	1009883a 	mov	r4,r2
    d7e8:	00280dc0 	call	280dc <__fixdfsi>
    d7ec:	db046d17 	ldw	r12,4532(sp)
    LMS7002M_regs(self)->reg_0x0105_loopb_tbb = 3;
    d7f0:	8009883a 	mov	r4,r16
    LMS7002M_regs_spi_write(self, 0x0105);
    LMS7002M_regs_spi_write(self, 0x0109);
    d7f4:	04c04244 	movi	r19,265
    const double p2 = -0.000210800032517545;
    const double p3 = 0.0190494874803309;
    const double p4 = 1.43317445923528;
    const double p5 = -47.6950779298333;
    const int rcal_lpfh_tbb = (int)(f*f*f*f*p1 + f*f*f*p2 + f*f*p3 + f*p4 + p5);
    LMS7002M_regs(self)->reg_0x0109_rcal_lpfh_tbb = rcal_lpfh_tbb;
    d7f8:	60815a15 	stw	r2,1384(r12)
    LMS7002M_regs(self)->reg_0x0105_loopb_tbb = 3;
    d7fc:	0008ac80 	call	8ac8 <LMS7002M_regs>
    d800:	00c000c4 	movi	r3,3
    d804:	10c14b15 	stw	r3,1324(r2)
    LMS7002M_regs_spi_write(self, 0x0105);
    d808:	01404144 	movi	r5,261
    d80c:	8009883a 	mov	r4,r16
    d810:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x0109);
    d814:	980b883a 	mov	r5,r19
    d818:	8009883a 	mov	r4,r16
    d81c:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    //--- calibration ---//
    status = tx_cal_loop(self, channel, bw,
        &LMS7002M_regs(self)->reg_0x0109_rcal_lpfh_tbb,
    d820:	8009883a 	mov	r4,r16
    d824:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs(self)->reg_0x0105_loopb_tbb = 3;
    LMS7002M_regs_spi_write(self, 0x0105);
    LMS7002M_regs_spi_write(self, 0x0109);

    //--- calibration ---//
    status = tx_cal_loop(self, channel, bw,
    d828:	10815a04 	addi	r2,r2,1384
    d82c:	dcc00115 	stw	r19,4(sp)
    d830:	003f7606 	br	d60c <__alt_data_end+0xfffcee0c>

    //--- check filter bounds ---//
    if (bw < 28e6 || bw > 60e6)
    {
        //LMS7_logf(LMS7_ERROR, "LPFH bandwidth not in range[28 to 60 MHz]");
        status = -1;
    d834:	04ffffc4 	movi	r19,-1
    done:

    ////////////////////////////////////////////////////////////////////
    // stash tbb calibration results
    ////////////////////////////////////////////////////////////////////
    LMS7002M_set_mac_ch(self, channel);
    d838:	a00b883a 	mov	r5,r20
    d83c:	8009883a 	mov	r4,r16
    d840:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>
    const int rcal_lpflad_tbb = LMS7002M_regs(self)->reg_0x0109_rcal_lpflad_tbb;
    d844:	8009883a 	mov	r4,r16
    d848:	0008ac80 	call	8ac8 <LMS7002M_regs>
    d84c:	12015b17 	ldw	r8,1388(r2)
    const int ccal_lpflad_tbb = LMS7002M_regs(self)->reg_0x010a_ccal_lpflad_tbb;
    d850:	8009883a 	mov	r4,r16
    d854:	da046d15 	stw	r8,4532(sp)
    d858:	0008ac80 	call	8ac8 <LMS7002M_regs>
    d85c:	11c15e17 	ldw	r7,1400(r2)
    const int rcal_lpfs5_tbb = LMS7002M_regs(self)->reg_0x010a_rcal_lpfs5_tbb;
    d860:	8009883a 	mov	r4,r16
    d864:	d9c46b15 	stw	r7,4524(sp)
    d868:	0008ac80 	call	8ac8 <LMS7002M_regs>
    d86c:	10c15f17 	ldw	r3,1404(r2)
    const int rcal_lpfh_tbb = LMS7002M_regs(self)->reg_0x0109_rcal_lpfh_tbb;
    d870:	8009883a 	mov	r4,r16
    d874:	d8c46c15 	stw	r3,4528(sp)
    d878:	0008ac80 	call	8ac8 <LMS7002M_regs>

    ////////////////////////////////////////////////////////////////////
    // restore original register values
    ////////////////////////////////////////////////////////////////////
    memcpy(self->_regs, saved_map, sizeof(saved_map));
    d87c:	d9046a17 	ldw	r4,4520(sp)
    d880:	01846804 	movi	r6,4512
    d884:	d9400204 	addi	r5,sp,8
    ////////////////////////////////////////////////////////////////////
    LMS7002M_set_mac_ch(self, channel);
    const int rcal_lpflad_tbb = LMS7002M_regs(self)->reg_0x0109_rcal_lpflad_tbb;
    const int ccal_lpflad_tbb = LMS7002M_regs(self)->reg_0x010a_ccal_lpflad_tbb;
    const int rcal_lpfs5_tbb = LMS7002M_regs(self)->reg_0x010a_rcal_lpfs5_tbb;
    const int rcal_lpfh_tbb = LMS7002M_regs(self)->reg_0x0109_rcal_lpfh_tbb;
    d888:	17015a17 	ldw	fp,1384(r2)

    ////////////////////////////////////////////////////////////////////
    // restore original register values
    ////////////////////////////////////////////////////////////////////
    memcpy(self->_regs, saved_map, sizeof(saved_map));
    d88c:	00127200 	call	12720 <memcpy>
    LMS7002M_regs_to_rfic(self);
    d890:	8009883a 	mov	r4,r16
    d894:	0008ad00 	call	8ad0 <LMS7002M_regs_to_rfic>
    LMS7002M_set_mac_ch(self, channel);
    d898:	a00b883a 	mov	r5,r20
    d89c:	8009883a 	mov	r4,r16
    d8a0:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    ////////////////////////////////////////////////////////////////////
    // apply tbb calibration results
    ////////////////////////////////////////////////////////////////////
    LMS7002M_set_mac_ch(self, channel);
    d8a4:	a00b883a 	mov	r5,r20
    d8a8:	8009883a 	mov	r4,r16
    d8ac:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>
    LMS7002M_regs(self)->reg_0x0109_rcal_lpflad_tbb = rcal_lpflad_tbb;
    d8b0:	8009883a 	mov	r4,r16
    d8b4:	0008ac80 	call	8ac8 <LMS7002M_regs>
    d8b8:	da046d17 	ldw	r8,4532(sp)
    LMS7002M_regs(self)->reg_0x010a_ccal_lpflad_tbb = ccal_lpflad_tbb;
    d8bc:	8009883a 	mov	r4,r16

    ////////////////////////////////////////////////////////////////////
    // apply tbb calibration results
    ////////////////////////////////////////////////////////////////////
    LMS7002M_set_mac_ch(self, channel);
    LMS7002M_regs(self)->reg_0x0109_rcal_lpflad_tbb = rcal_lpflad_tbb;
    d8c0:	12015b15 	stw	r8,1388(r2)
    LMS7002M_regs(self)->reg_0x010a_ccal_lpflad_tbb = ccal_lpflad_tbb;
    d8c4:	0008ac80 	call	8ac8 <LMS7002M_regs>
    d8c8:	d9c46b17 	ldw	r7,4524(sp)
    LMS7002M_regs(self)->reg_0x010a_rcal_lpfs5_tbb = rcal_lpfs5_tbb;
    d8cc:	8009883a 	mov	r4,r16
    ////////////////////////////////////////////////////////////////////
    // apply tbb calibration results
    ////////////////////////////////////////////////////////////////////
    LMS7002M_set_mac_ch(self, channel);
    LMS7002M_regs(self)->reg_0x0109_rcal_lpflad_tbb = rcal_lpflad_tbb;
    LMS7002M_regs(self)->reg_0x010a_ccal_lpflad_tbb = ccal_lpflad_tbb;
    d8d0:	11c15e15 	stw	r7,1400(r2)
    LMS7002M_regs(self)->reg_0x010a_rcal_lpfs5_tbb = rcal_lpfs5_tbb;
    d8d4:	0008ac80 	call	8ac8 <LMS7002M_regs>
    d8d8:	d8c46c17 	ldw	r3,4528(sp)
    LMS7002M_regs(self)->reg_0x0109_rcal_lpfh_tbb = rcal_lpfh_tbb;
    d8dc:	8009883a 	mov	r4,r16
    // apply tbb calibration results
    ////////////////////////////////////////////////////////////////////
    LMS7002M_set_mac_ch(self, channel);
    LMS7002M_regs(self)->reg_0x0109_rcal_lpflad_tbb = rcal_lpflad_tbb;
    LMS7002M_regs(self)->reg_0x010a_ccal_lpflad_tbb = ccal_lpflad_tbb;
    LMS7002M_regs(self)->reg_0x010a_rcal_lpfs5_tbb = rcal_lpfs5_tbb;
    d8e0:	10c15f15 	stw	r3,1404(r2)
    LMS7002M_regs(self)->reg_0x0109_rcal_lpfh_tbb = rcal_lpfh_tbb;
    d8e4:	0008ac80 	call	8ac8 <LMS7002M_regs>
    LMS7002M_regs(self)->reg_0x0108_ict_iamp_frp_tbb = 1;
    d8e8:	8009883a 	mov	r4,r16
    ////////////////////////////////////////////////////////////////////
    LMS7002M_set_mac_ch(self, channel);
    LMS7002M_regs(self)->reg_0x0109_rcal_lpflad_tbb = rcal_lpflad_tbb;
    LMS7002M_regs(self)->reg_0x010a_ccal_lpflad_tbb = ccal_lpflad_tbb;
    LMS7002M_regs(self)->reg_0x010a_rcal_lpfs5_tbb = rcal_lpfs5_tbb;
    LMS7002M_regs(self)->reg_0x0109_rcal_lpfh_tbb = rcal_lpfh_tbb;
    d8ec:	17015a15 	stw	fp,1384(r2)
    LMS7002M_regs(self)->reg_0x0108_ict_iamp_frp_tbb = 1;
    d8f0:	0008ac80 	call	8ac8 <LMS7002M_regs>
    d8f4:	00c00044 	movi	r3,1
    d8f8:	10c15815 	stw	r3,1376(r2)
    LMS7002M_regs(self)->reg_0x0108_ict_iamp_gg_frp_tbb = 6;
    d8fc:	8009883a 	mov	r4,r16
    d900:	0008ac80 	call	8ac8 <LMS7002M_regs>
    d904:	00c00184 	movi	r3,6
    d908:	10c15915 	stw	r3,1380(r2)
    LMS7002M_regs_spi_write(self, 0x0108);
    d90c:	01404204 	movi	r5,264
    d910:	8009883a 	mov	r4,r16
    d914:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x0109);
    d918:	01404244 	movi	r5,265
    d91c:	8009883a 	mov	r4,r16
    d920:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x010a);
    d924:	01404284 	movi	r5,266
    d928:	8009883a 	mov	r4,r16
    d92c:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    ////////////////////////////////////////////////////////////////////
    // set the filter selection
    ////////////////////////////////////////////////////////////////////
    LMS7002M_tbb_set_path(self, channel, path);
    d930:	a80d883a 	mov	r6,r21
    d934:	a00b883a 	mov	r5,r20
    d938:	8009883a 	mov	r4,r16
    d93c:	000c4200 	call	c420 <LMS7002M_tbb_set_path>

    if (bwactual != NULL) *bwactual = bw;
    d940:	d8847a17 	ldw	r2,4584(sp)
    d944:	10000226 	beq	r2,zero,d950 <LMS7002M_tbb_set_filter_bw+0x8a4>
    d948:	14400015 	stw	r17,0(r2)
    d94c:	14800115 	stw	r18,4(r2)
    return status;
}
    d950:	9805883a 	mov	r2,r19
    d954:	dfc47917 	ldw	ra,4580(sp)
    d958:	df047817 	ldw	fp,4576(sp)
    d95c:	ddc47717 	ldw	r23,4572(sp)
    d960:	dd847617 	ldw	r22,4568(sp)
    d964:	dd447517 	ldw	r21,4564(sp)
    d968:	dd047417 	ldw	r20,4560(sp)
    d96c:	dcc47317 	ldw	r19,4556(sp)
    d970:	dc847217 	ldw	r18,4552(sp)
    d974:	dc447117 	ldw	r17,4548(sp)
    d978:	dc047017 	ldw	r16,4544(sp)
    d97c:	dec47a04 	addi	sp,sp,4584
    d980:	f800283a 	ret

0000d984 <LMS7002M_txtsp_enable>:
#include <stdlib.h>
#include <math.h> //M_PI
#include "LMS7002M_impl.h"

void LMS7002M_txtsp_enable(LMS7002M_t *self, const LMS7002M_chan_t channel, const bool enable)
{
    d984:	defffd04 	addi	sp,sp,-12
    d988:	dfc00215 	stw	ra,8(sp)
    d98c:	dc400115 	stw	r17,4(sp)
    d990:	dc000015 	stw	r16,0(sp)
    d994:	3023883a 	mov	r17,r6
    d998:	2021883a 	mov	r16,r4
    LMS7002M_set_mac_ch(self, channel);
    d99c:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    self->regs->reg_0x0200_en = enable?1:0;
    d9a0:	80846917 	ldw	r2,4516(r16)
    d9a4:	8c403fcc 	andi	r17,r17,255
    self->regs->reg_0x0200_bstart = 0;
    self->regs->reg_0x0200_insel = REG_0X0200_INSEL_LML;
    LMS7002M_regs_spi_write(self, 0x0200);
    d9a8:	8009883a 	mov	r4,r16

void LMS7002M_txtsp_enable(LMS7002M_t *self, const LMS7002M_chan_t channel, const bool enable)
{
    LMS7002M_set_mac_ch(self, channel);

    self->regs->reg_0x0200_en = enable?1:0;
    d9ac:	1441d115 	stw	r17,1860(r2)
    self->regs->reg_0x0200_bstart = 0;
    self->regs->reg_0x0200_insel = REG_0X0200_INSEL_LML;
    LMS7002M_regs_spi_write(self, 0x0200);
    d9b0:	04408004 	movi	r17,512
    d9b4:	880b883a 	mov	r5,r17
void LMS7002M_txtsp_enable(LMS7002M_t *self, const LMS7002M_chan_t channel, const bool enable)
{
    LMS7002M_set_mac_ch(self, channel);

    self->regs->reg_0x0200_en = enable?1:0;
    self->regs->reg_0x0200_bstart = 0;
    d9b8:	1001d015 	stw	zero,1856(r2)
    self->regs->reg_0x0200_insel = REG_0X0200_INSEL_LML;
    d9bc:	1001cf15 	stw	zero,1852(r2)
    LMS7002M_regs_spi_write(self, 0x0200);
    d9c0:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    self->regs->reg_0x0203_hbi_ovr = REG_0X0203_HBI_OVR_BYPASS;
    d9c4:	80846917 	ldw	r2,4516(r16)
    d9c8:	00c001c4 	movi	r3,7
    self->regs->reg_0x0208_gfir1_byp = 1;
    self->regs->reg_0x0208_dc_byp = 1;
    self->regs->reg_0x0208_gc_byp = 1;
    self->regs->reg_0x0208_ph_byp = 1;

    LMS7002M_regs_spi_write(self, 0x0200);
    d9cc:	880b883a 	mov	r5,r17
    self->regs->reg_0x0200_en = enable?1:0;
    self->regs->reg_0x0200_bstart = 0;
    self->regs->reg_0x0200_insel = REG_0X0200_INSEL_LML;
    LMS7002M_regs_spi_write(self, 0x0200);

    self->regs->reg_0x0203_hbi_ovr = REG_0X0203_HBI_OVR_BYPASS;
    d9d0:	10c1d415 	stw	r3,1872(r2)

    self->regs->reg_0x0208_cmix_byp = 1;
    d9d4:	00c00044 	movi	r3,1
    d9d8:	10c1e015 	stw	r3,1920(r2)
    self->regs->reg_0x0208_isinc_byp = 1;
    d9dc:	10c1e115 	stw	r3,1924(r2)
    self->regs->reg_0x0208_gfir3_byp = 1;
    d9e0:	10c1e215 	stw	r3,1928(r2)
    self->regs->reg_0x0208_gfir2_byp = 1;
    d9e4:	10c1e315 	stw	r3,1932(r2)
    self->regs->reg_0x0208_gfir1_byp = 1;
    d9e8:	10c1e415 	stw	r3,1936(r2)
    self->regs->reg_0x0208_dc_byp = 1;
    d9ec:	10c1e515 	stw	r3,1940(r2)
    self->regs->reg_0x0208_gc_byp = 1;
    d9f0:	10c1e615 	stw	r3,1944(r2)
    self->regs->reg_0x0208_ph_byp = 1;
    d9f4:	10c1e715 	stw	r3,1948(r2)

    LMS7002M_regs_spi_write(self, 0x0200);
    d9f8:	8009883a 	mov	r4,r16
    d9fc:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x0203);
    da00:	8009883a 	mov	r4,r16
    da04:	014080c4 	movi	r5,515
    da08:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x0208);
    da0c:	01408204 	movi	r5,520
    da10:	8009883a 	mov	r4,r16
}
    da14:	dfc00217 	ldw	ra,8(sp)
    da18:	dc400117 	ldw	r17,4(sp)
    da1c:	dc000017 	ldw	r16,0(sp)
    da20:	dec00304 	addi	sp,sp,12
    self->regs->reg_0x0208_gc_byp = 1;
    self->regs->reg_0x0208_ph_byp = 1;

    LMS7002M_regs_spi_write(self, 0x0200);
    LMS7002M_regs_spi_write(self, 0x0203);
    LMS7002M_regs_spi_write(self, 0x0208);
    da24:	00063001 	jmpi	6300 <LMS7002M_regs_spi_write>

0000da28 <LMS7002M_txtsp_set_interp>:
}

void LMS7002M_txtsp_set_interp(LMS7002M_t *self, const LMS7002M_chan_t channel, const size_t interp)
{
    da28:	defffd04 	addi	sp,sp,-12
    da2c:	dc400115 	stw	r17,4(sp)
    da30:	dc000015 	stw	r16,0(sp)
    da34:	dfc00215 	stw	ra,8(sp)
    da38:	2021883a 	mov	r16,r4
    da3c:	3023883a 	mov	r17,r6
    LMS7002M_set_mac_ch(self, channel);
    da40:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    if (interp == 1) self->regs->reg_0x0203_hbi_ovr = REG_0X0203_HBI_OVR_BYPASS;
    da44:	00c00044 	movi	r3,1
    da48:	88c0041e 	bne	r17,r3,da5c <LMS7002M_txtsp_set_interp+0x34>
    da4c:	80846917 	ldw	r2,4516(r16)
    da50:	00c001c4 	movi	r3,7
    da54:	10c1d415 	stw	r3,1872(r2)
    da58:	00001306 	br	daa8 <LMS7002M_txtsp_set_interp+0x80>
    if (interp == 2) self->regs->reg_0x0203_hbi_ovr = 0;
    da5c:	00800084 	movi	r2,2
    da60:	8880031e 	bne	r17,r2,da70 <LMS7002M_txtsp_set_interp+0x48>
    da64:	80846917 	ldw	r2,4516(r16)
    da68:	1001d415 	stw	zero,1872(r2)
    da6c:	00000e06 	br	daa8 <LMS7002M_txtsp_set_interp+0x80>
    if (interp == 4) self->regs->reg_0x0203_hbi_ovr = 1;
    da70:	01000104 	movi	r4,4
    da74:	8900021e 	bne	r17,r4,da80 <LMS7002M_txtsp_set_interp+0x58>
    da78:	80846917 	ldw	r2,4516(r16)
    da7c:	00000e06 	br	dab8 <LMS7002M_txtsp_set_interp+0x90>
    if (interp == 8) self->regs->reg_0x0203_hbi_ovr = 2;
    da80:	00c00204 	movi	r3,8
    da84:	88c0031e 	bne	r17,r3,da94 <LMS7002M_txtsp_set_interp+0x6c>
    da88:	80c46917 	ldw	r3,4516(r16)
    da8c:	1881d415 	stw	r2,1872(r3)
    da90:	00000a06 	br	dabc <LMS7002M_txtsp_set_interp+0x94>
    if (interp == 16) self->regs->reg_0x0203_hbi_ovr = 3;
    da94:	00800404 	movi	r2,16
    da98:	8880031e 	bne	r17,r2,daa8 <LMS7002M_txtsp_set_interp+0x80>
    da9c:	80846917 	ldw	r2,4516(r16)
    daa0:	00c000c4 	movi	r3,3
    daa4:	00000406 	br	dab8 <LMS7002M_txtsp_set_interp+0x90>
    if (interp == 32) self->regs->reg_0x0203_hbi_ovr = 4;
    daa8:	00800804 	movi	r2,32
    daac:	8880031e 	bne	r17,r2,dabc <LMS7002M_txtsp_set_interp+0x94>
    dab0:	80846917 	ldw	r2,4516(r16)
    dab4:	00c00104 	movi	r3,4
    dab8:	10c1d415 	stw	r3,1872(r2)

    LMS7002M_regs_spi_write(self, 0x0203);
    dabc:	014080c4 	movi	r5,515
    dac0:	8009883a 	mov	r4,r16
}
    dac4:	dfc00217 	ldw	ra,8(sp)
    dac8:	dc400117 	ldw	r17,4(sp)
    dacc:	dc000017 	ldw	r16,0(sp)
    dad0:	dec00304 	addi	sp,sp,12
    if (interp == 4) self->regs->reg_0x0203_hbi_ovr = 1;
    if (interp == 8) self->regs->reg_0x0203_hbi_ovr = 2;
    if (interp == 16) self->regs->reg_0x0203_hbi_ovr = 3;
    if (interp == 32) self->regs->reg_0x0203_hbi_ovr = 4;

    LMS7002M_regs_spi_write(self, 0x0203);
    dad4:	00063001 	jmpi	6300 <LMS7002M_regs_spi_write>

0000dad8 <LMS7002M_txtsp_set_freq>:
}

void LMS7002M_txtsp_set_freq(LMS7002M_t *self, const LMS7002M_chan_t channel, const double freqRel)
{
    dad8:	defff804 	addi	sp,sp,-32
    dadc:	dd400615 	stw	r21,24(sp)
    dae0:	dd000515 	stw	r20,20(sp)
    dae4:	dc800315 	stw	r18,12(sp)
    dae8:	dc400215 	stw	r17,8(sp)
    daec:	dc000115 	stw	r16,4(sp)
    daf0:	3023883a 	mov	r17,r6
    daf4:	2021883a 	mov	r16,r4
    daf8:	3825883a 	mov	r18,r7
    dafc:	dfc00715 	stw	ra,28(sp)
    db00:	dcc00415 	stw	r19,16(sp)
    db04:	2829883a 	mov	r20,r5
    LMS7002M_set_mac_ch(self, channel);
    db08:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>
    self->regs->reg_0x0208_cmix_byp = (freqRel==0.0)?1:0;
    db0c:	000d883a 	mov	r6,zero
    db10:	000f883a 	mov	r7,zero
    db14:	8809883a 	mov	r4,r17
    db18:	900b883a 	mov	r5,r18
    db1c:	85446917 	ldw	r21,4516(r16)
    db20:	0026d1c0 	call	26d1c <__eqdf2>
    db24:	10000226 	beq	r2,zero,db30 <LMS7002M_txtsp_set_freq+0x58>
    db28:	0027883a 	mov	r19,zero
    db2c:	00000106 	br	db34 <LMS7002M_txtsp_set_freq+0x5c>
    db30:	04c00044 	movi	r19,1
    LMS7002M_regs_spi_write(self, 0x0208);
    db34:	8009883a 	mov	r4,r16
}

void LMS7002M_txtsp_set_freq(LMS7002M_t *self, const LMS7002M_chan_t channel, const double freqRel)
{
    LMS7002M_set_mac_ch(self, channel);
    self->regs->reg_0x0208_cmix_byp = (freqRel==0.0)?1:0;
    db38:	acc1e015 	stw	r19,1920(r21)
    LMS7002M_regs_spi_write(self, 0x0208);
    db3c:	01408204 	movi	r5,520
    db40:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_set_nco_freq(self, LMS_TX, channel, freqRel);
    db44:	880f883a 	mov	r7,r17
    db48:	dc800015 	stw	r18,0(sp)
    db4c:	a00d883a 	mov	r6,r20
    db50:	01400044 	movi	r5,1
    db54:	8009883a 	mov	r4,r16
    db58:	00098ac0 	call	98ac <LMS7002M_set_nco_freq>
}
    db5c:	dfc00717 	ldw	ra,28(sp)
    db60:	dd400617 	ldw	r21,24(sp)
    db64:	dd000517 	ldw	r20,20(sp)
    db68:	dcc00417 	ldw	r19,16(sp)
    db6c:	dc800317 	ldw	r18,12(sp)
    db70:	dc400217 	ldw	r17,8(sp)
    db74:	dc000117 	ldw	r16,4(sp)
    db78:	dec00804 	addi	sp,sp,32
    db7c:	f800283a 	ret

0000db80 <LMS7002M_txtsp_tsg_const>:

void LMS7002M_txtsp_tsg_const(LMS7002M_t *self, const LMS7002M_chan_t channel, const int valI, const int valQ)
{
    db80:	defffa04 	addi	sp,sp,-24
    db84:	dfc00515 	stw	ra,20(sp)
    db88:	dd000415 	stw	r20,16(sp)
    db8c:	dcc00315 	stw	r19,12(sp)
    db90:	3829883a 	mov	r20,r7
    db94:	3027883a 	mov	r19,r6
    db98:	dc800215 	stw	r18,8(sp)
    db9c:	dc400115 	stw	r17,4(sp)
    dba0:	dc000015 	stw	r16,0(sp)
    dba4:	2021883a 	mov	r16,r4
    LMS7002M_set_mac_ch(self, channel);
    dba8:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    //muxes
    self->regs->reg_0x0200_tsgfc = REG_0X0200_TSGFC_FS;
    dbac:	80846917 	ldw	r2,4516(r16)
    self->regs->reg_0x0200_tsgmode = REG_0X0200_TSGMODE_DC;
    self->regs->reg_0x0200_insel = REG_0X0200_INSEL_TEST;
    LMS7002M_regs_spi_write(self, 0x0200);
    dbb0:	04408004 	movi	r17,512
void LMS7002M_txtsp_tsg_const(LMS7002M_t *self, const LMS7002M_chan_t channel, const int valI, const int valQ)
{
    LMS7002M_set_mac_ch(self, channel);

    //muxes
    self->regs->reg_0x0200_tsgfc = REG_0X0200_TSGFC_FS;
    dbb4:	04800044 	movi	r18,1
    dbb8:	1481c915 	stw	r18,1828(r2)
    self->regs->reg_0x0200_tsgmode = REG_0X0200_TSGMODE_DC;
    dbbc:	1481ce15 	stw	r18,1848(r2)
    self->regs->reg_0x0200_insel = REG_0X0200_INSEL_TEST;
    dbc0:	1481cf15 	stw	r18,1852(r2)
    LMS7002M_regs_spi_write(self, 0x0200);
    dbc4:	880b883a 	mov	r5,r17
    dbc8:	8009883a 	mov	r4,r16
    dbcc:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    //load I
    self->regs->reg_0x020c_dc_reg = valI;
    dbd0:	80846917 	ldw	r2,4516(r16)
    LMS7002M_regs_spi_write(self, 0x020c);
    dbd4:	8009883a 	mov	r4,r16
    self->regs->reg_0x0200_tsgmode = REG_0X0200_TSGMODE_DC;
    self->regs->reg_0x0200_insel = REG_0X0200_INSEL_TEST;
    LMS7002M_regs_spi_write(self, 0x0200);

    //load I
    self->regs->reg_0x020c_dc_reg = valI;
    dbd8:	14c1ea15 	stw	r19,1960(r2)
    LMS7002M_regs_spi_write(self, 0x020c);
    dbdc:	04c08304 	movi	r19,524
    dbe0:	980b883a 	mov	r5,r19
    dbe4:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    self->regs->reg_0x0200_tsgdcldi = 0;
    dbe8:	80846917 	ldw	r2,4516(r16)
    LMS7002M_regs_spi_write(self, 0x0200);
    dbec:	880b883a 	mov	r5,r17
    dbf0:	8009883a 	mov	r4,r16
    LMS7002M_regs_spi_write(self, 0x0200);

    //load I
    self->regs->reg_0x020c_dc_reg = valI;
    LMS7002M_regs_spi_write(self, 0x020c);
    self->regs->reg_0x0200_tsgdcldi = 0;
    dbf4:	1001cc15 	stw	zero,1840(r2)
    LMS7002M_regs_spi_write(self, 0x0200);
    dbf8:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    self->regs->reg_0x0200_tsgdcldi = 1;
    dbfc:	80846917 	ldw	r2,4516(r16)
    LMS7002M_regs_spi_write(self, 0x0200);
    dc00:	880b883a 	mov	r5,r17
    dc04:	8009883a 	mov	r4,r16
    //load I
    self->regs->reg_0x020c_dc_reg = valI;
    LMS7002M_regs_spi_write(self, 0x020c);
    self->regs->reg_0x0200_tsgdcldi = 0;
    LMS7002M_regs_spi_write(self, 0x0200);
    self->regs->reg_0x0200_tsgdcldi = 1;
    dc08:	1481cc15 	stw	r18,1840(r2)
    LMS7002M_regs_spi_write(self, 0x0200);
    dc0c:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    self->regs->reg_0x0200_tsgdcldi = 0;
    dc10:	80846917 	ldw	r2,4516(r16)
    LMS7002M_regs_spi_write(self, 0x0200);
    dc14:	880b883a 	mov	r5,r17
    dc18:	8009883a 	mov	r4,r16
    LMS7002M_regs_spi_write(self, 0x020c);
    self->regs->reg_0x0200_tsgdcldi = 0;
    LMS7002M_regs_spi_write(self, 0x0200);
    self->regs->reg_0x0200_tsgdcldi = 1;
    LMS7002M_regs_spi_write(self, 0x0200);
    self->regs->reg_0x0200_tsgdcldi = 0;
    dc1c:	1001cc15 	stw	zero,1840(r2)
    LMS7002M_regs_spi_write(self, 0x0200);
    dc20:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    //load Q
    self->regs->reg_0x020c_dc_reg = valQ;
    dc24:	80846917 	ldw	r2,4516(r16)
    LMS7002M_regs_spi_write(self, 0x020c);
    dc28:	980b883a 	mov	r5,r19
    dc2c:	8009883a 	mov	r4,r16
    LMS7002M_regs_spi_write(self, 0x0200);
    self->regs->reg_0x0200_tsgdcldi = 0;
    LMS7002M_regs_spi_write(self, 0x0200);

    //load Q
    self->regs->reg_0x020c_dc_reg = valQ;
    dc30:	1501ea15 	stw	r20,1960(r2)
    LMS7002M_regs_spi_write(self, 0x020c);
    dc34:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    self->regs->reg_0x0200_tsgdcldq = 0;
    dc38:	80846917 	ldw	r2,4516(r16)
    LMS7002M_regs_spi_write(self, 0x0200);
    dc3c:	880b883a 	mov	r5,r17
    dc40:	8009883a 	mov	r4,r16
    LMS7002M_regs_spi_write(self, 0x0200);

    //load Q
    self->regs->reg_0x020c_dc_reg = valQ;
    LMS7002M_regs_spi_write(self, 0x020c);
    self->regs->reg_0x0200_tsgdcldq = 0;
    dc44:	1001cb15 	stw	zero,1836(r2)
    LMS7002M_regs_spi_write(self, 0x0200);
    dc48:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    self->regs->reg_0x0200_tsgdcldq = 1;
    dc4c:	80846917 	ldw	r2,4516(r16)
    LMS7002M_regs_spi_write(self, 0x0200);
    dc50:	880b883a 	mov	r5,r17
    dc54:	8009883a 	mov	r4,r16
    //load Q
    self->regs->reg_0x020c_dc_reg = valQ;
    LMS7002M_regs_spi_write(self, 0x020c);
    self->regs->reg_0x0200_tsgdcldq = 0;
    LMS7002M_regs_spi_write(self, 0x0200);
    self->regs->reg_0x0200_tsgdcldq = 1;
    dc58:	1481cb15 	stw	r18,1836(r2)
    LMS7002M_regs_spi_write(self, 0x0200);
    dc5c:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    self->regs->reg_0x0200_tsgdcldq = 0;
    dc60:	80846917 	ldw	r2,4516(r16)
    LMS7002M_regs_spi_write(self, 0x0200);
    dc64:	880b883a 	mov	r5,r17
    dc68:	8009883a 	mov	r4,r16
    LMS7002M_regs_spi_write(self, 0x020c);
    self->regs->reg_0x0200_tsgdcldq = 0;
    LMS7002M_regs_spi_write(self, 0x0200);
    self->regs->reg_0x0200_tsgdcldq = 1;
    LMS7002M_regs_spi_write(self, 0x0200);
    self->regs->reg_0x0200_tsgdcldq = 0;
    dc6c:	1001cb15 	stw	zero,1836(r2)
    LMS7002M_regs_spi_write(self, 0x0200);
}
    dc70:	dfc00517 	ldw	ra,20(sp)
    dc74:	dd000417 	ldw	r20,16(sp)
    dc78:	dcc00317 	ldw	r19,12(sp)
    dc7c:	dc800217 	ldw	r18,8(sp)
    dc80:	dc400117 	ldw	r17,4(sp)
    dc84:	dc000017 	ldw	r16,0(sp)
    dc88:	dec00604 	addi	sp,sp,24
    self->regs->reg_0x0200_tsgdcldq = 0;
    LMS7002M_regs_spi_write(self, 0x0200);
    self->regs->reg_0x0200_tsgdcldq = 1;
    LMS7002M_regs_spi_write(self, 0x0200);
    self->regs->reg_0x0200_tsgdcldq = 0;
    LMS7002M_regs_spi_write(self, 0x0200);
    dc8c:	00063001 	jmpi	6300 <LMS7002M_regs_spi_write>

0000dc90 <LMS7002M_txtsp_tsg_tone>:
}

void LMS7002M_txtsp_tsg_tone(LMS7002M_t *self, const LMS7002M_chan_t channel)
{
    dc90:	defffc04 	addi	sp,sp,-16
    dc94:	dfc00315 	stw	ra,12(sp)
    dc98:	dc800215 	stw	r18,8(sp)
    dc9c:	dc400115 	stw	r17,4(sp)
    dca0:	dc000015 	stw	r16,0(sp)
    dca4:	2021883a 	mov	r16,r4
    LMS7002M_set_mac_ch(self, channel);
    dca8:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    //muxes
    self->regs->reg_0x0200_tsgmode = REG_0X0200_TSGMODE_NCO;
    dcac:	80846917 	ldw	r2,4516(r16)
    self->regs->reg_0x0200_insel = REG_0X0200_INSEL_TEST;
    dcb0:	04800044 	movi	r18,1
    LMS7002M_regs_spi_write(self, 0x0200);
    dcb4:	04408004 	movi	r17,512
{
    LMS7002M_set_mac_ch(self, channel);

    //muxes
    self->regs->reg_0x0200_tsgmode = REG_0X0200_TSGMODE_NCO;
    self->regs->reg_0x0200_insel = REG_0X0200_INSEL_TEST;
    dcb8:	1481cf15 	stw	r18,1852(r2)
    LMS7002M_regs_spi_write(self, 0x0200);
    dcbc:	880b883a 	mov	r5,r17
    dcc0:	8009883a 	mov	r4,r16
void LMS7002M_txtsp_tsg_tone(LMS7002M_t *self, const LMS7002M_chan_t channel)
{
    LMS7002M_set_mac_ch(self, channel);

    //muxes
    self->regs->reg_0x0200_tsgmode = REG_0X0200_TSGMODE_NCO;
    dcc4:	1001ce15 	stw	zero,1848(r2)
    self->regs->reg_0x0200_insel = REG_0X0200_INSEL_TEST;
    LMS7002M_regs_spi_write(self, 0x0200);
    dcc8:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    self->regs->reg_0x0200_tsgfcw = REG_0X0200_TSGFCW_DIV8;
    dccc:	80846917 	ldw	r2,4516(r16)
    LMS7002M_regs_spi_write(self, 0x0200);
    dcd0:	880b883a 	mov	r5,r17
    dcd4:	8009883a 	mov	r4,r16
    //muxes
    self->regs->reg_0x0200_tsgmode = REG_0X0200_TSGMODE_NCO;
    self->regs->reg_0x0200_insel = REG_0X0200_INSEL_TEST;
    LMS7002M_regs_spi_write(self, 0x0200);

    self->regs->reg_0x0200_tsgfcw = REG_0X0200_TSGFCW_DIV8;
    dcd8:	1481ca15 	stw	r18,1832(r2)
    LMS7002M_regs_spi_write(self, 0x0200);
}
    dcdc:	dfc00317 	ldw	ra,12(sp)
    dce0:	dc800217 	ldw	r18,8(sp)
    dce4:	dc400117 	ldw	r17,4(sp)
    dce8:	dc000017 	ldw	r16,0(sp)
    dcec:	dec00404 	addi	sp,sp,16
    self->regs->reg_0x0200_tsgmode = REG_0X0200_TSGMODE_NCO;
    self->regs->reg_0x0200_insel = REG_0X0200_INSEL_TEST;
    LMS7002M_regs_spi_write(self, 0x0200);

    self->regs->reg_0x0200_tsgfcw = REG_0X0200_TSGFCW_DIV8;
    LMS7002M_regs_spi_write(self, 0x0200);
    dcf0:	00063001 	jmpi	6300 <LMS7002M_regs_spi_write>

0000dcf4 <LMS7002M_txtsp_set_dc_correction>:
void LMS7002M_txtsp_set_dc_correction(
    LMS7002M_t *self,
    const LMS7002M_chan_t channel,
    const double valI,
    const double valQ)
{
    dcf4:	defff904 	addi	sp,sp,-28
    dcf8:	dd400515 	stw	r21,20(sp)
    dcfc:	dd000415 	stw	r20,16(sp)
    dd00:	dcc00315 	stw	r19,12(sp)
    dd04:	dc800215 	stw	r18,8(sp)
    dd08:	dc400115 	stw	r17,4(sp)
    dd0c:	302b883a 	mov	r21,r6
    dd10:	3829883a 	mov	r20,r7
    dd14:	dfc00615 	stw	ra,24(sp)
    dd18:	dc000015 	stw	r16,0(sp)
    dd1c:	2023883a 	mov	r17,r4
    dd20:	dcc00717 	ldw	r19,28(sp)
    dd24:	dc800817 	ldw	r18,32(sp)
    LMS7002M_set_mac_ch(self, channel);
    dd28:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    const bool bypass = (valI == 0.0) && (valQ == 0.0);
    dd2c:	000d883a 	mov	r6,zero
    dd30:	000f883a 	mov	r7,zero
    dd34:	a809883a 	mov	r4,r21
    dd38:	a00b883a 	mov	r5,r20
    dd3c:	0026d1c0 	call	26d1c <__eqdf2>
    dd40:	1000071e 	bne	r2,zero,dd60 <LMS7002M_txtsp_set_dc_correction+0x6c>
    dd44:	000d883a 	mov	r6,zero
    dd48:	000f883a 	mov	r7,zero
    dd4c:	9809883a 	mov	r4,r19
    dd50:	900b883a 	mov	r5,r18
    dd54:	04000044 	movi	r16,1
    dd58:	0026d1c0 	call	26d1c <__eqdf2>
    dd5c:	10000126 	beq	r2,zero,dd64 <LMS7002M_txtsp_set_dc_correction+0x70>
    dd60:	0021883a 	mov	r16,zero
    self->regs->reg_0x0208_dc_byp = bypass?1:0;
    dd64:	88846917 	ldw	r2,4516(r17)
    LMS7002M_regs_spi_write(self, 0x0208);
    dd68:	8809883a 	mov	r4,r17
    dd6c:	01408204 	movi	r5,520
    const double valQ)
{
    LMS7002M_set_mac_ch(self, channel);

    const bool bypass = (valI == 0.0) && (valQ == 0.0);
    self->regs->reg_0x0208_dc_byp = bypass?1:0;
    dd70:	1401e515 	stw	r16,1940(r2)
    LMS7002M_regs_spi_write(self, 0x0208);
    dd74:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    self->regs->reg_0x0204_dccorri = (int)(valI*128);
    dd78:	000d883a 	mov	r6,zero
    dd7c:	01d01834 	movhi	r7,16480
    dd80:	a809883a 	mov	r4,r21
    dd84:	a00b883a 	mov	r5,r20
    dd88:	0026f740 	call	26f74 <__muldf3>
    dd8c:	8c046917 	ldw	r16,4516(r17)
    dd90:	180b883a 	mov	r5,r3
    dd94:	1009883a 	mov	r4,r2
    dd98:	00280dc0 	call	280dc <__fixdfsi>
    self->regs->reg_0x0204_dccorrq = (int)(valQ*128);
    dd9c:	000d883a 	mov	r6,zero
    dda0:	01d01834 	movhi	r7,16480
    dda4:	9809883a 	mov	r4,r19
    dda8:	900b883a 	mov	r5,r18

    const bool bypass = (valI == 0.0) && (valQ == 0.0);
    self->regs->reg_0x0208_dc_byp = bypass?1:0;
    LMS7002M_regs_spi_write(self, 0x0208);

    self->regs->reg_0x0204_dccorri = (int)(valI*128);
    ddac:	8081d615 	stw	r2,1880(r16)
    self->regs->reg_0x0204_dccorrq = (int)(valQ*128);
    ddb0:	0026f740 	call	26f74 <__muldf3>
    ddb4:	180b883a 	mov	r5,r3
    ddb8:	1009883a 	mov	r4,r2
    ddbc:	00280dc0 	call	280dc <__fixdfsi>
    LMS7002M_regs_spi_write(self, 0x0204);
    ddc0:	01408104 	movi	r5,516
    ddc4:	8809883a 	mov	r4,r17
    const bool bypass = (valI == 0.0) && (valQ == 0.0);
    self->regs->reg_0x0208_dc_byp = bypass?1:0;
    LMS7002M_regs_spi_write(self, 0x0208);

    self->regs->reg_0x0204_dccorri = (int)(valI*128);
    self->regs->reg_0x0204_dccorrq = (int)(valQ*128);
    ddc8:	8081d715 	stw	r2,1884(r16)
    LMS7002M_regs_spi_write(self, 0x0204);
}
    ddcc:	dfc00617 	ldw	ra,24(sp)
    ddd0:	dd400517 	ldw	r21,20(sp)
    ddd4:	dd000417 	ldw	r20,16(sp)
    ddd8:	dcc00317 	ldw	r19,12(sp)
    dddc:	dc800217 	ldw	r18,8(sp)
    dde0:	dc400117 	ldw	r17,4(sp)
    dde4:	dc000017 	ldw	r16,0(sp)
    dde8:	dec00704 	addi	sp,sp,28
    self->regs->reg_0x0208_dc_byp = bypass?1:0;
    LMS7002M_regs_spi_write(self, 0x0208);

    self->regs->reg_0x0204_dccorri = (int)(valI*128);
    self->regs->reg_0x0204_dccorrq = (int)(valQ*128);
    LMS7002M_regs_spi_write(self, 0x0204);
    ddec:	00063001 	jmpi	6300 <LMS7002M_regs_spi_write>

0000ddf0 <LMS7002M_txtsp_set_iq_correction>:
void LMS7002M_txtsp_set_iq_correction(
    LMS7002M_t *self,
    const LMS7002M_chan_t channel,
    const double phase,
    const double gain)
{
    ddf0:	defff804 	addi	sp,sp,-32
    ddf4:	dd800615 	stw	r22,24(sp)
    ddf8:	dd400515 	stw	r21,20(sp)
    ddfc:	dc800215 	stw	r18,8(sp)
    de00:	dc400115 	stw	r17,4(sp)
    de04:	dc000015 	stw	r16,0(sp)
    de08:	302d883a 	mov	r22,r6
    de0c:	382b883a 	mov	r21,r7
    de10:	dfc00715 	stw	ra,28(sp)
    de14:	dd000415 	stw	r20,16(sp)
    de18:	dcc00315 	stw	r19,12(sp)
    de1c:	2021883a 	mov	r16,r4
    de20:	dc800817 	ldw	r18,32(sp)
    de24:	dc400917 	ldw	r17,36(sp)
    LMS7002M_set_mac_ch(self, channel);
    de28:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    const bool bypassPhase = (phase == 0.0);
    de2c:	000d883a 	mov	r6,zero
    de30:	000f883a 	mov	r7,zero
    de34:	b009883a 	mov	r4,r22
    de38:	a80b883a 	mov	r5,r21
    de3c:	0026d1c0 	call	26d1c <__eqdf2>
    de40:	10000226 	beq	r2,zero,de4c <LMS7002M_txtsp_set_iq_correction+0x5c>
    de44:	0029883a 	mov	r20,zero
    de48:	00000106 	br	de50 <LMS7002M_txtsp_set_iq_correction+0x60>
    de4c:	05000044 	movi	r20,1
    const bool bypassGain = (gain == 1.0) || (gain == 0.0);
    de50:	000d883a 	mov	r6,zero
    de54:	01cffc34 	movhi	r7,16368
    de58:	9009883a 	mov	r4,r18
    de5c:	880b883a 	mov	r5,r17
    de60:	0026d1c0 	call	26d1c <__eqdf2>
    de64:	04c00044 	movi	r19,1
    de68:	10000726 	beq	r2,zero,de88 <LMS7002M_txtsp_set_iq_correction+0x98>
    de6c:	000d883a 	mov	r6,zero
    de70:	000f883a 	mov	r7,zero
    de74:	9009883a 	mov	r4,r18
    de78:	880b883a 	mov	r5,r17
    de7c:	0026d1c0 	call	26d1c <__eqdf2>
    de80:	10000126 	beq	r2,zero,de88 <LMS7002M_txtsp_set_iq_correction+0x98>
    de84:	0027883a 	mov	r19,zero
    self->regs->reg_0x0208_ph_byp = bypassPhase?1:0;
    de88:	80846917 	ldw	r2,4516(r16)
    de8c:	a5003fcc 	andi	r20,r20,255
    self->regs->reg_0x0208_gc_byp = bypassGain?1:0;
    LMS7002M_regs_spi_write(self, 0x0208);
    de90:	01408204 	movi	r5,520
{
    LMS7002M_set_mac_ch(self, channel);

    const bool bypassPhase = (phase == 0.0);
    const bool bypassGain = (gain == 1.0) || (gain == 0.0);
    self->regs->reg_0x0208_ph_byp = bypassPhase?1:0;
    de94:	1501e715 	stw	r20,1948(r2)
    self->regs->reg_0x0208_gc_byp = bypassGain?1:0;
    de98:	14c1e615 	stw	r19,1944(r2)
    LMS7002M_regs_spi_write(self, 0x0208);
    de9c:	8009883a 	mov	r4,r16
    dea0:	00063000 	call	6300 <LMS7002M_regs_spi_write>

    self->regs->reg_0x0203_iqcorr = (int)(2047*(phase/(M_PI/2)));
    dea4:	01951134 	movhi	r6,21572
    dea8:	01cffe74 	movhi	r7,16377
    deac:	318b4604 	addi	r6,r6,11544
    deb0:	39c87ec4 	addi	r7,r7,8699
    deb4:	b009883a 	mov	r4,r22
    deb8:	a80b883a 	mov	r5,r21
    debc:	002634c0 	call	2634c <__divdf3>
    dec0:	01d02834 	movhi	r7,16544
    dec4:	000d883a 	mov	r6,zero
    dec8:	39ff0004 	addi	r7,r7,-1024
    decc:	1009883a 	mov	r4,r2
    ded0:	180b883a 	mov	r5,r3
    ded4:	0026f740 	call	26f74 <__muldf3>
    ded8:	84c46917 	ldw	r19,4516(r16)
    dedc:	1009883a 	mov	r4,r2
    dee0:	180b883a 	mov	r5,r3
    dee4:	00280dc0 	call	280dc <__fixdfsi>
    self->regs->reg_0x0202_gcorri = 2047;
    dee8:	0501ffc4 	movi	r20,2047
    const bool bypassGain = (gain == 1.0) || (gain == 0.0);
    self->regs->reg_0x0208_ph_byp = bypassPhase?1:0;
    self->regs->reg_0x0208_gc_byp = bypassGain?1:0;
    LMS7002M_regs_spi_write(self, 0x0208);

    self->regs->reg_0x0203_iqcorr = (int)(2047*(phase/(M_PI/2)));
    deec:	9881d515 	stw	r2,1876(r19)
    self->regs->reg_0x0202_gcorri = 2047;
    def0:	9d01d315 	stw	r20,1868(r19)
    self->regs->reg_0x0201_gcorrq = 2047;
    if (gain > 1.0) self->regs->reg_0x0201_gcorrq = (int)((1.0/gain)*2047);
    def4:	000d883a 	mov	r6,zero
    def8:	01cffc34 	movhi	r7,16368
    defc:	9009883a 	mov	r4,r18
    df00:	880b883a 	mov	r5,r17
    df04:	0026da40 	call	26da4 <__gedf2>
    df08:	00800216 	blt	zero,r2,df14 <LMS7002M_txtsp_set_iq_correction+0x124>
    self->regs->reg_0x0208_gc_byp = bypassGain?1:0;
    LMS7002M_regs_spi_write(self, 0x0208);

    self->regs->reg_0x0203_iqcorr = (int)(2047*(phase/(M_PI/2)));
    self->regs->reg_0x0202_gcorri = 2047;
    self->regs->reg_0x0201_gcorrq = 2047;
    df0c:	9d01d215 	stw	r20,1864(r19)
    df10:	00000f06 	br	df50 <LMS7002M_txtsp_set_iq_correction+0x160>
    if (gain > 1.0) self->regs->reg_0x0201_gcorrq = (int)((1.0/gain)*2047);
    df14:	900d883a 	mov	r6,r18
    df18:	880f883a 	mov	r7,r17
    df1c:	0009883a 	mov	r4,zero
    df20:	014ffc34 	movhi	r5,16368
    df24:	002634c0 	call	2634c <__divdf3>
    df28:	01d02834 	movhi	r7,16544
    df2c:	000d883a 	mov	r6,zero
    df30:	39ff0004 	addi	r7,r7,-1024
    df34:	1009883a 	mov	r4,r2
    df38:	180b883a 	mov	r5,r3
    df3c:	0026f740 	call	26f74 <__muldf3>
    df40:	1009883a 	mov	r4,r2
    df44:	180b883a 	mov	r5,r3
    df48:	00280dc0 	call	280dc <__fixdfsi>
    df4c:	9881d215 	stw	r2,1864(r19)
    if (gain < 1.0) self->regs->reg_0x0202_gcorri = (int)((gain/1.0)*2047);
    df50:	000d883a 	mov	r6,zero
    df54:	01cffc34 	movhi	r7,16368
    df58:	9009883a 	mov	r4,r18
    df5c:	880b883a 	mov	r5,r17
    df60:	0026e800 	call	26e80 <__ledf2>
    df64:	10000a0e 	bge	r2,zero,df90 <LMS7002M_txtsp_set_iq_correction+0x1a0>
    df68:	01d02834 	movhi	r7,16544
    df6c:	000d883a 	mov	r6,zero
    df70:	39ff0004 	addi	r7,r7,-1024
    df74:	9009883a 	mov	r4,r18
    df78:	880b883a 	mov	r5,r17
    df7c:	0026f740 	call	26f74 <__muldf3>
    df80:	1009883a 	mov	r4,r2
    df84:	180b883a 	mov	r5,r3
    df88:	00280dc0 	call	280dc <__fixdfsi>
    df8c:	9881d315 	stw	r2,1868(r19)

    LMS7002M_regs_spi_write(self, 0x0203);
    df90:	8009883a 	mov	r4,r16
    df94:	014080c4 	movi	r5,515
    df98:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x0202);
    df9c:	8009883a 	mov	r4,r16
    dfa0:	01408084 	movi	r5,514
    dfa4:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_regs_spi_write(self, 0x0201);
    dfa8:	01408044 	movi	r5,513
    dfac:	8009883a 	mov	r4,r16
}
    dfb0:	dfc00717 	ldw	ra,28(sp)
    dfb4:	dd800617 	ldw	r22,24(sp)
    dfb8:	dd400517 	ldw	r21,20(sp)
    dfbc:	dd000417 	ldw	r20,16(sp)
    dfc0:	dcc00317 	ldw	r19,12(sp)
    dfc4:	dc800217 	ldw	r18,8(sp)
    dfc8:	dc400117 	ldw	r17,4(sp)
    dfcc:	dc000017 	ldw	r16,0(sp)
    dfd0:	dec00804 	addi	sp,sp,32
    if (gain > 1.0) self->regs->reg_0x0201_gcorrq = (int)((1.0/gain)*2047);
    if (gain < 1.0) self->regs->reg_0x0202_gcorri = (int)((gain/1.0)*2047);

    LMS7002M_regs_spi_write(self, 0x0203);
    LMS7002M_regs_spi_write(self, 0x0202);
    LMS7002M_regs_spi_write(self, 0x0201);
    dfd4:	00063001 	jmpi	6300 <LMS7002M_regs_spi_write>

0000dfd8 <LMS7002M_read_vco_cmp>:
#include "platform.h"
#include <LMS7002M/LMS7002M_time.h>
#include <LMS7002M/LMS7002M_logger.h>

static void LMS7002M_read_vco_cmp(LMS7002M_t *self, const int vco_cmp_addr)
{
    dfd8:	defffd04 	addi	sp,sp,-12
    dfdc:	dfc00215 	stw	ra,8(sp)
    dfe0:	dc400115 	stw	r17,4(sp)
    dfe4:	dc000015 	stw	r16,0(sp)
    dfe8:	2823883a 	mov	r17,r5
    dfec:	2021883a 	mov	r16,r4
    //an initial read forces spi writes to be flushed
    //any read will do, the address does not matter
    LMS7002M_regs_spi_read(self, vco_cmp_addr);
    dff0:	0008a8c0 	call	8a8c <LMS7002M_regs_spi_read>

    //sleep while the comparator value settles
    mdelay(1);// supervise that time actualy longs 1ms
    dff4:	01000044 	movi	r4,1
    dff8:	000e52c0 	call	e52c <mdelay>
    //LMS7_sleep_for(LMS7_time_tps()/1000); //1 ms -> ticks

    //final read of the comparator after settling
    LMS7002M_regs_spi_read(self, vco_cmp_addr);
    dffc:	880b883a 	mov	r5,r17
    e000:	8009883a 	mov	r4,r16
}
    e004:	dfc00217 	ldw	ra,8(sp)
    e008:	dc400117 	ldw	r17,4(sp)
    e00c:	dc000017 	ldw	r16,0(sp)
    e010:	dec00304 	addi	sp,sp,12
    //sleep while the comparator value settles
    mdelay(1);// supervise that time actualy longs 1ms
    //LMS7_sleep_for(LMS7_time_tps()/1000); //1 ms -> ticks

    //final read of the comparator after settling
    LMS7002M_regs_spi_read(self, vco_cmp_addr);
    e014:	0008a8c1 	jmpi	8a8c <LMS7002M_regs_spi_read>

0000e018 <LMS7002M_tune_vco_sweep>:
    int *vco_cmplo_reg,
    const int vco_cmp_addr,
    const int start_point,
    int *lo, int *hi
)
{
    e018:	defff604 	addi	sp,sp,-40
    int csw_lowest = start_point+128;
    e01c:	d8800c17 	ldw	r2,48(sp)
    int *vco_cmplo_reg,
    const int vco_cmp_addr,
    const int start_point,
    int *lo, int *hi
)
{
    e020:	dd800615 	stw	r22,24(sp)
    e024:	dd800a17 	ldw	r22,40(sp)
    e028:	df000815 	stw	fp,32(sp)
    e02c:	ddc00715 	stw	r23,28(sp)
    e030:	dd400515 	stw	r21,20(sp)
    e034:	dd000415 	stw	r20,16(sp)
    e038:	dcc00315 	stw	r19,12(sp)
    e03c:	dc400115 	stw	r17,4(sp)
    e040:	dc000015 	stw	r16,0(sp)
    e044:	dfc00915 	stw	ra,36(sp)
    e048:	dc800215 	stw	r18,8(sp)
    e04c:	2027883a 	mov	r19,r4
    e050:	2821883a 	mov	r16,r5
    e054:	302b883a 	mov	r21,r6
    e058:	3829883a 	mov	r20,r7
    int csw_lowest = start_point+128;
    e05c:	14402004 	addi	r17,r2,128
    *vco_csw_reg = start_point;
    e060:	28800015 	stw	r2,0(r5)
    for (int i = 6; i >= 0; i--)
    e064:	05c00184 	movi	r23,6
    {
        *vco_csw_reg |= 1 << i;
    e068:	07000044 	movi	fp,1
    e06c:	80c00017 	ldw	r3,0(r16)
    e070:	e5e4983a 	sll	r18,fp,r23
        LMS7002M_regs_spi_write(self, vco_csw_addr);
    e074:	a80b883a 	mov	r5,r21
    e078:	9809883a 	mov	r4,r19
{
    int csw_lowest = start_point+128;
    *vco_csw_reg = start_point;
    for (int i = 6; i >= 0; i--)
    {
        *vco_csw_reg |= 1 << i;
    e07c:	1c86b03a 	or	r3,r3,r18
    e080:	80c00015 	stw	r3,0(r16)
        LMS7002M_regs_spi_write(self, vco_csw_addr);
    e084:	00063000 	call	6300 <LMS7002M_regs_spi_write>
        LMS7002M_read_vco_cmp(self, vco_cmp_addr);
    e088:	d9400b17 	ldw	r5,44(sp)
    e08c:	9809883a 	mov	r4,r19
    e090:	000dfd80 	call	dfd8 <LMS7002M_read_vco_cmp>

        //LMS7_logf(LMS7_DEBUG, "i=%d, hi=%d, lo=%d", i, *vco_cmpho_reg, *vco_cmplo_reg);
        if (*vco_cmplo_reg != 0)
    e094:	b0c00017 	ldw	r3,0(r22)
    e098:	18000426 	beq	r3,zero,e0ac <LMS7002M_tune_vco_sweep+0x94>
        {
            *vco_csw_reg &= ~(1 << i); //clear bit i
    e09c:	80c00017 	ldw	r3,0(r16)
    e0a0:	04a4303a 	nor	r18,zero,r18
    e0a4:	1ca4703a 	and	r18,r3,r18
    e0a8:	84800015 	stw	r18,0(r16)
        }
        if (*vco_cmpho_reg != 0 && *vco_cmplo_reg == 0 && *vco_csw_reg < csw_lowest)
    e0ac:	a0c00017 	ldw	r3,0(r20)
    e0b0:	18000526 	beq	r3,zero,e0c8 <LMS7002M_tune_vco_sweep+0xb0>
    e0b4:	b0c00017 	ldw	r3,0(r22)
    e0b8:	1800031e 	bne	r3,zero,e0c8 <LMS7002M_tune_vco_sweep+0xb0>
    e0bc:	80c00017 	ldw	r3,0(r16)
    e0c0:	1c40010e 	bge	r3,r17,e0c8 <LMS7002M_tune_vco_sweep+0xb0>
    e0c4:	1823883a 	mov	r17,r3
        {
            csw_lowest = *vco_csw_reg;
        }
        LMS7002M_regs_spi_write(self, vco_csw_addr);
    e0c8:	a80b883a 	mov	r5,r21
    e0cc:	9809883a 	mov	r4,r19
    e0d0:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    int *lo, int *hi
)
{
    int csw_lowest = start_point+128;
    *vco_csw_reg = start_point;
    for (int i = 6; i >= 0; i--)
    e0d4:	bdffffc4 	addi	r23,r23,-1
    e0d8:	00bfffc4 	movi	r2,-1
    e0dc:	b8bfe31e 	bne	r23,r2,e06c <__alt_data_end+0xfffcf86c>
        }
        LMS7002M_regs_spi_write(self, vco_csw_addr);
    }

    //find the midpoint for the high and low bounds
    int csw_highest = *vco_csw_reg;
    e0e0:	84800017 	ldw	r18,0(r16)
    while (csw_lowest <= csw_highest && csw_lowest > start_point)
    e0e4:	94401016 	blt	r18,r17,e128 <LMS7002M_tune_vco_sweep+0x110>
    e0e8:	d8800c17 	ldw	r2,48(sp)
    e0ec:	14400e0e 	bge	r2,r17,e128 <LMS7002M_tune_vco_sweep+0x110>
    {
        csw_lowest--;
    e0f0:	8dffffc4 	addi	r23,r17,-1
        *vco_csw_reg = csw_lowest;
        LMS7002M_regs_spi_write(self, vco_csw_addr);
    e0f4:	a80b883a 	mov	r5,r21
    e0f8:	9809883a 	mov	r4,r19
    //find the midpoint for the high and low bounds
    int csw_highest = *vco_csw_reg;
    while (csw_lowest <= csw_highest && csw_lowest > start_point)
    {
        csw_lowest--;
        *vco_csw_reg = csw_lowest;
    e0fc:	85c00015 	stw	r23,0(r16)
        LMS7002M_regs_spi_write(self, vco_csw_addr);
    e100:	00063000 	call	6300 <LMS7002M_regs_spi_write>
        LMS7002M_read_vco_cmp(self, vco_cmp_addr);
    e104:	d9400b17 	ldw	r5,44(sp)
    e108:	9809883a 	mov	r4,r19
    e10c:	000dfd80 	call	dfd8 <LMS7002M_read_vco_cmp>

        if (*vco_cmpho_reg != 0 && *vco_cmplo_reg == 0) continue;
    e110:	a0800017 	ldw	r2,0(r20)
    e114:	10000426 	beq	r2,zero,e128 <LMS7002M_tune_vco_sweep+0x110>
    e118:	b0800017 	ldw	r2,0(r22)
    e11c:	1000021e 	bne	r2,zero,e128 <LMS7002M_tune_vco_sweep+0x110>

    //find the midpoint for the high and low bounds
    int csw_highest = *vco_csw_reg;
    while (csw_lowest <= csw_highest && csw_lowest > start_point)
    {
        csw_lowest--;
    e120:	b823883a 	mov	r17,r23
    e124:	003fef06 	br	e0e4 <__alt_data_end+0xfffcf8e4>
        if (*vco_cmpho_reg != 0 && *vco_cmplo_reg == 0) continue;
        csw_lowest++;
        break;
    }

    *lo = csw_lowest;
    e128:	d8800d17 	ldw	r2,52(sp)
    e12c:	14400015 	stw	r17,0(r2)
    *hi = csw_highest;
    e130:	d8800e17 	ldw	r2,56(sp)
    e134:	14800015 	stw	r18,0(r2)
    //LMS7_logf(LMS7_DEBUG, "lowest CSW_VCO %i, highest CSW_VCO %i", csw_lowest, csw_highest);
    return 0;
}
    e138:	0005883a 	mov	r2,zero
    e13c:	dfc00917 	ldw	ra,36(sp)
    e140:	df000817 	ldw	fp,32(sp)
    e144:	ddc00717 	ldw	r23,28(sp)
    e148:	dd800617 	ldw	r22,24(sp)
    e14c:	dd400517 	ldw	r21,20(sp)
    e150:	dd000417 	ldw	r20,16(sp)
    e154:	dcc00317 	ldw	r19,12(sp)
    e158:	dc800217 	ldw	r18,8(sp)
    e15c:	dc400117 	ldw	r17,4(sp)
    e160:	dc000017 	ldw	r16,0(sp)
    e164:	dec00a04 	addi	sp,sp,40
    e168:	f800283a 	ret

0000e16c <LMS7002M_tune_vco>:
    const int vco_csw_addr,
    int *vco_cmpho_reg,
    int *vco_cmplo_reg,
    const int vco_cmp_addr
)
{
    e16c:	defff004 	addi	sp,sp,-64
    e170:	dfc00f15 	stw	ra,60(sp)
    e174:	dd400e15 	stw	r21,56(sp)
    e178:	dd000d15 	stw	r20,52(sp)
    e17c:	dcc00c15 	stw	r19,48(sp)
    e180:	dc800b15 	stw	r18,44(sp)
    e184:	dc400a15 	stw	r17,40(sp)
    e188:	dc000915 	stw	r16,36(sp)
    e18c:	dcc01117 	ldw	r19,68(sp)
   
    //check comparator under minimum setting
    *vco_csw_reg = 0;
    e190:	28000015 	stw	zero,0(r5)
    const int vco_csw_addr,
    int *vco_cmpho_reg,
    int *vco_cmplo_reg,
    const int vco_cmp_addr
)
{
    e194:	282b883a 	mov	r21,r5
   
    //check comparator under minimum setting
    *vco_csw_reg = 0;
    LMS7002M_regs_spi_write(self, vco_csw_addr);
    e198:	300b883a 	mov	r5,r6
    const int vco_csw_addr,
    int *vco_cmpho_reg,
    int *vco_cmplo_reg,
    const int vco_cmp_addr
)
{
    e19c:	3825883a 	mov	r18,r7
    e1a0:	2021883a 	mov	r16,r4
    e1a4:	3029883a 	mov	r20,r6
    e1a8:	dc401017 	ldw	r17,64(sp)
   
    //check comparator under minimum setting
    *vco_csw_reg = 0;
    LMS7002M_regs_spi_write(self, vco_csw_addr);
    e1ac:	00063000 	call	6300 <LMS7002M_regs_spi_write>
     
    LMS7002M_read_vco_cmp(self, vco_cmp_addr);
    e1b0:	980b883a 	mov	r5,r19
    e1b4:	8009883a 	mov	r4,r16
    e1b8:	000dfd80 	call	dfd8 <LMS7002M_read_vco_cmp>
    if (*vco_cmpho_reg == 1 && *vco_cmplo_reg == 1)
    e1bc:	90800017 	ldw	r2,0(r18)
    e1c0:	00c00044 	movi	r3,1
    e1c4:	10c0051e 	bne	r2,r3,e1dc <LMS7002M_tune_vco+0x70>
    e1c8:	88c00017 	ldw	r3,0(r17)
    e1cc:	1880031e 	bne	r3,r2,e1dc <LMS7002M_tune_vco+0x70>
    {
        LMS7_log(LMS7_DEBUG, "VCO select FAIL - too high");
    e1d0:	014000f4 	movhi	r5,3
    e1d4:	29647d04 	addi	r5,r5,-28172
    e1d8:	00004b06 	br	e308 <LMS7002M_tune_vco+0x19c>
        return -1;
    }

    //check comparator under maximum setting
    *vco_csw_reg = 255;
    e1dc:	00803fc4 	movi	r2,255
    e1e0:	a8800015 	stw	r2,0(r21)
    LMS7002M_regs_spi_write(self, vco_csw_addr);
    e1e4:	a00b883a 	mov	r5,r20
    e1e8:	8009883a 	mov	r4,r16
    e1ec:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    LMS7002M_read_vco_cmp(self, vco_cmp_addr);
    e1f0:	980b883a 	mov	r5,r19
    e1f4:	8009883a 	mov	r4,r16
    e1f8:	000dfd80 	call	dfd8 <LMS7002M_read_vco_cmp>
    if (*vco_cmpho_reg == 0 && *vco_cmplo_reg == 0)
    e1fc:	90800017 	ldw	r2,0(r18)
    e200:	1000051e 	bne	r2,zero,e218 <LMS7002M_tune_vco+0xac>
    e204:	88800017 	ldw	r2,0(r17)
    e208:	1000031e 	bne	r2,zero,e218 <LMS7002M_tune_vco+0xac>
    {
        LMS7_log(LMS7_DEBUG, "VCO select FAIL - too low");
    e20c:	014000f4 	movhi	r5,3
    e210:	29648404 	addi	r5,r5,-28144
    e214:	00003c06 	br	e308 <LMS7002M_tune_vco+0x19c>
        return -1;
    }
   
    //search both segments of the 8-bit space
    int lo0, hi0, lo1, hi1;
    LMS7002M_tune_vco_sweep(self, vco_csw_reg, vco_csw_addr, vco_cmpho_reg, vco_cmplo_reg, vco_cmp_addr, 0, &lo0, &hi0);
    e218:	d8800704 	addi	r2,sp,28
    e21c:	d8800415 	stw	r2,16(sp)
    e220:	d8800804 	addi	r2,sp,32
    e224:	900f883a 	mov	r7,r18
    e228:	a00d883a 	mov	r6,r20
    e22c:	a80b883a 	mov	r5,r21
    e230:	8009883a 	mov	r4,r16
    e234:	d8800315 	stw	r2,12(sp)
    e238:	d8000215 	stw	zero,8(sp)
    e23c:	dcc00115 	stw	r19,4(sp)
    e240:	dc400015 	stw	r17,0(sp)
    e244:	000e0180 	call	e018 <LMS7002M_tune_vco_sweep>
    LMS7002M_tune_vco_sweep(self, vco_csw_reg, vco_csw_addr, vco_cmpho_reg, vco_cmplo_reg, vco_cmp_addr, 128, &lo1, &hi1);
    e248:	d8800504 	addi	r2,sp,20
    e24c:	d8800415 	stw	r2,16(sp)
    e250:	d8800604 	addi	r2,sp,24
    e254:	d8800315 	stw	r2,12(sp)
    e258:	00802004 	movi	r2,128
    e25c:	a00d883a 	mov	r6,r20
    e260:	a80b883a 	mov	r5,r21
    e264:	8009883a 	mov	r4,r16
    e268:	d8800215 	stw	r2,8(sp)
    e26c:	dcc00115 	stw	r19,4(sp)
    e270:	dc400015 	stw	r17,0(sp)
    e274:	900f883a 	mov	r7,r18
    e278:	000e0180 	call	e018 <LMS7002M_tune_vco_sweep>

    //determine overall high-low with overlap
    int csw_lowest, csw_highest;
    if (hi0 == lo1-1)
    e27c:	d9000617 	ldw	r4,24(sp)
    e280:	d8800717 	ldw	r2,28(sp)
    e284:	d8c00817 	ldw	r3,32(sp)
    e288:	21bfffc4 	addi	r6,r4,-1
    e28c:	d9400517 	ldw	r5,20(sp)
    e290:	3080021e 	bne	r6,r2,e29c <LMS7002M_tune_vco+0x130>
    {
        csw_lowest = lo0;
        csw_highest = hi1;
    e294:	2805883a 	mov	r2,r5
    e298:	00000506 	br	e2b0 <LMS7002M_tune_vco+0x144>
    }

    //otherwise use bigger range
    else if ((hi0-lo0) > (hi1-lo1))
    e29c:	10cdc83a 	sub	r6,r2,r3
    e2a0:	290fc83a 	sub	r7,r5,r4
    e2a4:	39800216 	blt	r7,r6,e2b0 <LMS7002M_tune_vco+0x144>
        csw_highest = hi0;
    }
    else
    {
        csw_lowest = lo1;
        csw_highest = hi1;
    e2a8:	2805883a 	mov	r2,r5
        csw_lowest = lo0;
        csw_highest = hi0;
    }
    else
    {
        csw_lowest = lo1;
    e2ac:	2007883a 	mov	r3,r4
        csw_highest = hi1;
    }

    //set the midpoint of the search
    *vco_csw_reg = (csw_highest+csw_lowest)/2;
    e2b0:	1885883a 	add	r2,r3,r2
    e2b4:	1006d7fa 	srli	r3,r2,31
    LMS7002M_regs_spi_write(self, vco_csw_addr);
    e2b8:	a00b883a 	mov	r5,r20
    e2bc:	8009883a 	mov	r4,r16
        csw_lowest = lo1;
        csw_highest = hi1;
    }

    //set the midpoint of the search
    *vco_csw_reg = (csw_highest+csw_lowest)/2;
    e2c0:	1885883a 	add	r2,r3,r2
    e2c4:	1005d07a 	srai	r2,r2,1
    e2c8:	a8800015 	stw	r2,0(r21)
    LMS7002M_regs_spi_write(self, vco_csw_addr);
    e2cc:	00063000 	call	6300 <LMS7002M_regs_spi_write>
    //LMS7_logf(LMS7_DEBUG, "lowest CSW_VCO %i, highest CSW_VCO %i, CSW_VCO %i", csw_lowest, csw_highest, *vco_csw_reg);

    //check that the vco selection was successful
    LMS7002M_read_vco_cmp(self, vco_cmp_addr);
    e2d0:	980b883a 	mov	r5,r19
    e2d4:	8009883a 	mov	r4,r16
    e2d8:	000dfd80 	call	dfd8 <LMS7002M_read_vco_cmp>
    if (*vco_cmpho_reg != 0 && *vco_cmplo_reg == 0)
    e2dc:	90800017 	ldw	r2,0(r18)
    e2e0:	10000726 	beq	r2,zero,e300 <LMS7002M_tune_vco+0x194>
    e2e4:	8c000017 	ldw	r16,0(r17)
    e2e8:	8000051e 	bne	r16,zero,e300 <LMS7002M_tune_vco+0x194>
    {
        LMS7_log(LMS7_DEBUG, "VCO OK");
    e2ec:	014000f4 	movhi	r5,3
    e2f0:	29648b04 	addi	r5,r5,-28116
    e2f4:	010001c4 	movi	r4,7
    e2f8:	00098580 	call	9858 <LMS7_log>
    {
        LMS7_log(LMS7_DEBUG, "VCO select FAIL");
        return -1;
    }
    
    return 0;
    e2fc:	00000506 	br	e314 <LMS7002M_tune_vco+0x1a8>
    {
        LMS7_log(LMS7_DEBUG, "VCO OK");
    }
    else
    {
        LMS7_log(LMS7_DEBUG, "VCO select FAIL");
    e300:	014000f4 	movhi	r5,3
    e304:	29634d04 	addi	r5,r5,-29388
    e308:	010001c4 	movi	r4,7
    e30c:	00098580 	call	9858 <LMS7_log>
        return -1;
    e310:	043fffc4 	movi	r16,-1
    }
    
    return 0;
}
    e314:	8005883a 	mov	r2,r16
    e318:	dfc00f17 	ldw	ra,60(sp)
    e31c:	dd400e17 	ldw	r21,56(sp)
    e320:	dd000d17 	ldw	r20,52(sp)
    e324:	dcc00c17 	ldw	r19,48(sp)
    e328:	dc800b17 	ldw	r18,44(sp)
    e32c:	dc400a17 	ldw	r17,40(sp)
    e330:	dc000917 	ldw	r16,36(sp)
    e334:	dec01004 	addi	sp,sp,64
    e338:	f800283a 	ret

0000e33c <LMS7002M_xbuf_share_tx>:
///

#include "LMS7002M_impl.h"

void LMS7002M_xbuf_share_tx(LMS7002M_t *self, const bool enable)
{
    e33c:	defffd04 	addi	sp,sp,-12
    e340:	dc000015 	stw	r16,0(sp)
    e344:	2821883a 	mov	r16,r5
    //XBUF is a global register space
    LMS7002M_set_mac_ch(self, LMS_CHAB);
    e348:	014010c4 	movi	r5,67
///

#include "LMS7002M_impl.h"

void LMS7002M_xbuf_share_tx(LMS7002M_t *self, const bool enable)
{
    e34c:	dc400115 	stw	r17,4(sp)
    e350:	dfc00215 	stw	ra,8(sp)
    e354:	2023883a 	mov	r17,r4
    //XBUF is a global register space
    LMS7002M_set_mac_ch(self, LMS_CHAB);
    e358:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    self->regs->reg_0x0085_en_out2_xbuf_tx = enable?1:0;
    e35c:	88846917 	ldw	r2,4516(r17)
    e360:	81403fcc 	andi	r5,r16,255
    self->regs->reg_0x0085_en_tbufin_xbuf_rx = enable?1:0;
    LMS7002M_regs_spi_write(self, 0x0085);
    e364:	8809883a 	mov	r4,r17
void LMS7002M_xbuf_share_tx(LMS7002M_t *self, const bool enable)
{
    //XBUF is a global register space
    LMS7002M_set_mac_ch(self, LMS_CHAB);

    self->regs->reg_0x0085_en_out2_xbuf_tx = enable?1:0;
    e368:	11407515 	stw	r5,468(r2)
    self->regs->reg_0x0085_en_tbufin_xbuf_rx = enable?1:0;
    e36c:	11407615 	stw	r5,472(r2)
    LMS7002M_regs_spi_write(self, 0x0085);
    e370:	01402144 	movi	r5,133
}
    e374:	dfc00217 	ldw	ra,8(sp)
    e378:	dc400117 	ldw	r17,4(sp)
    e37c:	dc000017 	ldw	r16,0(sp)
    e380:	dec00304 	addi	sp,sp,12
    //XBUF is a global register space
    LMS7002M_set_mac_ch(self, LMS_CHAB);

    self->regs->reg_0x0085_en_out2_xbuf_tx = enable?1:0;
    self->regs->reg_0x0085_en_tbufin_xbuf_rx = enable?1:0;
    LMS7002M_regs_spi_write(self, 0x0085);
    e384:	00063001 	jmpi	6300 <LMS7002M_regs_spi_write>

0000e388 <LMS7002M_xbuf_enable_bias>:
}

LMS7002M_API void LMS7002M_xbuf_enable_bias(LMS7002M_t *self, const bool enable)
{
    e388:	defffd04 	addi	sp,sp,-12
    e38c:	dc000015 	stw	r16,0(sp)
    e390:	2821883a 	mov	r16,r5
    //XBUF is a global register space
    LMS7002M_set_mac_ch(self, LMS_CHAB);
    e394:	014010c4 	movi	r5,67
    self->regs->reg_0x0085_en_tbufin_xbuf_rx = enable?1:0;
    LMS7002M_regs_spi_write(self, 0x0085);
}

LMS7002M_API void LMS7002M_xbuf_enable_bias(LMS7002M_t *self, const bool enable)
{
    e398:	dc400115 	stw	r17,4(sp)
    e39c:	dfc00215 	stw	ra,8(sp)
    e3a0:	2023883a 	mov	r17,r4
    //XBUF is a global register space
    LMS7002M_set_mac_ch(self, LMS_CHAB);
    e3a4:	00090c00 	call	90c0 <LMS7002M_set_mac_ch>

    self->regs->reg_0x0085_slfb_xbuf_rx = enable?1:0;
    e3a8:	88846917 	ldw	r2,4516(r17)
    e3ac:	81403fcc 	andi	r5,r16,255
    self->regs->reg_0x0085_slfb_xbuf_tx = enable?1:0;
    LMS7002M_regs_spi_write(self, 0x0085);
    e3b0:	8809883a 	mov	r4,r17
LMS7002M_API void LMS7002M_xbuf_enable_bias(LMS7002M_t *self, const bool enable)
{
    //XBUF is a global register space
    LMS7002M_set_mac_ch(self, LMS_CHAB);

    self->regs->reg_0x0085_slfb_xbuf_rx = enable?1:0;
    e3b4:	11407115 	stw	r5,452(r2)
    self->regs->reg_0x0085_slfb_xbuf_tx = enable?1:0;
    e3b8:	11407215 	stw	r5,456(r2)
    LMS7002M_regs_spi_write(self, 0x0085);
    e3bc:	01402144 	movi	r5,133
}
    e3c0:	dfc00217 	ldw	ra,8(sp)
    e3c4:	dc400117 	ldw	r17,4(sp)
    e3c8:	dc000017 	ldw	r16,0(sp)
    e3cc:	dec00304 	addi	sp,sp,12
    //XBUF is a global register space
    LMS7002M_set_mac_ch(self, LMS_CHAB);

    self->regs->reg_0x0085_slfb_xbuf_rx = enable?1:0;
    self->regs->reg_0x0085_slfb_xbuf_tx = enable?1:0;
    LMS7002M_regs_spi_write(self, 0x0085);
    e3d0:	00063001 	jmpi	6300 <LMS7002M_regs_spi_write>

0000e3d4 <spi_init>:
    spiConfig.ssSetup = 2;
    spiConfig.ssHold = 2;
    spiConfig.ssDisable = 2;
	spi_configure (SPI0_BASE, &spiConfig);*/
	return 0;
}
    e3d4:	0005883a 	mov	r2,zero
    e3d8:	f800283a 	ret

0000e3dc <spi_read_API>:
/***************************************************************************//**
 * @brief spi_read_API
*******************************************************************************/
int32_t spi_read_API(uint8_t *data,
				 uint8_t bytes_number)
{
    e3dc:	defffd04 	addi	sp,sp,-12
    e3e0:	dfc00215 	stw	ra,8(sp)
	{
		spi_select_device(SPI0_BASE, 0);
		*rx = spi_rxdat(SPI0_BASE);
		spi_deselect_device(SPI0_BASE, 0);
	}*/
    unsigned char tx[2] = {rx[0], rx[1]};
    e3e4:	20800003 	ldbu	r2,0(r4)
    spi_write_then_read(NULL, tx, 2, rx, bytes_number);
    e3e8:	29403fcc 	andi	r5,r5,255
    e3ec:	200f883a 	mov	r7,r4
	{
		spi_select_device(SPI0_BASE, 0);
		*rx = spi_rxdat(SPI0_BASE);
		spi_deselect_device(SPI0_BASE, 0);
	}*/
    unsigned char tx[2] = {rx[0], rx[1]};
    e3f0:	d8800105 	stb	r2,4(sp)
    e3f4:	20800043 	ldbu	r2,1(r4)
    spi_write_then_read(NULL, tx, 2, rx, bytes_number);
    e3f8:	01800084 	movi	r6,2
    e3fc:	d9400015 	stw	r5,0(sp)
    e400:	0009883a 	mov	r4,zero
    e404:	d9400104 	addi	r5,sp,4
	{
		spi_select_device(SPI0_BASE, 0);
		*rx = spi_rxdat(SPI0_BASE);
		spi_deselect_device(SPI0_BASE, 0);
	}*/
    unsigned char tx[2] = {rx[0], rx[1]};
    e408:	d8800145 	stb	r2,5(sp)
    spi_write_then_read(NULL, tx, 2, rx, bytes_number);
    e40c:	0000bb00 	call	bb0 <spi_write_then_read>

    printf("Hola, estas en la funcion de spi_read_API\n");
    e410:	010000f4 	movhi	r4,3
    e414:	21248d04 	addi	r4,r4,-28108
    e418:	0012c980 	call	12c98 <puts>
	return 0;
}
    e41c:	0005883a 	mov	r2,zero
    e420:	dfc00217 	ldw	ra,8(sp)
    e424:	dec00304 	addi	sp,sp,12
    e428:	f800283a 	ret

0000e42c <spi_write_API>:

int spi_write_API(const unsigned char *txbuf, unsigned n_tx)
{
    e42c:	defffe04 	addi	sp,sp,-8
		usleep(10);
		spi_select_device(SPI0_BASE, 0);
		spi_txbyte(SPI0_BASE, *tx);
		spi_deselect_device(SPI0_BASE, 0);
	}*/
    spi_write_then_read(NULL, tx, n_tx, NULL, 0);
    e430:	280d883a 	mov	r6,r5
    e434:	000f883a 	mov	r7,zero
    e438:	200b883a 	mov	r5,r4
    e43c:	d8000015 	stw	zero,0(sp)
    e440:	0009883a 	mov	r4,zero
    printf("Hola, estas en la funcion de spi_read_API\n");
	return 0;
}

int spi_write_API(const unsigned char *txbuf, unsigned n_tx)
{
    e444:	dfc00115 	stw	ra,4(sp)
		usleep(10);
		spi_select_device(SPI0_BASE, 0);
		spi_txbyte(SPI0_BASE, *tx);
		spi_deselect_device(SPI0_BASE, 0);
	}*/
    spi_write_then_read(NULL, tx, n_tx, NULL, 0);
    e448:	0000bb00 	call	bb0 <spi_write_then_read>

	printf("Hola, estas en la funcion de spi_write_API\n");
    e44c:	010000f4 	movhi	r4,3
    e450:	21249804 	addi	r4,r4,-28064
    e454:	0012c980 	call	12c98 <puts>
	return 0;
}
    e458:	0005883a 	mov	r2,zero
    e45c:	dfc00117 	ldw	ra,4(sp)
    e460:	dec00204 	addi	sp,sp,8
    e464:	f800283a 	ret

0000e468 <spidev_interface_transact>:
{
	for(uint32_t idx = 0;idx < (usleep * MICRO_DELAY_FACTOR); idx++) asm volatile("");
}

uint32_t spidev_interface_transact(const uint32_t data, const bool readback)
{
    e468:	2006d63a 	srli	r3,r4,24
    e46c:	2004d43a 	srli	r2,r4,16
    e470:	defffe04 	addi	sp,sp,-8
    e474:	dfc00115 	stw	ra,4(sp)
	
	unsigned char txbuf[4];
    unsigned char rxbuf[4];
	if(readback) // read
    e478:	29403fcc 	andi	r5,r5,255
	{	
		rxbuf[0] = (data >> 24) & 0xFF; 
    e47c:	d8c00005 	stb	r3,0(sp)
		rxbuf[1] = (data >> 16) & 0xFF;
    e480:	d8800045 	stb	r2,1(sp)
uint32_t spidev_interface_transact(const uint32_t data, const bool readback)
{
	
	unsigned char txbuf[4];
    unsigned char rxbuf[4];
	if(readback) // read
    e484:	28000e26 	beq	r5,zero,e4c0 <spidev_interface_transact+0x58>
	{	
		rxbuf[0] = (data >> 24) & 0xFF; 
		rxbuf[1] = (data >> 16) & 0xFF;
	
		spi_read_API(rxbuf,2);
    e488:	01400084 	movi	r5,2
    e48c:	d809883a 	mov	r4,sp
    e490:	000e3dc0 	call	e3dc <spi_read_API>
		return \
        (((uint32_t)rxbuf[0]) << 24) |
    e494:	d8800003 	ldbu	r2,0(sp)
    e498:	1006963a 	slli	r3,r2,24
    e49c:	d8800043 	ldbu	r2,1(sp)
    e4a0:	1004943a 	slli	r2,r2,16
    e4a4:	1884b03a 	or	r2,r3,r2
    e4a8:	d8c000c3 	ldbu	r3,3(sp)
    e4ac:	10c4b03a 	or	r2,r2,r3
    e4b0:	d8c00083 	ldbu	r3,2(sp)
    e4b4:	1806923a 	slli	r3,r3,8
    e4b8:	10c4b03a 	or	r2,r2,r3
    e4bc:	00000706 	br	e4dc <spidev_interface_transact+0x74>
        (((uint32_t)rxbuf[3]) << 0);
	}else // write
	{
		txbuf[0] = (data >> 24);
		txbuf[1] = (data >> 16);
		txbuf[2] = (data >> 8);
    e4c0:	2004d23a 	srli	r2,r4,8
		txbuf[3] = (data >> 0);
    e4c4:	d90000c5 	stb	r4,3(sp)
		spi_write_API(txbuf,4);
    e4c8:	01400104 	movi	r5,4
    e4cc:	d809883a 	mov	r4,sp
        (((uint32_t)rxbuf[3]) << 0);
	}else // write
	{
		txbuf[0] = (data >> 24);
		txbuf[1] = (data >> 16);
		txbuf[2] = (data >> 8);
    e4d0:	d8800085 	stb	r2,2(sp)
		txbuf[3] = (data >> 0);
		spi_write_API(txbuf,4);
    e4d4:	000e42c0 	call	e42c <spi_write_API>
	}
	
    return 0;
    e4d8:	0005883a 	mov	r2,zero
}
    e4dc:	dfc00117 	ldw	ra,4(sp)
    e4e0:	dec00204 	addi	sp,sp,8
    e4e4:	f800283a 	ret

0000e4e8 <gpio_init>:
*/
/***************************************************************************//**
 * @brief gpio_init
*******************************************************************************/
void gpio_init(uint32_t device_id)
{
    e4e8:	f800283a 	ret

0000e4ec <gpio_direction>:

/***************************************************************************//**
 * @brief gpio_direction
*******************************************************************************/
void gpio_direction(uint8_t pin, uint8_t direction)
{/*
    e4ec:	f800283a 	ret

0000e4f0 <gpio_is_valid>:

/***************************************************************************//**
 * @brief gpio_is_valid
*******************************************************************************/
bool gpio_is_valid(int number)
{
    e4f0:	20800810 	cmplti	r2,r4,32
	else
	{
		return false;
	}
	return 0;
}
    e4f4:	f800283a 	ret

0000e4f8 <gpio_data>:

/***************************************************************************//**
 * @brief gpio_data
*******************************************************************************/
void gpio_data(uint8_t pin, uint8_t* data)
{
    e4f8:	f800283a 	ret

0000e4fc <gpio_set_value>:

/***************************************************************************//**
 * @brief gpio_set_value
*******************************************************************************/
void gpio_set_value(unsigned gpio, int value)
{/*
    e4fc:	f800283a 	ret

0000e500 <udelay>:

/***************************************************************************//**
 * @brief udelay
*******************************************************************************/
void udelay(unsigned long usecs)
{
    e500:	deffff04 	addi	sp,sp,-4
	for(uint32_t idx = 0;idx < (usecs * MICRO_DELAY_FACTOR); idx++) asm volatile("");
    e504:	01400144 	movi	r5,5

/***************************************************************************//**
 * @brief udelay
*******************************************************************************/
void udelay(unsigned long usecs)
{
    e508:	dfc00015 	stw	ra,0(sp)
	for(uint32_t idx = 0;idx < (usecs * MICRO_DELAY_FACTOR); idx++) asm volatile("");
    e50c:	002587c0 	call	2587c <__mulsi3>
    e510:	0007883a 	mov	r3,zero
    e514:	18800226 	beq	r3,r2,e520 <udelay+0x20>
    e518:	18c00044 	addi	r3,r3,1
    e51c:	003ffd06 	br	e514 <__alt_data_end+0xfffcfd14>
}
    e520:	dfc00017 	ldw	ra,0(sp)
    e524:	dec00104 	addi	sp,sp,4
    e528:	f800283a 	ret

0000e52c <mdelay>:

/***************************************************************************//**
 * @brief mdelay
*******************************************************************************/
void mdelay(unsigned long msecs)
{
    e52c:	deffff04 	addi	sp,sp,-4
	for(uint32_t idx = 0;idx < (msecs * MILLI_DELAY_FACTOR) ;idx++) asm volatile("");
    e530:	0144e204 	movi	r5,5000

/***************************************************************************//**
 * @brief mdelay
*******************************************************************************/
void mdelay(unsigned long msecs)
{
    e534:	dfc00015 	stw	ra,0(sp)
	for(uint32_t idx = 0;idx < (msecs * MILLI_DELAY_FACTOR) ;idx++) asm volatile("");
    e538:	002587c0 	call	2587c <__mulsi3>
    e53c:	0007883a 	mov	r3,zero
    e540:	18800226 	beq	r3,r2,e54c <mdelay+0x20>
    e544:	18c00044 	addi	r3,r3,1
    e548:	003ffd06 	br	e540 <__alt_data_end+0xfffcfd40>
}
    e54c:	dfc00017 	ldw	ra,0(sp)
    e550:	dec00104 	addi	sp,sp,4
    e554:	f800283a 	ret

0000e558 <msleep_interruptible>:
*******************************************************************************/
unsigned long msleep_interruptible(unsigned int msecs)
{

	return 0;
}
    e558:	0005883a 	mov	r2,zero
    e55c:	f800283a 	ret

0000e560 <clk_prepare_enable>:
	if (clk) {
		// Unused variable - fix compiler warning
	}

	return 0;
}
    e560:	0005883a 	mov	r2,zero
    e564:	f800283a 	ret

0000e568 <int_sqrt>:
*******************************************************************************/
uint32_t int_sqrt(uint32_t x)
{
	uint32_t b, m, y = 0;

	if (x <= 1)
    e568:	00800044 	movi	r2,1
    e56c:	11000c2e 	bgeu	r2,r4,e5a0 <int_sqrt+0x38>
    e570:	01400404 	movi	r5,16
    e574:	0005883a 	mov	r2,zero
    e578:	00d00034 	movhi	r3,16384
		return x;

	m = 1UL << (BITS_PER_LONG - 2);
	while (m != 0) {
		b = y + m;
    e57c:	10cd883a 	add	r6,r2,r3
		y >>= 1;
    e580:	1004d07a 	srli	r2,r2,1

		if (x >= b) {
    e584:	21800236 	bltu	r4,r6,e590 <int_sqrt+0x28>
			x -= b;
    e588:	2189c83a 	sub	r4,r4,r6
			y += m;
    e58c:	10c5883a 	add	r2,r2,r3
    e590:	297fffc4 	addi	r5,r5,-1
		}
		m >>= 2;
    e594:	1806d0ba 	srli	r3,r3,2

	if (x <= 1)
		return x;

	m = 1UL << (BITS_PER_LONG - 2);
	while (m != 0) {
    e598:	283ff81e 	bne	r5,zero,e57c <__alt_data_end+0xfffcfd7c>
    e59c:	f800283a 	ret
    e5a0:	2005883a 	mov	r2,r4
		}
		m >>= 2;
	}

	return y;
}
    e5a4:	f800283a 	ret

0000e5a8 <ilog2>:
/***************************************************************************//**
 * @brief ilog2
*******************************************************************************/
int32_t ilog2(int32_t x)
{
	int32_t A = !(!(x >> 16));
    e5a8:	2007d43a 	srai	r3,r4,16
	int32_t count = 0;
	int32_t x_copy = x;

	count = count + (A << 4);

	x_copy = (((~A + 1) & (x >> 16)) + (~(~A + 1) & x));
    e5ac:	1804c03a 	cmpne	r2,r3,zero
    e5b0:	117fffc4 	addi	r5,r2,-1
    e5b4:	2908703a 	and	r4,r5,r4
    e5b8:	190b883a 	add	r5,r3,r4

	A = !(!(x_copy >> 8));
    e5bc:	2811d23a 	srai	r8,r5,8
	count = count + (A << 3);
    e5c0:	100c913a 	slli	r6,r2,4

	count = count + (A << 4);

	x_copy = (((~A + 1) & (x >> 16)) + (~(~A + 1) & x));

	A = !(!(x_copy >> 8));
    e5c4:	400ec03a 	cmpne	r7,r8,zero
	count = count + (A << 3);
    e5c8:	380490fa 	slli	r2,r7,3
	x_copy = (((~A + 1) & (x_copy >> 8)) + (~(~A + 1) & x_copy));
    e5cc:	393fffc4 	addi	r4,r7,-1
    e5d0:	01cfc83a 	sub	r7,zero,r7
    e5d4:	3a0e703a 	and	r7,r7,r8
    e5d8:	214a703a 	and	r5,r4,r5
    e5dc:	3949883a 	add	r4,r7,r5

	A = !(!(x_copy >> 4));
    e5e0:	200fd13a 	srai	r7,r4,4
	count = count + (A << 4);

	x_copy = (((~A + 1) & (x >> 16)) + (~(~A + 1) & x));

	A = !(!(x_copy >> 8));
	count = count + (A << 3);
    e5e4:	308d883a 	add	r6,r6,r2
	x_copy = (((~A + 1) & (x_copy >> 8)) + (~(~A + 1) & x_copy));

	A = !(!(x_copy >> 4));
    e5e8:	380ac03a 	cmpne	r5,r7,zero
	count = count + (A << 2);
	x_copy = (((~A + 1) & (x_copy >> 4)) + (~(~A + 1) & x_copy));
    e5ec:	28ffffc4 	addi	r3,r5,-1
	A = !(!(x_copy >> 8));
	count = count + (A << 3);
	x_copy = (((~A + 1) & (x_copy >> 8)) + (~(~A + 1) & x_copy));

	A = !(!(x_copy >> 4));
	count = count + (A << 2);
    e5f0:	2945883a 	add	r2,r5,r5
	x_copy = (((~A + 1) & (x_copy >> 4)) + (~(~A + 1) & x_copy));
    e5f4:	014bc83a 	sub	r5,zero,r5
    e5f8:	29ca703a 	and	r5,r5,r7
    e5fc:	1908703a 	and	r4,r3,r4
    e600:	2907883a 	add	r3,r5,r4
	A = !(!(x_copy >> 8));
	count = count + (A << 3);
	x_copy = (((~A + 1) & (x_copy >> 8)) + (~(~A + 1) & x_copy));

	A = !(!(x_copy >> 4));
	count = count + (A << 2);
    e604:	1085883a 	add	r2,r2,r2
    e608:	1185883a 	add	r2,r2,r6
	x_copy = (((~A + 1) & (x_copy >> 4)) + (~(~A + 1) & x_copy));

	A = !(!(x_copy >> 2));
    e60c:	180dd0ba 	srai	r6,r3,2
    e610:	300ac03a 	cmpne	r5,r6,zero
	count = count + (A << 1);
    e614:	2949883a 	add	r4,r5,r5
    e618:	2085883a 	add	r2,r4,r2
	x_copy = (((~A + 1) & (x_copy >> 2)) + (~(~A + 1) & x_copy));
    e61c:	293fffc4 	addi	r4,r5,-1

	A = !(!(x_copy >> 1));
    e620:	014bc83a 	sub	r5,zero,r5
	count = count + (A << 2);
	x_copy = (((~A + 1) & (x_copy >> 4)) + (~(~A + 1) & x_copy));

	A = !(!(x_copy >> 2));
	count = count + (A << 1);
	x_copy = (((~A + 1) & (x_copy >> 2)) + (~(~A + 1) & x_copy));
    e624:	20c8703a 	and	r4,r4,r3

	A = !(!(x_copy >> 1));
    e628:	2986703a 	and	r3,r5,r6
    e62c:	1907883a 	add	r3,r3,r4
    e630:	1807d07a 	srai	r3,r3,1
	count = count + A;

	return count;
    e634:	1806c03a 	cmpne	r3,r3,zero
}
    e638:	1885883a 	add	r2,r3,r2
    e63c:	f800283a 	ret

0000e640 <do_div>:

/***************************************************************************//**
 * @brief do_div
*******************************************************************************/
uint64_t do_div(uint64_t* n, uint64_t base)
{
    e640:	defffa04 	addi	sp,sp,-24
    e644:	dc800215 	stw	r18,8(sp)
    e648:	dc400115 	stw	r17,4(sp)
	uint64_t mod = 0;

	mod = *n % base;
    e64c:	24800017 	ldw	r18,0(r4)
    e650:	24400117 	ldw	r17,4(r4)

/***************************************************************************//**
 * @brief do_div
*******************************************************************************/
uint64_t do_div(uint64_t* n, uint64_t base)
{
    e654:	dcc00315 	stw	r19,12(sp)
    e658:	3027883a 	mov	r19,r6
    e65c:	dd000415 	stw	r20,16(sp)
    e660:	dc000015 	stw	r16,0(sp)
    e664:	2829883a 	mov	r20,r5
    e668:	2021883a 	mov	r16,r4
	uint64_t mod = 0;

	mod = *n % base;
	*n = *n / base;
    e66c:	280d883a 	mov	r6,r5
    e670:	980f883a 	mov	r7,r19
    e674:	9009883a 	mov	r4,r18
    e678:	880b883a 	mov	r5,r17

/***************************************************************************//**
 * @brief do_div
*******************************************************************************/
uint64_t do_div(uint64_t* n, uint64_t base)
{
    e67c:	dfc00515 	stw	ra,20(sp)
	uint64_t mod = 0;

	mod = *n % base;
	*n = *n / base;
    e680:	0024b080 	call	24b08 <__udivdi3>
    e684:	80800015 	stw	r2,0(r16)
    e688:	80c00115 	stw	r3,4(r16)

	return mod;
    e68c:	a00d883a 	mov	r6,r20
    e690:	980f883a 	mov	r7,r19
    e694:	9009883a 	mov	r4,r18
    e698:	880b883a 	mov	r5,r17
    e69c:	00251040 	call	25104 <__umoddi3>
}
    e6a0:	dfc00517 	ldw	ra,20(sp)
    e6a4:	dd000417 	ldw	r20,16(sp)
    e6a8:	dcc00317 	ldw	r19,12(sp)
    e6ac:	dc800217 	ldw	r18,8(sp)
    e6b0:	dc400117 	ldw	r17,4(sp)
    e6b4:	dc000017 	ldw	r16,0(sp)
    e6b8:	dec00604 	addi	sp,sp,24
    e6bc:	f800283a 	ret

0000e6c0 <find_first_bit>:
*******************************************************************************/
uint32_t find_first_bit(uint32_t word)
{
	int32_t num = 0;

	if ((word & 0xffff) == 0) {
    e6c0:	20bfffcc 	andi	r2,r4,65535
    e6c4:	1000031e 	bne	r2,zero,e6d4 <find_first_bit+0x14>
			num += 16;
			word >>= 16;
    e6c8:	2008d43a 	srli	r4,r4,16
uint32_t find_first_bit(uint32_t word)
{
	int32_t num = 0;

	if ((word & 0xffff) == 0) {
			num += 16;
    e6cc:	00800404 	movi	r2,16
    e6d0:	00000106 	br	e6d8 <find_first_bit+0x18>
/***************************************************************************//**
 * @brief find_first_bit
*******************************************************************************/
uint32_t find_first_bit(uint32_t word)
{
	int32_t num = 0;
    e6d4:	0005883a 	mov	r2,zero

	if ((word & 0xffff) == 0) {
			num += 16;
			word >>= 16;
	}
	if ((word & 0xff) == 0) {
    e6d8:	20c03fcc 	andi	r3,r4,255
    e6dc:	1800021e 	bne	r3,zero,e6e8 <find_first_bit+0x28>
			num += 8;
			word >>= 8;
    e6e0:	2008d23a 	srli	r4,r4,8
	if ((word & 0xffff) == 0) {
			num += 16;
			word >>= 16;
	}
	if ((word & 0xff) == 0) {
			num += 8;
    e6e4:	10800204 	addi	r2,r2,8
			word >>= 8;
	}
	if ((word & 0xf) == 0) {
    e6e8:	20c003cc 	andi	r3,r4,15
    e6ec:	1800021e 	bne	r3,zero,e6f8 <find_first_bit+0x38>
			num += 4;
			word >>= 4;
    e6f0:	2008d13a 	srli	r4,r4,4
	if ((word & 0xff) == 0) {
			num += 8;
			word >>= 8;
	}
	if ((word & 0xf) == 0) {
			num += 4;
    e6f4:	10800104 	addi	r2,r2,4
			word >>= 4;
	}
	if ((word & 0x3) == 0) {
    e6f8:	20c000cc 	andi	r3,r4,3
    e6fc:	1800021e 	bne	r3,zero,e708 <find_first_bit+0x48>
			num += 2;
			word >>= 2;
    e700:	2008d0ba 	srli	r4,r4,2
	if ((word & 0xf) == 0) {
			num += 4;
			word >>= 4;
	}
	if ((word & 0x3) == 0) {
			num += 2;
    e704:	10800084 	addi	r2,r2,2
			word >>= 2;
	}
	if ((word & 0x1) == 0)
    e708:	2100004c 	andi	r4,r4,1
    e70c:	2000011e 	bne	r4,zero,e714 <find_first_bit+0x54>
			num += 1;
    e710:	10800044 	addi	r2,r2,1
	return num;
}
    e714:	f800283a 	ret

0000e718 <ERR_PTR>:
 * @brief ERR_PTR
*******************************************************************************/
void * ERR_PTR(long error)
{
	return (void *) error;
}
    e718:	2005883a 	mov	r2,r4
    e71c:	f800283a 	ret

0000e720 <zmalloc>:
	//if (ptr)
	//	memset(ptr, 0, size);
	//mdelay(1);

	return NULL;
}
    e720:	0005883a 	mov	r2,zero
    e724:	f800283a 	ret

0000e728 <pow>:
    e728:	deffee04 	addi	sp,sp,-72
    e72c:	dc800b15 	stw	r18,44(sp)
    e730:	048000f4 	movhi	r18,3
    e734:	ddc01015 	stw	r23,64(sp)
    e738:	dd800f15 	stw	r22,60(sp)
    e73c:	dd400e15 	stw	r21,56(sp)
    e740:	dd000d15 	stw	r20,52(sp)
    e744:	dcc00c15 	stw	r19,48(sp)
    e748:	dc400a15 	stw	r17,40(sp)
    e74c:	dc000915 	stw	r16,36(sp)
    e750:	dfc01115 	stw	ra,68(sp)
    e754:	94a8a004 	addi	r18,r18,-23936
    e758:	202f883a 	mov	r23,r4
    e75c:	282d883a 	mov	r22,r5
    e760:	302b883a 	mov	r21,r6
    e764:	3829883a 	mov	r20,r7
    e768:	000ebec0 	call	ebec <__ieee754_pow>
    e76c:	1023883a 	mov	r17,r2
    e770:	90800017 	ldw	r2,0(r18)
    e774:	04ffffc4 	movi	r19,-1
    e778:	1821883a 	mov	r16,r3
    e77c:	14c00426 	beq	r2,r19,e790 <pow+0x68>
    e780:	a809883a 	mov	r4,r21
    e784:	a00b883a 	mov	r5,r20
    e788:	000ff480 	call	ff48 <__fpclassifyd>
    e78c:	10000d1e 	bne	r2,zero,e7c4 <pow+0x9c>
    e790:	8805883a 	mov	r2,r17
    e794:	8007883a 	mov	r3,r16
    e798:	dfc01117 	ldw	ra,68(sp)
    e79c:	ddc01017 	ldw	r23,64(sp)
    e7a0:	dd800f17 	ldw	r22,60(sp)
    e7a4:	dd400e17 	ldw	r21,56(sp)
    e7a8:	dd000d17 	ldw	r20,52(sp)
    e7ac:	dcc00c17 	ldw	r19,48(sp)
    e7b0:	dc800b17 	ldw	r18,44(sp)
    e7b4:	dc400a17 	ldw	r17,40(sp)
    e7b8:	dc000917 	ldw	r16,36(sp)
    e7bc:	dec01204 	addi	sp,sp,72
    e7c0:	f800283a 	ret
    e7c4:	b809883a 	mov	r4,r23
    e7c8:	b00b883a 	mov	r5,r22
    e7cc:	000ff480 	call	ff48 <__fpclassifyd>
    e7d0:	000d883a 	mov	r6,zero
    e7d4:	000f883a 	mov	r7,zero
    e7d8:	1000201e 	bne	r2,zero,e85c <pow+0x134>
    e7dc:	a809883a 	mov	r4,r21
    e7e0:	a00b883a 	mov	r5,r20
    e7e4:	0026d1c0 	call	26d1c <__eqdf2>
    e7e8:	103fe91e 	bne	r2,zero,e790 <__alt_data_end+0xfffcff90>
    e7ec:	01000044 	movi	r4,1
    e7f0:	d9000015 	stw	r4,0(sp)
    e7f4:	90800017 	ldw	r2,0(r18)
    e7f8:	010000f4 	movhi	r4,3
    e7fc:	00cffc34 	movhi	r3,16368
    e800:	2124a304 	addi	r4,r4,-28020
    e804:	d9000115 	stw	r4,4(sp)
    e808:	d8000815 	stw	zero,32(sp)
    e80c:	ddc00215 	stw	r23,8(sp)
    e810:	dd800315 	stw	r22,12(sp)
    e814:	dd400415 	stw	r21,16(sp)
    e818:	dd000515 	stw	r20,20(sp)
    e81c:	d8000615 	stw	zero,24(sp)
    e820:	d8c00715 	stw	r3,28(sp)
    e824:	14c02826 	beq	r2,r19,e8c8 <pow+0x1a0>
    e828:	01000084 	movi	r4,2
    e82c:	11002626 	beq	r2,r4,e8c8 <pow+0x1a0>
    e830:	d809883a 	mov	r4,sp
    e834:	000ffbc0 	call	ffbc <matherr>
    e838:	10006b26 	beq	r2,zero,e9e8 <pow+0x2c0>
    e83c:	d8800817 	ldw	r2,32(sp)
    e840:	10000326 	beq	r2,zero,e850 <pow+0x128>
    e844:	00103740 	call	10374 <__errno>
    e848:	d8c00817 	ldw	r3,32(sp)
    e84c:	10c00015 	stw	r3,0(r2)
    e850:	d8800617 	ldw	r2,24(sp)
    e854:	d8c00717 	ldw	r3,28(sp)
    e858:	003fcf06 	br	e798 <__alt_data_end+0xfffcff98>
    e85c:	b809883a 	mov	r4,r23
    e860:	b00b883a 	mov	r5,r22
    e864:	0026d1c0 	call	26d1c <__eqdf2>
    e868:	1000191e 	bne	r2,zero,e8d0 <pow+0x1a8>
    e86c:	000d883a 	mov	r6,zero
    e870:	000f883a 	mov	r7,zero
    e874:	a809883a 	mov	r4,r21
    e878:	a00b883a 	mov	r5,r20
    e87c:	0026d1c0 	call	26d1c <__eqdf2>
    e880:	10003a1e 	bne	r2,zero,e96c <pow+0x244>
    e884:	00c00044 	movi	r3,1
    e888:	d8c00015 	stw	r3,0(sp)
    e88c:	90800017 	ldw	r2,0(r18)
    e890:	00c000f4 	movhi	r3,3
    e894:	18e4a304 	addi	r3,r3,-28020
    e898:	d8c00115 	stw	r3,4(sp)
    e89c:	d8000815 	stw	zero,32(sp)
    e8a0:	ddc00215 	stw	r23,8(sp)
    e8a4:	dd800315 	stw	r22,12(sp)
    e8a8:	dd400415 	stw	r21,16(sp)
    e8ac:	dd000515 	stw	r20,20(sp)
    e8b0:	d8000615 	stw	zero,24(sp)
    e8b4:	d8000715 	stw	zero,28(sp)
    e8b8:	103fdd26 	beq	r2,zero,e830 <__alt_data_end+0xfffd0030>
    e8bc:	0005883a 	mov	r2,zero
    e8c0:	00cffc34 	movhi	r3,16368
    e8c4:	003fb406 	br	e798 <__alt_data_end+0xfffcff98>
    e8c8:	0005883a 	mov	r2,zero
    e8cc:	003fb206 	br	e798 <__alt_data_end+0xfffcff98>
    e8d0:	8809883a 	mov	r4,r17
    e8d4:	800b883a 	mov	r5,r16
    e8d8:	000ff2c0 	call	ff2c <finite>
    e8dc:	10004626 	beq	r2,zero,e9f8 <pow+0x2d0>
    e8e0:	000d883a 	mov	r6,zero
    e8e4:	000f883a 	mov	r7,zero
    e8e8:	8809883a 	mov	r4,r17
    e8ec:	800b883a 	mov	r5,r16
    e8f0:	0026d1c0 	call	26d1c <__eqdf2>
    e8f4:	103fa61e 	bne	r2,zero,e790 <__alt_data_end+0xfffcff90>
    e8f8:	b809883a 	mov	r4,r23
    e8fc:	b00b883a 	mov	r5,r22
    e900:	000ff2c0 	call	ff2c <finite>
    e904:	103fa226 	beq	r2,zero,e790 <__alt_data_end+0xfffcff90>
    e908:	a809883a 	mov	r4,r21
    e90c:	a00b883a 	mov	r5,r20
    e910:	000ff2c0 	call	ff2c <finite>
    e914:	103f9e26 	beq	r2,zero,e790 <__alt_data_end+0xfffcff90>
    e918:	00800104 	movi	r2,4
    e91c:	d8800015 	stw	r2,0(sp)
    e920:	90c00017 	ldw	r3,0(r18)
    e924:	008000f4 	movhi	r2,3
    e928:	10a4a304 	addi	r2,r2,-28020
    e92c:	d8800115 	stw	r2,4(sp)
    e930:	d8000815 	stw	zero,32(sp)
    e934:	ddc00215 	stw	r23,8(sp)
    e938:	dd800315 	stw	r22,12(sp)
    e93c:	dd400415 	stw	r21,16(sp)
    e940:	dd000515 	stw	r20,20(sp)
    e944:	d8000615 	stw	zero,24(sp)
    e948:	d8000715 	stw	zero,28(sp)
    e94c:	00800084 	movi	r2,2
    e950:	18804726 	beq	r3,r2,ea70 <pow+0x348>
    e954:	d809883a 	mov	r4,sp
    e958:	000ffbc0 	call	ffbc <matherr>
    e95c:	10004426 	beq	r2,zero,ea70 <pow+0x348>
    e960:	d8800817 	ldw	r2,32(sp)
    e964:	103fba26 	beq	r2,zero,e850 <__alt_data_end+0xfffd0050>
    e968:	003fb606 	br	e844 <__alt_data_end+0xfffd0044>
    e96c:	a809883a 	mov	r4,r21
    e970:	a00b883a 	mov	r5,r20
    e974:	000ff2c0 	call	ff2c <finite>
    e978:	103f8526 	beq	r2,zero,e790 <__alt_data_end+0xfffcff90>
    e97c:	000d883a 	mov	r6,zero
    e980:	000f883a 	mov	r7,zero
    e984:	a809883a 	mov	r4,r21
    e988:	a00b883a 	mov	r5,r20
    e98c:	0026e800 	call	26e80 <__ledf2>
    e990:	103f7f0e 	bge	r2,zero,e790 <__alt_data_end+0xfffcff90>
    e994:	00c00044 	movi	r3,1
    e998:	d8c00015 	stw	r3,0(sp)
    e99c:	90800017 	ldw	r2,0(r18)
    e9a0:	00c000f4 	movhi	r3,3
    e9a4:	18e4a304 	addi	r3,r3,-28020
    e9a8:	d8c00115 	stw	r3,4(sp)
    e9ac:	d8000815 	stw	zero,32(sp)
    e9b0:	ddc00215 	stw	r23,8(sp)
    e9b4:	dd800315 	stw	r22,12(sp)
    e9b8:	dd400415 	stw	r21,16(sp)
    e9bc:	dd000515 	stw	r20,20(sp)
    e9c0:	d8000615 	stw	zero,24(sp)
    e9c4:	10002526 	beq	r2,zero,ea5c <pow+0x334>
    e9c8:	00fffc34 	movhi	r3,65520
    e9cc:	d8c00715 	stw	r3,28(sp)
    e9d0:	00c00084 	movi	r3,2
    e9d4:	10c0221e 	bne	r2,r3,ea60 <pow+0x338>
    e9d8:	00103740 	call	10374 <__errno>
    e9dc:	00c00844 	movi	r3,33
    e9e0:	10c00015 	stw	r3,0(r2)
    e9e4:	003fde06 	br	e960 <__alt_data_end+0xfffd0160>
    e9e8:	00103740 	call	10374 <__errno>
    e9ec:	00c00844 	movi	r3,33
    e9f0:	10c00015 	stw	r3,0(r2)
    e9f4:	003f9106 	br	e83c <__alt_data_end+0xfffd003c>
    e9f8:	b809883a 	mov	r4,r23
    e9fc:	b00b883a 	mov	r5,r22
    ea00:	000ff2c0 	call	ff2c <finite>
    ea04:	103fb626 	beq	r2,zero,e8e0 <__alt_data_end+0xfffd00e0>
    ea08:	a809883a 	mov	r4,r21
    ea0c:	a00b883a 	mov	r5,r20
    ea10:	000ff2c0 	call	ff2c <finite>
    ea14:	103fb226 	beq	r2,zero,e8e0 <__alt_data_end+0xfffd00e0>
    ea18:	8809883a 	mov	r4,r17
    ea1c:	800b883a 	mov	r5,r16
    ea20:	000ff480 	call	ff48 <__fpclassifyd>
    ea24:	1000161e 	bne	r2,zero,ea80 <pow+0x358>
    ea28:	00800044 	movi	r2,1
    ea2c:	d8800015 	stw	r2,0(sp)
    ea30:	94000017 	ldw	r16,0(r18)
    ea34:	008000f4 	movhi	r2,3
    ea38:	10a4a304 	addi	r2,r2,-28020
    ea3c:	d8800115 	stw	r2,4(sp)
    ea40:	d8000815 	stw	zero,32(sp)
    ea44:	ddc00215 	stw	r23,8(sp)
    ea48:	dd800315 	stw	r22,12(sp)
    ea4c:	dd400415 	stw	r21,16(sp)
    ea50:	dd000515 	stw	r20,20(sp)
    ea54:	8000281e 	bne	r16,zero,eaf8 <pow+0x3d0>
    ea58:	d8000615 	stw	zero,24(sp)
    ea5c:	d8000715 	stw	zero,28(sp)
    ea60:	d809883a 	mov	r4,sp
    ea64:	000ffbc0 	call	ffbc <matherr>
    ea68:	103fbd1e 	bne	r2,zero,e960 <__alt_data_end+0xfffd0160>
    ea6c:	003fda06 	br	e9d8 <__alt_data_end+0xfffd01d8>
    ea70:	00103740 	call	10374 <__errno>
    ea74:	00c00884 	movi	r3,34
    ea78:	10c00015 	stw	r3,0(r2)
    ea7c:	003fb806 	br	e960 <__alt_data_end+0xfffd0160>
    ea80:	00c000c4 	movi	r3,3
    ea84:	d8c00015 	stw	r3,0(sp)
    ea88:	90800017 	ldw	r2,0(r18)
    ea8c:	00c000f4 	movhi	r3,3
    ea90:	18e4a304 	addi	r3,r3,-28020
    ea94:	d8c00115 	stw	r3,4(sp)
    ea98:	d8000815 	stw	zero,32(sp)
    ea9c:	ddc00215 	stw	r23,8(sp)
    eaa0:	dd800315 	stw	r22,12(sp)
    eaa4:	dd400415 	stw	r21,16(sp)
    eaa8:	dd000515 	stw	r20,20(sp)
    eaac:	000d883a 	mov	r6,zero
    eab0:	000f883a 	mov	r7,zero
    eab4:	b809883a 	mov	r4,r23
    eab8:	b00b883a 	mov	r5,r22
    eabc:	1000181e 	bne	r2,zero,eb20 <pow+0x3f8>
    eac0:	00b80034 	movhi	r2,57344
    eac4:	d8800615 	stw	r2,24(sp)
    eac8:	0091fc34 	movhi	r2,18416
    eacc:	10bfffc4 	addi	r2,r2,-1
    ead0:	d8800715 	stw	r2,28(sp)
    ead4:	0026e800 	call	26e80 <__ledf2>
    ead8:	10001a16 	blt	r2,zero,eb44 <pow+0x41c>
    eadc:	d809883a 	mov	r4,sp
    eae0:	000ffbc0 	call	ffbc <matherr>
    eae4:	103f551e 	bne	r2,zero,e83c <__alt_data_end+0xfffd003c>
    eae8:	00103740 	call	10374 <__errno>
    eaec:	00c00884 	movi	r3,34
    eaf0:	10c00015 	stw	r3,0(r2)
    eaf4:	003f5106 	br	e83c <__alt_data_end+0xfffd003c>
    eaf8:	000d883a 	mov	r6,zero
    eafc:	000f883a 	mov	r7,zero
    eb00:	0009883a 	mov	r4,zero
    eb04:	000b883a 	mov	r5,zero
    eb08:	002634c0 	call	2634c <__divdf3>
    eb0c:	d8800615 	stw	r2,24(sp)
    eb10:	d8c00715 	stw	r3,28(sp)
    eb14:	00800084 	movi	r2,2
    eb18:	80bfaf26 	beq	r16,r2,e9d8 <__alt_data_end+0xfffd01d8>
    eb1c:	003fd006 	br	ea60 <__alt_data_end+0xfffd0260>
    eb20:	009ffc34 	movhi	r2,32752
    eb24:	d8000615 	stw	zero,24(sp)
    eb28:	d8800715 	stw	r2,28(sp)
    eb2c:	0026e800 	call	26e80 <__ledf2>
    eb30:	10001a16 	blt	r2,zero,eb9c <pow+0x474>
    eb34:	90c00017 	ldw	r3,0(r18)
    eb38:	00800084 	movi	r2,2
    eb3c:	18bfe71e 	bne	r3,r2,eadc <__alt_data_end+0xfffd02dc>
    eb40:	003fe906 	br	eae8 <__alt_data_end+0xfffd02e8>
    eb44:	000d883a 	mov	r6,zero
    eb48:	01cff834 	movhi	r7,16352
    eb4c:	a809883a 	mov	r4,r21
    eb50:	a00b883a 	mov	r5,r20
    eb54:	0026f740 	call	26f74 <__muldf3>
    eb58:	1009883a 	mov	r4,r2
    eb5c:	180b883a 	mov	r5,r3
    eb60:	1023883a 	mov	r17,r2
    eb64:	1821883a 	mov	r16,r3
    eb68:	000ffd00 	call	ffd0 <rint>
    eb6c:	100d883a 	mov	r6,r2
    eb70:	180f883a 	mov	r7,r3
    eb74:	8809883a 	mov	r4,r17
    eb78:	800b883a 	mov	r5,r16
    eb7c:	0026d1c0 	call	26d1c <__eqdf2>
    eb80:	103fec26 	beq	r2,zero,eb34 <__alt_data_end+0xfffd0334>
    eb84:	00b80034 	movhi	r2,57344
    eb88:	d8800615 	stw	r2,24(sp)
    eb8c:	00b1fc34 	movhi	r2,51184
    eb90:	10bfffc4 	addi	r2,r2,-1
    eb94:	d8800715 	stw	r2,28(sp)
    eb98:	003fe606 	br	eb34 <__alt_data_end+0xfffd0334>
    eb9c:	000d883a 	mov	r6,zero
    eba0:	01cff834 	movhi	r7,16352
    eba4:	a809883a 	mov	r4,r21
    eba8:	a00b883a 	mov	r5,r20
    ebac:	0026f740 	call	26f74 <__muldf3>
    ebb0:	1009883a 	mov	r4,r2
    ebb4:	180b883a 	mov	r5,r3
    ebb8:	1023883a 	mov	r17,r2
    ebbc:	1821883a 	mov	r16,r3
    ebc0:	000ffd00 	call	ffd0 <rint>
    ebc4:	100d883a 	mov	r6,r2
    ebc8:	180f883a 	mov	r7,r3
    ebcc:	8809883a 	mov	r4,r17
    ebd0:	800b883a 	mov	r5,r16
    ebd4:	0026d1c0 	call	26d1c <__eqdf2>
    ebd8:	103fd626 	beq	r2,zero,eb34 <__alt_data_end+0xfffd0334>
    ebdc:	00bffc34 	movhi	r2,65520
    ebe0:	d8000615 	stw	zero,24(sp)
    ebe4:	d8800715 	stw	r2,28(sp)
    ebe8:	003fd206 	br	eb34 <__alt_data_end+0xfffd0334>

0000ebec <__ieee754_pow>:
    ebec:	00a00034 	movhi	r2,32768
    ebf0:	deffea04 	addi	sp,sp,-88
    ebf4:	10bfffc4 	addi	r2,r2,-1
    ebf8:	dc800e15 	stw	r18,56(sp)
    ebfc:	38a4703a 	and	r18,r7,r2
    ec00:	dfc01515 	stw	ra,84(sp)
    ec04:	df001415 	stw	fp,80(sp)
    ec08:	ddc01315 	stw	r23,76(sp)
    ec0c:	dd801215 	stw	r22,72(sp)
    ec10:	dd401115 	stw	r21,68(sp)
    ec14:	dd001015 	stw	r20,64(sp)
    ec18:	dcc00f15 	stw	r19,60(sp)
    ec1c:	dc400d15 	stw	r17,52(sp)
    ec20:	dc000c15 	stw	r16,48(sp)
    ec24:	9186b03a 	or	r3,r18,r6
    ec28:	18002a26 	beq	r3,zero,ecd4 <__ieee754_pow+0xe8>
    ec2c:	28a2703a 	and	r17,r5,r2
    ec30:	009ffc34 	movhi	r2,32752
    ec34:	14402316 	blt	r2,r17,ecc4 <__ieee754_pow+0xd8>
    ec38:	88802126 	beq	r17,r2,ecc0 <__ieee754_pow+0xd4>
    ec3c:	14802116 	blt	r2,r18,ecc4 <__ieee754_pow+0xd8>
    ec40:	009ffc34 	movhi	r2,32752
    ec44:	90807326 	beq	r18,r2,ee14 <__ieee754_pow+0x228>
    ec48:	2827883a 	mov	r19,r5
    ec4c:	2021883a 	mov	r16,r4
    ec50:	302d883a 	mov	r22,r6
    ec54:	3839883a 	mov	fp,r7
    ec58:	28007016 	blt	r5,zero,ee1c <__ieee754_pow+0x230>
    ec5c:	002b883a 	mov	r21,zero
    ec60:	b0003a1e 	bne	r22,zero,ed4c <__ieee754_pow+0x160>
    ec64:	009ffc34 	movhi	r2,32752
    ec68:	90807f26 	beq	r18,r2,ee68 <__ieee754_pow+0x27c>
    ec6c:	008ffc34 	movhi	r2,16368
    ec70:	90805426 	beq	r18,r2,edc4 <__ieee754_pow+0x1d8>
    ec74:	00900034 	movhi	r2,16384
    ec78:	e0833b26 	beq	fp,r2,f968 <__ieee754_pow+0xd7c>
    ec7c:	008ff834 	movhi	r2,16352
    ec80:	e080321e 	bne	fp,r2,ed4c <__ieee754_pow+0x160>
    ec84:	98003116 	blt	r19,zero,ed4c <__ieee754_pow+0x160>
    ec88:	8009883a 	mov	r4,r16
    ec8c:	980b883a 	mov	r5,r19
    ec90:	dfc01517 	ldw	ra,84(sp)
    ec94:	df001417 	ldw	fp,80(sp)
    ec98:	ddc01317 	ldw	r23,76(sp)
    ec9c:	dd801217 	ldw	r22,72(sp)
    eca0:	dd401117 	ldw	r21,68(sp)
    eca4:	dd001017 	ldw	r20,64(sp)
    eca8:	dcc00f17 	ldw	r19,60(sp)
    ecac:	dc800e17 	ldw	r18,56(sp)
    ecb0:	dc400d17 	ldw	r17,52(sp)
    ecb4:	dc000c17 	ldw	r16,48(sp)
    ecb8:	dec01604 	addi	sp,sp,88
    ecbc:	000fc901 	jmpi	fc90 <__ieee754_sqrt>
    ecc0:	20001226 	beq	r4,zero,ed0c <__ieee754_pow+0x120>
    ecc4:	00b00434 	movhi	r2,49168
    ecc8:	8885883a 	add	r2,r17,r2
    eccc:	1108b03a 	or	r4,r2,r4
    ecd0:	20000f1e 	bne	r4,zero,ed10 <__ieee754_pow+0x124>
    ecd4:	0005883a 	mov	r2,zero
    ecd8:	00cffc34 	movhi	r3,16368
    ecdc:	dfc01517 	ldw	ra,84(sp)
    ece0:	df001417 	ldw	fp,80(sp)
    ece4:	ddc01317 	ldw	r23,76(sp)
    ece8:	dd801217 	ldw	r22,72(sp)
    ecec:	dd401117 	ldw	r21,68(sp)
    ecf0:	dd001017 	ldw	r20,64(sp)
    ecf4:	dcc00f17 	ldw	r19,60(sp)
    ecf8:	dc800e17 	ldw	r18,56(sp)
    ecfc:	dc400d17 	ldw	r17,52(sp)
    ed00:	dc000c17 	ldw	r16,48(sp)
    ed04:	dec01604 	addi	sp,sp,88
    ed08:	f800283a 	ret
    ed0c:	8cbfcc0e 	bge	r17,r18,ec40 <__alt_data_end+0xfffd0440>
    ed10:	010000f4 	movhi	r4,3
    ed14:	21235404 	addi	r4,r4,-29360
    ed18:	dfc01517 	ldw	ra,84(sp)
    ed1c:	df001417 	ldw	fp,80(sp)
    ed20:	ddc01317 	ldw	r23,76(sp)
    ed24:	dd801217 	ldw	r22,72(sp)
    ed28:	dd401117 	ldw	r21,68(sp)
    ed2c:	dd001017 	ldw	r20,64(sp)
    ed30:	dcc00f17 	ldw	r19,60(sp)
    ed34:	dc800e17 	ldw	r18,56(sp)
    ed38:	dc400d17 	ldw	r17,52(sp)
    ed3c:	dc000c17 	ldw	r16,48(sp)
    ed40:	dec01604 	addi	sp,sp,88
    ed44:	000ffc41 	jmpi	ffc4 <nan>
    ed48:	002b883a 	mov	r21,zero
    ed4c:	8009883a 	mov	r4,r16
    ed50:	980b883a 	mov	r5,r19
    ed54:	000ff180 	call	ff18 <fabs>
    ed58:	102f883a 	mov	r23,r2
    ed5c:	80000f26 	beq	r16,zero,ed9c <__ieee754_pow+0x1b0>
    ed60:	9816d7fa 	srli	r11,r19,31
    ed64:	5affffc4 	addi	r11,r11,-1
    ed68:	aac4b03a 	or	r2,r21,r11
    ed6c:	10004b26 	beq	r2,zero,ee9c <__ieee754_pow+0x2b0>
    ed70:	00907834 	movhi	r2,16864
    ed74:	1480540e 	bge	r2,r18,eec8 <__ieee754_pow+0x2dc>
    ed78:	0090fc34 	movhi	r2,17392
    ed7c:	14832d0e 	bge	r2,r18,fa34 <__ieee754_pow+0xe48>
    ed80:	008ffc34 	movhi	r2,16368
    ed84:	10bfffc4 	addi	r2,r2,-1
    ed88:	14401916 	blt	r2,r17,edf0 <__ieee754_pow+0x204>
    ed8c:	e0001916 	blt	fp,zero,edf4 <__ieee754_pow+0x208>
    ed90:	0005883a 	mov	r2,zero
    ed94:	0007883a 	mov	r3,zero
    ed98:	003fd006 	br	ecdc <__alt_data_end+0xfffd04dc>
    ed9c:	88000526 	beq	r17,zero,edb4 <__ieee754_pow+0x1c8>
    eda0:	00900034 	movhi	r2,16384
    eda4:	10bfffc4 	addi	r2,r2,-1
    eda8:	9884703a 	and	r2,r19,r2
    edac:	010ffc34 	movhi	r4,16368
    edb0:	113feb1e 	bne	r2,r4,ed60 <__alt_data_end+0xfffd0560>
    edb4:	e0000716 	blt	fp,zero,edd4 <__ieee754_pow+0x1e8>
    edb8:	9802e216 	blt	r19,zero,f944 <__ieee754_pow+0xd58>
    edbc:	b805883a 	mov	r2,r23
    edc0:	003fc606 	br	ecdc <__alt_data_end+0xfffd04dc>
    edc4:	e0037516 	blt	fp,zero,fb9c <__ieee754_pow+0xfb0>
    edc8:	8005883a 	mov	r2,r16
    edcc:	9807883a 	mov	r3,r19
    edd0:	003fc206 	br	ecdc <__alt_data_end+0xfffd04dc>
    edd4:	b80d883a 	mov	r6,r23
    edd8:	180f883a 	mov	r7,r3
    eddc:	0009883a 	mov	r4,zero
    ede0:	014ffc34 	movhi	r5,16368
    ede4:	002634c0 	call	2634c <__divdf3>
    ede8:	102f883a 	mov	r23,r2
    edec:	003ff206 	br	edb8 <__alt_data_end+0xfffd05b8>
    edf0:	073fe70e 	bge	zero,fp,ed90 <__alt_data_end+0xfffd0590>
    edf4:	01a20034 	movhi	r6,34816
    edf8:	01df8e34 	movhi	r7,32312
    edfc:	319d6704 	addi	r6,r6,30108
    ee00:	39f90f04 	addi	r7,r7,-7108
    ee04:	3009883a 	mov	r4,r6
    ee08:	380b883a 	mov	r5,r7
    ee0c:	0026f740 	call	26f74 <__muldf3>
    ee10:	003fb206 	br	ecdc <__alt_data_end+0xfffd04dc>
    ee14:	303f8c26 	beq	r6,zero,ec48 <__alt_data_end+0xfffd0448>
    ee18:	003faa06 	br	ecc4 <__alt_data_end+0xfffd04c4>
    ee1c:	0090d034 	movhi	r2,17216
    ee20:	10bfffc4 	addi	r2,r2,-1
    ee24:	14801b16 	blt	r2,r18,ee94 <__ieee754_pow+0x2a8>
    ee28:	008ffc34 	movhi	r2,16368
    ee2c:	10bfffc4 	addi	r2,r2,-1
    ee30:	14bf8a0e 	bge	r2,r18,ec5c <__alt_data_end+0xfffd045c>
    ee34:	9005d53a 	srai	r2,r18,20
    ee38:	00c00504 	movi	r3,20
    ee3c:	10bf0044 	addi	r2,r2,-1023
    ee40:	18836b0e 	bge	r3,r2,fbf0 <__ieee754_pow+0x1004>
    ee44:	00c00d04 	movi	r3,52
    ee48:	1885c83a 	sub	r2,r3,r2
    ee4c:	3086d83a 	srl	r3,r6,r2
    ee50:	1884983a 	sll	r2,r3,r2
    ee54:	30bf811e 	bne	r6,r2,ec5c <__alt_data_end+0xfffd045c>
    ee58:	18c0004c 	andi	r3,r3,1
    ee5c:	02800084 	movi	r10,2
    ee60:	50ebc83a 	sub	r21,r10,r3
    ee64:	003f7e06 	br	ec60 <__alt_data_end+0xfffd0460>
    ee68:	01300434 	movhi	r4,49168
    ee6c:	8909883a 	add	r4,r17,r4
    ee70:	2408b03a 	or	r4,r4,r16
    ee74:	203f9726 	beq	r4,zero,ecd4 <__alt_data_end+0xfffd04d4>
    ee78:	008ffc34 	movhi	r2,16368
    ee7c:	10bfffc4 	addi	r2,r2,-1
    ee80:	1442e60e 	bge	r2,r17,fa1c <__ieee754_pow+0xe30>
    ee84:	e03fc216 	blt	fp,zero,ed90 <__alt_data_end+0xfffd0590>
    ee88:	0005883a 	mov	r2,zero
    ee8c:	e007883a 	mov	r3,fp
    ee90:	003f9206 	br	ecdc <__alt_data_end+0xfffd04dc>
    ee94:	05400084 	movi	r21,2
    ee98:	003f7106 	br	ec60 <__alt_data_end+0xfffd0460>
    ee9c:	800d883a 	mov	r6,r16
    eea0:	980f883a 	mov	r7,r19
    eea4:	3009883a 	mov	r4,r6
    eea8:	380b883a 	mov	r5,r7
    eeac:	00277e00 	call	277e0 <__subdf3>
    eeb0:	100d883a 	mov	r6,r2
    eeb4:	180f883a 	mov	r7,r3
    eeb8:	1009883a 	mov	r4,r2
    eebc:	180b883a 	mov	r5,r3
    eec0:	002634c0 	call	2634c <__divdf3>
    eec4:	003f8506 	br	ecdc <__alt_data_end+0xfffd04dc>
    eec8:	00800434 	movhi	r2,16
    eecc:	10bfffc4 	addi	r2,r2,-1
    eed0:	1442d616 	blt	r2,r17,fa2c <__ieee754_pow+0xe40>
    eed4:	b809883a 	mov	r4,r23
    eed8:	000d883a 	mov	r6,zero
    eedc:	01d0d034 	movhi	r7,17216
    eee0:	180b883a 	mov	r5,r3
    eee4:	dac00b15 	stw	r11,44(sp)
    eee8:	0026f740 	call	26f74 <__muldf3>
    eeec:	dac00b17 	ldw	r11,44(sp)
    eef0:	102f883a 	mov	r23,r2
    eef4:	1823883a 	mov	r17,r3
    eef8:	033ff2c4 	movi	r12,-53
    eefc:	8807d53a 	srai	r3,r17,20
    ef00:	00800434 	movhi	r2,16
    ef04:	10bfffc4 	addi	r2,r2,-1
    ef08:	18ff0044 	addi	r3,r3,-1023
    ef0c:	1b19883a 	add	r12,r3,r12
    ef10:	00c00134 	movhi	r3,4
    ef14:	8884703a 	and	r2,r17,r2
    ef18:	18e62384 	addi	r3,r3,-26482
    ef1c:	150ffc34 	orhi	r20,r2,16368
    ef20:	1880060e 	bge	r3,r2,ef3c <__ieee754_pow+0x350>
    ef24:	00c00334 	movhi	r3,12
    ef28:	18ed9e44 	addi	r3,r3,-18823
    ef2c:	18833f0e 	bge	r3,r2,fc2c <__ieee754_pow+0x1040>
    ef30:	00bffc34 	movhi	r2,65520
    ef34:	63000044 	addi	r12,r12,1
    ef38:	a0a9883a 	add	r20,r20,r2
    ef3c:	0027883a 	mov	r19,zero
    ef40:	d8000215 	stw	zero,8(sp)
    ef44:	0013883a 	mov	r9,zero
    ef48:	0011883a 	mov	r8,zero
    ef4c:	0015883a 	mov	r10,zero
    ef50:	048ffc34 	movhi	r18,16368
    ef54:	900f883a 	mov	r7,r18
    ef58:	b809883a 	mov	r4,r23
    ef5c:	a00b883a 	mov	r5,r20
    ef60:	000d883a 	mov	r6,zero
    ef64:	da000a15 	stw	r8,40(sp)
    ef68:	da400815 	stw	r9,32(sp)
    ef6c:	dac00b15 	stw	r11,44(sp)
    ef70:	db000915 	stw	r12,36(sp)
    ef74:	da800515 	stw	r10,20(sp)
    ef78:	00277e00 	call	277e0 <__subdf3>
    ef7c:	b809883a 	mov	r4,r23
    ef80:	a00b883a 	mov	r5,r20
    ef84:	900f883a 	mov	r7,r18
    ef88:	000d883a 	mov	r6,zero
    ef8c:	d8800015 	stw	r2,0(sp)
    ef90:	d8c00115 	stw	r3,4(sp)
    ef94:	0025aa00 	call	25aa0 <__adddf3>
    ef98:	100d883a 	mov	r6,r2
    ef9c:	180f883a 	mov	r7,r3
    efa0:	0009883a 	mov	r4,zero
    efa4:	014ffc34 	movhi	r5,16368
    efa8:	002634c0 	call	2634c <__divdf3>
    efac:	d9000017 	ldw	r4,0(sp)
    efb0:	d9400117 	ldw	r5,4(sp)
    efb4:	100d883a 	mov	r6,r2
    efb8:	180f883a 	mov	r7,r3
    efbc:	d8c00715 	stw	r3,28(sp)
    efc0:	d8800615 	stw	r2,24(sp)
    efc4:	0026f740 	call	26f74 <__muldf3>
    efc8:	1023883a 	mov	r17,r2
    efcc:	a005d07a 	srai	r2,r20,1
    efd0:	da800517 	ldw	r10,20(sp)
    efd4:	1821883a 	mov	r16,r3
    efd8:	10c80034 	orhi	r3,r2,8192
    efdc:	00800234 	movhi	r2,8
    efe0:	1885883a 	add	r2,r3,r2
    efe4:	1295883a 	add	r10,r2,r10
    efe8:	500f883a 	mov	r7,r10
    efec:	800b883a 	mov	r5,r16
    eff0:	000d883a 	mov	r6,zero
    eff4:	0009883a 	mov	r4,zero
    eff8:	da800515 	stw	r10,20(sp)
    effc:	0026f740 	call	26f74 <__muldf3>
    f000:	d9000017 	ldw	r4,0(sp)
    f004:	d9400117 	ldw	r5,4(sp)
    f008:	100d883a 	mov	r6,r2
    f00c:	180f883a 	mov	r7,r3
    f010:	00277e00 	call	277e0 <__subdf3>
    f014:	da800517 	ldw	r10,20(sp)
    f018:	900f883a 	mov	r7,r18
    f01c:	000d883a 	mov	r6,zero
    f020:	500b883a 	mov	r5,r10
    f024:	0009883a 	mov	r4,zero
    f028:	d8800015 	stw	r2,0(sp)
    f02c:	d8c00515 	stw	r3,20(sp)
    f030:	00277e00 	call	277e0 <__subdf3>
    f034:	b809883a 	mov	r4,r23
    f038:	a00b883a 	mov	r5,r20
    f03c:	100d883a 	mov	r6,r2
    f040:	180f883a 	mov	r7,r3
    f044:	00277e00 	call	277e0 <__subdf3>
    f048:	800f883a 	mov	r7,r16
    f04c:	000d883a 	mov	r6,zero
    f050:	1009883a 	mov	r4,r2
    f054:	180b883a 	mov	r5,r3
    f058:	0026f740 	call	26f74 <__muldf3>
    f05c:	db400517 	ldw	r13,20(sp)
    f060:	d9000017 	ldw	r4,0(sp)
    f064:	100d883a 	mov	r6,r2
    f068:	680b883a 	mov	r5,r13
    f06c:	180f883a 	mov	r7,r3
    f070:	00277e00 	call	277e0 <__subdf3>
    f074:	dbc00617 	ldw	r15,24(sp)
    f078:	db800717 	ldw	r14,28(sp)
    f07c:	1009883a 	mov	r4,r2
    f080:	780d883a 	mov	r6,r15
    f084:	700f883a 	mov	r7,r14
    f088:	180b883a 	mov	r5,r3
    f08c:	0026f740 	call	26f74 <__muldf3>
    f090:	880d883a 	mov	r6,r17
    f094:	800f883a 	mov	r7,r16
    f098:	8809883a 	mov	r4,r17
    f09c:	800b883a 	mov	r5,r16
    f0a0:	d8800015 	stw	r2,0(sp)
    f0a4:	d8c00115 	stw	r3,4(sp)
    f0a8:	0026f740 	call	26f74 <__muldf3>
    f0ac:	01929174 	movhi	r6,19013
    f0b0:	01cff2b4 	movhi	r7,16330
    f0b4:	3193bbc4 	addi	r6,r6,20207
    f0b8:	39df8a04 	addi	r7,r7,32296
    f0bc:	1009883a 	mov	r4,r2
    f0c0:	180b883a 	mov	r5,r3
    f0c4:	102f883a 	mov	r23,r2
    f0c8:	1829883a 	mov	r20,r3
    f0cc:	0026f740 	call	26f74 <__muldf3>
    f0d0:	01a4f2b4 	movhi	r6,37834
    f0d4:	01cff3b4 	movhi	r7,16334
    f0d8:	31b6d944 	addi	r6,r6,-9371
    f0dc:	39e19284 	addi	r7,r7,-31158
    f0e0:	1009883a 	mov	r4,r2
    f0e4:	180b883a 	mov	r5,r3
    f0e8:	0025aa00 	call	25aa0 <__adddf3>
    f0ec:	b80d883a 	mov	r6,r23
    f0f0:	a00f883a 	mov	r7,r20
    f0f4:	1009883a 	mov	r4,r2
    f0f8:	180b883a 	mov	r5,r3
    f0fc:	0026f740 	call	26f74 <__muldf3>
    f100:	01aa4774 	movhi	r6,43293
    f104:	01cff474 	movhi	r7,16337
    f108:	31904044 	addi	r6,r6,16641
    f10c:	39dd1804 	addi	r7,r7,29792
    f110:	1009883a 	mov	r4,r2
    f114:	180b883a 	mov	r5,r3
    f118:	0025aa00 	call	25aa0 <__adddf3>
    f11c:	b80d883a 	mov	r6,r23
    f120:	a00f883a 	mov	r7,r20
    f124:	1009883a 	mov	r4,r2
    f128:	180b883a 	mov	r5,r3
    f12c:	0026f740 	call	26f74 <__muldf3>
    f130:	019463f4 	movhi	r6,20879
    f134:	01cff574 	movhi	r7,16341
    f138:	31899344 	addi	r6,r6,9805
    f13c:	39d55544 	addi	r7,r7,21845
    f140:	1009883a 	mov	r4,r2
    f144:	180b883a 	mov	r5,r3
    f148:	0025aa00 	call	25aa0 <__adddf3>
    f14c:	b80d883a 	mov	r6,r23
    f150:	a00f883a 	mov	r7,r20
    f154:	1009883a 	mov	r4,r2
    f158:	180b883a 	mov	r5,r3
    f15c:	0026f740 	call	26f74 <__muldf3>
    f160:	01b6dc34 	movhi	r6,56176
    f164:	01cff6f4 	movhi	r7,16347
    f168:	31aaffc4 	addi	r6,r6,-21505
    f16c:	39db6d84 	addi	r7,r7,28086
    f170:	1009883a 	mov	r4,r2
    f174:	180b883a 	mov	r5,r3
    f178:	0025aa00 	call	25aa0 <__adddf3>
    f17c:	b80d883a 	mov	r6,r23
    f180:	a00f883a 	mov	r7,r20
    f184:	1009883a 	mov	r4,r2
    f188:	180b883a 	mov	r5,r3
    f18c:	0026f740 	call	26f74 <__muldf3>
    f190:	018cccf4 	movhi	r6,13107
    f194:	01cff8f4 	movhi	r7,16355
    f198:	318cc0c4 	addi	r6,r6,13059
    f19c:	39ccccc4 	addi	r7,r7,13107
    f1a0:	1009883a 	mov	r4,r2
    f1a4:	180b883a 	mov	r5,r3
    f1a8:	0025aa00 	call	25aa0 <__adddf3>
    f1ac:	b80d883a 	mov	r6,r23
    f1b0:	a00f883a 	mov	r7,r20
    f1b4:	b809883a 	mov	r4,r23
    f1b8:	a00b883a 	mov	r5,r20
    f1bc:	1825883a 	mov	r18,r3
    f1c0:	d8800515 	stw	r2,20(sp)
    f1c4:	0026f740 	call	26f74 <__muldf3>
    f1c8:	db400517 	ldw	r13,20(sp)
    f1cc:	900b883a 	mov	r5,r18
    f1d0:	100d883a 	mov	r6,r2
    f1d4:	6809883a 	mov	r4,r13
    f1d8:	180f883a 	mov	r7,r3
    f1dc:	0026f740 	call	26f74 <__muldf3>
    f1e0:	800f883a 	mov	r7,r16
    f1e4:	8809883a 	mov	r4,r17
    f1e8:	800b883a 	mov	r5,r16
    f1ec:	000d883a 	mov	r6,zero
    f1f0:	102f883a 	mov	r23,r2
    f1f4:	1829883a 	mov	r20,r3
    f1f8:	0025aa00 	call	25aa0 <__adddf3>
    f1fc:	d9800017 	ldw	r6,0(sp)
    f200:	d9c00117 	ldw	r7,4(sp)
    f204:	1009883a 	mov	r4,r2
    f208:	180b883a 	mov	r5,r3
    f20c:	0026f740 	call	26f74 <__muldf3>
    f210:	b80d883a 	mov	r6,r23
    f214:	a00f883a 	mov	r7,r20
    f218:	1009883a 	mov	r4,r2
    f21c:	180b883a 	mov	r5,r3
    f220:	0025aa00 	call	25aa0 <__adddf3>
    f224:	800f883a 	mov	r7,r16
    f228:	800b883a 	mov	r5,r16
    f22c:	000d883a 	mov	r6,zero
    f230:	0009883a 	mov	r4,zero
    f234:	1025883a 	mov	r18,r2
    f238:	182f883a 	mov	r23,r3
    f23c:	0026f740 	call	26f74 <__muldf3>
    f240:	000d883a 	mov	r6,zero
    f244:	01d00234 	movhi	r7,16392
    f248:	1009883a 	mov	r4,r2
    f24c:	180b883a 	mov	r5,r3
    f250:	d8c00715 	stw	r3,28(sp)
    f254:	d8800615 	stw	r2,24(sp)
    f258:	0025aa00 	call	25aa0 <__adddf3>
    f25c:	900d883a 	mov	r6,r18
    f260:	b80f883a 	mov	r7,r23
    f264:	1009883a 	mov	r4,r2
    f268:	180b883a 	mov	r5,r3
    f26c:	0025aa00 	call	25aa0 <__adddf3>
    f270:	800b883a 	mov	r5,r16
    f274:	000d883a 	mov	r6,zero
    f278:	180f883a 	mov	r7,r3
    f27c:	0009883a 	mov	r4,zero
    f280:	1829883a 	mov	r20,r3
    f284:	0026f740 	call	26f74 <__muldf3>
    f288:	a00b883a 	mov	r5,r20
    f28c:	000d883a 	mov	r6,zero
    f290:	01d00234 	movhi	r7,16392
    f294:	0009883a 	mov	r4,zero
    f298:	d8800315 	stw	r2,12(sp)
    f29c:	d8c00415 	stw	r3,16(sp)
    f2a0:	00277e00 	call	277e0 <__subdf3>
    f2a4:	dbc00617 	ldw	r15,24(sp)
    f2a8:	db800717 	ldw	r14,28(sp)
    f2ac:	1009883a 	mov	r4,r2
    f2b0:	780d883a 	mov	r6,r15
    f2b4:	700f883a 	mov	r7,r14
    f2b8:	180b883a 	mov	r5,r3
    f2bc:	00277e00 	call	277e0 <__subdf3>
    f2c0:	9009883a 	mov	r4,r18
    f2c4:	b80b883a 	mov	r5,r23
    f2c8:	100d883a 	mov	r6,r2
    f2cc:	180f883a 	mov	r7,r3
    f2d0:	00277e00 	call	277e0 <__subdf3>
    f2d4:	880d883a 	mov	r6,r17
    f2d8:	800f883a 	mov	r7,r16
    f2dc:	1009883a 	mov	r4,r2
    f2e0:	180b883a 	mov	r5,r3
    f2e4:	0026f740 	call	26f74 <__muldf3>
    f2e8:	d9000017 	ldw	r4,0(sp)
    f2ec:	d9400117 	ldw	r5,4(sp)
    f2f0:	a00f883a 	mov	r7,r20
    f2f4:	000d883a 	mov	r6,zero
    f2f8:	1023883a 	mov	r17,r2
    f2fc:	1821883a 	mov	r16,r3
    f300:	0026f740 	call	26f74 <__muldf3>
    f304:	8809883a 	mov	r4,r17
    f308:	800b883a 	mov	r5,r16
    f30c:	100d883a 	mov	r6,r2
    f310:	180f883a 	mov	r7,r3
    f314:	0025aa00 	call	25aa0 <__adddf3>
    f318:	d9000317 	ldw	r4,12(sp)
    f31c:	d9400417 	ldw	r5,16(sp)
    f320:	100d883a 	mov	r6,r2
    f324:	180f883a 	mov	r7,r3
    f328:	102f883a 	mov	r23,r2
    f32c:	1823883a 	mov	r17,r3
    f330:	0025aa00 	call	25aa0 <__adddf3>
    f334:	01cffbf4 	movhi	r7,16367
    f338:	39f1c244 	addi	r7,r7,-14583
    f33c:	0009883a 	mov	r4,zero
    f340:	180b883a 	mov	r5,r3
    f344:	01b80034 	movhi	r6,57344
    f348:	1821883a 	mov	r16,r3
    f34c:	0026f740 	call	26f74 <__muldf3>
    f350:	d9800317 	ldw	r6,12(sp)
    f354:	d9c00417 	ldw	r7,16(sp)
    f358:	800b883a 	mov	r5,r16
    f35c:	0009883a 	mov	r4,zero
    f360:	1825883a 	mov	r18,r3
    f364:	d8800015 	stw	r2,0(sp)
    f368:	00277e00 	call	277e0 <__subdf3>
    f36c:	b809883a 	mov	r4,r23
    f370:	880b883a 	mov	r5,r17
    f374:	100d883a 	mov	r6,r2
    f378:	180f883a 	mov	r7,r3
    f37c:	00277e00 	call	277e0 <__subdf3>
    f380:	01b70eb4 	movhi	r6,56378
    f384:	01cffbf4 	movhi	r7,16367
    f388:	3180ff44 	addi	r6,r6,1021
    f38c:	39f1c244 	addi	r7,r7,-14583
    f390:	1009883a 	mov	r4,r2
    f394:	180b883a 	mov	r5,r3
    f398:	0026f740 	call	26f74 <__muldf3>
    f39c:	018516f4 	movhi	r6,5211
    f3a0:	01ef8fb4 	movhi	r7,48702
    f3a4:	800b883a 	mov	r5,r16
    f3a8:	31807d44 	addi	r6,r6,501
    f3ac:	39cbf804 	addi	r7,r7,12256
    f3b0:	0009883a 	mov	r4,zero
    f3b4:	1029883a 	mov	r20,r2
    f3b8:	1823883a 	mov	r17,r3
    f3bc:	0026f740 	call	26f74 <__muldf3>
    f3c0:	a009883a 	mov	r4,r20
    f3c4:	880b883a 	mov	r5,r17
    f3c8:	100d883a 	mov	r6,r2
    f3cc:	180f883a 	mov	r7,r3
    f3d0:	0025aa00 	call	25aa0 <__adddf3>
    f3d4:	da400817 	ldw	r9,32(sp)
    f3d8:	da000a17 	ldw	r8,40(sp)
    f3dc:	180b883a 	mov	r5,r3
    f3e0:	480d883a 	mov	r6,r9
    f3e4:	400f883a 	mov	r7,r8
    f3e8:	1009883a 	mov	r4,r2
    f3ec:	0025aa00 	call	25aa0 <__adddf3>
    f3f0:	db000917 	ldw	r12,36(sp)
    f3f4:	1029883a 	mov	r20,r2
    f3f8:	1823883a 	mov	r17,r3
    f3fc:	6009883a 	mov	r4,r12
    f400:	002815c0 	call	2815c <__floatsidf>
    f404:	d9000017 	ldw	r4,0(sp)
    f408:	a00d883a 	mov	r6,r20
    f40c:	880f883a 	mov	r7,r17
    f410:	900b883a 	mov	r5,r18
    f414:	182f883a 	mov	r23,r3
    f418:	d8800115 	stw	r2,4(sp)
    f41c:	0025aa00 	call	25aa0 <__adddf3>
    f420:	d9c00217 	ldw	r7,8(sp)
    f424:	980d883a 	mov	r6,r19
    f428:	1009883a 	mov	r4,r2
    f42c:	180b883a 	mov	r5,r3
    f430:	0025aa00 	call	25aa0 <__adddf3>
    f434:	d9800117 	ldw	r6,4(sp)
    f438:	b80f883a 	mov	r7,r23
    f43c:	1009883a 	mov	r4,r2
    f440:	180b883a 	mov	r5,r3
    f444:	0025aa00 	call	25aa0 <__adddf3>
    f448:	d9800117 	ldw	r6,4(sp)
    f44c:	b80f883a 	mov	r7,r23
    f450:	0009883a 	mov	r4,zero
    f454:	180b883a 	mov	r5,r3
    f458:	1821883a 	mov	r16,r3
    f45c:	00277e00 	call	277e0 <__subdf3>
    f460:	d9c00217 	ldw	r7,8(sp)
    f464:	980d883a 	mov	r6,r19
    f468:	1009883a 	mov	r4,r2
    f46c:	180b883a 	mov	r5,r3
    f470:	00277e00 	call	277e0 <__subdf3>
    f474:	d9800017 	ldw	r6,0(sp)
    f478:	900f883a 	mov	r7,r18
    f47c:	1009883a 	mov	r4,r2
    f480:	180b883a 	mov	r5,r3
    f484:	00277e00 	call	277e0 <__subdf3>
    f488:	880b883a 	mov	r5,r17
    f48c:	100d883a 	mov	r6,r2
    f490:	180f883a 	mov	r7,r3
    f494:	a009883a 	mov	r4,r20
    f498:	00277e00 	call	277e0 <__subdf3>
    f49c:	dac00b17 	ldw	r11,44(sp)
    f4a0:	aabfffc4 	addi	r10,r21,-1
    f4a4:	1025883a 	mov	r18,r2
    f4a8:	52d6b03a 	or	r11,r10,r11
    f4ac:	1823883a 	mov	r17,r3
    f4b0:	58015826 	beq	r11,zero,fa14 <__ieee754_pow+0xe28>
    f4b4:	04cffc34 	movhi	r19,16368
    f4b8:	b009883a 	mov	r4,r22
    f4bc:	000d883a 	mov	r6,zero
    f4c0:	e00f883a 	mov	r7,fp
    f4c4:	e00b883a 	mov	r5,fp
    f4c8:	00277e00 	call	277e0 <__subdf3>
    f4cc:	800f883a 	mov	r7,r16
    f4d0:	000d883a 	mov	r6,zero
    f4d4:	1009883a 	mov	r4,r2
    f4d8:	180b883a 	mov	r5,r3
    f4dc:	0026f740 	call	26f74 <__muldf3>
    f4e0:	b00d883a 	mov	r6,r22
    f4e4:	9009883a 	mov	r4,r18
    f4e8:	880b883a 	mov	r5,r17
    f4ec:	e00f883a 	mov	r7,fp
    f4f0:	1829883a 	mov	r20,r3
    f4f4:	102b883a 	mov	r21,r2
    f4f8:	0026f740 	call	26f74 <__muldf3>
    f4fc:	a00b883a 	mov	r5,r20
    f500:	100d883a 	mov	r6,r2
    f504:	180f883a 	mov	r7,r3
    f508:	a809883a 	mov	r4,r21
    f50c:	0025aa00 	call	25aa0 <__adddf3>
    f510:	800b883a 	mov	r5,r16
    f514:	000d883a 	mov	r6,zero
    f518:	e00f883a 	mov	r7,fp
    f51c:	0009883a 	mov	r4,zero
    f520:	102d883a 	mov	r22,r2
    f524:	1829883a 	mov	r20,r3
    f528:	0026f740 	call	26f74 <__muldf3>
    f52c:	100d883a 	mov	r6,r2
    f530:	180f883a 	mov	r7,r3
    f534:	b009883a 	mov	r4,r22
    f538:	a00b883a 	mov	r5,r20
    f53c:	1025883a 	mov	r18,r2
    f540:	1823883a 	mov	r17,r3
    f544:	0025aa00 	call	25aa0 <__adddf3>
    f548:	102f883a 	mov	r23,r2
    f54c:	00902434 	movhi	r2,16528
    f550:	10bfffc4 	addi	r2,r2,-1
    f554:	1821883a 	mov	r16,r3
    f558:	9013883a 	mov	r9,r18
    f55c:	8811883a 	mov	r8,r17
    f560:	10c1070e 	bge	r2,r3,f980 <__ieee754_pow+0xd94>
    f564:	00afdc34 	movhi	r2,49008
    f568:	1885883a 	add	r2,r3,r2
    f56c:	15c4b03a 	or	r2,r2,r23
    f570:	1001901e 	bne	r2,zero,fbb4 <__ieee754_pow+0xfc8>
    f574:	01994b34 	movhi	r6,25900
    f578:	01cf25f4 	movhi	r7,15511
    f57c:	31a0bf84 	addi	r6,r6,-32002
    f580:	39c551c4 	addi	r7,r7,5447
    f584:	b009883a 	mov	r4,r22
    f588:	a00b883a 	mov	r5,r20
    f58c:	0025aa00 	call	25aa0 <__adddf3>
    f590:	900d883a 	mov	r6,r18
    f594:	880f883a 	mov	r7,r17
    f598:	b809883a 	mov	r4,r23
    f59c:	800b883a 	mov	r5,r16
    f5a0:	1039883a 	mov	fp,r2
    f5a4:	182b883a 	mov	r21,r3
    f5a8:	00277e00 	call	277e0 <__subdf3>
    f5ac:	100d883a 	mov	r6,r2
    f5b0:	180f883a 	mov	r7,r3
    f5b4:	e009883a 	mov	r4,fp
    f5b8:	a80b883a 	mov	r5,r21
    f5bc:	0026da40 	call	26da4 <__gedf2>
    f5c0:	00817c16 	blt	zero,r2,fbb4 <__ieee754_pow+0xfc8>
    f5c4:	802b883a 	mov	r21,r16
    f5c8:	a805d53a 	srai	r2,r21,20
    f5cc:	00c00434 	movhi	r3,16
    f5d0:	01000434 	movhi	r4,16
    f5d4:	10bf0084 	addi	r2,r2,-1022
    f5d8:	1885d83a 	sra	r2,r3,r2
    f5dc:	213fffc4 	addi	r4,r4,-1
    f5e0:	1405883a 	add	r2,r2,r16
    f5e4:	1006907a 	slli	r3,r2,1
    f5e8:	112a703a 	and	r21,r2,r4
    f5ec:	ad400434 	orhi	r21,r21,16
    f5f0:	1806d57a 	srli	r3,r3,21
    f5f4:	18ff0044 	addi	r3,r3,-1023
    f5f8:	20cfd83a 	sra	r7,r4,r3
    f5fc:	01000504 	movi	r4,20
    f600:	20c7c83a 	sub	r3,r4,r3
    f604:	a8c7d83a 	sra	r3,r21,r3
    f608:	01ce303a 	nor	r7,zero,r7
    f60c:	388e703a 	and	r7,r7,r2
    f610:	d8c00015 	stw	r3,0(sp)
    f614:	80019016 	blt	r16,zero,fc58 <__ieee754_pow+0x106c>
    f618:	000d883a 	mov	r6,zero
    f61c:	9009883a 	mov	r4,r18
    f620:	880b883a 	mov	r5,r17
    f624:	00277e00 	call	277e0 <__subdf3>
    f628:	100d883a 	mov	r6,r2
    f62c:	180f883a 	mov	r7,r3
    f630:	b009883a 	mov	r4,r22
    f634:	a00b883a 	mov	r5,r20
    f638:	d8c00a15 	stw	r3,40(sp)
    f63c:	d8800815 	stw	r2,32(sp)
    f640:	0025aa00 	call	25aa0 <__adddf3>
    f644:	d8800017 	ldw	r2,0(sp)
    f648:	da000a17 	ldw	r8,40(sp)
    f64c:	da400817 	ldw	r9,32(sp)
    f650:	1004953a 	slli	r2,r2,20
    f654:	1821883a 	mov	r16,r3
    f658:	d8800215 	stw	r2,8(sp)
    f65c:	01cff9b4 	movhi	r7,16358
    f660:	800b883a 	mov	r5,r16
    f664:	39cb90c4 	addi	r7,r7,11843
    f668:	0009883a 	mov	r4,zero
    f66c:	000d883a 	mov	r6,zero
    f670:	da000a15 	stw	r8,40(sp)
    f674:	da400815 	stw	r9,32(sp)
    f678:	0026f740 	call	26f74 <__muldf3>
    f67c:	da400817 	ldw	r9,32(sp)
    f680:	da000a17 	ldw	r8,40(sp)
    f684:	800b883a 	mov	r5,r16
    f688:	480d883a 	mov	r6,r9
    f68c:	400f883a 	mov	r7,r8
    f690:	0009883a 	mov	r4,zero
    f694:	1039883a 	mov	fp,r2
    f698:	182f883a 	mov	r23,r3
    f69c:	00277e00 	call	277e0 <__subdf3>
    f6a0:	b009883a 	mov	r4,r22
    f6a4:	a00b883a 	mov	r5,r20
    f6a8:	100d883a 	mov	r6,r2
    f6ac:	180f883a 	mov	r7,r3
    f6b0:	00277e00 	call	277e0 <__subdf3>
    f6b4:	01bfbeb4 	movhi	r6,65274
    f6b8:	01cff9b4 	movhi	r7,16358
    f6bc:	318e7bc4 	addi	r6,r6,14831
    f6c0:	39cb9084 	addi	r7,r7,11842
    f6c4:	1009883a 	mov	r4,r2
    f6c8:	180b883a 	mov	r5,r3
    f6cc:	0026f740 	call	26f74 <__muldf3>
    f6d0:	01832a34 	movhi	r6,3240
    f6d4:	01ef8834 	movhi	r7,48672
    f6d8:	800b883a 	mov	r5,r16
    f6dc:	319b0e44 	addi	r6,r6,27705
    f6e0:	39d71844 	addi	r7,r7,23649
    f6e4:	0009883a 	mov	r4,zero
    f6e8:	1029883a 	mov	r20,r2
    f6ec:	1823883a 	mov	r17,r3
    f6f0:	0026f740 	call	26f74 <__muldf3>
    f6f4:	a009883a 	mov	r4,r20
    f6f8:	880b883a 	mov	r5,r17
    f6fc:	100d883a 	mov	r6,r2
    f700:	180f883a 	mov	r7,r3
    f704:	0025aa00 	call	25aa0 <__adddf3>
    f708:	e009883a 	mov	r4,fp
    f70c:	b80b883a 	mov	r5,r23
    f710:	100d883a 	mov	r6,r2
    f714:	180f883a 	mov	r7,r3
    f718:	102d883a 	mov	r22,r2
    f71c:	1829883a 	mov	r20,r3
    f720:	0025aa00 	call	25aa0 <__adddf3>
    f724:	e00d883a 	mov	r6,fp
    f728:	b80f883a 	mov	r7,r23
    f72c:	1009883a 	mov	r4,r2
    f730:	180b883a 	mov	r5,r3
    f734:	1023883a 	mov	r17,r2
    f738:	1821883a 	mov	r16,r3
    f73c:	00277e00 	call	277e0 <__subdf3>
    f740:	b009883a 	mov	r4,r22
    f744:	a00b883a 	mov	r5,r20
    f748:	100d883a 	mov	r6,r2
    f74c:	180f883a 	mov	r7,r3
    f750:	00277e00 	call	277e0 <__subdf3>
    f754:	880d883a 	mov	r6,r17
    f758:	800f883a 	mov	r7,r16
    f75c:	8809883a 	mov	r4,r17
    f760:	800b883a 	mov	r5,r16
    f764:	1039883a 	mov	fp,r2
    f768:	182f883a 	mov	r23,r3
    f76c:	0026f740 	call	26f74 <__muldf3>
    f770:	019caff4 	movhi	r6,29375
    f774:	01cf99b4 	movhi	r7,15974
    f778:	31a93404 	addi	r6,r6,-23344
    f77c:	39cdda44 	addi	r7,r7,14185
    f780:	1009883a 	mov	r4,r2
    f784:	180b883a 	mov	r5,r3
    f788:	102d883a 	mov	r22,r2
    f78c:	1829883a 	mov	r20,r3
    f790:	0026f740 	call	26f74 <__muldf3>
    f794:	01b174b4 	movhi	r6,50642
    f798:	01cfaf34 	movhi	r7,16060
    f79c:	319afc44 	addi	r6,r6,27633
    f7a0:	39ef5044 	addi	r7,r7,-17087
    f7a4:	1009883a 	mov	r4,r2
    f7a8:	180b883a 	mov	r5,r3
    f7ac:	00277e00 	call	277e0 <__subdf3>
    f7b0:	b00d883a 	mov	r6,r22
    f7b4:	a00f883a 	mov	r7,r20
    f7b8:	1009883a 	mov	r4,r2
    f7bc:	180b883a 	mov	r5,r3
    f7c0:	0026f740 	call	26f74 <__muldf3>
    f7c4:	01abc9b4 	movhi	r6,44838
    f7c8:	01cfc474 	movhi	r7,16145
    f7cc:	31b78b04 	addi	r6,r6,-8660
    f7d0:	39d59a84 	addi	r7,r7,22122
    f7d4:	1009883a 	mov	r4,r2
    f7d8:	180b883a 	mov	r5,r3
    f7dc:	0025aa00 	call	25aa0 <__adddf3>
    f7e0:	b00d883a 	mov	r6,r22
    f7e4:	a00f883a 	mov	r7,r20
    f7e8:	1009883a 	mov	r4,r2
    f7ec:	180b883a 	mov	r5,r3
    f7f0:	0026f740 	call	26f74 <__muldf3>
    f7f4:	0185aff4 	movhi	r6,5823
    f7f8:	01cfd9f4 	movhi	r7,16231
    f7fc:	31af64c4 	addi	r6,r6,-17005
    f800:	39f05b04 	addi	r7,r7,-16020
    f804:	1009883a 	mov	r4,r2
    f808:	180b883a 	mov	r5,r3
    f80c:	00277e00 	call	277e0 <__subdf3>
    f810:	b00d883a 	mov	r6,r22
    f814:	a00f883a 	mov	r7,r20
    f818:	1009883a 	mov	r4,r2
    f81c:	180b883a 	mov	r5,r3
    f820:	0026f740 	call	26f74 <__muldf3>
    f824:	01955574 	movhi	r6,21845
    f828:	01cff174 	movhi	r7,16325
    f82c:	31954f84 	addi	r6,r6,21822
    f830:	39d55544 	addi	r7,r7,21845
    f834:	1009883a 	mov	r4,r2
    f838:	180b883a 	mov	r5,r3
    f83c:	0025aa00 	call	25aa0 <__adddf3>
    f840:	b00d883a 	mov	r6,r22
    f844:	a00f883a 	mov	r7,r20
    f848:	1009883a 	mov	r4,r2
    f84c:	180b883a 	mov	r5,r3
    f850:	0026f740 	call	26f74 <__muldf3>
    f854:	100d883a 	mov	r6,r2
    f858:	180f883a 	mov	r7,r3
    f85c:	8809883a 	mov	r4,r17
    f860:	800b883a 	mov	r5,r16
    f864:	00277e00 	call	277e0 <__subdf3>
    f868:	100d883a 	mov	r6,r2
    f86c:	180f883a 	mov	r7,r3
    f870:	8809883a 	mov	r4,r17
    f874:	800b883a 	mov	r5,r16
    f878:	102d883a 	mov	r22,r2
    f87c:	1829883a 	mov	r20,r3
    f880:	0026f740 	call	26f74 <__muldf3>
    f884:	b009883a 	mov	r4,r22
    f888:	a00b883a 	mov	r5,r20
    f88c:	000d883a 	mov	r6,zero
    f890:	01d00034 	movhi	r7,16384
    f894:	1025883a 	mov	r18,r2
    f898:	182b883a 	mov	r21,r3
    f89c:	00277e00 	call	277e0 <__subdf3>
    f8a0:	100d883a 	mov	r6,r2
    f8a4:	180f883a 	mov	r7,r3
    f8a8:	9009883a 	mov	r4,r18
    f8ac:	a80b883a 	mov	r5,r21
    f8b0:	002634c0 	call	2634c <__divdf3>
    f8b4:	e00d883a 	mov	r6,fp
    f8b8:	b80f883a 	mov	r7,r23
    f8bc:	8809883a 	mov	r4,r17
    f8c0:	800b883a 	mov	r5,r16
    f8c4:	102d883a 	mov	r22,r2
    f8c8:	1829883a 	mov	r20,r3
    f8cc:	0026f740 	call	26f74 <__muldf3>
    f8d0:	e00d883a 	mov	r6,fp
    f8d4:	b80f883a 	mov	r7,r23
    f8d8:	1009883a 	mov	r4,r2
    f8dc:	180b883a 	mov	r5,r3
    f8e0:	0025aa00 	call	25aa0 <__adddf3>
    f8e4:	100d883a 	mov	r6,r2
    f8e8:	180f883a 	mov	r7,r3
    f8ec:	b009883a 	mov	r4,r22
    f8f0:	a00b883a 	mov	r5,r20
    f8f4:	00277e00 	call	277e0 <__subdf3>
    f8f8:	880d883a 	mov	r6,r17
    f8fc:	800f883a 	mov	r7,r16
    f900:	1009883a 	mov	r4,r2
    f904:	180b883a 	mov	r5,r3
    f908:	00277e00 	call	277e0 <__subdf3>
    f90c:	0009883a 	mov	r4,zero
    f910:	014ffc34 	movhi	r5,16368
    f914:	100d883a 	mov	r6,r2
    f918:	180f883a 	mov	r7,r3
    f91c:	00277e00 	call	277e0 <__subdf3>
    f920:	d9000217 	ldw	r4,8(sp)
    f924:	190b883a 	add	r5,r3,r4
    f928:	2809d53a 	srai	r4,r5,20
    f92c:	0100cd0e 	bge	zero,r4,fc64 <__ieee754_pow+0x1078>
    f930:	1009883a 	mov	r4,r2
    f934:	000d883a 	mov	r6,zero
    f938:	980f883a 	mov	r7,r19
    f93c:	0026f740 	call	26f74 <__muldf3>
    f940:	003ce606 	br	ecdc <__alt_data_end+0xfffd04dc>
    f944:	00b00434 	movhi	r2,49168
    f948:	8885883a 	add	r2,r17,r2
    f94c:	1544b03a 	or	r2,r2,r21
    f950:	1000b326 	beq	r2,zero,fc20 <__ieee754_pow+0x1034>
    f954:	00800044 	movi	r2,1
    f958:	a8bd181e 	bne	r21,r2,edbc <__alt_data_end+0xfffd05bc>
    f95c:	18e0003c 	xorhi	r3,r3,32768
    f960:	b805883a 	mov	r2,r23
    f964:	003cdd06 	br	ecdc <__alt_data_end+0xfffd04dc>
    f968:	800d883a 	mov	r6,r16
    f96c:	980f883a 	mov	r7,r19
    f970:	8009883a 	mov	r4,r16
    f974:	980b883a 	mov	r5,r19
    f978:	0026f740 	call	26f74 <__muldf3>
    f97c:	003cd706 	br	ecdc <__alt_data_end+0xfffd04dc>
    f980:	05600034 	movhi	r21,32768
    f984:	ad7fffc4 	addi	r21,r21,-1
    f988:	00902474 	movhi	r2,16529
    f98c:	1d6a703a 	and	r21,r3,r21
    f990:	10b2ffc4 	addi	r2,r2,-13313
    f994:	15409d0e 	bge	r2,r21,fc0c <__ieee754_pow+0x1020>
    f998:	008fdbf4 	movhi	r2,16239
    f99c:	108d0004 	addi	r2,r2,13312
    f9a0:	1885883a 	add	r2,r3,r2
    f9a4:	15c4b03a 	or	r2,r2,r23
    f9a8:	10000b1e 	bne	r2,zero,f9d8 <__ieee754_pow+0xdec>
    f9ac:	900d883a 	mov	r6,r18
    f9b0:	880f883a 	mov	r7,r17
    f9b4:	b809883a 	mov	r4,r23
    f9b8:	180b883a 	mov	r5,r3
    f9bc:	00277e00 	call	277e0 <__subdf3>
    f9c0:	100d883a 	mov	r6,r2
    f9c4:	180f883a 	mov	r7,r3
    f9c8:	b009883a 	mov	r4,r22
    f9cc:	a00b883a 	mov	r5,r20
    f9d0:	0026e800 	call	26e80 <__ledf2>
    f9d4:	00befc16 	blt	zero,r2,f5c8 <__alt_data_end+0xfffd0dc8>
    f9d8:	01b0be74 	movhi	r6,49913
    f9dc:	01c06974 	movhi	r7,421
    f9e0:	980b883a 	mov	r5,r19
    f9e4:	31bcd644 	addi	r6,r6,-3239
    f9e8:	39db87c4 	addi	r7,r7,28191
    f9ec:	0009883a 	mov	r4,zero
    f9f0:	0026f740 	call	26f74 <__muldf3>
    f9f4:	01b0be74 	movhi	r6,49913
    f9f8:	01c06974 	movhi	r7,421
    f9fc:	31bcd644 	addi	r6,r6,-3239
    fa00:	39db87c4 	addi	r7,r7,28191
    fa04:	1009883a 	mov	r4,r2
    fa08:	180b883a 	mov	r5,r3
    fa0c:	0026f740 	call	26f74 <__muldf3>
    fa10:	003cb206 	br	ecdc <__alt_data_end+0xfffd04dc>
    fa14:	04effc34 	movhi	r19,49136
    fa18:	003ea706 	br	f4b8 <__alt_data_end+0xfffd0cb8>
    fa1c:	e03cdc0e 	bge	fp,zero,ed90 <__alt_data_end+0xfffd0590>
    fa20:	0005883a 	mov	r2,zero
    fa24:	e0e0003c 	xorhi	r3,fp,32768
    fa28:	003cac06 	br	ecdc <__alt_data_end+0xfffd04dc>
    fa2c:	0019883a 	mov	r12,zero
    fa30:	003d3206 	br	eefc <__alt_data_end+0xfffd06fc>
    fa34:	008ffc34 	movhi	r2,16368
    fa38:	10bfff84 	addi	r2,r2,-2
    fa3c:	147cd30e 	bge	r2,r17,ed8c <__alt_data_end+0xfffd058c>
    fa40:	01cffc34 	movhi	r7,16368
    fa44:	3c7cea16 	blt	r7,r17,edf0 <__alt_data_end+0xfffd05f0>
    fa48:	b809883a 	mov	r4,r23
    fa4c:	000d883a 	mov	r6,zero
    fa50:	180b883a 	mov	r5,r3
    fa54:	dac00b15 	stw	r11,44(sp)
    fa58:	00277e00 	call	277e0 <__subdf3>
    fa5c:	01cffdf4 	movhi	r7,16375
    fa60:	39c551c4 	addi	r7,r7,5447
    fa64:	01980034 	movhi	r6,24576
    fa68:	1009883a 	mov	r4,r2
    fa6c:	180b883a 	mov	r5,r3
    fa70:	1023883a 	mov	r17,r2
    fa74:	1821883a 	mov	r16,r3
    fa78:	0026f740 	call	26f74 <__muldf3>
    fa7c:	01be17b4 	movhi	r6,63582
    fa80:	01cf9574 	movhi	r7,15957
    fa84:	8809883a 	mov	r4,r17
    fa88:	800b883a 	mov	r5,r16
    fa8c:	31b7d104 	addi	r6,r6,-8380
    fa90:	39eb82c4 	addi	r7,r7,-20981
    fa94:	1027883a 	mov	r19,r2
    fa98:	1825883a 	mov	r18,r3
    fa9c:	0026f740 	call	26f74 <__muldf3>
    faa0:	8809883a 	mov	r4,r17
    faa4:	800b883a 	mov	r5,r16
    faa8:	000d883a 	mov	r6,zero
    faac:	01cff434 	movhi	r7,16336
    fab0:	1829883a 	mov	r20,r3
    fab4:	d8800a15 	stw	r2,40(sp)
    fab8:	0026f740 	call	26f74 <__muldf3>
    fabc:	01155574 	movhi	r4,21845
    fac0:	014ff574 	movhi	r5,16341
    fac4:	100d883a 	mov	r6,r2
    fac8:	180f883a 	mov	r7,r3
    facc:	21155544 	addi	r4,r4,21845
    fad0:	29555544 	addi	r5,r5,21845
    fad4:	00277e00 	call	277e0 <__subdf3>
    fad8:	880d883a 	mov	r6,r17
    fadc:	800f883a 	mov	r7,r16
    fae0:	1009883a 	mov	r4,r2
    fae4:	180b883a 	mov	r5,r3
    fae8:	0026f740 	call	26f74 <__muldf3>
    faec:	100d883a 	mov	r6,r2
    faf0:	180f883a 	mov	r7,r3
    faf4:	0009883a 	mov	r4,zero
    faf8:	014ff834 	movhi	r5,16352
    fafc:	00277e00 	call	277e0 <__subdf3>
    fb00:	880d883a 	mov	r6,r17
    fb04:	800f883a 	mov	r7,r16
    fb08:	8809883a 	mov	r4,r17
    fb0c:	800b883a 	mov	r5,r16
    fb10:	102f883a 	mov	r23,r2
    fb14:	d8c00815 	stw	r3,32(sp)
    fb18:	0026f740 	call	26f74 <__muldf3>
    fb1c:	da400817 	ldw	r9,32(sp)
    fb20:	100d883a 	mov	r6,r2
    fb24:	180f883a 	mov	r7,r3
    fb28:	480b883a 	mov	r5,r9
    fb2c:	b809883a 	mov	r4,r23
    fb30:	0026f740 	call	26f74 <__muldf3>
    fb34:	01994b34 	movhi	r6,25900
    fb38:	01cffdf4 	movhi	r7,16375
    fb3c:	31a0bf84 	addi	r6,r6,-32002
    fb40:	39c551c4 	addi	r7,r7,5447
    fb44:	1009883a 	mov	r4,r2
    fb48:	180b883a 	mov	r5,r3
    fb4c:	0026f740 	call	26f74 <__muldf3>
    fb50:	da000a17 	ldw	r8,40(sp)
    fb54:	a00b883a 	mov	r5,r20
    fb58:	100d883a 	mov	r6,r2
    fb5c:	4009883a 	mov	r4,r8
    fb60:	180f883a 	mov	r7,r3
    fb64:	00277e00 	call	277e0 <__subdf3>
    fb68:	100d883a 	mov	r6,r2
    fb6c:	180f883a 	mov	r7,r3
    fb70:	9809883a 	mov	r4,r19
    fb74:	900b883a 	mov	r5,r18
    fb78:	1029883a 	mov	r20,r2
    fb7c:	1823883a 	mov	r17,r3
    fb80:	0025aa00 	call	25aa0 <__adddf3>
    fb84:	1821883a 	mov	r16,r3
    fb88:	980d883a 	mov	r6,r19
    fb8c:	900f883a 	mov	r7,r18
    fb90:	0009883a 	mov	r4,zero
    fb94:	180b883a 	mov	r5,r3
    fb98:	003e3a06 	br	f484 <__alt_data_end+0xfffd0c84>
    fb9c:	800d883a 	mov	r6,r16
    fba0:	980f883a 	mov	r7,r19
    fba4:	0009883a 	mov	r4,zero
    fba8:	900b883a 	mov	r5,r18
    fbac:	002634c0 	call	2634c <__divdf3>
    fbb0:	003c4a06 	br	ecdc <__alt_data_end+0xfffd04dc>
    fbb4:	01a20034 	movhi	r6,34816
    fbb8:	01df8e34 	movhi	r7,32312
    fbbc:	980b883a 	mov	r5,r19
    fbc0:	319d6704 	addi	r6,r6,30108
    fbc4:	39f90f04 	addi	r7,r7,-7108
    fbc8:	0009883a 	mov	r4,zero
    fbcc:	0026f740 	call	26f74 <__muldf3>
    fbd0:	01a20034 	movhi	r6,34816
    fbd4:	01df8e34 	movhi	r7,32312
    fbd8:	319d6704 	addi	r6,r6,30108
    fbdc:	39f90f04 	addi	r7,r7,-7108
    fbe0:	1009883a 	mov	r4,r2
    fbe4:	180b883a 	mov	r5,r3
    fbe8:	0026f740 	call	26f74 <__muldf3>
    fbec:	003c3b06 	br	ecdc <__alt_data_end+0xfffd04dc>
    fbf0:	303c551e 	bne	r6,zero,ed48 <__alt_data_end+0xfffd0548>
    fbf4:	1885c83a 	sub	r2,r3,r2
    fbf8:	9087d83a 	sra	r3,r18,r2
    fbfc:	1884983a 	sll	r2,r3,r2
    fc00:	90801f26 	beq	r18,r2,fc80 <__ieee754_pow+0x1094>
    fc04:	002b883a 	mov	r21,zero
    fc08:	003c1806 	br	ec6c <__alt_data_end+0xfffd046c>
    fc0c:	008ff834 	movhi	r2,16352
    fc10:	157e6d16 	blt	r2,r21,f5c8 <__alt_data_end+0xfffd0dc8>
    fc14:	d8000215 	stw	zero,8(sp)
    fc18:	d8000015 	stw	zero,0(sp)
    fc1c:	003e8f06 	br	f65c <__alt_data_end+0xfffd0e5c>
    fc20:	b80d883a 	mov	r6,r23
    fc24:	180f883a 	mov	r7,r3
    fc28:	003c9e06 	br	eea4 <__alt_data_end+0xfffd06a4>
    fc2c:	008ff8f4 	movhi	r2,16355
    fc30:	10ae00c4 	addi	r2,r2,-18429
    fc34:	0250f434 	movhi	r9,17360
    fc38:	020f9374 	movhi	r8,15949
    fc3c:	d8800215 	stw	r2,8(sp)
    fc40:	4a740184 	addi	r9,r9,-12282
    fc44:	423f7ac4 	addi	r8,r8,-533
    fc48:	04d00034 	movhi	r19,16384
    fc4c:	02800134 	movhi	r10,4
    fc50:	048ffe34 	movhi	r18,16376
    fc54:	003cbf06 	br	ef54 <__alt_data_end+0xfffd0754>
    fc58:	00c9c83a 	sub	r4,zero,r3
    fc5c:	d9000015 	stw	r4,0(sp)
    fc60:	003e6d06 	br	f618 <__alt_data_end+0xfffd0e18>
    fc64:	d9800017 	ldw	r6,0(sp)
    fc68:	1009883a 	mov	r4,r2
    fc6c:	180b883a 	mov	r5,r3
    fc70:	00101bc0 	call	101bc <scalbn>
    fc74:	1009883a 	mov	r4,r2
    fc78:	180b883a 	mov	r5,r3
    fc7c:	003f2d06 	br	f934 <__alt_data_end+0xfffd1134>
    fc80:	18c0004c 	andi	r3,r3,1
    fc84:	02800084 	movi	r10,2
    fc88:	50ebc83a 	sub	r21,r10,r3
    fc8c:	003bf706 	br	ec6c <__alt_data_end+0xfffd046c>

0000fc90 <__ieee754_sqrt>:
    fc90:	defffd04 	addi	sp,sp,-12
    fc94:	dc400115 	stw	r17,4(sp)
    fc98:	dc000015 	stw	r16,0(sp)
    fc9c:	dfc00215 	stw	ra,8(sp)
    fca0:	28dffc2c 	andhi	r3,r5,32752
    fca4:	009ffc34 	movhi	r2,32752
    fca8:	2821883a 	mov	r16,r5
    fcac:	2023883a 	mov	r17,r4
    fcb0:	200d883a 	mov	r6,r4
    fcb4:	18807b26 	beq	r3,r2,fea4 <__ieee754_sqrt+0x214>
    fcb8:	01405f0e 	bge	zero,r5,fe38 <__ieee754_sqrt+0x1a8>
    fcbc:	2815d53a 	srai	r10,r5,20
    fcc0:	50006a26 	beq	r10,zero,fe6c <__ieee754_sqrt+0x1dc>
    fcc4:	00c00434 	movhi	r3,16
    fcc8:	52bf0044 	addi	r10,r10,-1023
    fccc:	18ffffc4 	addi	r3,r3,-1
    fcd0:	80c6703a 	and	r3,r16,r3
    fcd4:	5080004c 	andi	r2,r10,1
    fcd8:	18c00434 	orhi	r3,r3,16
    fcdc:	1000511e 	bne	r2,zero,fe24 <__ieee754_sqrt+0x194>
    fce0:	3004d7fa 	srli	r2,r6,31
    fce4:	5015d07a 	srai	r10,r10,1
    fce8:	18c7883a 	add	r3,r3,r3
    fcec:	10c5883a 	add	r2,r2,r3
    fcf0:	01400584 	movi	r5,22
    fcf4:	3187883a 	add	r3,r6,r6
    fcf8:	0013883a 	mov	r9,zero
    fcfc:	000f883a 	mov	r7,zero
    fd00:	01000834 	movhi	r4,32
    fd04:	390d883a 	add	r6,r7,r4
    fd08:	1810d7fa 	srli	r8,r3,31
    fd0c:	297fffc4 	addi	r5,r5,-1
    fd10:	11800316 	blt	r2,r6,fd20 <__ieee754_sqrt+0x90>
    fd14:	1185c83a 	sub	r2,r2,r6
    fd18:	310f883a 	add	r7,r6,r4
    fd1c:	4913883a 	add	r9,r9,r4
    fd20:	1085883a 	add	r2,r2,r2
    fd24:	4085883a 	add	r2,r8,r2
    fd28:	18c7883a 	add	r3,r3,r3
    fd2c:	2008d07a 	srli	r4,r4,1
    fd30:	283ff41e 	bne	r5,zero,fd04 <__alt_data_end+0xfffd1504>
    fd34:	01200034 	movhi	r4,32768
    fd38:	01800804 	movi	r6,32
    fd3c:	0011883a 	mov	r8,zero
    fd40:	0019883a 	mov	r12,zero
    fd44:	201b883a 	mov	r13,r4
    fd48:	00000806 	br	fd6c <__ieee754_sqrt+0xdc>
    fd4c:	38801726 	beq	r7,r2,fdac <__ieee754_sqrt+0x11c>
    fd50:	180ad7fa 	srli	r5,r3,31
    fd54:	1085883a 	add	r2,r2,r2
    fd58:	31bfffc4 	addi	r6,r6,-1
    fd5c:	2885883a 	add	r2,r5,r2
    fd60:	18c7883a 	add	r3,r3,r3
    fd64:	2008d07a 	srli	r4,r4,1
    fd68:	30001726 	beq	r6,zero,fdc8 <__ieee754_sqrt+0x138>
    fd6c:	230b883a 	add	r5,r4,r12
    fd70:	38bff60e 	bge	r7,r2,fd4c <__alt_data_end+0xfffd154c>
    fd74:	2ae0002c 	andhi	r11,r5,32768
    fd78:	2919883a 	add	r12,r5,r4
    fd7c:	5b400826 	beq	r11,r13,fda0 <__ieee754_sqrt+0x110>
    fd80:	3817883a 	mov	r11,r7
    fd84:	11c5c83a 	sub	r2,r2,r7
    fd88:	1940012e 	bgeu	r3,r5,fd90 <__ieee754_sqrt+0x100>
    fd8c:	10bfffc4 	addi	r2,r2,-1
    fd90:	1947c83a 	sub	r3,r3,r5
    fd94:	4111883a 	add	r8,r8,r4
    fd98:	580f883a 	mov	r7,r11
    fd9c:	003fec06 	br	fd50 <__alt_data_end+0xfffd1550>
    fda0:	603ff716 	blt	r12,zero,fd80 <__alt_data_end+0xfffd1580>
    fda4:	3ac00044 	addi	r11,r7,1
    fda8:	003ff606 	br	fd84 <__alt_data_end+0xfffd1584>
    fdac:	19401936 	bltu	r3,r5,fe14 <__ieee754_sqrt+0x184>
    fdb0:	2ae0002c 	andhi	r11,r5,32768
    fdb4:	2919883a 	add	r12,r5,r4
    fdb8:	5b404526 	beq	r11,r13,fed0 <__ieee754_sqrt+0x240>
    fdbc:	1017883a 	mov	r11,r2
    fdc0:	0005883a 	mov	r2,zero
    fdc4:	003ff206 	br	fd90 <__alt_data_end+0xfffd1590>
    fdc8:	10c4b03a 	or	r2,r2,r3
    fdcc:	10000426 	beq	r2,zero,fde0 <__ieee754_sqrt+0x150>
    fdd0:	00bfffc4 	movi	r2,-1
    fdd4:	40804026 	beq	r8,r2,fed8 <__ieee754_sqrt+0x248>
    fdd8:	4080004c 	andi	r2,r8,1
    fddc:	4091883a 	add	r8,r8,r2
    fde0:	4004d07a 	srli	r2,r8,1
    fde4:	4807d07a 	srai	r3,r9,1
    fde8:	010ff834 	movhi	r4,16352
    fdec:	4a40004c 	andi	r9,r9,1
    fdf0:	1909883a 	add	r4,r3,r4
    fdf4:	4800091e 	bne	r9,zero,fe1c <__ieee754_sqrt+0x18c>
    fdf8:	5006953a 	slli	r3,r10,20
    fdfc:	1907883a 	add	r3,r3,r4
    fe00:	dfc00217 	ldw	ra,8(sp)
    fe04:	dc400117 	ldw	r17,4(sp)
    fe08:	dc000017 	ldw	r16,0(sp)
    fe0c:	dec00304 	addi	sp,sp,12
    fe10:	f800283a 	ret
    fe14:	3805883a 	mov	r2,r7
    fe18:	003fcd06 	br	fd50 <__alt_data_end+0xfffd1550>
    fe1c:	10a00034 	orhi	r2,r2,32768
    fe20:	003ff506 	br	fdf8 <__alt_data_end+0xfffd15f8>
    fe24:	3004d7fa 	srli	r2,r6,31
    fe28:	18c7883a 	add	r3,r3,r3
    fe2c:	318d883a 	add	r6,r6,r6
    fe30:	10c7883a 	add	r3,r2,r3
    fe34:	003faa06 	br	fce0 <__alt_data_end+0xfffd14e0>
    fe38:	00a00034 	movhi	r2,32768
    fe3c:	10bfffc4 	addi	r2,r2,-1
    fe40:	2884703a 	and	r2,r5,r2
    fe44:	1104b03a 	or	r2,r2,r4
    fe48:	10001e26 	beq	r2,zero,fec4 <__ieee754_sqrt+0x234>
    fe4c:	2800291e 	bne	r5,zero,fef4 <__ieee754_sqrt+0x264>
    fe50:	0015883a 	mov	r10,zero
    fe54:	3020d2fa 	srli	r16,r6,11
    fe58:	52bffac4 	addi	r10,r10,-21
    fe5c:	300c957a 	slli	r6,r6,21
    fe60:	803ffc26 	beq	r16,zero,fe54 <__alt_data_end+0xfffd1654>
    fe64:	8080042c 	andhi	r2,r16,16
    fe68:	10001e1e 	bne	r2,zero,fee4 <__ieee754_sqrt+0x254>
    fe6c:	0005883a 	mov	r2,zero
    fe70:	00000106 	br	fe78 <__ieee754_sqrt+0x1e8>
    fe74:	1805883a 	mov	r2,r3
    fe78:	8421883a 	add	r16,r16,r16
    fe7c:	8100042c 	andhi	r4,r16,16
    fe80:	10c00044 	addi	r3,r2,1
    fe84:	203ffb26 	beq	r4,zero,fe74 <__alt_data_end+0xfffd1674>
    fe88:	01000804 	movi	r4,32
    fe8c:	20c9c83a 	sub	r4,r4,r3
    fe90:	3108d83a 	srl	r4,r6,r4
    fe94:	5095c83a 	sub	r10,r10,r2
    fe98:	30cc983a 	sll	r6,r6,r3
    fe9c:	2420b03a 	or	r16,r4,r16
    fea0:	003f8806 	br	fcc4 <__alt_data_end+0xfffd14c4>
    fea4:	280f883a 	mov	r7,r5
    fea8:	0026f740 	call	26f74 <__muldf3>
    feac:	880d883a 	mov	r6,r17
    feb0:	800f883a 	mov	r7,r16
    feb4:	1009883a 	mov	r4,r2
    feb8:	180b883a 	mov	r5,r3
    febc:	0025aa00 	call	25aa0 <__adddf3>
    fec0:	003fcf06 	br	fe00 <__alt_data_end+0xfffd1600>
    fec4:	2005883a 	mov	r2,r4
    fec8:	2807883a 	mov	r3,r5
    fecc:	003fcc06 	br	fe00 <__alt_data_end+0xfffd1600>
    fed0:	603fba16 	blt	r12,zero,fdbc <__alt_data_end+0xfffd15bc>
    fed4:	003fb306 	br	fda4 <__alt_data_end+0xfffd15a4>
    fed8:	4a400044 	addi	r9,r9,1
    fedc:	0005883a 	mov	r2,zero
    fee0:	003fc006 	br	fde4 <__alt_data_end+0xfffd15e4>
    fee4:	01000804 	movi	r4,32
    fee8:	00bfffc4 	movi	r2,-1
    feec:	0007883a 	mov	r3,zero
    fef0:	003fe706 	br	fe90 <__alt_data_end+0xfffd1690>
    fef4:	200d883a 	mov	r6,r4
    fef8:	280f883a 	mov	r7,r5
    fefc:	00277e00 	call	277e0 <__subdf3>
    ff00:	100d883a 	mov	r6,r2
    ff04:	180f883a 	mov	r7,r3
    ff08:	1009883a 	mov	r4,r2
    ff0c:	180b883a 	mov	r5,r3
    ff10:	002634c0 	call	2634c <__divdf3>
    ff14:	003fba06 	br	fe00 <__alt_data_end+0xfffd1600>

0000ff18 <fabs>:
    ff18:	00e00034 	movhi	r3,32768
    ff1c:	18ffffc4 	addi	r3,r3,-1
    ff20:	2005883a 	mov	r2,r4
    ff24:	28c6703a 	and	r3,r5,r3
    ff28:	f800283a 	ret

0000ff2c <finite>:
    ff2c:	00a00034 	movhi	r2,32768
    ff30:	10bfffc4 	addi	r2,r2,-1
    ff34:	288a703a 	and	r5,r5,r2
    ff38:	00e00434 	movhi	r3,32784
    ff3c:	28c5883a 	add	r2,r5,r3
    ff40:	1004d7fa 	srli	r2,r2,31
    ff44:	f800283a 	ret

0000ff48 <__fpclassifyd>:
    ff48:	00a00034 	movhi	r2,32768
    ff4c:	10bfffc4 	addi	r2,r2,-1
    ff50:	2884703a 	and	r2,r5,r2
    ff54:	10000726 	beq	r2,zero,ff74 <__fpclassifyd+0x2c>
    ff58:	00fffc34 	movhi	r3,65520
    ff5c:	019ff834 	movhi	r6,32736
    ff60:	28c7883a 	add	r3,r5,r3
    ff64:	31bfffc4 	addi	r6,r6,-1
    ff68:	30c00536 	bltu	r6,r3,ff80 <__fpclassifyd+0x38>
    ff6c:	00800104 	movi	r2,4
    ff70:	f800283a 	ret
    ff74:	2000021e 	bne	r4,zero,ff80 <__fpclassifyd+0x38>
    ff78:	00800084 	movi	r2,2
    ff7c:	f800283a 	ret
    ff80:	00dffc34 	movhi	r3,32752
    ff84:	019ff834 	movhi	r6,32736
    ff88:	28cb883a 	add	r5,r5,r3
    ff8c:	31bfffc4 	addi	r6,r6,-1
    ff90:	317ff62e 	bgeu	r6,r5,ff6c <__alt_data_end+0xfffd176c>
    ff94:	01400434 	movhi	r5,16
    ff98:	297fffc4 	addi	r5,r5,-1
    ff9c:	28800236 	bltu	r5,r2,ffa8 <__fpclassifyd+0x60>
    ffa0:	008000c4 	movi	r2,3
    ffa4:	f800283a 	ret
    ffa8:	10c00226 	beq	r2,r3,ffb4 <__fpclassifyd+0x6c>
    ffac:	0005883a 	mov	r2,zero
    ffb0:	f800283a 	ret
    ffb4:	2005003a 	cmpeq	r2,r4,zero
    ffb8:	f800283a 	ret

0000ffbc <matherr>:
    ffbc:	0005883a 	mov	r2,zero
    ffc0:	f800283a 	ret

0000ffc4 <nan>:
    ffc4:	0005883a 	mov	r2,zero
    ffc8:	00dffe34 	movhi	r3,32760
    ffcc:	f800283a 	ret

0000ffd0 <rint>:
    ffd0:	2813d53a 	srai	r9,r5,20
    ffd4:	defff904 	addi	sp,sp,-28
    ffd8:	dc000215 	stw	r16,8(sp)
    ffdc:	4a41ffcc 	andi	r9,r9,2047
    ffe0:	dfc00615 	stw	ra,24(sp)
    ffe4:	dcc00515 	stw	r19,20(sp)
    ffe8:	dc800415 	stw	r18,16(sp)
    ffec:	dc400315 	stw	r17,12(sp)
    fff0:	01c004c4 	movi	r7,19
    fff4:	49bf0044 	addi	r6,r9,-1023
    fff8:	2811883a 	mov	r8,r5
    fffc:	2005883a 	mov	r2,r4
   10000:	2807883a 	mov	r3,r5
   10004:	2015883a 	mov	r10,r4
   10008:	2820d7fa 	srli	r16,r5,31
   1000c:	39801316 	blt	r7,r6,1005c <rint+0x8c>
   10010:	30003d16 	blt	r6,zero,10108 <rint+0x138>
   10014:	01000434 	movhi	r4,16
   10018:	213fffc4 	addi	r4,r4,-1
   1001c:	2189d83a 	sra	r4,r4,r6
   10020:	290a703a 	and	r5,r5,r4
   10024:	288ab03a 	or	r5,r5,r2
   10028:	28001026 	beq	r5,zero,1006c <rint+0x9c>
   1002c:	2008d07a 	srli	r4,r4,1
   10030:	4104703a 	and	r2,r8,r4
   10034:	1294b03a 	or	r10,r2,r10
   10038:	50005626 	beq	r10,zero,10194 <rint+0x1c4>
   1003c:	31c05d26 	beq	r6,r7,101b4 <rint+0x1e4>
   10040:	0015883a 	mov	r10,zero
   10044:	00c00134 	movhi	r3,4
   10048:	1987d83a 	sra	r3,r3,r6
   1004c:	0108303a 	nor	r4,zero,r4
   10050:	2210703a 	and	r8,r4,r8
   10054:	40c6b03a 	or	r3,r8,r3
   10058:	00001806 	br	100bc <rint+0xec>
   1005c:	01c00cc4 	movi	r7,51
   10060:	3980090e 	bge	r7,r6,10088 <rint+0xb8>
   10064:	01c10004 	movi	r7,1024
   10068:	31c04e26 	beq	r6,r7,101a4 <rint+0x1d4>
   1006c:	dfc00617 	ldw	ra,24(sp)
   10070:	dcc00517 	ldw	r19,20(sp)
   10074:	dc800417 	ldw	r18,16(sp)
   10078:	dc400317 	ldw	r17,12(sp)
   1007c:	dc000217 	ldw	r16,8(sp)
   10080:	dec00704 	addi	sp,sp,28
   10084:	f800283a 	ret
   10088:	4a7efb44 	addi	r9,r9,-1043
   1008c:	013fffc4 	movi	r4,-1
   10090:	2248d83a 	srl	r4,r4,r9
   10094:	110a703a 	and	r5,r2,r4
   10098:	28004026 	beq	r5,zero,1019c <rint+0x1cc>
   1009c:	2008d07a 	srli	r4,r4,1
   100a0:	1104703a 	and	r2,r2,r4
   100a4:	10000526 	beq	r2,zero,100bc <rint+0xec>
   100a8:	00900034 	movhi	r2,16384
   100ac:	1253d83a 	sra	r9,r2,r9
   100b0:	0108303a 	nor	r4,zero,r4
   100b4:	2294703a 	and	r10,r4,r10
   100b8:	4a94b03a 	or	r10,r9,r10
   100bc:	802090fa 	slli	r16,r16,3
   100c0:	180b883a 	mov	r5,r3
   100c4:	00c000f4 	movhi	r3,3
   100c8:	18e4a404 	addi	r3,r3,-28016
   100cc:	1c21883a 	add	r16,r3,r16
   100d0:	84400017 	ldw	r17,0(r16)
   100d4:	84000117 	ldw	r16,4(r16)
   100d8:	5009883a 	mov	r4,r10
   100dc:	880d883a 	mov	r6,r17
   100e0:	800f883a 	mov	r7,r16
   100e4:	0025aa00 	call	25aa0 <__adddf3>
   100e8:	d8800015 	stw	r2,0(sp)
   100ec:	d8c00115 	stw	r3,4(sp)
   100f0:	d9000017 	ldw	r4,0(sp)
   100f4:	d9400117 	ldw	r5,4(sp)
   100f8:	880d883a 	mov	r6,r17
   100fc:	800f883a 	mov	r7,r16
   10100:	00277e00 	call	277e0 <__subdf3>
   10104:	003fd906 	br	1006c <__alt_data_end+0xfffd186c>
   10108:	04600034 	movhi	r17,32768
   1010c:	8c7fffc4 	addi	r17,r17,-1
   10110:	2c46703a 	and	r3,r5,r17
   10114:	1906b03a 	or	r3,r3,r4
   10118:	18002026 	beq	r3,zero,1019c <rint+0x1cc>
   1011c:	01800434 	movhi	r6,16
   10120:	31bfffc4 	addi	r6,r6,-1
   10124:	298c703a 	and	r6,r5,r6
   10128:	3104b03a 	or	r2,r6,r4
   1012c:	008bc83a 	sub	r5,zero,r2
   10130:	800690fa 	slli	r3,r16,3
   10134:	2884b03a 	or	r2,r5,r2
   10138:	014000f4 	movhi	r5,3
   1013c:	2964a404 	addi	r5,r5,-28016
   10140:	28c7883a 	add	r3,r5,r3
   10144:	1004d33a 	srli	r2,r2,12
   10148:	1cc00017 	ldw	r19,0(r3)
   1014c:	1c800117 	ldw	r18,4(r3)
   10150:	417fffac 	andhi	r5,r8,65534
   10154:	1080022c 	andhi	r2,r2,8
   10158:	980d883a 	mov	r6,r19
   1015c:	900f883a 	mov	r7,r18
   10160:	114ab03a 	or	r5,r2,r5
   10164:	0025aa00 	call	25aa0 <__adddf3>
   10168:	d8800015 	stw	r2,0(sp)
   1016c:	d8c00115 	stw	r3,4(sp)
   10170:	d9000017 	ldw	r4,0(sp)
   10174:	d9400117 	ldw	r5,4(sp)
   10178:	980d883a 	mov	r6,r19
   1017c:	900f883a 	mov	r7,r18
   10180:	00277e00 	call	277e0 <__subdf3>
   10184:	800897fa 	slli	r4,r16,31
   10188:	1c46703a 	and	r3,r3,r17
   1018c:	1906b03a 	or	r3,r3,r4
   10190:	003fb606 	br	1006c <__alt_data_end+0xfffd186c>
   10194:	0015883a 	mov	r10,zero
   10198:	003fc806 	br	100bc <__alt_data_end+0xfffd18bc>
   1019c:	4007883a 	mov	r3,r8
   101a0:	003fb206 	br	1006c <__alt_data_end+0xfffd186c>
   101a4:	200d883a 	mov	r6,r4
   101a8:	280f883a 	mov	r7,r5
   101ac:	0025aa00 	call	25aa0 <__adddf3>
   101b0:	003fae06 	br	1006c <__alt_data_end+0xfffd186c>
   101b4:	02a00034 	movhi	r10,32768
   101b8:	003fa206 	br	10044 <__alt_data_end+0xfffd1844>

000101bc <scalbn>:
   101bc:	2a1ffc2c 	andhi	r8,r5,32752
   101c0:	4011d53a 	srai	r8,r8,20
   101c4:	defffe04 	addi	sp,sp,-8
   101c8:	dc000015 	stw	r16,0(sp)
   101cc:	dfc00115 	stw	ra,4(sp)
   101d0:	280f883a 	mov	r7,r5
   101d4:	2015883a 	mov	r10,r4
   101d8:	3021883a 	mov	r16,r6
   101dc:	40001e1e 	bne	r8,zero,10258 <scalbn+0x9c>
   101e0:	00a00034 	movhi	r2,32768
   101e4:	10bfffc4 	addi	r2,r2,-1
   101e8:	2884703a 	and	r2,r5,r2
   101ec:	1104b03a 	or	r2,r2,r4
   101f0:	10002226 	beq	r2,zero,1027c <scalbn+0xc0>
   101f4:	01d0d434 	movhi	r7,17232
   101f8:	000d883a 	mov	r6,zero
   101fc:	0026f740 	call	26f74 <__muldf3>
   10200:	013ffff4 	movhi	r4,65535
   10204:	210f2c04 	addi	r4,r4,15536
   10208:	1015883a 	mov	r10,r2
   1020c:	180f883a 	mov	r7,r3
   10210:	81002a16 	blt	r16,r4,102bc <scalbn+0x100>
   10214:	191ffc2c 	andhi	r4,r3,32752
   10218:	2009d53a 	srai	r4,r4,20
   1021c:	223ff284 	addi	r8,r4,-54
   10220:	8211883a 	add	r8,r16,r8
   10224:	0081ff84 	movi	r2,2046
   10228:	12002f16 	blt	r2,r8,102e8 <scalbn+0x12c>
   1022c:	0200190e 	bge	zero,r8,10294 <scalbn+0xd8>
   10230:	4010953a 	slli	r8,r8,20
   10234:	01600434 	movhi	r5,32784
   10238:	297fffc4 	addi	r5,r5,-1
   1023c:	194e703a 	and	r7,r3,r5
   10240:	5005883a 	mov	r2,r10
   10244:	3a06b03a 	or	r3,r7,r8
   10248:	dfc00117 	ldw	ra,4(sp)
   1024c:	dc000017 	ldw	r16,0(sp)
   10250:	dec00204 	addi	sp,sp,8
   10254:	f800283a 	ret
   10258:	0081ffc4 	movi	r2,2047
   1025c:	2807883a 	mov	r3,r5
   10260:	40bfef1e 	bne	r8,r2,10220 <__alt_data_end+0xfffd1a20>
   10264:	200d883a 	mov	r6,r4
   10268:	0025aa00 	call	25aa0 <__adddf3>
   1026c:	dfc00117 	ldw	ra,4(sp)
   10270:	dc000017 	ldw	r16,0(sp)
   10274:	dec00204 	addi	sp,sp,8
   10278:	f800283a 	ret
   1027c:	2005883a 	mov	r2,r4
   10280:	2807883a 	mov	r3,r5
   10284:	dfc00117 	ldw	ra,4(sp)
   10288:	dc000017 	ldw	r16,0(sp)
   1028c:	dec00204 	addi	sp,sp,8
   10290:	f800283a 	ret
   10294:	00bff2c4 	movi	r2,-53
   10298:	4080240e 	bge	r8,r2,1032c <scalbn+0x170>
   1029c:	00b0d414 	movui	r2,50000
   102a0:	14001116 	blt	r2,r16,102e8 <scalbn+0x12c>
   102a4:	0130be74 	movhi	r4,49913
   102a8:	01406974 	movhi	r5,421
   102ac:	213cd644 	addi	r4,r4,-3239
   102b0:	295b87c4 	addi	r5,r5,28191
   102b4:	500d883a 	mov	r6,r10
   102b8:	00103580 	call	10358 <copysign>
   102bc:	01b0be74 	movhi	r6,49913
   102c0:	01c06974 	movhi	r7,421
   102c4:	31bcd644 	addi	r6,r6,-3239
   102c8:	39db87c4 	addi	r7,r7,28191
   102cc:	1009883a 	mov	r4,r2
   102d0:	180b883a 	mov	r5,r3
   102d4:	0026f740 	call	26f74 <__muldf3>
   102d8:	dfc00117 	ldw	ra,4(sp)
   102dc:	dc000017 	ldw	r16,0(sp)
   102e0:	dec00204 	addi	sp,sp,8
   102e4:	f800283a 	ret
   102e8:	01220034 	movhi	r4,34816
   102ec:	015f8e34 	movhi	r5,32312
   102f0:	500d883a 	mov	r6,r10
   102f4:	211d6704 	addi	r4,r4,30108
   102f8:	29790f04 	addi	r5,r5,-7108
   102fc:	00103580 	call	10358 <copysign>
   10300:	01a20034 	movhi	r6,34816
   10304:	01df8e34 	movhi	r7,32312
   10308:	319d6704 	addi	r6,r6,30108
   1030c:	39f90f04 	addi	r7,r7,-7108
   10310:	1009883a 	mov	r4,r2
   10314:	180b883a 	mov	r5,r3
   10318:	0026f740 	call	26f74 <__muldf3>
   1031c:	dfc00117 	ldw	ra,4(sp)
   10320:	dc000017 	ldw	r16,0(sp)
   10324:	dec00204 	addi	sp,sp,8
   10328:	f800283a 	ret
   1032c:	42000d84 	addi	r8,r8,54
   10330:	4012953a 	slli	r9,r8,20
   10334:	01e00434 	movhi	r7,32784
   10338:	39ffffc4 	addi	r7,r7,-1
   1033c:	19ca703a 	and	r5,r3,r7
   10340:	000d883a 	mov	r6,zero
   10344:	01cf2434 	movhi	r7,15504
   10348:	5009883a 	mov	r4,r10
   1034c:	494ab03a 	or	r5,r9,r5
   10350:	0026f740 	call	26f74 <__muldf3>
   10354:	003fbc06 	br	10248 <__alt_data_end+0xfffd1a48>

00010358 <copysign>:
   10358:	2005883a 	mov	r2,r4
   1035c:	01200034 	movhi	r4,32768
   10360:	213fffc4 	addi	r4,r4,-1
   10364:	38e0002c 	andhi	r3,r7,32768
   10368:	290a703a 	and	r5,r5,r4
   1036c:	28c6b03a 	or	r3,r5,r3
   10370:	f800283a 	ret

00010374 <__errno>:
   10374:	008000f4 	movhi	r2,3
   10378:	10a8a204 	addi	r2,r2,-23928
   1037c:	10800017 	ldw	r2,0(r2)
   10380:	f800283a 	ret

00010384 <_fclose_r>:
   10384:	28003926 	beq	r5,zero,1046c <_fclose_r+0xe8>
   10388:	defffc04 	addi	sp,sp,-16
   1038c:	dc400115 	stw	r17,4(sp)
   10390:	dc000015 	stw	r16,0(sp)
   10394:	dfc00315 	stw	ra,12(sp)
   10398:	dc800215 	stw	r18,8(sp)
   1039c:	2023883a 	mov	r17,r4
   103a0:	2821883a 	mov	r16,r5
   103a4:	20000226 	beq	r4,zero,103b0 <_fclose_r+0x2c>
   103a8:	20800e17 	ldw	r2,56(r4)
   103ac:	10002726 	beq	r2,zero,1044c <_fclose_r+0xc8>
   103b0:	8080030f 	ldh	r2,12(r16)
   103b4:	1000071e 	bne	r2,zero,103d4 <_fclose_r+0x50>
   103b8:	0005883a 	mov	r2,zero
   103bc:	dfc00317 	ldw	ra,12(sp)
   103c0:	dc800217 	ldw	r18,8(sp)
   103c4:	dc400117 	ldw	r17,4(sp)
   103c8:	dc000017 	ldw	r16,0(sp)
   103cc:	dec00404 	addi	sp,sp,16
   103d0:	f800283a 	ret
   103d4:	800b883a 	mov	r5,r16
   103d8:	8809883a 	mov	r4,r17
   103dc:	00104880 	call	10488 <__sflush_r>
   103e0:	1025883a 	mov	r18,r2
   103e4:	80800b17 	ldw	r2,44(r16)
   103e8:	10000426 	beq	r2,zero,103fc <_fclose_r+0x78>
   103ec:	81400717 	ldw	r5,28(r16)
   103f0:	8809883a 	mov	r4,r17
   103f4:	103ee83a 	callr	r2
   103f8:	10001616 	blt	r2,zero,10454 <_fclose_r+0xd0>
   103fc:	8080030b 	ldhu	r2,12(r16)
   10400:	1080200c 	andi	r2,r2,128
   10404:	1000151e 	bne	r2,zero,1045c <_fclose_r+0xd8>
   10408:	81400c17 	ldw	r5,48(r16)
   1040c:	28000526 	beq	r5,zero,10424 <_fclose_r+0xa0>
   10410:	80801004 	addi	r2,r16,64
   10414:	28800226 	beq	r5,r2,10420 <_fclose_r+0x9c>
   10418:	8809883a 	mov	r4,r17
   1041c:	0010e100 	call	10e10 <_free_r>
   10420:	80000c15 	stw	zero,48(r16)
   10424:	81401117 	ldw	r5,68(r16)
   10428:	28000326 	beq	r5,zero,10438 <_fclose_r+0xb4>
   1042c:	8809883a 	mov	r4,r17
   10430:	0010e100 	call	10e10 <_free_r>
   10434:	80001115 	stw	zero,68(r16)
   10438:	0010aa00 	call	10aa0 <__sfp_lock_acquire>
   1043c:	8000030d 	sth	zero,12(r16)
   10440:	0010aa40 	call	10aa4 <__sfp_lock_release>
   10444:	9005883a 	mov	r2,r18
   10448:	003fdc06 	br	103bc <__alt_data_end+0xfffd1bbc>
   1044c:	0010a900 	call	10a90 <__sinit>
   10450:	003fd706 	br	103b0 <__alt_data_end+0xfffd1bb0>
   10454:	04bfffc4 	movi	r18,-1
   10458:	003fe806 	br	103fc <__alt_data_end+0xfffd1bfc>
   1045c:	81400417 	ldw	r5,16(r16)
   10460:	8809883a 	mov	r4,r17
   10464:	0010e100 	call	10e10 <_free_r>
   10468:	003fe706 	br	10408 <__alt_data_end+0xfffd1c08>
   1046c:	0005883a 	mov	r2,zero
   10470:	f800283a 	ret

00010474 <fclose>:
   10474:	008000f4 	movhi	r2,3
   10478:	10a8a204 	addi	r2,r2,-23928
   1047c:	200b883a 	mov	r5,r4
   10480:	11000017 	ldw	r4,0(r2)
   10484:	00103841 	jmpi	10384 <_fclose_r>

00010488 <__sflush_r>:
   10488:	2880030b 	ldhu	r2,12(r5)
   1048c:	defffb04 	addi	sp,sp,-20
   10490:	dcc00315 	stw	r19,12(sp)
   10494:	dc400115 	stw	r17,4(sp)
   10498:	dfc00415 	stw	ra,16(sp)
   1049c:	dc800215 	stw	r18,8(sp)
   104a0:	dc000015 	stw	r16,0(sp)
   104a4:	10c0020c 	andi	r3,r2,8
   104a8:	2823883a 	mov	r17,r5
   104ac:	2027883a 	mov	r19,r4
   104b0:	1800311e 	bne	r3,zero,10578 <__sflush_r+0xf0>
   104b4:	28c00117 	ldw	r3,4(r5)
   104b8:	10820014 	ori	r2,r2,2048
   104bc:	2880030d 	sth	r2,12(r5)
   104c0:	00c04b0e 	bge	zero,r3,105f0 <__sflush_r+0x168>
   104c4:	8a000a17 	ldw	r8,40(r17)
   104c8:	40002326 	beq	r8,zero,10558 <__sflush_r+0xd0>
   104cc:	9c000017 	ldw	r16,0(r19)
   104d0:	10c4000c 	andi	r3,r2,4096
   104d4:	98000015 	stw	zero,0(r19)
   104d8:	18004826 	beq	r3,zero,105fc <__sflush_r+0x174>
   104dc:	89801417 	ldw	r6,80(r17)
   104e0:	10c0010c 	andi	r3,r2,4
   104e4:	18000626 	beq	r3,zero,10500 <__sflush_r+0x78>
   104e8:	88c00117 	ldw	r3,4(r17)
   104ec:	88800c17 	ldw	r2,48(r17)
   104f0:	30cdc83a 	sub	r6,r6,r3
   104f4:	10000226 	beq	r2,zero,10500 <__sflush_r+0x78>
   104f8:	88800f17 	ldw	r2,60(r17)
   104fc:	308dc83a 	sub	r6,r6,r2
   10500:	89400717 	ldw	r5,28(r17)
   10504:	000f883a 	mov	r7,zero
   10508:	9809883a 	mov	r4,r19
   1050c:	403ee83a 	callr	r8
   10510:	00ffffc4 	movi	r3,-1
   10514:	10c04426 	beq	r2,r3,10628 <__sflush_r+0x1a0>
   10518:	88c0030b 	ldhu	r3,12(r17)
   1051c:	89000417 	ldw	r4,16(r17)
   10520:	88000115 	stw	zero,4(r17)
   10524:	197dffcc 	andi	r5,r3,63487
   10528:	8940030d 	sth	r5,12(r17)
   1052c:	89000015 	stw	r4,0(r17)
   10530:	18c4000c 	andi	r3,r3,4096
   10534:	18002c1e 	bne	r3,zero,105e8 <__sflush_r+0x160>
   10538:	89400c17 	ldw	r5,48(r17)
   1053c:	9c000015 	stw	r16,0(r19)
   10540:	28000526 	beq	r5,zero,10558 <__sflush_r+0xd0>
   10544:	88801004 	addi	r2,r17,64
   10548:	28800226 	beq	r5,r2,10554 <__sflush_r+0xcc>
   1054c:	9809883a 	mov	r4,r19
   10550:	0010e100 	call	10e10 <_free_r>
   10554:	88000c15 	stw	zero,48(r17)
   10558:	0005883a 	mov	r2,zero
   1055c:	dfc00417 	ldw	ra,16(sp)
   10560:	dcc00317 	ldw	r19,12(sp)
   10564:	dc800217 	ldw	r18,8(sp)
   10568:	dc400117 	ldw	r17,4(sp)
   1056c:	dc000017 	ldw	r16,0(sp)
   10570:	dec00504 	addi	sp,sp,20
   10574:	f800283a 	ret
   10578:	2c800417 	ldw	r18,16(r5)
   1057c:	903ff626 	beq	r18,zero,10558 <__alt_data_end+0xfffd1d58>
   10580:	2c000017 	ldw	r16,0(r5)
   10584:	108000cc 	andi	r2,r2,3
   10588:	2c800015 	stw	r18,0(r5)
   1058c:	84a1c83a 	sub	r16,r16,r18
   10590:	1000131e 	bne	r2,zero,105e0 <__sflush_r+0x158>
   10594:	28800517 	ldw	r2,20(r5)
   10598:	88800215 	stw	r2,8(r17)
   1059c:	04000316 	blt	zero,r16,105ac <__sflush_r+0x124>
   105a0:	003fed06 	br	10558 <__alt_data_end+0xfffd1d58>
   105a4:	90a5883a 	add	r18,r18,r2
   105a8:	043feb0e 	bge	zero,r16,10558 <__alt_data_end+0xfffd1d58>
   105ac:	88800917 	ldw	r2,36(r17)
   105b0:	89400717 	ldw	r5,28(r17)
   105b4:	800f883a 	mov	r7,r16
   105b8:	900d883a 	mov	r6,r18
   105bc:	9809883a 	mov	r4,r19
   105c0:	103ee83a 	callr	r2
   105c4:	80a1c83a 	sub	r16,r16,r2
   105c8:	00bff616 	blt	zero,r2,105a4 <__alt_data_end+0xfffd1da4>
   105cc:	88c0030b 	ldhu	r3,12(r17)
   105d0:	00bfffc4 	movi	r2,-1
   105d4:	18c01014 	ori	r3,r3,64
   105d8:	88c0030d 	sth	r3,12(r17)
   105dc:	003fdf06 	br	1055c <__alt_data_end+0xfffd1d5c>
   105e0:	0005883a 	mov	r2,zero
   105e4:	003fec06 	br	10598 <__alt_data_end+0xfffd1d98>
   105e8:	88801415 	stw	r2,80(r17)
   105ec:	003fd206 	br	10538 <__alt_data_end+0xfffd1d38>
   105f0:	28c00f17 	ldw	r3,60(r5)
   105f4:	00ffb316 	blt	zero,r3,104c4 <__alt_data_end+0xfffd1cc4>
   105f8:	003fd706 	br	10558 <__alt_data_end+0xfffd1d58>
   105fc:	89400717 	ldw	r5,28(r17)
   10600:	000d883a 	mov	r6,zero
   10604:	01c00044 	movi	r7,1
   10608:	9809883a 	mov	r4,r19
   1060c:	403ee83a 	callr	r8
   10610:	100d883a 	mov	r6,r2
   10614:	00bfffc4 	movi	r2,-1
   10618:	30801426 	beq	r6,r2,1066c <__sflush_r+0x1e4>
   1061c:	8880030b 	ldhu	r2,12(r17)
   10620:	8a000a17 	ldw	r8,40(r17)
   10624:	003fae06 	br	104e0 <__alt_data_end+0xfffd1ce0>
   10628:	98c00017 	ldw	r3,0(r19)
   1062c:	183fba26 	beq	r3,zero,10518 <__alt_data_end+0xfffd1d18>
   10630:	01000744 	movi	r4,29
   10634:	19000626 	beq	r3,r4,10650 <__sflush_r+0x1c8>
   10638:	01000584 	movi	r4,22
   1063c:	19000426 	beq	r3,r4,10650 <__sflush_r+0x1c8>
   10640:	88c0030b 	ldhu	r3,12(r17)
   10644:	18c01014 	ori	r3,r3,64
   10648:	88c0030d 	sth	r3,12(r17)
   1064c:	003fc306 	br	1055c <__alt_data_end+0xfffd1d5c>
   10650:	8880030b 	ldhu	r2,12(r17)
   10654:	88c00417 	ldw	r3,16(r17)
   10658:	88000115 	stw	zero,4(r17)
   1065c:	10bdffcc 	andi	r2,r2,63487
   10660:	8880030d 	sth	r2,12(r17)
   10664:	88c00015 	stw	r3,0(r17)
   10668:	003fb306 	br	10538 <__alt_data_end+0xfffd1d38>
   1066c:	98800017 	ldw	r2,0(r19)
   10670:	103fea26 	beq	r2,zero,1061c <__alt_data_end+0xfffd1e1c>
   10674:	00c00744 	movi	r3,29
   10678:	10c00226 	beq	r2,r3,10684 <__sflush_r+0x1fc>
   1067c:	00c00584 	movi	r3,22
   10680:	10c0031e 	bne	r2,r3,10690 <__sflush_r+0x208>
   10684:	9c000015 	stw	r16,0(r19)
   10688:	0005883a 	mov	r2,zero
   1068c:	003fb306 	br	1055c <__alt_data_end+0xfffd1d5c>
   10690:	88c0030b 	ldhu	r3,12(r17)
   10694:	3005883a 	mov	r2,r6
   10698:	18c01014 	ori	r3,r3,64
   1069c:	88c0030d 	sth	r3,12(r17)
   106a0:	003fae06 	br	1055c <__alt_data_end+0xfffd1d5c>

000106a4 <_fflush_r>:
   106a4:	defffd04 	addi	sp,sp,-12
   106a8:	dc000115 	stw	r16,4(sp)
   106ac:	dfc00215 	stw	ra,8(sp)
   106b0:	2021883a 	mov	r16,r4
   106b4:	20000226 	beq	r4,zero,106c0 <_fflush_r+0x1c>
   106b8:	20800e17 	ldw	r2,56(r4)
   106bc:	10000c26 	beq	r2,zero,106f0 <_fflush_r+0x4c>
   106c0:	2880030f 	ldh	r2,12(r5)
   106c4:	1000051e 	bne	r2,zero,106dc <_fflush_r+0x38>
   106c8:	0005883a 	mov	r2,zero
   106cc:	dfc00217 	ldw	ra,8(sp)
   106d0:	dc000117 	ldw	r16,4(sp)
   106d4:	dec00304 	addi	sp,sp,12
   106d8:	f800283a 	ret
   106dc:	8009883a 	mov	r4,r16
   106e0:	dfc00217 	ldw	ra,8(sp)
   106e4:	dc000117 	ldw	r16,4(sp)
   106e8:	dec00304 	addi	sp,sp,12
   106ec:	00104881 	jmpi	10488 <__sflush_r>
   106f0:	d9400015 	stw	r5,0(sp)
   106f4:	0010a900 	call	10a90 <__sinit>
   106f8:	d9400017 	ldw	r5,0(sp)
   106fc:	003ff006 	br	106c0 <__alt_data_end+0xfffd1ec0>

00010700 <fflush>:
   10700:	20000526 	beq	r4,zero,10718 <fflush+0x18>
   10704:	008000f4 	movhi	r2,3
   10708:	10a8a204 	addi	r2,r2,-23928
   1070c:	200b883a 	mov	r5,r4
   10710:	11000017 	ldw	r4,0(r2)
   10714:	00106a41 	jmpi	106a4 <_fflush_r>
   10718:	008000f4 	movhi	r2,3
   1071c:	10a8a104 	addi	r2,r2,-23932
   10720:	11000017 	ldw	r4,0(r2)
   10724:	01400074 	movhi	r5,1
   10728:	2941a904 	addi	r5,r5,1700
   1072c:	0011b881 	jmpi	11b88 <_fwalk_reent>

00010730 <__fp_unlock>:
   10730:	0005883a 	mov	r2,zero
   10734:	f800283a 	ret

00010738 <_cleanup_r>:
   10738:	01400074 	movhi	r5,1
   1073c:	2940e104 	addi	r5,r5,900
   10740:	0011b881 	jmpi	11b88 <_fwalk_reent>

00010744 <__sinit.part.1>:
   10744:	defff704 	addi	sp,sp,-36
   10748:	00c00074 	movhi	r3,1
   1074c:	dfc00815 	stw	ra,32(sp)
   10750:	ddc00715 	stw	r23,28(sp)
   10754:	dd800615 	stw	r22,24(sp)
   10758:	dd400515 	stw	r21,20(sp)
   1075c:	dd000415 	stw	r20,16(sp)
   10760:	dcc00315 	stw	r19,12(sp)
   10764:	dc800215 	stw	r18,8(sp)
   10768:	dc400115 	stw	r17,4(sp)
   1076c:	dc000015 	stw	r16,0(sp)
   10770:	18c1ce04 	addi	r3,r3,1848
   10774:	24000117 	ldw	r16,4(r4)
   10778:	20c00f15 	stw	r3,60(r4)
   1077c:	2080bb04 	addi	r2,r4,748
   10780:	00c000c4 	movi	r3,3
   10784:	20c0b915 	stw	r3,740(r4)
   10788:	2080ba15 	stw	r2,744(r4)
   1078c:	2000b815 	stw	zero,736(r4)
   10790:	05c00204 	movi	r23,8
   10794:	00800104 	movi	r2,4
   10798:	2025883a 	mov	r18,r4
   1079c:	b80d883a 	mov	r6,r23
   107a0:	81001704 	addi	r4,r16,92
   107a4:	000b883a 	mov	r5,zero
   107a8:	80000015 	stw	zero,0(r16)
   107ac:	80000115 	stw	zero,4(r16)
   107b0:	80000215 	stw	zero,8(r16)
   107b4:	8080030d 	sth	r2,12(r16)
   107b8:	80001915 	stw	zero,100(r16)
   107bc:	8000038d 	sth	zero,14(r16)
   107c0:	80000415 	stw	zero,16(r16)
   107c4:	80000515 	stw	zero,20(r16)
   107c8:	80000615 	stw	zero,24(r16)
   107cc:	00129c40 	call	129c4 <memset>
   107d0:	05800074 	movhi	r22,1
   107d4:	94400217 	ldw	r17,8(r18)
   107d8:	05400074 	movhi	r21,1
   107dc:	05000074 	movhi	r20,1
   107e0:	04c00074 	movhi	r19,1
   107e4:	b58d5204 	addi	r22,r22,13640
   107e8:	ad4d6904 	addi	r21,r21,13732
   107ec:	a50d8804 	addi	r20,r20,13856
   107f0:	9ccd9f04 	addi	r19,r19,13948
   107f4:	85800815 	stw	r22,32(r16)
   107f8:	85400915 	stw	r21,36(r16)
   107fc:	85000a15 	stw	r20,40(r16)
   10800:	84c00b15 	stw	r19,44(r16)
   10804:	84000715 	stw	r16,28(r16)
   10808:	00800284 	movi	r2,10
   1080c:	8880030d 	sth	r2,12(r17)
   10810:	00800044 	movi	r2,1
   10814:	b80d883a 	mov	r6,r23
   10818:	89001704 	addi	r4,r17,92
   1081c:	000b883a 	mov	r5,zero
   10820:	88000015 	stw	zero,0(r17)
   10824:	88000115 	stw	zero,4(r17)
   10828:	88000215 	stw	zero,8(r17)
   1082c:	88001915 	stw	zero,100(r17)
   10830:	8880038d 	sth	r2,14(r17)
   10834:	88000415 	stw	zero,16(r17)
   10838:	88000515 	stw	zero,20(r17)
   1083c:	88000615 	stw	zero,24(r17)
   10840:	00129c40 	call	129c4 <memset>
   10844:	94000317 	ldw	r16,12(r18)
   10848:	00800484 	movi	r2,18
   1084c:	8c400715 	stw	r17,28(r17)
   10850:	8d800815 	stw	r22,32(r17)
   10854:	8d400915 	stw	r21,36(r17)
   10858:	8d000a15 	stw	r20,40(r17)
   1085c:	8cc00b15 	stw	r19,44(r17)
   10860:	8080030d 	sth	r2,12(r16)
   10864:	00800084 	movi	r2,2
   10868:	80000015 	stw	zero,0(r16)
   1086c:	80000115 	stw	zero,4(r16)
   10870:	80000215 	stw	zero,8(r16)
   10874:	80001915 	stw	zero,100(r16)
   10878:	8080038d 	sth	r2,14(r16)
   1087c:	80000415 	stw	zero,16(r16)
   10880:	80000515 	stw	zero,20(r16)
   10884:	80000615 	stw	zero,24(r16)
   10888:	b80d883a 	mov	r6,r23
   1088c:	000b883a 	mov	r5,zero
   10890:	81001704 	addi	r4,r16,92
   10894:	00129c40 	call	129c4 <memset>
   10898:	00800044 	movi	r2,1
   1089c:	84000715 	stw	r16,28(r16)
   108a0:	85800815 	stw	r22,32(r16)
   108a4:	85400915 	stw	r21,36(r16)
   108a8:	85000a15 	stw	r20,40(r16)
   108ac:	84c00b15 	stw	r19,44(r16)
   108b0:	90800e15 	stw	r2,56(r18)
   108b4:	dfc00817 	ldw	ra,32(sp)
   108b8:	ddc00717 	ldw	r23,28(sp)
   108bc:	dd800617 	ldw	r22,24(sp)
   108c0:	dd400517 	ldw	r21,20(sp)
   108c4:	dd000417 	ldw	r20,16(sp)
   108c8:	dcc00317 	ldw	r19,12(sp)
   108cc:	dc800217 	ldw	r18,8(sp)
   108d0:	dc400117 	ldw	r17,4(sp)
   108d4:	dc000017 	ldw	r16,0(sp)
   108d8:	dec00904 	addi	sp,sp,36
   108dc:	f800283a 	ret

000108e0 <__fp_lock>:
   108e0:	0005883a 	mov	r2,zero
   108e4:	f800283a 	ret

000108e8 <__sfmoreglue>:
   108e8:	defffc04 	addi	sp,sp,-16
   108ec:	dc800215 	stw	r18,8(sp)
   108f0:	2825883a 	mov	r18,r5
   108f4:	dc000015 	stw	r16,0(sp)
   108f8:	01401a04 	movi	r5,104
   108fc:	2021883a 	mov	r16,r4
   10900:	913fffc4 	addi	r4,r18,-1
   10904:	dfc00315 	stw	ra,12(sp)
   10908:	dc400115 	stw	r17,4(sp)
   1090c:	002587c0 	call	2587c <__mulsi3>
   10910:	8009883a 	mov	r4,r16
   10914:	11401d04 	addi	r5,r2,116
   10918:	1023883a 	mov	r17,r2
   1091c:	0011e300 	call	11e30 <_malloc_r>
   10920:	1021883a 	mov	r16,r2
   10924:	10000726 	beq	r2,zero,10944 <__sfmoreglue+0x5c>
   10928:	11000304 	addi	r4,r2,12
   1092c:	10000015 	stw	zero,0(r2)
   10930:	14800115 	stw	r18,4(r2)
   10934:	11000215 	stw	r4,8(r2)
   10938:	89801a04 	addi	r6,r17,104
   1093c:	000b883a 	mov	r5,zero
   10940:	00129c40 	call	129c4 <memset>
   10944:	8005883a 	mov	r2,r16
   10948:	dfc00317 	ldw	ra,12(sp)
   1094c:	dc800217 	ldw	r18,8(sp)
   10950:	dc400117 	ldw	r17,4(sp)
   10954:	dc000017 	ldw	r16,0(sp)
   10958:	dec00404 	addi	sp,sp,16
   1095c:	f800283a 	ret

00010960 <__sfp>:
   10960:	defffb04 	addi	sp,sp,-20
   10964:	dc000015 	stw	r16,0(sp)
   10968:	040000f4 	movhi	r16,3
   1096c:	8428a104 	addi	r16,r16,-23932
   10970:	dcc00315 	stw	r19,12(sp)
   10974:	2027883a 	mov	r19,r4
   10978:	81000017 	ldw	r4,0(r16)
   1097c:	dfc00415 	stw	ra,16(sp)
   10980:	dc800215 	stw	r18,8(sp)
   10984:	20800e17 	ldw	r2,56(r4)
   10988:	dc400115 	stw	r17,4(sp)
   1098c:	1000021e 	bne	r2,zero,10998 <__sfp+0x38>
   10990:	00107440 	call	10744 <__sinit.part.1>
   10994:	81000017 	ldw	r4,0(r16)
   10998:	2480b804 	addi	r18,r4,736
   1099c:	047fffc4 	movi	r17,-1
   109a0:	91000117 	ldw	r4,4(r18)
   109a4:	94000217 	ldw	r16,8(r18)
   109a8:	213fffc4 	addi	r4,r4,-1
   109ac:	20000a16 	blt	r4,zero,109d8 <__sfp+0x78>
   109b0:	8080030f 	ldh	r2,12(r16)
   109b4:	10000c26 	beq	r2,zero,109e8 <__sfp+0x88>
   109b8:	80c01d04 	addi	r3,r16,116
   109bc:	00000206 	br	109c8 <__sfp+0x68>
   109c0:	18bfe60f 	ldh	r2,-104(r3)
   109c4:	10000826 	beq	r2,zero,109e8 <__sfp+0x88>
   109c8:	213fffc4 	addi	r4,r4,-1
   109cc:	1c3ffd04 	addi	r16,r3,-12
   109d0:	18c01a04 	addi	r3,r3,104
   109d4:	247ffa1e 	bne	r4,r17,109c0 <__alt_data_end+0xfffd21c0>
   109d8:	90800017 	ldw	r2,0(r18)
   109dc:	10001d26 	beq	r2,zero,10a54 <__sfp+0xf4>
   109e0:	1025883a 	mov	r18,r2
   109e4:	003fee06 	br	109a0 <__alt_data_end+0xfffd21a0>
   109e8:	00bfffc4 	movi	r2,-1
   109ec:	8080038d 	sth	r2,14(r16)
   109f0:	00800044 	movi	r2,1
   109f4:	8080030d 	sth	r2,12(r16)
   109f8:	80001915 	stw	zero,100(r16)
   109fc:	80000015 	stw	zero,0(r16)
   10a00:	80000215 	stw	zero,8(r16)
   10a04:	80000115 	stw	zero,4(r16)
   10a08:	80000415 	stw	zero,16(r16)
   10a0c:	80000515 	stw	zero,20(r16)
   10a10:	80000615 	stw	zero,24(r16)
   10a14:	01800204 	movi	r6,8
   10a18:	000b883a 	mov	r5,zero
   10a1c:	81001704 	addi	r4,r16,92
   10a20:	00129c40 	call	129c4 <memset>
   10a24:	8005883a 	mov	r2,r16
   10a28:	80000c15 	stw	zero,48(r16)
   10a2c:	80000d15 	stw	zero,52(r16)
   10a30:	80001115 	stw	zero,68(r16)
   10a34:	80001215 	stw	zero,72(r16)
   10a38:	dfc00417 	ldw	ra,16(sp)
   10a3c:	dcc00317 	ldw	r19,12(sp)
   10a40:	dc800217 	ldw	r18,8(sp)
   10a44:	dc400117 	ldw	r17,4(sp)
   10a48:	dc000017 	ldw	r16,0(sp)
   10a4c:	dec00504 	addi	sp,sp,20
   10a50:	f800283a 	ret
   10a54:	01400104 	movi	r5,4
   10a58:	9809883a 	mov	r4,r19
   10a5c:	00108e80 	call	108e8 <__sfmoreglue>
   10a60:	90800015 	stw	r2,0(r18)
   10a64:	103fde1e 	bne	r2,zero,109e0 <__alt_data_end+0xfffd21e0>
   10a68:	00800304 	movi	r2,12
   10a6c:	98800015 	stw	r2,0(r19)
   10a70:	0005883a 	mov	r2,zero
   10a74:	003ff006 	br	10a38 <__alt_data_end+0xfffd2238>

00010a78 <_cleanup>:
   10a78:	008000f4 	movhi	r2,3
   10a7c:	10a8a104 	addi	r2,r2,-23932
   10a80:	11000017 	ldw	r4,0(r2)
   10a84:	01400074 	movhi	r5,1
   10a88:	2940e104 	addi	r5,r5,900
   10a8c:	0011b881 	jmpi	11b88 <_fwalk_reent>

00010a90 <__sinit>:
   10a90:	20800e17 	ldw	r2,56(r4)
   10a94:	10000126 	beq	r2,zero,10a9c <__sinit+0xc>
   10a98:	f800283a 	ret
   10a9c:	00107441 	jmpi	10744 <__sinit.part.1>

00010aa0 <__sfp_lock_acquire>:
   10aa0:	f800283a 	ret

00010aa4 <__sfp_lock_release>:
   10aa4:	f800283a 	ret

00010aa8 <__sinit_lock_acquire>:
   10aa8:	f800283a 	ret

00010aac <__sinit_lock_release>:
   10aac:	f800283a 	ret

00010ab0 <__fp_lock_all>:
   10ab0:	008000f4 	movhi	r2,3
   10ab4:	10a8a204 	addi	r2,r2,-23928
   10ab8:	11000017 	ldw	r4,0(r2)
   10abc:	01400074 	movhi	r5,1
   10ac0:	29423804 	addi	r5,r5,2272
   10ac4:	0011ac41 	jmpi	11ac4 <_fwalk>

00010ac8 <__fp_unlock_all>:
   10ac8:	008000f4 	movhi	r2,3
   10acc:	10a8a204 	addi	r2,r2,-23928
   10ad0:	11000017 	ldw	r4,0(r2)
   10ad4:	01400074 	movhi	r5,1
   10ad8:	2941cc04 	addi	r5,r5,1840
   10adc:	0011ac41 	jmpi	11ac4 <_fwalk>

00010ae0 <_fopen_r>:
   10ae0:	defffa04 	addi	sp,sp,-24
   10ae4:	3005883a 	mov	r2,r6
   10ae8:	dcc00415 	stw	r19,16(sp)
   10aec:	d80d883a 	mov	r6,sp
   10af0:	2827883a 	mov	r19,r5
   10af4:	100b883a 	mov	r5,r2
   10af8:	dc800315 	stw	r18,12(sp)
   10afc:	dfc00515 	stw	ra,20(sp)
   10b00:	dc400215 	stw	r17,8(sp)
   10b04:	dc000115 	stw	r16,4(sp)
   10b08:	2025883a 	mov	r18,r4
   10b0c:	0018ff00 	call	18ff0 <__sflags>
   10b10:	10002726 	beq	r2,zero,10bb0 <_fopen_r+0xd0>
   10b14:	9009883a 	mov	r4,r18
   10b18:	1023883a 	mov	r17,r2
   10b1c:	00109600 	call	10960 <__sfp>
   10b20:	1021883a 	mov	r16,r2
   10b24:	10002226 	beq	r2,zero,10bb0 <_fopen_r+0xd0>
   10b28:	d9800017 	ldw	r6,0(sp)
   10b2c:	01c06d84 	movi	r7,438
   10b30:	980b883a 	mov	r5,r19
   10b34:	9009883a 	mov	r4,r18
   10b38:	0012aec0 	call	12aec <_open_r>
   10b3c:	10001916 	blt	r2,zero,10ba4 <_fopen_r+0xc4>
   10b40:	8080038d 	sth	r2,14(r16)
   10b44:	00800074 	movhi	r2,1
   10b48:	108d5204 	addi	r2,r2,13640
   10b4c:	80800815 	stw	r2,32(r16)
   10b50:	00800074 	movhi	r2,1
   10b54:	108d6904 	addi	r2,r2,13732
   10b58:	80800915 	stw	r2,36(r16)
   10b5c:	00800074 	movhi	r2,1
   10b60:	108d8804 	addi	r2,r2,13856
   10b64:	80800a15 	stw	r2,40(r16)
   10b68:	00800074 	movhi	r2,1
   10b6c:	108d9f04 	addi	r2,r2,13948
   10b70:	8440030d 	sth	r17,12(r16)
   10b74:	84000715 	stw	r16,28(r16)
   10b78:	80800b15 	stw	r2,44(r16)
   10b7c:	8c40400c 	andi	r17,r17,256
   10b80:	88000d1e 	bne	r17,zero,10bb8 <_fopen_r+0xd8>
   10b84:	8005883a 	mov	r2,r16
   10b88:	dfc00517 	ldw	ra,20(sp)
   10b8c:	dcc00417 	ldw	r19,16(sp)
   10b90:	dc800317 	ldw	r18,12(sp)
   10b94:	dc400217 	ldw	r17,8(sp)
   10b98:	dc000117 	ldw	r16,4(sp)
   10b9c:	dec00604 	addi	sp,sp,24
   10ba0:	f800283a 	ret
   10ba4:	0010aa00 	call	10aa0 <__sfp_lock_acquire>
   10ba8:	8000030d 	sth	zero,12(r16)
   10bac:	0010aa40 	call	10aa4 <__sfp_lock_release>
   10bb0:	0005883a 	mov	r2,zero
   10bb4:	003ff406 	br	10b88 <__alt_data_end+0xfffd2388>
   10bb8:	01c00084 	movi	r7,2
   10bbc:	000d883a 	mov	r6,zero
   10bc0:	800b883a 	mov	r5,r16
   10bc4:	9009883a 	mov	r4,r18
   10bc8:	00111200 	call	11120 <_fseek_r>
   10bcc:	8005883a 	mov	r2,r16
   10bd0:	003fed06 	br	10b88 <__alt_data_end+0xfffd2388>

00010bd4 <fopen>:
   10bd4:	008000f4 	movhi	r2,3
   10bd8:	10a8a204 	addi	r2,r2,-23928
   10bdc:	280d883a 	mov	r6,r5
   10be0:	200b883a 	mov	r5,r4
   10be4:	11000017 	ldw	r4,0(r2)
   10be8:	0010ae01 	jmpi	10ae0 <_fopen_r>

00010bec <_fprintf_r>:
   10bec:	defffe04 	addi	sp,sp,-8
   10bf0:	2809883a 	mov	r4,r5
   10bf4:	300b883a 	mov	r5,r6
   10bf8:	dfc00015 	stw	ra,0(sp)
   10bfc:	d9c00115 	stw	r7,4(sp)
   10c00:	d9800104 	addi	r6,sp,4
   10c04:	00174600 	call	17460 <__vfprintf_internal>
   10c08:	dfc00017 	ldw	ra,0(sp)
   10c0c:	dec00204 	addi	sp,sp,8
   10c10:	f800283a 	ret

00010c14 <fprintf>:
   10c14:	defffd04 	addi	sp,sp,-12
   10c18:	dfc00015 	stw	ra,0(sp)
   10c1c:	d9800115 	stw	r6,4(sp)
   10c20:	d9c00215 	stw	r7,8(sp)
   10c24:	d9800104 	addi	r6,sp,4
   10c28:	00174600 	call	17460 <__vfprintf_internal>
   10c2c:	dfc00017 	ldw	ra,0(sp)
   10c30:	dec00304 	addi	sp,sp,12
   10c34:	f800283a 	ret

00010c38 <_fputs_r>:
   10c38:	defff804 	addi	sp,sp,-32
   10c3c:	dc400615 	stw	r17,24(sp)
   10c40:	2023883a 	mov	r17,r4
   10c44:	2809883a 	mov	r4,r5
   10c48:	dc000515 	stw	r16,20(sp)
   10c4c:	dfc00715 	stw	ra,28(sp)
   10c50:	3021883a 	mov	r16,r6
   10c54:	d9400315 	stw	r5,12(sp)
   10c58:	00137600 	call	13760 <strlen>
   10c5c:	d8800215 	stw	r2,8(sp)
   10c60:	d8800415 	stw	r2,16(sp)
   10c64:	d8800304 	addi	r2,sp,12
   10c68:	d8800015 	stw	r2,0(sp)
   10c6c:	00800044 	movi	r2,1
   10c70:	d8800115 	stw	r2,4(sp)
   10c74:	88000226 	beq	r17,zero,10c80 <_fputs_r+0x48>
   10c78:	88800e17 	ldw	r2,56(r17)
   10c7c:	10001226 	beq	r2,zero,10cc8 <_fputs_r+0x90>
   10c80:	8080030b 	ldhu	r2,12(r16)
   10c84:	10c8000c 	andi	r3,r2,8192
   10c88:	1800061e 	bne	r3,zero,10ca4 <_fputs_r+0x6c>
   10c8c:	81001917 	ldw	r4,100(r16)
   10c90:	00f7ffc4 	movi	r3,-8193
   10c94:	10880014 	ori	r2,r2,8192
   10c98:	20c6703a 	and	r3,r4,r3
   10c9c:	8080030d 	sth	r2,12(r16)
   10ca0:	80c01915 	stw	r3,100(r16)
   10ca4:	d80d883a 	mov	r6,sp
   10ca8:	800b883a 	mov	r5,r16
   10cac:	8809883a 	mov	r4,r17
   10cb0:	00115fc0 	call	115fc <__sfvwrite_r>
   10cb4:	dfc00717 	ldw	ra,28(sp)
   10cb8:	dc400617 	ldw	r17,24(sp)
   10cbc:	dc000517 	ldw	r16,20(sp)
   10cc0:	dec00804 	addi	sp,sp,32
   10cc4:	f800283a 	ret
   10cc8:	8809883a 	mov	r4,r17
   10ccc:	0010a900 	call	10a90 <__sinit>
   10cd0:	003feb06 	br	10c80 <__alt_data_end+0xfffd2480>

00010cd4 <fputs>:
   10cd4:	008000f4 	movhi	r2,3
   10cd8:	10a8a204 	addi	r2,r2,-23928
   10cdc:	280d883a 	mov	r6,r5
   10ce0:	200b883a 	mov	r5,r4
   10ce4:	11000017 	ldw	r4,0(r2)
   10ce8:	0010c381 	jmpi	10c38 <_fputs_r>

00010cec <_malloc_trim_r>:
   10cec:	defffb04 	addi	sp,sp,-20
   10cf0:	dcc00315 	stw	r19,12(sp)
   10cf4:	04c000f4 	movhi	r19,3
   10cf8:	dc800215 	stw	r18,8(sp)
   10cfc:	dc400115 	stw	r17,4(sp)
   10d00:	dc000015 	stw	r16,0(sp)
   10d04:	dfc00415 	stw	ra,16(sp)
   10d08:	2821883a 	mov	r16,r5
   10d0c:	9ce77e04 	addi	r19,r19,-25096
   10d10:	2025883a 	mov	r18,r4
   10d14:	00288cc0 	call	288cc <__malloc_lock>
   10d18:	98800217 	ldw	r2,8(r19)
   10d1c:	14400117 	ldw	r17,4(r2)
   10d20:	00bfff04 	movi	r2,-4
   10d24:	88a2703a 	and	r17,r17,r2
   10d28:	8c21c83a 	sub	r16,r17,r16
   10d2c:	8403fbc4 	addi	r16,r16,4079
   10d30:	8020d33a 	srli	r16,r16,12
   10d34:	0083ffc4 	movi	r2,4095
   10d38:	843fffc4 	addi	r16,r16,-1
   10d3c:	8020933a 	slli	r16,r16,12
   10d40:	1400060e 	bge	r2,r16,10d5c <_malloc_trim_r+0x70>
   10d44:	000b883a 	mov	r5,zero
   10d48:	9009883a 	mov	r4,r18
   10d4c:	00134000 	call	13400 <_sbrk_r>
   10d50:	98c00217 	ldw	r3,8(r19)
   10d54:	1c47883a 	add	r3,r3,r17
   10d58:	10c00a26 	beq	r2,r3,10d84 <_malloc_trim_r+0x98>
   10d5c:	9009883a 	mov	r4,r18
   10d60:	00288d00 	call	288d0 <__malloc_unlock>
   10d64:	0005883a 	mov	r2,zero
   10d68:	dfc00417 	ldw	ra,16(sp)
   10d6c:	dcc00317 	ldw	r19,12(sp)
   10d70:	dc800217 	ldw	r18,8(sp)
   10d74:	dc400117 	ldw	r17,4(sp)
   10d78:	dc000017 	ldw	r16,0(sp)
   10d7c:	dec00504 	addi	sp,sp,20
   10d80:	f800283a 	ret
   10d84:	040bc83a 	sub	r5,zero,r16
   10d88:	9009883a 	mov	r4,r18
   10d8c:	00134000 	call	13400 <_sbrk_r>
   10d90:	00ffffc4 	movi	r3,-1
   10d94:	10c00d26 	beq	r2,r3,10dcc <_malloc_trim_r+0xe0>
   10d98:	00c000f4 	movhi	r3,3
   10d9c:	18eaff04 	addi	r3,r3,-21508
   10da0:	18800017 	ldw	r2,0(r3)
   10da4:	99000217 	ldw	r4,8(r19)
   10da8:	8c23c83a 	sub	r17,r17,r16
   10dac:	8c400054 	ori	r17,r17,1
   10db0:	1421c83a 	sub	r16,r2,r16
   10db4:	24400115 	stw	r17,4(r4)
   10db8:	9009883a 	mov	r4,r18
   10dbc:	1c000015 	stw	r16,0(r3)
   10dc0:	00288d00 	call	288d0 <__malloc_unlock>
   10dc4:	00800044 	movi	r2,1
   10dc8:	003fe706 	br	10d68 <__alt_data_end+0xfffd2568>
   10dcc:	000b883a 	mov	r5,zero
   10dd0:	9009883a 	mov	r4,r18
   10dd4:	00134000 	call	13400 <_sbrk_r>
   10dd8:	99000217 	ldw	r4,8(r19)
   10ddc:	014003c4 	movi	r5,15
   10de0:	1107c83a 	sub	r3,r2,r4
   10de4:	28ffdd0e 	bge	r5,r3,10d5c <__alt_data_end+0xfffd255c>
   10de8:	014000f4 	movhi	r5,3
   10dec:	2968a304 	addi	r5,r5,-23924
   10df0:	29400017 	ldw	r5,0(r5)
   10df4:	18c00054 	ori	r3,r3,1
   10df8:	20c00115 	stw	r3,4(r4)
   10dfc:	00c000f4 	movhi	r3,3
   10e00:	1145c83a 	sub	r2,r2,r5
   10e04:	18eaff04 	addi	r3,r3,-21508
   10e08:	18800015 	stw	r2,0(r3)
   10e0c:	003fd306 	br	10d5c <__alt_data_end+0xfffd255c>

00010e10 <_free_r>:
   10e10:	28004126 	beq	r5,zero,10f18 <_free_r+0x108>
   10e14:	defffd04 	addi	sp,sp,-12
   10e18:	dc400115 	stw	r17,4(sp)
   10e1c:	dc000015 	stw	r16,0(sp)
   10e20:	2023883a 	mov	r17,r4
   10e24:	2821883a 	mov	r16,r5
   10e28:	dfc00215 	stw	ra,8(sp)
   10e2c:	00288cc0 	call	288cc <__malloc_lock>
   10e30:	81ffff17 	ldw	r7,-4(r16)
   10e34:	00bfff84 	movi	r2,-2
   10e38:	010000f4 	movhi	r4,3
   10e3c:	81bffe04 	addi	r6,r16,-8
   10e40:	3884703a 	and	r2,r7,r2
   10e44:	21277e04 	addi	r4,r4,-25096
   10e48:	308b883a 	add	r5,r6,r2
   10e4c:	2a400117 	ldw	r9,4(r5)
   10e50:	22000217 	ldw	r8,8(r4)
   10e54:	00ffff04 	movi	r3,-4
   10e58:	48c6703a 	and	r3,r9,r3
   10e5c:	2a005726 	beq	r5,r8,10fbc <_free_r+0x1ac>
   10e60:	28c00115 	stw	r3,4(r5)
   10e64:	39c0004c 	andi	r7,r7,1
   10e68:	3800091e 	bne	r7,zero,10e90 <_free_r+0x80>
   10e6c:	823ffe17 	ldw	r8,-8(r16)
   10e70:	22400204 	addi	r9,r4,8
   10e74:	320dc83a 	sub	r6,r6,r8
   10e78:	31c00217 	ldw	r7,8(r6)
   10e7c:	1205883a 	add	r2,r2,r8
   10e80:	3a406526 	beq	r7,r9,11018 <_free_r+0x208>
   10e84:	32000317 	ldw	r8,12(r6)
   10e88:	3a000315 	stw	r8,12(r7)
   10e8c:	41c00215 	stw	r7,8(r8)
   10e90:	28cf883a 	add	r7,r5,r3
   10e94:	39c00117 	ldw	r7,4(r7)
   10e98:	39c0004c 	andi	r7,r7,1
   10e9c:	38003a26 	beq	r7,zero,10f88 <_free_r+0x178>
   10ea0:	10c00054 	ori	r3,r2,1
   10ea4:	30c00115 	stw	r3,4(r6)
   10ea8:	3087883a 	add	r3,r6,r2
   10eac:	18800015 	stw	r2,0(r3)
   10eb0:	00c07fc4 	movi	r3,511
   10eb4:	18801936 	bltu	r3,r2,10f1c <_free_r+0x10c>
   10eb8:	1004d0fa 	srli	r2,r2,3
   10ebc:	01c00044 	movi	r7,1
   10ec0:	21400117 	ldw	r5,4(r4)
   10ec4:	10c00044 	addi	r3,r2,1
   10ec8:	18c7883a 	add	r3,r3,r3
   10ecc:	1005d0ba 	srai	r2,r2,2
   10ed0:	18c7883a 	add	r3,r3,r3
   10ed4:	18c7883a 	add	r3,r3,r3
   10ed8:	1907883a 	add	r3,r3,r4
   10edc:	3884983a 	sll	r2,r7,r2
   10ee0:	19c00017 	ldw	r7,0(r3)
   10ee4:	1a3ffe04 	addi	r8,r3,-8
   10ee8:	1144b03a 	or	r2,r2,r5
   10eec:	32000315 	stw	r8,12(r6)
   10ef0:	31c00215 	stw	r7,8(r6)
   10ef4:	20800115 	stw	r2,4(r4)
   10ef8:	19800015 	stw	r6,0(r3)
   10efc:	39800315 	stw	r6,12(r7)
   10f00:	8809883a 	mov	r4,r17
   10f04:	dfc00217 	ldw	ra,8(sp)
   10f08:	dc400117 	ldw	r17,4(sp)
   10f0c:	dc000017 	ldw	r16,0(sp)
   10f10:	dec00304 	addi	sp,sp,12
   10f14:	00288d01 	jmpi	288d0 <__malloc_unlock>
   10f18:	f800283a 	ret
   10f1c:	100ad27a 	srli	r5,r2,9
   10f20:	00c00104 	movi	r3,4
   10f24:	19404a36 	bltu	r3,r5,11050 <_free_r+0x240>
   10f28:	100ad1ba 	srli	r5,r2,6
   10f2c:	28c00e44 	addi	r3,r5,57
   10f30:	18c7883a 	add	r3,r3,r3
   10f34:	29400e04 	addi	r5,r5,56
   10f38:	18c7883a 	add	r3,r3,r3
   10f3c:	18c7883a 	add	r3,r3,r3
   10f40:	1909883a 	add	r4,r3,r4
   10f44:	20c00017 	ldw	r3,0(r4)
   10f48:	01c000f4 	movhi	r7,3
   10f4c:	213ffe04 	addi	r4,r4,-8
   10f50:	39e77e04 	addi	r7,r7,-25096
   10f54:	20c04426 	beq	r4,r3,11068 <_free_r+0x258>
   10f58:	01ffff04 	movi	r7,-4
   10f5c:	19400117 	ldw	r5,4(r3)
   10f60:	29ca703a 	and	r5,r5,r7
   10f64:	1140022e 	bgeu	r2,r5,10f70 <_free_r+0x160>
   10f68:	18c00217 	ldw	r3,8(r3)
   10f6c:	20fffb1e 	bne	r4,r3,10f5c <__alt_data_end+0xfffd275c>
   10f70:	19000317 	ldw	r4,12(r3)
   10f74:	31000315 	stw	r4,12(r6)
   10f78:	30c00215 	stw	r3,8(r6)
   10f7c:	21800215 	stw	r6,8(r4)
   10f80:	19800315 	stw	r6,12(r3)
   10f84:	003fde06 	br	10f00 <__alt_data_end+0xfffd2700>
   10f88:	29c00217 	ldw	r7,8(r5)
   10f8c:	10c5883a 	add	r2,r2,r3
   10f90:	00c000f4 	movhi	r3,3
   10f94:	18e78004 	addi	r3,r3,-25088
   10f98:	38c03b26 	beq	r7,r3,11088 <_free_r+0x278>
   10f9c:	2a000317 	ldw	r8,12(r5)
   10fa0:	11400054 	ori	r5,r2,1
   10fa4:	3087883a 	add	r3,r6,r2
   10fa8:	3a000315 	stw	r8,12(r7)
   10fac:	41c00215 	stw	r7,8(r8)
   10fb0:	31400115 	stw	r5,4(r6)
   10fb4:	18800015 	stw	r2,0(r3)
   10fb8:	003fbd06 	br	10eb0 <__alt_data_end+0xfffd26b0>
   10fbc:	39c0004c 	andi	r7,r7,1
   10fc0:	10c5883a 	add	r2,r2,r3
   10fc4:	3800071e 	bne	r7,zero,10fe4 <_free_r+0x1d4>
   10fc8:	81fffe17 	ldw	r7,-8(r16)
   10fcc:	31cdc83a 	sub	r6,r6,r7
   10fd0:	30c00317 	ldw	r3,12(r6)
   10fd4:	31400217 	ldw	r5,8(r6)
   10fd8:	11c5883a 	add	r2,r2,r7
   10fdc:	28c00315 	stw	r3,12(r5)
   10fe0:	19400215 	stw	r5,8(r3)
   10fe4:	10c00054 	ori	r3,r2,1
   10fe8:	30c00115 	stw	r3,4(r6)
   10fec:	00c000f4 	movhi	r3,3
   10ff0:	18e8a404 	addi	r3,r3,-23920
   10ff4:	18c00017 	ldw	r3,0(r3)
   10ff8:	21800215 	stw	r6,8(r4)
   10ffc:	10ffc036 	bltu	r2,r3,10f00 <__alt_data_end+0xfffd2700>
   11000:	008000f4 	movhi	r2,3
   11004:	10aaf004 	addi	r2,r2,-21568
   11008:	11400017 	ldw	r5,0(r2)
   1100c:	8809883a 	mov	r4,r17
   11010:	0010cec0 	call	10cec <_malloc_trim_r>
   11014:	003fba06 	br	10f00 <__alt_data_end+0xfffd2700>
   11018:	28c9883a 	add	r4,r5,r3
   1101c:	21000117 	ldw	r4,4(r4)
   11020:	2100004c 	andi	r4,r4,1
   11024:	2000391e 	bne	r4,zero,1110c <_free_r+0x2fc>
   11028:	29c00217 	ldw	r7,8(r5)
   1102c:	29000317 	ldw	r4,12(r5)
   11030:	1885883a 	add	r2,r3,r2
   11034:	10c00054 	ori	r3,r2,1
   11038:	39000315 	stw	r4,12(r7)
   1103c:	21c00215 	stw	r7,8(r4)
   11040:	30c00115 	stw	r3,4(r6)
   11044:	308d883a 	add	r6,r6,r2
   11048:	30800015 	stw	r2,0(r6)
   1104c:	003fac06 	br	10f00 <__alt_data_end+0xfffd2700>
   11050:	00c00504 	movi	r3,20
   11054:	19401536 	bltu	r3,r5,110ac <_free_r+0x29c>
   11058:	28c01704 	addi	r3,r5,92
   1105c:	18c7883a 	add	r3,r3,r3
   11060:	294016c4 	addi	r5,r5,91
   11064:	003fb406 	br	10f38 <__alt_data_end+0xfffd2738>
   11068:	280bd0ba 	srai	r5,r5,2
   1106c:	00c00044 	movi	r3,1
   11070:	38800117 	ldw	r2,4(r7)
   11074:	194a983a 	sll	r5,r3,r5
   11078:	2007883a 	mov	r3,r4
   1107c:	2884b03a 	or	r2,r5,r2
   11080:	38800115 	stw	r2,4(r7)
   11084:	003fbb06 	br	10f74 <__alt_data_end+0xfffd2774>
   11088:	21800515 	stw	r6,20(r4)
   1108c:	21800415 	stw	r6,16(r4)
   11090:	10c00054 	ori	r3,r2,1
   11094:	31c00315 	stw	r7,12(r6)
   11098:	31c00215 	stw	r7,8(r6)
   1109c:	30c00115 	stw	r3,4(r6)
   110a0:	308d883a 	add	r6,r6,r2
   110a4:	30800015 	stw	r2,0(r6)
   110a8:	003f9506 	br	10f00 <__alt_data_end+0xfffd2700>
   110ac:	00c01504 	movi	r3,84
   110b0:	19400536 	bltu	r3,r5,110c8 <_free_r+0x2b8>
   110b4:	100ad33a 	srli	r5,r2,12
   110b8:	28c01bc4 	addi	r3,r5,111
   110bc:	18c7883a 	add	r3,r3,r3
   110c0:	29401b84 	addi	r5,r5,110
   110c4:	003f9c06 	br	10f38 <__alt_data_end+0xfffd2738>
   110c8:	00c05504 	movi	r3,340
   110cc:	19400536 	bltu	r3,r5,110e4 <_free_r+0x2d4>
   110d0:	100ad3fa 	srli	r5,r2,15
   110d4:	28c01e04 	addi	r3,r5,120
   110d8:	18c7883a 	add	r3,r3,r3
   110dc:	29401dc4 	addi	r5,r5,119
   110e0:	003f9506 	br	10f38 <__alt_data_end+0xfffd2738>
   110e4:	00c15504 	movi	r3,1364
   110e8:	19400536 	bltu	r3,r5,11100 <_free_r+0x2f0>
   110ec:	100ad4ba 	srli	r5,r2,18
   110f0:	28c01f44 	addi	r3,r5,125
   110f4:	18c7883a 	add	r3,r3,r3
   110f8:	29401f04 	addi	r5,r5,124
   110fc:	003f8e06 	br	10f38 <__alt_data_end+0xfffd2738>
   11100:	00c03f84 	movi	r3,254
   11104:	01401f84 	movi	r5,126
   11108:	003f8b06 	br	10f38 <__alt_data_end+0xfffd2738>
   1110c:	10c00054 	ori	r3,r2,1
   11110:	30c00115 	stw	r3,4(r6)
   11114:	308d883a 	add	r6,r6,r2
   11118:	30800015 	stw	r2,0(r6)
   1111c:	003f7806 	br	10f00 <__alt_data_end+0xfffd2700>

00011120 <_fseek_r>:
   11120:	00111401 	jmpi	11140 <_fseeko_r>

00011124 <fseek>:
   11124:	008000f4 	movhi	r2,3
   11128:	10a8a204 	addi	r2,r2,-23928
   1112c:	300f883a 	mov	r7,r6
   11130:	280d883a 	mov	r6,r5
   11134:	200b883a 	mov	r5,r4
   11138:	11000017 	ldw	r4,0(r2)
   1113c:	00111401 	jmpi	11140 <_fseeko_r>

00011140 <_fseeko_r>:
   11140:	deffe804 	addi	sp,sp,-96
   11144:	dd401415 	stw	r21,80(sp)
   11148:	dc801115 	stw	r18,68(sp)
   1114c:	dc401015 	stw	r17,64(sp)
   11150:	dc000f15 	stw	r16,60(sp)
   11154:	dfc01715 	stw	ra,92(sp)
   11158:	ddc01615 	stw	r23,88(sp)
   1115c:	dd801515 	stw	r22,84(sp)
   11160:	dd001315 	stw	r20,76(sp)
   11164:	dcc01215 	stw	r19,72(sp)
   11168:	2023883a 	mov	r17,r4
   1116c:	2821883a 	mov	r16,r5
   11170:	302b883a 	mov	r21,r6
   11174:	3825883a 	mov	r18,r7
   11178:	20000226 	beq	r4,zero,11184 <_fseeko_r+0x44>
   1117c:	20800e17 	ldw	r2,56(r4)
   11180:	10005a26 	beq	r2,zero,112ec <_fseeko_r+0x1ac>
   11184:	8080030b 	ldhu	r2,12(r16)
   11188:	00c04204 	movi	r3,264
   1118c:	1080420c 	andi	r2,r2,264
   11190:	10c05b26 	beq	r2,r3,11300 <_fseeko_r+0x1c0>
   11194:	85000a17 	ldw	r20,40(r16)
   11198:	a000f626 	beq	r20,zero,11574 <_fseeko_r+0x434>
   1119c:	00800044 	movi	r2,1
   111a0:	90803e26 	beq	r18,r2,1129c <_fseeko_r+0x15c>
   111a4:	00800084 	movi	r2,2
   111a8:	90801026 	beq	r18,r2,111ec <_fseeko_r+0xac>
   111ac:	90000f26 	beq	r18,zero,111ec <_fseeko_r+0xac>
   111b0:	00800584 	movi	r2,22
   111b4:	88800015 	stw	r2,0(r17)
   111b8:	04ffffc4 	movi	r19,-1
   111bc:	9805883a 	mov	r2,r19
   111c0:	dfc01717 	ldw	ra,92(sp)
   111c4:	ddc01617 	ldw	r23,88(sp)
   111c8:	dd801517 	ldw	r22,84(sp)
   111cc:	dd401417 	ldw	r21,80(sp)
   111d0:	dd001317 	ldw	r20,76(sp)
   111d4:	dcc01217 	ldw	r19,72(sp)
   111d8:	dc801117 	ldw	r18,68(sp)
   111dc:	dc401017 	ldw	r17,64(sp)
   111e0:	dc000f17 	ldw	r16,60(sp)
   111e4:	dec01804 	addi	sp,sp,96
   111e8:	f800283a 	ret
   111ec:	80800417 	ldw	r2,16(r16)
   111f0:	002f883a 	mov	r23,zero
   111f4:	0027883a 	mov	r19,zero
   111f8:	1000cb26 	beq	r2,zero,11528 <_fseeko_r+0x3e8>
   111fc:	8080030b 	ldhu	r2,12(r16)
   11200:	10c2068c 	andi	r3,r2,2074
   11204:	1800071e 	bne	r3,zero,11224 <_fseeko_r+0xe4>
   11208:	10c1000c 	andi	r3,r2,1024
   1120c:	1800451e 	bne	r3,zero,11324 <_fseeko_r+0x1e4>
   11210:	00c00074 	movhi	r3,1
   11214:	18cd8804 	addi	r3,r3,13856
   11218:	a0c0b726 	beq	r20,r3,114f8 <_fseeko_r+0x3b8>
   1121c:	10820014 	ori	r2,r2,2048
   11220:	8080030d 	sth	r2,12(r16)
   11224:	800b883a 	mov	r5,r16
   11228:	8809883a 	mov	r4,r17
   1122c:	00106a40 	call	106a4 <_fflush_r>
   11230:	1027883a 	mov	r19,r2
   11234:	103fe01e 	bne	r2,zero,111b8 <__alt_data_end+0xfffd29b8>
   11238:	81400717 	ldw	r5,28(r16)
   1123c:	900f883a 	mov	r7,r18
   11240:	a80d883a 	mov	r6,r21
   11244:	8809883a 	mov	r4,r17
   11248:	a03ee83a 	callr	r20
   1124c:	00ffffc4 	movi	r3,-1
   11250:	10ffd926 	beq	r2,r3,111b8 <__alt_data_end+0xfffd29b8>
   11254:	81400c17 	ldw	r5,48(r16)
   11258:	28000526 	beq	r5,zero,11270 <_fseeko_r+0x130>
   1125c:	80801004 	addi	r2,r16,64
   11260:	28800226 	beq	r5,r2,1126c <_fseeko_r+0x12c>
   11264:	8809883a 	mov	r4,r17
   11268:	0010e100 	call	10e10 <_free_r>
   1126c:	80000c15 	stw	zero,48(r16)
   11270:	8080030b 	ldhu	r2,12(r16)
   11274:	80c00417 	ldw	r3,16(r16)
   11278:	80000115 	stw	zero,4(r16)
   1127c:	10bdf7cc 	andi	r2,r2,63455
   11280:	80c00015 	stw	r3,0(r16)
   11284:	8080030d 	sth	r2,12(r16)
   11288:	01800204 	movi	r6,8
   1128c:	000b883a 	mov	r5,zero
   11290:	81001704 	addi	r4,r16,92
   11294:	00129c40 	call	129c4 <memset>
   11298:	003fc806 	br	111bc <__alt_data_end+0xfffd29bc>
   1129c:	800b883a 	mov	r5,r16
   112a0:	8809883a 	mov	r4,r17
   112a4:	00106a40 	call	106a4 <_fflush_r>
   112a8:	8080030b 	ldhu	r2,12(r16)
   112ac:	10c4000c 	andi	r3,r2,4096
   112b0:	18008726 	beq	r3,zero,114d0 <_fseeko_r+0x390>
   112b4:	84c01417 	ldw	r19,80(r16)
   112b8:	10c0010c 	andi	r3,r2,4
   112bc:	1800431e 	bne	r3,zero,113cc <_fseeko_r+0x28c>
   112c0:	1080020c 	andi	r2,r2,8
   112c4:	10008026 	beq	r2,zero,114c8 <_fseeko_r+0x388>
   112c8:	80c00017 	ldw	r3,0(r16)
   112cc:	80800417 	ldw	r2,16(r16)
   112d0:	18000226 	beq	r3,zero,112dc <_fseeko_r+0x19c>
   112d4:	1887c83a 	sub	r3,r3,r2
   112d8:	98e7883a 	add	r19,r19,r3
   112dc:	aceb883a 	add	r21,r21,r19
   112e0:	05c00044 	movi	r23,1
   112e4:	0025883a 	mov	r18,zero
   112e8:	003fc306 	br	111f8 <__alt_data_end+0xfffd29f8>
   112ec:	0010a900 	call	10a90 <__sinit>
   112f0:	8080030b 	ldhu	r2,12(r16)
   112f4:	00c04204 	movi	r3,264
   112f8:	1080420c 	andi	r2,r2,264
   112fc:	10ffa51e 	bne	r2,r3,11194 <__alt_data_end+0xfffd2994>
   11300:	800b883a 	mov	r5,r16
   11304:	8809883a 	mov	r4,r17
   11308:	00106a40 	call	106a4 <_fflush_r>
   1130c:	003fa106 	br	11194 <__alt_data_end+0xfffd2994>
   11310:	8080030b 	ldhu	r2,12(r16)
   11314:	00c10004 	movi	r3,1024
   11318:	80c01315 	stw	r3,76(r16)
   1131c:	10c4b03a 	or	r2,r2,r3
   11320:	8080030d 	sth	r2,12(r16)
   11324:	9000311e 	bne	r18,zero,113ec <_fseeko_r+0x2ac>
   11328:	a82d883a 	mov	r22,r21
   1132c:	b800371e 	bne	r23,zero,1140c <_fseeko_r+0x2cc>
   11330:	8080030b 	ldhu	r2,12(r16)
   11334:	1084000c 	andi	r2,r2,4096
   11338:	10007f26 	beq	r2,zero,11538 <_fseeko_r+0x3f8>
   1133c:	80801417 	ldw	r2,80(r16)
   11340:	81800117 	ldw	r6,4(r16)
   11344:	81400c17 	ldw	r5,48(r16)
   11348:	11a7c83a 	sub	r19,r2,r6
   1134c:	28008226 	beq	r5,zero,11558 <_fseeko_r+0x418>
   11350:	81c00f17 	ldw	r7,60(r16)
   11354:	99e7c83a 	sub	r19,r19,r7
   11358:	81000e17 	ldw	r4,56(r16)
   1135c:	80800417 	ldw	r2,16(r16)
   11360:	99a7883a 	add	r19,r19,r6
   11364:	2087c83a 	sub	r3,r4,r2
   11368:	98e7c83a 	sub	r19,r19,r3
   1136c:	38c7883a 	add	r3,r7,r3
   11370:	b4c02b16 	blt	r22,r19,11420 <_fseeko_r+0x2e0>
   11374:	98c9883a 	add	r4,r19,r3
   11378:	b100292e 	bgeu	r22,r4,11420 <_fseeko_r+0x2e0>
   1137c:	b4e7c83a 	sub	r19,r22,r19
   11380:	14c5883a 	add	r2,r2,r19
   11384:	1ce7c83a 	sub	r19,r3,r19
   11388:	80800015 	stw	r2,0(r16)
   1138c:	84c00115 	stw	r19,4(r16)
   11390:	28000526 	beq	r5,zero,113a8 <_fseeko_r+0x268>
   11394:	80801004 	addi	r2,r16,64
   11398:	28800226 	beq	r5,r2,113a4 <_fseeko_r+0x264>
   1139c:	8809883a 	mov	r4,r17
   113a0:	0010e100 	call	10e10 <_free_r>
   113a4:	80000c15 	stw	zero,48(r16)
   113a8:	8080030b 	ldhu	r2,12(r16)
   113ac:	01800204 	movi	r6,8
   113b0:	000b883a 	mov	r5,zero
   113b4:	10bff7cc 	andi	r2,r2,65503
   113b8:	8080030d 	sth	r2,12(r16)
   113bc:	81001704 	addi	r4,r16,92
   113c0:	00129c40 	call	129c4 <memset>
   113c4:	0027883a 	mov	r19,zero
   113c8:	003f7c06 	br	111bc <__alt_data_end+0xfffd29bc>
   113cc:	80c00117 	ldw	r3,4(r16)
   113d0:	80800c17 	ldw	r2,48(r16)
   113d4:	98e7c83a 	sub	r19,r19,r3
   113d8:	10003b26 	beq	r2,zero,114c8 <_fseeko_r+0x388>
   113dc:	80c00f17 	ldw	r3,60(r16)
   113e0:	80800417 	ldw	r2,16(r16)
   113e4:	98e7c83a 	sub	r19,r19,r3
   113e8:	003fbc06 	br	112dc <__alt_data_end+0xfffd2adc>
   113ec:	8140038f 	ldh	r5,14(r16)
   113f0:	d80d883a 	mov	r6,sp
   113f4:	8809883a 	mov	r4,r17
   113f8:	00115a00 	call	115a0 <_fstat_r>
   113fc:	103f891e 	bne	r2,zero,11224 <__alt_data_end+0xfffd2a24>
   11400:	dd800417 	ldw	r22,16(sp)
   11404:	adad883a 	add	r22,r21,r22
   11408:	b83fc926 	beq	r23,zero,11330 <__alt_data_end+0xfffd2b30>
   1140c:	81400c17 	ldw	r5,48(r16)
   11410:	81800117 	ldw	r6,4(r16)
   11414:	28005026 	beq	r5,zero,11558 <_fseeko_r+0x418>
   11418:	81c00f17 	ldw	r7,60(r16)
   1141c:	003fce06 	br	11358 <__alt_data_end+0xfffd2b58>
   11420:	84c01317 	ldw	r19,76(r16)
   11424:	81400717 	ldw	r5,28(r16)
   11428:	000f883a 	mov	r7,zero
   1142c:	04e7c83a 	sub	r19,zero,r19
   11430:	9da6703a 	and	r19,r19,r22
   11434:	980d883a 	mov	r6,r19
   11438:	8809883a 	mov	r4,r17
   1143c:	a03ee83a 	callr	r20
   11440:	00ffffc4 	movi	r3,-1
   11444:	10ff7726 	beq	r2,r3,11224 <__alt_data_end+0xfffd2a24>
   11448:	80800417 	ldw	r2,16(r16)
   1144c:	81400c17 	ldw	r5,48(r16)
   11450:	80000115 	stw	zero,4(r16)
   11454:	80800015 	stw	r2,0(r16)
   11458:	28000526 	beq	r5,zero,11470 <_fseeko_r+0x330>
   1145c:	80801004 	addi	r2,r16,64
   11460:	28800226 	beq	r5,r2,1146c <_fseeko_r+0x32c>
   11464:	8809883a 	mov	r4,r17
   11468:	0010e100 	call	10e10 <_free_r>
   1146c:	80000c15 	stw	zero,48(r16)
   11470:	8080030b 	ldhu	r2,12(r16)
   11474:	b4e7c83a 	sub	r19,r22,r19
   11478:	10bff7cc 	andi	r2,r2,65503
   1147c:	8080030d 	sth	r2,12(r16)
   11480:	98000b26 	beq	r19,zero,114b0 <_fseeko_r+0x370>
   11484:	800b883a 	mov	r5,r16
   11488:	8809883a 	mov	r4,r17
   1148c:	001322c0 	call	1322c <__srefill_r>
   11490:	103f641e 	bne	r2,zero,11224 <__alt_data_end+0xfffd2a24>
   11494:	80800117 	ldw	r2,4(r16)
   11498:	14ff6236 	bltu	r2,r19,11224 <__alt_data_end+0xfffd2a24>
   1149c:	80c00017 	ldw	r3,0(r16)
   114a0:	14c5c83a 	sub	r2,r2,r19
   114a4:	80800115 	stw	r2,4(r16)
   114a8:	1ce7883a 	add	r19,r3,r19
   114ac:	84c00015 	stw	r19,0(r16)
   114b0:	01800204 	movi	r6,8
   114b4:	000b883a 	mov	r5,zero
   114b8:	81001704 	addi	r4,r16,92
   114bc:	00129c40 	call	129c4 <memset>
   114c0:	0027883a 	mov	r19,zero
   114c4:	003f3d06 	br	111bc <__alt_data_end+0xfffd29bc>
   114c8:	80800417 	ldw	r2,16(r16)
   114cc:	003f8306 	br	112dc <__alt_data_end+0xfffd2adc>
   114d0:	81400717 	ldw	r5,28(r16)
   114d4:	900f883a 	mov	r7,r18
   114d8:	000d883a 	mov	r6,zero
   114dc:	8809883a 	mov	r4,r17
   114e0:	a03ee83a 	callr	r20
   114e4:	1027883a 	mov	r19,r2
   114e8:	00bfffc4 	movi	r2,-1
   114ec:	98bf3226 	beq	r19,r2,111b8 <__alt_data_end+0xfffd29b8>
   114f0:	8080030b 	ldhu	r2,12(r16)
   114f4:	003f7006 	br	112b8 <__alt_data_end+0xfffd2ab8>
   114f8:	8140038f 	ldh	r5,14(r16)
   114fc:	283f4716 	blt	r5,zero,1121c <__alt_data_end+0xfffd2a1c>
   11500:	d80d883a 	mov	r6,sp
   11504:	8809883a 	mov	r4,r17
   11508:	00115a00 	call	115a0 <_fstat_r>
   1150c:	1000041e 	bne	r2,zero,11520 <_fseeko_r+0x3e0>
   11510:	d8800117 	ldw	r2,4(sp)
   11514:	00e00014 	movui	r3,32768
   11518:	10bc000c 	andi	r2,r2,61440
   1151c:	10ff7c26 	beq	r2,r3,11310 <__alt_data_end+0xfffd2b10>
   11520:	8080030b 	ldhu	r2,12(r16)
   11524:	003f3d06 	br	1121c <__alt_data_end+0xfffd2a1c>
   11528:	800b883a 	mov	r5,r16
   1152c:	8809883a 	mov	r4,r17
   11530:	0011c4c0 	call	11c4c <__smakebuf_r>
   11534:	003f3106 	br	111fc <__alt_data_end+0xfffd29fc>
   11538:	81400717 	ldw	r5,28(r16)
   1153c:	01c00044 	movi	r7,1
   11540:	000d883a 	mov	r6,zero
   11544:	8809883a 	mov	r4,r17
   11548:	a03ee83a 	callr	r20
   1154c:	00ffffc4 	movi	r3,-1
   11550:	10ff7b1e 	bne	r2,r3,11340 <__alt_data_end+0xfffd2b40>
   11554:	003f3306 	br	11224 <__alt_data_end+0xfffd2a24>
   11558:	80c00017 	ldw	r3,0(r16)
   1155c:	80800417 	ldw	r2,16(r16)
   11560:	000b883a 	mov	r5,zero
   11564:	1887c83a 	sub	r3,r3,r2
   11568:	98e7c83a 	sub	r19,r19,r3
   1156c:	30c7883a 	add	r3,r6,r3
   11570:	003f7f06 	br	11370 <__alt_data_end+0xfffd2b70>
   11574:	00800744 	movi	r2,29
   11578:	88800015 	stw	r2,0(r17)
   1157c:	04ffffc4 	movi	r19,-1
   11580:	003f0e06 	br	111bc <__alt_data_end+0xfffd29bc>

00011584 <fseeko>:
   11584:	008000f4 	movhi	r2,3
   11588:	10a8a204 	addi	r2,r2,-23928
   1158c:	300f883a 	mov	r7,r6
   11590:	280d883a 	mov	r6,r5
   11594:	200b883a 	mov	r5,r4
   11598:	11000017 	ldw	r4,0(r2)
   1159c:	00111401 	jmpi	11140 <_fseeko_r>

000115a0 <_fstat_r>:
   115a0:	defffd04 	addi	sp,sp,-12
   115a4:	2805883a 	mov	r2,r5
   115a8:	dc000015 	stw	r16,0(sp)
   115ac:	040000f4 	movhi	r16,3
   115b0:	dc400115 	stw	r17,4(sp)
   115b4:	842aed04 	addi	r16,r16,-21580
   115b8:	2023883a 	mov	r17,r4
   115bc:	300b883a 	mov	r5,r6
   115c0:	1009883a 	mov	r4,r2
   115c4:	dfc00215 	stw	ra,8(sp)
   115c8:	80000015 	stw	zero,0(r16)
   115cc:	002852c0 	call	2852c <fstat>
   115d0:	00ffffc4 	movi	r3,-1
   115d4:	10c00526 	beq	r2,r3,115ec <_fstat_r+0x4c>
   115d8:	dfc00217 	ldw	ra,8(sp)
   115dc:	dc400117 	ldw	r17,4(sp)
   115e0:	dc000017 	ldw	r16,0(sp)
   115e4:	dec00304 	addi	sp,sp,12
   115e8:	f800283a 	ret
   115ec:	80c00017 	ldw	r3,0(r16)
   115f0:	183ff926 	beq	r3,zero,115d8 <__alt_data_end+0xfffd2dd8>
   115f4:	88c00015 	stw	r3,0(r17)
   115f8:	003ff706 	br	115d8 <__alt_data_end+0xfffd2dd8>

000115fc <__sfvwrite_r>:
   115fc:	30800217 	ldw	r2,8(r6)
   11600:	10006726 	beq	r2,zero,117a0 <__sfvwrite_r+0x1a4>
   11604:	28c0030b 	ldhu	r3,12(r5)
   11608:	defff404 	addi	sp,sp,-48
   1160c:	dd400715 	stw	r21,28(sp)
   11610:	dd000615 	stw	r20,24(sp)
   11614:	dc000215 	stw	r16,8(sp)
   11618:	dfc00b15 	stw	ra,44(sp)
   1161c:	df000a15 	stw	fp,40(sp)
   11620:	ddc00915 	stw	r23,36(sp)
   11624:	dd800815 	stw	r22,32(sp)
   11628:	dcc00515 	stw	r19,20(sp)
   1162c:	dc800415 	stw	r18,16(sp)
   11630:	dc400315 	stw	r17,12(sp)
   11634:	1880020c 	andi	r2,r3,8
   11638:	2821883a 	mov	r16,r5
   1163c:	202b883a 	mov	r21,r4
   11640:	3029883a 	mov	r20,r6
   11644:	10002726 	beq	r2,zero,116e4 <__sfvwrite_r+0xe8>
   11648:	28800417 	ldw	r2,16(r5)
   1164c:	10002526 	beq	r2,zero,116e4 <__sfvwrite_r+0xe8>
   11650:	1880008c 	andi	r2,r3,2
   11654:	a4400017 	ldw	r17,0(r20)
   11658:	10002a26 	beq	r2,zero,11704 <__sfvwrite_r+0x108>
   1165c:	05a00034 	movhi	r22,32768
   11660:	0027883a 	mov	r19,zero
   11664:	0025883a 	mov	r18,zero
   11668:	b5bf0004 	addi	r22,r22,-1024
   1166c:	980d883a 	mov	r6,r19
   11670:	a809883a 	mov	r4,r21
   11674:	90004626 	beq	r18,zero,11790 <__sfvwrite_r+0x194>
   11678:	900f883a 	mov	r7,r18
   1167c:	b480022e 	bgeu	r22,r18,11688 <__sfvwrite_r+0x8c>
   11680:	01e00034 	movhi	r7,32768
   11684:	39ff0004 	addi	r7,r7,-1024
   11688:	80800917 	ldw	r2,36(r16)
   1168c:	81400717 	ldw	r5,28(r16)
   11690:	103ee83a 	callr	r2
   11694:	00805a0e 	bge	zero,r2,11800 <__sfvwrite_r+0x204>
   11698:	a0c00217 	ldw	r3,8(r20)
   1169c:	98a7883a 	add	r19,r19,r2
   116a0:	90a5c83a 	sub	r18,r18,r2
   116a4:	1885c83a 	sub	r2,r3,r2
   116a8:	a0800215 	stw	r2,8(r20)
   116ac:	103fef1e 	bne	r2,zero,1166c <__alt_data_end+0xfffd2e6c>
   116b0:	0005883a 	mov	r2,zero
   116b4:	dfc00b17 	ldw	ra,44(sp)
   116b8:	df000a17 	ldw	fp,40(sp)
   116bc:	ddc00917 	ldw	r23,36(sp)
   116c0:	dd800817 	ldw	r22,32(sp)
   116c4:	dd400717 	ldw	r21,28(sp)
   116c8:	dd000617 	ldw	r20,24(sp)
   116cc:	dcc00517 	ldw	r19,20(sp)
   116d0:	dc800417 	ldw	r18,16(sp)
   116d4:	dc400317 	ldw	r17,12(sp)
   116d8:	dc000217 	ldw	r16,8(sp)
   116dc:	dec00c04 	addi	sp,sp,48
   116e0:	f800283a 	ret
   116e4:	800b883a 	mov	r5,r16
   116e8:	a809883a 	mov	r4,r21
   116ec:	00175980 	call	17598 <__swsetup_r>
   116f0:	1000ee1e 	bne	r2,zero,11aac <__sfvwrite_r+0x4b0>
   116f4:	80c0030b 	ldhu	r3,12(r16)
   116f8:	a4400017 	ldw	r17,0(r20)
   116fc:	1880008c 	andi	r2,r3,2
   11700:	103fd61e 	bne	r2,zero,1165c <__alt_data_end+0xfffd2e5c>
   11704:	1880004c 	andi	r2,r3,1
   11708:	1000421e 	bne	r2,zero,11814 <__sfvwrite_r+0x218>
   1170c:	0039883a 	mov	fp,zero
   11710:	0025883a 	mov	r18,zero
   11714:	90001a26 	beq	r18,zero,11780 <__sfvwrite_r+0x184>
   11718:	1880800c 	andi	r2,r3,512
   1171c:	84c00217 	ldw	r19,8(r16)
   11720:	10002126 	beq	r2,zero,117a8 <__sfvwrite_r+0x1ac>
   11724:	982f883a 	mov	r23,r19
   11728:	94c09636 	bltu	r18,r19,11984 <__sfvwrite_r+0x388>
   1172c:	1881200c 	andi	r2,r3,1152
   11730:	1000a11e 	bne	r2,zero,119b8 <__sfvwrite_r+0x3bc>
   11734:	81000017 	ldw	r4,0(r16)
   11738:	b80d883a 	mov	r6,r23
   1173c:	e00b883a 	mov	r5,fp
   11740:	00128680 	call	12868 <memmove>
   11744:	80c00217 	ldw	r3,8(r16)
   11748:	81000017 	ldw	r4,0(r16)
   1174c:	9005883a 	mov	r2,r18
   11750:	1ce7c83a 	sub	r19,r3,r19
   11754:	25cf883a 	add	r7,r4,r23
   11758:	84c00215 	stw	r19,8(r16)
   1175c:	81c00015 	stw	r7,0(r16)
   11760:	a0c00217 	ldw	r3,8(r20)
   11764:	e0b9883a 	add	fp,fp,r2
   11768:	90a5c83a 	sub	r18,r18,r2
   1176c:	18a7c83a 	sub	r19,r3,r2
   11770:	a4c00215 	stw	r19,8(r20)
   11774:	983fce26 	beq	r19,zero,116b0 <__alt_data_end+0xfffd2eb0>
   11778:	80c0030b 	ldhu	r3,12(r16)
   1177c:	903fe61e 	bne	r18,zero,11718 <__alt_data_end+0xfffd2f18>
   11780:	8f000017 	ldw	fp,0(r17)
   11784:	8c800117 	ldw	r18,4(r17)
   11788:	8c400204 	addi	r17,r17,8
   1178c:	003fe106 	br	11714 <__alt_data_end+0xfffd2f14>
   11790:	8cc00017 	ldw	r19,0(r17)
   11794:	8c800117 	ldw	r18,4(r17)
   11798:	8c400204 	addi	r17,r17,8
   1179c:	003fb306 	br	1166c <__alt_data_end+0xfffd2e6c>
   117a0:	0005883a 	mov	r2,zero
   117a4:	f800283a 	ret
   117a8:	81000017 	ldw	r4,0(r16)
   117ac:	80800417 	ldw	r2,16(r16)
   117b0:	11005a36 	bltu	r2,r4,1191c <__sfvwrite_r+0x320>
   117b4:	85c00517 	ldw	r23,20(r16)
   117b8:	95c05836 	bltu	r18,r23,1191c <__sfvwrite_r+0x320>
   117bc:	00a00034 	movhi	r2,32768
   117c0:	10bfffc4 	addi	r2,r2,-1
   117c4:	9009883a 	mov	r4,r18
   117c8:	1480012e 	bgeu	r2,r18,117d0 <__sfvwrite_r+0x1d4>
   117cc:	1009883a 	mov	r4,r2
   117d0:	b80b883a 	mov	r5,r23
   117d4:	00256c80 	call	256c8 <__divsi3>
   117d8:	b80b883a 	mov	r5,r23
   117dc:	1009883a 	mov	r4,r2
   117e0:	002587c0 	call	2587c <__mulsi3>
   117e4:	81400717 	ldw	r5,28(r16)
   117e8:	80c00917 	ldw	r3,36(r16)
   117ec:	100f883a 	mov	r7,r2
   117f0:	e00d883a 	mov	r6,fp
   117f4:	a809883a 	mov	r4,r21
   117f8:	183ee83a 	callr	r3
   117fc:	00bfd816 	blt	zero,r2,11760 <__alt_data_end+0xfffd2f60>
   11800:	8080030b 	ldhu	r2,12(r16)
   11804:	10801014 	ori	r2,r2,64
   11808:	8080030d 	sth	r2,12(r16)
   1180c:	00bfffc4 	movi	r2,-1
   11810:	003fa806 	br	116b4 <__alt_data_end+0xfffd2eb4>
   11814:	0027883a 	mov	r19,zero
   11818:	0011883a 	mov	r8,zero
   1181c:	0039883a 	mov	fp,zero
   11820:	0025883a 	mov	r18,zero
   11824:	90001f26 	beq	r18,zero,118a4 <__sfvwrite_r+0x2a8>
   11828:	40005a26 	beq	r8,zero,11994 <__sfvwrite_r+0x398>
   1182c:	982d883a 	mov	r22,r19
   11830:	94c0012e 	bgeu	r18,r19,11838 <__sfvwrite_r+0x23c>
   11834:	902d883a 	mov	r22,r18
   11838:	81000017 	ldw	r4,0(r16)
   1183c:	80800417 	ldw	r2,16(r16)
   11840:	b02f883a 	mov	r23,r22
   11844:	81c00517 	ldw	r7,20(r16)
   11848:	1100032e 	bgeu	r2,r4,11858 <__sfvwrite_r+0x25c>
   1184c:	80c00217 	ldw	r3,8(r16)
   11850:	38c7883a 	add	r3,r7,r3
   11854:	1d801816 	blt	r3,r22,118b8 <__sfvwrite_r+0x2bc>
   11858:	b1c03e16 	blt	r22,r7,11954 <__sfvwrite_r+0x358>
   1185c:	80800917 	ldw	r2,36(r16)
   11860:	81400717 	ldw	r5,28(r16)
   11864:	e00d883a 	mov	r6,fp
   11868:	da000115 	stw	r8,4(sp)
   1186c:	a809883a 	mov	r4,r21
   11870:	103ee83a 	callr	r2
   11874:	102f883a 	mov	r23,r2
   11878:	da000117 	ldw	r8,4(sp)
   1187c:	00bfe00e 	bge	zero,r2,11800 <__alt_data_end+0xfffd3000>
   11880:	9de7c83a 	sub	r19,r19,r23
   11884:	98001f26 	beq	r19,zero,11904 <__sfvwrite_r+0x308>
   11888:	a0800217 	ldw	r2,8(r20)
   1188c:	e5f9883a 	add	fp,fp,r23
   11890:	95e5c83a 	sub	r18,r18,r23
   11894:	15efc83a 	sub	r23,r2,r23
   11898:	a5c00215 	stw	r23,8(r20)
   1189c:	b83f8426 	beq	r23,zero,116b0 <__alt_data_end+0xfffd2eb0>
   118a0:	903fe11e 	bne	r18,zero,11828 <__alt_data_end+0xfffd3028>
   118a4:	8f000017 	ldw	fp,0(r17)
   118a8:	8c800117 	ldw	r18,4(r17)
   118ac:	0011883a 	mov	r8,zero
   118b0:	8c400204 	addi	r17,r17,8
   118b4:	003fdb06 	br	11824 <__alt_data_end+0xfffd3024>
   118b8:	180d883a 	mov	r6,r3
   118bc:	e00b883a 	mov	r5,fp
   118c0:	da000115 	stw	r8,4(sp)
   118c4:	d8c00015 	stw	r3,0(sp)
   118c8:	00128680 	call	12868 <memmove>
   118cc:	d8c00017 	ldw	r3,0(sp)
   118d0:	80800017 	ldw	r2,0(r16)
   118d4:	800b883a 	mov	r5,r16
   118d8:	a809883a 	mov	r4,r21
   118dc:	10c5883a 	add	r2,r2,r3
   118e0:	80800015 	stw	r2,0(r16)
   118e4:	d8c00015 	stw	r3,0(sp)
   118e8:	00106a40 	call	106a4 <_fflush_r>
   118ec:	d8c00017 	ldw	r3,0(sp)
   118f0:	da000117 	ldw	r8,4(sp)
   118f4:	103fc21e 	bne	r2,zero,11800 <__alt_data_end+0xfffd3000>
   118f8:	182f883a 	mov	r23,r3
   118fc:	9de7c83a 	sub	r19,r19,r23
   11900:	983fe11e 	bne	r19,zero,11888 <__alt_data_end+0xfffd3088>
   11904:	800b883a 	mov	r5,r16
   11908:	a809883a 	mov	r4,r21
   1190c:	00106a40 	call	106a4 <_fflush_r>
   11910:	103fbb1e 	bne	r2,zero,11800 <__alt_data_end+0xfffd3000>
   11914:	0011883a 	mov	r8,zero
   11918:	003fdb06 	br	11888 <__alt_data_end+0xfffd3088>
   1191c:	94c0012e 	bgeu	r18,r19,11924 <__sfvwrite_r+0x328>
   11920:	9027883a 	mov	r19,r18
   11924:	980d883a 	mov	r6,r19
   11928:	e00b883a 	mov	r5,fp
   1192c:	00128680 	call	12868 <memmove>
   11930:	80800217 	ldw	r2,8(r16)
   11934:	80c00017 	ldw	r3,0(r16)
   11938:	14c5c83a 	sub	r2,r2,r19
   1193c:	1cc7883a 	add	r3,r3,r19
   11940:	80800215 	stw	r2,8(r16)
   11944:	80c00015 	stw	r3,0(r16)
   11948:	10004326 	beq	r2,zero,11a58 <__sfvwrite_r+0x45c>
   1194c:	9805883a 	mov	r2,r19
   11950:	003f8306 	br	11760 <__alt_data_end+0xfffd2f60>
   11954:	b00d883a 	mov	r6,r22
   11958:	e00b883a 	mov	r5,fp
   1195c:	da000115 	stw	r8,4(sp)
   11960:	00128680 	call	12868 <memmove>
   11964:	80800217 	ldw	r2,8(r16)
   11968:	80c00017 	ldw	r3,0(r16)
   1196c:	da000117 	ldw	r8,4(sp)
   11970:	1585c83a 	sub	r2,r2,r22
   11974:	1dad883a 	add	r22,r3,r22
   11978:	80800215 	stw	r2,8(r16)
   1197c:	85800015 	stw	r22,0(r16)
   11980:	003fbf06 	br	11880 <__alt_data_end+0xfffd3080>
   11984:	81000017 	ldw	r4,0(r16)
   11988:	9027883a 	mov	r19,r18
   1198c:	902f883a 	mov	r23,r18
   11990:	003f6906 	br	11738 <__alt_data_end+0xfffd2f38>
   11994:	900d883a 	mov	r6,r18
   11998:	01400284 	movi	r5,10
   1199c:	e009883a 	mov	r4,fp
   119a0:	001263c0 	call	1263c <memchr>
   119a4:	10003e26 	beq	r2,zero,11aa0 <__sfvwrite_r+0x4a4>
   119a8:	10800044 	addi	r2,r2,1
   119ac:	1727c83a 	sub	r19,r2,fp
   119b0:	02000044 	movi	r8,1
   119b4:	003f9d06 	br	1182c <__alt_data_end+0xfffd302c>
   119b8:	80800517 	ldw	r2,20(r16)
   119bc:	81400417 	ldw	r5,16(r16)
   119c0:	81c00017 	ldw	r7,0(r16)
   119c4:	10a7883a 	add	r19,r2,r2
   119c8:	9885883a 	add	r2,r19,r2
   119cc:	1026d7fa 	srli	r19,r2,31
   119d0:	396dc83a 	sub	r22,r7,r5
   119d4:	b1000044 	addi	r4,r22,1
   119d8:	9885883a 	add	r2,r19,r2
   119dc:	1027d07a 	srai	r19,r2,1
   119e0:	2485883a 	add	r2,r4,r18
   119e4:	980d883a 	mov	r6,r19
   119e8:	9880022e 	bgeu	r19,r2,119f4 <__sfvwrite_r+0x3f8>
   119ec:	1027883a 	mov	r19,r2
   119f0:	100d883a 	mov	r6,r2
   119f4:	18c1000c 	andi	r3,r3,1024
   119f8:	18001c26 	beq	r3,zero,11a6c <__sfvwrite_r+0x470>
   119fc:	300b883a 	mov	r5,r6
   11a00:	a809883a 	mov	r4,r21
   11a04:	0011e300 	call	11e30 <_malloc_r>
   11a08:	102f883a 	mov	r23,r2
   11a0c:	10002926 	beq	r2,zero,11ab4 <__sfvwrite_r+0x4b8>
   11a10:	81400417 	ldw	r5,16(r16)
   11a14:	b00d883a 	mov	r6,r22
   11a18:	1009883a 	mov	r4,r2
   11a1c:	00127200 	call	12720 <memcpy>
   11a20:	8080030b 	ldhu	r2,12(r16)
   11a24:	00fedfc4 	movi	r3,-1153
   11a28:	10c4703a 	and	r2,r2,r3
   11a2c:	10802014 	ori	r2,r2,128
   11a30:	8080030d 	sth	r2,12(r16)
   11a34:	bd89883a 	add	r4,r23,r22
   11a38:	9d8fc83a 	sub	r7,r19,r22
   11a3c:	85c00415 	stw	r23,16(r16)
   11a40:	84c00515 	stw	r19,20(r16)
   11a44:	81000015 	stw	r4,0(r16)
   11a48:	9027883a 	mov	r19,r18
   11a4c:	81c00215 	stw	r7,8(r16)
   11a50:	902f883a 	mov	r23,r18
   11a54:	003f3806 	br	11738 <__alt_data_end+0xfffd2f38>
   11a58:	800b883a 	mov	r5,r16
   11a5c:	a809883a 	mov	r4,r21
   11a60:	00106a40 	call	106a4 <_fflush_r>
   11a64:	103fb926 	beq	r2,zero,1194c <__alt_data_end+0xfffd314c>
   11a68:	003f6506 	br	11800 <__alt_data_end+0xfffd3000>
   11a6c:	a809883a 	mov	r4,r21
   11a70:	0012cac0 	call	12cac <_realloc_r>
   11a74:	102f883a 	mov	r23,r2
   11a78:	103fee1e 	bne	r2,zero,11a34 <__alt_data_end+0xfffd3234>
   11a7c:	81400417 	ldw	r5,16(r16)
   11a80:	a809883a 	mov	r4,r21
   11a84:	0010e100 	call	10e10 <_free_r>
   11a88:	8080030b 	ldhu	r2,12(r16)
   11a8c:	00ffdfc4 	movi	r3,-129
   11a90:	1884703a 	and	r2,r3,r2
   11a94:	00c00304 	movi	r3,12
   11a98:	a8c00015 	stw	r3,0(r21)
   11a9c:	003f5906 	br	11804 <__alt_data_end+0xfffd3004>
   11aa0:	94c00044 	addi	r19,r18,1
   11aa4:	02000044 	movi	r8,1
   11aa8:	003f6006 	br	1182c <__alt_data_end+0xfffd302c>
   11aac:	00bfffc4 	movi	r2,-1
   11ab0:	003f0006 	br	116b4 <__alt_data_end+0xfffd2eb4>
   11ab4:	00800304 	movi	r2,12
   11ab8:	a8800015 	stw	r2,0(r21)
   11abc:	8080030b 	ldhu	r2,12(r16)
   11ac0:	003f5006 	br	11804 <__alt_data_end+0xfffd3004>

00011ac4 <_fwalk>:
   11ac4:	defff704 	addi	sp,sp,-36
   11ac8:	dd000415 	stw	r20,16(sp)
   11acc:	dfc00815 	stw	ra,32(sp)
   11ad0:	ddc00715 	stw	r23,28(sp)
   11ad4:	dd800615 	stw	r22,24(sp)
   11ad8:	dd400515 	stw	r21,20(sp)
   11adc:	dcc00315 	stw	r19,12(sp)
   11ae0:	dc800215 	stw	r18,8(sp)
   11ae4:	dc400115 	stw	r17,4(sp)
   11ae8:	dc000015 	stw	r16,0(sp)
   11aec:	2500b804 	addi	r20,r4,736
   11af0:	a0002326 	beq	r20,zero,11b80 <_fwalk+0xbc>
   11af4:	282b883a 	mov	r21,r5
   11af8:	002f883a 	mov	r23,zero
   11afc:	05800044 	movi	r22,1
   11b00:	04ffffc4 	movi	r19,-1
   11b04:	a4400117 	ldw	r17,4(r20)
   11b08:	a4800217 	ldw	r18,8(r20)
   11b0c:	8c7fffc4 	addi	r17,r17,-1
   11b10:	88000d16 	blt	r17,zero,11b48 <_fwalk+0x84>
   11b14:	94000304 	addi	r16,r18,12
   11b18:	94800384 	addi	r18,r18,14
   11b1c:	8080000b 	ldhu	r2,0(r16)
   11b20:	8c7fffc4 	addi	r17,r17,-1
   11b24:	813ffd04 	addi	r4,r16,-12
   11b28:	b080042e 	bgeu	r22,r2,11b3c <_fwalk+0x78>
   11b2c:	9080000f 	ldh	r2,0(r18)
   11b30:	14c00226 	beq	r2,r19,11b3c <_fwalk+0x78>
   11b34:	a83ee83a 	callr	r21
   11b38:	b8aeb03a 	or	r23,r23,r2
   11b3c:	84001a04 	addi	r16,r16,104
   11b40:	94801a04 	addi	r18,r18,104
   11b44:	8cfff51e 	bne	r17,r19,11b1c <__alt_data_end+0xfffd331c>
   11b48:	a5000017 	ldw	r20,0(r20)
   11b4c:	a03fed1e 	bne	r20,zero,11b04 <__alt_data_end+0xfffd3304>
   11b50:	b805883a 	mov	r2,r23
   11b54:	dfc00817 	ldw	ra,32(sp)
   11b58:	ddc00717 	ldw	r23,28(sp)
   11b5c:	dd800617 	ldw	r22,24(sp)
   11b60:	dd400517 	ldw	r21,20(sp)
   11b64:	dd000417 	ldw	r20,16(sp)
   11b68:	dcc00317 	ldw	r19,12(sp)
   11b6c:	dc800217 	ldw	r18,8(sp)
   11b70:	dc400117 	ldw	r17,4(sp)
   11b74:	dc000017 	ldw	r16,0(sp)
   11b78:	dec00904 	addi	sp,sp,36
   11b7c:	f800283a 	ret
   11b80:	002f883a 	mov	r23,zero
   11b84:	003ff206 	br	11b50 <__alt_data_end+0xfffd3350>

00011b88 <_fwalk_reent>:
   11b88:	defff704 	addi	sp,sp,-36
   11b8c:	dd000415 	stw	r20,16(sp)
   11b90:	dfc00815 	stw	ra,32(sp)
   11b94:	ddc00715 	stw	r23,28(sp)
   11b98:	dd800615 	stw	r22,24(sp)
   11b9c:	dd400515 	stw	r21,20(sp)
   11ba0:	dcc00315 	stw	r19,12(sp)
   11ba4:	dc800215 	stw	r18,8(sp)
   11ba8:	dc400115 	stw	r17,4(sp)
   11bac:	dc000015 	stw	r16,0(sp)
   11bb0:	2500b804 	addi	r20,r4,736
   11bb4:	a0002326 	beq	r20,zero,11c44 <_fwalk_reent+0xbc>
   11bb8:	282b883a 	mov	r21,r5
   11bbc:	2027883a 	mov	r19,r4
   11bc0:	002f883a 	mov	r23,zero
   11bc4:	05800044 	movi	r22,1
   11bc8:	04bfffc4 	movi	r18,-1
   11bcc:	a4400117 	ldw	r17,4(r20)
   11bd0:	a4000217 	ldw	r16,8(r20)
   11bd4:	8c7fffc4 	addi	r17,r17,-1
   11bd8:	88000c16 	blt	r17,zero,11c0c <_fwalk_reent+0x84>
   11bdc:	84000304 	addi	r16,r16,12
   11be0:	8080000b 	ldhu	r2,0(r16)
   11be4:	8c7fffc4 	addi	r17,r17,-1
   11be8:	817ffd04 	addi	r5,r16,-12
   11bec:	b080052e 	bgeu	r22,r2,11c04 <_fwalk_reent+0x7c>
   11bf0:	8080008f 	ldh	r2,2(r16)
   11bf4:	9809883a 	mov	r4,r19
   11bf8:	14800226 	beq	r2,r18,11c04 <_fwalk_reent+0x7c>
   11bfc:	a83ee83a 	callr	r21
   11c00:	b8aeb03a 	or	r23,r23,r2
   11c04:	84001a04 	addi	r16,r16,104
   11c08:	8cbff51e 	bne	r17,r18,11be0 <__alt_data_end+0xfffd33e0>
   11c0c:	a5000017 	ldw	r20,0(r20)
   11c10:	a03fee1e 	bne	r20,zero,11bcc <__alt_data_end+0xfffd33cc>
   11c14:	b805883a 	mov	r2,r23
   11c18:	dfc00817 	ldw	ra,32(sp)
   11c1c:	ddc00717 	ldw	r23,28(sp)
   11c20:	dd800617 	ldw	r22,24(sp)
   11c24:	dd400517 	ldw	r21,20(sp)
   11c28:	dd000417 	ldw	r20,16(sp)
   11c2c:	dcc00317 	ldw	r19,12(sp)
   11c30:	dc800217 	ldw	r18,8(sp)
   11c34:	dc400117 	ldw	r17,4(sp)
   11c38:	dc000017 	ldw	r16,0(sp)
   11c3c:	dec00904 	addi	sp,sp,36
   11c40:	f800283a 	ret
   11c44:	002f883a 	mov	r23,zero
   11c48:	003ff206 	br	11c14 <__alt_data_end+0xfffd3414>

00011c4c <__smakebuf_r>:
   11c4c:	2880030b 	ldhu	r2,12(r5)
   11c50:	10c0008c 	andi	r3,r2,2
   11c54:	1800411e 	bne	r3,zero,11d5c <__smakebuf_r+0x110>
   11c58:	deffec04 	addi	sp,sp,-80
   11c5c:	dc000f15 	stw	r16,60(sp)
   11c60:	2821883a 	mov	r16,r5
   11c64:	2940038f 	ldh	r5,14(r5)
   11c68:	dc401015 	stw	r17,64(sp)
   11c6c:	dfc01315 	stw	ra,76(sp)
   11c70:	dcc01215 	stw	r19,72(sp)
   11c74:	dc801115 	stw	r18,68(sp)
   11c78:	2023883a 	mov	r17,r4
   11c7c:	28001c16 	blt	r5,zero,11cf0 <__smakebuf_r+0xa4>
   11c80:	d80d883a 	mov	r6,sp
   11c84:	00115a00 	call	115a0 <_fstat_r>
   11c88:	10001816 	blt	r2,zero,11cec <__smakebuf_r+0xa0>
   11c8c:	d8800117 	ldw	r2,4(sp)
   11c90:	00e00014 	movui	r3,32768
   11c94:	10bc000c 	andi	r2,r2,61440
   11c98:	14c80020 	cmpeqi	r19,r2,8192
   11c9c:	10c03726 	beq	r2,r3,11d7c <__smakebuf_r+0x130>
   11ca0:	80c0030b 	ldhu	r3,12(r16)
   11ca4:	18c20014 	ori	r3,r3,2048
   11ca8:	80c0030d 	sth	r3,12(r16)
   11cac:	00c80004 	movi	r3,8192
   11cb0:	10c0521e 	bne	r2,r3,11dfc <__smakebuf_r+0x1b0>
   11cb4:	8140038f 	ldh	r5,14(r16)
   11cb8:	8809883a 	mov	r4,r17
   11cbc:	001909c0 	call	1909c <_isatty_r>
   11cc0:	10004c26 	beq	r2,zero,11df4 <__smakebuf_r+0x1a8>
   11cc4:	8080030b 	ldhu	r2,12(r16)
   11cc8:	80c010c4 	addi	r3,r16,67
   11ccc:	80c00015 	stw	r3,0(r16)
   11cd0:	10800054 	ori	r2,r2,1
   11cd4:	8080030d 	sth	r2,12(r16)
   11cd8:	00800044 	movi	r2,1
   11cdc:	80c00415 	stw	r3,16(r16)
   11ce0:	80800515 	stw	r2,20(r16)
   11ce4:	04810004 	movi	r18,1024
   11ce8:	00000706 	br	11d08 <__smakebuf_r+0xbc>
   11cec:	8080030b 	ldhu	r2,12(r16)
   11cf0:	10c0200c 	andi	r3,r2,128
   11cf4:	18001f1e 	bne	r3,zero,11d74 <__smakebuf_r+0x128>
   11cf8:	04810004 	movi	r18,1024
   11cfc:	10820014 	ori	r2,r2,2048
   11d00:	8080030d 	sth	r2,12(r16)
   11d04:	0027883a 	mov	r19,zero
   11d08:	900b883a 	mov	r5,r18
   11d0c:	8809883a 	mov	r4,r17
   11d10:	0011e300 	call	11e30 <_malloc_r>
   11d14:	10002c26 	beq	r2,zero,11dc8 <__smakebuf_r+0x17c>
   11d18:	80c0030b 	ldhu	r3,12(r16)
   11d1c:	01000074 	movhi	r4,1
   11d20:	2101ce04 	addi	r4,r4,1848
   11d24:	89000f15 	stw	r4,60(r17)
   11d28:	18c02014 	ori	r3,r3,128
   11d2c:	80c0030d 	sth	r3,12(r16)
   11d30:	80800015 	stw	r2,0(r16)
   11d34:	80800415 	stw	r2,16(r16)
   11d38:	84800515 	stw	r18,20(r16)
   11d3c:	98001a1e 	bne	r19,zero,11da8 <__smakebuf_r+0x15c>
   11d40:	dfc01317 	ldw	ra,76(sp)
   11d44:	dcc01217 	ldw	r19,72(sp)
   11d48:	dc801117 	ldw	r18,68(sp)
   11d4c:	dc401017 	ldw	r17,64(sp)
   11d50:	dc000f17 	ldw	r16,60(sp)
   11d54:	dec01404 	addi	sp,sp,80
   11d58:	f800283a 	ret
   11d5c:	288010c4 	addi	r2,r5,67
   11d60:	28800015 	stw	r2,0(r5)
   11d64:	28800415 	stw	r2,16(r5)
   11d68:	00800044 	movi	r2,1
   11d6c:	28800515 	stw	r2,20(r5)
   11d70:	f800283a 	ret
   11d74:	04801004 	movi	r18,64
   11d78:	003fe006 	br	11cfc <__alt_data_end+0xfffd34fc>
   11d7c:	81000a17 	ldw	r4,40(r16)
   11d80:	00c00074 	movhi	r3,1
   11d84:	18cd8804 	addi	r3,r3,13856
   11d88:	20ffc51e 	bne	r4,r3,11ca0 <__alt_data_end+0xfffd34a0>
   11d8c:	8080030b 	ldhu	r2,12(r16)
   11d90:	04810004 	movi	r18,1024
   11d94:	84801315 	stw	r18,76(r16)
   11d98:	1484b03a 	or	r2,r2,r18
   11d9c:	8080030d 	sth	r2,12(r16)
   11da0:	0027883a 	mov	r19,zero
   11da4:	003fd806 	br	11d08 <__alt_data_end+0xfffd3508>
   11da8:	8140038f 	ldh	r5,14(r16)
   11dac:	8809883a 	mov	r4,r17
   11db0:	001909c0 	call	1909c <_isatty_r>
   11db4:	103fe226 	beq	r2,zero,11d40 <__alt_data_end+0xfffd3540>
   11db8:	8080030b 	ldhu	r2,12(r16)
   11dbc:	10800054 	ori	r2,r2,1
   11dc0:	8080030d 	sth	r2,12(r16)
   11dc4:	003fde06 	br	11d40 <__alt_data_end+0xfffd3540>
   11dc8:	8080030b 	ldhu	r2,12(r16)
   11dcc:	10c0800c 	andi	r3,r2,512
   11dd0:	183fdb1e 	bne	r3,zero,11d40 <__alt_data_end+0xfffd3540>
   11dd4:	10800094 	ori	r2,r2,2
   11dd8:	80c010c4 	addi	r3,r16,67
   11ddc:	8080030d 	sth	r2,12(r16)
   11de0:	00800044 	movi	r2,1
   11de4:	80c00015 	stw	r3,0(r16)
   11de8:	80c00415 	stw	r3,16(r16)
   11dec:	80800515 	stw	r2,20(r16)
   11df0:	003fd306 	br	11d40 <__alt_data_end+0xfffd3540>
   11df4:	04810004 	movi	r18,1024
   11df8:	003fc306 	br	11d08 <__alt_data_end+0xfffd3508>
   11dfc:	0027883a 	mov	r19,zero
   11e00:	04810004 	movi	r18,1024
   11e04:	003fc006 	br	11d08 <__alt_data_end+0xfffd3508>

00011e08 <malloc>:
   11e08:	008000f4 	movhi	r2,3
   11e0c:	10a8a204 	addi	r2,r2,-23928
   11e10:	200b883a 	mov	r5,r4
   11e14:	11000017 	ldw	r4,0(r2)
   11e18:	0011e301 	jmpi	11e30 <_malloc_r>

00011e1c <free>:
   11e1c:	008000f4 	movhi	r2,3
   11e20:	10a8a204 	addi	r2,r2,-23928
   11e24:	200b883a 	mov	r5,r4
   11e28:	11000017 	ldw	r4,0(r2)
   11e2c:	0010e101 	jmpi	10e10 <_free_r>

00011e30 <_malloc_r>:
   11e30:	defff504 	addi	sp,sp,-44
   11e34:	dc800315 	stw	r18,12(sp)
   11e38:	dfc00a15 	stw	ra,40(sp)
   11e3c:	df000915 	stw	fp,36(sp)
   11e40:	ddc00815 	stw	r23,32(sp)
   11e44:	dd800715 	stw	r22,28(sp)
   11e48:	dd400615 	stw	r21,24(sp)
   11e4c:	dd000515 	stw	r20,20(sp)
   11e50:	dcc00415 	stw	r19,16(sp)
   11e54:	dc400215 	stw	r17,8(sp)
   11e58:	dc000115 	stw	r16,4(sp)
   11e5c:	288002c4 	addi	r2,r5,11
   11e60:	00c00584 	movi	r3,22
   11e64:	2025883a 	mov	r18,r4
   11e68:	18807f2e 	bgeu	r3,r2,12068 <_malloc_r+0x238>
   11e6c:	047ffe04 	movi	r17,-8
   11e70:	1462703a 	and	r17,r2,r17
   11e74:	8800a316 	blt	r17,zero,12104 <_malloc_r+0x2d4>
   11e78:	8940a236 	bltu	r17,r5,12104 <_malloc_r+0x2d4>
   11e7c:	00288cc0 	call	288cc <__malloc_lock>
   11e80:	00807dc4 	movi	r2,503
   11e84:	1441e92e 	bgeu	r2,r17,1262c <_malloc_r+0x7fc>
   11e88:	8804d27a 	srli	r2,r17,9
   11e8c:	1000a126 	beq	r2,zero,12114 <_malloc_r+0x2e4>
   11e90:	00c00104 	movi	r3,4
   11e94:	18811e36 	bltu	r3,r2,12310 <_malloc_r+0x4e0>
   11e98:	8804d1ba 	srli	r2,r17,6
   11e9c:	12000e44 	addi	r8,r2,57
   11ea0:	11c00e04 	addi	r7,r2,56
   11ea4:	4209883a 	add	r4,r8,r8
   11ea8:	04c000f4 	movhi	r19,3
   11eac:	2109883a 	add	r4,r4,r4
   11eb0:	9ce77e04 	addi	r19,r19,-25096
   11eb4:	2109883a 	add	r4,r4,r4
   11eb8:	9909883a 	add	r4,r19,r4
   11ebc:	24000117 	ldw	r16,4(r4)
   11ec0:	213ffe04 	addi	r4,r4,-8
   11ec4:	24009726 	beq	r4,r16,12124 <_malloc_r+0x2f4>
   11ec8:	80800117 	ldw	r2,4(r16)
   11ecc:	01bfff04 	movi	r6,-4
   11ed0:	014003c4 	movi	r5,15
   11ed4:	1184703a 	and	r2,r2,r6
   11ed8:	1447c83a 	sub	r3,r2,r17
   11edc:	28c00716 	blt	r5,r3,11efc <_malloc_r+0xcc>
   11ee0:	1800920e 	bge	r3,zero,1212c <_malloc_r+0x2fc>
   11ee4:	84000317 	ldw	r16,12(r16)
   11ee8:	24008e26 	beq	r4,r16,12124 <_malloc_r+0x2f4>
   11eec:	80800117 	ldw	r2,4(r16)
   11ef0:	1184703a 	and	r2,r2,r6
   11ef4:	1447c83a 	sub	r3,r2,r17
   11ef8:	28fff90e 	bge	r5,r3,11ee0 <__alt_data_end+0xfffd36e0>
   11efc:	3809883a 	mov	r4,r7
   11f00:	018000f4 	movhi	r6,3
   11f04:	9c000417 	ldw	r16,16(r19)
   11f08:	31a77e04 	addi	r6,r6,-25096
   11f0c:	32000204 	addi	r8,r6,8
   11f10:	82013426 	beq	r16,r8,123e4 <_malloc_r+0x5b4>
   11f14:	80c00117 	ldw	r3,4(r16)
   11f18:	00bfff04 	movi	r2,-4
   11f1c:	188e703a 	and	r7,r3,r2
   11f20:	3c45c83a 	sub	r2,r7,r17
   11f24:	00c003c4 	movi	r3,15
   11f28:	18811f16 	blt	r3,r2,123a8 <_malloc_r+0x578>
   11f2c:	32000515 	stw	r8,20(r6)
   11f30:	32000415 	stw	r8,16(r6)
   11f34:	10007f0e 	bge	r2,zero,12134 <_malloc_r+0x304>
   11f38:	00807fc4 	movi	r2,511
   11f3c:	11c0fd36 	bltu	r2,r7,12334 <_malloc_r+0x504>
   11f40:	3806d0fa 	srli	r3,r7,3
   11f44:	01c00044 	movi	r7,1
   11f48:	30800117 	ldw	r2,4(r6)
   11f4c:	19400044 	addi	r5,r3,1
   11f50:	294b883a 	add	r5,r5,r5
   11f54:	1807d0ba 	srai	r3,r3,2
   11f58:	294b883a 	add	r5,r5,r5
   11f5c:	294b883a 	add	r5,r5,r5
   11f60:	298b883a 	add	r5,r5,r6
   11f64:	38c6983a 	sll	r3,r7,r3
   11f68:	29c00017 	ldw	r7,0(r5)
   11f6c:	2a7ffe04 	addi	r9,r5,-8
   11f70:	1886b03a 	or	r3,r3,r2
   11f74:	82400315 	stw	r9,12(r16)
   11f78:	81c00215 	stw	r7,8(r16)
   11f7c:	30c00115 	stw	r3,4(r6)
   11f80:	2c000015 	stw	r16,0(r5)
   11f84:	3c000315 	stw	r16,12(r7)
   11f88:	2005d0ba 	srai	r2,r4,2
   11f8c:	01400044 	movi	r5,1
   11f90:	288a983a 	sll	r5,r5,r2
   11f94:	19406f36 	bltu	r3,r5,12154 <_malloc_r+0x324>
   11f98:	28c4703a 	and	r2,r5,r3
   11f9c:	10000a1e 	bne	r2,zero,11fc8 <_malloc_r+0x198>
   11fa0:	00bfff04 	movi	r2,-4
   11fa4:	294b883a 	add	r5,r5,r5
   11fa8:	2088703a 	and	r4,r4,r2
   11fac:	28c4703a 	and	r2,r5,r3
   11fb0:	21000104 	addi	r4,r4,4
   11fb4:	1000041e 	bne	r2,zero,11fc8 <_malloc_r+0x198>
   11fb8:	294b883a 	add	r5,r5,r5
   11fbc:	28c4703a 	and	r2,r5,r3
   11fc0:	21000104 	addi	r4,r4,4
   11fc4:	103ffc26 	beq	r2,zero,11fb8 <__alt_data_end+0xfffd37b8>
   11fc8:	02bfff04 	movi	r10,-4
   11fcc:	024003c4 	movi	r9,15
   11fd0:	21800044 	addi	r6,r4,1
   11fd4:	318d883a 	add	r6,r6,r6
   11fd8:	318d883a 	add	r6,r6,r6
   11fdc:	318d883a 	add	r6,r6,r6
   11fe0:	998d883a 	add	r6,r19,r6
   11fe4:	333ffe04 	addi	r12,r6,-8
   11fe8:	2017883a 	mov	r11,r4
   11fec:	31800104 	addi	r6,r6,4
   11ff0:	34000017 	ldw	r16,0(r6)
   11ff4:	31fffd04 	addi	r7,r6,-12
   11ff8:	81c0041e 	bne	r16,r7,1200c <_malloc_r+0x1dc>
   11ffc:	0000fb06 	br	123ec <_malloc_r+0x5bc>
   12000:	1801030e 	bge	r3,zero,12410 <_malloc_r+0x5e0>
   12004:	84000317 	ldw	r16,12(r16)
   12008:	81c0f826 	beq	r16,r7,123ec <_malloc_r+0x5bc>
   1200c:	80800117 	ldw	r2,4(r16)
   12010:	1284703a 	and	r2,r2,r10
   12014:	1447c83a 	sub	r3,r2,r17
   12018:	48fff90e 	bge	r9,r3,12000 <__alt_data_end+0xfffd3800>
   1201c:	80800317 	ldw	r2,12(r16)
   12020:	81000217 	ldw	r4,8(r16)
   12024:	89400054 	ori	r5,r17,1
   12028:	81400115 	stw	r5,4(r16)
   1202c:	20800315 	stw	r2,12(r4)
   12030:	11000215 	stw	r4,8(r2)
   12034:	8463883a 	add	r17,r16,r17
   12038:	9c400515 	stw	r17,20(r19)
   1203c:	9c400415 	stw	r17,16(r19)
   12040:	18800054 	ori	r2,r3,1
   12044:	88800115 	stw	r2,4(r17)
   12048:	8a000315 	stw	r8,12(r17)
   1204c:	8a000215 	stw	r8,8(r17)
   12050:	88e3883a 	add	r17,r17,r3
   12054:	88c00015 	stw	r3,0(r17)
   12058:	9009883a 	mov	r4,r18
   1205c:	00288d00 	call	288d0 <__malloc_unlock>
   12060:	80800204 	addi	r2,r16,8
   12064:	00001b06 	br	120d4 <_malloc_r+0x2a4>
   12068:	04400404 	movi	r17,16
   1206c:	89402536 	bltu	r17,r5,12104 <_malloc_r+0x2d4>
   12070:	00288cc0 	call	288cc <__malloc_lock>
   12074:	00800184 	movi	r2,6
   12078:	01000084 	movi	r4,2
   1207c:	04c000f4 	movhi	r19,3
   12080:	1085883a 	add	r2,r2,r2
   12084:	9ce77e04 	addi	r19,r19,-25096
   12088:	1085883a 	add	r2,r2,r2
   1208c:	9885883a 	add	r2,r19,r2
   12090:	14000117 	ldw	r16,4(r2)
   12094:	10fffe04 	addi	r3,r2,-8
   12098:	80c0d926 	beq	r16,r3,12400 <_malloc_r+0x5d0>
   1209c:	80c00117 	ldw	r3,4(r16)
   120a0:	81000317 	ldw	r4,12(r16)
   120a4:	00bfff04 	movi	r2,-4
   120a8:	1884703a 	and	r2,r3,r2
   120ac:	81400217 	ldw	r5,8(r16)
   120b0:	8085883a 	add	r2,r16,r2
   120b4:	10c00117 	ldw	r3,4(r2)
   120b8:	29000315 	stw	r4,12(r5)
   120bc:	21400215 	stw	r5,8(r4)
   120c0:	18c00054 	ori	r3,r3,1
   120c4:	10c00115 	stw	r3,4(r2)
   120c8:	9009883a 	mov	r4,r18
   120cc:	00288d00 	call	288d0 <__malloc_unlock>
   120d0:	80800204 	addi	r2,r16,8
   120d4:	dfc00a17 	ldw	ra,40(sp)
   120d8:	df000917 	ldw	fp,36(sp)
   120dc:	ddc00817 	ldw	r23,32(sp)
   120e0:	dd800717 	ldw	r22,28(sp)
   120e4:	dd400617 	ldw	r21,24(sp)
   120e8:	dd000517 	ldw	r20,20(sp)
   120ec:	dcc00417 	ldw	r19,16(sp)
   120f0:	dc800317 	ldw	r18,12(sp)
   120f4:	dc400217 	ldw	r17,8(sp)
   120f8:	dc000117 	ldw	r16,4(sp)
   120fc:	dec00b04 	addi	sp,sp,44
   12100:	f800283a 	ret
   12104:	00800304 	movi	r2,12
   12108:	90800015 	stw	r2,0(r18)
   1210c:	0005883a 	mov	r2,zero
   12110:	003ff006 	br	120d4 <__alt_data_end+0xfffd38d4>
   12114:	01002004 	movi	r4,128
   12118:	02001004 	movi	r8,64
   1211c:	01c00fc4 	movi	r7,63
   12120:	003f6106 	br	11ea8 <__alt_data_end+0xfffd36a8>
   12124:	4009883a 	mov	r4,r8
   12128:	003f7506 	br	11f00 <__alt_data_end+0xfffd3700>
   1212c:	81000317 	ldw	r4,12(r16)
   12130:	003fde06 	br	120ac <__alt_data_end+0xfffd38ac>
   12134:	81c5883a 	add	r2,r16,r7
   12138:	11400117 	ldw	r5,4(r2)
   1213c:	9009883a 	mov	r4,r18
   12140:	29400054 	ori	r5,r5,1
   12144:	11400115 	stw	r5,4(r2)
   12148:	00288d00 	call	288d0 <__malloc_unlock>
   1214c:	80800204 	addi	r2,r16,8
   12150:	003fe006 	br	120d4 <__alt_data_end+0xfffd38d4>
   12154:	9c000217 	ldw	r16,8(r19)
   12158:	00bfff04 	movi	r2,-4
   1215c:	85800117 	ldw	r22,4(r16)
   12160:	b0ac703a 	and	r22,r22,r2
   12164:	b4400336 	bltu	r22,r17,12174 <_malloc_r+0x344>
   12168:	b445c83a 	sub	r2,r22,r17
   1216c:	00c003c4 	movi	r3,15
   12170:	18805d16 	blt	r3,r2,122e8 <_malloc_r+0x4b8>
   12174:	05c000f4 	movhi	r23,3
   12178:	008000f4 	movhi	r2,3
   1217c:	10aaf004 	addi	r2,r2,-21568
   12180:	bde8a304 	addi	r23,r23,-23924
   12184:	15400017 	ldw	r21,0(r2)
   12188:	b8c00017 	ldw	r3,0(r23)
   1218c:	00bfffc4 	movi	r2,-1
   12190:	858d883a 	add	r6,r16,r22
   12194:	8d6b883a 	add	r21,r17,r21
   12198:	1880ea26 	beq	r3,r2,12544 <_malloc_r+0x714>
   1219c:	ad4403c4 	addi	r21,r21,4111
   121a0:	00bc0004 	movi	r2,-4096
   121a4:	a8aa703a 	and	r21,r21,r2
   121a8:	a80b883a 	mov	r5,r21
   121ac:	9009883a 	mov	r4,r18
   121b0:	d9800015 	stw	r6,0(sp)
   121b4:	00134000 	call	13400 <_sbrk_r>
   121b8:	1029883a 	mov	r20,r2
   121bc:	00bfffc4 	movi	r2,-1
   121c0:	d9800017 	ldw	r6,0(sp)
   121c4:	a080e826 	beq	r20,r2,12568 <_malloc_r+0x738>
   121c8:	a180a636 	bltu	r20,r6,12464 <_malloc_r+0x634>
   121cc:	070000f4 	movhi	fp,3
   121d0:	e72aff04 	addi	fp,fp,-21508
   121d4:	e0800017 	ldw	r2,0(fp)
   121d8:	a887883a 	add	r3,r21,r2
   121dc:	e0c00015 	stw	r3,0(fp)
   121e0:	3500e626 	beq	r6,r20,1257c <_malloc_r+0x74c>
   121e4:	b9000017 	ldw	r4,0(r23)
   121e8:	00bfffc4 	movi	r2,-1
   121ec:	2080ee26 	beq	r4,r2,125a8 <_malloc_r+0x778>
   121f0:	a185c83a 	sub	r2,r20,r6
   121f4:	10c5883a 	add	r2,r2,r3
   121f8:	e0800015 	stw	r2,0(fp)
   121fc:	a0c001cc 	andi	r3,r20,7
   12200:	1800bc26 	beq	r3,zero,124f4 <_malloc_r+0x6c4>
   12204:	a0e9c83a 	sub	r20,r20,r3
   12208:	00840204 	movi	r2,4104
   1220c:	a5000204 	addi	r20,r20,8
   12210:	10c7c83a 	sub	r3,r2,r3
   12214:	a545883a 	add	r2,r20,r21
   12218:	1083ffcc 	andi	r2,r2,4095
   1221c:	18abc83a 	sub	r21,r3,r2
   12220:	a80b883a 	mov	r5,r21
   12224:	9009883a 	mov	r4,r18
   12228:	00134000 	call	13400 <_sbrk_r>
   1222c:	00ffffc4 	movi	r3,-1
   12230:	10c0e126 	beq	r2,r3,125b8 <_malloc_r+0x788>
   12234:	1505c83a 	sub	r2,r2,r20
   12238:	1545883a 	add	r2,r2,r21
   1223c:	10800054 	ori	r2,r2,1
   12240:	e0c00017 	ldw	r3,0(fp)
   12244:	9d000215 	stw	r20,8(r19)
   12248:	a0800115 	stw	r2,4(r20)
   1224c:	a8c7883a 	add	r3,r21,r3
   12250:	e0c00015 	stw	r3,0(fp)
   12254:	84c00e26 	beq	r16,r19,12290 <_malloc_r+0x460>
   12258:	018003c4 	movi	r6,15
   1225c:	3580a72e 	bgeu	r6,r22,124fc <_malloc_r+0x6cc>
   12260:	81400117 	ldw	r5,4(r16)
   12264:	013ffe04 	movi	r4,-8
   12268:	b0bffd04 	addi	r2,r22,-12
   1226c:	1104703a 	and	r2,r2,r4
   12270:	2900004c 	andi	r4,r5,1
   12274:	2088b03a 	or	r4,r4,r2
   12278:	81000115 	stw	r4,4(r16)
   1227c:	01400144 	movi	r5,5
   12280:	8089883a 	add	r4,r16,r2
   12284:	21400115 	stw	r5,4(r4)
   12288:	21400215 	stw	r5,8(r4)
   1228c:	3080cd36 	bltu	r6,r2,125c4 <_malloc_r+0x794>
   12290:	008000f4 	movhi	r2,3
   12294:	10aaef04 	addi	r2,r2,-21572
   12298:	11000017 	ldw	r4,0(r2)
   1229c:	20c0012e 	bgeu	r4,r3,122a4 <_malloc_r+0x474>
   122a0:	10c00015 	stw	r3,0(r2)
   122a4:	008000f4 	movhi	r2,3
   122a8:	10aaee04 	addi	r2,r2,-21576
   122ac:	11000017 	ldw	r4,0(r2)
   122b0:	9c000217 	ldw	r16,8(r19)
   122b4:	20c0012e 	bgeu	r4,r3,122bc <_malloc_r+0x48c>
   122b8:	10c00015 	stw	r3,0(r2)
   122bc:	80c00117 	ldw	r3,4(r16)
   122c0:	00bfff04 	movi	r2,-4
   122c4:	1886703a 	and	r3,r3,r2
   122c8:	1c45c83a 	sub	r2,r3,r17
   122cc:	1c400236 	bltu	r3,r17,122d8 <_malloc_r+0x4a8>
   122d0:	00c003c4 	movi	r3,15
   122d4:	18800416 	blt	r3,r2,122e8 <_malloc_r+0x4b8>
   122d8:	9009883a 	mov	r4,r18
   122dc:	00288d00 	call	288d0 <__malloc_unlock>
   122e0:	0005883a 	mov	r2,zero
   122e4:	003f7b06 	br	120d4 <__alt_data_end+0xfffd38d4>
   122e8:	88c00054 	ori	r3,r17,1
   122ec:	80c00115 	stw	r3,4(r16)
   122f0:	8463883a 	add	r17,r16,r17
   122f4:	10800054 	ori	r2,r2,1
   122f8:	9c400215 	stw	r17,8(r19)
   122fc:	88800115 	stw	r2,4(r17)
   12300:	9009883a 	mov	r4,r18
   12304:	00288d00 	call	288d0 <__malloc_unlock>
   12308:	80800204 	addi	r2,r16,8
   1230c:	003f7106 	br	120d4 <__alt_data_end+0xfffd38d4>
   12310:	00c00504 	movi	r3,20
   12314:	18804a2e 	bgeu	r3,r2,12440 <_malloc_r+0x610>
   12318:	00c01504 	movi	r3,84
   1231c:	18806e36 	bltu	r3,r2,124d8 <_malloc_r+0x6a8>
   12320:	8804d33a 	srli	r2,r17,12
   12324:	12001bc4 	addi	r8,r2,111
   12328:	11c01b84 	addi	r7,r2,110
   1232c:	4209883a 	add	r4,r8,r8
   12330:	003edd06 	br	11ea8 <__alt_data_end+0xfffd36a8>
   12334:	3804d27a 	srli	r2,r7,9
   12338:	00c00104 	movi	r3,4
   1233c:	1880442e 	bgeu	r3,r2,12450 <_malloc_r+0x620>
   12340:	00c00504 	movi	r3,20
   12344:	18808136 	bltu	r3,r2,1254c <_malloc_r+0x71c>
   12348:	11401704 	addi	r5,r2,92
   1234c:	10c016c4 	addi	r3,r2,91
   12350:	294b883a 	add	r5,r5,r5
   12354:	294b883a 	add	r5,r5,r5
   12358:	294b883a 	add	r5,r5,r5
   1235c:	994b883a 	add	r5,r19,r5
   12360:	28800017 	ldw	r2,0(r5)
   12364:	018000f4 	movhi	r6,3
   12368:	297ffe04 	addi	r5,r5,-8
   1236c:	31a77e04 	addi	r6,r6,-25096
   12370:	28806526 	beq	r5,r2,12508 <_malloc_r+0x6d8>
   12374:	01bfff04 	movi	r6,-4
   12378:	10c00117 	ldw	r3,4(r2)
   1237c:	1986703a 	and	r3,r3,r6
   12380:	38c0022e 	bgeu	r7,r3,1238c <_malloc_r+0x55c>
   12384:	10800217 	ldw	r2,8(r2)
   12388:	28bffb1e 	bne	r5,r2,12378 <__alt_data_end+0xfffd3b78>
   1238c:	11400317 	ldw	r5,12(r2)
   12390:	98c00117 	ldw	r3,4(r19)
   12394:	81400315 	stw	r5,12(r16)
   12398:	80800215 	stw	r2,8(r16)
   1239c:	2c000215 	stw	r16,8(r5)
   123a0:	14000315 	stw	r16,12(r2)
   123a4:	003ef806 	br	11f88 <__alt_data_end+0xfffd3788>
   123a8:	88c00054 	ori	r3,r17,1
   123ac:	80c00115 	stw	r3,4(r16)
   123b0:	8463883a 	add	r17,r16,r17
   123b4:	34400515 	stw	r17,20(r6)
   123b8:	34400415 	stw	r17,16(r6)
   123bc:	10c00054 	ori	r3,r2,1
   123c0:	8a000315 	stw	r8,12(r17)
   123c4:	8a000215 	stw	r8,8(r17)
   123c8:	88c00115 	stw	r3,4(r17)
   123cc:	88a3883a 	add	r17,r17,r2
   123d0:	88800015 	stw	r2,0(r17)
   123d4:	9009883a 	mov	r4,r18
   123d8:	00288d00 	call	288d0 <__malloc_unlock>
   123dc:	80800204 	addi	r2,r16,8
   123e0:	003f3c06 	br	120d4 <__alt_data_end+0xfffd38d4>
   123e4:	30c00117 	ldw	r3,4(r6)
   123e8:	003ee706 	br	11f88 <__alt_data_end+0xfffd3788>
   123ec:	5ac00044 	addi	r11,r11,1
   123f0:	588000cc 	andi	r2,r11,3
   123f4:	31800204 	addi	r6,r6,8
   123f8:	103efd1e 	bne	r2,zero,11ff0 <__alt_data_end+0xfffd37f0>
   123fc:	00002406 	br	12490 <_malloc_r+0x660>
   12400:	14000317 	ldw	r16,12(r2)
   12404:	143f251e 	bne	r2,r16,1209c <__alt_data_end+0xfffd389c>
   12408:	21000084 	addi	r4,r4,2
   1240c:	003ebc06 	br	11f00 <__alt_data_end+0xfffd3700>
   12410:	8085883a 	add	r2,r16,r2
   12414:	10c00117 	ldw	r3,4(r2)
   12418:	81000317 	ldw	r4,12(r16)
   1241c:	81400217 	ldw	r5,8(r16)
   12420:	18c00054 	ori	r3,r3,1
   12424:	10c00115 	stw	r3,4(r2)
   12428:	29000315 	stw	r4,12(r5)
   1242c:	21400215 	stw	r5,8(r4)
   12430:	9009883a 	mov	r4,r18
   12434:	00288d00 	call	288d0 <__malloc_unlock>
   12438:	80800204 	addi	r2,r16,8
   1243c:	003f2506 	br	120d4 <__alt_data_end+0xfffd38d4>
   12440:	12001704 	addi	r8,r2,92
   12444:	11c016c4 	addi	r7,r2,91
   12448:	4209883a 	add	r4,r8,r8
   1244c:	003e9606 	br	11ea8 <__alt_data_end+0xfffd36a8>
   12450:	3804d1ba 	srli	r2,r7,6
   12454:	11400e44 	addi	r5,r2,57
   12458:	10c00e04 	addi	r3,r2,56
   1245c:	294b883a 	add	r5,r5,r5
   12460:	003fbc06 	br	12354 <__alt_data_end+0xfffd3b54>
   12464:	84ff5926 	beq	r16,r19,121cc <__alt_data_end+0xfffd39cc>
   12468:	008000f4 	movhi	r2,3
   1246c:	10a77e04 	addi	r2,r2,-25096
   12470:	14000217 	ldw	r16,8(r2)
   12474:	00bfff04 	movi	r2,-4
   12478:	80c00117 	ldw	r3,4(r16)
   1247c:	1886703a 	and	r3,r3,r2
   12480:	003f9106 	br	122c8 <__alt_data_end+0xfffd3ac8>
   12484:	60800217 	ldw	r2,8(r12)
   12488:	213fffc4 	addi	r4,r4,-1
   1248c:	1300651e 	bne	r2,r12,12624 <_malloc_r+0x7f4>
   12490:	208000cc 	andi	r2,r4,3
   12494:	633ffe04 	addi	r12,r12,-8
   12498:	103ffa1e 	bne	r2,zero,12484 <__alt_data_end+0xfffd3c84>
   1249c:	98800117 	ldw	r2,4(r19)
   124a0:	0146303a 	nor	r3,zero,r5
   124a4:	1884703a 	and	r2,r3,r2
   124a8:	98800115 	stw	r2,4(r19)
   124ac:	294b883a 	add	r5,r5,r5
   124b0:	117f2836 	bltu	r2,r5,12154 <__alt_data_end+0xfffd3954>
   124b4:	283f2726 	beq	r5,zero,12154 <__alt_data_end+0xfffd3954>
   124b8:	2886703a 	and	r3,r5,r2
   124bc:	5809883a 	mov	r4,r11
   124c0:	183ec31e 	bne	r3,zero,11fd0 <__alt_data_end+0xfffd37d0>
   124c4:	294b883a 	add	r5,r5,r5
   124c8:	2886703a 	and	r3,r5,r2
   124cc:	21000104 	addi	r4,r4,4
   124d0:	183ffc26 	beq	r3,zero,124c4 <__alt_data_end+0xfffd3cc4>
   124d4:	003ebe06 	br	11fd0 <__alt_data_end+0xfffd37d0>
   124d8:	00c05504 	movi	r3,340
   124dc:	18801236 	bltu	r3,r2,12528 <_malloc_r+0x6f8>
   124e0:	8804d3fa 	srli	r2,r17,15
   124e4:	12001e04 	addi	r8,r2,120
   124e8:	11c01dc4 	addi	r7,r2,119
   124ec:	4209883a 	add	r4,r8,r8
   124f0:	003e6d06 	br	11ea8 <__alt_data_end+0xfffd36a8>
   124f4:	00c40004 	movi	r3,4096
   124f8:	003f4606 	br	12214 <__alt_data_end+0xfffd3a14>
   124fc:	00800044 	movi	r2,1
   12500:	a0800115 	stw	r2,4(r20)
   12504:	003f7406 	br	122d8 <__alt_data_end+0xfffd3ad8>
   12508:	1805d0ba 	srai	r2,r3,2
   1250c:	01c00044 	movi	r7,1
   12510:	30c00117 	ldw	r3,4(r6)
   12514:	388e983a 	sll	r7,r7,r2
   12518:	2805883a 	mov	r2,r5
   1251c:	38c6b03a 	or	r3,r7,r3
   12520:	30c00115 	stw	r3,4(r6)
   12524:	003f9b06 	br	12394 <__alt_data_end+0xfffd3b94>
   12528:	00c15504 	movi	r3,1364
   1252c:	18801a36 	bltu	r3,r2,12598 <_malloc_r+0x768>
   12530:	8804d4ba 	srli	r2,r17,18
   12534:	12001f44 	addi	r8,r2,125
   12538:	11c01f04 	addi	r7,r2,124
   1253c:	4209883a 	add	r4,r8,r8
   12540:	003e5906 	br	11ea8 <__alt_data_end+0xfffd36a8>
   12544:	ad400404 	addi	r21,r21,16
   12548:	003f1706 	br	121a8 <__alt_data_end+0xfffd39a8>
   1254c:	00c01504 	movi	r3,84
   12550:	18802336 	bltu	r3,r2,125e0 <_malloc_r+0x7b0>
   12554:	3804d33a 	srli	r2,r7,12
   12558:	11401bc4 	addi	r5,r2,111
   1255c:	10c01b84 	addi	r3,r2,110
   12560:	294b883a 	add	r5,r5,r5
   12564:	003f7b06 	br	12354 <__alt_data_end+0xfffd3b54>
   12568:	9c000217 	ldw	r16,8(r19)
   1256c:	00bfff04 	movi	r2,-4
   12570:	80c00117 	ldw	r3,4(r16)
   12574:	1886703a 	and	r3,r3,r2
   12578:	003f5306 	br	122c8 <__alt_data_end+0xfffd3ac8>
   1257c:	3083ffcc 	andi	r2,r6,4095
   12580:	103f181e 	bne	r2,zero,121e4 <__alt_data_end+0xfffd39e4>
   12584:	99000217 	ldw	r4,8(r19)
   12588:	b545883a 	add	r2,r22,r21
   1258c:	10800054 	ori	r2,r2,1
   12590:	20800115 	stw	r2,4(r4)
   12594:	003f3e06 	br	12290 <__alt_data_end+0xfffd3a90>
   12598:	01003f84 	movi	r4,254
   1259c:	02001fc4 	movi	r8,127
   125a0:	01c01f84 	movi	r7,126
   125a4:	003e4006 	br	11ea8 <__alt_data_end+0xfffd36a8>
   125a8:	008000f4 	movhi	r2,3
   125ac:	10a8a304 	addi	r2,r2,-23924
   125b0:	15000015 	stw	r20,0(r2)
   125b4:	003f1106 	br	121fc <__alt_data_end+0xfffd39fc>
   125b8:	00800044 	movi	r2,1
   125bc:	002b883a 	mov	r21,zero
   125c0:	003f1f06 	br	12240 <__alt_data_end+0xfffd3a40>
   125c4:	81400204 	addi	r5,r16,8
   125c8:	9009883a 	mov	r4,r18
   125cc:	0010e100 	call	10e10 <_free_r>
   125d0:	008000f4 	movhi	r2,3
   125d4:	10aaff04 	addi	r2,r2,-21508
   125d8:	10c00017 	ldw	r3,0(r2)
   125dc:	003f2c06 	br	12290 <__alt_data_end+0xfffd3a90>
   125e0:	00c05504 	movi	r3,340
   125e4:	18800536 	bltu	r3,r2,125fc <_malloc_r+0x7cc>
   125e8:	3804d3fa 	srli	r2,r7,15
   125ec:	11401e04 	addi	r5,r2,120
   125f0:	10c01dc4 	addi	r3,r2,119
   125f4:	294b883a 	add	r5,r5,r5
   125f8:	003f5606 	br	12354 <__alt_data_end+0xfffd3b54>
   125fc:	00c15504 	movi	r3,1364
   12600:	18800536 	bltu	r3,r2,12618 <_malloc_r+0x7e8>
   12604:	3804d4ba 	srli	r2,r7,18
   12608:	11401f44 	addi	r5,r2,125
   1260c:	10c01f04 	addi	r3,r2,124
   12610:	294b883a 	add	r5,r5,r5
   12614:	003f4f06 	br	12354 <__alt_data_end+0xfffd3b54>
   12618:	01403f84 	movi	r5,254
   1261c:	00c01f84 	movi	r3,126
   12620:	003f4c06 	br	12354 <__alt_data_end+0xfffd3b54>
   12624:	98800117 	ldw	r2,4(r19)
   12628:	003fa006 	br	124ac <__alt_data_end+0xfffd3cac>
   1262c:	8808d0fa 	srli	r4,r17,3
   12630:	20800044 	addi	r2,r4,1
   12634:	1085883a 	add	r2,r2,r2
   12638:	003e9006 	br	1207c <__alt_data_end+0xfffd387c>

0001263c <memchr>:
   1263c:	208000cc 	andi	r2,r4,3
   12640:	280f883a 	mov	r7,r5
   12644:	10003426 	beq	r2,zero,12718 <memchr+0xdc>
   12648:	30bfffc4 	addi	r2,r6,-1
   1264c:	30001a26 	beq	r6,zero,126b8 <memchr+0x7c>
   12650:	20c00003 	ldbu	r3,0(r4)
   12654:	29803fcc 	andi	r6,r5,255
   12658:	30c0051e 	bne	r6,r3,12670 <memchr+0x34>
   1265c:	00001806 	br	126c0 <memchr+0x84>
   12660:	10001526 	beq	r2,zero,126b8 <memchr+0x7c>
   12664:	20c00003 	ldbu	r3,0(r4)
   12668:	10bfffc4 	addi	r2,r2,-1
   1266c:	30c01426 	beq	r6,r3,126c0 <memchr+0x84>
   12670:	21000044 	addi	r4,r4,1
   12674:	20c000cc 	andi	r3,r4,3
   12678:	183ff91e 	bne	r3,zero,12660 <__alt_data_end+0xfffd3e60>
   1267c:	020000c4 	movi	r8,3
   12680:	40801136 	bltu	r8,r2,126c8 <memchr+0x8c>
   12684:	10000c26 	beq	r2,zero,126b8 <memchr+0x7c>
   12688:	20c00003 	ldbu	r3,0(r4)
   1268c:	29403fcc 	andi	r5,r5,255
   12690:	28c00b26 	beq	r5,r3,126c0 <memchr+0x84>
   12694:	20c00044 	addi	r3,r4,1
   12698:	39803fcc 	andi	r6,r7,255
   1269c:	2089883a 	add	r4,r4,r2
   126a0:	00000306 	br	126b0 <memchr+0x74>
   126a4:	18c00044 	addi	r3,r3,1
   126a8:	197fffc3 	ldbu	r5,-1(r3)
   126ac:	31400526 	beq	r6,r5,126c4 <memchr+0x88>
   126b0:	1805883a 	mov	r2,r3
   126b4:	20fffb1e 	bne	r4,r3,126a4 <__alt_data_end+0xfffd3ea4>
   126b8:	0005883a 	mov	r2,zero
   126bc:	f800283a 	ret
   126c0:	2005883a 	mov	r2,r4
   126c4:	f800283a 	ret
   126c8:	28c03fcc 	andi	r3,r5,255
   126cc:	1812923a 	slli	r9,r3,8
   126d0:	02ffbff4 	movhi	r11,65279
   126d4:	02a02074 	movhi	r10,32897
   126d8:	48d2b03a 	or	r9,r9,r3
   126dc:	4806943a 	slli	r3,r9,16
   126e0:	5affbfc4 	addi	r11,r11,-257
   126e4:	52a02004 	addi	r10,r10,-32640
   126e8:	48d2b03a 	or	r9,r9,r3
   126ec:	20c00017 	ldw	r3,0(r4)
   126f0:	48c6f03a 	xor	r3,r9,r3
   126f4:	1acd883a 	add	r6,r3,r11
   126f8:	00c6303a 	nor	r3,zero,r3
   126fc:	30c6703a 	and	r3,r6,r3
   12700:	1a86703a 	and	r3,r3,r10
   12704:	183fe01e 	bne	r3,zero,12688 <__alt_data_end+0xfffd3e88>
   12708:	10bfff04 	addi	r2,r2,-4
   1270c:	21000104 	addi	r4,r4,4
   12710:	40bff636 	bltu	r8,r2,126ec <__alt_data_end+0xfffd3eec>
   12714:	003fdb06 	br	12684 <__alt_data_end+0xfffd3e84>
   12718:	3005883a 	mov	r2,r6
   1271c:	003fd706 	br	1267c <__alt_data_end+0xfffd3e7c>

00012720 <memcpy>:
   12720:	defffd04 	addi	sp,sp,-12
   12724:	dfc00215 	stw	ra,8(sp)
   12728:	dc400115 	stw	r17,4(sp)
   1272c:	dc000015 	stw	r16,0(sp)
   12730:	00c003c4 	movi	r3,15
   12734:	2005883a 	mov	r2,r4
   12738:	1980452e 	bgeu	r3,r6,12850 <memcpy+0x130>
   1273c:	2906b03a 	or	r3,r5,r4
   12740:	18c000cc 	andi	r3,r3,3
   12744:	1800441e 	bne	r3,zero,12858 <memcpy+0x138>
   12748:	347ffc04 	addi	r17,r6,-16
   1274c:	8822d13a 	srli	r17,r17,4
   12750:	28c00104 	addi	r3,r5,4
   12754:	23400104 	addi	r13,r4,4
   12758:	8820913a 	slli	r16,r17,4
   1275c:	2b000204 	addi	r12,r5,8
   12760:	22c00204 	addi	r11,r4,8
   12764:	84000504 	addi	r16,r16,20
   12768:	2a800304 	addi	r10,r5,12
   1276c:	22400304 	addi	r9,r4,12
   12770:	2c21883a 	add	r16,r5,r16
   12774:	2811883a 	mov	r8,r5
   12778:	200f883a 	mov	r7,r4
   1277c:	41000017 	ldw	r4,0(r8)
   12780:	1fc00017 	ldw	ra,0(r3)
   12784:	63c00017 	ldw	r15,0(r12)
   12788:	39000015 	stw	r4,0(r7)
   1278c:	53800017 	ldw	r14,0(r10)
   12790:	6fc00015 	stw	ra,0(r13)
   12794:	5bc00015 	stw	r15,0(r11)
   12798:	4b800015 	stw	r14,0(r9)
   1279c:	18c00404 	addi	r3,r3,16
   127a0:	39c00404 	addi	r7,r7,16
   127a4:	42000404 	addi	r8,r8,16
   127a8:	6b400404 	addi	r13,r13,16
   127ac:	63000404 	addi	r12,r12,16
   127b0:	5ac00404 	addi	r11,r11,16
   127b4:	52800404 	addi	r10,r10,16
   127b8:	4a400404 	addi	r9,r9,16
   127bc:	1c3fef1e 	bne	r3,r16,1277c <__alt_data_end+0xfffd3f7c>
   127c0:	89c00044 	addi	r7,r17,1
   127c4:	380e913a 	slli	r7,r7,4
   127c8:	310003cc 	andi	r4,r6,15
   127cc:	02c000c4 	movi	r11,3
   127d0:	11c7883a 	add	r3,r2,r7
   127d4:	29cb883a 	add	r5,r5,r7
   127d8:	5900212e 	bgeu	r11,r4,12860 <memcpy+0x140>
   127dc:	1813883a 	mov	r9,r3
   127e0:	2811883a 	mov	r8,r5
   127e4:	200f883a 	mov	r7,r4
   127e8:	42800017 	ldw	r10,0(r8)
   127ec:	4a400104 	addi	r9,r9,4
   127f0:	39ffff04 	addi	r7,r7,-4
   127f4:	4abfff15 	stw	r10,-4(r9)
   127f8:	42000104 	addi	r8,r8,4
   127fc:	59fffa36 	bltu	r11,r7,127e8 <__alt_data_end+0xfffd3fe8>
   12800:	213fff04 	addi	r4,r4,-4
   12804:	2008d0ba 	srli	r4,r4,2
   12808:	318000cc 	andi	r6,r6,3
   1280c:	21000044 	addi	r4,r4,1
   12810:	2109883a 	add	r4,r4,r4
   12814:	2109883a 	add	r4,r4,r4
   12818:	1907883a 	add	r3,r3,r4
   1281c:	290b883a 	add	r5,r5,r4
   12820:	30000626 	beq	r6,zero,1283c <memcpy+0x11c>
   12824:	198d883a 	add	r6,r3,r6
   12828:	29c00003 	ldbu	r7,0(r5)
   1282c:	18c00044 	addi	r3,r3,1
   12830:	29400044 	addi	r5,r5,1
   12834:	19ffffc5 	stb	r7,-1(r3)
   12838:	19bffb1e 	bne	r3,r6,12828 <__alt_data_end+0xfffd4028>
   1283c:	dfc00217 	ldw	ra,8(sp)
   12840:	dc400117 	ldw	r17,4(sp)
   12844:	dc000017 	ldw	r16,0(sp)
   12848:	dec00304 	addi	sp,sp,12
   1284c:	f800283a 	ret
   12850:	2007883a 	mov	r3,r4
   12854:	003ff206 	br	12820 <__alt_data_end+0xfffd4020>
   12858:	2007883a 	mov	r3,r4
   1285c:	003ff106 	br	12824 <__alt_data_end+0xfffd4024>
   12860:	200d883a 	mov	r6,r4
   12864:	003fee06 	br	12820 <__alt_data_end+0xfffd4020>

00012868 <memmove>:
   12868:	2005883a 	mov	r2,r4
   1286c:	29000b2e 	bgeu	r5,r4,1289c <memmove+0x34>
   12870:	298f883a 	add	r7,r5,r6
   12874:	21c0092e 	bgeu	r4,r7,1289c <memmove+0x34>
   12878:	2187883a 	add	r3,r4,r6
   1287c:	198bc83a 	sub	r5,r3,r6
   12880:	30004826 	beq	r6,zero,129a4 <memmove+0x13c>
   12884:	39ffffc4 	addi	r7,r7,-1
   12888:	39000003 	ldbu	r4,0(r7)
   1288c:	18ffffc4 	addi	r3,r3,-1
   12890:	19000005 	stb	r4,0(r3)
   12894:	28fffb1e 	bne	r5,r3,12884 <__alt_data_end+0xfffd4084>
   12898:	f800283a 	ret
   1289c:	00c003c4 	movi	r3,15
   128a0:	1980412e 	bgeu	r3,r6,129a8 <memmove+0x140>
   128a4:	2886b03a 	or	r3,r5,r2
   128a8:	18c000cc 	andi	r3,r3,3
   128ac:	1800401e 	bne	r3,zero,129b0 <memmove+0x148>
   128b0:	33fffc04 	addi	r15,r6,-16
   128b4:	781ed13a 	srli	r15,r15,4
   128b8:	28c00104 	addi	r3,r5,4
   128bc:	13400104 	addi	r13,r2,4
   128c0:	781c913a 	slli	r14,r15,4
   128c4:	2b000204 	addi	r12,r5,8
   128c8:	12c00204 	addi	r11,r2,8
   128cc:	73800504 	addi	r14,r14,20
   128d0:	2a800304 	addi	r10,r5,12
   128d4:	12400304 	addi	r9,r2,12
   128d8:	2b9d883a 	add	r14,r5,r14
   128dc:	2811883a 	mov	r8,r5
   128e0:	100f883a 	mov	r7,r2
   128e4:	41000017 	ldw	r4,0(r8)
   128e8:	39c00404 	addi	r7,r7,16
   128ec:	18c00404 	addi	r3,r3,16
   128f0:	393ffc15 	stw	r4,-16(r7)
   128f4:	193ffc17 	ldw	r4,-16(r3)
   128f8:	6b400404 	addi	r13,r13,16
   128fc:	5ac00404 	addi	r11,r11,16
   12900:	693ffc15 	stw	r4,-16(r13)
   12904:	61000017 	ldw	r4,0(r12)
   12908:	4a400404 	addi	r9,r9,16
   1290c:	42000404 	addi	r8,r8,16
   12910:	593ffc15 	stw	r4,-16(r11)
   12914:	51000017 	ldw	r4,0(r10)
   12918:	63000404 	addi	r12,r12,16
   1291c:	52800404 	addi	r10,r10,16
   12920:	493ffc15 	stw	r4,-16(r9)
   12924:	1bbfef1e 	bne	r3,r14,128e4 <__alt_data_end+0xfffd40e4>
   12928:	79000044 	addi	r4,r15,1
   1292c:	2008913a 	slli	r4,r4,4
   12930:	328003cc 	andi	r10,r6,15
   12934:	02c000c4 	movi	r11,3
   12938:	1107883a 	add	r3,r2,r4
   1293c:	290b883a 	add	r5,r5,r4
   12940:	5a801e2e 	bgeu	r11,r10,129bc <memmove+0x154>
   12944:	1813883a 	mov	r9,r3
   12948:	2811883a 	mov	r8,r5
   1294c:	500f883a 	mov	r7,r10
   12950:	41000017 	ldw	r4,0(r8)
   12954:	4a400104 	addi	r9,r9,4
   12958:	39ffff04 	addi	r7,r7,-4
   1295c:	493fff15 	stw	r4,-4(r9)
   12960:	42000104 	addi	r8,r8,4
   12964:	59fffa36 	bltu	r11,r7,12950 <__alt_data_end+0xfffd4150>
   12968:	513fff04 	addi	r4,r10,-4
   1296c:	2008d0ba 	srli	r4,r4,2
   12970:	318000cc 	andi	r6,r6,3
   12974:	21000044 	addi	r4,r4,1
   12978:	2109883a 	add	r4,r4,r4
   1297c:	2109883a 	add	r4,r4,r4
   12980:	1907883a 	add	r3,r3,r4
   12984:	290b883a 	add	r5,r5,r4
   12988:	30000b26 	beq	r6,zero,129b8 <memmove+0x150>
   1298c:	198d883a 	add	r6,r3,r6
   12990:	29c00003 	ldbu	r7,0(r5)
   12994:	18c00044 	addi	r3,r3,1
   12998:	29400044 	addi	r5,r5,1
   1299c:	19ffffc5 	stb	r7,-1(r3)
   129a0:	19bffb1e 	bne	r3,r6,12990 <__alt_data_end+0xfffd4190>
   129a4:	f800283a 	ret
   129a8:	1007883a 	mov	r3,r2
   129ac:	003ff606 	br	12988 <__alt_data_end+0xfffd4188>
   129b0:	1007883a 	mov	r3,r2
   129b4:	003ff506 	br	1298c <__alt_data_end+0xfffd418c>
   129b8:	f800283a 	ret
   129bc:	500d883a 	mov	r6,r10
   129c0:	003ff106 	br	12988 <__alt_data_end+0xfffd4188>

000129c4 <memset>:
   129c4:	20c000cc 	andi	r3,r4,3
   129c8:	2005883a 	mov	r2,r4
   129cc:	18004426 	beq	r3,zero,12ae0 <memset+0x11c>
   129d0:	31ffffc4 	addi	r7,r6,-1
   129d4:	30004026 	beq	r6,zero,12ad8 <memset+0x114>
   129d8:	2813883a 	mov	r9,r5
   129dc:	200d883a 	mov	r6,r4
   129e0:	2007883a 	mov	r3,r4
   129e4:	00000406 	br	129f8 <memset+0x34>
   129e8:	3a3fffc4 	addi	r8,r7,-1
   129ec:	31800044 	addi	r6,r6,1
   129f0:	38003926 	beq	r7,zero,12ad8 <memset+0x114>
   129f4:	400f883a 	mov	r7,r8
   129f8:	18c00044 	addi	r3,r3,1
   129fc:	32400005 	stb	r9,0(r6)
   12a00:	1a0000cc 	andi	r8,r3,3
   12a04:	403ff81e 	bne	r8,zero,129e8 <__alt_data_end+0xfffd41e8>
   12a08:	010000c4 	movi	r4,3
   12a0c:	21c02d2e 	bgeu	r4,r7,12ac4 <memset+0x100>
   12a10:	29003fcc 	andi	r4,r5,255
   12a14:	200c923a 	slli	r6,r4,8
   12a18:	3108b03a 	or	r4,r6,r4
   12a1c:	200c943a 	slli	r6,r4,16
   12a20:	218cb03a 	or	r6,r4,r6
   12a24:	010003c4 	movi	r4,15
   12a28:	21c0182e 	bgeu	r4,r7,12a8c <memset+0xc8>
   12a2c:	3b3ffc04 	addi	r12,r7,-16
   12a30:	6018d13a 	srli	r12,r12,4
   12a34:	1a000104 	addi	r8,r3,4
   12a38:	1ac00204 	addi	r11,r3,8
   12a3c:	6008913a 	slli	r4,r12,4
   12a40:	1a800304 	addi	r10,r3,12
   12a44:	1813883a 	mov	r9,r3
   12a48:	21000504 	addi	r4,r4,20
   12a4c:	1909883a 	add	r4,r3,r4
   12a50:	49800015 	stw	r6,0(r9)
   12a54:	41800015 	stw	r6,0(r8)
   12a58:	59800015 	stw	r6,0(r11)
   12a5c:	51800015 	stw	r6,0(r10)
   12a60:	42000404 	addi	r8,r8,16
   12a64:	4a400404 	addi	r9,r9,16
   12a68:	5ac00404 	addi	r11,r11,16
   12a6c:	52800404 	addi	r10,r10,16
   12a70:	413ff71e 	bne	r8,r4,12a50 <__alt_data_end+0xfffd4250>
   12a74:	63000044 	addi	r12,r12,1
   12a78:	6018913a 	slli	r12,r12,4
   12a7c:	39c003cc 	andi	r7,r7,15
   12a80:	010000c4 	movi	r4,3
   12a84:	1b07883a 	add	r3,r3,r12
   12a88:	21c00e2e 	bgeu	r4,r7,12ac4 <memset+0x100>
   12a8c:	1813883a 	mov	r9,r3
   12a90:	3811883a 	mov	r8,r7
   12a94:	010000c4 	movi	r4,3
   12a98:	49800015 	stw	r6,0(r9)
   12a9c:	423fff04 	addi	r8,r8,-4
   12aa0:	4a400104 	addi	r9,r9,4
   12aa4:	223ffc36 	bltu	r4,r8,12a98 <__alt_data_end+0xfffd4298>
   12aa8:	393fff04 	addi	r4,r7,-4
   12aac:	2008d0ba 	srli	r4,r4,2
   12ab0:	39c000cc 	andi	r7,r7,3
   12ab4:	21000044 	addi	r4,r4,1
   12ab8:	2109883a 	add	r4,r4,r4
   12abc:	2109883a 	add	r4,r4,r4
   12ac0:	1907883a 	add	r3,r3,r4
   12ac4:	38000526 	beq	r7,zero,12adc <memset+0x118>
   12ac8:	19cf883a 	add	r7,r3,r7
   12acc:	19400005 	stb	r5,0(r3)
   12ad0:	18c00044 	addi	r3,r3,1
   12ad4:	38fffd1e 	bne	r7,r3,12acc <__alt_data_end+0xfffd42cc>
   12ad8:	f800283a 	ret
   12adc:	f800283a 	ret
   12ae0:	2007883a 	mov	r3,r4
   12ae4:	300f883a 	mov	r7,r6
   12ae8:	003fc706 	br	12a08 <__alt_data_end+0xfffd4208>

00012aec <_open_r>:
   12aec:	defffd04 	addi	sp,sp,-12
   12af0:	2805883a 	mov	r2,r5
   12af4:	dc000015 	stw	r16,0(sp)
   12af8:	040000f4 	movhi	r16,3
   12afc:	dc400115 	stw	r17,4(sp)
   12b00:	300b883a 	mov	r5,r6
   12b04:	842aed04 	addi	r16,r16,-21580
   12b08:	2023883a 	mov	r17,r4
   12b0c:	380d883a 	mov	r6,r7
   12b10:	1009883a 	mov	r4,r2
   12b14:	dfc00215 	stw	ra,8(sp)
   12b18:	80000015 	stw	zero,0(r16)
   12b1c:	00288d40 	call	288d4 <open>
   12b20:	00ffffc4 	movi	r3,-1
   12b24:	10c00526 	beq	r2,r3,12b3c <_open_r+0x50>
   12b28:	dfc00217 	ldw	ra,8(sp)
   12b2c:	dc400117 	ldw	r17,4(sp)
   12b30:	dc000017 	ldw	r16,0(sp)
   12b34:	dec00304 	addi	sp,sp,12
   12b38:	f800283a 	ret
   12b3c:	80c00017 	ldw	r3,0(r16)
   12b40:	183ff926 	beq	r3,zero,12b28 <__alt_data_end+0xfffd4328>
   12b44:	88c00015 	stw	r3,0(r17)
   12b48:	003ff706 	br	12b28 <__alt_data_end+0xfffd4328>

00012b4c <_printf_r>:
   12b4c:	defffd04 	addi	sp,sp,-12
   12b50:	2805883a 	mov	r2,r5
   12b54:	dfc00015 	stw	ra,0(sp)
   12b58:	d9800115 	stw	r6,4(sp)
   12b5c:	d9c00215 	stw	r7,8(sp)
   12b60:	21400217 	ldw	r5,8(r4)
   12b64:	d9c00104 	addi	r7,sp,4
   12b68:	100d883a 	mov	r6,r2
   12b6c:	00151840 	call	15184 <___vfprintf_internal_r>
   12b70:	dfc00017 	ldw	ra,0(sp)
   12b74:	dec00304 	addi	sp,sp,12
   12b78:	f800283a 	ret

00012b7c <printf>:
   12b7c:	defffc04 	addi	sp,sp,-16
   12b80:	dfc00015 	stw	ra,0(sp)
   12b84:	d9400115 	stw	r5,4(sp)
   12b88:	d9800215 	stw	r6,8(sp)
   12b8c:	d9c00315 	stw	r7,12(sp)
   12b90:	008000f4 	movhi	r2,3
   12b94:	10a8a204 	addi	r2,r2,-23928
   12b98:	10800017 	ldw	r2,0(r2)
   12b9c:	200b883a 	mov	r5,r4
   12ba0:	d9800104 	addi	r6,sp,4
   12ba4:	11000217 	ldw	r4,8(r2)
   12ba8:	00174600 	call	17460 <__vfprintf_internal>
   12bac:	dfc00017 	ldw	ra,0(sp)
   12bb0:	dec00404 	addi	sp,sp,16
   12bb4:	f800283a 	ret

00012bb8 <_putchar_r>:
   12bb8:	21800217 	ldw	r6,8(r4)
   12bbc:	001a5381 	jmpi	1a538 <_putc_r>

00012bc0 <putchar>:
   12bc0:	008000f4 	movhi	r2,3
   12bc4:	10a8a204 	addi	r2,r2,-23928
   12bc8:	200b883a 	mov	r5,r4
   12bcc:	11000017 	ldw	r4,0(r2)
   12bd0:	21800217 	ldw	r6,8(r4)
   12bd4:	001a5381 	jmpi	1a538 <_putc_r>

00012bd8 <_puts_r>:
   12bd8:	defff604 	addi	sp,sp,-40
   12bdc:	dc000715 	stw	r16,28(sp)
   12be0:	2021883a 	mov	r16,r4
   12be4:	2809883a 	mov	r4,r5
   12be8:	dc400815 	stw	r17,32(sp)
   12bec:	dfc00915 	stw	ra,36(sp)
   12bf0:	2823883a 	mov	r17,r5
   12bf4:	00137600 	call	13760 <strlen>
   12bf8:	10c00044 	addi	r3,r2,1
   12bfc:	d8800115 	stw	r2,4(sp)
   12c00:	008000f4 	movhi	r2,3
   12c04:	10a37b04 	addi	r2,r2,-29204
   12c08:	d8800215 	stw	r2,8(sp)
   12c0c:	00800044 	movi	r2,1
   12c10:	d8800315 	stw	r2,12(sp)
   12c14:	00800084 	movi	r2,2
   12c18:	dc400015 	stw	r17,0(sp)
   12c1c:	d8c00615 	stw	r3,24(sp)
   12c20:	dec00415 	stw	sp,16(sp)
   12c24:	d8800515 	stw	r2,20(sp)
   12c28:	80000226 	beq	r16,zero,12c34 <_puts_r+0x5c>
   12c2c:	80800e17 	ldw	r2,56(r16)
   12c30:	10001426 	beq	r2,zero,12c84 <_puts_r+0xac>
   12c34:	81400217 	ldw	r5,8(r16)
   12c38:	2880030b 	ldhu	r2,12(r5)
   12c3c:	10c8000c 	andi	r3,r2,8192
   12c40:	1800061e 	bne	r3,zero,12c5c <_puts_r+0x84>
   12c44:	29001917 	ldw	r4,100(r5)
   12c48:	00f7ffc4 	movi	r3,-8193
   12c4c:	10880014 	ori	r2,r2,8192
   12c50:	20c6703a 	and	r3,r4,r3
   12c54:	2880030d 	sth	r2,12(r5)
   12c58:	28c01915 	stw	r3,100(r5)
   12c5c:	d9800404 	addi	r6,sp,16
   12c60:	8009883a 	mov	r4,r16
   12c64:	00115fc0 	call	115fc <__sfvwrite_r>
   12c68:	1000091e 	bne	r2,zero,12c90 <_puts_r+0xb8>
   12c6c:	00800284 	movi	r2,10
   12c70:	dfc00917 	ldw	ra,36(sp)
   12c74:	dc400817 	ldw	r17,32(sp)
   12c78:	dc000717 	ldw	r16,28(sp)
   12c7c:	dec00a04 	addi	sp,sp,40
   12c80:	f800283a 	ret
   12c84:	8009883a 	mov	r4,r16
   12c88:	0010a900 	call	10a90 <__sinit>
   12c8c:	003fe906 	br	12c34 <__alt_data_end+0xfffd4434>
   12c90:	00bfffc4 	movi	r2,-1
   12c94:	003ff606 	br	12c70 <__alt_data_end+0xfffd4470>

00012c98 <puts>:
   12c98:	008000f4 	movhi	r2,3
   12c9c:	10a8a204 	addi	r2,r2,-23928
   12ca0:	200b883a 	mov	r5,r4
   12ca4:	11000017 	ldw	r4,0(r2)
   12ca8:	0012bd81 	jmpi	12bd8 <_puts_r>

00012cac <_realloc_r>:
   12cac:	defff604 	addi	sp,sp,-40
   12cb0:	dc800215 	stw	r18,8(sp)
   12cb4:	dfc00915 	stw	ra,36(sp)
   12cb8:	df000815 	stw	fp,32(sp)
   12cbc:	ddc00715 	stw	r23,28(sp)
   12cc0:	dd800615 	stw	r22,24(sp)
   12cc4:	dd400515 	stw	r21,20(sp)
   12cc8:	dd000415 	stw	r20,16(sp)
   12ccc:	dcc00315 	stw	r19,12(sp)
   12cd0:	dc400115 	stw	r17,4(sp)
   12cd4:	dc000015 	stw	r16,0(sp)
   12cd8:	3025883a 	mov	r18,r6
   12cdc:	2800b726 	beq	r5,zero,12fbc <_realloc_r+0x310>
   12ce0:	282b883a 	mov	r21,r5
   12ce4:	2029883a 	mov	r20,r4
   12ce8:	00288cc0 	call	288cc <__malloc_lock>
   12cec:	a8bfff17 	ldw	r2,-4(r21)
   12cf0:	043fff04 	movi	r16,-4
   12cf4:	90c002c4 	addi	r3,r18,11
   12cf8:	01000584 	movi	r4,22
   12cfc:	acfffe04 	addi	r19,r21,-8
   12d00:	1420703a 	and	r16,r2,r16
   12d04:	20c0332e 	bgeu	r4,r3,12dd4 <_realloc_r+0x128>
   12d08:	047ffe04 	movi	r17,-8
   12d0c:	1c62703a 	and	r17,r3,r17
   12d10:	8807883a 	mov	r3,r17
   12d14:	88005816 	blt	r17,zero,12e78 <_realloc_r+0x1cc>
   12d18:	8c805736 	bltu	r17,r18,12e78 <_realloc_r+0x1cc>
   12d1c:	80c0300e 	bge	r16,r3,12de0 <_realloc_r+0x134>
   12d20:	070000f4 	movhi	fp,3
   12d24:	e7277e04 	addi	fp,fp,-25096
   12d28:	e1c00217 	ldw	r7,8(fp)
   12d2c:	9c09883a 	add	r4,r19,r16
   12d30:	22000117 	ldw	r8,4(r4)
   12d34:	21c06326 	beq	r4,r7,12ec4 <_realloc_r+0x218>
   12d38:	017fff84 	movi	r5,-2
   12d3c:	414a703a 	and	r5,r8,r5
   12d40:	214b883a 	add	r5,r4,r5
   12d44:	29800117 	ldw	r6,4(r5)
   12d48:	3180004c 	andi	r6,r6,1
   12d4c:	30003f26 	beq	r6,zero,12e4c <_realloc_r+0x1a0>
   12d50:	1080004c 	andi	r2,r2,1
   12d54:	10008326 	beq	r2,zero,12f64 <_realloc_r+0x2b8>
   12d58:	900b883a 	mov	r5,r18
   12d5c:	a009883a 	mov	r4,r20
   12d60:	0011e300 	call	11e30 <_malloc_r>
   12d64:	1025883a 	mov	r18,r2
   12d68:	10011e26 	beq	r2,zero,131e4 <_realloc_r+0x538>
   12d6c:	a93fff17 	ldw	r4,-4(r21)
   12d70:	10fffe04 	addi	r3,r2,-8
   12d74:	00bfff84 	movi	r2,-2
   12d78:	2084703a 	and	r2,r4,r2
   12d7c:	9885883a 	add	r2,r19,r2
   12d80:	1880ee26 	beq	r3,r2,1313c <_realloc_r+0x490>
   12d84:	81bfff04 	addi	r6,r16,-4
   12d88:	00800904 	movi	r2,36
   12d8c:	1180b836 	bltu	r2,r6,13070 <_realloc_r+0x3c4>
   12d90:	00c004c4 	movi	r3,19
   12d94:	19809636 	bltu	r3,r6,12ff0 <_realloc_r+0x344>
   12d98:	9005883a 	mov	r2,r18
   12d9c:	a807883a 	mov	r3,r21
   12da0:	19000017 	ldw	r4,0(r3)
   12da4:	11000015 	stw	r4,0(r2)
   12da8:	19000117 	ldw	r4,4(r3)
   12dac:	11000115 	stw	r4,4(r2)
   12db0:	18c00217 	ldw	r3,8(r3)
   12db4:	10c00215 	stw	r3,8(r2)
   12db8:	a80b883a 	mov	r5,r21
   12dbc:	a009883a 	mov	r4,r20
   12dc0:	0010e100 	call	10e10 <_free_r>
   12dc4:	a009883a 	mov	r4,r20
   12dc8:	00288d00 	call	288d0 <__malloc_unlock>
   12dcc:	9005883a 	mov	r2,r18
   12dd0:	00001206 	br	12e1c <_realloc_r+0x170>
   12dd4:	00c00404 	movi	r3,16
   12dd8:	1823883a 	mov	r17,r3
   12ddc:	003fce06 	br	12d18 <__alt_data_end+0xfffd4518>
   12de0:	a825883a 	mov	r18,r21
   12de4:	8445c83a 	sub	r2,r16,r17
   12de8:	00c003c4 	movi	r3,15
   12dec:	18802636 	bltu	r3,r2,12e88 <_realloc_r+0x1dc>
   12df0:	99800117 	ldw	r6,4(r19)
   12df4:	9c07883a 	add	r3,r19,r16
   12df8:	3180004c 	andi	r6,r6,1
   12dfc:	3420b03a 	or	r16,r6,r16
   12e00:	9c000115 	stw	r16,4(r19)
   12e04:	18800117 	ldw	r2,4(r3)
   12e08:	10800054 	ori	r2,r2,1
   12e0c:	18800115 	stw	r2,4(r3)
   12e10:	a009883a 	mov	r4,r20
   12e14:	00288d00 	call	288d0 <__malloc_unlock>
   12e18:	9005883a 	mov	r2,r18
   12e1c:	dfc00917 	ldw	ra,36(sp)
   12e20:	df000817 	ldw	fp,32(sp)
   12e24:	ddc00717 	ldw	r23,28(sp)
   12e28:	dd800617 	ldw	r22,24(sp)
   12e2c:	dd400517 	ldw	r21,20(sp)
   12e30:	dd000417 	ldw	r20,16(sp)
   12e34:	dcc00317 	ldw	r19,12(sp)
   12e38:	dc800217 	ldw	r18,8(sp)
   12e3c:	dc400117 	ldw	r17,4(sp)
   12e40:	dc000017 	ldw	r16,0(sp)
   12e44:	dec00a04 	addi	sp,sp,40
   12e48:	f800283a 	ret
   12e4c:	017fff04 	movi	r5,-4
   12e50:	414a703a 	and	r5,r8,r5
   12e54:	814d883a 	add	r6,r16,r5
   12e58:	30c01f16 	blt	r6,r3,12ed8 <_realloc_r+0x22c>
   12e5c:	20800317 	ldw	r2,12(r4)
   12e60:	20c00217 	ldw	r3,8(r4)
   12e64:	a825883a 	mov	r18,r21
   12e68:	3021883a 	mov	r16,r6
   12e6c:	18800315 	stw	r2,12(r3)
   12e70:	10c00215 	stw	r3,8(r2)
   12e74:	003fdb06 	br	12de4 <__alt_data_end+0xfffd45e4>
   12e78:	00800304 	movi	r2,12
   12e7c:	a0800015 	stw	r2,0(r20)
   12e80:	0005883a 	mov	r2,zero
   12e84:	003fe506 	br	12e1c <__alt_data_end+0xfffd461c>
   12e88:	98c00117 	ldw	r3,4(r19)
   12e8c:	9c4b883a 	add	r5,r19,r17
   12e90:	11000054 	ori	r4,r2,1
   12e94:	18c0004c 	andi	r3,r3,1
   12e98:	1c62b03a 	or	r17,r3,r17
   12e9c:	9c400115 	stw	r17,4(r19)
   12ea0:	29000115 	stw	r4,4(r5)
   12ea4:	2885883a 	add	r2,r5,r2
   12ea8:	10c00117 	ldw	r3,4(r2)
   12eac:	29400204 	addi	r5,r5,8
   12eb0:	a009883a 	mov	r4,r20
   12eb4:	18c00054 	ori	r3,r3,1
   12eb8:	10c00115 	stw	r3,4(r2)
   12ebc:	0010e100 	call	10e10 <_free_r>
   12ec0:	003fd306 	br	12e10 <__alt_data_end+0xfffd4610>
   12ec4:	017fff04 	movi	r5,-4
   12ec8:	414a703a 	and	r5,r8,r5
   12ecc:	89800404 	addi	r6,r17,16
   12ed0:	8151883a 	add	r8,r16,r5
   12ed4:	4180590e 	bge	r8,r6,1303c <_realloc_r+0x390>
   12ed8:	1080004c 	andi	r2,r2,1
   12edc:	103f9e1e 	bne	r2,zero,12d58 <__alt_data_end+0xfffd4558>
   12ee0:	adbffe17 	ldw	r22,-8(r21)
   12ee4:	00bfff04 	movi	r2,-4
   12ee8:	9dadc83a 	sub	r22,r19,r22
   12eec:	b1800117 	ldw	r6,4(r22)
   12ef0:	3084703a 	and	r2,r6,r2
   12ef4:	20002026 	beq	r4,zero,12f78 <_realloc_r+0x2cc>
   12ef8:	80af883a 	add	r23,r16,r2
   12efc:	b96f883a 	add	r23,r23,r5
   12f00:	21c05f26 	beq	r4,r7,13080 <_realloc_r+0x3d4>
   12f04:	b8c01c16 	blt	r23,r3,12f78 <_realloc_r+0x2cc>
   12f08:	20800317 	ldw	r2,12(r4)
   12f0c:	20c00217 	ldw	r3,8(r4)
   12f10:	81bfff04 	addi	r6,r16,-4
   12f14:	01000904 	movi	r4,36
   12f18:	18800315 	stw	r2,12(r3)
   12f1c:	10c00215 	stw	r3,8(r2)
   12f20:	b0c00217 	ldw	r3,8(r22)
   12f24:	b0800317 	ldw	r2,12(r22)
   12f28:	b4800204 	addi	r18,r22,8
   12f2c:	18800315 	stw	r2,12(r3)
   12f30:	10c00215 	stw	r3,8(r2)
   12f34:	21801b36 	bltu	r4,r6,12fa4 <_realloc_r+0x2f8>
   12f38:	008004c4 	movi	r2,19
   12f3c:	1180352e 	bgeu	r2,r6,13014 <_realloc_r+0x368>
   12f40:	a8800017 	ldw	r2,0(r21)
   12f44:	b0800215 	stw	r2,8(r22)
   12f48:	a8800117 	ldw	r2,4(r21)
   12f4c:	b0800315 	stw	r2,12(r22)
   12f50:	008006c4 	movi	r2,27
   12f54:	11807f36 	bltu	r2,r6,13154 <_realloc_r+0x4a8>
   12f58:	b0800404 	addi	r2,r22,16
   12f5c:	ad400204 	addi	r21,r21,8
   12f60:	00002d06 	br	13018 <_realloc_r+0x36c>
   12f64:	adbffe17 	ldw	r22,-8(r21)
   12f68:	00bfff04 	movi	r2,-4
   12f6c:	9dadc83a 	sub	r22,r19,r22
   12f70:	b1000117 	ldw	r4,4(r22)
   12f74:	2084703a 	and	r2,r4,r2
   12f78:	b03f7726 	beq	r22,zero,12d58 <__alt_data_end+0xfffd4558>
   12f7c:	80af883a 	add	r23,r16,r2
   12f80:	b8ff7516 	blt	r23,r3,12d58 <__alt_data_end+0xfffd4558>
   12f84:	b0800317 	ldw	r2,12(r22)
   12f88:	b0c00217 	ldw	r3,8(r22)
   12f8c:	81bfff04 	addi	r6,r16,-4
   12f90:	01000904 	movi	r4,36
   12f94:	18800315 	stw	r2,12(r3)
   12f98:	10c00215 	stw	r3,8(r2)
   12f9c:	b4800204 	addi	r18,r22,8
   12fa0:	21bfe52e 	bgeu	r4,r6,12f38 <__alt_data_end+0xfffd4738>
   12fa4:	a80b883a 	mov	r5,r21
   12fa8:	9009883a 	mov	r4,r18
   12fac:	00128680 	call	12868 <memmove>
   12fb0:	b821883a 	mov	r16,r23
   12fb4:	b027883a 	mov	r19,r22
   12fb8:	003f8a06 	br	12de4 <__alt_data_end+0xfffd45e4>
   12fbc:	300b883a 	mov	r5,r6
   12fc0:	dfc00917 	ldw	ra,36(sp)
   12fc4:	df000817 	ldw	fp,32(sp)
   12fc8:	ddc00717 	ldw	r23,28(sp)
   12fcc:	dd800617 	ldw	r22,24(sp)
   12fd0:	dd400517 	ldw	r21,20(sp)
   12fd4:	dd000417 	ldw	r20,16(sp)
   12fd8:	dcc00317 	ldw	r19,12(sp)
   12fdc:	dc800217 	ldw	r18,8(sp)
   12fe0:	dc400117 	ldw	r17,4(sp)
   12fe4:	dc000017 	ldw	r16,0(sp)
   12fe8:	dec00a04 	addi	sp,sp,40
   12fec:	0011e301 	jmpi	11e30 <_malloc_r>
   12ff0:	a8c00017 	ldw	r3,0(r21)
   12ff4:	90c00015 	stw	r3,0(r18)
   12ff8:	a8c00117 	ldw	r3,4(r21)
   12ffc:	90c00115 	stw	r3,4(r18)
   13000:	00c006c4 	movi	r3,27
   13004:	19804536 	bltu	r3,r6,1311c <_realloc_r+0x470>
   13008:	90800204 	addi	r2,r18,8
   1300c:	a8c00204 	addi	r3,r21,8
   13010:	003f6306 	br	12da0 <__alt_data_end+0xfffd45a0>
   13014:	9005883a 	mov	r2,r18
   13018:	a8c00017 	ldw	r3,0(r21)
   1301c:	b821883a 	mov	r16,r23
   13020:	b027883a 	mov	r19,r22
   13024:	10c00015 	stw	r3,0(r2)
   13028:	a8c00117 	ldw	r3,4(r21)
   1302c:	10c00115 	stw	r3,4(r2)
   13030:	a8c00217 	ldw	r3,8(r21)
   13034:	10c00215 	stw	r3,8(r2)
   13038:	003f6a06 	br	12de4 <__alt_data_end+0xfffd45e4>
   1303c:	9c67883a 	add	r19,r19,r17
   13040:	4445c83a 	sub	r2,r8,r17
   13044:	e4c00215 	stw	r19,8(fp)
   13048:	10800054 	ori	r2,r2,1
   1304c:	98800115 	stw	r2,4(r19)
   13050:	a8bfff17 	ldw	r2,-4(r21)
   13054:	a009883a 	mov	r4,r20
   13058:	1080004c 	andi	r2,r2,1
   1305c:	1462b03a 	or	r17,r2,r17
   13060:	ac7fff15 	stw	r17,-4(r21)
   13064:	00288d00 	call	288d0 <__malloc_unlock>
   13068:	a805883a 	mov	r2,r21
   1306c:	003f6b06 	br	12e1c <__alt_data_end+0xfffd461c>
   13070:	a80b883a 	mov	r5,r21
   13074:	9009883a 	mov	r4,r18
   13078:	00128680 	call	12868 <memmove>
   1307c:	003f4e06 	br	12db8 <__alt_data_end+0xfffd45b8>
   13080:	89000404 	addi	r4,r17,16
   13084:	b93fbc16 	blt	r23,r4,12f78 <__alt_data_end+0xfffd4778>
   13088:	b0800317 	ldw	r2,12(r22)
   1308c:	b0c00217 	ldw	r3,8(r22)
   13090:	81bfff04 	addi	r6,r16,-4
   13094:	01000904 	movi	r4,36
   13098:	18800315 	stw	r2,12(r3)
   1309c:	10c00215 	stw	r3,8(r2)
   130a0:	b4800204 	addi	r18,r22,8
   130a4:	21804336 	bltu	r4,r6,131b4 <_realloc_r+0x508>
   130a8:	008004c4 	movi	r2,19
   130ac:	11803f2e 	bgeu	r2,r6,131ac <_realloc_r+0x500>
   130b0:	a8800017 	ldw	r2,0(r21)
   130b4:	b0800215 	stw	r2,8(r22)
   130b8:	a8800117 	ldw	r2,4(r21)
   130bc:	b0800315 	stw	r2,12(r22)
   130c0:	008006c4 	movi	r2,27
   130c4:	11803f36 	bltu	r2,r6,131c4 <_realloc_r+0x518>
   130c8:	b0800404 	addi	r2,r22,16
   130cc:	ad400204 	addi	r21,r21,8
   130d0:	a8c00017 	ldw	r3,0(r21)
   130d4:	10c00015 	stw	r3,0(r2)
   130d8:	a8c00117 	ldw	r3,4(r21)
   130dc:	10c00115 	stw	r3,4(r2)
   130e0:	a8c00217 	ldw	r3,8(r21)
   130e4:	10c00215 	stw	r3,8(r2)
   130e8:	b447883a 	add	r3,r22,r17
   130ec:	bc45c83a 	sub	r2,r23,r17
   130f0:	e0c00215 	stw	r3,8(fp)
   130f4:	10800054 	ori	r2,r2,1
   130f8:	18800115 	stw	r2,4(r3)
   130fc:	b0800117 	ldw	r2,4(r22)
   13100:	a009883a 	mov	r4,r20
   13104:	1080004c 	andi	r2,r2,1
   13108:	1462b03a 	or	r17,r2,r17
   1310c:	b4400115 	stw	r17,4(r22)
   13110:	00288d00 	call	288d0 <__malloc_unlock>
   13114:	9005883a 	mov	r2,r18
   13118:	003f4006 	br	12e1c <__alt_data_end+0xfffd461c>
   1311c:	a8c00217 	ldw	r3,8(r21)
   13120:	90c00215 	stw	r3,8(r18)
   13124:	a8c00317 	ldw	r3,12(r21)
   13128:	90c00315 	stw	r3,12(r18)
   1312c:	30801126 	beq	r6,r2,13174 <_realloc_r+0x4c8>
   13130:	90800404 	addi	r2,r18,16
   13134:	a8c00404 	addi	r3,r21,16
   13138:	003f1906 	br	12da0 <__alt_data_end+0xfffd45a0>
   1313c:	90ffff17 	ldw	r3,-4(r18)
   13140:	00bfff04 	movi	r2,-4
   13144:	a825883a 	mov	r18,r21
   13148:	1884703a 	and	r2,r3,r2
   1314c:	80a1883a 	add	r16,r16,r2
   13150:	003f2406 	br	12de4 <__alt_data_end+0xfffd45e4>
   13154:	a8800217 	ldw	r2,8(r21)
   13158:	b0800415 	stw	r2,16(r22)
   1315c:	a8800317 	ldw	r2,12(r21)
   13160:	b0800515 	stw	r2,20(r22)
   13164:	31000a26 	beq	r6,r4,13190 <_realloc_r+0x4e4>
   13168:	b0800604 	addi	r2,r22,24
   1316c:	ad400404 	addi	r21,r21,16
   13170:	003fa906 	br	13018 <__alt_data_end+0xfffd4818>
   13174:	a9000417 	ldw	r4,16(r21)
   13178:	90800604 	addi	r2,r18,24
   1317c:	a8c00604 	addi	r3,r21,24
   13180:	91000415 	stw	r4,16(r18)
   13184:	a9000517 	ldw	r4,20(r21)
   13188:	91000515 	stw	r4,20(r18)
   1318c:	003f0406 	br	12da0 <__alt_data_end+0xfffd45a0>
   13190:	a8c00417 	ldw	r3,16(r21)
   13194:	ad400604 	addi	r21,r21,24
   13198:	b0800804 	addi	r2,r22,32
   1319c:	b0c00615 	stw	r3,24(r22)
   131a0:	a8ffff17 	ldw	r3,-4(r21)
   131a4:	b0c00715 	stw	r3,28(r22)
   131a8:	003f9b06 	br	13018 <__alt_data_end+0xfffd4818>
   131ac:	9005883a 	mov	r2,r18
   131b0:	003fc706 	br	130d0 <__alt_data_end+0xfffd48d0>
   131b4:	a80b883a 	mov	r5,r21
   131b8:	9009883a 	mov	r4,r18
   131bc:	00128680 	call	12868 <memmove>
   131c0:	003fc906 	br	130e8 <__alt_data_end+0xfffd48e8>
   131c4:	a8800217 	ldw	r2,8(r21)
   131c8:	b0800415 	stw	r2,16(r22)
   131cc:	a8800317 	ldw	r2,12(r21)
   131d0:	b0800515 	stw	r2,20(r22)
   131d4:	31000726 	beq	r6,r4,131f4 <_realloc_r+0x548>
   131d8:	b0800604 	addi	r2,r22,24
   131dc:	ad400404 	addi	r21,r21,16
   131e0:	003fbb06 	br	130d0 <__alt_data_end+0xfffd48d0>
   131e4:	a009883a 	mov	r4,r20
   131e8:	00288d00 	call	288d0 <__malloc_unlock>
   131ec:	0005883a 	mov	r2,zero
   131f0:	003f0a06 	br	12e1c <__alt_data_end+0xfffd461c>
   131f4:	a8c00417 	ldw	r3,16(r21)
   131f8:	ad400604 	addi	r21,r21,24
   131fc:	b0800804 	addi	r2,r22,32
   13200:	b0c00615 	stw	r3,24(r22)
   13204:	a8ffff17 	ldw	r3,-4(r21)
   13208:	b0c00715 	stw	r3,28(r22)
   1320c:	003fb006 	br	130d0 <__alt_data_end+0xfffd48d0>

00013210 <lflush>:
   13210:	2080030b 	ldhu	r2,12(r4)
   13214:	00c00244 	movi	r3,9
   13218:	1080024c 	andi	r2,r2,9
   1321c:	10c00226 	beq	r2,r3,13228 <lflush+0x18>
   13220:	0005883a 	mov	r2,zero
   13224:	f800283a 	ret
   13228:	00107001 	jmpi	10700 <fflush>

0001322c <__srefill_r>:
   1322c:	defffc04 	addi	sp,sp,-16
   13230:	dc400115 	stw	r17,4(sp)
   13234:	dc000015 	stw	r16,0(sp)
   13238:	dfc00315 	stw	ra,12(sp)
   1323c:	dc800215 	stw	r18,8(sp)
   13240:	2023883a 	mov	r17,r4
   13244:	2821883a 	mov	r16,r5
   13248:	20000226 	beq	r4,zero,13254 <__srefill_r+0x28>
   1324c:	20800e17 	ldw	r2,56(r4)
   13250:	10003c26 	beq	r2,zero,13344 <__srefill_r+0x118>
   13254:	80c0030b 	ldhu	r3,12(r16)
   13258:	1908000c 	andi	r4,r3,8192
   1325c:	1805883a 	mov	r2,r3
   13260:	2000071e 	bne	r4,zero,13280 <__srefill_r+0x54>
   13264:	81001917 	ldw	r4,100(r16)
   13268:	18880014 	ori	r2,r3,8192
   1326c:	00f7ffc4 	movi	r3,-8193
   13270:	20c8703a 	and	r4,r4,r3
   13274:	8080030d 	sth	r2,12(r16)
   13278:	1007883a 	mov	r3,r2
   1327c:	81001915 	stw	r4,100(r16)
   13280:	80000115 	stw	zero,4(r16)
   13284:	1100080c 	andi	r4,r2,32
   13288:	2000571e 	bne	r4,zero,133e8 <__srefill_r+0x1bc>
   1328c:	1100010c 	andi	r4,r2,4
   13290:	20001f26 	beq	r4,zero,13310 <__srefill_r+0xe4>
   13294:	81400c17 	ldw	r5,48(r16)
   13298:	28000826 	beq	r5,zero,132bc <__srefill_r+0x90>
   1329c:	80801004 	addi	r2,r16,64
   132a0:	28800226 	beq	r5,r2,132ac <__srefill_r+0x80>
   132a4:	8809883a 	mov	r4,r17
   132a8:	0010e100 	call	10e10 <_free_r>
   132ac:	80800f17 	ldw	r2,60(r16)
   132b0:	80000c15 	stw	zero,48(r16)
   132b4:	80800115 	stw	r2,4(r16)
   132b8:	1000391e 	bne	r2,zero,133a0 <__srefill_r+0x174>
   132bc:	80800417 	ldw	r2,16(r16)
   132c0:	10004b26 	beq	r2,zero,133f0 <__srefill_r+0x1c4>
   132c4:	8480030b 	ldhu	r18,12(r16)
   132c8:	908000cc 	andi	r2,r18,3
   132cc:	10001f1e 	bne	r2,zero,1334c <__srefill_r+0x120>
   132d0:	81800417 	ldw	r6,16(r16)
   132d4:	80800817 	ldw	r2,32(r16)
   132d8:	81c00517 	ldw	r7,20(r16)
   132dc:	81400717 	ldw	r5,28(r16)
   132e0:	81800015 	stw	r6,0(r16)
   132e4:	8809883a 	mov	r4,r17
   132e8:	103ee83a 	callr	r2
   132ec:	80800115 	stw	r2,4(r16)
   132f0:	00800e0e 	bge	zero,r2,1332c <__srefill_r+0x100>
   132f4:	0005883a 	mov	r2,zero
   132f8:	dfc00317 	ldw	ra,12(sp)
   132fc:	dc800217 	ldw	r18,8(sp)
   13300:	dc400117 	ldw	r17,4(sp)
   13304:	dc000017 	ldw	r16,0(sp)
   13308:	dec00404 	addi	sp,sp,16
   1330c:	f800283a 	ret
   13310:	1100040c 	andi	r4,r2,16
   13314:	20003026 	beq	r4,zero,133d8 <__srefill_r+0x1ac>
   13318:	1080020c 	andi	r2,r2,8
   1331c:	1000241e 	bne	r2,zero,133b0 <__srefill_r+0x184>
   13320:	18c00114 	ori	r3,r3,4
   13324:	80c0030d 	sth	r3,12(r16)
   13328:	003fe406 	br	132bc <__alt_data_end+0xfffd4abc>
   1332c:	80c0030b 	ldhu	r3,12(r16)
   13330:	1000161e 	bne	r2,zero,1338c <__srefill_r+0x160>
   13334:	18c00814 	ori	r3,r3,32
   13338:	00bfffc4 	movi	r2,-1
   1333c:	80c0030d 	sth	r3,12(r16)
   13340:	003fed06 	br	132f8 <__alt_data_end+0xfffd4af8>
   13344:	0010a900 	call	10a90 <__sinit>
   13348:	003fc206 	br	13254 <__alt_data_end+0xfffd4a54>
   1334c:	008000f4 	movhi	r2,3
   13350:	10a8a104 	addi	r2,r2,-23932
   13354:	11000017 	ldw	r4,0(r2)
   13358:	01400074 	movhi	r5,1
   1335c:	00800044 	movi	r2,1
   13360:	294c8404 	addi	r5,r5,12816
   13364:	8080030d 	sth	r2,12(r16)
   13368:	0011ac40 	call	11ac4 <_fwalk>
   1336c:	00800244 	movi	r2,9
   13370:	8480030d 	sth	r18,12(r16)
   13374:	9480024c 	andi	r18,r18,9
   13378:	90bfd51e 	bne	r18,r2,132d0 <__alt_data_end+0xfffd4ad0>
   1337c:	800b883a 	mov	r5,r16
   13380:	8809883a 	mov	r4,r17
   13384:	00104880 	call	10488 <__sflush_r>
   13388:	003fd106 	br	132d0 <__alt_data_end+0xfffd4ad0>
   1338c:	18c01014 	ori	r3,r3,64
   13390:	80000115 	stw	zero,4(r16)
   13394:	00bfffc4 	movi	r2,-1
   13398:	80c0030d 	sth	r3,12(r16)
   1339c:	003fd606 	br	132f8 <__alt_data_end+0xfffd4af8>
   133a0:	80c00e17 	ldw	r3,56(r16)
   133a4:	0005883a 	mov	r2,zero
   133a8:	80c00015 	stw	r3,0(r16)
   133ac:	003fd206 	br	132f8 <__alt_data_end+0xfffd4af8>
   133b0:	800b883a 	mov	r5,r16
   133b4:	8809883a 	mov	r4,r17
   133b8:	00106a40 	call	106a4 <_fflush_r>
   133bc:	10000a1e 	bne	r2,zero,133e8 <__srefill_r+0x1bc>
   133c0:	8080030b 	ldhu	r2,12(r16)
   133c4:	00fffdc4 	movi	r3,-9
   133c8:	80000215 	stw	zero,8(r16)
   133cc:	1886703a 	and	r3,r3,r2
   133d0:	80000615 	stw	zero,24(r16)
   133d4:	003fd206 	br	13320 <__alt_data_end+0xfffd4b20>
   133d8:	00800244 	movi	r2,9
   133dc:	88800015 	stw	r2,0(r17)
   133e0:	18c01014 	ori	r3,r3,64
   133e4:	80c0030d 	sth	r3,12(r16)
   133e8:	00bfffc4 	movi	r2,-1
   133ec:	003fc206 	br	132f8 <__alt_data_end+0xfffd4af8>
   133f0:	800b883a 	mov	r5,r16
   133f4:	8809883a 	mov	r4,r17
   133f8:	0011c4c0 	call	11c4c <__smakebuf_r>
   133fc:	003fb106 	br	132c4 <__alt_data_end+0xfffd4ac4>

00013400 <_sbrk_r>:
   13400:	defffd04 	addi	sp,sp,-12
   13404:	dc000015 	stw	r16,0(sp)
   13408:	040000f4 	movhi	r16,3
   1340c:	dc400115 	stw	r17,4(sp)
   13410:	842aed04 	addi	r16,r16,-21580
   13414:	2023883a 	mov	r17,r4
   13418:	2809883a 	mov	r4,r5
   1341c:	dfc00215 	stw	ra,8(sp)
   13420:	80000015 	stw	zero,0(r16)
   13424:	00289680 	call	28968 <sbrk>
   13428:	00ffffc4 	movi	r3,-1
   1342c:	10c00526 	beq	r2,r3,13444 <_sbrk_r+0x44>
   13430:	dfc00217 	ldw	ra,8(sp)
   13434:	dc400117 	ldw	r17,4(sp)
   13438:	dc000017 	ldw	r16,0(sp)
   1343c:	dec00304 	addi	sp,sp,12
   13440:	f800283a 	ret
   13444:	80c00017 	ldw	r3,0(r16)
   13448:	183ff926 	beq	r3,zero,13430 <__alt_data_end+0xfffd4c30>
   1344c:	88c00015 	stw	r3,0(r17)
   13450:	003ff706 	br	13430 <__alt_data_end+0xfffd4c30>

00013454 <sscanf>:
   13454:	deffe204 	addi	sp,sp,-120
   13458:	dc001a15 	stw	r16,104(sp)
   1345c:	2821883a 	mov	r16,r5
   13460:	dfc01b15 	stw	ra,108(sp)
   13464:	d9801c15 	stw	r6,112(sp)
   13468:	d9c01d15 	stw	r7,116(sp)
   1346c:	00c08104 	movi	r3,516
   13470:	d8c0030d 	sth	r3,12(sp)
   13474:	d9000015 	stw	r4,0(sp)
   13478:	d9000415 	stw	r4,16(sp)
   1347c:	00137600 	call	13760 <strlen>
   13480:	00c000f4 	movhi	r3,3
   13484:	18e8a204 	addi	r3,r3,-23928
   13488:	d8800115 	stw	r2,4(sp)
   1348c:	d8800515 	stw	r2,20(sp)
   13490:	19000017 	ldw	r4,0(r3)
   13494:	00800074 	movhi	r2,1
   13498:	108d6704 	addi	r2,r2,13724
   1349c:	d8800815 	stw	r2,32(sp)
   134a0:	d9c01c04 	addi	r7,sp,112
   134a4:	800d883a 	mov	r6,r16
   134a8:	d80b883a 	mov	r5,sp
   134ac:	00bfffc4 	movi	r2,-1
   134b0:	d8000c15 	stw	zero,48(sp)
   134b4:	d8001115 	stw	zero,68(sp)
   134b8:	d880038d 	sth	r2,14(sp)
   134bc:	00137f80 	call	137f8 <__ssvfscanf_r>
   134c0:	dfc01b17 	ldw	ra,108(sp)
   134c4:	dc001a17 	ldw	r16,104(sp)
   134c8:	dec01e04 	addi	sp,sp,120
   134cc:	f800283a 	ret

000134d0 <_sscanf_r>:
   134d0:	deffe204 	addi	sp,sp,-120
   134d4:	dc001b15 	stw	r16,108(sp)
   134d8:	2021883a 	mov	r16,r4
   134dc:	dfc01c15 	stw	ra,112(sp)
   134e0:	d9c01d15 	stw	r7,116(sp)
   134e4:	00808104 	movi	r2,516
   134e8:	2809883a 	mov	r4,r5
   134ec:	d9400015 	stw	r5,0(sp)
   134f0:	d9400415 	stw	r5,16(sp)
   134f4:	d9801a15 	stw	r6,104(sp)
   134f8:	d880030d 	sth	r2,12(sp)
   134fc:	00137600 	call	13760 <strlen>
   13500:	d8800115 	stw	r2,4(sp)
   13504:	d8800515 	stw	r2,20(sp)
   13508:	d9801a17 	ldw	r6,104(sp)
   1350c:	00800074 	movhi	r2,1
   13510:	108d6704 	addi	r2,r2,13724
   13514:	d8800815 	stw	r2,32(sp)
   13518:	d9c01d04 	addi	r7,sp,116
   1351c:	d80b883a 	mov	r5,sp
   13520:	8009883a 	mov	r4,r16
   13524:	00bfffc4 	movi	r2,-1
   13528:	d8000c15 	stw	zero,48(sp)
   1352c:	d8001115 	stw	zero,68(sp)
   13530:	d880038d 	sth	r2,14(sp)
   13534:	00137f80 	call	137f8 <__ssvfscanf_r>
   13538:	dfc01c17 	ldw	ra,112(sp)
   1353c:	dc001b17 	ldw	r16,108(sp)
   13540:	dec01e04 	addi	sp,sp,120
   13544:	f800283a 	ret

00013548 <__sread>:
   13548:	defffe04 	addi	sp,sp,-8
   1354c:	dc000015 	stw	r16,0(sp)
   13550:	2821883a 	mov	r16,r5
   13554:	2940038f 	ldh	r5,14(r5)
   13558:	dfc00115 	stw	ra,4(sp)
   1355c:	001a6a00 	call	1a6a0 <_read_r>
   13560:	10000716 	blt	r2,zero,13580 <__sread+0x38>
   13564:	80c01417 	ldw	r3,80(r16)
   13568:	1887883a 	add	r3,r3,r2
   1356c:	80c01415 	stw	r3,80(r16)
   13570:	dfc00117 	ldw	ra,4(sp)
   13574:	dc000017 	ldw	r16,0(sp)
   13578:	dec00204 	addi	sp,sp,8
   1357c:	f800283a 	ret
   13580:	80c0030b 	ldhu	r3,12(r16)
   13584:	18fbffcc 	andi	r3,r3,61439
   13588:	80c0030d 	sth	r3,12(r16)
   1358c:	dfc00117 	ldw	ra,4(sp)
   13590:	dc000017 	ldw	r16,0(sp)
   13594:	dec00204 	addi	sp,sp,8
   13598:	f800283a 	ret

0001359c <__seofread>:
   1359c:	0005883a 	mov	r2,zero
   135a0:	f800283a 	ret

000135a4 <__swrite>:
   135a4:	2880030b 	ldhu	r2,12(r5)
   135a8:	defffb04 	addi	sp,sp,-20
   135ac:	dcc00315 	stw	r19,12(sp)
   135b0:	dc800215 	stw	r18,8(sp)
   135b4:	dc400115 	stw	r17,4(sp)
   135b8:	dc000015 	stw	r16,0(sp)
   135bc:	dfc00415 	stw	ra,16(sp)
   135c0:	10c0400c 	andi	r3,r2,256
   135c4:	2821883a 	mov	r16,r5
   135c8:	2023883a 	mov	r17,r4
   135cc:	3025883a 	mov	r18,r6
   135d0:	3827883a 	mov	r19,r7
   135d4:	18000526 	beq	r3,zero,135ec <__swrite+0x48>
   135d8:	2940038f 	ldh	r5,14(r5)
   135dc:	01c00084 	movi	r7,2
   135e0:	000d883a 	mov	r6,zero
   135e4:	00191fc0 	call	191fc <_lseek_r>
   135e8:	8080030b 	ldhu	r2,12(r16)
   135ec:	8140038f 	ldh	r5,14(r16)
   135f0:	10bbffcc 	andi	r2,r2,61439
   135f4:	980f883a 	mov	r7,r19
   135f8:	900d883a 	mov	r6,r18
   135fc:	8809883a 	mov	r4,r17
   13600:	8080030d 	sth	r2,12(r16)
   13604:	dfc00417 	ldw	ra,16(sp)
   13608:	dcc00317 	ldw	r19,12(sp)
   1360c:	dc800217 	ldw	r18,8(sp)
   13610:	dc400117 	ldw	r17,4(sp)
   13614:	dc000017 	ldw	r16,0(sp)
   13618:	dec00504 	addi	sp,sp,20
   1361c:	00175381 	jmpi	17538 <_write_r>

00013620 <__sseek>:
   13620:	defffe04 	addi	sp,sp,-8
   13624:	dc000015 	stw	r16,0(sp)
   13628:	2821883a 	mov	r16,r5
   1362c:	2940038f 	ldh	r5,14(r5)
   13630:	dfc00115 	stw	ra,4(sp)
   13634:	00191fc0 	call	191fc <_lseek_r>
   13638:	00ffffc4 	movi	r3,-1
   1363c:	10c00826 	beq	r2,r3,13660 <__sseek+0x40>
   13640:	80c0030b 	ldhu	r3,12(r16)
   13644:	80801415 	stw	r2,80(r16)
   13648:	18c40014 	ori	r3,r3,4096
   1364c:	80c0030d 	sth	r3,12(r16)
   13650:	dfc00117 	ldw	ra,4(sp)
   13654:	dc000017 	ldw	r16,0(sp)
   13658:	dec00204 	addi	sp,sp,8
   1365c:	f800283a 	ret
   13660:	80c0030b 	ldhu	r3,12(r16)
   13664:	18fbffcc 	andi	r3,r3,61439
   13668:	80c0030d 	sth	r3,12(r16)
   1366c:	dfc00117 	ldw	ra,4(sp)
   13670:	dc000017 	ldw	r16,0(sp)
   13674:	dec00204 	addi	sp,sp,8
   13678:	f800283a 	ret

0001367c <__sclose>:
   1367c:	2940038f 	ldh	r5,14(r5)
   13680:	00176ec1 	jmpi	176ec <_close_r>

00013684 <strcmp>:
   13684:	2144b03a 	or	r2,r4,r5
   13688:	108000cc 	andi	r2,r2,3
   1368c:	1000171e 	bne	r2,zero,136ec <strcmp+0x68>
   13690:	20800017 	ldw	r2,0(r4)
   13694:	28c00017 	ldw	r3,0(r5)
   13698:	10c0141e 	bne	r2,r3,136ec <strcmp+0x68>
   1369c:	027fbff4 	movhi	r9,65279
   136a0:	4a7fbfc4 	addi	r9,r9,-257
   136a4:	0086303a 	nor	r3,zero,r2
   136a8:	02202074 	movhi	r8,32897
   136ac:	1245883a 	add	r2,r2,r9
   136b0:	42202004 	addi	r8,r8,-32640
   136b4:	10c4703a 	and	r2,r2,r3
   136b8:	1204703a 	and	r2,r2,r8
   136bc:	10000226 	beq	r2,zero,136c8 <strcmp+0x44>
   136c0:	00002306 	br	13750 <strcmp+0xcc>
   136c4:	1000221e 	bne	r2,zero,13750 <strcmp+0xcc>
   136c8:	21000104 	addi	r4,r4,4
   136cc:	20c00017 	ldw	r3,0(r4)
   136d0:	29400104 	addi	r5,r5,4
   136d4:	29800017 	ldw	r6,0(r5)
   136d8:	1a4f883a 	add	r7,r3,r9
   136dc:	00c4303a 	nor	r2,zero,r3
   136e0:	3884703a 	and	r2,r7,r2
   136e4:	1204703a 	and	r2,r2,r8
   136e8:	19bff626 	beq	r3,r6,136c4 <__alt_data_end+0xfffd4ec4>
   136ec:	20800003 	ldbu	r2,0(r4)
   136f0:	10c03fcc 	andi	r3,r2,255
   136f4:	18c0201c 	xori	r3,r3,128
   136f8:	18ffe004 	addi	r3,r3,-128
   136fc:	18000c26 	beq	r3,zero,13730 <strcmp+0xac>
   13700:	29800007 	ldb	r6,0(r5)
   13704:	19800326 	beq	r3,r6,13714 <strcmp+0x90>
   13708:	00001306 	br	13758 <strcmp+0xd4>
   1370c:	29800007 	ldb	r6,0(r5)
   13710:	11800b1e 	bne	r2,r6,13740 <strcmp+0xbc>
   13714:	21000044 	addi	r4,r4,1
   13718:	20c00003 	ldbu	r3,0(r4)
   1371c:	29400044 	addi	r5,r5,1
   13720:	18803fcc 	andi	r2,r3,255
   13724:	1080201c 	xori	r2,r2,128
   13728:	10bfe004 	addi	r2,r2,-128
   1372c:	103ff71e 	bne	r2,zero,1370c <__alt_data_end+0xfffd4f0c>
   13730:	0007883a 	mov	r3,zero
   13734:	28800003 	ldbu	r2,0(r5)
   13738:	1885c83a 	sub	r2,r3,r2
   1373c:	f800283a 	ret
   13740:	28800003 	ldbu	r2,0(r5)
   13744:	18c03fcc 	andi	r3,r3,255
   13748:	1885c83a 	sub	r2,r3,r2
   1374c:	f800283a 	ret
   13750:	0005883a 	mov	r2,zero
   13754:	f800283a 	ret
   13758:	10c03fcc 	andi	r3,r2,255
   1375c:	003ff506 	br	13734 <__alt_data_end+0xfffd4f34>

00013760 <strlen>:
   13760:	208000cc 	andi	r2,r4,3
   13764:	10002026 	beq	r2,zero,137e8 <strlen+0x88>
   13768:	20800007 	ldb	r2,0(r4)
   1376c:	10002026 	beq	r2,zero,137f0 <strlen+0x90>
   13770:	2005883a 	mov	r2,r4
   13774:	00000206 	br	13780 <strlen+0x20>
   13778:	10c00007 	ldb	r3,0(r2)
   1377c:	18001826 	beq	r3,zero,137e0 <strlen+0x80>
   13780:	10800044 	addi	r2,r2,1
   13784:	10c000cc 	andi	r3,r2,3
   13788:	183ffb1e 	bne	r3,zero,13778 <__alt_data_end+0xfffd4f78>
   1378c:	10c00017 	ldw	r3,0(r2)
   13790:	01ffbff4 	movhi	r7,65279
   13794:	39ffbfc4 	addi	r7,r7,-257
   13798:	00ca303a 	nor	r5,zero,r3
   1379c:	01a02074 	movhi	r6,32897
   137a0:	19c7883a 	add	r3,r3,r7
   137a4:	31a02004 	addi	r6,r6,-32640
   137a8:	1946703a 	and	r3,r3,r5
   137ac:	1986703a 	and	r3,r3,r6
   137b0:	1800091e 	bne	r3,zero,137d8 <strlen+0x78>
   137b4:	10800104 	addi	r2,r2,4
   137b8:	10c00017 	ldw	r3,0(r2)
   137bc:	19cb883a 	add	r5,r3,r7
   137c0:	00c6303a 	nor	r3,zero,r3
   137c4:	28c6703a 	and	r3,r5,r3
   137c8:	1986703a 	and	r3,r3,r6
   137cc:	183ff926 	beq	r3,zero,137b4 <__alt_data_end+0xfffd4fb4>
   137d0:	00000106 	br	137d8 <strlen+0x78>
   137d4:	10800044 	addi	r2,r2,1
   137d8:	10c00007 	ldb	r3,0(r2)
   137dc:	183ffd1e 	bne	r3,zero,137d4 <__alt_data_end+0xfffd4fd4>
   137e0:	1105c83a 	sub	r2,r2,r4
   137e4:	f800283a 	ret
   137e8:	2005883a 	mov	r2,r4
   137ec:	003fe706 	br	1378c <__alt_data_end+0xfffd4f8c>
   137f0:	0005883a 	mov	r2,zero
   137f4:	f800283a 	ret

000137f8 <__ssvfscanf_r>:
   137f8:	2880030b 	ldhu	r2,12(r5)
   137fc:	deff4b04 	addi	sp,sp,-724
   13800:	df00b315 	stw	fp,716(sp)
   13804:	ddc0b215 	stw	r23,712(sp)
   13808:	dfc0b415 	stw	ra,720(sp)
   1380c:	dd80b115 	stw	r22,708(sp)
   13810:	dd40b015 	stw	r21,704(sp)
   13814:	dd00af15 	stw	r20,700(sp)
   13818:	dcc0ae15 	stw	r19,696(sp)
   1381c:	dc80ad15 	stw	r18,692(sp)
   13820:	dc40ac15 	stw	r17,688(sp)
   13824:	dc00ab15 	stw	r16,684(sp)
   13828:	10c8000c 	andi	r3,r2,8192
   1382c:	d9c09c15 	stw	r7,624(sp)
   13830:	2839883a 	mov	fp,r5
   13834:	202f883a 	mov	r23,r4
   13838:	1800061e 	bne	r3,zero,13854 <__ssvfscanf_r+0x5c>
   1383c:	29001917 	ldw	r4,100(r5)
   13840:	00f7ffc4 	movi	r3,-8193
   13844:	10880014 	ori	r2,r2,8192
   13848:	20c6703a 	and	r3,r4,r3
   1384c:	2880030d 	sth	r2,12(r5)
   13850:	28c01915 	stw	r3,100(r5)
   13854:	30800003 	ldbu	r2,0(r6)
   13858:	0021883a 	mov	r16,zero
   1385c:	058000f4 	movhi	r22,3
   13860:	d800a115 	stw	zero,644(sp)
   13864:	d8009e15 	stw	zero,632(sp)
   13868:	d800a015 	stw	zero,640(sp)
   1386c:	d8809b15 	stw	r2,620(sp)
   13870:	b5a8a504 	addi	r22,r22,-23916
   13874:	8025883a 	mov	r18,r16
   13878:	e027883a 	mov	r19,fp
   1387c:	35000044 	addi	r20,r6,1
   13880:	10001e26 	beq	r2,zero,138fc <__ssvfscanf_r+0x104>
   13884:	b4000017 	ldw	r16,0(r22)
   13888:	8087883a 	add	r3,r16,r2
   1388c:	18c00043 	ldbu	r3,1(r3)
   13890:	18c0020c 	andi	r3,r3,8
   13894:	18001b26 	beq	r3,zero,13904 <__ssvfscanf_r+0x10c>
   13898:	98800117 	ldw	r2,4(r19)
   1389c:	00800e0e 	bge	zero,r2,138d8 <__ssvfscanf_r+0xe0>
   138a0:	98c00017 	ldw	r3,0(r19)
   138a4:	b1000017 	ldw	r4,0(r22)
   138a8:	18800003 	ldbu	r2,0(r3)
   138ac:	2085883a 	add	r2,r4,r2
   138b0:	10800043 	ldbu	r2,1(r2)
   138b4:	1080020c 	andi	r2,r2,8
   138b8:	10000b26 	beq	r2,zero,138e8 <__ssvfscanf_r+0xf0>
   138bc:	98800117 	ldw	r2,4(r19)
   138c0:	18c00044 	addi	r3,r3,1
   138c4:	98c00015 	stw	r3,0(r19)
   138c8:	10bfffc4 	addi	r2,r2,-1
   138cc:	98800115 	stw	r2,4(r19)
   138d0:	94800044 	addi	r18,r18,1
   138d4:	00bff216 	blt	zero,r2,138a0 <__alt_data_end+0xfffd50a0>
   138d8:	980b883a 	mov	r5,r19
   138dc:	b809883a 	mov	r4,r23
   138e0:	001cc300 	call	1cc30 <__ssrefill_r>
   138e4:	103fee26 	beq	r2,zero,138a0 <__alt_data_end+0xfffd50a0>
   138e8:	a00d883a 	mov	r6,r20
   138ec:	30800003 	ldbu	r2,0(r6)
   138f0:	35000044 	addi	r20,r6,1
   138f4:	d8809b15 	stw	r2,620(sp)
   138f8:	103fe21e 	bne	r2,zero,13884 <__alt_data_end+0xfffd5084>
   138fc:	d880a017 	ldw	r2,640(sp)
   13900:	00009a06 	br	13b6c <__ssvfscanf_r+0x374>
   13904:	00c00944 	movi	r3,37
   13908:	10c0891e 	bne	r2,r3,13b30 <__ssvfscanf_r+0x338>
   1390c:	0039883a 	mov	fp,zero
   13910:	35400043 	ldbu	r21,1(r6)
   13914:	0023883a 	mov	r17,zero
   13918:	01801e04 	movi	r6,120
   1391c:	00c01b04 	movi	r3,108
   13920:	e009883a 	mov	r4,fp
   13924:	a1c00044 	addi	r7,r20,1
   13928:	3540a236 	bltu	r6,r21,13bb4 <__ssvfscanf_r+0x3bc>
   1392c:	a80490ba 	slli	r2,r21,2
   13930:	01400074 	movhi	r5,1
   13934:	294e5104 	addi	r5,r5,14660
   13938:	1145883a 	add	r2,r2,r5
   1393c:	10800017 	ldw	r2,0(r2)
   13940:	1000683a 	jmp	r2
   13944:	00013b68 	cmpgeui	zero,zero,1261
   13948:	00013bb4 	movhi	zero,1262
   1394c:	00013bb4 	movhi	zero,1262
   13950:	00013bb4 	movhi	zero,1262
   13954:	00013bb4 	movhi	zero,1262
   13958:	00013bb4 	movhi	zero,1262
   1395c:	00013bb4 	movhi	zero,1262
   13960:	00013bb4 	movhi	zero,1262
   13964:	00013bb4 	movhi	zero,1262
   13968:	00013bb4 	movhi	zero,1262
   1396c:	00013bb4 	movhi	zero,1262
   13970:	00013bb4 	movhi	zero,1262
   13974:	00013bb4 	movhi	zero,1262
   13978:	00013bb4 	movhi	zero,1262
   1397c:	00013bb4 	movhi	zero,1262
   13980:	00013bb4 	movhi	zero,1262
   13984:	00013bb4 	movhi	zero,1262
   13988:	00013bb4 	movhi	zero,1262
   1398c:	00013bb4 	movhi	zero,1262
   13990:	00013bb4 	movhi	zero,1262
   13994:	00013bb4 	movhi	zero,1262
   13998:	00013bb4 	movhi	zero,1262
   1399c:	00013bb4 	movhi	zero,1262
   139a0:	00013bb4 	movhi	zero,1262
   139a4:	00013bb4 	movhi	zero,1262
   139a8:	00013bb4 	movhi	zero,1262
   139ac:	00013bb4 	movhi	zero,1262
   139b0:	00013bb4 	movhi	zero,1262
   139b4:	00013bb4 	movhi	zero,1262
   139b8:	00013bb4 	movhi	zero,1262
   139bc:	00013bb4 	movhi	zero,1262
   139c0:	00013bb4 	movhi	zero,1262
   139c4:	00013bb4 	movhi	zero,1262
   139c8:	00013bb4 	movhi	zero,1262
   139cc:	00013bb4 	movhi	zero,1262
   139d0:	00013bb4 	movhi	zero,1262
   139d4:	00013bb4 	movhi	zero,1262
   139d8:	00013b28 	cmpgeui	zero,zero,1260
   139dc:	00013bb4 	movhi	zero,1262
   139e0:	00013bb4 	movhi	zero,1262
   139e4:	00013bb4 	movhi	zero,1262
   139e8:	00013bb4 	movhi	zero,1262
   139ec:	00013b9c 	xori	zero,zero,1262
   139f0:	00013bb4 	movhi	zero,1262
   139f4:	00013bb4 	movhi	zero,1262
   139f8:	00013bb4 	movhi	zero,1262
   139fc:	00013bb4 	movhi	zero,1262
   13a00:	00013bb4 	movhi	zero,1262
   13a04:	00013cfc 	xorhi	zero,zero,1267
   13a08:	00013cfc 	xorhi	zero,zero,1267
   13a0c:	00013cfc 	xorhi	zero,zero,1267
   13a10:	00013cfc 	xorhi	zero,zero,1267
   13a14:	00013cfc 	xorhi	zero,zero,1267
   13a18:	00013cfc 	xorhi	zero,zero,1267
   13a1c:	00013cfc 	xorhi	zero,zero,1267
   13a20:	00013cfc 	xorhi	zero,zero,1267
   13a24:	00013cfc 	xorhi	zero,zero,1267
   13a28:	00013cfc 	xorhi	zero,zero,1267
   13a2c:	00013bb4 	movhi	zero,1262
   13a30:	00013bb4 	movhi	zero,1262
   13a34:	00013bb4 	movhi	zero,1262
   13a38:	00013bb4 	movhi	zero,1262
   13a3c:	00013bb4 	movhi	zero,1262
   13a40:	00013bb4 	movhi	zero,1262
   13a44:	00013bb4 	movhi	zero,1262
   13a48:	00013bb4 	movhi	zero,1262
   13a4c:	00013bb4 	movhi	zero,1262
   13a50:	00013bb4 	movhi	zero,1262
   13a54:	00013ccc 	andi	zero,zero,1267
   13a58:	00013da8 	cmpgeui	zero,zero,1270
   13a5c:	00013bb4 	movhi	zero,1262
   13a60:	00013da8 	cmpgeui	zero,zero,1270
   13a64:	00013bb4 	movhi	zero,1262
   13a68:	00013bb4 	movhi	zero,1262
   13a6c:	00013bb4 	movhi	zero,1262
   13a70:	00013bb4 	movhi	zero,1262
   13a74:	00013d94 	movui	zero,1270
   13a78:	00013bb4 	movhi	zero,1262
   13a7c:	00013bb4 	movhi	zero,1262
   13a80:	00013d64 	muli	zero,zero,1269
   13a84:	00013bb4 	movhi	zero,1262
   13a88:	00013bb4 	movhi	zero,1262
   13a8c:	00013bb4 	movhi	zero,1262
   13a90:	00013bb4 	movhi	zero,1262
   13a94:	00013bb4 	movhi	zero,1262
   13a98:	00013bb4 	movhi	zero,1262
   13a9c:	00013bb4 	movhi	zero,1262
   13aa0:	00013bb4 	movhi	zero,1262
   13aa4:	00013d34 	movhi	zero,1268
   13aa8:	00013bb4 	movhi	zero,1262
   13aac:	00013bb4 	movhi	zero,1262
   13ab0:	00013ef0 	cmpltui	zero,zero,1275
   13ab4:	00013bb4 	movhi	zero,1262
   13ab8:	00013bb4 	movhi	zero,1262
   13abc:	00013bb4 	movhi	zero,1262
   13ac0:	00013bb4 	movhi	zero,1262
   13ac4:	00013bb4 	movhi	zero,1262
   13ac8:	00013bb4 	movhi	zero,1262
   13acc:	00013bb4 	movhi	zero,1262
   13ad0:	00013e70 	cmpltui	zero,zero,1273
   13ad4:	00013e44 	movi	zero,1273
   13ad8:	00013da8 	cmpgeui	zero,zero,1270
   13adc:	00013da8 	cmpgeui	zero,zero,1270
   13ae0:	00013da8 	cmpgeui	zero,zero,1270
   13ae4:	00013e30 	cmpltui	zero,zero,1272
   13ae8:	00013f80 	call	13f8 <set_addrs_to_default+0x2b8>
   13aec:	00013bb4 	movhi	zero,1262
   13af0:	00013bb4 	movhi	zero,1262
   13af4:	00013e1c 	xori	zero,zero,1272
   13af8:	00013bb4 	movhi	zero,1262
   13afc:	00013dec 	andhi	zero,zero,1271
   13b00:	00013dc0 	call	13dc <set_addrs_to_default+0x29c>
   13b04:	00013c9c 	xori	zero,zero,1266
   13b08:	00013bb4 	movhi	zero,1262
   13b0c:	00013bb4 	movhi	zero,1262
   13b10:	00013c84 	movi	zero,1266
   13b14:	00013bb4 	movhi	zero,1262
   13b18:	00013c08 	cmpgei	zero,zero,1264
   13b1c:	00013bb4 	movhi	zero,1262
   13b20:	00013bb4 	movhi	zero,1262
   13b24:	00013d34 	movhi	zero,1268
   13b28:	d9c09d15 	stw	r7,628(sp)
   13b2c:	3829883a 	mov	r20,r7
   13b30:	98800117 	ldw	r2,4(r19)
   13b34:	0081c60e 	bge	zero,r2,14250 <__ssvfscanf_r+0xa58>
   13b38:	98800017 	ldw	r2,0(r19)
   13b3c:	a0ffffc3 	ldbu	r3,-1(r20)
   13b40:	11000003 	ldbu	r4,0(r2)
   13b44:	20ff6d1e 	bne	r4,r3,138fc <__alt_data_end+0xfffd50fc>
   13b48:	98c00117 	ldw	r3,4(r19)
   13b4c:	10800044 	addi	r2,r2,1
   13b50:	98800015 	stw	r2,0(r19)
   13b54:	18bfffc4 	addi	r2,r3,-1
   13b58:	98800115 	stw	r2,4(r19)
   13b5c:	94800044 	addi	r18,r18,1
   13b60:	a00d883a 	mov	r6,r20
   13b64:	003f6106 	br	138ec <__alt_data_end+0xfffd50ec>
   13b68:	00bfffc4 	movi	r2,-1
   13b6c:	dfc0b417 	ldw	ra,720(sp)
   13b70:	df00b317 	ldw	fp,716(sp)
   13b74:	ddc0b217 	ldw	r23,712(sp)
   13b78:	dd80b117 	ldw	r22,708(sp)
   13b7c:	dd40b017 	ldw	r21,704(sp)
   13b80:	dd00af17 	ldw	r20,700(sp)
   13b84:	dcc0ae17 	ldw	r19,696(sp)
   13b88:	dc80ad17 	ldw	r18,692(sp)
   13b8c:	dc40ac17 	ldw	r17,688(sp)
   13b90:	dc00ab17 	ldw	r16,684(sp)
   13b94:	dec0b504 	addi	sp,sp,724
   13b98:	f800283a 	ret
   13b9c:	a1400043 	ldbu	r5,1(r20)
   13ba0:	3829883a 	mov	r20,r7
   13ba4:	8c400414 	ori	r17,r17,16
   13ba8:	2d403fcc 	andi	r21,r5,255
   13bac:	a1c00044 	addi	r7,r20,1
   13bb0:	357f5e2e 	bgeu	r6,r21,1392c <__alt_data_end+0xfffd512c>
   13bb4:	856b883a 	add	r21,r16,r21
   13bb8:	a8800043 	ldbu	r2,1(r21)
   13bbc:	d9c09d15 	stw	r7,628(sp)
   13bc0:	00c00044 	movi	r3,1
   13bc4:	108000cc 	andi	r2,r2,3
   13bc8:	2039883a 	mov	fp,r4
   13bcc:	10c1a526 	beq	r2,r3,14264 <__ssvfscanf_r+0xa6c>
   13bd0:	98800117 	ldw	r2,4(r19)
   13bd4:	00804216 	blt	zero,r2,13ce0 <__ssvfscanf_r+0x4e8>
   13bd8:	980b883a 	mov	r5,r19
   13bdc:	b809883a 	mov	r4,r23
   13be0:	001cc300 	call	1cc30 <__ssrefill_r>
   13be4:	10015e1e 	bne	r2,zero,14160 <__ssvfscanf_r+0x968>
   13be8:	010000b4 	movhi	r4,2
   13bec:	212fff04 	addi	r4,r4,-16388
   13bf0:	01400284 	movi	r5,10
   13bf4:	b4000017 	ldw	r16,0(r22)
   13bf8:	d900a115 	stw	r4,644(sp)
   13bfc:	d9409e15 	stw	r5,632(sp)
   13c00:	050000c4 	movi	r20,3
   13c04:	00000a06 	br	13c30 <__ssvfscanf_r+0x438>
   13c08:	98800117 	ldw	r2,4(r19)
   13c0c:	d9c09d15 	stw	r7,628(sp)
   13c10:	2039883a 	mov	fp,r4
   13c14:	0081e20e 	bge	zero,r2,143a0 <__ssvfscanf_r+0xba8>
   13c18:	00c000b4 	movhi	r3,2
   13c1c:	18f15d04 	addi	r3,r3,-14988
   13c20:	01000284 	movi	r4,10
   13c24:	d8c0a115 	stw	r3,644(sp)
   13c28:	d9009e15 	stw	r4,632(sp)
   13c2c:	050000c4 	movi	r20,3
   13c30:	98c00017 	ldw	r3,0(r19)
   13c34:	00000206 	br	13c40 <__ssvfscanf_r+0x448>
   13c38:	18c00044 	addi	r3,r3,1
   13c3c:	98c00015 	stw	r3,0(r19)
   13c40:	19000003 	ldbu	r4,0(r3)
   13c44:	20803fcc 	andi	r2,r4,255
   13c48:	8085883a 	add	r2,r16,r2
   13c4c:	10800043 	ldbu	r2,1(r2)
   13c50:	1140020c 	andi	r5,r2,8
   13c54:	28020126 	beq	r5,zero,1445c <__ssvfscanf_r+0xc64>
   13c58:	98800117 	ldw	r2,4(r19)
   13c5c:	94800044 	addi	r18,r18,1
   13c60:	10bfffc4 	addi	r2,r2,-1
   13c64:	98800115 	stw	r2,4(r19)
   13c68:	00bff316 	blt	zero,r2,13c38 <__alt_data_end+0xfffd5438>
   13c6c:	980b883a 	mov	r5,r19
   13c70:	b809883a 	mov	r4,r23
   13c74:	001cc300 	call	1cc30 <__ssrefill_r>
   13c78:	1001391e 	bne	r2,zero,14160 <__ssvfscanf_r+0x968>
   13c7c:	b4000017 	ldw	r16,0(r22)
   13c80:	003feb06 	br	13c30 <__alt_data_end+0xfffd5430>
   13c84:	98800117 	ldw	r2,4(r19)
   13c88:	d9c09d15 	stw	r7,628(sp)
   13c8c:	2039883a 	mov	fp,r4
   13c90:	0081aa0e 	bge	zero,r2,1433c <__ssvfscanf_r+0xb44>
   13c94:	05000084 	movi	r20,2
   13c98:	003fe506 	br	13c30 <__alt_data_end+0xfffd5430>
   13c9c:	98800117 	ldw	r2,4(r19)
   13ca0:	d9c09d15 	stw	r7,628(sp)
   13ca4:	2039883a 	mov	fp,r4
   13ca8:	8c408814 	ori	r17,r17,544
   13cac:	0081df0e 	bge	zero,r2,1442c <__ssvfscanf_r+0xc34>
   13cb0:	00c000b4 	movhi	r3,2
   13cb4:	18f15d04 	addi	r3,r3,-14988
   13cb8:	01000404 	movi	r4,16
   13cbc:	d8c0a115 	stw	r3,644(sp)
   13cc0:	d9009e15 	stw	r4,632(sp)
   13cc4:	050000c4 	movi	r20,3
   13cc8:	003fd906 	br	13c30 <__alt_data_end+0xfffd5430>
   13ccc:	98800117 	ldw	r2,4(r19)
   13cd0:	d9c09d15 	stw	r7,628(sp)
   13cd4:	2039883a 	mov	fp,r4
   13cd8:	8c400054 	ori	r17,r17,1
   13cdc:	0081850e 	bge	zero,r2,142f4 <__ssvfscanf_r+0xafc>
   13ce0:	00c000b4 	movhi	r3,2
   13ce4:	18efff04 	addi	r3,r3,-16388
   13ce8:	01000284 	movi	r4,10
   13cec:	d8c0a115 	stw	r3,644(sp)
   13cf0:	d9009e15 	stw	r4,632(sp)
   13cf4:	050000c4 	movi	r20,3
   13cf8:	003fcd06 	br	13c30 <__alt_data_end+0xfffd5430>
   13cfc:	01400284 	movi	r5,10
   13d00:	d8c0a615 	stw	r3,664(sp)
   13d04:	d980a915 	stw	r6,676(sp)
   13d08:	d9c0aa15 	stw	r7,680(sp)
   13d0c:	002587c0 	call	2587c <__mulsi3>
   13d10:	a1400043 	ldbu	r5,1(r20)
   13d14:	d9c0aa17 	ldw	r7,680(sp)
   13d18:	1545883a 	add	r2,r2,r21
   13d1c:	113ff404 	addi	r4,r2,-48
   13d20:	3829883a 	mov	r20,r7
   13d24:	2d403fcc 	andi	r21,r5,255
   13d28:	d8c0a617 	ldw	r3,664(sp)
   13d2c:	d980a917 	ldw	r6,676(sp)
   13d30:	003efc06 	br	13924 <__alt_data_end+0xfffd5124>
   13d34:	98800117 	ldw	r2,4(r19)
   13d38:	d9c09d15 	stw	r7,628(sp)
   13d3c:	2039883a 	mov	fp,r4
   13d40:	8c408014 	ori	r17,r17,512
   13d44:	0081710e 	bge	zero,r2,1430c <__ssvfscanf_r+0xb14>
   13d48:	014000b4 	movhi	r5,2
   13d4c:	29715d04 	addi	r5,r5,-14988
   13d50:	00800404 	movi	r2,16
   13d54:	d940a115 	stw	r5,644(sp)
   13d58:	d8809e15 	stw	r2,632(sp)
   13d5c:	050000c4 	movi	r20,3
   13d60:	003fb306 	br	13c30 <__alt_data_end+0xfffd5430>
   13d64:	98800117 	ldw	r2,4(r19)
   13d68:	d9c09d15 	stw	r7,628(sp)
   13d6c:	2039883a 	mov	fp,r4
   13d70:	8c400054 	ori	r17,r17,1
   13d74:	0081840e 	bge	zero,r2,14388 <__ssvfscanf_r+0xb90>
   13d78:	014000b4 	movhi	r5,2
   13d7c:	29715d04 	addi	r5,r5,-14988
   13d80:	00800204 	movi	r2,8
   13d84:	d940a115 	stw	r5,644(sp)
   13d88:	d8809e15 	stw	r2,632(sp)
   13d8c:	050000c4 	movi	r20,3
   13d90:	003fa706 	br	13c30 <__alt_data_end+0xfffd5430>
   13d94:	a1400043 	ldbu	r5,1(r20)
   13d98:	8c400094 	ori	r17,r17,2
   13d9c:	3829883a 	mov	r20,r7
   13da0:	2d403fcc 	andi	r21,r5,255
   13da4:	003edf06 	br	13924 <__alt_data_end+0xfffd5124>
   13da8:	98800117 	ldw	r2,4(r19)
   13dac:	d9c09d15 	stw	r7,628(sp)
   13db0:	2039883a 	mov	fp,r4
   13db4:	00816d0e 	bge	zero,r2,1436c <__ssvfscanf_r+0xb74>
   13db8:	05000104 	movi	r20,4
   13dbc:	003f9c06 	br	13c30 <__alt_data_end+0xfffd5430>
   13dc0:	98800117 	ldw	r2,4(r19)
   13dc4:	d9c09d15 	stw	r7,628(sp)
   13dc8:	2039883a 	mov	fp,r4
   13dcc:	0081800e 	bge	zero,r2,143d0 <__ssvfscanf_r+0xbd8>
   13dd0:	010000b4 	movhi	r4,2
   13dd4:	21315d04 	addi	r4,r4,-14988
   13dd8:	01400204 	movi	r5,8
   13ddc:	d900a115 	stw	r4,644(sp)
   13de0:	d9409e15 	stw	r5,632(sp)
   13de4:	050000c4 	movi	r20,3
   13de8:	003f9106 	br	13c30 <__alt_data_end+0xfffd5430>
   13dec:	d9c09d15 	stw	r7,628(sp)
   13df0:	8880040c 	andi	r2,r17,16
   13df4:	1000a01e 	bne	r2,zero,14078 <__ssvfscanf_r+0x880>
   13df8:	8880010c 	andi	r2,r17,4
   13dfc:	10012826 	beq	r2,zero,142a0 <__ssvfscanf_r+0xaa8>
   13e00:	d9009c17 	ldw	r4,624(sp)
   13e04:	3829883a 	mov	r20,r7
   13e08:	20800017 	ldw	r2,0(r4)
   13e0c:	21000104 	addi	r4,r4,4
   13e10:	d9009c15 	stw	r4,624(sp)
   13e14:	1480000d 	sth	r18,0(r2)
   13e18:	003eb306 	br	138e8 <__alt_data_end+0xfffd50e8>
   13e1c:	a5400043 	ldbu	r21,1(r20)
   13e20:	a8c11a26 	beq	r21,r3,1428c <__ssvfscanf_r+0xa94>
   13e24:	8c400054 	ori	r17,r17,1
   13e28:	3829883a 	mov	r20,r7
   13e2c:	003ebd06 	br	13924 <__alt_data_end+0xfffd5124>
   13e30:	a1400043 	ldbu	r5,1(r20)
   13e34:	8c400114 	ori	r17,r17,4
   13e38:	3829883a 	mov	r20,r7
   13e3c:	2d403fcc 	andi	r21,r5,255
   13e40:	003eb806 	br	13924 <__alt_data_end+0xfffd5124>
   13e44:	98800117 	ldw	r2,4(r19)
   13e48:	d9c09d15 	stw	r7,628(sp)
   13e4c:	2039883a 	mov	fp,r4
   13e50:	00bf610e 	bge	zero,r2,13bd8 <__alt_data_end+0xfffd53d8>
   13e54:	008000b4 	movhi	r2,2
   13e58:	10afff04 	addi	r2,r2,-16388
   13e5c:	00c00284 	movi	r3,10
   13e60:	d880a115 	stw	r2,644(sp)
   13e64:	d8c09e15 	stw	r3,632(sp)
   13e68:	050000c4 	movi	r20,3
   13e6c:	003f7006 	br	13c30 <__alt_data_end+0xfffd5430>
   13e70:	98800117 	ldw	r2,4(r19)
   13e74:	d9c09d15 	stw	r7,628(sp)
   13e78:	2039883a 	mov	fp,r4
   13e7c:	0080c60e 	bge	zero,r2,14198 <__ssvfscanf_r+0x9a0>
   13e80:	e000011e 	bne	fp,zero,13e88 <__ssvfscanf_r+0x690>
   13e84:	07000044 	movi	fp,1
   13e88:	8880004c 	andi	r2,r17,1
   13e8c:	1000461e 	bne	r2,zero,13fa8 <__ssvfscanf_r+0x7b0>
   13e90:	8c40040c 	andi	r17,r17,16
   13e94:	8800dc26 	beq	r17,zero,14208 <__ssvfscanf_r+0xa10>
   13e98:	0021883a 	mov	r16,zero
   13e9c:	00000806 	br	13ec0 <__ssvfscanf_r+0x6c8>
   13ea0:	1887883a 	add	r3,r3,r2
   13ea4:	980b883a 	mov	r5,r19
   13ea8:	b809883a 	mov	r4,r23
   13eac:	98c00015 	stw	r3,0(r19)
   13eb0:	80a1883a 	add	r16,r16,r2
   13eb4:	e0b9c83a 	sub	fp,fp,r2
   13eb8:	001cc300 	call	1cc30 <__ssrefill_r>
   13ebc:	1000cc1e 	bne	r2,zero,141f0 <__ssvfscanf_r+0x9f8>
   13ec0:	98800117 	ldw	r2,4(r19)
   13ec4:	98c00017 	ldw	r3,0(r19)
   13ec8:	173ff516 	blt	r2,fp,13ea0 <__alt_data_end+0xfffd56a0>
   13ecc:	1705c83a 	sub	r2,r2,fp
   13ed0:	1f15883a 	add	r10,r3,fp
   13ed4:	8721883a 	add	r16,r16,fp
   13ed8:	98800115 	stw	r2,4(r19)
   13edc:	9a800015 	stw	r10,0(r19)
   13ee0:	dd009d17 	ldw	r20,628(sp)
   13ee4:	9425883a 	add	r18,r18,r16
   13ee8:	a00d883a 	mov	r6,r20
   13eec:	003e7f06 	br	138ec <__alt_data_end+0xfffd50ec>
   13ef0:	2039883a 	mov	fp,r4
   13ef4:	380b883a 	mov	r5,r7
   13ef8:	d9005884 	addi	r4,sp,354
   13efc:	d9c09d15 	stw	r7,628(sp)
   13f00:	001a7000 	call	1a700 <__sccl>
   13f04:	1029883a 	mov	r20,r2
   13f08:	98800117 	ldw	r2,4(r19)
   13f0c:	0081120e 	bge	zero,r2,14358 <__ssvfscanf_r+0xb60>
   13f10:	99000017 	ldw	r4,0(r19)
   13f14:	20800003 	ldbu	r2,0(r4)
   13f18:	e0005a26 	beq	fp,zero,14084 <__ssvfscanf_r+0x88c>
   13f1c:	8c40040c 	andi	r17,r17,16
   13f20:	88005b26 	beq	r17,zero,14090 <__ssvfscanf_r+0x898>
   13f24:	e023883a 	mov	r17,fp
   13f28:	0021883a 	mov	r16,zero
   13f2c:	00000106 	br	13f34 <__ssvfscanf_r+0x73c>
   13f30:	20800003 	ldbu	r2,0(r4)
   13f34:	10803fcc 	andi	r2,r2,255
   13f38:	d8c05884 	addi	r3,sp,354
   13f3c:	1885883a 	add	r2,r3,r2
   13f40:	10800007 	ldb	r2,0(r2)
   13f44:	1000ae26 	beq	r2,zero,14200 <__ssvfscanf_r+0xa08>
   13f48:	98800117 	ldw	r2,4(r19)
   13f4c:	21000044 	addi	r4,r4,1
   13f50:	84000044 	addi	r16,r16,1
   13f54:	10bfffc4 	addi	r2,r2,-1
   13f58:	98800115 	stw	r2,4(r19)
   13f5c:	99000015 	stw	r4,0(r19)
   13f60:	8700a126 	beq	r16,fp,141e8 <__ssvfscanf_r+0x9f0>
   13f64:	00bff216 	blt	zero,r2,13f30 <__alt_data_end+0xfffd5730>
   13f68:	980b883a 	mov	r5,r19
   13f6c:	b809883a 	mov	r4,r23
   13f70:	001cc300 	call	1cc30 <__ssrefill_r>
   13f74:	10009b1e 	bne	r2,zero,141e4 <__ssvfscanf_r+0x9ec>
   13f78:	99000017 	ldw	r4,0(r19)
   13f7c:	003fec06 	br	13f30 <__alt_data_end+0xfffd5730>
   13f80:	98800117 	ldw	r2,4(r19)
   13f84:	d9c09d15 	stw	r7,628(sp)
   13f88:	2039883a 	mov	fp,r4
   13f8c:	00811c0e 	bge	zero,r2,14400 <__ssvfscanf_r+0xc08>
   13f90:	014000b4 	movhi	r5,2
   13f94:	296fff04 	addi	r5,r5,-16388
   13f98:	d940a115 	stw	r5,644(sp)
   13f9c:	d8009e15 	stw	zero,632(sp)
   13fa0:	050000c4 	movi	r20,3
   13fa4:	003f2206 	br	13c30 <__alt_data_end+0xfffd5430>
   13fa8:	dd409904 	addi	r21,sp,612
   13fac:	8c40040c 	andi	r17,r17,16
   13fb0:	01800204 	movi	r6,8
   13fb4:	000b883a 	mov	r5,zero
   13fb8:	a809883a 	mov	r4,r21
   13fbc:	dc409f15 	stw	r17,636(sp)
   13fc0:	00129c40 	call	129c4 <memset>
   13fc4:	dc409f17 	ldw	r17,636(sp)
   13fc8:	88006e26 	beq	r17,zero,14184 <__ssvfscanf_r+0x98c>
   13fcc:	0029883a 	mov	r20,zero
   13fd0:	0023883a 	mov	r17,zero
   13fd4:	00191a80 	call	191a8 <__locale_mb_cur_max>
   13fd8:	14406126 	beq	r2,r17,14160 <__ssvfscanf_r+0x968>
   13fdc:	98800017 	ldw	r2,0(r19)
   13fe0:	98c00117 	ldw	r3,4(r19)
   13fe4:	d9000104 	addi	r4,sp,4
   13fe8:	12000003 	ldbu	r8,0(r2)
   13fec:	18ffffc4 	addi	r3,r3,-1
   13ff0:	10800044 	addi	r2,r2,1
   13ff4:	98c00115 	stw	r3,4(r19)
   13ff8:	98800015 	stw	r2,0(r19)
   13ffc:	8c000044 	addi	r16,r17,1
   14000:	dd400015 	stw	r21,0(sp)
   14004:	2463883a 	add	r17,r4,r17
   14008:	200d883a 	mov	r6,r4
   1400c:	a00b883a 	mov	r5,r20
   14010:	800f883a 	mov	r7,r16
   14014:	b809883a 	mov	r4,r23
   14018:	8a000005 	stb	r8,0(r17)
   1401c:	001925c0 	call	1925c <_mbrtowc_r>
   14020:	017fffc4 	movi	r5,-1
   14024:	11404e26 	beq	r2,r5,14160 <__ssvfscanf_r+0x968>
   14028:	1000601e 	bne	r2,zero,141ac <__ssvfscanf_r+0x9b4>
   1402c:	d8c09f17 	ldw	r3,636(sp)
   14030:	1800641e 	bne	r3,zero,141c4 <__ssvfscanf_r+0x9cc>
   14034:	a0000015 	stw	zero,0(r20)
   14038:	9425883a 	add	r18,r18,r16
   1403c:	e179883a 	add	fp,fp,r5
   14040:	a5000104 	addi	r20,r20,4
   14044:	98800117 	ldw	r2,4(r19)
   14048:	0023883a 	mov	r17,zero
   1404c:	00804b16 	blt	zero,r2,1417c <__ssvfscanf_r+0x984>
   14050:	980b883a 	mov	r5,r19
   14054:	b809883a 	mov	r4,r23
   14058:	001cc300 	call	1cc30 <__ssrefill_r>
   1405c:	10004726 	beq	r2,zero,1417c <__ssvfscanf_r+0x984>
   14060:	88003f1e 	bne	r17,zero,14160 <__ssvfscanf_r+0x968>
   14064:	d8c09f17 	ldw	r3,636(sp)
   14068:	1800031e 	bne	r3,zero,14078 <__ssvfscanf_r+0x880>
   1406c:	d900a017 	ldw	r4,640(sp)
   14070:	21000044 	addi	r4,r4,1
   14074:	d900a015 	stw	r4,640(sp)
   14078:	dd009d17 	ldw	r20,628(sp)
   1407c:	a00d883a 	mov	r6,r20
   14080:	003e1a06 	br	138ec <__alt_data_end+0xfffd50ec>
   14084:	8c40040c 	andi	r17,r17,16
   14088:	073fffc4 	movi	fp,-1
   1408c:	883fa51e 	bne	r17,zero,13f24 <__alt_data_end+0xfffd5724>
   14090:	d9409c17 	ldw	r5,624(sp)
   14094:	e2bfffc4 	addi	r10,fp,-1
   14098:	2c000017 	ldw	r16,0(r5)
   1409c:	2c400104 	addi	r17,r5,4
   140a0:	8007883a 	mov	r3,r16
   140a4:	82ab883a 	add	r21,r16,r10
   140a8:	00000306 	br	140b8 <__ssvfscanf_r+0x8c0>
   140ac:	99000017 	ldw	r4,0(r19)
   140b0:	e007883a 	mov	r3,fp
   140b4:	20800003 	ldbu	r2,0(r4)
   140b8:	10803fcc 	andi	r2,r2,255
   140bc:	d9405884 	addi	r5,sp,354
   140c0:	2885883a 	add	r2,r5,r2
   140c4:	10800007 	ldb	r2,0(r2)
   140c8:	10004b26 	beq	r2,zero,141f8 <__ssvfscanf_r+0xa00>
   140cc:	98800117 	ldw	r2,4(r19)
   140d0:	21400044 	addi	r5,r4,1
   140d4:	99400015 	stw	r5,0(r19)
   140d8:	10bfffc4 	addi	r2,r2,-1
   140dc:	98800115 	stw	r2,4(r19)
   140e0:	20800003 	ldbu	r2,0(r4)
   140e4:	1f000044 	addi	fp,r3,1
   140e8:	18800005 	stb	r2,0(r3)
   140ec:	1d400726 	beq	r3,r21,1410c <__ssvfscanf_r+0x914>
   140f0:	98800117 	ldw	r2,4(r19)
   140f4:	00bfed16 	blt	zero,r2,140ac <__alt_data_end+0xfffd58ac>
   140f8:	980b883a 	mov	r5,r19
   140fc:	b809883a 	mov	r4,r23
   14100:	001cc300 	call	1cc30 <__ssrefill_r>
   14104:	103fe926 	beq	r2,zero,140ac <__alt_data_end+0xfffd58ac>
   14108:	87001526 	beq	r16,fp,14160 <__ssvfscanf_r+0x968>
   1410c:	e421c83a 	sub	r16,fp,r16
   14110:	803dfa26 	beq	r16,zero,138fc <__alt_data_end+0xfffd50fc>
   14114:	d880a017 	ldw	r2,640(sp)
   14118:	e0000005 	stb	zero,0(fp)
   1411c:	dc409c15 	stw	r17,624(sp)
   14120:	10800044 	addi	r2,r2,1
   14124:	d880a015 	stw	r2,640(sp)
   14128:	9425883a 	add	r18,r18,r16
   1412c:	a00d883a 	mov	r6,r20
   14130:	003dee06 	br	138ec <__alt_data_end+0xfffd50ec>
   14134:	013fff84 	movi	r4,-2
   14138:	1103ed1e 	bne	r2,r4,150f0 <__ssvfscanf_r+0x18f8>
   1413c:	8821883a 	mov	r16,r17
   14140:	98800117 	ldw	r2,4(r19)
   14144:	00834116 	blt	zero,r2,14e4c <__ssvfscanf_r+0x1654>
   14148:	980b883a 	mov	r5,r19
   1414c:	b809883a 	mov	r4,r23
   14150:	001cc300 	call	1cc30 <__ssrefill_r>
   14154:	10033d26 	beq	r2,zero,14e4c <__ssvfscanf_r+0x1654>
   14158:	dc409f17 	ldw	r17,636(sp)
   1415c:	80034426 	beq	r16,zero,14e70 <__ssvfscanf_r+0x1678>
   14160:	d900a017 	ldw	r4,640(sp)
   14164:	203e8026 	beq	r4,zero,13b68 <__alt_data_end+0xfffd5368>
   14168:	9880030b 	ldhu	r2,12(r19)
   1416c:	1080100c 	andi	r2,r2,64
   14170:	103e7d1e 	bne	r2,zero,13b68 <__alt_data_end+0xfffd5368>
   14174:	2005883a 	mov	r2,r4
   14178:	003e7c06 	br	13b6c <__alt_data_end+0xfffd536c>
   1417c:	e03f951e 	bne	fp,zero,13fd4 <__alt_data_end+0xfffd57d4>
   14180:	003fb806 	br	14064 <__alt_data_end+0xfffd5864>
   14184:	d8809c17 	ldw	r2,624(sp)
   14188:	15000017 	ldw	r20,0(r2)
   1418c:	10800104 	addi	r2,r2,4
   14190:	d8809c15 	stw	r2,624(sp)
   14194:	003f8e06 	br	13fd0 <__alt_data_end+0xfffd57d0>
   14198:	980b883a 	mov	r5,r19
   1419c:	b809883a 	mov	r4,r23
   141a0:	001cc300 	call	1cc30 <__ssrefill_r>
   141a4:	103f3626 	beq	r2,zero,13e80 <__alt_data_end+0xfffd5680>
   141a8:	003fed06 	br	14160 <__alt_data_end+0xfffd5960>
   141ac:	013fff84 	movi	r4,-2
   141b0:	1100071e 	bne	r2,r4,141d0 <__ssvfscanf_r+0x9d8>
   141b4:	98800117 	ldw	r2,4(r19)
   141b8:	8023883a 	mov	r17,r16
   141bc:	00bf8516 	blt	zero,r2,13fd4 <__alt_data_end+0xfffd57d4>
   141c0:	003fa306 	br	14050 <__alt_data_end+0xfffd5850>
   141c4:	9425883a 	add	r18,r18,r16
   141c8:	e73fffc4 	addi	fp,fp,-1
   141cc:	003f9d06 	br	14044 <__alt_data_end+0xfffd5844>
   141d0:	d8c09f17 	ldw	r3,636(sp)
   141d4:	9425883a 	add	r18,r18,r16
   141d8:	e73fffc4 	addi	fp,fp,-1
   141dc:	183f9826 	beq	r3,zero,14040 <__alt_data_end+0xfffd5840>
   141e0:	003f9806 	br	14044 <__alt_data_end+0xfffd5844>
   141e4:	8023883a 	mov	r17,r16
   141e8:	8821883a 	mov	r16,r17
   141ec:	003fce06 	br	14128 <__alt_data_end+0xfffd5928>
   141f0:	803f3b1e 	bne	r16,zero,13ee0 <__alt_data_end+0xfffd56e0>
   141f4:	003fda06 	br	14160 <__alt_data_end+0xfffd5960>
   141f8:	1839883a 	mov	fp,r3
   141fc:	003fc306 	br	1410c <__alt_data_end+0xfffd590c>
   14200:	803fc91e 	bne	r16,zero,14128 <__alt_data_end+0xfffd5928>
   14204:	003dbd06 	br	138fc <__alt_data_end+0xfffd50fc>
   14208:	d8809c17 	ldw	r2,624(sp)
   1420c:	dcc00015 	stw	r19,0(sp)
   14210:	b809883a 	mov	r4,r23
   14214:	11400017 	ldw	r5,0(r2)
   14218:	e00f883a 	mov	r7,fp
   1421c:	01800044 	movi	r6,1
   14220:	001cca00 	call	1cca0 <_sfread_r>
   14224:	d9009c17 	ldw	r4,624(sp)
   14228:	20c00104 	addi	r3,r4,4
   1422c:	103fcc26 	beq	r2,zero,14160 <__alt_data_end+0xfffd5960>
   14230:	d940a017 	ldw	r5,640(sp)
   14234:	dd009d17 	ldw	r20,628(sp)
   14238:	90a5883a 	add	r18,r18,r2
   1423c:	29400044 	addi	r5,r5,1
   14240:	d940a015 	stw	r5,640(sp)
   14244:	d8c09c15 	stw	r3,624(sp)
   14248:	a00d883a 	mov	r6,r20
   1424c:	003da706 	br	138ec <__alt_data_end+0xfffd50ec>
   14250:	980b883a 	mov	r5,r19
   14254:	b809883a 	mov	r4,r23
   14258:	001cc300 	call	1cc30 <__ssrefill_r>
   1425c:	103e3626 	beq	r2,zero,13b38 <__alt_data_end+0xfffd5338>
   14260:	003fbf06 	br	14160 <__alt_data_end+0xfffd5960>
   14264:	98800117 	ldw	r2,4(r19)
   14268:	88e2b03a 	or	r17,r17,r3
   1426c:	0080210e 	bge	zero,r2,142f4 <__ssvfscanf_r+0xafc>
   14270:	014000b4 	movhi	r5,2
   14274:	296fff04 	addi	r5,r5,-16388
   14278:	00800284 	movi	r2,10
   1427c:	d940a115 	stw	r5,644(sp)
   14280:	d8809e15 	stw	r2,632(sp)
   14284:	050000c4 	movi	r20,3
   14288:	003e6906 	br	13c30 <__alt_data_end+0xfffd5430>
   1428c:	a1400083 	ldbu	r5,2(r20)
   14290:	8c400094 	ori	r17,r17,2
   14294:	a5000084 	addi	r20,r20,2
   14298:	2d403fcc 	andi	r21,r5,255
   1429c:	003da106 	br	13924 <__alt_data_end+0xfffd5124>
   142a0:	8880004c 	andi	r2,r17,1
   142a4:	10000c1e 	bne	r2,zero,142d8 <__ssvfscanf_r+0xae0>
   142a8:	8c40008c 	andi	r17,r17,2
   142ac:	88000a26 	beq	r17,zero,142d8 <__ssvfscanf_r+0xae0>
   142b0:	d8c09c17 	ldw	r3,624(sp)
   142b4:	d9009c17 	ldw	r4,624(sp)
   142b8:	dd009d17 	ldw	r20,628(sp)
   142bc:	18800017 	ldw	r2,0(r3)
   142c0:	9007d7fa 	srai	r3,r18,31
   142c4:	21000104 	addi	r4,r4,4
   142c8:	14800015 	stw	r18,0(r2)
   142cc:	10c00115 	stw	r3,4(r2)
   142d0:	d9009c15 	stw	r4,624(sp)
   142d4:	003d8406 	br	138e8 <__alt_data_end+0xfffd50e8>
   142d8:	d9409c17 	ldw	r5,624(sp)
   142dc:	dd009d17 	ldw	r20,628(sp)
   142e0:	28800017 	ldw	r2,0(r5)
   142e4:	29400104 	addi	r5,r5,4
   142e8:	d9409c15 	stw	r5,624(sp)
   142ec:	14800015 	stw	r18,0(r2)
   142f0:	003d7d06 	br	138e8 <__alt_data_end+0xfffd50e8>
   142f4:	980b883a 	mov	r5,r19
   142f8:	b809883a 	mov	r4,r23
   142fc:	001cc300 	call	1cc30 <__ssrefill_r>
   14300:	103f971e 	bne	r2,zero,14160 <__alt_data_end+0xfffd5960>
   14304:	b4000017 	ldw	r16,0(r22)
   14308:	003ed206 	br	13e54 <__alt_data_end+0xfffd5654>
   1430c:	980b883a 	mov	r5,r19
   14310:	b809883a 	mov	r4,r23
   14314:	001cc300 	call	1cc30 <__ssrefill_r>
   14318:	103f911e 	bne	r2,zero,14160 <__alt_data_end+0xfffd5960>
   1431c:	010000b4 	movhi	r4,2
   14320:	21315d04 	addi	r4,r4,-14988
   14324:	01400404 	movi	r5,16
   14328:	b4000017 	ldw	r16,0(r22)
   1432c:	d900a115 	stw	r4,644(sp)
   14330:	d9409e15 	stw	r5,632(sp)
   14334:	050000c4 	movi	r20,3
   14338:	003e3d06 	br	13c30 <__alt_data_end+0xfffd5430>
   1433c:	980b883a 	mov	r5,r19
   14340:	b809883a 	mov	r4,r23
   14344:	001cc300 	call	1cc30 <__ssrefill_r>
   14348:	103f851e 	bne	r2,zero,14160 <__alt_data_end+0xfffd5960>
   1434c:	b4000017 	ldw	r16,0(r22)
   14350:	05000084 	movi	r20,2
   14354:	003e3606 	br	13c30 <__alt_data_end+0xfffd5430>
   14358:	980b883a 	mov	r5,r19
   1435c:	b809883a 	mov	r4,r23
   14360:	001cc300 	call	1cc30 <__ssrefill_r>
   14364:	103eea26 	beq	r2,zero,13f10 <__alt_data_end+0xfffd5710>
   14368:	003f7d06 	br	14160 <__alt_data_end+0xfffd5960>
   1436c:	980b883a 	mov	r5,r19
   14370:	b809883a 	mov	r4,r23
   14374:	001cc300 	call	1cc30 <__ssrefill_r>
   14378:	103f791e 	bne	r2,zero,14160 <__alt_data_end+0xfffd5960>
   1437c:	b4000017 	ldw	r16,0(r22)
   14380:	05000104 	movi	r20,4
   14384:	003e2a06 	br	13c30 <__alt_data_end+0xfffd5430>
   14388:	980b883a 	mov	r5,r19
   1438c:	b809883a 	mov	r4,r23
   14390:	001cc300 	call	1cc30 <__ssrefill_r>
   14394:	103f721e 	bne	r2,zero,14160 <__alt_data_end+0xfffd5960>
   14398:	b4000017 	ldw	r16,0(r22)
   1439c:	003e8c06 	br	13dd0 <__alt_data_end+0xfffd55d0>
   143a0:	980b883a 	mov	r5,r19
   143a4:	b809883a 	mov	r4,r23
   143a8:	001cc300 	call	1cc30 <__ssrefill_r>
   143ac:	103f6c1e 	bne	r2,zero,14160 <__alt_data_end+0xfffd5960>
   143b0:	008000b4 	movhi	r2,2
   143b4:	10b15d04 	addi	r2,r2,-14988
   143b8:	00c00284 	movi	r3,10
   143bc:	b4000017 	ldw	r16,0(r22)
   143c0:	d880a115 	stw	r2,644(sp)
   143c4:	d8c09e15 	stw	r3,632(sp)
   143c8:	050000c4 	movi	r20,3
   143cc:	003e1806 	br	13c30 <__alt_data_end+0xfffd5430>
   143d0:	980b883a 	mov	r5,r19
   143d4:	b809883a 	mov	r4,r23
   143d8:	001cc300 	call	1cc30 <__ssrefill_r>
   143dc:	103f601e 	bne	r2,zero,14160 <__alt_data_end+0xfffd5960>
   143e0:	008000b4 	movhi	r2,2
   143e4:	10b15d04 	addi	r2,r2,-14988
   143e8:	00c00204 	movi	r3,8
   143ec:	b4000017 	ldw	r16,0(r22)
   143f0:	d880a115 	stw	r2,644(sp)
   143f4:	d8c09e15 	stw	r3,632(sp)
   143f8:	050000c4 	movi	r20,3
   143fc:	003e0c06 	br	13c30 <__alt_data_end+0xfffd5430>
   14400:	980b883a 	mov	r5,r19
   14404:	b809883a 	mov	r4,r23
   14408:	001cc300 	call	1cc30 <__ssrefill_r>
   1440c:	103f541e 	bne	r2,zero,14160 <__alt_data_end+0xfffd5960>
   14410:	008000b4 	movhi	r2,2
   14414:	10afff04 	addi	r2,r2,-16388
   14418:	b4000017 	ldw	r16,0(r22)
   1441c:	d880a115 	stw	r2,644(sp)
   14420:	d8009e15 	stw	zero,632(sp)
   14424:	050000c4 	movi	r20,3
   14428:	003e0106 	br	13c30 <__alt_data_end+0xfffd5430>
   1442c:	980b883a 	mov	r5,r19
   14430:	b809883a 	mov	r4,r23
   14434:	001cc300 	call	1cc30 <__ssrefill_r>
   14438:	103f491e 	bne	r2,zero,14160 <__alt_data_end+0xfffd5960>
   1443c:	008000b4 	movhi	r2,2
   14440:	10b15d04 	addi	r2,r2,-14988
   14444:	00c00404 	movi	r3,16
   14448:	b4000017 	ldw	r16,0(r22)
   1444c:	d880a115 	stw	r2,644(sp)
   14450:	d8c09e15 	stw	r3,632(sp)
   14454:	050000c4 	movi	r20,3
   14458:	003df506 	br	13c30 <__alt_data_end+0xfffd5430>
   1445c:	014000c4 	movi	r5,3
   14460:	a1416726 	beq	r20,r5,14a00 <__ssvfscanf_r+0x1208>
   14464:	01000104 	movi	r4,4
   14468:	a101491e 	bne	r20,r4,14990 <__ssvfscanf_r+0x1198>
   1446c:	b809883a 	mov	r4,r23
   14470:	00191cc0 	call	191cc <_localeconv_r>
   14474:	10800017 	ldw	r2,0(r2)
   14478:	e0ffffc4 	addi	r3,fp,-1
   1447c:	d880a315 	stw	r2,652(sp)
   14480:	00805704 	movi	r2,348
   14484:	10c21e2e 	bgeu	r2,r3,14d00 <__ssvfscanf_r+0x1508>
   14488:	e73fa8c4 	addi	fp,fp,-349
   1448c:	df00a215 	stw	fp,648(sp)
   14490:	07005744 	movi	fp,349
   14494:	8d01e014 	ori	r20,r17,1920
   14498:	0023883a 	mov	r17,zero
   1449c:	dc000104 	addi	r16,sp,4
   144a0:	002b883a 	mov	r21,zero
   144a4:	8805883a 	mov	r2,r17
   144a8:	0007883a 	mov	r3,zero
   144ac:	8023883a 	mov	r17,r16
   144b0:	b80d883a 	mov	r6,r23
   144b4:	e021883a 	mov	r16,fp
   144b8:	a82f883a 	mov	r23,r21
   144bc:	d800a515 	stw	zero,660(sp)
   144c0:	d800a415 	stw	zero,656(sp)
   144c4:	d8009f15 	stw	zero,636(sp)
   144c8:	01c01384 	movi	r7,78
   144cc:	182b883a 	mov	r21,r3
   144d0:	1039883a 	mov	fp,r2
   144d4:	99000017 	ldw	r4,0(r19)
   144d8:	21400003 	ldbu	r5,0(r4)
   144dc:	28bff544 	addi	r2,r5,-43
   144e0:	10803fcc 	andi	r2,r2,255
   144e4:	38810e36 	bltu	r7,r2,14920 <__ssvfscanf_r+0x1128>
   144e8:	100490ba 	slli	r2,r2,2
   144ec:	00c00074 	movhi	r3,1
   144f0:	18d14004 	addi	r3,r3,17664
   144f4:	10c5883a 	add	r2,r2,r3
   144f8:	10800017 	ldw	r2,0(r2)
   144fc:	1000683a 	jmp	r2
   14500:	000147f4 	movhi	zero,1311
   14504:	00014920 	cmpeqi	zero,zero,1316
   14508:	000147f4 	movhi	zero,1311
   1450c:	00014920 	cmpeqi	zero,zero,1316
   14510:	00014920 	cmpeqi	zero,zero,1316
   14514:	000147c8 	cmpgei	zero,zero,1311
   14518:	0001463c 	xorhi	zero,zero,1304
   1451c:	0001463c 	xorhi	zero,zero,1304
   14520:	0001463c 	xorhi	zero,zero,1304
   14524:	0001463c 	xorhi	zero,zero,1304
   14528:	0001463c 	xorhi	zero,zero,1304
   1452c:	0001463c 	xorhi	zero,zero,1304
   14530:	0001463c 	xorhi	zero,zero,1304
   14534:	0001463c 	xorhi	zero,zero,1304
   14538:	0001463c 	xorhi	zero,zero,1304
   1453c:	00014920 	cmpeqi	zero,zero,1316
   14540:	00014920 	cmpeqi	zero,zero,1316
   14544:	00014920 	cmpeqi	zero,zero,1316
   14548:	00014920 	cmpeqi	zero,zero,1316
   1454c:	00014920 	cmpeqi	zero,zero,1316
   14550:	00014920 	cmpeqi	zero,zero,1316
   14554:	00014920 	cmpeqi	zero,zero,1316
   14558:	00014910 	cmplti	zero,zero,1316
   1455c:	00014920 	cmpeqi	zero,zero,1316
   14560:	00014920 	cmpeqi	zero,zero,1316
   14564:	00014920 	cmpeqi	zero,zero,1316
   14568:	000148cc 	andi	zero,zero,1315
   1456c:	000148b0 	cmpltui	zero,zero,1314
   14570:	00014920 	cmpeqi	zero,zero,1316
   14574:	00014920 	cmpeqi	zero,zero,1316
   14578:	00014878 	rdprs	zero,zero,1313
   1457c:	00014920 	cmpeqi	zero,zero,1316
   14580:	00014920 	cmpeqi	zero,zero,1316
   14584:	00014920 	cmpeqi	zero,zero,1316
   14588:	00014920 	cmpeqi	zero,zero,1316
   1458c:	00014840 	call	1484 <set_addrs_to_default+0x344>
   14590:	00014920 	cmpeqi	zero,zero,1316
   14594:	00014920 	cmpeqi	zero,zero,1316
   14598:	00014920 	cmpeqi	zero,zero,1316
   1459c:	00014920 	cmpeqi	zero,zero,1316
   145a0:	00014920 	cmpeqi	zero,zero,1316
   145a4:	00014824 	muli	zero,zero,1312
   145a8:	00014920 	cmpeqi	zero,zero,1316
   145ac:	00014920 	cmpeqi	zero,zero,1316
   145b0:	00014920 	cmpeqi	zero,zero,1316
   145b4:	00014920 	cmpeqi	zero,zero,1316
   145b8:	00014808 	cmpgei	zero,zero,1312
   145bc:	00014920 	cmpeqi	zero,zero,1316
   145c0:	00014920 	cmpeqi	zero,zero,1316
   145c4:	00014920 	cmpeqi	zero,zero,1316
   145c8:	00014920 	cmpeqi	zero,zero,1316
   145cc:	00014920 	cmpeqi	zero,zero,1316
   145d0:	00014920 	cmpeqi	zero,zero,1316
   145d4:	00014920 	cmpeqi	zero,zero,1316
   145d8:	00014910 	cmplti	zero,zero,1316
   145dc:	00014920 	cmpeqi	zero,zero,1316
   145e0:	00014920 	cmpeqi	zero,zero,1316
   145e4:	00014920 	cmpeqi	zero,zero,1316
   145e8:	000148cc 	andi	zero,zero,1315
   145ec:	000148b0 	cmpltui	zero,zero,1314
   145f0:	00014920 	cmpeqi	zero,zero,1316
   145f4:	00014920 	cmpeqi	zero,zero,1316
   145f8:	00014878 	rdprs	zero,zero,1313
   145fc:	00014920 	cmpeqi	zero,zero,1316
   14600:	00014920 	cmpeqi	zero,zero,1316
   14604:	00014920 	cmpeqi	zero,zero,1316
   14608:	00014920 	cmpeqi	zero,zero,1316
   1460c:	00014840 	call	1484 <set_addrs_to_default+0x344>
   14610:	00014920 	cmpeqi	zero,zero,1316
   14614:	00014920 	cmpeqi	zero,zero,1316
   14618:	00014920 	cmpeqi	zero,zero,1316
   1461c:	00014920 	cmpeqi	zero,zero,1316
   14620:	00014920 	cmpeqi	zero,zero,1316
   14624:	00014824 	muli	zero,zero,1312
   14628:	00014920 	cmpeqi	zero,zero,1316
   1462c:	00014920 	cmpeqi	zero,zero,1316
   14630:	00014920 	cmpeqi	zero,zero,1316
   14634:	00014920 	cmpeqi	zero,zero,1316
   14638:	00014808 	cmpgei	zero,zero,1312
   1463c:	a8803fcc 	andi	r2,r21,255
   14640:	1080201c 	xori	r2,r2,128
   14644:	10bfe004 	addi	r2,r2,-128
   14648:	b885883a 	add	r2,r23,r2
   1464c:	10000d1e 	bne	r2,zero,14684 <__ssvfscanf_r+0xe8c>
   14650:	00bf9fc4 	movi	r2,-385
   14654:	a0a8703a 	and	r20,r20,r2
   14658:	89400005 	stb	r5,0(r17)
   1465c:	8c400044 	addi	r17,r17,1
   14660:	98800117 	ldw	r2,4(r19)
   14664:	843fffc4 	addi	r16,r16,-1
   14668:	94800044 	addi	r18,r18,1
   1466c:	10bfffc4 	addi	r2,r2,-1
   14670:	98800115 	stw	r2,4(r19)
   14674:	0080b40e 	bge	zero,r2,14948 <__ssvfscanf_r+0x1150>
   14678:	21000044 	addi	r4,r4,1
   1467c:	99000015 	stw	r4,0(r19)
   14680:	803f941e 	bne	r16,zero,144d4 <__alt_data_end+0xfffd5cd4>
   14684:	8821883a 	mov	r16,r17
   14688:	a807883a 	mov	r3,r21
   1468c:	e023883a 	mov	r17,fp
   14690:	b82b883a 	mov	r21,r23
   14694:	302f883a 	mov	r23,r6
   14698:	e001961e 	bne	fp,zero,14cf4 <__ssvfscanf_r+0x14fc>
   1469c:	ab3fffc4 	addi	r12,r21,-1
   146a0:	00800044 	movi	r2,1
   146a4:	1302a22e 	bgeu	r2,r12,15130 <__ssvfscanf_r+0x1938>
   146a8:	18803fcc 	andi	r2,r3,255
   146ac:	1080201c 	xori	r2,r2,128
   146b0:	10bfe004 	addi	r2,r2,-128
   146b4:	113fffc4 	addi	r4,r2,-1
   146b8:	01400184 	movi	r5,6
   146bc:	29001136 	bltu	r5,r4,14704 <__ssvfscanf_r+0xf0c>
   146c0:	01000084 	movi	r4,2
   146c4:	2082770e 	bge	r4,r2,150a4 <__ssvfscanf_r+0x18ac>
   146c8:	054000c4 	movi	r21,3
   146cc:	1839883a 	mov	fp,r3
   146d0:	15400c26 	beq	r2,r21,14704 <__ssvfscanf_r+0xf0c>
   146d4:	9425c83a 	sub	r18,r18,r16
   146d8:	843fffc4 	addi	r16,r16,-1
   146dc:	81400007 	ldb	r5,0(r16)
   146e0:	980d883a 	mov	r6,r19
   146e4:	b809883a 	mov	r4,r23
   146e8:	001cb280 	call	1cb28 <_sungetc_r>
   146ec:	e0bfffc4 	addi	r2,fp,-1
   146f0:	10c03fcc 	andi	r3,r2,255
   146f4:	8493883a 	add	r9,r16,r18
   146f8:	1039883a 	mov	fp,r2
   146fc:	a8fff636 	bltu	r21,r3,146d8 <__alt_data_end+0xfffd5ed8>
   14700:	4825883a 	mov	r18,r9
   14704:	a080400c 	andi	r2,r20,256
   14708:	10001426 	beq	r2,zero,1475c <__ssvfscanf_r+0xf64>
   1470c:	a081000c 	andi	r2,r20,1024
   14710:	10027b1e 	bne	r2,zero,15100 <__ssvfscanf_r+0x1908>
   14714:	817fffc7 	ldb	r5,-1(r16)
   14718:	00801944 	movi	r2,101
   1471c:	873fffc4 	addi	fp,r16,-1
   14720:	957fffc4 	addi	r21,r18,-1
   14724:	28800826 	beq	r5,r2,14748 <__ssvfscanf_r+0xf50>
   14728:	00801144 	movi	r2,69
   1472c:	28800626 	beq	r5,r2,14748 <__ssvfscanf_r+0xf50>
   14730:	980d883a 	mov	r6,r19
   14734:	b809883a 	mov	r4,r23
   14738:	001cb280 	call	1cb28 <_sungetc_r>
   1473c:	817fff87 	ldb	r5,-2(r16)
   14740:	873fff84 	addi	fp,r16,-2
   14744:	957fff84 	addi	r21,r18,-2
   14748:	980d883a 	mov	r6,r19
   1474c:	b809883a 	mov	r4,r23
   14750:	001cb280 	call	1cb28 <_sungetc_r>
   14754:	a825883a 	mov	r18,r21
   14758:	e021883a 	mov	r16,fp
   1475c:	a080040c 	andi	r2,r20,16
   14760:	103e451e 	bne	r2,zero,14078 <__alt_data_end+0xfffd5878>
   14764:	80000005 	stb	zero,0(r16)
   14768:	a081800c 	andi	r2,r20,1536
   1476c:	01010004 	movi	r4,1024
   14770:	1101ea26 	beq	r2,r4,14f1c <__ssvfscanf_r+0x1724>
   14774:	d8c0a417 	ldw	r3,656(sp)
   14778:	1801f41e 	bne	r3,zero,14f4c <__ssvfscanf_r+0x1754>
   1477c:	000d883a 	mov	r6,zero
   14780:	d9400104 	addi	r5,sp,4
   14784:	b809883a 	mov	r4,r23
   14788:	001a9000 	call	1a900 <_strtod_r>
   1478c:	1021883a 	mov	r16,r2
   14790:	a080004c 	andi	r2,r20,1
   14794:	1001b926 	beq	r2,zero,14e7c <__ssvfscanf_r+0x1684>
   14798:	d9009c17 	ldw	r4,624(sp)
   1479c:	20800017 	ldw	r2,0(r4)
   147a0:	21000104 	addi	r4,r4,4
   147a4:	d9009c15 	stw	r4,624(sp)
   147a8:	14000015 	stw	r16,0(r2)
   147ac:	10c00115 	stw	r3,4(r2)
   147b0:	d8c0a017 	ldw	r3,640(sp)
   147b4:	dd009d17 	ldw	r20,628(sp)
   147b8:	18c00044 	addi	r3,r3,1
   147bc:	d8c0a015 	stw	r3,640(sp)
   147c0:	a00d883a 	mov	r6,r20
   147c4:	003c4906 	br	138ec <__alt_data_end+0xfffd50ec>
   147c8:	a080400c 	andi	r2,r20,256
   147cc:	103f9b26 	beq	r2,zero,1463c <__alt_data_end+0xfffd5e3c>
   147d0:	d8c0a217 	ldw	r3,648(sp)
   147d4:	00bfdfc4 	movi	r2,-129
   147d8:	a0a8703a 	and	r20,r20,r2
   147dc:	e7000044 	addi	fp,fp,1
   147e0:	183f9f26 	beq	r3,zero,14660 <__alt_data_end+0xfffd5e60>
   147e4:	18ffffc4 	addi	r3,r3,-1
   147e8:	d8c0a215 	stw	r3,648(sp)
   147ec:	84000044 	addi	r16,r16,1
   147f0:	003f9b06 	br	14660 <__alt_data_end+0xfffd5e60>
   147f4:	a080200c 	andi	r2,r20,128
   147f8:	103fa226 	beq	r2,zero,14684 <__alt_data_end+0xfffd5e84>
   147fc:	00bfdfc4 	movi	r2,-129
   14800:	a0a8703a 	and	r20,r20,r2
   14804:	003f9406 	br	14658 <__alt_data_end+0xfffd5e58>
   14808:	a8803fcc 	andi	r2,r21,255
   1480c:	1080201c 	xori	r2,r2,128
   14810:	10bfe004 	addi	r2,r2,-128
   14814:	00c001c4 	movi	r3,7
   14818:	10ff9a1e 	bne	r2,r3,14684 <__alt_data_end+0xfffd5e84>
   1481c:	05400204 	movi	r21,8
   14820:	003f8d06 	br	14658 <__alt_data_end+0xfffd5e58>
   14824:	a8803fcc 	andi	r2,r21,255
   14828:	1080201c 	xori	r2,r2,128
   1482c:	10bfe004 	addi	r2,r2,-128
   14830:	02000184 	movi	r8,6
   14834:	123f931e 	bne	r2,r8,14684 <__alt_data_end+0xfffd5e84>
   14838:	054001c4 	movi	r21,7
   1483c:	003f8606 	br	14658 <__alt_data_end+0xfffd5e58>
   14840:	b8004f1e 	bne	r23,zero,14980 <__ssvfscanf_r+0x1188>
   14844:	e000031e 	bne	fp,zero,14854 <__ssvfscanf_r+0x105c>
   14848:	a081c00c 	andi	r2,r20,1792
   1484c:	0201c004 	movi	r8,1792
   14850:	1201a226 	beq	r2,r8,14edc <__ssvfscanf_r+0x16e4>
   14854:	a8803fcc 	andi	r2,r21,255
   14858:	1080201c 	xori	r2,r2,128
   1485c:	10bfe004 	addi	r2,r2,-128
   14860:	02000044 	movi	r8,1
   14864:	12000226 	beq	r2,r8,14870 <__ssvfscanf_r+0x1078>
   14868:	02000104 	movi	r8,4
   1486c:	123f851e 	bne	r2,r8,14684 <__alt_data_end+0xfffd5e84>
   14870:	ad400044 	addi	r21,r21,1
   14874:	003f7806 	br	14658 <__alt_data_end+0xfffd5e58>
   14878:	a8803fcc 	andi	r2,r21,255
   1487c:	1080201c 	xori	r2,r2,128
   14880:	10bfe004 	addi	r2,r2,-128
   14884:	1000391e 	bne	r2,zero,1496c <__ssvfscanf_r+0x1174>
   14888:	e001151e 	bne	fp,zero,14ce0 <__ssvfscanf_r+0x14e8>
   1488c:	a081c00c 	andi	r2,r20,1792
   14890:	0201c004 	movi	r8,1792
   14894:	12019b26 	beq	r2,r8,14f04 <__ssvfscanf_r+0x170c>
   14898:	8821883a 	mov	r16,r17
   1489c:	a807883a 	mov	r3,r21
   148a0:	e023883a 	mov	r17,fp
   148a4:	b82b883a 	mov	r21,r23
   148a8:	302f883a 	mov	r23,r6
   148ac:	003f7b06 	br	1469c <__alt_data_end+0xfffd5e9c>
   148b0:	a8803fcc 	andi	r2,r21,255
   148b4:	1080201c 	xori	r2,r2,128
   148b8:	10bfe004 	addi	r2,r2,-128
   148bc:	02000084 	movi	r8,2
   148c0:	123f701e 	bne	r2,r8,14684 <__alt_data_end+0xfffd5e84>
   148c4:	054000c4 	movi	r21,3
   148c8:	003f6306 	br	14658 <__alt_data_end+0xfffd5e58>
   148cc:	a081400c 	andi	r2,r20,1280
   148d0:	00c10004 	movi	r3,1024
   148d4:	10c00326 	beq	r2,r3,148e4 <__ssvfscanf_r+0x10ec>
   148d8:	a0c4703a 	and	r2,r20,r3
   148dc:	103f6926 	beq	r2,zero,14684 <__alt_data_end+0xfffd5e84>
   148e0:	e03fed26 	beq	fp,zero,14898 <__alt_data_end+0xfffd6098>
   148e4:	a080800c 	andi	r2,r20,512
   148e8:	1000041e 	bne	r2,zero,148fc <__ssvfscanf_r+0x1104>
   148ec:	d8c09f17 	ldw	r3,636(sp)
   148f0:	dc40a515 	stw	r17,660(sp)
   148f4:	e0f9c83a 	sub	fp,fp,r3
   148f8:	df00a415 	stw	fp,656(sp)
   148fc:	00be1fc4 	movi	r2,-1921
   14900:	a0a8703a 	and	r20,r20,r2
   14904:	a5006014 	ori	r20,r20,384
   14908:	0039883a 	mov	fp,zero
   1490c:	003f5206 	br	14658 <__alt_data_end+0xfffd5e58>
   14910:	00800044 	movi	r2,1
   14914:	b8bf5b1e 	bne	r23,r2,14684 <__alt_data_end+0xfffd5e84>
   14918:	05c00084 	movi	r23,2
   1491c:	003f4e06 	br	14658 <__alt_data_end+0xfffd5e58>
   14920:	d8c0a317 	ldw	r3,652(sp)
   14924:	2a003fcc 	andi	r8,r5,255
   14928:	18800003 	ldbu	r2,0(r3)
   1492c:	40bf551e 	bne	r8,r2,14684 <__alt_data_end+0xfffd5e84>
   14930:	a080800c 	andi	r2,r20,512
   14934:	103f5326 	beq	r2,zero,14684 <__alt_data_end+0xfffd5e84>
   14938:	00bf5fc4 	movi	r2,-641
   1493c:	a0a8703a 	and	r20,r20,r2
   14940:	df009f15 	stw	fp,636(sp)
   14944:	003f4406 	br	14658 <__alt_data_end+0xfffd5e58>
   14948:	3009883a 	mov	r4,r6
   1494c:	980b883a 	mov	r5,r19
   14950:	d980a915 	stw	r6,676(sp)
   14954:	d9c0aa15 	stw	r7,680(sp)
   14958:	001cc300 	call	1cc30 <__ssrefill_r>
   1495c:	d980a917 	ldw	r6,676(sp)
   14960:	d9c0aa17 	ldw	r7,680(sp)
   14964:	103f4626 	beq	r2,zero,14680 <__alt_data_end+0xfffd5e80>
   14968:	003f4606 	br	14684 <__alt_data_end+0xfffd5e84>
   1496c:	020000c4 	movi	r8,3
   14970:	123fbf26 	beq	r2,r8,14870 <__alt_data_end+0xfffd6070>
   14974:	02000144 	movi	r8,5
   14978:	123fbd26 	beq	r2,r8,14870 <__alt_data_end+0xfffd6070>
   1497c:	003f4106 	br	14684 <__alt_data_end+0xfffd5e84>
   14980:	00800084 	movi	r2,2
   14984:	b8bfb31e 	bne	r23,r2,14854 <__alt_data_end+0xfffd6054>
   14988:	05c000c4 	movi	r23,3
   1498c:	003f3206 	br	14658 <__alt_data_end+0xfffd5e58>
   14990:	e000011e 	bne	fp,zero,14998 <__ssvfscanf_r+0x11a0>
   14994:	073fffc4 	movi	fp,-1
   14998:	8900004c 	andi	r4,r17,1
   1499c:	20011d1e 	bne	r4,zero,14e14 <__ssvfscanf_r+0x161c>
   149a0:	8c40040c 	andi	r17,r17,16
   149a4:	8800da26 	beq	r17,zero,14d10 <__ssvfscanf_r+0x1518>
   149a8:	0023883a 	mov	r17,zero
   149ac:	00000306 	br	149bc <__ssvfscanf_r+0x11c4>
   149b0:	18800003 	ldbu	r2,0(r3)
   149b4:	8085883a 	add	r2,r16,r2
   149b8:	10800043 	ldbu	r2,1(r2)
   149bc:	1080020c 	andi	r2,r2,8
   149c0:	1000fc1e 	bne	r2,zero,14db4 <__ssvfscanf_r+0x15bc>
   149c4:	98800117 	ldw	r2,4(r19)
   149c8:	18c00044 	addi	r3,r3,1
   149cc:	8c400044 	addi	r17,r17,1
   149d0:	10bfffc4 	addi	r2,r2,-1
   149d4:	98800115 	stw	r2,4(r19)
   149d8:	98c00015 	stw	r3,0(r19)
   149dc:	8f00f526 	beq	r17,fp,14db4 <__ssvfscanf_r+0x15bc>
   149e0:	00bff316 	blt	zero,r2,149b0 <__alt_data_end+0xfffd61b0>
   149e4:	980b883a 	mov	r5,r19
   149e8:	b809883a 	mov	r4,r23
   149ec:	001cc300 	call	1cc30 <__ssrefill_r>
   149f0:	1000f01e 	bne	r2,zero,14db4 <__ssvfscanf_r+0x15bc>
   149f4:	b4000017 	ldw	r16,0(r22)
   149f8:	98c00017 	ldw	r3,0(r19)
   149fc:	003fec06 	br	149b0 <__alt_data_end+0xfffd61b0>
   14a00:	e0bfffc4 	addi	r2,fp,-1
   14a04:	01405704 	movi	r5,348
   14a08:	2880bf2e 	bgeu	r5,r2,14d08 <__ssvfscanf_r+0x1510>
   14a0c:	e1ffa8c4 	addi	r7,fp,-349
   14a10:	07005744 	movi	fp,349
   14a14:	8c436014 	ori	r17,r17,3456
   14a18:	9013883a 	mov	r9,r18
   14a1c:	8825883a 	mov	r18,r17
   14a20:	dc409e17 	ldw	r17,632(sp)
   14a24:	0029883a 	mov	r20,zero
   14a28:	dc000104 	addi	r16,sp,4
   14a2c:	05401344 	movi	r21,77
   14a30:	02c08004 	movi	r11,512
   14a34:	01bf7fc4 	movi	r6,-513
   14a38:	023fdfc4 	movi	r8,-129
   14a3c:	20bff544 	addi	r2,r4,-43
   14a40:	10803fcc 	andi	r2,r2,255
   14a44:	a8807236 	bltu	r21,r2,14c10 <__ssvfscanf_r+0x1418>
   14a48:	100490ba 	slli	r2,r2,2
   14a4c:	01400074 	movhi	r5,1
   14a50:	29529804 	addi	r5,r5,19040
   14a54:	1145883a 	add	r2,r2,r5
   14a58:	10800017 	ldw	r2,0(r2)
   14a5c:	1000683a 	jmp	r2
   14a60:	00014c94 	movui	zero,1330
   14a64:	00014c10 	cmplti	zero,zero,1328
   14a68:	00014c94 	movui	zero,1330
   14a6c:	00014c10 	cmplti	zero,zero,1328
   14a70:	00014c10 	cmplti	zero,zero,1328
   14a74:	00014c6c 	andhi	zero,zero,1329
   14a78:	00014c4c 	andi	zero,zero,1329
   14a7c:	00014c4c 	andi	zero,zero,1329
   14a80:	00014c4c 	andi	zero,zero,1329
   14a84:	00014c4c 	andi	zero,zero,1329
   14a88:	00014c4c 	andi	zero,zero,1329
   14a8c:	00014c4c 	andi	zero,zero,1329
   14a90:	00014c4c 	andi	zero,zero,1329
   14a94:	00014bf4 	movhi	zero,1327
   14a98:	00014bf4 	movhi	zero,1327
   14a9c:	00014c10 	cmplti	zero,zero,1328
   14aa0:	00014c10 	cmplti	zero,zero,1328
   14aa4:	00014c10 	cmplti	zero,zero,1328
   14aa8:	00014c10 	cmplti	zero,zero,1328
   14aac:	00014c10 	cmplti	zero,zero,1328
   14ab0:	00014c10 	cmplti	zero,zero,1328
   14ab4:	00014c10 	cmplti	zero,zero,1328
   14ab8:	00014be0 	cmpeqi	zero,zero,1327
   14abc:	00014be0 	cmpeqi	zero,zero,1327
   14ac0:	00014be0 	cmpeqi	zero,zero,1327
   14ac4:	00014be0 	cmpeqi	zero,zero,1327
   14ac8:	00014be0 	cmpeqi	zero,zero,1327
   14acc:	00014be0 	cmpeqi	zero,zero,1327
   14ad0:	00014c10 	cmplti	zero,zero,1328
   14ad4:	00014c10 	cmplti	zero,zero,1328
   14ad8:	00014c10 	cmplti	zero,zero,1328
   14adc:	00014c10 	cmplti	zero,zero,1328
   14ae0:	00014c10 	cmplti	zero,zero,1328
   14ae4:	00014c10 	cmplti	zero,zero,1328
   14ae8:	00014c10 	cmplti	zero,zero,1328
   14aec:	00014c10 	cmplti	zero,zero,1328
   14af0:	00014c10 	cmplti	zero,zero,1328
   14af4:	00014c10 	cmplti	zero,zero,1328
   14af8:	00014c10 	cmplti	zero,zero,1328
   14afc:	00014c10 	cmplti	zero,zero,1328
   14b00:	00014c10 	cmplti	zero,zero,1328
   14b04:	00014c10 	cmplti	zero,zero,1328
   14b08:	00014c10 	cmplti	zero,zero,1328
   14b0c:	00014c10 	cmplti	zero,zero,1328
   14b10:	00014c10 	cmplti	zero,zero,1328
   14b14:	00014b98 	cmpnei	zero,zero,1326
   14b18:	00014c10 	cmplti	zero,zero,1328
   14b1c:	00014c10 	cmplti	zero,zero,1328
   14b20:	00014c10 	cmplti	zero,zero,1328
   14b24:	00014c10 	cmplti	zero,zero,1328
   14b28:	00014c10 	cmplti	zero,zero,1328
   14b2c:	00014c10 	cmplti	zero,zero,1328
   14b30:	00014c10 	cmplti	zero,zero,1328
   14b34:	00014c10 	cmplti	zero,zero,1328
   14b38:	00014be0 	cmpeqi	zero,zero,1327
   14b3c:	00014be0 	cmpeqi	zero,zero,1327
   14b40:	00014be0 	cmpeqi	zero,zero,1327
   14b44:	00014be0 	cmpeqi	zero,zero,1327
   14b48:	00014be0 	cmpeqi	zero,zero,1327
   14b4c:	00014be0 	cmpeqi	zero,zero,1327
   14b50:	00014c10 	cmplti	zero,zero,1328
   14b54:	00014c10 	cmplti	zero,zero,1328
   14b58:	00014c10 	cmplti	zero,zero,1328
   14b5c:	00014c10 	cmplti	zero,zero,1328
   14b60:	00014c10 	cmplti	zero,zero,1328
   14b64:	00014c10 	cmplti	zero,zero,1328
   14b68:	00014c10 	cmplti	zero,zero,1328
   14b6c:	00014c10 	cmplti	zero,zero,1328
   14b70:	00014c10 	cmplti	zero,zero,1328
   14b74:	00014c10 	cmplti	zero,zero,1328
   14b78:	00014c10 	cmplti	zero,zero,1328
   14b7c:	00014c10 	cmplti	zero,zero,1328
   14b80:	00014c10 	cmplti	zero,zero,1328
   14b84:	00014c10 	cmplti	zero,zero,1328
   14b88:	00014c10 	cmplti	zero,zero,1328
   14b8c:	00014c10 	cmplti	zero,zero,1328
   14b90:	00014c10 	cmplti	zero,zero,1328
   14b94:	00014b98 	cmpnei	zero,zero,1326
   14b98:	9081800c 	andi	r2,r18,1536
   14b9c:	12c01c1e 	bne	r2,r11,14c10 <__ssvfscanf_r+0x1418>
   14ba0:	91a4703a 	and	r18,r18,r6
   14ba4:	94814014 	ori	r18,r18,1280
   14ba8:	04400404 	movi	r17,16
   14bac:	81000005 	stb	r4,0(r16)
   14bb0:	84000044 	addi	r16,r16,1
   14bb4:	98800117 	ldw	r2,4(r19)
   14bb8:	10bfffc4 	addi	r2,r2,-1
   14bbc:	98800115 	stw	r2,4(r19)
   14bc0:	0080380e 	bge	zero,r2,14ca4 <__ssvfscanf_r+0x14ac>
   14bc4:	18c00044 	addi	r3,r3,1
   14bc8:	98c00015 	stw	r3,0(r19)
   14bcc:	e73fffc4 	addi	fp,fp,-1
   14bd0:	e0000f26 	beq	fp,zero,14c10 <__ssvfscanf_r+0x1418>
   14bd4:	98c00017 	ldw	r3,0(r19)
   14bd8:	19000003 	ldbu	r4,0(r3)
   14bdc:	003f9706 	br	14a3c <__alt_data_end+0xfffd623c>
   14be0:	00800284 	movi	r2,10
   14be4:	14400a0e 	bge	r2,r17,14c10 <__ssvfscanf_r+0x1418>
   14be8:	00bd1fc4 	movi	r2,-2945
   14bec:	90a4703a 	and	r18,r18,r2
   14bf0:	003fee06 	br	14bac <__alt_data_end+0xfffd63ac>
   14bf4:	014000f4 	movhi	r5,3
   14bf8:	8c63883a 	add	r17,r17,r17
   14bfc:	2964aa84 	addi	r5,r5,-27990
   14c00:	2c45883a 	add	r2,r5,r17
   14c04:	1440000f 	ldh	r17,0(r2)
   14c08:	00800204 	movi	r2,8
   14c0c:	147ff616 	blt	r2,r17,14be8 <__alt_data_end+0xfffd63e8>
   14c10:	dc409e15 	stw	r17,632(sp)
   14c14:	9023883a 	mov	r17,r18
   14c18:	8880400c 	andi	r2,r17,256
   14c1c:	4825883a 	mov	r18,r9
   14c20:	10000426 	beq	r2,zero,14c34 <__ssvfscanf_r+0x143c>
   14c24:	d8800104 	addi	r2,sp,4
   14c28:	1400b036 	bltu	r2,r16,14eec <__ssvfscanf_r+0x16f4>
   14c2c:	d8c00104 	addi	r3,sp,4
   14c30:	1c3b3226 	beq	r3,r16,138fc <__alt_data_end+0xfffd50fc>
   14c34:	8880040c 	andi	r2,r17,16
   14c38:	10006226 	beq	r2,zero,14dc4 <__ssvfscanf_r+0x15cc>
   14c3c:	d8800104 	addi	r2,sp,4
   14c40:	80a1c83a 	sub	r16,r16,r2
   14c44:	8521883a 	add	r16,r16,r20
   14c48:	003ca506 	br	13ee0 <__alt_data_end+0xfffd56e0>
   14c4c:	014000f4 	movhi	r5,3
   14c50:	8c63883a 	add	r17,r17,r17
   14c54:	2964aa84 	addi	r5,r5,-27990
   14c58:	2c45883a 	add	r2,r5,r17
   14c5c:	1440000f 	ldh	r17,0(r2)
   14c60:	00bd1fc4 	movi	r2,-2945
   14c64:	90a4703a 	and	r18,r18,r2
   14c68:	003fd006 	br	14bac <__alt_data_end+0xfffd63ac>
   14c6c:	9082000c 	andi	r2,r18,2048
   14c70:	103fce26 	beq	r2,zero,14bac <__alt_data_end+0xfffd63ac>
   14c74:	8800021e 	bne	r17,zero,14c80 <__ssvfscanf_r+0x1488>
   14c78:	94808014 	ori	r18,r18,512
   14c7c:	04400204 	movi	r17,8
   14c80:	9081000c 	andi	r2,r18,1024
   14c84:	10008626 	beq	r2,zero,14ea0 <__ssvfscanf_r+0x16a8>
   14c88:	00be9fc4 	movi	r2,-1409
   14c8c:	90a4703a 	and	r18,r18,r2
   14c90:	003fc606 	br	14bac <__alt_data_end+0xfffd63ac>
   14c94:	9080200c 	andi	r2,r18,128
   14c98:	103fdd26 	beq	r2,zero,14c10 <__alt_data_end+0xfffd6410>
   14c9c:	9224703a 	and	r18,r18,r8
   14ca0:	003fc206 	br	14bac <__alt_data_end+0xfffd63ac>
   14ca4:	980b883a 	mov	r5,r19
   14ca8:	b809883a 	mov	r4,r23
   14cac:	d980a915 	stw	r6,676(sp)
   14cb0:	d9c0aa15 	stw	r7,680(sp)
   14cb4:	da00a715 	stw	r8,668(sp)
   14cb8:	da40a815 	stw	r9,672(sp)
   14cbc:	dac0a615 	stw	r11,664(sp)
   14cc0:	001cc300 	call	1cc30 <__ssrefill_r>
   14cc4:	d980a917 	ldw	r6,676(sp)
   14cc8:	d9c0aa17 	ldw	r7,680(sp)
   14ccc:	da00a717 	ldw	r8,668(sp)
   14cd0:	da40a817 	ldw	r9,672(sp)
   14cd4:	dac0a617 	ldw	r11,664(sp)
   14cd8:	103fbc26 	beq	r2,zero,14bcc <__alt_data_end+0xfffd63cc>
   14cdc:	003fcc06 	br	14c10 <__alt_data_end+0xfffd6410>
   14ce0:	8821883a 	mov	r16,r17
   14ce4:	a807883a 	mov	r3,r21
   14ce8:	e023883a 	mov	r17,fp
   14cec:	b82b883a 	mov	r21,r23
   14cf0:	302f883a 	mov	r23,r6
   14cf4:	00bfbfc4 	movi	r2,-257
   14cf8:	a0a8703a 	and	r20,r20,r2
   14cfc:	003e6706 	br	1469c <__alt_data_end+0xfffd5e9c>
   14d00:	d800a215 	stw	zero,648(sp)
   14d04:	003de306 	br	14494 <__alt_data_end+0xfffd5c94>
   14d08:	000f883a 	mov	r7,zero
   14d0c:	003f4106 	br	14a14 <__alt_data_end+0xfffd6214>
   14d10:	d9409c17 	ldw	r5,624(sp)
   14d14:	e2bfffc4 	addi	r10,fp,-1
   14d18:	2c400017 	ldw	r17,0(r5)
   14d1c:	2c000104 	addi	r16,r5,4
   14d20:	8aa9883a 	add	r20,r17,r10
   14d24:	880b883a 	mov	r5,r17
   14d28:	00000606 	br	14d44 <__ssvfscanf_r+0x154c>
   14d2c:	98c00017 	ldw	r3,0(r19)
   14d30:	b1000017 	ldw	r4,0(r22)
   14d34:	a80b883a 	mov	r5,r21
   14d38:	18800003 	ldbu	r2,0(r3)
   14d3c:	2085883a 	add	r2,r4,r2
   14d40:	10800043 	ldbu	r2,1(r2)
   14d44:	1080020c 	andi	r2,r2,8
   14d48:	1000621e 	bne	r2,zero,14ed4 <__ssvfscanf_r+0x16dc>
   14d4c:	98800117 	ldw	r2,4(r19)
   14d50:	19000044 	addi	r4,r3,1
   14d54:	99000015 	stw	r4,0(r19)
   14d58:	10bfffc4 	addi	r2,r2,-1
   14d5c:	98800115 	stw	r2,4(r19)
   14d60:	18800003 	ldbu	r2,0(r3)
   14d64:	2d400044 	addi	r21,r5,1
   14d68:	a839883a 	mov	fp,r21
   14d6c:	28800005 	stb	r2,0(r5)
   14d70:	2d000626 	beq	r5,r20,14d8c <__ssvfscanf_r+0x1594>
   14d74:	98800117 	ldw	r2,4(r19)
   14d78:	00bfec16 	blt	zero,r2,14d2c <__alt_data_end+0xfffd652c>
   14d7c:	980b883a 	mov	r5,r19
   14d80:	b809883a 	mov	r4,r23
   14d84:	001cc300 	call	1cc30 <__ssrefill_r>
   14d88:	103fe826 	beq	r2,zero,14d2c <__alt_data_end+0xfffd652c>
   14d8c:	d880a017 	ldw	r2,640(sp)
   14d90:	dd009d17 	ldw	r20,628(sp)
   14d94:	e463c83a 	sub	r17,fp,r17
   14d98:	10800044 	addi	r2,r2,1
   14d9c:	e0000005 	stb	zero,0(fp)
   14da0:	9465883a 	add	r18,r18,r17
   14da4:	d880a015 	stw	r2,640(sp)
   14da8:	dc009c15 	stw	r16,624(sp)
   14dac:	a00d883a 	mov	r6,r20
   14db0:	003ace06 	br	138ec <__alt_data_end+0xfffd50ec>
   14db4:	dd009d17 	ldw	r20,628(sp)
   14db8:	9465883a 	add	r18,r18,r17
   14dbc:	a00d883a 	mov	r6,r20
   14dc0:	003aca06 	br	138ec <__alt_data_end+0xfffd50ec>
   14dc4:	d8c0a117 	ldw	r3,644(sp)
   14dc8:	d9c09e17 	ldw	r7,632(sp)
   14dcc:	000d883a 	mov	r6,zero
   14dd0:	d9400104 	addi	r5,sp,4
   14dd4:	b809883a 	mov	r4,r23
   14dd8:	80000005 	stb	zero,0(r16)
   14ddc:	183ee83a 	callr	r3
   14de0:	88c0080c 	andi	r3,r17,32
   14de4:	1800351e 	bne	r3,zero,14ebc <__ssvfscanf_r+0x16c4>
   14de8:	88c0010c 	andi	r3,r17,4
   14dec:	18007026 	beq	r3,zero,14fb0 <__ssvfscanf_r+0x17b8>
   14df0:	d9409c17 	ldw	r5,624(sp)
   14df4:	28c00017 	ldw	r3,0(r5)
   14df8:	29400104 	addi	r5,r5,4
   14dfc:	d9409c15 	stw	r5,624(sp)
   14e00:	1880000d 	sth	r2,0(r3)
   14e04:	d940a017 	ldw	r5,640(sp)
   14e08:	29400044 	addi	r5,r5,1
   14e0c:	d940a015 	stw	r5,640(sp)
   14e10:	003f8a06 	br	14c3c <__alt_data_end+0xfffd643c>
   14e14:	dd409904 	addi	r21,sp,612
   14e18:	8c40040c 	andi	r17,r17,16
   14e1c:	01800204 	movi	r6,8
   14e20:	000b883a 	mov	r5,zero
   14e24:	a809883a 	mov	r4,r21
   14e28:	00129c40 	call	129c4 <memset>
   14e2c:	8800391e 	bne	r17,zero,14f14 <__ssvfscanf_r+0x171c>
   14e30:	d8c09c17 	ldw	r3,624(sp)
   14e34:	1d000017 	ldw	r20,0(r3)
   14e38:	18c00104 	addi	r3,r3,4
   14e3c:	d8c09c15 	stw	r3,624(sp)
   14e40:	000d883a 	mov	r6,zero
   14e44:	3021883a 	mov	r16,r6
   14e48:	dc409f15 	stw	r17,636(sp)
   14e4c:	98800017 	ldw	r2,0(r19)
   14e50:	b0c00017 	ldw	r3,0(r22)
   14e54:	10800003 	ldbu	r2,0(r2)
   14e58:	1885883a 	add	r2,r3,r2
   14e5c:	10800043 	ldbu	r2,1(r2)
   14e60:	1080020c 	andi	r2,r2,8
   14e64:	1000011e 	bne	r2,zero,14e6c <__ssvfscanf_r+0x1674>
   14e68:	e000651e 	bne	fp,zero,15000 <__ssvfscanf_r+0x1808>
   14e6c:	dc409f17 	ldw	r17,636(sp)
   14e70:	883c811e 	bne	r17,zero,14078 <__alt_data_end+0xfffd5878>
   14e74:	a0000015 	stw	zero,0(r20)
   14e78:	003c7c06 	br	1406c <__alt_data_end+0xfffd586c>
   14e7c:	a2c0008c 	andi	r11,r20,2
   14e80:	58003c26 	beq	r11,zero,14f74 <__ssvfscanf_r+0x177c>
   14e84:	d9409c17 	ldw	r5,624(sp)
   14e88:	28800017 	ldw	r2,0(r5)
   14e8c:	29400104 	addi	r5,r5,4
   14e90:	d9409c15 	stw	r5,624(sp)
   14e94:	14000015 	stw	r16,0(r2)
   14e98:	10c00115 	stw	r3,4(r2)
   14e9c:	003e4406 	br	147b0 <__alt_data_end+0xfffd5fb0>
   14ea0:	00bf1fc4 	movi	r2,-897
   14ea4:	90a4703a 	and	r18,r18,r2
   14ea8:	38000226 	beq	r7,zero,14eb4 <__ssvfscanf_r+0x16bc>
   14eac:	39ffffc4 	addi	r7,r7,-1
   14eb0:	e7000044 	addi	fp,fp,1
   14eb4:	a5000044 	addi	r20,r20,1
   14eb8:	003f3e06 	br	14bb4 <__alt_data_end+0xfffd63b4>
   14ebc:	d9009c17 	ldw	r4,624(sp)
   14ec0:	20c00017 	ldw	r3,0(r4)
   14ec4:	21000104 	addi	r4,r4,4
   14ec8:	d9009c15 	stw	r4,624(sp)
   14ecc:	18800015 	stw	r2,0(r3)
   14ed0:	003fcc06 	br	14e04 <__alt_data_end+0xfffd6604>
   14ed4:	2839883a 	mov	fp,r5
   14ed8:	003fac06 	br	14d8c <__alt_data_end+0xfffd658c>
   14edc:	00be1fc4 	movi	r2,-1921
   14ee0:	a0a8703a 	and	r20,r20,r2
   14ee4:	05c00044 	movi	r23,1
   14ee8:	003ddb06 	br	14658 <__alt_data_end+0xfffd5e58>
   14eec:	817fffc7 	ldb	r5,-1(r16)
   14ef0:	980d883a 	mov	r6,r19
   14ef4:	b809883a 	mov	r4,r23
   14ef8:	843fffc4 	addi	r16,r16,-1
   14efc:	001cb280 	call	1cb28 <_sungetc_r>
   14f00:	003f4a06 	br	14c2c <__alt_data_end+0xfffd642c>
   14f04:	00fe1fc4 	movi	r3,-1921
   14f08:	a0e8703a 	and	r20,r20,r3
   14f0c:	05400044 	movi	r21,1
   14f10:	003dd106 	br	14658 <__alt_data_end+0xfffd5e58>
   14f14:	dd009b04 	addi	r20,sp,620
   14f18:	003fc906 	br	14e40 <__alt_data_end+0xfffd6640>
   14f1c:	d8c09f17 	ldw	r3,636(sp)
   14f20:	88e3c83a 	sub	r17,r17,r3
   14f24:	044dc83a 	sub	r6,zero,r17
   14f28:	883e1426 	beq	r17,zero,1477c <__alt_data_end+0xfffd5f7c>
   14f2c:	d88055c4 	addi	r2,sp,343
   14f30:	80800136 	bltu	r16,r2,14f38 <__ssvfscanf_r+0x1740>
   14f34:	dc005584 	addi	r16,sp,342
   14f38:	014000f4 	movhi	r5,3
   14f3c:	2964a904 	addi	r5,r5,-27996
   14f40:	8009883a 	mov	r4,r16
   14f44:	001a8300 	call	1a830 <sprintf>
   14f48:	003e0c06 	br	1477c <__alt_data_end+0xfffd5f7c>
   14f4c:	d8c0a517 	ldw	r3,660(sp)
   14f50:	000d883a 	mov	r6,zero
   14f54:	01c00284 	movi	r7,10
   14f58:	19400044 	addi	r5,r3,1
   14f5c:	b809883a 	mov	r4,r23
   14f60:	001bffc0 	call	1bffc <_strtol_r>
   14f64:	d8c0a417 	ldw	r3,656(sp)
   14f68:	dc00a517 	ldw	r16,660(sp)
   14f6c:	10cdc83a 	sub	r6,r2,r3
   14f70:	003fee06 	br	14f2c <__alt_data_end+0xfffd672c>
   14f74:	d8809c17 	ldw	r2,624(sp)
   14f78:	180b883a 	mov	r5,r3
   14f7c:	8009883a 	mov	r4,r16
   14f80:	15000017 	ldw	r20,0(r2)
   14f84:	14400104 	addi	r17,r2,4
   14f88:	d8c0a615 	stw	r3,664(sp)
   14f8c:	000ff480 	call	ff48 <__fpclassifyd>
   14f90:	d8c0a617 	ldw	r3,664(sp)
   14f94:	10007226 	beq	r2,zero,15160 <__ssvfscanf_r+0x1968>
   14f98:	8009883a 	mov	r4,r16
   14f9c:	180b883a 	mov	r5,r3
   14fa0:	00282e00 	call	282e0 <__truncdfsf2>
   14fa4:	a0800015 	stw	r2,0(r20)
   14fa8:	dc409c15 	stw	r17,624(sp)
   14fac:	003e0006 	br	147b0 <__alt_data_end+0xfffd5fb0>
   14fb0:	88c0004c 	andi	r3,r17,1
   14fb4:	183fc11e 	bne	r3,zero,14ebc <__alt_data_end+0xfffd66bc>
   14fb8:	8c40008c 	andi	r17,r17,2
   14fbc:	883fbf26 	beq	r17,zero,14ebc <__alt_data_end+0xfffd66bc>
   14fc0:	d940a117 	ldw	r5,644(sp)
   14fc4:	008000b4 	movhi	r2,2
   14fc8:	10b15d04 	addi	r2,r2,-14988
   14fcc:	d9c09e17 	ldw	r7,632(sp)
   14fd0:	000d883a 	mov	r6,zero
   14fd4:	28806726 	beq	r5,r2,15174 <__ssvfscanf_r+0x197c>
   14fd8:	d9400104 	addi	r5,sp,4
   14fdc:	b809883a 	mov	r4,r23
   14fe0:	001c2700 	call	1c270 <_strtoll_r>
   14fe4:	d9409c17 	ldw	r5,624(sp)
   14fe8:	29000017 	ldw	r4,0(r5)
   14fec:	29400104 	addi	r5,r5,4
   14ff0:	d9409c15 	stw	r5,624(sp)
   14ff4:	20800015 	stw	r2,0(r4)
   14ff8:	20c00115 	stw	r3,4(r4)
   14ffc:	003f8106 	br	14e04 <__alt_data_end+0xfffd6604>
   15000:	00191a80 	call	191a8 <__locale_mb_cur_max>
   15004:	80bc5626 	beq	r16,r2,14160 <__alt_data_end+0xfffd5960>
   15008:	98800017 	ldw	r2,0(r19)
   1500c:	99000117 	ldw	r4,4(r19)
   15010:	d9400104 	addi	r5,sp,4
   15014:	12000003 	ldbu	r8,0(r2)
   15018:	213fffc4 	addi	r4,r4,-1
   1501c:	10800044 	addi	r2,r2,1
   15020:	99000115 	stw	r4,4(r19)
   15024:	98800015 	stw	r2,0(r19)
   15028:	84400044 	addi	r17,r16,1
   1502c:	dd400015 	stw	r21,0(sp)
   15030:	2c21883a 	add	r16,r5,r16
   15034:	280d883a 	mov	r6,r5
   15038:	880f883a 	mov	r7,r17
   1503c:	a00b883a 	mov	r5,r20
   15040:	b809883a 	mov	r4,r23
   15044:	82000005 	stb	r8,0(r16)
   15048:	001925c0 	call	1925c <_mbrtowc_r>
   1504c:	00ffffc4 	movi	r3,-1
   15050:	10fc4326 	beq	r2,r3,14160 <__alt_data_end+0xfffd5960>
   15054:	103c371e 	bne	r2,zero,14134 <__alt_data_end+0xfffd5934>
   15058:	a0000015 	stw	zero,0(r20)
   1505c:	0009883a 	mov	r4,zero
   15060:	00190f00 	call	190f0 <iswspace>
   15064:	10001b26 	beq	r2,zero,150d4 <__ssvfscanf_r+0x18dc>
   15068:	8821883a 	mov	r16,r17
   1506c:	dc409f17 	ldw	r17,636(sp)
   15070:	803f7f26 	beq	r16,zero,14e70 <__alt_data_end+0xfffd6670>
   15074:	843fffc4 	addi	r16,r16,-1
   15078:	d9400104 	addi	r5,sp,4
   1507c:	2c2b883a 	add	r21,r5,r16
   15080:	00000106 	br	15088 <__ssvfscanf_r+0x1890>
   15084:	843fffc4 	addi	r16,r16,-1
   15088:	a9400003 	ldbu	r5,0(r21)
   1508c:	980d883a 	mov	r6,r19
   15090:	b809883a 	mov	r4,r23
   15094:	001cb280 	call	1cb28 <_sungetc_r>
   15098:	ad7fffc4 	addi	r21,r21,-1
   1509c:	803ff91e 	bne	r16,zero,15084 <__alt_data_end+0xfffd6884>
   150a0:	003f7306 	br	14e70 <__alt_data_end+0xfffd6670>
   150a4:	d9400104 	addi	r5,sp,4
   150a8:	802b883a 	mov	r21,r16
   150ac:	9839883a 	mov	fp,r19
   150b0:	2c3a122e 	bgeu	r5,r16,138fc <__alt_data_end+0xfffd50fc>
   150b4:	ad7fffc4 	addi	r21,r21,-1
   150b8:	a9400007 	ldb	r5,0(r21)
   150bc:	e00d883a 	mov	r6,fp
   150c0:	b809883a 	mov	r4,r23
   150c4:	001cb280 	call	1cb28 <_sungetc_r>
   150c8:	d8800104 	addi	r2,sp,4
   150cc:	157ff91e 	bne	r2,r21,150b4 <__alt_data_end+0xfffd68b4>
   150d0:	003a0a06 	br	138fc <__alt_data_end+0xfffd50fc>
   150d4:	d8c09f17 	ldw	r3,636(sp)
   150d8:	9465883a 	add	r18,r18,r17
   150dc:	e73fffc4 	addi	fp,fp,-1
   150e0:	1800051e 	bne	r3,zero,150f8 <__ssvfscanf_r+0x1900>
   150e4:	a5000104 	addi	r20,r20,4
   150e8:	0021883a 	mov	r16,zero
   150ec:	003c1406 	br	14140 <__alt_data_end+0xfffd5940>
   150f0:	a1000017 	ldw	r4,0(r20)
   150f4:	003fda06 	br	15060 <__alt_data_end+0xfffd6860>
   150f8:	0021883a 	mov	r16,zero
   150fc:	003c1006 	br	14140 <__alt_data_end+0xfffd5940>
   15100:	d8c00104 	addi	r3,sp,4
   15104:	802b883a 	mov	r21,r16
   15108:	9839883a 	mov	fp,r19
   1510c:	1c39fb2e 	bgeu	r3,r16,138fc <__alt_data_end+0xfffd50fc>
   15110:	ad7fffc4 	addi	r21,r21,-1
   15114:	a9400007 	ldb	r5,0(r21)
   15118:	b809883a 	mov	r4,r23
   1511c:	e00d883a 	mov	r6,fp
   15120:	001cb280 	call	1cb28 <_sungetc_r>
   15124:	d9000104 	addi	r4,sp,4
   15128:	257ff91e 	bne	r4,r21,15110 <__alt_data_end+0xfffd6910>
   1512c:	0039f306 	br	138fc <__alt_data_end+0xfffd50fc>
   15130:	d8c00104 	addi	r3,sp,4
   15134:	802b883a 	mov	r21,r16
   15138:	9839883a 	mov	fp,r19
   1513c:	1c39ef2e 	bgeu	r3,r16,138fc <__alt_data_end+0xfffd50fc>
   15140:	ad7fffc4 	addi	r21,r21,-1
   15144:	a9400007 	ldb	r5,0(r21)
   15148:	b809883a 	mov	r4,r23
   1514c:	e00d883a 	mov	r6,fp
   15150:	001cb280 	call	1cb28 <_sungetc_r>
   15154:	d9000104 	addi	r4,sp,4
   15158:	257ff91e 	bne	r4,r21,15140 <__alt_data_end+0xfffd6940>
   1515c:	0039e706 	br	138fc <__alt_data_end+0xfffd50fc>
   15160:	0009883a 	mov	r4,zero
   15164:	001a7d00 	call	1a7d0 <nanf>
   15168:	a0800015 	stw	r2,0(r20)
   1516c:	dc409c15 	stw	r17,624(sp)
   15170:	003d8f06 	br	147b0 <__alt_data_end+0xfffd5fb0>
   15174:	d9400104 	addi	r5,sp,4
   15178:	b809883a 	mov	r4,r23
   1517c:	001c8080 	call	1c808 <_strtoull_r>
   15180:	003f9806 	br	14fe4 <__alt_data_end+0xfffd67e4>

00015184 <___vfprintf_internal_r>:
   15184:	deffb804 	addi	sp,sp,-288
   15188:	dfc04715 	stw	ra,284(sp)
   1518c:	ddc04515 	stw	r23,276(sp)
   15190:	dd404315 	stw	r21,268(sp)
   15194:	d9002d15 	stw	r4,180(sp)
   15198:	282f883a 	mov	r23,r5
   1519c:	302b883a 	mov	r21,r6
   151a0:	d9c02e15 	stw	r7,184(sp)
   151a4:	df004615 	stw	fp,280(sp)
   151a8:	dd804415 	stw	r22,272(sp)
   151ac:	dd004215 	stw	r20,264(sp)
   151b0:	dcc04115 	stw	r19,260(sp)
   151b4:	dc804015 	stw	r18,256(sp)
   151b8:	dc403f15 	stw	r17,252(sp)
   151bc:	dc003e15 	stw	r16,248(sp)
   151c0:	00191cc0 	call	191cc <_localeconv_r>
   151c4:	10800017 	ldw	r2,0(r2)
   151c8:	1009883a 	mov	r4,r2
   151cc:	d8803415 	stw	r2,208(sp)
   151d0:	00137600 	call	13760 <strlen>
   151d4:	d8803715 	stw	r2,220(sp)
   151d8:	d8802d17 	ldw	r2,180(sp)
   151dc:	10000226 	beq	r2,zero,151e8 <___vfprintf_internal_r+0x64>
   151e0:	10800e17 	ldw	r2,56(r2)
   151e4:	1000fb26 	beq	r2,zero,155d4 <___vfprintf_internal_r+0x450>
   151e8:	b880030b 	ldhu	r2,12(r23)
   151ec:	10c8000c 	andi	r3,r2,8192
   151f0:	1800061e 	bne	r3,zero,1520c <___vfprintf_internal_r+0x88>
   151f4:	b9001917 	ldw	r4,100(r23)
   151f8:	00f7ffc4 	movi	r3,-8193
   151fc:	10880014 	ori	r2,r2,8192
   15200:	20c6703a 	and	r3,r4,r3
   15204:	b880030d 	sth	r2,12(r23)
   15208:	b8c01915 	stw	r3,100(r23)
   1520c:	10c0020c 	andi	r3,r2,8
   15210:	1800c326 	beq	r3,zero,15520 <___vfprintf_internal_r+0x39c>
   15214:	b8c00417 	ldw	r3,16(r23)
   15218:	1800c126 	beq	r3,zero,15520 <___vfprintf_internal_r+0x39c>
   1521c:	1080068c 	andi	r2,r2,26
   15220:	00c00284 	movi	r3,10
   15224:	10c0c626 	beq	r2,r3,15540 <___vfprintf_internal_r+0x3bc>
   15228:	d8c00404 	addi	r3,sp,16
   1522c:	050000f4 	movhi	r20,3
   15230:	d9001e04 	addi	r4,sp,120
   15234:	a524c384 	addi	r20,r20,-27890
   15238:	d8c01e15 	stw	r3,120(sp)
   1523c:	d8002015 	stw	zero,128(sp)
   15240:	d8001f15 	stw	zero,124(sp)
   15244:	d8003315 	stw	zero,204(sp)
   15248:	d8003615 	stw	zero,216(sp)
   1524c:	d8003815 	stw	zero,224(sp)
   15250:	1811883a 	mov	r8,r3
   15254:	d8003915 	stw	zero,228(sp)
   15258:	d8003a15 	stw	zero,232(sp)
   1525c:	d8002f15 	stw	zero,188(sp)
   15260:	d9002815 	stw	r4,160(sp)
   15264:	a8800007 	ldb	r2,0(r21)
   15268:	10028b26 	beq	r2,zero,15c98 <___vfprintf_internal_r+0xb14>
   1526c:	00c00944 	movi	r3,37
   15270:	a823883a 	mov	r17,r21
   15274:	10c0021e 	bne	r2,r3,15280 <___vfprintf_internal_r+0xfc>
   15278:	00001406 	br	152cc <___vfprintf_internal_r+0x148>
   1527c:	10c00326 	beq	r2,r3,1528c <___vfprintf_internal_r+0x108>
   15280:	8c400044 	addi	r17,r17,1
   15284:	88800007 	ldb	r2,0(r17)
   15288:	103ffc1e 	bne	r2,zero,1527c <__alt_data_end+0xfffd6a7c>
   1528c:	8d61c83a 	sub	r16,r17,r21
   15290:	80000e26 	beq	r16,zero,152cc <___vfprintf_internal_r+0x148>
   15294:	d8c02017 	ldw	r3,128(sp)
   15298:	d8801f17 	ldw	r2,124(sp)
   1529c:	45400015 	stw	r21,0(r8)
   152a0:	1c07883a 	add	r3,r3,r16
   152a4:	10800044 	addi	r2,r2,1
   152a8:	d8c02015 	stw	r3,128(sp)
   152ac:	44000115 	stw	r16,4(r8)
   152b0:	d8801f15 	stw	r2,124(sp)
   152b4:	00c001c4 	movi	r3,7
   152b8:	1880a916 	blt	r3,r2,15560 <___vfprintf_internal_r+0x3dc>
   152bc:	42000204 	addi	r8,r8,8
   152c0:	d9402f17 	ldw	r5,188(sp)
   152c4:	2c0b883a 	add	r5,r5,r16
   152c8:	d9402f15 	stw	r5,188(sp)
   152cc:	88800007 	ldb	r2,0(r17)
   152d0:	1000aa26 	beq	r2,zero,1557c <___vfprintf_internal_r+0x3f8>
   152d4:	8d400044 	addi	r21,r17,1
   152d8:	8c400047 	ldb	r17,1(r17)
   152dc:	0021883a 	mov	r16,zero
   152e0:	00bfffc4 	movi	r2,-1
   152e4:	0025883a 	mov	r18,zero
   152e8:	dc002905 	stb	r16,164(sp)
   152ec:	d8002785 	stb	zero,158(sp)
   152f0:	d8002b05 	stb	zero,172(sp)
   152f4:	d8802a15 	stw	r2,168(sp)
   152f8:	d8003115 	stw	zero,196(sp)
   152fc:	04c01604 	movi	r19,88
   15300:	05800244 	movi	r22,9
   15304:	9021883a 	mov	r16,r18
   15308:	4039883a 	mov	fp,r8
   1530c:	ad400044 	addi	r21,r21,1
   15310:	88bff804 	addi	r2,r17,-32
   15314:	98833236 	bltu	r19,r2,15fe0 <___vfprintf_internal_r+0xe5c>
   15318:	100490ba 	slli	r2,r2,2
   1531c:	00c00074 	movhi	r3,1
   15320:	18d4cc04 	addi	r3,r3,21296
   15324:	10c5883a 	add	r2,r2,r3
   15328:	10800017 	ldw	r2,0(r2)
   1532c:	1000683a 	jmp	r2
   15330:	00015ed8 	cmpnei	zero,zero,1403
   15334:	00015fe0 	cmpeqi	zero,zero,1407
   15338:	00015fe0 	cmpeqi	zero,zero,1407
   1533c:	00015ef8 	rdprs	zero,zero,1403
   15340:	00015fe0 	cmpeqi	zero,zero,1407
   15344:	00015fe0 	cmpeqi	zero,zero,1407
   15348:	00015fe0 	cmpeqi	zero,zero,1407
   1534c:	00015fe0 	cmpeqi	zero,zero,1407
   15350:	00015fe0 	cmpeqi	zero,zero,1407
   15354:	00015fe0 	cmpeqi	zero,zero,1407
   15358:	000155e0 	cmpeqi	zero,zero,1367
   1535c:	00015de8 	cmpgeui	zero,zero,1399
   15360:	00015fe0 	cmpeqi	zero,zero,1407
   15364:	000154a4 	muli	zero,zero,1362
   15368:	00015604 	movi	zero,1368
   1536c:	00015fe0 	cmpeqi	zero,zero,1407
   15370:	00015654 	movui	zero,1369
   15374:	00015660 	cmpeqi	zero,zero,1369
   15378:	00015660 	cmpeqi	zero,zero,1369
   1537c:	00015660 	cmpeqi	zero,zero,1369
   15380:	00015660 	cmpeqi	zero,zero,1369
   15384:	00015660 	cmpeqi	zero,zero,1369
   15388:	00015660 	cmpeqi	zero,zero,1369
   1538c:	00015660 	cmpeqi	zero,zero,1369
   15390:	00015660 	cmpeqi	zero,zero,1369
   15394:	00015660 	cmpeqi	zero,zero,1369
   15398:	00015fe0 	cmpeqi	zero,zero,1407
   1539c:	00015fe0 	cmpeqi	zero,zero,1407
   153a0:	00015fe0 	cmpeqi	zero,zero,1407
   153a4:	00015fe0 	cmpeqi	zero,zero,1407
   153a8:	00015fe0 	cmpeqi	zero,zero,1407
   153ac:	00015fe0 	cmpeqi	zero,zero,1407
   153b0:	00015fe0 	cmpeqi	zero,zero,1407
   153b4:	00015fe0 	cmpeqi	zero,zero,1407
   153b8:	00015fe0 	cmpeqi	zero,zero,1407
   153bc:	00015fe0 	cmpeqi	zero,zero,1407
   153c0:	0001569c 	xori	zero,zero,1370
   153c4:	00015764 	muli	zero,zero,1373
   153c8:	00015fe0 	cmpeqi	zero,zero,1407
   153cc:	00015764 	muli	zero,zero,1373
   153d0:	00015fe0 	cmpeqi	zero,zero,1407
   153d4:	00015fe0 	cmpeqi	zero,zero,1407
   153d8:	00015fe0 	cmpeqi	zero,zero,1407
   153dc:	00015fe0 	cmpeqi	zero,zero,1407
   153e0:	00015810 	cmplti	zero,zero,1376
   153e4:	00015fe0 	cmpeqi	zero,zero,1407
   153e8:	00015fe0 	cmpeqi	zero,zero,1407
   153ec:	0001581c 	xori	zero,zero,1376
   153f0:	00015fe0 	cmpeqi	zero,zero,1407
   153f4:	00015fe0 	cmpeqi	zero,zero,1407
   153f8:	00015fe0 	cmpeqi	zero,zero,1407
   153fc:	00015fe0 	cmpeqi	zero,zero,1407
   15400:	00015fe0 	cmpeqi	zero,zero,1407
   15404:	00015ca0 	cmpeqi	zero,zero,1394
   15408:	00015fe0 	cmpeqi	zero,zero,1407
   1540c:	00015fe0 	cmpeqi	zero,zero,1407
   15410:	00015d0c 	andi	zero,zero,1396
   15414:	00015fe0 	cmpeqi	zero,zero,1407
   15418:	00015fe0 	cmpeqi	zero,zero,1407
   1541c:	00015fe0 	cmpeqi	zero,zero,1407
   15420:	00015fe0 	cmpeqi	zero,zero,1407
   15424:	00015fe0 	cmpeqi	zero,zero,1407
   15428:	00015fe0 	cmpeqi	zero,zero,1407
   1542c:	00015fe0 	cmpeqi	zero,zero,1407
   15430:	00015fe0 	cmpeqi	zero,zero,1407
   15434:	00015fe0 	cmpeqi	zero,zero,1407
   15438:	00015fe0 	cmpeqi	zero,zero,1407
   1543c:	00015f84 	movi	zero,1406
   15440:	00015f04 	movi	zero,1404
   15444:	00015764 	muli	zero,zero,1373
   15448:	00015764 	muli	zero,zero,1373
   1544c:	00015764 	muli	zero,zero,1373
   15450:	00015f24 	muli	zero,zero,1404
   15454:	00015f04 	movi	zero,1404
   15458:	00015fe0 	cmpeqi	zero,zero,1407
   1545c:	00015fe0 	cmpeqi	zero,zero,1407
   15460:	00015f30 	cmpltui	zero,zero,1404
   15464:	00015fe0 	cmpeqi	zero,zero,1407
   15468:	00015f44 	movi	zero,1405
   1546c:	00015dc8 	cmpgei	zero,zero,1399
   15470:	000154b0 	cmpltui	zero,zero,1362
   15474:	00015e00 	call	15e0 <set_addrs_to_default+0x4a0>
   15478:	00015fe0 	cmpeqi	zero,zero,1407
   1547c:	00015e0c 	andi	zero,zero,1400
   15480:	00015fe0 	cmpeqi	zero,zero,1407
   15484:	00015e70 	cmpltui	zero,zero,1401
   15488:	00015fe0 	cmpeqi	zero,zero,1407
   1548c:	00015fe0 	cmpeqi	zero,zero,1407
   15490:	00015e90 	cmplti	zero,zero,1402
   15494:	d8c03117 	ldw	r3,196(sp)
   15498:	d8802e15 	stw	r2,184(sp)
   1549c:	00c7c83a 	sub	r3,zero,r3
   154a0:	d8c03115 	stw	r3,196(sp)
   154a4:	84000114 	ori	r16,r16,4
   154a8:	ac400007 	ldb	r17,0(r21)
   154ac:	003f9706 	br	1530c <__alt_data_end+0xfffd6b0c>
   154b0:	00800c04 	movi	r2,48
   154b4:	d8802705 	stb	r2,156(sp)
   154b8:	00801e04 	movi	r2,120
   154bc:	d8802745 	stb	r2,157(sp)
   154c0:	d9002a17 	ldw	r4,168(sp)
   154c4:	d8802e17 	ldw	r2,184(sp)
   154c8:	d8002785 	stb	zero,158(sp)
   154cc:	e011883a 	mov	r8,fp
   154d0:	10c00104 	addi	r3,r2,4
   154d4:	14c00017 	ldw	r19,0(r2)
   154d8:	002d883a 	mov	r22,zero
   154dc:	80800094 	ori	r2,r16,2
   154e0:	2002ca16 	blt	r4,zero,1600c <___vfprintf_internal_r+0xe88>
   154e4:	00bfdfc4 	movi	r2,-129
   154e8:	80a4703a 	and	r18,r16,r2
   154ec:	d8c02e15 	stw	r3,184(sp)
   154f0:	94800094 	ori	r18,r18,2
   154f4:	9802b41e 	bne	r19,zero,15fc8 <___vfprintf_internal_r+0xe44>
   154f8:	014000f4 	movhi	r5,3
   154fc:	2964bc04 	addi	r5,r5,-27920
   15500:	d9403915 	stw	r5,228(sp)
   15504:	04401e04 	movi	r17,120
   15508:	d8802a17 	ldw	r2,168(sp)
   1550c:	0039883a 	mov	fp,zero
   15510:	1001fa26 	beq	r2,zero,15cfc <___vfprintf_internal_r+0xb78>
   15514:	0027883a 	mov	r19,zero
   15518:	002d883a 	mov	r22,zero
   1551c:	00021906 	br	15d84 <___vfprintf_internal_r+0xc00>
   15520:	d9002d17 	ldw	r4,180(sp)
   15524:	b80b883a 	mov	r5,r23
   15528:	00175980 	call	17598 <__swsetup_r>
   1552c:	1005dc1e 	bne	r2,zero,16ca0 <___vfprintf_internal_r+0x1b1c>
   15530:	b880030b 	ldhu	r2,12(r23)
   15534:	00c00284 	movi	r3,10
   15538:	1080068c 	andi	r2,r2,26
   1553c:	10ff3a1e 	bne	r2,r3,15228 <__alt_data_end+0xfffd6a28>
   15540:	b880038f 	ldh	r2,14(r23)
   15544:	103f3816 	blt	r2,zero,15228 <__alt_data_end+0xfffd6a28>
   15548:	d9c02e17 	ldw	r7,184(sp)
   1554c:	d9002d17 	ldw	r4,180(sp)
   15550:	a80d883a 	mov	r6,r21
   15554:	b80b883a 	mov	r5,r23
   15558:	001747c0 	call	1747c <__sbprintf>
   1555c:	00001106 	br	155a4 <___vfprintf_internal_r+0x420>
   15560:	d9002d17 	ldw	r4,180(sp)
   15564:	d9801e04 	addi	r6,sp,120
   15568:	b80b883a 	mov	r5,r23
   1556c:	00205240 	call	20524 <__sprint_r>
   15570:	1000081e 	bne	r2,zero,15594 <___vfprintf_internal_r+0x410>
   15574:	da000404 	addi	r8,sp,16
   15578:	003f5106 	br	152c0 <__alt_data_end+0xfffd6ac0>
   1557c:	d8802017 	ldw	r2,128(sp)
   15580:	10000426 	beq	r2,zero,15594 <___vfprintf_internal_r+0x410>
   15584:	d9002d17 	ldw	r4,180(sp)
   15588:	d9801e04 	addi	r6,sp,120
   1558c:	b80b883a 	mov	r5,r23
   15590:	00205240 	call	20524 <__sprint_r>
   15594:	b880030b 	ldhu	r2,12(r23)
   15598:	1080100c 	andi	r2,r2,64
   1559c:	1005c01e 	bne	r2,zero,16ca0 <___vfprintf_internal_r+0x1b1c>
   155a0:	d8802f17 	ldw	r2,188(sp)
   155a4:	dfc04717 	ldw	ra,284(sp)
   155a8:	df004617 	ldw	fp,280(sp)
   155ac:	ddc04517 	ldw	r23,276(sp)
   155b0:	dd804417 	ldw	r22,272(sp)
   155b4:	dd404317 	ldw	r21,268(sp)
   155b8:	dd004217 	ldw	r20,264(sp)
   155bc:	dcc04117 	ldw	r19,260(sp)
   155c0:	dc804017 	ldw	r18,256(sp)
   155c4:	dc403f17 	ldw	r17,252(sp)
   155c8:	dc003e17 	ldw	r16,248(sp)
   155cc:	dec04804 	addi	sp,sp,288
   155d0:	f800283a 	ret
   155d4:	d9002d17 	ldw	r4,180(sp)
   155d8:	0010a900 	call	10a90 <__sinit>
   155dc:	003f0206 	br	151e8 <__alt_data_end+0xfffd69e8>
   155e0:	d9002e17 	ldw	r4,184(sp)
   155e4:	d9402e17 	ldw	r5,184(sp)
   155e8:	21000017 	ldw	r4,0(r4)
   155ec:	28800104 	addi	r2,r5,4
   155f0:	d9003115 	stw	r4,196(sp)
   155f4:	203fa716 	blt	r4,zero,15494 <__alt_data_end+0xfffd6c94>
   155f8:	d8802e15 	stw	r2,184(sp)
   155fc:	ac400007 	ldb	r17,0(r21)
   15600:	003f4206 	br	1530c <__alt_data_end+0xfffd6b0c>
   15604:	ac400007 	ldb	r17,0(r21)
   15608:	01000a84 	movi	r4,42
   1560c:	a8c00044 	addi	r3,r21,1
   15610:	89075826 	beq	r17,r4,17374 <___vfprintf_internal_r+0x21f0>
   15614:	8cbff404 	addi	r18,r17,-48
   15618:	b486ae36 	bltu	r22,r18,170d4 <___vfprintf_internal_r+0x1f50>
   1561c:	0009883a 	mov	r4,zero
   15620:	1823883a 	mov	r17,r3
   15624:	01400284 	movi	r5,10
   15628:	002587c0 	call	2587c <__mulsi3>
   1562c:	88c00007 	ldb	r3,0(r17)
   15630:	1489883a 	add	r4,r2,r18
   15634:	8d400044 	addi	r21,r17,1
   15638:	1cbff404 	addi	r18,r3,-48
   1563c:	a823883a 	mov	r17,r21
   15640:	b4bff82e 	bgeu	r22,r18,15624 <__alt_data_end+0xfffd6e24>
   15644:	1823883a 	mov	r17,r3
   15648:	2005f616 	blt	r4,zero,16e24 <___vfprintf_internal_r+0x1ca0>
   1564c:	d9002a15 	stw	r4,168(sp)
   15650:	003f2f06 	br	15310 <__alt_data_end+0xfffd6b10>
   15654:	84002014 	ori	r16,r16,128
   15658:	ac400007 	ldb	r17,0(r21)
   1565c:	003f2b06 	br	1530c <__alt_data_end+0xfffd6b0c>
   15660:	8cbff404 	addi	r18,r17,-48
   15664:	d8003115 	stw	zero,196(sp)
   15668:	0009883a 	mov	r4,zero
   1566c:	a823883a 	mov	r17,r21
   15670:	01400284 	movi	r5,10
   15674:	002587c0 	call	2587c <__mulsi3>
   15678:	88c00007 	ldb	r3,0(r17)
   1567c:	9089883a 	add	r4,r18,r2
   15680:	ad400044 	addi	r21,r21,1
   15684:	1cbff404 	addi	r18,r3,-48
   15688:	a823883a 	mov	r17,r21
   1568c:	b4bff82e 	bgeu	r22,r18,15670 <__alt_data_end+0xfffd6e70>
   15690:	1823883a 	mov	r17,r3
   15694:	d9003115 	stw	r4,196(sp)
   15698:	003f1d06 	br	15310 <__alt_data_end+0xfffd6b10>
   1569c:	8025883a 	mov	r18,r16
   156a0:	dc002903 	ldbu	r16,164(sp)
   156a4:	e011883a 	mov	r8,fp
   156a8:	84003fcc 	andi	r16,r16,255
   156ac:	8007531e 	bne	r16,zero,173fc <___vfprintf_internal_r+0x2278>
   156b0:	94800414 	ori	r18,r18,16
   156b4:	9080080c 	andi	r2,r18,32
   156b8:	1003a326 	beq	r2,zero,16548 <___vfprintf_internal_r+0x13c4>
   156bc:	d9002e17 	ldw	r4,184(sp)
   156c0:	20800117 	ldw	r2,4(r4)
   156c4:	24c00017 	ldw	r19,0(r4)
   156c8:	21000204 	addi	r4,r4,8
   156cc:	d9002e15 	stw	r4,184(sp)
   156d0:	102d883a 	mov	r22,r2
   156d4:	10047316 	blt	r2,zero,168a4 <___vfprintf_internal_r+0x1720>
   156d8:	d9002a17 	ldw	r4,168(sp)
   156dc:	df002783 	ldbu	fp,158(sp)
   156e0:	2003e416 	blt	r4,zero,16674 <___vfprintf_internal_r+0x14f0>
   156e4:	00ffdfc4 	movi	r3,-129
   156e8:	9d84b03a 	or	r2,r19,r22
   156ec:	90e4703a 	and	r18,r18,r3
   156f0:	10018026 	beq	r2,zero,15cf4 <___vfprintf_internal_r+0xb70>
   156f4:	b003ab26 	beq	r22,zero,165a4 <___vfprintf_internal_r+0x1420>
   156f8:	dc402915 	stw	r17,164(sp)
   156fc:	dc001e04 	addi	r16,sp,120
   15700:	b023883a 	mov	r17,r22
   15704:	402d883a 	mov	r22,r8
   15708:	9809883a 	mov	r4,r19
   1570c:	880b883a 	mov	r5,r17
   15710:	01800284 	movi	r6,10
   15714:	000f883a 	mov	r7,zero
   15718:	00251040 	call	25104 <__umoddi3>
   1571c:	10800c04 	addi	r2,r2,48
   15720:	843fffc4 	addi	r16,r16,-1
   15724:	9809883a 	mov	r4,r19
   15728:	880b883a 	mov	r5,r17
   1572c:	80800005 	stb	r2,0(r16)
   15730:	01800284 	movi	r6,10
   15734:	000f883a 	mov	r7,zero
   15738:	0024b080 	call	24b08 <__udivdi3>
   1573c:	1027883a 	mov	r19,r2
   15740:	10c4b03a 	or	r2,r2,r3
   15744:	1823883a 	mov	r17,r3
   15748:	103fef1e 	bne	r2,zero,15708 <__alt_data_end+0xfffd6f08>
   1574c:	d8c02817 	ldw	r3,160(sp)
   15750:	dc402917 	ldw	r17,164(sp)
   15754:	b011883a 	mov	r8,r22
   15758:	1c07c83a 	sub	r3,r3,r16
   1575c:	d8c02b15 	stw	r3,172(sp)
   15760:	00005f06 	br	158e0 <___vfprintf_internal_r+0x75c>
   15764:	8025883a 	mov	r18,r16
   15768:	dc002903 	ldbu	r16,164(sp)
   1576c:	e011883a 	mov	r8,fp
   15770:	84003fcc 	andi	r16,r16,255
   15774:	80071e1e 	bne	r16,zero,173f0 <___vfprintf_internal_r+0x226c>
   15778:	9080020c 	andi	r2,r18,8
   1577c:	1004af26 	beq	r2,zero,16a3c <___vfprintf_internal_r+0x18b8>
   15780:	d9002e17 	ldw	r4,184(sp)
   15784:	d9402e17 	ldw	r5,184(sp)
   15788:	d8802e17 	ldw	r2,184(sp)
   1578c:	21000017 	ldw	r4,0(r4)
   15790:	29400117 	ldw	r5,4(r5)
   15794:	10800204 	addi	r2,r2,8
   15798:	d9003615 	stw	r4,216(sp)
   1579c:	d9403815 	stw	r5,224(sp)
   157a0:	d8802e15 	stw	r2,184(sp)
   157a4:	d9003617 	ldw	r4,216(sp)
   157a8:	d9403817 	ldw	r5,224(sp)
   157ac:	da003d15 	stw	r8,244(sp)
   157b0:	04000044 	movi	r16,1
   157b4:	000ff480 	call	ff48 <__fpclassifyd>
   157b8:	da003d17 	ldw	r8,244(sp)
   157bc:	1404441e 	bne	r2,r16,168d0 <___vfprintf_internal_r+0x174c>
   157c0:	d9003617 	ldw	r4,216(sp)
   157c4:	d9403817 	ldw	r5,224(sp)
   157c8:	000d883a 	mov	r6,zero
   157cc:	000f883a 	mov	r7,zero
   157d0:	0026e800 	call	26e80 <__ledf2>
   157d4:	da003d17 	ldw	r8,244(sp)
   157d8:	1005e316 	blt	r2,zero,16f68 <___vfprintf_internal_r+0x1de4>
   157dc:	df002783 	ldbu	fp,158(sp)
   157e0:	008011c4 	movi	r2,71
   157e4:	1445580e 	bge	r2,r17,16d48 <___vfprintf_internal_r+0x1bc4>
   157e8:	040000f4 	movhi	r16,3
   157ec:	8424b404 	addi	r16,r16,-27952
   157f0:	00c000c4 	movi	r3,3
   157f4:	00bfdfc4 	movi	r2,-129
   157f8:	d8c02915 	stw	r3,164(sp)
   157fc:	90a4703a 	and	r18,r18,r2
   15800:	d8c02b15 	stw	r3,172(sp)
   15804:	d8002a15 	stw	zero,168(sp)
   15808:	d8003215 	stw	zero,200(sp)
   1580c:	00003a06 	br	158f8 <___vfprintf_internal_r+0x774>
   15810:	84000214 	ori	r16,r16,8
   15814:	ac400007 	ldb	r17,0(r21)
   15818:	003ebc06 	br	1530c <__alt_data_end+0xfffd6b0c>
   1581c:	8025883a 	mov	r18,r16
   15820:	dc002903 	ldbu	r16,164(sp)
   15824:	e011883a 	mov	r8,fp
   15828:	84003fcc 	andi	r16,r16,255
   1582c:	8007001e 	bne	r16,zero,17430 <___vfprintf_internal_r+0x22ac>
   15830:	94800414 	ori	r18,r18,16
   15834:	9080080c 	andi	r2,r18,32
   15838:	1002fa26 	beq	r2,zero,16424 <___vfprintf_internal_r+0x12a0>
   1583c:	d9002e17 	ldw	r4,184(sp)
   15840:	d9402a17 	ldw	r5,168(sp)
   15844:	d8002785 	stb	zero,158(sp)
   15848:	20800204 	addi	r2,r4,8
   1584c:	24c00017 	ldw	r19,0(r4)
   15850:	25800117 	ldw	r22,4(r4)
   15854:	2804b116 	blt	r5,zero,16b1c <___vfprintf_internal_r+0x1998>
   15858:	013fdfc4 	movi	r4,-129
   1585c:	9d86b03a 	or	r3,r19,r22
   15860:	d8802e15 	stw	r2,184(sp)
   15864:	9124703a 	and	r18,r18,r4
   15868:	1802fb1e 	bne	r3,zero,16458 <___vfprintf_internal_r+0x12d4>
   1586c:	d8c02a17 	ldw	r3,168(sp)
   15870:	0039883a 	mov	fp,zero
   15874:	1805e526 	beq	r3,zero,1700c <___vfprintf_internal_r+0x1e88>
   15878:	0027883a 	mov	r19,zero
   1587c:	002d883a 	mov	r22,zero
   15880:	dc001e04 	addi	r16,sp,120
   15884:	9806d0fa 	srli	r3,r19,3
   15888:	b008977a 	slli	r4,r22,29
   1588c:	b02cd0fa 	srli	r22,r22,3
   15890:	9cc001cc 	andi	r19,r19,7
   15894:	98800c04 	addi	r2,r19,48
   15898:	843fffc4 	addi	r16,r16,-1
   1589c:	20e6b03a 	or	r19,r4,r3
   158a0:	80800005 	stb	r2,0(r16)
   158a4:	9d86b03a 	or	r3,r19,r22
   158a8:	183ff61e 	bne	r3,zero,15884 <__alt_data_end+0xfffd7084>
   158ac:	90c0004c 	andi	r3,r18,1
   158b0:	18014126 	beq	r3,zero,15db8 <___vfprintf_internal_r+0xc34>
   158b4:	10803fcc 	andi	r2,r2,255
   158b8:	1080201c 	xori	r2,r2,128
   158bc:	10bfe004 	addi	r2,r2,-128
   158c0:	00c00c04 	movi	r3,48
   158c4:	10c13c26 	beq	r2,r3,15db8 <___vfprintf_internal_r+0xc34>
   158c8:	80ffffc5 	stb	r3,-1(r16)
   158cc:	d8c02817 	ldw	r3,160(sp)
   158d0:	80bfffc4 	addi	r2,r16,-1
   158d4:	1021883a 	mov	r16,r2
   158d8:	1887c83a 	sub	r3,r3,r2
   158dc:	d8c02b15 	stw	r3,172(sp)
   158e0:	d8802b17 	ldw	r2,172(sp)
   158e4:	d9002a17 	ldw	r4,168(sp)
   158e8:	1100010e 	bge	r2,r4,158f0 <___vfprintf_internal_r+0x76c>
   158ec:	2005883a 	mov	r2,r4
   158f0:	d8802915 	stw	r2,164(sp)
   158f4:	d8003215 	stw	zero,200(sp)
   158f8:	e7003fcc 	andi	fp,fp,255
   158fc:	e700201c 	xori	fp,fp,128
   15900:	e73fe004 	addi	fp,fp,-128
   15904:	e0000326 	beq	fp,zero,15914 <___vfprintf_internal_r+0x790>
   15908:	d8c02917 	ldw	r3,164(sp)
   1590c:	18c00044 	addi	r3,r3,1
   15910:	d8c02915 	stw	r3,164(sp)
   15914:	90c0008c 	andi	r3,r18,2
   15918:	d8c02c15 	stw	r3,176(sp)
   1591c:	18000326 	beq	r3,zero,1592c <___vfprintf_internal_r+0x7a8>
   15920:	d8c02917 	ldw	r3,164(sp)
   15924:	18c00084 	addi	r3,r3,2
   15928:	d8c02915 	stw	r3,164(sp)
   1592c:	90c0210c 	andi	r3,r18,132
   15930:	d8c03015 	stw	r3,192(sp)
   15934:	1801c51e 	bne	r3,zero,1604c <___vfprintf_internal_r+0xec8>
   15938:	d9003117 	ldw	r4,196(sp)
   1593c:	d8c02917 	ldw	r3,164(sp)
   15940:	20e7c83a 	sub	r19,r4,r3
   15944:	04c1c10e 	bge	zero,r19,1604c <___vfprintf_internal_r+0xec8>
   15948:	02400404 	movi	r9,16
   1594c:	d8c02017 	ldw	r3,128(sp)
   15950:	d8801f17 	ldw	r2,124(sp)
   15954:	4cc52f0e 	bge	r9,r19,16e14 <___vfprintf_internal_r+0x1c90>
   15958:	014000f4 	movhi	r5,3
   1595c:	2964c784 	addi	r5,r5,-27874
   15960:	dc403b15 	stw	r17,236(sp)
   15964:	d9403515 	stw	r5,212(sp)
   15968:	9823883a 	mov	r17,r19
   1596c:	482d883a 	mov	r22,r9
   15970:	9027883a 	mov	r19,r18
   15974:	070001c4 	movi	fp,7
   15978:	8025883a 	mov	r18,r16
   1597c:	dc002d17 	ldw	r16,180(sp)
   15980:	00000306 	br	15990 <___vfprintf_internal_r+0x80c>
   15984:	8c7ffc04 	addi	r17,r17,-16
   15988:	42000204 	addi	r8,r8,8
   1598c:	b440130e 	bge	r22,r17,159dc <___vfprintf_internal_r+0x858>
   15990:	010000f4 	movhi	r4,3
   15994:	18c00404 	addi	r3,r3,16
   15998:	10800044 	addi	r2,r2,1
   1599c:	2124c784 	addi	r4,r4,-27874
   159a0:	41000015 	stw	r4,0(r8)
   159a4:	45800115 	stw	r22,4(r8)
   159a8:	d8c02015 	stw	r3,128(sp)
   159ac:	d8801f15 	stw	r2,124(sp)
   159b0:	e0bff40e 	bge	fp,r2,15984 <__alt_data_end+0xfffd7184>
   159b4:	d9801e04 	addi	r6,sp,120
   159b8:	b80b883a 	mov	r5,r23
   159bc:	8009883a 	mov	r4,r16
   159c0:	00205240 	call	20524 <__sprint_r>
   159c4:	103ef31e 	bne	r2,zero,15594 <__alt_data_end+0xfffd6d94>
   159c8:	8c7ffc04 	addi	r17,r17,-16
   159cc:	d8c02017 	ldw	r3,128(sp)
   159d0:	d8801f17 	ldw	r2,124(sp)
   159d4:	da000404 	addi	r8,sp,16
   159d8:	b47fed16 	blt	r22,r17,15990 <__alt_data_end+0xfffd7190>
   159dc:	9021883a 	mov	r16,r18
   159e0:	9825883a 	mov	r18,r19
   159e4:	8827883a 	mov	r19,r17
   159e8:	dc403b17 	ldw	r17,236(sp)
   159ec:	d9403517 	ldw	r5,212(sp)
   159f0:	98c7883a 	add	r3,r19,r3
   159f4:	10800044 	addi	r2,r2,1
   159f8:	41400015 	stw	r5,0(r8)
   159fc:	44c00115 	stw	r19,4(r8)
   15a00:	d8c02015 	stw	r3,128(sp)
   15a04:	d8801f15 	stw	r2,124(sp)
   15a08:	010001c4 	movi	r4,7
   15a0c:	2082c516 	blt	r4,r2,16524 <___vfprintf_internal_r+0x13a0>
   15a10:	df002787 	ldb	fp,158(sp)
   15a14:	42000204 	addi	r8,r8,8
   15a18:	e0000c26 	beq	fp,zero,15a4c <___vfprintf_internal_r+0x8c8>
   15a1c:	d8801f17 	ldw	r2,124(sp)
   15a20:	d9002784 	addi	r4,sp,158
   15a24:	18c00044 	addi	r3,r3,1
   15a28:	10800044 	addi	r2,r2,1
   15a2c:	41000015 	stw	r4,0(r8)
   15a30:	01000044 	movi	r4,1
   15a34:	41000115 	stw	r4,4(r8)
   15a38:	d8c02015 	stw	r3,128(sp)
   15a3c:	d8801f15 	stw	r2,124(sp)
   15a40:	010001c4 	movi	r4,7
   15a44:	20825e16 	blt	r4,r2,163c0 <___vfprintf_internal_r+0x123c>
   15a48:	42000204 	addi	r8,r8,8
   15a4c:	d8802c17 	ldw	r2,176(sp)
   15a50:	10000c26 	beq	r2,zero,15a84 <___vfprintf_internal_r+0x900>
   15a54:	d8801f17 	ldw	r2,124(sp)
   15a58:	d9002704 	addi	r4,sp,156
   15a5c:	18c00084 	addi	r3,r3,2
   15a60:	10800044 	addi	r2,r2,1
   15a64:	41000015 	stw	r4,0(r8)
   15a68:	01000084 	movi	r4,2
   15a6c:	41000115 	stw	r4,4(r8)
   15a70:	d8c02015 	stw	r3,128(sp)
   15a74:	d8801f15 	stw	r2,124(sp)
   15a78:	010001c4 	movi	r4,7
   15a7c:	20825816 	blt	r4,r2,163e0 <___vfprintf_internal_r+0x125c>
   15a80:	42000204 	addi	r8,r8,8
   15a84:	d9003017 	ldw	r4,192(sp)
   15a88:	00802004 	movi	r2,128
   15a8c:	2081bb26 	beq	r4,r2,1617c <___vfprintf_internal_r+0xff8>
   15a90:	d9402a17 	ldw	r5,168(sp)
   15a94:	d8802b17 	ldw	r2,172(sp)
   15a98:	28adc83a 	sub	r22,r5,r2
   15a9c:	0580310e 	bge	zero,r22,15b64 <___vfprintf_internal_r+0x9e0>
   15aa0:	07000404 	movi	fp,16
   15aa4:	d8801f17 	ldw	r2,124(sp)
   15aa8:	e584360e 	bge	fp,r22,16b84 <___vfprintf_internal_r+0x1a00>
   15aac:	014000f4 	movhi	r5,3
   15ab0:	2964c384 	addi	r5,r5,-27890
   15ab4:	dc402a15 	stw	r17,168(sp)
   15ab8:	d9402c15 	stw	r5,176(sp)
   15abc:	b023883a 	mov	r17,r22
   15ac0:	04c001c4 	movi	r19,7
   15ac4:	a82d883a 	mov	r22,r21
   15ac8:	902b883a 	mov	r21,r18
   15acc:	8025883a 	mov	r18,r16
   15ad0:	dc002d17 	ldw	r16,180(sp)
   15ad4:	00000306 	br	15ae4 <___vfprintf_internal_r+0x960>
   15ad8:	8c7ffc04 	addi	r17,r17,-16
   15adc:	42000204 	addi	r8,r8,8
   15ae0:	e440110e 	bge	fp,r17,15b28 <___vfprintf_internal_r+0x9a4>
   15ae4:	18c00404 	addi	r3,r3,16
   15ae8:	10800044 	addi	r2,r2,1
   15aec:	45000015 	stw	r20,0(r8)
   15af0:	47000115 	stw	fp,4(r8)
   15af4:	d8c02015 	stw	r3,128(sp)
   15af8:	d8801f15 	stw	r2,124(sp)
   15afc:	98bff60e 	bge	r19,r2,15ad8 <__alt_data_end+0xfffd72d8>
   15b00:	d9801e04 	addi	r6,sp,120
   15b04:	b80b883a 	mov	r5,r23
   15b08:	8009883a 	mov	r4,r16
   15b0c:	00205240 	call	20524 <__sprint_r>
   15b10:	103ea01e 	bne	r2,zero,15594 <__alt_data_end+0xfffd6d94>
   15b14:	8c7ffc04 	addi	r17,r17,-16
   15b18:	d8c02017 	ldw	r3,128(sp)
   15b1c:	d8801f17 	ldw	r2,124(sp)
   15b20:	da000404 	addi	r8,sp,16
   15b24:	e47fef16 	blt	fp,r17,15ae4 <__alt_data_end+0xfffd72e4>
   15b28:	9021883a 	mov	r16,r18
   15b2c:	a825883a 	mov	r18,r21
   15b30:	b02b883a 	mov	r21,r22
   15b34:	882d883a 	mov	r22,r17
   15b38:	dc402a17 	ldw	r17,168(sp)
   15b3c:	d9002c17 	ldw	r4,176(sp)
   15b40:	1d87883a 	add	r3,r3,r22
   15b44:	10800044 	addi	r2,r2,1
   15b48:	41000015 	stw	r4,0(r8)
   15b4c:	45800115 	stw	r22,4(r8)
   15b50:	d8c02015 	stw	r3,128(sp)
   15b54:	d8801f15 	stw	r2,124(sp)
   15b58:	010001c4 	movi	r4,7
   15b5c:	20821016 	blt	r4,r2,163a0 <___vfprintf_internal_r+0x121c>
   15b60:	42000204 	addi	r8,r8,8
   15b64:	9080400c 	andi	r2,r18,256
   15b68:	10013a1e 	bne	r2,zero,16054 <___vfprintf_internal_r+0xed0>
   15b6c:	d9402b17 	ldw	r5,172(sp)
   15b70:	d8801f17 	ldw	r2,124(sp)
   15b74:	44000015 	stw	r16,0(r8)
   15b78:	1947883a 	add	r3,r3,r5
   15b7c:	10800044 	addi	r2,r2,1
   15b80:	41400115 	stw	r5,4(r8)
   15b84:	d8c02015 	stw	r3,128(sp)
   15b88:	d8801f15 	stw	r2,124(sp)
   15b8c:	010001c4 	movi	r4,7
   15b90:	2081f516 	blt	r4,r2,16368 <___vfprintf_internal_r+0x11e4>
   15b94:	42000204 	addi	r8,r8,8
   15b98:	9480010c 	andi	r18,r18,4
   15b9c:	90003226 	beq	r18,zero,15c68 <___vfprintf_internal_r+0xae4>
   15ba0:	d9403117 	ldw	r5,196(sp)
   15ba4:	d8802917 	ldw	r2,164(sp)
   15ba8:	28a1c83a 	sub	r16,r5,r2
   15bac:	04002e0e 	bge	zero,r16,15c68 <___vfprintf_internal_r+0xae4>
   15bb0:	04400404 	movi	r17,16
   15bb4:	d8801f17 	ldw	r2,124(sp)
   15bb8:	8c04c40e 	bge	r17,r16,16ecc <___vfprintf_internal_r+0x1d48>
   15bbc:	014000f4 	movhi	r5,3
   15bc0:	2964c784 	addi	r5,r5,-27874
   15bc4:	d9403515 	stw	r5,212(sp)
   15bc8:	048001c4 	movi	r18,7
   15bcc:	dcc02d17 	ldw	r19,180(sp)
   15bd0:	00000306 	br	15be0 <___vfprintf_internal_r+0xa5c>
   15bd4:	843ffc04 	addi	r16,r16,-16
   15bd8:	42000204 	addi	r8,r8,8
   15bdc:	8c00130e 	bge	r17,r16,15c2c <___vfprintf_internal_r+0xaa8>
   15be0:	010000f4 	movhi	r4,3
   15be4:	18c00404 	addi	r3,r3,16
   15be8:	10800044 	addi	r2,r2,1
   15bec:	2124c784 	addi	r4,r4,-27874
   15bf0:	41000015 	stw	r4,0(r8)
   15bf4:	44400115 	stw	r17,4(r8)
   15bf8:	d8c02015 	stw	r3,128(sp)
   15bfc:	d8801f15 	stw	r2,124(sp)
   15c00:	90bff40e 	bge	r18,r2,15bd4 <__alt_data_end+0xfffd73d4>
   15c04:	d9801e04 	addi	r6,sp,120
   15c08:	b80b883a 	mov	r5,r23
   15c0c:	9809883a 	mov	r4,r19
   15c10:	00205240 	call	20524 <__sprint_r>
   15c14:	103e5f1e 	bne	r2,zero,15594 <__alt_data_end+0xfffd6d94>
   15c18:	843ffc04 	addi	r16,r16,-16
   15c1c:	d8c02017 	ldw	r3,128(sp)
   15c20:	d8801f17 	ldw	r2,124(sp)
   15c24:	da000404 	addi	r8,sp,16
   15c28:	8c3fed16 	blt	r17,r16,15be0 <__alt_data_end+0xfffd73e0>
   15c2c:	d9403517 	ldw	r5,212(sp)
   15c30:	1c07883a 	add	r3,r3,r16
   15c34:	10800044 	addi	r2,r2,1
   15c38:	41400015 	stw	r5,0(r8)
   15c3c:	44000115 	stw	r16,4(r8)
   15c40:	d8c02015 	stw	r3,128(sp)
   15c44:	d8801f15 	stw	r2,124(sp)
   15c48:	010001c4 	movi	r4,7
   15c4c:	2080060e 	bge	r4,r2,15c68 <___vfprintf_internal_r+0xae4>
   15c50:	d9002d17 	ldw	r4,180(sp)
   15c54:	d9801e04 	addi	r6,sp,120
   15c58:	b80b883a 	mov	r5,r23
   15c5c:	00205240 	call	20524 <__sprint_r>
   15c60:	103e4c1e 	bne	r2,zero,15594 <__alt_data_end+0xfffd6d94>
   15c64:	d8c02017 	ldw	r3,128(sp)
   15c68:	d8803117 	ldw	r2,196(sp)
   15c6c:	d9002917 	ldw	r4,164(sp)
   15c70:	1100010e 	bge	r2,r4,15c78 <___vfprintf_internal_r+0xaf4>
   15c74:	2005883a 	mov	r2,r4
   15c78:	d9402f17 	ldw	r5,188(sp)
   15c7c:	288b883a 	add	r5,r5,r2
   15c80:	d9402f15 	stw	r5,188(sp)
   15c84:	1801c01e 	bne	r3,zero,16388 <___vfprintf_internal_r+0x1204>
   15c88:	a8800007 	ldb	r2,0(r21)
   15c8c:	d8001f15 	stw	zero,124(sp)
   15c90:	da000404 	addi	r8,sp,16
   15c94:	103d751e 	bne	r2,zero,1526c <__alt_data_end+0xfffd6a6c>
   15c98:	a823883a 	mov	r17,r21
   15c9c:	003d8b06 	br	152cc <__alt_data_end+0xfffd6acc>
   15ca0:	8025883a 	mov	r18,r16
   15ca4:	dc002903 	ldbu	r16,164(sp)
   15ca8:	e011883a 	mov	r8,fp
   15cac:	84003fcc 	andi	r16,r16,255
   15cb0:	8005e51e 	bne	r16,zero,17448 <___vfprintf_internal_r+0x22c4>
   15cb4:	94800414 	ori	r18,r18,16
   15cb8:	9080080c 	andi	r2,r18,32
   15cbc:	10022b26 	beq	r2,zero,1656c <___vfprintf_internal_r+0x13e8>
   15cc0:	d9002e17 	ldw	r4,184(sp)
   15cc4:	d9402a17 	ldw	r5,168(sp)
   15cc8:	d8002785 	stb	zero,158(sp)
   15ccc:	20c00204 	addi	r3,r4,8
   15cd0:	24c00017 	ldw	r19,0(r4)
   15cd4:	25800117 	ldw	r22,4(r4)
   15cd8:	28042e16 	blt	r5,zero,16d94 <___vfprintf_internal_r+0x1c10>
   15cdc:	013fdfc4 	movi	r4,-129
   15ce0:	9d84b03a 	or	r2,r19,r22
   15ce4:	d8c02e15 	stw	r3,184(sp)
   15ce8:	9124703a 	and	r18,r18,r4
   15cec:	0039883a 	mov	fp,zero
   15cf0:	103e801e 	bne	r2,zero,156f4 <__alt_data_end+0xfffd6ef4>
   15cf4:	d9002a17 	ldw	r4,168(sp)
   15cf8:	2002e01e 	bne	r4,zero,1687c <___vfprintf_internal_r+0x16f8>
   15cfc:	d8002a15 	stw	zero,168(sp)
   15d00:	d8002b15 	stw	zero,172(sp)
   15d04:	dc001e04 	addi	r16,sp,120
   15d08:	003ef506 	br	158e0 <__alt_data_end+0xfffd70e0>
   15d0c:	8025883a 	mov	r18,r16
   15d10:	dc002903 	ldbu	r16,164(sp)
   15d14:	e011883a 	mov	r8,fp
   15d18:	84003fcc 	andi	r16,r16,255
   15d1c:	8005ba1e 	bne	r16,zero,17408 <___vfprintf_internal_r+0x2284>
   15d20:	010000f4 	movhi	r4,3
   15d24:	2124b704 	addi	r4,r4,-27940
   15d28:	d9003915 	stw	r4,228(sp)
   15d2c:	9080080c 	andi	r2,r18,32
   15d30:	10006126 	beq	r2,zero,15eb8 <___vfprintf_internal_r+0xd34>
   15d34:	d9402e17 	ldw	r5,184(sp)
   15d38:	2cc00017 	ldw	r19,0(r5)
   15d3c:	2d800117 	ldw	r22,4(r5)
   15d40:	29400204 	addi	r5,r5,8
   15d44:	d9402e15 	stw	r5,184(sp)
   15d48:	9080004c 	andi	r2,r18,1
   15d4c:	1001ac26 	beq	r2,zero,16400 <___vfprintf_internal_r+0x127c>
   15d50:	9d84b03a 	or	r2,r19,r22
   15d54:	10038526 	beq	r2,zero,16b6c <___vfprintf_internal_r+0x19e8>
   15d58:	d8c02a17 	ldw	r3,168(sp)
   15d5c:	00800c04 	movi	r2,48
   15d60:	d8802705 	stb	r2,156(sp)
   15d64:	dc402745 	stb	r17,157(sp)
   15d68:	d8002785 	stb	zero,158(sp)
   15d6c:	90800094 	ori	r2,r18,2
   15d70:	18047916 	blt	r3,zero,16f58 <___vfprintf_internal_r+0x1dd4>
   15d74:	00bfdfc4 	movi	r2,-129
   15d78:	90a4703a 	and	r18,r18,r2
   15d7c:	94800094 	ori	r18,r18,2
   15d80:	0039883a 	mov	fp,zero
   15d84:	d9003917 	ldw	r4,228(sp)
   15d88:	dc001e04 	addi	r16,sp,120
   15d8c:	988003cc 	andi	r2,r19,15
   15d90:	b006973a 	slli	r3,r22,28
   15d94:	2085883a 	add	r2,r4,r2
   15d98:	9826d13a 	srli	r19,r19,4
   15d9c:	10800003 	ldbu	r2,0(r2)
   15da0:	b02cd13a 	srli	r22,r22,4
   15da4:	843fffc4 	addi	r16,r16,-1
   15da8:	1ce6b03a 	or	r19,r3,r19
   15dac:	80800005 	stb	r2,0(r16)
   15db0:	9d84b03a 	or	r2,r19,r22
   15db4:	103ff51e 	bne	r2,zero,15d8c <__alt_data_end+0xfffd758c>
   15db8:	d8c02817 	ldw	r3,160(sp)
   15dbc:	1c07c83a 	sub	r3,r3,r16
   15dc0:	d8c02b15 	stw	r3,172(sp)
   15dc4:	003ec606 	br	158e0 <__alt_data_end+0xfffd70e0>
   15dc8:	8025883a 	mov	r18,r16
   15dcc:	dc002903 	ldbu	r16,164(sp)
   15dd0:	e011883a 	mov	r8,fp
   15dd4:	84003fcc 	andi	r16,r16,255
   15dd8:	803e9626 	beq	r16,zero,15834 <__alt_data_end+0xfffd7034>
   15ddc:	d8c02b03 	ldbu	r3,172(sp)
   15de0:	d8c02785 	stb	r3,158(sp)
   15de4:	003e9306 	br	15834 <__alt_data_end+0xfffd7034>
   15de8:	00c00044 	movi	r3,1
   15dec:	d8c02905 	stb	r3,164(sp)
   15df0:	00c00ac4 	movi	r3,43
   15df4:	d8c02b05 	stb	r3,172(sp)
   15df8:	ac400007 	ldb	r17,0(r21)
   15dfc:	003d4306 	br	1530c <__alt_data_end+0xfffd6b0c>
   15e00:	84000814 	ori	r16,r16,32
   15e04:	ac400007 	ldb	r17,0(r21)
   15e08:	003d4006 	br	1530c <__alt_data_end+0xfffd6b0c>
   15e0c:	d8802e17 	ldw	r2,184(sp)
   15e10:	8025883a 	mov	r18,r16
   15e14:	d8002785 	stb	zero,158(sp)
   15e18:	14000017 	ldw	r16,0(r2)
   15e1c:	e011883a 	mov	r8,fp
   15e20:	14c00104 	addi	r19,r2,4
   15e24:	80042d26 	beq	r16,zero,16edc <___vfprintf_internal_r+0x1d58>
   15e28:	d8c02a17 	ldw	r3,168(sp)
   15e2c:	1803e416 	blt	r3,zero,16dc0 <___vfprintf_internal_r+0x1c3c>
   15e30:	180d883a 	mov	r6,r3
   15e34:	000b883a 	mov	r5,zero
   15e38:	8009883a 	mov	r4,r16
   15e3c:	df003d15 	stw	fp,244(sp)
   15e40:	001263c0 	call	1263c <memchr>
   15e44:	da003d17 	ldw	r8,244(sp)
   15e48:	10046826 	beq	r2,zero,16fec <___vfprintf_internal_r+0x1e68>
   15e4c:	1405c83a 	sub	r2,r2,r16
   15e50:	d8802b15 	stw	r2,172(sp)
   15e54:	1003e016 	blt	r2,zero,16dd8 <___vfprintf_internal_r+0x1c54>
   15e58:	df002783 	ldbu	fp,158(sp)
   15e5c:	d8802915 	stw	r2,164(sp)
   15e60:	dcc02e15 	stw	r19,184(sp)
   15e64:	d8002a15 	stw	zero,168(sp)
   15e68:	d8003215 	stw	zero,200(sp)
   15e6c:	003ea206 	br	158f8 <__alt_data_end+0xfffd70f8>
   15e70:	8025883a 	mov	r18,r16
   15e74:	dc002903 	ldbu	r16,164(sp)
   15e78:	e011883a 	mov	r8,fp
   15e7c:	84003fcc 	andi	r16,r16,255
   15e80:	803f8d26 	beq	r16,zero,15cb8 <__alt_data_end+0xfffd74b8>
   15e84:	d8c02b03 	ldbu	r3,172(sp)
   15e88:	d8c02785 	stb	r3,158(sp)
   15e8c:	003f8a06 	br	15cb8 <__alt_data_end+0xfffd74b8>
   15e90:	8025883a 	mov	r18,r16
   15e94:	dc002903 	ldbu	r16,164(sp)
   15e98:	e011883a 	mov	r8,fp
   15e9c:	84003fcc 	andi	r16,r16,255
   15ea0:	8005661e 	bne	r16,zero,1743c <___vfprintf_internal_r+0x22b8>
   15ea4:	010000f4 	movhi	r4,3
   15ea8:	2124bc04 	addi	r4,r4,-27920
   15eac:	d9003915 	stw	r4,228(sp)
   15eb0:	9080080c 	andi	r2,r18,32
   15eb4:	103f9f1e 	bne	r2,zero,15d34 <__alt_data_end+0xfffd7534>
   15eb8:	9080040c 	andi	r2,r18,16
   15ebc:	1002eb26 	beq	r2,zero,16a6c <___vfprintf_internal_r+0x18e8>
   15ec0:	d8802e17 	ldw	r2,184(sp)
   15ec4:	002d883a 	mov	r22,zero
   15ec8:	14c00017 	ldw	r19,0(r2)
   15ecc:	10800104 	addi	r2,r2,4
   15ed0:	d8802e15 	stw	r2,184(sp)
   15ed4:	003f9c06 	br	15d48 <__alt_data_end+0xfffd7548>
   15ed8:	d8802b07 	ldb	r2,172(sp)
   15edc:	1002e11e 	bne	r2,zero,16a64 <___vfprintf_internal_r+0x18e0>
   15ee0:	00c00044 	movi	r3,1
   15ee4:	d8c02905 	stb	r3,164(sp)
   15ee8:	00c00804 	movi	r3,32
   15eec:	d8c02b05 	stb	r3,172(sp)
   15ef0:	ac400007 	ldb	r17,0(r21)
   15ef4:	003d0506 	br	1530c <__alt_data_end+0xfffd6b0c>
   15ef8:	84000054 	ori	r16,r16,1
   15efc:	ac400007 	ldb	r17,0(r21)
   15f00:	003d0206 	br	1530c <__alt_data_end+0xfffd6b0c>
   15f04:	8025883a 	mov	r18,r16
   15f08:	dc002903 	ldbu	r16,164(sp)
   15f0c:	e011883a 	mov	r8,fp
   15f10:	84003fcc 	andi	r16,r16,255
   15f14:	803de726 	beq	r16,zero,156b4 <__alt_data_end+0xfffd6eb4>
   15f18:	d8c02b03 	ldbu	r3,172(sp)
   15f1c:	d8c02785 	stb	r3,158(sp)
   15f20:	003de406 	br	156b4 <__alt_data_end+0xfffd6eb4>
   15f24:	84001014 	ori	r16,r16,64
   15f28:	ac400007 	ldb	r17,0(r21)
   15f2c:	003cf706 	br	1530c <__alt_data_end+0xfffd6b0c>
   15f30:	ac400007 	ldb	r17,0(r21)
   15f34:	00801b04 	movi	r2,108
   15f38:	88838f26 	beq	r17,r2,16d78 <___vfprintf_internal_r+0x1bf4>
   15f3c:	84000414 	ori	r16,r16,16
   15f40:	003cf206 	br	1530c <__alt_data_end+0xfffd6b0c>
   15f44:	8025883a 	mov	r18,r16
   15f48:	dc002903 	ldbu	r16,164(sp)
   15f4c:	e011883a 	mov	r8,fp
   15f50:	84003fcc 	andi	r16,r16,255
   15f54:	80053f1e 	bne	r16,zero,17454 <___vfprintf_internal_r+0x22d0>
   15f58:	9080080c 	andi	r2,r18,32
   15f5c:	1002d226 	beq	r2,zero,16aa8 <___vfprintf_internal_r+0x1924>
   15f60:	d9002e17 	ldw	r4,184(sp)
   15f64:	d9402f17 	ldw	r5,188(sp)
   15f68:	20800017 	ldw	r2,0(r4)
   15f6c:	2807d7fa 	srai	r3,r5,31
   15f70:	21000104 	addi	r4,r4,4
   15f74:	d9002e15 	stw	r4,184(sp)
   15f78:	11400015 	stw	r5,0(r2)
   15f7c:	10c00115 	stw	r3,4(r2)
   15f80:	003cb806 	br	15264 <__alt_data_end+0xfffd6a64>
   15f84:	d8c02e17 	ldw	r3,184(sp)
   15f88:	d9002e17 	ldw	r4,184(sp)
   15f8c:	8025883a 	mov	r18,r16
   15f90:	18800017 	ldw	r2,0(r3)
   15f94:	21000104 	addi	r4,r4,4
   15f98:	00c00044 	movi	r3,1
   15f9c:	e011883a 	mov	r8,fp
   15fa0:	d8c02915 	stw	r3,164(sp)
   15fa4:	d8002785 	stb	zero,158(sp)
   15fa8:	d8801405 	stb	r2,80(sp)
   15fac:	d9002e15 	stw	r4,184(sp)
   15fb0:	d8c02b15 	stw	r3,172(sp)
   15fb4:	d8002a15 	stw	zero,168(sp)
   15fb8:	d8003215 	stw	zero,200(sp)
   15fbc:	dc001404 	addi	r16,sp,80
   15fc0:	0039883a 	mov	fp,zero
   15fc4:	003e5306 	br	15914 <__alt_data_end+0xfffd7114>
   15fc8:	010000f4 	movhi	r4,3
   15fcc:	2124bc04 	addi	r4,r4,-27920
   15fd0:	0039883a 	mov	fp,zero
   15fd4:	d9003915 	stw	r4,228(sp)
   15fd8:	04401e04 	movi	r17,120
   15fdc:	003f6906 	br	15d84 <__alt_data_end+0xfffd7584>
   15fe0:	8025883a 	mov	r18,r16
   15fe4:	dc002903 	ldbu	r16,164(sp)
   15fe8:	e011883a 	mov	r8,fp
   15fec:	84003fcc 	andi	r16,r16,255
   15ff0:	8005081e 	bne	r16,zero,17414 <___vfprintf_internal_r+0x2290>
   15ff4:	883d6126 	beq	r17,zero,1557c <__alt_data_end+0xfffd6d7c>
   15ff8:	00c00044 	movi	r3,1
   15ffc:	d8c02915 	stw	r3,164(sp)
   16000:	dc401405 	stb	r17,80(sp)
   16004:	d8002785 	stb	zero,158(sp)
   16008:	003fe906 	br	15fb0 <__alt_data_end+0xfffd77b0>
   1600c:	014000f4 	movhi	r5,3
   16010:	2964bc04 	addi	r5,r5,-27920
   16014:	d9403915 	stw	r5,228(sp)
   16018:	d8c02e15 	stw	r3,184(sp)
   1601c:	1025883a 	mov	r18,r2
   16020:	04401e04 	movi	r17,120
   16024:	9d84b03a 	or	r2,r19,r22
   16028:	1000fc1e 	bne	r2,zero,1641c <___vfprintf_internal_r+0x1298>
   1602c:	0039883a 	mov	fp,zero
   16030:	00800084 	movi	r2,2
   16034:	10803fcc 	andi	r2,r2,255
   16038:	00c00044 	movi	r3,1
   1603c:	10c20f26 	beq	r2,r3,1687c <___vfprintf_internal_r+0x16f8>
   16040:	00c00084 	movi	r3,2
   16044:	10fd3326 	beq	r2,r3,15514 <__alt_data_end+0xfffd6d14>
   16048:	003e0b06 	br	15878 <__alt_data_end+0xfffd7078>
   1604c:	d8c02017 	ldw	r3,128(sp)
   16050:	003e7106 	br	15a18 <__alt_data_end+0xfffd7218>
   16054:	00801944 	movi	r2,101
   16058:	14407e0e 	bge	r2,r17,16254 <___vfprintf_internal_r+0x10d0>
   1605c:	d9003617 	ldw	r4,216(sp)
   16060:	d9403817 	ldw	r5,224(sp)
   16064:	000d883a 	mov	r6,zero
   16068:	000f883a 	mov	r7,zero
   1606c:	d8c03c15 	stw	r3,240(sp)
   16070:	da003d15 	stw	r8,244(sp)
   16074:	0026d1c0 	call	26d1c <__eqdf2>
   16078:	d8c03c17 	ldw	r3,240(sp)
   1607c:	da003d17 	ldw	r8,244(sp)
   16080:	1000f71e 	bne	r2,zero,16460 <___vfprintf_internal_r+0x12dc>
   16084:	d8801f17 	ldw	r2,124(sp)
   16088:	010000f4 	movhi	r4,3
   1608c:	2124c304 	addi	r4,r4,-27892
   16090:	18c00044 	addi	r3,r3,1
   16094:	10800044 	addi	r2,r2,1
   16098:	41000015 	stw	r4,0(r8)
   1609c:	01000044 	movi	r4,1
   160a0:	41000115 	stw	r4,4(r8)
   160a4:	d8c02015 	stw	r3,128(sp)
   160a8:	d8801f15 	stw	r2,124(sp)
   160ac:	010001c4 	movi	r4,7
   160b0:	2082b816 	blt	r4,r2,16b94 <___vfprintf_internal_r+0x1a10>
   160b4:	42000204 	addi	r8,r8,8
   160b8:	d8802617 	ldw	r2,152(sp)
   160bc:	d9403317 	ldw	r5,204(sp)
   160c0:	11400216 	blt	r2,r5,160cc <___vfprintf_internal_r+0xf48>
   160c4:	9080004c 	andi	r2,r18,1
   160c8:	103eb326 	beq	r2,zero,15b98 <__alt_data_end+0xfffd7398>
   160cc:	d8803717 	ldw	r2,220(sp)
   160d0:	d9003417 	ldw	r4,208(sp)
   160d4:	d9403717 	ldw	r5,220(sp)
   160d8:	1887883a 	add	r3,r3,r2
   160dc:	d8801f17 	ldw	r2,124(sp)
   160e0:	41000015 	stw	r4,0(r8)
   160e4:	41400115 	stw	r5,4(r8)
   160e8:	10800044 	addi	r2,r2,1
   160ec:	d8c02015 	stw	r3,128(sp)
   160f0:	d8801f15 	stw	r2,124(sp)
   160f4:	010001c4 	movi	r4,7
   160f8:	20832916 	blt	r4,r2,16da0 <___vfprintf_internal_r+0x1c1c>
   160fc:	42000204 	addi	r8,r8,8
   16100:	d8803317 	ldw	r2,204(sp)
   16104:	143fffc4 	addi	r16,r2,-1
   16108:	043ea30e 	bge	zero,r16,15b98 <__alt_data_end+0xfffd7398>
   1610c:	04400404 	movi	r17,16
   16110:	d8801f17 	ldw	r2,124(sp)
   16114:	8c00880e 	bge	r17,r16,16338 <___vfprintf_internal_r+0x11b4>
   16118:	014000f4 	movhi	r5,3
   1611c:	2964c384 	addi	r5,r5,-27890
   16120:	d9402c15 	stw	r5,176(sp)
   16124:	058001c4 	movi	r22,7
   16128:	dcc02d17 	ldw	r19,180(sp)
   1612c:	00000306 	br	1613c <___vfprintf_internal_r+0xfb8>
   16130:	42000204 	addi	r8,r8,8
   16134:	843ffc04 	addi	r16,r16,-16
   16138:	8c00820e 	bge	r17,r16,16344 <___vfprintf_internal_r+0x11c0>
   1613c:	18c00404 	addi	r3,r3,16
   16140:	10800044 	addi	r2,r2,1
   16144:	45000015 	stw	r20,0(r8)
   16148:	44400115 	stw	r17,4(r8)
   1614c:	d8c02015 	stw	r3,128(sp)
   16150:	d8801f15 	stw	r2,124(sp)
   16154:	b0bff60e 	bge	r22,r2,16130 <__alt_data_end+0xfffd7930>
   16158:	d9801e04 	addi	r6,sp,120
   1615c:	b80b883a 	mov	r5,r23
   16160:	9809883a 	mov	r4,r19
   16164:	00205240 	call	20524 <__sprint_r>
   16168:	103d0a1e 	bne	r2,zero,15594 <__alt_data_end+0xfffd6d94>
   1616c:	d8c02017 	ldw	r3,128(sp)
   16170:	d8801f17 	ldw	r2,124(sp)
   16174:	da000404 	addi	r8,sp,16
   16178:	003fee06 	br	16134 <__alt_data_end+0xfffd7934>
   1617c:	d9403117 	ldw	r5,196(sp)
   16180:	d8802917 	ldw	r2,164(sp)
   16184:	28adc83a 	sub	r22,r5,r2
   16188:	05be410e 	bge	zero,r22,15a90 <__alt_data_end+0xfffd7290>
   1618c:	07000404 	movi	fp,16
   16190:	d8801f17 	ldw	r2,124(sp)
   16194:	e5838f0e 	bge	fp,r22,16fd4 <___vfprintf_internal_r+0x1e50>
   16198:	014000f4 	movhi	r5,3
   1619c:	2964c384 	addi	r5,r5,-27890
   161a0:	dc403015 	stw	r17,192(sp)
   161a4:	d9402c15 	stw	r5,176(sp)
   161a8:	b023883a 	mov	r17,r22
   161ac:	04c001c4 	movi	r19,7
   161b0:	a82d883a 	mov	r22,r21
   161b4:	902b883a 	mov	r21,r18
   161b8:	8025883a 	mov	r18,r16
   161bc:	dc002d17 	ldw	r16,180(sp)
   161c0:	00000306 	br	161d0 <___vfprintf_internal_r+0x104c>
   161c4:	8c7ffc04 	addi	r17,r17,-16
   161c8:	42000204 	addi	r8,r8,8
   161cc:	e440110e 	bge	fp,r17,16214 <___vfprintf_internal_r+0x1090>
   161d0:	18c00404 	addi	r3,r3,16
   161d4:	10800044 	addi	r2,r2,1
   161d8:	45000015 	stw	r20,0(r8)
   161dc:	47000115 	stw	fp,4(r8)
   161e0:	d8c02015 	stw	r3,128(sp)
   161e4:	d8801f15 	stw	r2,124(sp)
   161e8:	98bff60e 	bge	r19,r2,161c4 <__alt_data_end+0xfffd79c4>
   161ec:	d9801e04 	addi	r6,sp,120
   161f0:	b80b883a 	mov	r5,r23
   161f4:	8009883a 	mov	r4,r16
   161f8:	00205240 	call	20524 <__sprint_r>
   161fc:	103ce51e 	bne	r2,zero,15594 <__alt_data_end+0xfffd6d94>
   16200:	8c7ffc04 	addi	r17,r17,-16
   16204:	d8c02017 	ldw	r3,128(sp)
   16208:	d8801f17 	ldw	r2,124(sp)
   1620c:	da000404 	addi	r8,sp,16
   16210:	e47fef16 	blt	fp,r17,161d0 <__alt_data_end+0xfffd79d0>
   16214:	9021883a 	mov	r16,r18
   16218:	a825883a 	mov	r18,r21
   1621c:	b02b883a 	mov	r21,r22
   16220:	882d883a 	mov	r22,r17
   16224:	dc403017 	ldw	r17,192(sp)
   16228:	d9002c17 	ldw	r4,176(sp)
   1622c:	1d87883a 	add	r3,r3,r22
   16230:	10800044 	addi	r2,r2,1
   16234:	41000015 	stw	r4,0(r8)
   16238:	45800115 	stw	r22,4(r8)
   1623c:	d8c02015 	stw	r3,128(sp)
   16240:	d8801f15 	stw	r2,124(sp)
   16244:	010001c4 	movi	r4,7
   16248:	20818e16 	blt	r4,r2,16884 <___vfprintf_internal_r+0x1700>
   1624c:	42000204 	addi	r8,r8,8
   16250:	003e0f06 	br	15a90 <__alt_data_end+0xfffd7290>
   16254:	d9403317 	ldw	r5,204(sp)
   16258:	00800044 	movi	r2,1
   1625c:	18c00044 	addi	r3,r3,1
   16260:	1141530e 	bge	r2,r5,167b0 <___vfprintf_internal_r+0x162c>
   16264:	dc401f17 	ldw	r17,124(sp)
   16268:	00800044 	movi	r2,1
   1626c:	40800115 	stw	r2,4(r8)
   16270:	8c400044 	addi	r17,r17,1
   16274:	44000015 	stw	r16,0(r8)
   16278:	d8c02015 	stw	r3,128(sp)
   1627c:	dc401f15 	stw	r17,124(sp)
   16280:	008001c4 	movi	r2,7
   16284:	14416b16 	blt	r2,r17,16834 <___vfprintf_internal_r+0x16b0>
   16288:	42000204 	addi	r8,r8,8
   1628c:	d8803717 	ldw	r2,220(sp)
   16290:	d9003417 	ldw	r4,208(sp)
   16294:	8c400044 	addi	r17,r17,1
   16298:	10c7883a 	add	r3,r2,r3
   1629c:	40800115 	stw	r2,4(r8)
   162a0:	41000015 	stw	r4,0(r8)
   162a4:	d8c02015 	stw	r3,128(sp)
   162a8:	dc401f15 	stw	r17,124(sp)
   162ac:	008001c4 	movi	r2,7
   162b0:	14416916 	blt	r2,r17,16858 <___vfprintf_internal_r+0x16d4>
   162b4:	45800204 	addi	r22,r8,8
   162b8:	d9003617 	ldw	r4,216(sp)
   162bc:	d9403817 	ldw	r5,224(sp)
   162c0:	000d883a 	mov	r6,zero
   162c4:	000f883a 	mov	r7,zero
   162c8:	d8c03c15 	stw	r3,240(sp)
   162cc:	0026d1c0 	call	26d1c <__eqdf2>
   162d0:	d8c03c17 	ldw	r3,240(sp)
   162d4:	1000bc26 	beq	r2,zero,165c8 <___vfprintf_internal_r+0x1444>
   162d8:	d9403317 	ldw	r5,204(sp)
   162dc:	84000044 	addi	r16,r16,1
   162e0:	8c400044 	addi	r17,r17,1
   162e4:	28bfffc4 	addi	r2,r5,-1
   162e8:	1887883a 	add	r3,r3,r2
   162ec:	b0800115 	stw	r2,4(r22)
   162f0:	b4000015 	stw	r16,0(r22)
   162f4:	d8c02015 	stw	r3,128(sp)
   162f8:	dc401f15 	stw	r17,124(sp)
   162fc:	008001c4 	movi	r2,7
   16300:	14414316 	blt	r2,r17,16810 <___vfprintf_internal_r+0x168c>
   16304:	b5800204 	addi	r22,r22,8
   16308:	d9003a17 	ldw	r4,232(sp)
   1630c:	df0022c4 	addi	fp,sp,139
   16310:	8c400044 	addi	r17,r17,1
   16314:	20c7883a 	add	r3,r4,r3
   16318:	b7000015 	stw	fp,0(r22)
   1631c:	b1000115 	stw	r4,4(r22)
   16320:	d8c02015 	stw	r3,128(sp)
   16324:	dc401f15 	stw	r17,124(sp)
   16328:	008001c4 	movi	r2,7
   1632c:	14400e16 	blt	r2,r17,16368 <___vfprintf_internal_r+0x11e4>
   16330:	b2000204 	addi	r8,r22,8
   16334:	003e1806 	br	15b98 <__alt_data_end+0xfffd7398>
   16338:	010000f4 	movhi	r4,3
   1633c:	2124c384 	addi	r4,r4,-27890
   16340:	d9002c15 	stw	r4,176(sp)
   16344:	d9002c17 	ldw	r4,176(sp)
   16348:	1c07883a 	add	r3,r3,r16
   1634c:	44000115 	stw	r16,4(r8)
   16350:	41000015 	stw	r4,0(r8)
   16354:	10800044 	addi	r2,r2,1
   16358:	d8c02015 	stw	r3,128(sp)
   1635c:	d8801f15 	stw	r2,124(sp)
   16360:	010001c4 	movi	r4,7
   16364:	20be0b0e 	bge	r4,r2,15b94 <__alt_data_end+0xfffd7394>
   16368:	d9002d17 	ldw	r4,180(sp)
   1636c:	d9801e04 	addi	r6,sp,120
   16370:	b80b883a 	mov	r5,r23
   16374:	00205240 	call	20524 <__sprint_r>
   16378:	103c861e 	bne	r2,zero,15594 <__alt_data_end+0xfffd6d94>
   1637c:	d8c02017 	ldw	r3,128(sp)
   16380:	da000404 	addi	r8,sp,16
   16384:	003e0406 	br	15b98 <__alt_data_end+0xfffd7398>
   16388:	d9002d17 	ldw	r4,180(sp)
   1638c:	d9801e04 	addi	r6,sp,120
   16390:	b80b883a 	mov	r5,r23
   16394:	00205240 	call	20524 <__sprint_r>
   16398:	103e3b26 	beq	r2,zero,15c88 <__alt_data_end+0xfffd7488>
   1639c:	003c7d06 	br	15594 <__alt_data_end+0xfffd6d94>
   163a0:	d9002d17 	ldw	r4,180(sp)
   163a4:	d9801e04 	addi	r6,sp,120
   163a8:	b80b883a 	mov	r5,r23
   163ac:	00205240 	call	20524 <__sprint_r>
   163b0:	103c781e 	bne	r2,zero,15594 <__alt_data_end+0xfffd6d94>
   163b4:	d8c02017 	ldw	r3,128(sp)
   163b8:	da000404 	addi	r8,sp,16
   163bc:	003de906 	br	15b64 <__alt_data_end+0xfffd7364>
   163c0:	d9002d17 	ldw	r4,180(sp)
   163c4:	d9801e04 	addi	r6,sp,120
   163c8:	b80b883a 	mov	r5,r23
   163cc:	00205240 	call	20524 <__sprint_r>
   163d0:	103c701e 	bne	r2,zero,15594 <__alt_data_end+0xfffd6d94>
   163d4:	d8c02017 	ldw	r3,128(sp)
   163d8:	da000404 	addi	r8,sp,16
   163dc:	003d9b06 	br	15a4c <__alt_data_end+0xfffd724c>
   163e0:	d9002d17 	ldw	r4,180(sp)
   163e4:	d9801e04 	addi	r6,sp,120
   163e8:	b80b883a 	mov	r5,r23
   163ec:	00205240 	call	20524 <__sprint_r>
   163f0:	103c681e 	bne	r2,zero,15594 <__alt_data_end+0xfffd6d94>
   163f4:	d8c02017 	ldw	r3,128(sp)
   163f8:	da000404 	addi	r8,sp,16
   163fc:	003da106 	br	15a84 <__alt_data_end+0xfffd7284>
   16400:	d9402a17 	ldw	r5,168(sp)
   16404:	d8002785 	stb	zero,158(sp)
   16408:	283f0616 	blt	r5,zero,16024 <__alt_data_end+0xfffd7824>
   1640c:	00ffdfc4 	movi	r3,-129
   16410:	9d84b03a 	or	r2,r19,r22
   16414:	90e4703a 	and	r18,r18,r3
   16418:	103c3b26 	beq	r2,zero,15508 <__alt_data_end+0xfffd6d08>
   1641c:	0039883a 	mov	fp,zero
   16420:	003e5806 	br	15d84 <__alt_data_end+0xfffd7584>
   16424:	9080040c 	andi	r2,r18,16
   16428:	1001b326 	beq	r2,zero,16af8 <___vfprintf_internal_r+0x1974>
   1642c:	d8c02e17 	ldw	r3,184(sp)
   16430:	d9002a17 	ldw	r4,168(sp)
   16434:	d8002785 	stb	zero,158(sp)
   16438:	18800104 	addi	r2,r3,4
   1643c:	1cc00017 	ldw	r19,0(r3)
   16440:	002d883a 	mov	r22,zero
   16444:	2001b516 	blt	r4,zero,16b1c <___vfprintf_internal_r+0x1998>
   16448:	00ffdfc4 	movi	r3,-129
   1644c:	d8802e15 	stw	r2,184(sp)
   16450:	90e4703a 	and	r18,r18,r3
   16454:	983d0526 	beq	r19,zero,1586c <__alt_data_end+0xfffd706c>
   16458:	0039883a 	mov	fp,zero
   1645c:	003d0806 	br	15880 <__alt_data_end+0xfffd7080>
   16460:	dc402617 	ldw	r17,152(sp)
   16464:	0441d30e 	bge	zero,r17,16bb4 <___vfprintf_internal_r+0x1a30>
   16468:	dc403217 	ldw	r17,200(sp)
   1646c:	d8803317 	ldw	r2,204(sp)
   16470:	1440010e 	bge	r2,r17,16478 <___vfprintf_internal_r+0x12f4>
   16474:	1023883a 	mov	r17,r2
   16478:	04400a0e 	bge	zero,r17,164a4 <___vfprintf_internal_r+0x1320>
   1647c:	d8801f17 	ldw	r2,124(sp)
   16480:	1c47883a 	add	r3,r3,r17
   16484:	44000015 	stw	r16,0(r8)
   16488:	10800044 	addi	r2,r2,1
   1648c:	44400115 	stw	r17,4(r8)
   16490:	d8c02015 	stw	r3,128(sp)
   16494:	d8801f15 	stw	r2,124(sp)
   16498:	010001c4 	movi	r4,7
   1649c:	20826516 	blt	r4,r2,16e34 <___vfprintf_internal_r+0x1cb0>
   164a0:	42000204 	addi	r8,r8,8
   164a4:	88026116 	blt	r17,zero,16e2c <___vfprintf_internal_r+0x1ca8>
   164a8:	d9003217 	ldw	r4,200(sp)
   164ac:	2463c83a 	sub	r17,r4,r17
   164b0:	04407b0e 	bge	zero,r17,166a0 <___vfprintf_internal_r+0x151c>
   164b4:	05800404 	movi	r22,16
   164b8:	d8801f17 	ldw	r2,124(sp)
   164bc:	b4419d0e 	bge	r22,r17,16b34 <___vfprintf_internal_r+0x19b0>
   164c0:	010000f4 	movhi	r4,3
   164c4:	2124c384 	addi	r4,r4,-27890
   164c8:	d9002c15 	stw	r4,176(sp)
   164cc:	070001c4 	movi	fp,7
   164d0:	dcc02d17 	ldw	r19,180(sp)
   164d4:	00000306 	br	164e4 <___vfprintf_internal_r+0x1360>
   164d8:	42000204 	addi	r8,r8,8
   164dc:	8c7ffc04 	addi	r17,r17,-16
   164e0:	b441970e 	bge	r22,r17,16b40 <___vfprintf_internal_r+0x19bc>
   164e4:	18c00404 	addi	r3,r3,16
   164e8:	10800044 	addi	r2,r2,1
   164ec:	45000015 	stw	r20,0(r8)
   164f0:	45800115 	stw	r22,4(r8)
   164f4:	d8c02015 	stw	r3,128(sp)
   164f8:	d8801f15 	stw	r2,124(sp)
   164fc:	e0bff60e 	bge	fp,r2,164d8 <__alt_data_end+0xfffd7cd8>
   16500:	d9801e04 	addi	r6,sp,120
   16504:	b80b883a 	mov	r5,r23
   16508:	9809883a 	mov	r4,r19
   1650c:	00205240 	call	20524 <__sprint_r>
   16510:	103c201e 	bne	r2,zero,15594 <__alt_data_end+0xfffd6d94>
   16514:	d8c02017 	ldw	r3,128(sp)
   16518:	d8801f17 	ldw	r2,124(sp)
   1651c:	da000404 	addi	r8,sp,16
   16520:	003fee06 	br	164dc <__alt_data_end+0xfffd7cdc>
   16524:	d9002d17 	ldw	r4,180(sp)
   16528:	d9801e04 	addi	r6,sp,120
   1652c:	b80b883a 	mov	r5,r23
   16530:	00205240 	call	20524 <__sprint_r>
   16534:	103c171e 	bne	r2,zero,15594 <__alt_data_end+0xfffd6d94>
   16538:	d8c02017 	ldw	r3,128(sp)
   1653c:	df002787 	ldb	fp,158(sp)
   16540:	da000404 	addi	r8,sp,16
   16544:	003d3406 	br	15a18 <__alt_data_end+0xfffd7218>
   16548:	9080040c 	andi	r2,r18,16
   1654c:	10016126 	beq	r2,zero,16ad4 <___vfprintf_internal_r+0x1950>
   16550:	d9402e17 	ldw	r5,184(sp)
   16554:	2cc00017 	ldw	r19,0(r5)
   16558:	29400104 	addi	r5,r5,4
   1655c:	d9402e15 	stw	r5,184(sp)
   16560:	982dd7fa 	srai	r22,r19,31
   16564:	b005883a 	mov	r2,r22
   16568:	003c5a06 	br	156d4 <__alt_data_end+0xfffd6ed4>
   1656c:	9080040c 	andi	r2,r18,16
   16570:	10003526 	beq	r2,zero,16648 <___vfprintf_internal_r+0x14c4>
   16574:	d8c02e17 	ldw	r3,184(sp)
   16578:	d9002a17 	ldw	r4,168(sp)
   1657c:	d8002785 	stb	zero,158(sp)
   16580:	18800104 	addi	r2,r3,4
   16584:	1cc00017 	ldw	r19,0(r3)
   16588:	002d883a 	mov	r22,zero
   1658c:	20003716 	blt	r4,zero,1666c <___vfprintf_internal_r+0x14e8>
   16590:	00ffdfc4 	movi	r3,-129
   16594:	d8802e15 	stw	r2,184(sp)
   16598:	90e4703a 	and	r18,r18,r3
   1659c:	0039883a 	mov	fp,zero
   165a0:	983dd426 	beq	r19,zero,15cf4 <__alt_data_end+0xfffd74f4>
   165a4:	00800244 	movi	r2,9
   165a8:	14fc5336 	bltu	r2,r19,156f8 <__alt_data_end+0xfffd6ef8>
   165ac:	d8c02817 	ldw	r3,160(sp)
   165b0:	dc001dc4 	addi	r16,sp,119
   165b4:	9cc00c04 	addi	r19,r19,48
   165b8:	1c07c83a 	sub	r3,r3,r16
   165bc:	dcc01dc5 	stb	r19,119(sp)
   165c0:	d8c02b15 	stw	r3,172(sp)
   165c4:	003cc606 	br	158e0 <__alt_data_end+0xfffd70e0>
   165c8:	d8803317 	ldw	r2,204(sp)
   165cc:	143fffc4 	addi	r16,r2,-1
   165d0:	043f4d0e 	bge	zero,r16,16308 <__alt_data_end+0xfffd7b08>
   165d4:	07000404 	movi	fp,16
   165d8:	e400810e 	bge	fp,r16,167e0 <___vfprintf_internal_r+0x165c>
   165dc:	014000f4 	movhi	r5,3
   165e0:	2964c384 	addi	r5,r5,-27890
   165e4:	d9402c15 	stw	r5,176(sp)
   165e8:	01c001c4 	movi	r7,7
   165ec:	dcc02d17 	ldw	r19,180(sp)
   165f0:	00000306 	br	16600 <___vfprintf_internal_r+0x147c>
   165f4:	b5800204 	addi	r22,r22,8
   165f8:	843ffc04 	addi	r16,r16,-16
   165fc:	e4007b0e 	bge	fp,r16,167ec <___vfprintf_internal_r+0x1668>
   16600:	18c00404 	addi	r3,r3,16
   16604:	8c400044 	addi	r17,r17,1
   16608:	b5000015 	stw	r20,0(r22)
   1660c:	b7000115 	stw	fp,4(r22)
   16610:	d8c02015 	stw	r3,128(sp)
   16614:	dc401f15 	stw	r17,124(sp)
   16618:	3c7ff60e 	bge	r7,r17,165f4 <__alt_data_end+0xfffd7df4>
   1661c:	d9801e04 	addi	r6,sp,120
   16620:	b80b883a 	mov	r5,r23
   16624:	9809883a 	mov	r4,r19
   16628:	d9c03c15 	stw	r7,240(sp)
   1662c:	00205240 	call	20524 <__sprint_r>
   16630:	d9c03c17 	ldw	r7,240(sp)
   16634:	103bd71e 	bne	r2,zero,15594 <__alt_data_end+0xfffd6d94>
   16638:	d8c02017 	ldw	r3,128(sp)
   1663c:	dc401f17 	ldw	r17,124(sp)
   16640:	dd800404 	addi	r22,sp,16
   16644:	003fec06 	br	165f8 <__alt_data_end+0xfffd7df8>
   16648:	9080100c 	andi	r2,r18,64
   1664c:	d8002785 	stb	zero,158(sp)
   16650:	10010e26 	beq	r2,zero,16a8c <___vfprintf_internal_r+0x1908>
   16654:	d9402e17 	ldw	r5,184(sp)
   16658:	d8c02a17 	ldw	r3,168(sp)
   1665c:	002d883a 	mov	r22,zero
   16660:	28800104 	addi	r2,r5,4
   16664:	2cc0000b 	ldhu	r19,0(r5)
   16668:	183fc90e 	bge	r3,zero,16590 <__alt_data_end+0xfffd7d90>
   1666c:	d8802e15 	stw	r2,184(sp)
   16670:	0039883a 	mov	fp,zero
   16674:	9d84b03a 	or	r2,r19,r22
   16678:	103c1e1e 	bne	r2,zero,156f4 <__alt_data_end+0xfffd6ef4>
   1667c:	00800044 	movi	r2,1
   16680:	003e6c06 	br	16034 <__alt_data_end+0xfffd7834>
   16684:	d9002d17 	ldw	r4,180(sp)
   16688:	d9801e04 	addi	r6,sp,120
   1668c:	b80b883a 	mov	r5,r23
   16690:	00205240 	call	20524 <__sprint_r>
   16694:	103bbf1e 	bne	r2,zero,15594 <__alt_data_end+0xfffd6d94>
   16698:	d8c02017 	ldw	r3,128(sp)
   1669c:	da000404 	addi	r8,sp,16
   166a0:	d9003217 	ldw	r4,200(sp)
   166a4:	d8802617 	ldw	r2,152(sp)
   166a8:	d9403317 	ldw	r5,204(sp)
   166ac:	8123883a 	add	r17,r16,r4
   166b0:	11400216 	blt	r2,r5,166bc <___vfprintf_internal_r+0x1538>
   166b4:	9100004c 	andi	r4,r18,1
   166b8:	20000d26 	beq	r4,zero,166f0 <___vfprintf_internal_r+0x156c>
   166bc:	d9003717 	ldw	r4,220(sp)
   166c0:	d9403417 	ldw	r5,208(sp)
   166c4:	1907883a 	add	r3,r3,r4
   166c8:	d9001f17 	ldw	r4,124(sp)
   166cc:	41400015 	stw	r5,0(r8)
   166d0:	d9403717 	ldw	r5,220(sp)
   166d4:	21000044 	addi	r4,r4,1
   166d8:	d8c02015 	stw	r3,128(sp)
   166dc:	41400115 	stw	r5,4(r8)
   166e0:	d9001f15 	stw	r4,124(sp)
   166e4:	014001c4 	movi	r5,7
   166e8:	2901e816 	blt	r5,r4,16e8c <___vfprintf_internal_r+0x1d08>
   166ec:	42000204 	addi	r8,r8,8
   166f0:	d9003317 	ldw	r4,204(sp)
   166f4:	8121883a 	add	r16,r16,r4
   166f8:	2085c83a 	sub	r2,r4,r2
   166fc:	8461c83a 	sub	r16,r16,r17
   16700:	1400010e 	bge	r2,r16,16708 <___vfprintf_internal_r+0x1584>
   16704:	1021883a 	mov	r16,r2
   16708:	04000a0e 	bge	zero,r16,16734 <___vfprintf_internal_r+0x15b0>
   1670c:	d9001f17 	ldw	r4,124(sp)
   16710:	1c07883a 	add	r3,r3,r16
   16714:	44400015 	stw	r17,0(r8)
   16718:	21000044 	addi	r4,r4,1
   1671c:	44000115 	stw	r16,4(r8)
   16720:	d8c02015 	stw	r3,128(sp)
   16724:	d9001f15 	stw	r4,124(sp)
   16728:	014001c4 	movi	r5,7
   1672c:	2901fb16 	blt	r5,r4,16f1c <___vfprintf_internal_r+0x1d98>
   16730:	42000204 	addi	r8,r8,8
   16734:	8001f716 	blt	r16,zero,16f14 <___vfprintf_internal_r+0x1d90>
   16738:	1421c83a 	sub	r16,r2,r16
   1673c:	043d160e 	bge	zero,r16,15b98 <__alt_data_end+0xfffd7398>
   16740:	04400404 	movi	r17,16
   16744:	d8801f17 	ldw	r2,124(sp)
   16748:	8c3efb0e 	bge	r17,r16,16338 <__alt_data_end+0xfffd7b38>
   1674c:	014000f4 	movhi	r5,3
   16750:	2964c384 	addi	r5,r5,-27890
   16754:	d9402c15 	stw	r5,176(sp)
   16758:	058001c4 	movi	r22,7
   1675c:	dcc02d17 	ldw	r19,180(sp)
   16760:	00000306 	br	16770 <___vfprintf_internal_r+0x15ec>
   16764:	42000204 	addi	r8,r8,8
   16768:	843ffc04 	addi	r16,r16,-16
   1676c:	8c3ef50e 	bge	r17,r16,16344 <__alt_data_end+0xfffd7b44>
   16770:	18c00404 	addi	r3,r3,16
   16774:	10800044 	addi	r2,r2,1
   16778:	45000015 	stw	r20,0(r8)
   1677c:	44400115 	stw	r17,4(r8)
   16780:	d8c02015 	stw	r3,128(sp)
   16784:	d8801f15 	stw	r2,124(sp)
   16788:	b0bff60e 	bge	r22,r2,16764 <__alt_data_end+0xfffd7f64>
   1678c:	d9801e04 	addi	r6,sp,120
   16790:	b80b883a 	mov	r5,r23
   16794:	9809883a 	mov	r4,r19
   16798:	00205240 	call	20524 <__sprint_r>
   1679c:	103b7d1e 	bne	r2,zero,15594 <__alt_data_end+0xfffd6d94>
   167a0:	d8c02017 	ldw	r3,128(sp)
   167a4:	d8801f17 	ldw	r2,124(sp)
   167a8:	da000404 	addi	r8,sp,16
   167ac:	003fee06 	br	16768 <__alt_data_end+0xfffd7f68>
   167b0:	9088703a 	and	r4,r18,r2
   167b4:	203eab1e 	bne	r4,zero,16264 <__alt_data_end+0xfffd7a64>
   167b8:	dc401f17 	ldw	r17,124(sp)
   167bc:	40800115 	stw	r2,4(r8)
   167c0:	44000015 	stw	r16,0(r8)
   167c4:	8c400044 	addi	r17,r17,1
   167c8:	d8c02015 	stw	r3,128(sp)
   167cc:	dc401f15 	stw	r17,124(sp)
   167d0:	008001c4 	movi	r2,7
   167d4:	14400e16 	blt	r2,r17,16810 <___vfprintf_internal_r+0x168c>
   167d8:	45800204 	addi	r22,r8,8
   167dc:	003eca06 	br	16308 <__alt_data_end+0xfffd7b08>
   167e0:	010000f4 	movhi	r4,3
   167e4:	2124c384 	addi	r4,r4,-27890
   167e8:	d9002c15 	stw	r4,176(sp)
   167ec:	d8802c17 	ldw	r2,176(sp)
   167f0:	1c07883a 	add	r3,r3,r16
   167f4:	8c400044 	addi	r17,r17,1
   167f8:	b0800015 	stw	r2,0(r22)
   167fc:	b4000115 	stw	r16,4(r22)
   16800:	d8c02015 	stw	r3,128(sp)
   16804:	dc401f15 	stw	r17,124(sp)
   16808:	008001c4 	movi	r2,7
   1680c:	147ebd0e 	bge	r2,r17,16304 <__alt_data_end+0xfffd7b04>
   16810:	d9002d17 	ldw	r4,180(sp)
   16814:	d9801e04 	addi	r6,sp,120
   16818:	b80b883a 	mov	r5,r23
   1681c:	00205240 	call	20524 <__sprint_r>
   16820:	103b5c1e 	bne	r2,zero,15594 <__alt_data_end+0xfffd6d94>
   16824:	d8c02017 	ldw	r3,128(sp)
   16828:	dc401f17 	ldw	r17,124(sp)
   1682c:	dd800404 	addi	r22,sp,16
   16830:	003eb506 	br	16308 <__alt_data_end+0xfffd7b08>
   16834:	d9002d17 	ldw	r4,180(sp)
   16838:	d9801e04 	addi	r6,sp,120
   1683c:	b80b883a 	mov	r5,r23
   16840:	00205240 	call	20524 <__sprint_r>
   16844:	103b531e 	bne	r2,zero,15594 <__alt_data_end+0xfffd6d94>
   16848:	d8c02017 	ldw	r3,128(sp)
   1684c:	dc401f17 	ldw	r17,124(sp)
   16850:	da000404 	addi	r8,sp,16
   16854:	003e8d06 	br	1628c <__alt_data_end+0xfffd7a8c>
   16858:	d9002d17 	ldw	r4,180(sp)
   1685c:	d9801e04 	addi	r6,sp,120
   16860:	b80b883a 	mov	r5,r23
   16864:	00205240 	call	20524 <__sprint_r>
   16868:	103b4a1e 	bne	r2,zero,15594 <__alt_data_end+0xfffd6d94>
   1686c:	d8c02017 	ldw	r3,128(sp)
   16870:	dc401f17 	ldw	r17,124(sp)
   16874:	dd800404 	addi	r22,sp,16
   16878:	003e8f06 	br	162b8 <__alt_data_end+0xfffd7ab8>
   1687c:	0027883a 	mov	r19,zero
   16880:	003f4a06 	br	165ac <__alt_data_end+0xfffd7dac>
   16884:	d9002d17 	ldw	r4,180(sp)
   16888:	d9801e04 	addi	r6,sp,120
   1688c:	b80b883a 	mov	r5,r23
   16890:	00205240 	call	20524 <__sprint_r>
   16894:	103b3f1e 	bne	r2,zero,15594 <__alt_data_end+0xfffd6d94>
   16898:	d8c02017 	ldw	r3,128(sp)
   1689c:	da000404 	addi	r8,sp,16
   168a0:	003c7b06 	br	15a90 <__alt_data_end+0xfffd7290>
   168a4:	d9402a17 	ldw	r5,168(sp)
   168a8:	04e7c83a 	sub	r19,zero,r19
   168ac:	07000b44 	movi	fp,45
   168b0:	9804c03a 	cmpne	r2,r19,zero
   168b4:	05adc83a 	sub	r22,zero,r22
   168b8:	df002785 	stb	fp,158(sp)
   168bc:	b0adc83a 	sub	r22,r22,r2
   168c0:	28017b16 	blt	r5,zero,16eb0 <___vfprintf_internal_r+0x1d2c>
   168c4:	00bfdfc4 	movi	r2,-129
   168c8:	90a4703a 	and	r18,r18,r2
   168cc:	003b8906 	br	156f4 <__alt_data_end+0xfffd6ef4>
   168d0:	d9003617 	ldw	r4,216(sp)
   168d4:	d9403817 	ldw	r5,224(sp)
   168d8:	da003d15 	stw	r8,244(sp)
   168dc:	000ff480 	call	ff48 <__fpclassifyd>
   168e0:	da003d17 	ldw	r8,244(sp)
   168e4:	1000f026 	beq	r2,zero,16ca8 <___vfprintf_internal_r+0x1b24>
   168e8:	d9002a17 	ldw	r4,168(sp)
   168ec:	05bff7c4 	movi	r22,-33
   168f0:	00bfffc4 	movi	r2,-1
   168f4:	8dac703a 	and	r22,r17,r22
   168f8:	20820026 	beq	r4,r2,170fc <___vfprintf_internal_r+0x1f78>
   168fc:	008011c4 	movi	r2,71
   16900:	b081f726 	beq	r22,r2,170e0 <___vfprintf_internal_r+0x1f5c>
   16904:	d9003817 	ldw	r4,224(sp)
   16908:	90c04014 	ori	r3,r18,256
   1690c:	d8c02c15 	stw	r3,176(sp)
   16910:	20021516 	blt	r4,zero,17168 <___vfprintf_internal_r+0x1fe4>
   16914:	dcc03817 	ldw	r19,224(sp)
   16918:	d8002905 	stb	zero,164(sp)
   1691c:	00801984 	movi	r2,102
   16920:	8881f926 	beq	r17,r2,17108 <___vfprintf_internal_r+0x1f84>
   16924:	00801184 	movi	r2,70
   16928:	88821c26 	beq	r17,r2,1719c <___vfprintf_internal_r+0x2018>
   1692c:	00801144 	movi	r2,69
   16930:	b081ef26 	beq	r22,r2,170f0 <___vfprintf_internal_r+0x1f6c>
   16934:	d8c02a17 	ldw	r3,168(sp)
   16938:	d8802104 	addi	r2,sp,132
   1693c:	d8800315 	stw	r2,12(sp)
   16940:	d9403617 	ldw	r5,216(sp)
   16944:	d8802504 	addi	r2,sp,148
   16948:	d9002d17 	ldw	r4,180(sp)
   1694c:	d8800215 	stw	r2,8(sp)
   16950:	d8802604 	addi	r2,sp,152
   16954:	d8c00015 	stw	r3,0(sp)
   16958:	d8800115 	stw	r2,4(sp)
   1695c:	01c00084 	movi	r7,2
   16960:	980d883a 	mov	r6,r19
   16964:	d8c03c15 	stw	r3,240(sp)
   16968:	da003d15 	stw	r8,244(sp)
   1696c:	00179680 	call	17968 <_dtoa_r>
   16970:	1021883a 	mov	r16,r2
   16974:	008019c4 	movi	r2,103
   16978:	d8c03c17 	ldw	r3,240(sp)
   1697c:	da003d17 	ldw	r8,244(sp)
   16980:	88817126 	beq	r17,r2,16f48 <___vfprintf_internal_r+0x1dc4>
   16984:	008011c4 	movi	r2,71
   16988:	88829126 	beq	r17,r2,173d0 <___vfprintf_internal_r+0x224c>
   1698c:	80f9883a 	add	fp,r16,r3
   16990:	d9003617 	ldw	r4,216(sp)
   16994:	000d883a 	mov	r6,zero
   16998:	000f883a 	mov	r7,zero
   1699c:	980b883a 	mov	r5,r19
   169a0:	da003d15 	stw	r8,244(sp)
   169a4:	0026d1c0 	call	26d1c <__eqdf2>
   169a8:	da003d17 	ldw	r8,244(sp)
   169ac:	10018d26 	beq	r2,zero,16fe4 <___vfprintf_internal_r+0x1e60>
   169b0:	d8802117 	ldw	r2,132(sp)
   169b4:	1700062e 	bgeu	r2,fp,169d0 <___vfprintf_internal_r+0x184c>
   169b8:	01000c04 	movi	r4,48
   169bc:	10c00044 	addi	r3,r2,1
   169c0:	d8c02115 	stw	r3,132(sp)
   169c4:	11000005 	stb	r4,0(r2)
   169c8:	d8802117 	ldw	r2,132(sp)
   169cc:	173ffb36 	bltu	r2,fp,169bc <__alt_data_end+0xfffd81bc>
   169d0:	1405c83a 	sub	r2,r2,r16
   169d4:	d8803315 	stw	r2,204(sp)
   169d8:	008011c4 	movi	r2,71
   169dc:	b0817626 	beq	r22,r2,16fb8 <___vfprintf_internal_r+0x1e34>
   169e0:	00801944 	movi	r2,101
   169e4:	1442800e 	bge	r2,r17,173e8 <___vfprintf_internal_r+0x2264>
   169e8:	d8c02617 	ldw	r3,152(sp)
   169ec:	00801984 	movi	r2,102
   169f0:	d8c03215 	stw	r3,200(sp)
   169f4:	8881fe26 	beq	r17,r2,171f0 <___vfprintf_internal_r+0x206c>
   169f8:	d8c03217 	ldw	r3,200(sp)
   169fc:	d9003317 	ldw	r4,204(sp)
   16a00:	1901dd16 	blt	r3,r4,17178 <___vfprintf_internal_r+0x1ff4>
   16a04:	9480004c 	andi	r18,r18,1
   16a08:	90022b1e 	bne	r18,zero,172b8 <___vfprintf_internal_r+0x2134>
   16a0c:	1805883a 	mov	r2,r3
   16a10:	18028316 	blt	r3,zero,17420 <___vfprintf_internal_r+0x229c>
   16a14:	d8c03217 	ldw	r3,200(sp)
   16a18:	044019c4 	movi	r17,103
   16a1c:	d8c02b15 	stw	r3,172(sp)
   16a20:	df002907 	ldb	fp,164(sp)
   16a24:	e001531e 	bne	fp,zero,16f74 <___vfprintf_internal_r+0x1df0>
   16a28:	df002783 	ldbu	fp,158(sp)
   16a2c:	d8802915 	stw	r2,164(sp)
   16a30:	dc802c17 	ldw	r18,176(sp)
   16a34:	d8002a15 	stw	zero,168(sp)
   16a38:	003baf06 	br	158f8 <__alt_data_end+0xfffd70f8>
   16a3c:	d8c02e17 	ldw	r3,184(sp)
   16a40:	d9002e17 	ldw	r4,184(sp)
   16a44:	d9402e17 	ldw	r5,184(sp)
   16a48:	18c00017 	ldw	r3,0(r3)
   16a4c:	21000117 	ldw	r4,4(r4)
   16a50:	29400204 	addi	r5,r5,8
   16a54:	d8c03615 	stw	r3,216(sp)
   16a58:	d9003815 	stw	r4,224(sp)
   16a5c:	d9402e15 	stw	r5,184(sp)
   16a60:	003b5006 	br	157a4 <__alt_data_end+0xfffd6fa4>
   16a64:	ac400007 	ldb	r17,0(r21)
   16a68:	003a2806 	br	1530c <__alt_data_end+0xfffd6b0c>
   16a6c:	9080100c 	andi	r2,r18,64
   16a70:	1000a826 	beq	r2,zero,16d14 <___vfprintf_internal_r+0x1b90>
   16a74:	d8c02e17 	ldw	r3,184(sp)
   16a78:	002d883a 	mov	r22,zero
   16a7c:	1cc0000b 	ldhu	r19,0(r3)
   16a80:	18c00104 	addi	r3,r3,4
   16a84:	d8c02e15 	stw	r3,184(sp)
   16a88:	003caf06 	br	15d48 <__alt_data_end+0xfffd7548>
   16a8c:	d9002e17 	ldw	r4,184(sp)
   16a90:	d9402a17 	ldw	r5,168(sp)
   16a94:	002d883a 	mov	r22,zero
   16a98:	20800104 	addi	r2,r4,4
   16a9c:	24c00017 	ldw	r19,0(r4)
   16aa0:	283ebb0e 	bge	r5,zero,16590 <__alt_data_end+0xfffd7d90>
   16aa4:	003ef106 	br	1666c <__alt_data_end+0xfffd7e6c>
   16aa8:	9080040c 	andi	r2,r18,16
   16aac:	1000921e 	bne	r2,zero,16cf8 <___vfprintf_internal_r+0x1b74>
   16ab0:	9480100c 	andi	r18,r18,64
   16ab4:	90013926 	beq	r18,zero,16f9c <___vfprintf_internal_r+0x1e18>
   16ab8:	d9402e17 	ldw	r5,184(sp)
   16abc:	d8c02f17 	ldw	r3,188(sp)
   16ac0:	28800017 	ldw	r2,0(r5)
   16ac4:	29400104 	addi	r5,r5,4
   16ac8:	d9402e15 	stw	r5,184(sp)
   16acc:	10c0000d 	sth	r3,0(r2)
   16ad0:	0039e406 	br	15264 <__alt_data_end+0xfffd6a64>
   16ad4:	9080100c 	andi	r2,r18,64
   16ad8:	10008026 	beq	r2,zero,16cdc <___vfprintf_internal_r+0x1b58>
   16adc:	d8802e17 	ldw	r2,184(sp)
   16ae0:	14c0000f 	ldh	r19,0(r2)
   16ae4:	10800104 	addi	r2,r2,4
   16ae8:	d8802e15 	stw	r2,184(sp)
   16aec:	982dd7fa 	srai	r22,r19,31
   16af0:	b005883a 	mov	r2,r22
   16af4:	003af706 	br	156d4 <__alt_data_end+0xfffd6ed4>
   16af8:	9080100c 	andi	r2,r18,64
   16afc:	d8002785 	stb	zero,158(sp)
   16b00:	10008a1e 	bne	r2,zero,16d2c <___vfprintf_internal_r+0x1ba8>
   16b04:	d9002e17 	ldw	r4,184(sp)
   16b08:	d9402a17 	ldw	r5,168(sp)
   16b0c:	002d883a 	mov	r22,zero
   16b10:	20800104 	addi	r2,r4,4
   16b14:	24c00017 	ldw	r19,0(r4)
   16b18:	283e4b0e 	bge	r5,zero,16448 <__alt_data_end+0xfffd7c48>
   16b1c:	9d86b03a 	or	r3,r19,r22
   16b20:	d8802e15 	stw	r2,184(sp)
   16b24:	183e4c1e 	bne	r3,zero,16458 <__alt_data_end+0xfffd7c58>
   16b28:	0039883a 	mov	fp,zero
   16b2c:	0005883a 	mov	r2,zero
   16b30:	003d4006 	br	16034 <__alt_data_end+0xfffd7834>
   16b34:	014000f4 	movhi	r5,3
   16b38:	2964c384 	addi	r5,r5,-27890
   16b3c:	d9402c15 	stw	r5,176(sp)
   16b40:	d9402c17 	ldw	r5,176(sp)
   16b44:	1c47883a 	add	r3,r3,r17
   16b48:	10800044 	addi	r2,r2,1
   16b4c:	41400015 	stw	r5,0(r8)
   16b50:	44400115 	stw	r17,4(r8)
   16b54:	d8c02015 	stw	r3,128(sp)
   16b58:	d8801f15 	stw	r2,124(sp)
   16b5c:	010001c4 	movi	r4,7
   16b60:	20bec816 	blt	r4,r2,16684 <__alt_data_end+0xfffd7e84>
   16b64:	42000204 	addi	r8,r8,8
   16b68:	003ecd06 	br	166a0 <__alt_data_end+0xfffd7ea0>
   16b6c:	d9002a17 	ldw	r4,168(sp)
   16b70:	d8002785 	stb	zero,158(sp)
   16b74:	203d2d16 	blt	r4,zero,1602c <__alt_data_end+0xfffd782c>
   16b78:	00bfdfc4 	movi	r2,-129
   16b7c:	90a4703a 	and	r18,r18,r2
   16b80:	003a6106 	br	15508 <__alt_data_end+0xfffd6d08>
   16b84:	010000f4 	movhi	r4,3
   16b88:	2124c384 	addi	r4,r4,-27890
   16b8c:	d9002c15 	stw	r4,176(sp)
   16b90:	003bea06 	br	15b3c <__alt_data_end+0xfffd733c>
   16b94:	d9002d17 	ldw	r4,180(sp)
   16b98:	d9801e04 	addi	r6,sp,120
   16b9c:	b80b883a 	mov	r5,r23
   16ba0:	00205240 	call	20524 <__sprint_r>
   16ba4:	103a7b1e 	bne	r2,zero,15594 <__alt_data_end+0xfffd6d94>
   16ba8:	d8c02017 	ldw	r3,128(sp)
   16bac:	da000404 	addi	r8,sp,16
   16bb0:	003d4106 	br	160b8 <__alt_data_end+0xfffd78b8>
   16bb4:	d8801f17 	ldw	r2,124(sp)
   16bb8:	014000f4 	movhi	r5,3
   16bbc:	01000044 	movi	r4,1
   16bc0:	18c00044 	addi	r3,r3,1
   16bc4:	10800044 	addi	r2,r2,1
   16bc8:	2964c304 	addi	r5,r5,-27892
   16bcc:	41000115 	stw	r4,4(r8)
   16bd0:	41400015 	stw	r5,0(r8)
   16bd4:	d8c02015 	stw	r3,128(sp)
   16bd8:	d8801f15 	stw	r2,124(sp)
   16bdc:	010001c4 	movi	r4,7
   16be0:	20805c16 	blt	r4,r2,16d54 <___vfprintf_internal_r+0x1bd0>
   16be4:	42000204 	addi	r8,r8,8
   16be8:	8800041e 	bne	r17,zero,16bfc <___vfprintf_internal_r+0x1a78>
   16bec:	d8803317 	ldw	r2,204(sp)
   16bf0:	1000021e 	bne	r2,zero,16bfc <___vfprintf_internal_r+0x1a78>
   16bf4:	9080004c 	andi	r2,r18,1
   16bf8:	103be726 	beq	r2,zero,15b98 <__alt_data_end+0xfffd7398>
   16bfc:	d9003717 	ldw	r4,220(sp)
   16c00:	d8801f17 	ldw	r2,124(sp)
   16c04:	d9403417 	ldw	r5,208(sp)
   16c08:	20c7883a 	add	r3,r4,r3
   16c0c:	10800044 	addi	r2,r2,1
   16c10:	41000115 	stw	r4,4(r8)
   16c14:	41400015 	stw	r5,0(r8)
   16c18:	d8c02015 	stw	r3,128(sp)
   16c1c:	d8801f15 	stw	r2,124(sp)
   16c20:	010001c4 	movi	r4,7
   16c24:	20812116 	blt	r4,r2,170ac <___vfprintf_internal_r+0x1f28>
   16c28:	42000204 	addi	r8,r8,8
   16c2c:	0463c83a 	sub	r17,zero,r17
   16c30:	0440730e 	bge	zero,r17,16e00 <___vfprintf_internal_r+0x1c7c>
   16c34:	05800404 	movi	r22,16
   16c38:	b440860e 	bge	r22,r17,16e54 <___vfprintf_internal_r+0x1cd0>
   16c3c:	014000f4 	movhi	r5,3
   16c40:	2964c384 	addi	r5,r5,-27890
   16c44:	d9402c15 	stw	r5,176(sp)
   16c48:	070001c4 	movi	fp,7
   16c4c:	dcc02d17 	ldw	r19,180(sp)
   16c50:	00000306 	br	16c60 <___vfprintf_internal_r+0x1adc>
   16c54:	42000204 	addi	r8,r8,8
   16c58:	8c7ffc04 	addi	r17,r17,-16
   16c5c:	b440800e 	bge	r22,r17,16e60 <___vfprintf_internal_r+0x1cdc>
   16c60:	18c00404 	addi	r3,r3,16
   16c64:	10800044 	addi	r2,r2,1
   16c68:	45000015 	stw	r20,0(r8)
   16c6c:	45800115 	stw	r22,4(r8)
   16c70:	d8c02015 	stw	r3,128(sp)
   16c74:	d8801f15 	stw	r2,124(sp)
   16c78:	e0bff60e 	bge	fp,r2,16c54 <__alt_data_end+0xfffd8454>
   16c7c:	d9801e04 	addi	r6,sp,120
   16c80:	b80b883a 	mov	r5,r23
   16c84:	9809883a 	mov	r4,r19
   16c88:	00205240 	call	20524 <__sprint_r>
   16c8c:	103a411e 	bne	r2,zero,15594 <__alt_data_end+0xfffd6d94>
   16c90:	d8c02017 	ldw	r3,128(sp)
   16c94:	d8801f17 	ldw	r2,124(sp)
   16c98:	da000404 	addi	r8,sp,16
   16c9c:	003fee06 	br	16c58 <__alt_data_end+0xfffd8458>
   16ca0:	00bfffc4 	movi	r2,-1
   16ca4:	003a3f06 	br	155a4 <__alt_data_end+0xfffd6da4>
   16ca8:	008011c4 	movi	r2,71
   16cac:	1440b816 	blt	r2,r17,16f90 <___vfprintf_internal_r+0x1e0c>
   16cb0:	040000f4 	movhi	r16,3
   16cb4:	8424b504 	addi	r16,r16,-27948
   16cb8:	00c000c4 	movi	r3,3
   16cbc:	00bfdfc4 	movi	r2,-129
   16cc0:	d8c02915 	stw	r3,164(sp)
   16cc4:	90a4703a 	and	r18,r18,r2
   16cc8:	df002783 	ldbu	fp,158(sp)
   16ccc:	d8c02b15 	stw	r3,172(sp)
   16cd0:	d8002a15 	stw	zero,168(sp)
   16cd4:	d8003215 	stw	zero,200(sp)
   16cd8:	003b0706 	br	158f8 <__alt_data_end+0xfffd70f8>
   16cdc:	d8c02e17 	ldw	r3,184(sp)
   16ce0:	1cc00017 	ldw	r19,0(r3)
   16ce4:	18c00104 	addi	r3,r3,4
   16ce8:	d8c02e15 	stw	r3,184(sp)
   16cec:	982dd7fa 	srai	r22,r19,31
   16cf0:	b005883a 	mov	r2,r22
   16cf4:	003a7706 	br	156d4 <__alt_data_end+0xfffd6ed4>
   16cf8:	d8c02e17 	ldw	r3,184(sp)
   16cfc:	d9002f17 	ldw	r4,188(sp)
   16d00:	18800017 	ldw	r2,0(r3)
   16d04:	18c00104 	addi	r3,r3,4
   16d08:	d8c02e15 	stw	r3,184(sp)
   16d0c:	11000015 	stw	r4,0(r2)
   16d10:	00395406 	br	15264 <__alt_data_end+0xfffd6a64>
   16d14:	d9002e17 	ldw	r4,184(sp)
   16d18:	002d883a 	mov	r22,zero
   16d1c:	24c00017 	ldw	r19,0(r4)
   16d20:	21000104 	addi	r4,r4,4
   16d24:	d9002e15 	stw	r4,184(sp)
   16d28:	003c0706 	br	15d48 <__alt_data_end+0xfffd7548>
   16d2c:	d9402e17 	ldw	r5,184(sp)
   16d30:	d8c02a17 	ldw	r3,168(sp)
   16d34:	002d883a 	mov	r22,zero
   16d38:	28800104 	addi	r2,r5,4
   16d3c:	2cc0000b 	ldhu	r19,0(r5)
   16d40:	183dc10e 	bge	r3,zero,16448 <__alt_data_end+0xfffd7c48>
   16d44:	003f7506 	br	16b1c <__alt_data_end+0xfffd831c>
   16d48:	040000f4 	movhi	r16,3
   16d4c:	8424b304 	addi	r16,r16,-27956
   16d50:	003aa706 	br	157f0 <__alt_data_end+0xfffd6ff0>
   16d54:	d9002d17 	ldw	r4,180(sp)
   16d58:	d9801e04 	addi	r6,sp,120
   16d5c:	b80b883a 	mov	r5,r23
   16d60:	00205240 	call	20524 <__sprint_r>
   16d64:	103a0b1e 	bne	r2,zero,15594 <__alt_data_end+0xfffd6d94>
   16d68:	dc402617 	ldw	r17,152(sp)
   16d6c:	d8c02017 	ldw	r3,128(sp)
   16d70:	da000404 	addi	r8,sp,16
   16d74:	003f9c06 	br	16be8 <__alt_data_end+0xfffd83e8>
   16d78:	ac400043 	ldbu	r17,1(r21)
   16d7c:	84000814 	ori	r16,r16,32
   16d80:	ad400044 	addi	r21,r21,1
   16d84:	8c403fcc 	andi	r17,r17,255
   16d88:	8c40201c 	xori	r17,r17,128
   16d8c:	8c7fe004 	addi	r17,r17,-128
   16d90:	00395e06 	br	1530c <__alt_data_end+0xfffd6b0c>
   16d94:	d8c02e15 	stw	r3,184(sp)
   16d98:	0039883a 	mov	fp,zero
   16d9c:	003e3506 	br	16674 <__alt_data_end+0xfffd7e74>
   16da0:	d9002d17 	ldw	r4,180(sp)
   16da4:	d9801e04 	addi	r6,sp,120
   16da8:	b80b883a 	mov	r5,r23
   16dac:	00205240 	call	20524 <__sprint_r>
   16db0:	1039f81e 	bne	r2,zero,15594 <__alt_data_end+0xfffd6d94>
   16db4:	d8c02017 	ldw	r3,128(sp)
   16db8:	da000404 	addi	r8,sp,16
   16dbc:	003cd006 	br	16100 <__alt_data_end+0xfffd7900>
   16dc0:	8009883a 	mov	r4,r16
   16dc4:	df003d15 	stw	fp,244(sp)
   16dc8:	00137600 	call	13760 <strlen>
   16dcc:	d8802b15 	stw	r2,172(sp)
   16dd0:	da003d17 	ldw	r8,244(sp)
   16dd4:	103c200e 	bge	r2,zero,15e58 <__alt_data_end+0xfffd7658>
   16dd8:	0005883a 	mov	r2,zero
   16ddc:	003c1e06 	br	15e58 <__alt_data_end+0xfffd7658>
   16de0:	d9002d17 	ldw	r4,180(sp)
   16de4:	d9801e04 	addi	r6,sp,120
   16de8:	b80b883a 	mov	r5,r23
   16dec:	00205240 	call	20524 <__sprint_r>
   16df0:	1039e81e 	bne	r2,zero,15594 <__alt_data_end+0xfffd6d94>
   16df4:	d8c02017 	ldw	r3,128(sp)
   16df8:	d8801f17 	ldw	r2,124(sp)
   16dfc:	da000404 	addi	r8,sp,16
   16e00:	d9403317 	ldw	r5,204(sp)
   16e04:	10800044 	addi	r2,r2,1
   16e08:	44000015 	stw	r16,0(r8)
   16e0c:	28c7883a 	add	r3,r5,r3
   16e10:	003b5b06 	br	15b80 <__alt_data_end+0xfffd7380>
   16e14:	010000f4 	movhi	r4,3
   16e18:	2124c784 	addi	r4,r4,-27874
   16e1c:	d9003515 	stw	r4,212(sp)
   16e20:	003af206 	br	159ec <__alt_data_end+0xfffd71ec>
   16e24:	013fffc4 	movi	r4,-1
   16e28:	003a0806 	br	1564c <__alt_data_end+0xfffd6e4c>
   16e2c:	0023883a 	mov	r17,zero
   16e30:	003d9d06 	br	164a8 <__alt_data_end+0xfffd7ca8>
   16e34:	d9002d17 	ldw	r4,180(sp)
   16e38:	d9801e04 	addi	r6,sp,120
   16e3c:	b80b883a 	mov	r5,r23
   16e40:	00205240 	call	20524 <__sprint_r>
   16e44:	1039d31e 	bne	r2,zero,15594 <__alt_data_end+0xfffd6d94>
   16e48:	d8c02017 	ldw	r3,128(sp)
   16e4c:	da000404 	addi	r8,sp,16
   16e50:	003d9406 	br	164a4 <__alt_data_end+0xfffd7ca4>
   16e54:	010000f4 	movhi	r4,3
   16e58:	2124c384 	addi	r4,r4,-27890
   16e5c:	d9002c15 	stw	r4,176(sp)
   16e60:	d9002c17 	ldw	r4,176(sp)
   16e64:	1c47883a 	add	r3,r3,r17
   16e68:	10800044 	addi	r2,r2,1
   16e6c:	41000015 	stw	r4,0(r8)
   16e70:	44400115 	stw	r17,4(r8)
   16e74:	d8c02015 	stw	r3,128(sp)
   16e78:	d8801f15 	stw	r2,124(sp)
   16e7c:	010001c4 	movi	r4,7
   16e80:	20bfd716 	blt	r4,r2,16de0 <__alt_data_end+0xfffd85e0>
   16e84:	42000204 	addi	r8,r8,8
   16e88:	003fdd06 	br	16e00 <__alt_data_end+0xfffd8600>
   16e8c:	d9002d17 	ldw	r4,180(sp)
   16e90:	d9801e04 	addi	r6,sp,120
   16e94:	b80b883a 	mov	r5,r23
   16e98:	00205240 	call	20524 <__sprint_r>
   16e9c:	1039bd1e 	bne	r2,zero,15594 <__alt_data_end+0xfffd6d94>
   16ea0:	d8802617 	ldw	r2,152(sp)
   16ea4:	d8c02017 	ldw	r3,128(sp)
   16ea8:	da000404 	addi	r8,sp,16
   16eac:	003e1006 	br	166f0 <__alt_data_end+0xfffd7ef0>
   16eb0:	00800044 	movi	r2,1
   16eb4:	10803fcc 	andi	r2,r2,255
   16eb8:	00c00044 	movi	r3,1
   16ebc:	10fa0d26 	beq	r2,r3,156f4 <__alt_data_end+0xfffd6ef4>
   16ec0:	00c00084 	movi	r3,2
   16ec4:	10fbaf26 	beq	r2,r3,15d84 <__alt_data_end+0xfffd7584>
   16ec8:	003a6d06 	br	15880 <__alt_data_end+0xfffd7080>
   16ecc:	010000f4 	movhi	r4,3
   16ed0:	2124c784 	addi	r4,r4,-27874
   16ed4:	d9003515 	stw	r4,212(sp)
   16ed8:	003b5406 	br	15c2c <__alt_data_end+0xfffd742c>
   16edc:	d8802a17 	ldw	r2,168(sp)
   16ee0:	00c00184 	movi	r3,6
   16ee4:	1880012e 	bgeu	r3,r2,16eec <___vfprintf_internal_r+0x1d68>
   16ee8:	1805883a 	mov	r2,r3
   16eec:	d8802b15 	stw	r2,172(sp)
   16ef0:	1000ef16 	blt	r2,zero,172b0 <___vfprintf_internal_r+0x212c>
   16ef4:	040000f4 	movhi	r16,3
   16ef8:	d8802915 	stw	r2,164(sp)
   16efc:	dcc02e15 	stw	r19,184(sp)
   16f00:	d8002a15 	stw	zero,168(sp)
   16f04:	d8003215 	stw	zero,200(sp)
   16f08:	8424c104 	addi	r16,r16,-27900
   16f0c:	0039883a 	mov	fp,zero
   16f10:	003a8006 	br	15914 <__alt_data_end+0xfffd7114>
   16f14:	0021883a 	mov	r16,zero
   16f18:	003e0706 	br	16738 <__alt_data_end+0xfffd7f38>
   16f1c:	d9002d17 	ldw	r4,180(sp)
   16f20:	d9801e04 	addi	r6,sp,120
   16f24:	b80b883a 	mov	r5,r23
   16f28:	00205240 	call	20524 <__sprint_r>
   16f2c:	1039991e 	bne	r2,zero,15594 <__alt_data_end+0xfffd6d94>
   16f30:	d8802617 	ldw	r2,152(sp)
   16f34:	d9403317 	ldw	r5,204(sp)
   16f38:	d8c02017 	ldw	r3,128(sp)
   16f3c:	da000404 	addi	r8,sp,16
   16f40:	2885c83a 	sub	r2,r5,r2
   16f44:	003dfb06 	br	16734 <__alt_data_end+0xfffd7f34>
   16f48:	9080004c 	andi	r2,r18,1
   16f4c:	103e8f1e 	bne	r2,zero,1698c <__alt_data_end+0xfffd818c>
   16f50:	d8802117 	ldw	r2,132(sp)
   16f54:	003e9e06 	br	169d0 <__alt_data_end+0xfffd81d0>
   16f58:	1025883a 	mov	r18,r2
   16f5c:	0039883a 	mov	fp,zero
   16f60:	00800084 	movi	r2,2
   16f64:	003fd306 	br	16eb4 <__alt_data_end+0xfffd86b4>
   16f68:	07000b44 	movi	fp,45
   16f6c:	df002785 	stb	fp,158(sp)
   16f70:	003a1b06 	br	157e0 <__alt_data_end+0xfffd6fe0>
   16f74:	00c00b44 	movi	r3,45
   16f78:	d8c02785 	stb	r3,158(sp)
   16f7c:	d8802915 	stw	r2,164(sp)
   16f80:	dc802c17 	ldw	r18,176(sp)
   16f84:	d8002a15 	stw	zero,168(sp)
   16f88:	07000b44 	movi	fp,45
   16f8c:	003a5e06 	br	15908 <__alt_data_end+0xfffd7108>
   16f90:	040000f4 	movhi	r16,3
   16f94:	8424b604 	addi	r16,r16,-27944
   16f98:	003f4706 	br	16cb8 <__alt_data_end+0xfffd84b8>
   16f9c:	d9002e17 	ldw	r4,184(sp)
   16fa0:	d9402f17 	ldw	r5,188(sp)
   16fa4:	20800017 	ldw	r2,0(r4)
   16fa8:	21000104 	addi	r4,r4,4
   16fac:	d9002e15 	stw	r4,184(sp)
   16fb0:	11400015 	stw	r5,0(r2)
   16fb4:	0038ab06 	br	15264 <__alt_data_end+0xfffd6a64>
   16fb8:	dd802617 	ldw	r22,152(sp)
   16fbc:	00bfff44 	movi	r2,-3
   16fc0:	b0801c16 	blt	r22,r2,17034 <___vfprintf_internal_r+0x1eb0>
   16fc4:	d9402a17 	ldw	r5,168(sp)
   16fc8:	2d801a16 	blt	r5,r22,17034 <___vfprintf_internal_r+0x1eb0>
   16fcc:	dd803215 	stw	r22,200(sp)
   16fd0:	003e8906 	br	169f8 <__alt_data_end+0xfffd81f8>
   16fd4:	010000f4 	movhi	r4,3
   16fd8:	2124c384 	addi	r4,r4,-27890
   16fdc:	d9002c15 	stw	r4,176(sp)
   16fe0:	003c9106 	br	16228 <__alt_data_end+0xfffd7a28>
   16fe4:	e005883a 	mov	r2,fp
   16fe8:	003e7906 	br	169d0 <__alt_data_end+0xfffd81d0>
   16fec:	d9002a17 	ldw	r4,168(sp)
   16ff0:	df002783 	ldbu	fp,158(sp)
   16ff4:	dcc02e15 	stw	r19,184(sp)
   16ff8:	d9002915 	stw	r4,164(sp)
   16ffc:	d9002b15 	stw	r4,172(sp)
   17000:	d8002a15 	stw	zero,168(sp)
   17004:	d8003215 	stw	zero,200(sp)
   17008:	003a3b06 	br	158f8 <__alt_data_end+0xfffd70f8>
   1700c:	9080004c 	andi	r2,r18,1
   17010:	0039883a 	mov	fp,zero
   17014:	10000426 	beq	r2,zero,17028 <___vfprintf_internal_r+0x1ea4>
   17018:	00800c04 	movi	r2,48
   1701c:	dc001dc4 	addi	r16,sp,119
   17020:	d8801dc5 	stb	r2,119(sp)
   17024:	003b6406 	br	15db8 <__alt_data_end+0xfffd75b8>
   17028:	d8002b15 	stw	zero,172(sp)
   1702c:	dc001e04 	addi	r16,sp,120
   17030:	003a2b06 	br	158e0 <__alt_data_end+0xfffd70e0>
   17034:	8c7fff84 	addi	r17,r17,-2
   17038:	b5bfffc4 	addi	r22,r22,-1
   1703c:	dd802615 	stw	r22,152(sp)
   17040:	dc4022c5 	stb	r17,139(sp)
   17044:	b000bf16 	blt	r22,zero,17344 <___vfprintf_internal_r+0x21c0>
   17048:	00800ac4 	movi	r2,43
   1704c:	d8802305 	stb	r2,140(sp)
   17050:	00800244 	movi	r2,9
   17054:	15807016 	blt	r2,r22,17218 <___vfprintf_internal_r+0x2094>
   17058:	00800c04 	movi	r2,48
   1705c:	b5800c04 	addi	r22,r22,48
   17060:	d8802345 	stb	r2,141(sp)
   17064:	dd802385 	stb	r22,142(sp)
   17068:	d88023c4 	addi	r2,sp,143
   1706c:	df0022c4 	addi	fp,sp,139
   17070:	d8c03317 	ldw	r3,204(sp)
   17074:	1739c83a 	sub	fp,r2,fp
   17078:	d9003317 	ldw	r4,204(sp)
   1707c:	e0c7883a 	add	r3,fp,r3
   17080:	df003a15 	stw	fp,232(sp)
   17084:	d8c02b15 	stw	r3,172(sp)
   17088:	00800044 	movi	r2,1
   1708c:	1100b30e 	bge	r2,r4,1735c <___vfprintf_internal_r+0x21d8>
   17090:	d8c02b17 	ldw	r3,172(sp)
   17094:	18c00044 	addi	r3,r3,1
   17098:	d8c02b15 	stw	r3,172(sp)
   1709c:	1805883a 	mov	r2,r3
   170a0:	1800ac16 	blt	r3,zero,17354 <___vfprintf_internal_r+0x21d0>
   170a4:	d8003215 	stw	zero,200(sp)
   170a8:	003e5d06 	br	16a20 <__alt_data_end+0xfffd8220>
   170ac:	d9002d17 	ldw	r4,180(sp)
   170b0:	d9801e04 	addi	r6,sp,120
   170b4:	b80b883a 	mov	r5,r23
   170b8:	00205240 	call	20524 <__sprint_r>
   170bc:	1039351e 	bne	r2,zero,15594 <__alt_data_end+0xfffd6d94>
   170c0:	dc402617 	ldw	r17,152(sp)
   170c4:	d8c02017 	ldw	r3,128(sp)
   170c8:	d8801f17 	ldw	r2,124(sp)
   170cc:	da000404 	addi	r8,sp,16
   170d0:	003ed606 	br	16c2c <__alt_data_end+0xfffd842c>
   170d4:	182b883a 	mov	r21,r3
   170d8:	d8002a15 	stw	zero,168(sp)
   170dc:	00388c06 	br	15310 <__alt_data_end+0xfffd6b10>
   170e0:	d8802a17 	ldw	r2,168(sp)
   170e4:	103e071e 	bne	r2,zero,16904 <__alt_data_end+0xfffd8104>
   170e8:	dc002a15 	stw	r16,168(sp)
   170ec:	003e0506 	br	16904 <__alt_data_end+0xfffd8104>
   170f0:	d9002a17 	ldw	r4,168(sp)
   170f4:	20c00044 	addi	r3,r4,1
   170f8:	003e0f06 	br	16938 <__alt_data_end+0xfffd8138>
   170fc:	01400184 	movi	r5,6
   17100:	d9402a15 	stw	r5,168(sp)
   17104:	003dff06 	br	16904 <__alt_data_end+0xfffd8104>
   17108:	d8802104 	addi	r2,sp,132
   1710c:	d8800315 	stw	r2,12(sp)
   17110:	d8802504 	addi	r2,sp,148
   17114:	d8800215 	stw	r2,8(sp)
   17118:	d8802604 	addi	r2,sp,152
   1711c:	d8800115 	stw	r2,4(sp)
   17120:	d8802a17 	ldw	r2,168(sp)
   17124:	d9403617 	ldw	r5,216(sp)
   17128:	d9002d17 	ldw	r4,180(sp)
   1712c:	d8800015 	stw	r2,0(sp)
   17130:	01c000c4 	movi	r7,3
   17134:	980d883a 	mov	r6,r19
   17138:	da003d15 	stw	r8,244(sp)
   1713c:	00179680 	call	17968 <_dtoa_r>
   17140:	d8c02a17 	ldw	r3,168(sp)
   17144:	da003d17 	ldw	r8,244(sp)
   17148:	1021883a 	mov	r16,r2
   1714c:	10f9883a 	add	fp,r2,r3
   17150:	81000007 	ldb	r4,0(r16)
   17154:	00800c04 	movi	r2,48
   17158:	20805e26 	beq	r4,r2,172d4 <___vfprintf_internal_r+0x2150>
   1715c:	d8c02617 	ldw	r3,152(sp)
   17160:	e0f9883a 	add	fp,fp,r3
   17164:	003e0a06 	br	16990 <__alt_data_end+0xfffd8190>
   17168:	00c00b44 	movi	r3,45
   1716c:	24e0003c 	xorhi	r19,r4,32768
   17170:	d8c02905 	stb	r3,164(sp)
   17174:	003de906 	br	1691c <__alt_data_end+0xfffd811c>
   17178:	d8c03217 	ldw	r3,200(sp)
   1717c:	00c07a0e 	bge	zero,r3,17368 <___vfprintf_internal_r+0x21e4>
   17180:	00800044 	movi	r2,1
   17184:	d9003317 	ldw	r4,204(sp)
   17188:	1105883a 	add	r2,r2,r4
   1718c:	d8802b15 	stw	r2,172(sp)
   17190:	10004e16 	blt	r2,zero,172cc <___vfprintf_internal_r+0x2148>
   17194:	044019c4 	movi	r17,103
   17198:	003e2106 	br	16a20 <__alt_data_end+0xfffd8220>
   1719c:	d9002a17 	ldw	r4,168(sp)
   171a0:	d8802104 	addi	r2,sp,132
   171a4:	d8800315 	stw	r2,12(sp)
   171a8:	d9000015 	stw	r4,0(sp)
   171ac:	d8802504 	addi	r2,sp,148
   171b0:	d9403617 	ldw	r5,216(sp)
   171b4:	d9002d17 	ldw	r4,180(sp)
   171b8:	d8800215 	stw	r2,8(sp)
   171bc:	d8802604 	addi	r2,sp,152
   171c0:	d8800115 	stw	r2,4(sp)
   171c4:	01c000c4 	movi	r7,3
   171c8:	980d883a 	mov	r6,r19
   171cc:	da003d15 	stw	r8,244(sp)
   171d0:	00179680 	call	17968 <_dtoa_r>
   171d4:	d8c02a17 	ldw	r3,168(sp)
   171d8:	da003d17 	ldw	r8,244(sp)
   171dc:	1021883a 	mov	r16,r2
   171e0:	00801184 	movi	r2,70
   171e4:	80f9883a 	add	fp,r16,r3
   171e8:	88bfd926 	beq	r17,r2,17150 <__alt_data_end+0xfffd8950>
   171ec:	003de806 	br	16990 <__alt_data_end+0xfffd8190>
   171f0:	d9002a17 	ldw	r4,168(sp)
   171f4:	00c04d0e 	bge	zero,r3,1732c <___vfprintf_internal_r+0x21a8>
   171f8:	2000441e 	bne	r4,zero,1730c <___vfprintf_internal_r+0x2188>
   171fc:	9480004c 	andi	r18,r18,1
   17200:	9000421e 	bne	r18,zero,1730c <___vfprintf_internal_r+0x2188>
   17204:	1805883a 	mov	r2,r3
   17208:	18006f16 	blt	r3,zero,173c8 <___vfprintf_internal_r+0x2244>
   1720c:	d8c03217 	ldw	r3,200(sp)
   17210:	d8c02b15 	stw	r3,172(sp)
   17214:	003e0206 	br	16a20 <__alt_data_end+0xfffd8220>
   17218:	df0022c4 	addi	fp,sp,139
   1721c:	dc002a15 	stw	r16,168(sp)
   17220:	4027883a 	mov	r19,r8
   17224:	e021883a 	mov	r16,fp
   17228:	b009883a 	mov	r4,r22
   1722c:	01400284 	movi	r5,10
   17230:	002574c0 	call	2574c <__modsi3>
   17234:	10800c04 	addi	r2,r2,48
   17238:	843fffc4 	addi	r16,r16,-1
   1723c:	b009883a 	mov	r4,r22
   17240:	01400284 	movi	r5,10
   17244:	80800005 	stb	r2,0(r16)
   17248:	00256c80 	call	256c8 <__divsi3>
   1724c:	102d883a 	mov	r22,r2
   17250:	00800244 	movi	r2,9
   17254:	15bff416 	blt	r2,r22,17228 <__alt_data_end+0xfffd8a28>
   17258:	9811883a 	mov	r8,r19
   1725c:	b0800c04 	addi	r2,r22,48
   17260:	8027883a 	mov	r19,r16
   17264:	997fffc4 	addi	r5,r19,-1
   17268:	98bfffc5 	stb	r2,-1(r19)
   1726c:	dc002a17 	ldw	r16,168(sp)
   17270:	2f006d2e 	bgeu	r5,fp,17428 <___vfprintf_internal_r+0x22a4>
   17274:	d9c02384 	addi	r7,sp,142
   17278:	3ccfc83a 	sub	r7,r7,r19
   1727c:	d9002344 	addi	r4,sp,141
   17280:	e1cf883a 	add	r7,fp,r7
   17284:	00000106 	br	1728c <___vfprintf_internal_r+0x2108>
   17288:	28800003 	ldbu	r2,0(r5)
   1728c:	20800005 	stb	r2,0(r4)
   17290:	21000044 	addi	r4,r4,1
   17294:	29400044 	addi	r5,r5,1
   17298:	393ffb1e 	bne	r7,r4,17288 <__alt_data_end+0xfffd8a88>
   1729c:	d8802304 	addi	r2,sp,140
   172a0:	14c5c83a 	sub	r2,r2,r19
   172a4:	d8c02344 	addi	r3,sp,141
   172a8:	1885883a 	add	r2,r3,r2
   172ac:	003f7006 	br	17070 <__alt_data_end+0xfffd8870>
   172b0:	0005883a 	mov	r2,zero
   172b4:	003f0f06 	br	16ef4 <__alt_data_end+0xfffd86f4>
   172b8:	d8c03217 	ldw	r3,200(sp)
   172bc:	18c00044 	addi	r3,r3,1
   172c0:	d8c02b15 	stw	r3,172(sp)
   172c4:	1805883a 	mov	r2,r3
   172c8:	183fb20e 	bge	r3,zero,17194 <__alt_data_end+0xfffd8994>
   172cc:	0005883a 	mov	r2,zero
   172d0:	003fb006 	br	17194 <__alt_data_end+0xfffd8994>
   172d4:	d9003617 	ldw	r4,216(sp)
   172d8:	000d883a 	mov	r6,zero
   172dc:	000f883a 	mov	r7,zero
   172e0:	980b883a 	mov	r5,r19
   172e4:	d8c03c15 	stw	r3,240(sp)
   172e8:	da003d15 	stw	r8,244(sp)
   172ec:	0026d1c0 	call	26d1c <__eqdf2>
   172f0:	d8c03c17 	ldw	r3,240(sp)
   172f4:	da003d17 	ldw	r8,244(sp)
   172f8:	103f9826 	beq	r2,zero,1715c <__alt_data_end+0xfffd895c>
   172fc:	00800044 	movi	r2,1
   17300:	10c7c83a 	sub	r3,r2,r3
   17304:	d8c02615 	stw	r3,152(sp)
   17308:	003f9506 	br	17160 <__alt_data_end+0xfffd8960>
   1730c:	d9002a17 	ldw	r4,168(sp)
   17310:	d8c03217 	ldw	r3,200(sp)
   17314:	20800044 	addi	r2,r4,1
   17318:	1885883a 	add	r2,r3,r2
   1731c:	d8802b15 	stw	r2,172(sp)
   17320:	103dbf0e 	bge	r2,zero,16a20 <__alt_data_end+0xfffd8220>
   17324:	0005883a 	mov	r2,zero
   17328:	003dbd06 	br	16a20 <__alt_data_end+0xfffd8220>
   1732c:	2000201e 	bne	r4,zero,173b0 <___vfprintf_internal_r+0x222c>
   17330:	9480004c 	andi	r18,r18,1
   17334:	90001e1e 	bne	r18,zero,173b0 <___vfprintf_internal_r+0x222c>
   17338:	00800044 	movi	r2,1
   1733c:	d8802b15 	stw	r2,172(sp)
   17340:	003db706 	br	16a20 <__alt_data_end+0xfffd8220>
   17344:	00800b44 	movi	r2,45
   17348:	05adc83a 	sub	r22,zero,r22
   1734c:	d8802305 	stb	r2,140(sp)
   17350:	003f3f06 	br	17050 <__alt_data_end+0xfffd8850>
   17354:	0005883a 	mov	r2,zero
   17358:	003f5206 	br	170a4 <__alt_data_end+0xfffd88a4>
   1735c:	90a4703a 	and	r18,r18,r2
   17360:	903f4e26 	beq	r18,zero,1709c <__alt_data_end+0xfffd889c>
   17364:	003f4a06 	br	17090 <__alt_data_end+0xfffd8890>
   17368:	00800084 	movi	r2,2
   1736c:	10c5c83a 	sub	r2,r2,r3
   17370:	003f8406 	br	17184 <__alt_data_end+0xfffd8984>
   17374:	d9402e17 	ldw	r5,184(sp)
   17378:	d9002e17 	ldw	r4,184(sp)
   1737c:	ac400043 	ldbu	r17,1(r21)
   17380:	29400017 	ldw	r5,0(r5)
   17384:	20800104 	addi	r2,r4,4
   17388:	d8802e15 	stw	r2,184(sp)
   1738c:	d9402a15 	stw	r5,168(sp)
   17390:	182b883a 	mov	r21,r3
   17394:	283e7b0e 	bge	r5,zero,16d84 <__alt_data_end+0xfffd8584>
   17398:	8c403fcc 	andi	r17,r17,255
   1739c:	017fffc4 	movi	r5,-1
   173a0:	8c40201c 	xori	r17,r17,128
   173a4:	d9402a15 	stw	r5,168(sp)
   173a8:	8c7fe004 	addi	r17,r17,-128
   173ac:	0037d706 	br	1530c <__alt_data_end+0xfffd6b0c>
   173b0:	d8c02a17 	ldw	r3,168(sp)
   173b4:	18c00084 	addi	r3,r3,2
   173b8:	d8c02b15 	stw	r3,172(sp)
   173bc:	1805883a 	mov	r2,r3
   173c0:	183d970e 	bge	r3,zero,16a20 <__alt_data_end+0xfffd8220>
   173c4:	003fd706 	br	17324 <__alt_data_end+0xfffd8b24>
   173c8:	0005883a 	mov	r2,zero
   173cc:	003f8f06 	br	1720c <__alt_data_end+0xfffd8a0c>
   173d0:	9080004c 	andi	r2,r18,1
   173d4:	103f821e 	bne	r2,zero,171e0 <__alt_data_end+0xfffd89e0>
   173d8:	d8802117 	ldw	r2,132(sp)
   173dc:	1405c83a 	sub	r2,r2,r16
   173e0:	d8803315 	stw	r2,204(sp)
   173e4:	b47ef426 	beq	r22,r17,16fb8 <__alt_data_end+0xfffd87b8>
   173e8:	dd802617 	ldw	r22,152(sp)
   173ec:	003f1206 	br	17038 <__alt_data_end+0xfffd8838>
   173f0:	d8c02b03 	ldbu	r3,172(sp)
   173f4:	d8c02785 	stb	r3,158(sp)
   173f8:	0038df06 	br	15778 <__alt_data_end+0xfffd6f78>
   173fc:	d8c02b03 	ldbu	r3,172(sp)
   17400:	d8c02785 	stb	r3,158(sp)
   17404:	0038aa06 	br	156b0 <__alt_data_end+0xfffd6eb0>
   17408:	d8c02b03 	ldbu	r3,172(sp)
   1740c:	d8c02785 	stb	r3,158(sp)
   17410:	003a4306 	br	15d20 <__alt_data_end+0xfffd7520>
   17414:	d8c02b03 	ldbu	r3,172(sp)
   17418:	d8c02785 	stb	r3,158(sp)
   1741c:	003af506 	br	15ff4 <__alt_data_end+0xfffd77f4>
   17420:	0005883a 	mov	r2,zero
   17424:	003d7b06 	br	16a14 <__alt_data_end+0xfffd8214>
   17428:	d8802344 	addi	r2,sp,141
   1742c:	003f1006 	br	17070 <__alt_data_end+0xfffd8870>
   17430:	d8c02b03 	ldbu	r3,172(sp)
   17434:	d8c02785 	stb	r3,158(sp)
   17438:	0038fd06 	br	15830 <__alt_data_end+0xfffd7030>
   1743c:	d8c02b03 	ldbu	r3,172(sp)
   17440:	d8c02785 	stb	r3,158(sp)
   17444:	003a9706 	br	15ea4 <__alt_data_end+0xfffd76a4>
   17448:	d8c02b03 	ldbu	r3,172(sp)
   1744c:	d8c02785 	stb	r3,158(sp)
   17450:	003a1806 	br	15cb4 <__alt_data_end+0xfffd74b4>
   17454:	d8c02b03 	ldbu	r3,172(sp)
   17458:	d8c02785 	stb	r3,158(sp)
   1745c:	003abe06 	br	15f58 <__alt_data_end+0xfffd7758>

00017460 <__vfprintf_internal>:
   17460:	008000f4 	movhi	r2,3
   17464:	10a8a204 	addi	r2,r2,-23928
   17468:	300f883a 	mov	r7,r6
   1746c:	280d883a 	mov	r6,r5
   17470:	200b883a 	mov	r5,r4
   17474:	11000017 	ldw	r4,0(r2)
   17478:	00151841 	jmpi	15184 <___vfprintf_internal_r>

0001747c <__sbprintf>:
   1747c:	2880030b 	ldhu	r2,12(r5)
   17480:	2ac01917 	ldw	r11,100(r5)
   17484:	2a80038b 	ldhu	r10,14(r5)
   17488:	2a400717 	ldw	r9,28(r5)
   1748c:	2a000917 	ldw	r8,36(r5)
   17490:	defee204 	addi	sp,sp,-1144
   17494:	00c10004 	movi	r3,1024
   17498:	dc011a15 	stw	r16,1128(sp)
   1749c:	10bfff4c 	andi	r2,r2,65533
   174a0:	2821883a 	mov	r16,r5
   174a4:	d8cb883a 	add	r5,sp,r3
   174a8:	dc811c15 	stw	r18,1136(sp)
   174ac:	dc411b15 	stw	r17,1132(sp)
   174b0:	dfc11d15 	stw	ra,1140(sp)
   174b4:	2025883a 	mov	r18,r4
   174b8:	d881030d 	sth	r2,1036(sp)
   174bc:	dac11915 	stw	r11,1124(sp)
   174c0:	da81038d 	sth	r10,1038(sp)
   174c4:	da410715 	stw	r9,1052(sp)
   174c8:	da010915 	stw	r8,1060(sp)
   174cc:	dec10015 	stw	sp,1024(sp)
   174d0:	dec10415 	stw	sp,1040(sp)
   174d4:	d8c10215 	stw	r3,1032(sp)
   174d8:	d8c10515 	stw	r3,1044(sp)
   174dc:	d8010615 	stw	zero,1048(sp)
   174e0:	00151840 	call	15184 <___vfprintf_internal_r>
   174e4:	1023883a 	mov	r17,r2
   174e8:	10000416 	blt	r2,zero,174fc <__sbprintf+0x80>
   174ec:	d9410004 	addi	r5,sp,1024
   174f0:	9009883a 	mov	r4,r18
   174f4:	00106a40 	call	106a4 <_fflush_r>
   174f8:	10000d1e 	bne	r2,zero,17530 <__sbprintf+0xb4>
   174fc:	d881030b 	ldhu	r2,1036(sp)
   17500:	1080100c 	andi	r2,r2,64
   17504:	10000326 	beq	r2,zero,17514 <__sbprintf+0x98>
   17508:	8080030b 	ldhu	r2,12(r16)
   1750c:	10801014 	ori	r2,r2,64
   17510:	8080030d 	sth	r2,12(r16)
   17514:	8805883a 	mov	r2,r17
   17518:	dfc11d17 	ldw	ra,1140(sp)
   1751c:	dc811c17 	ldw	r18,1136(sp)
   17520:	dc411b17 	ldw	r17,1132(sp)
   17524:	dc011a17 	ldw	r16,1128(sp)
   17528:	dec11e04 	addi	sp,sp,1144
   1752c:	f800283a 	ret
   17530:	047fffc4 	movi	r17,-1
   17534:	003ff106 	br	174fc <__alt_data_end+0xfffd8cfc>

00017538 <_write_r>:
   17538:	defffd04 	addi	sp,sp,-12
   1753c:	2805883a 	mov	r2,r5
   17540:	dc000015 	stw	r16,0(sp)
   17544:	040000f4 	movhi	r16,3
   17548:	dc400115 	stw	r17,4(sp)
   1754c:	300b883a 	mov	r5,r6
   17550:	842aed04 	addi	r16,r16,-21580
   17554:	2023883a 	mov	r17,r4
   17558:	380d883a 	mov	r6,r7
   1755c:	1009883a 	mov	r4,r2
   17560:	dfc00215 	stw	ra,8(sp)
   17564:	80000015 	stw	zero,0(r16)
   17568:	0028aa00 	call	28aa0 <write>
   1756c:	00ffffc4 	movi	r3,-1
   17570:	10c00526 	beq	r2,r3,17588 <_write_r+0x50>
   17574:	dfc00217 	ldw	ra,8(sp)
   17578:	dc400117 	ldw	r17,4(sp)
   1757c:	dc000017 	ldw	r16,0(sp)
   17580:	dec00304 	addi	sp,sp,12
   17584:	f800283a 	ret
   17588:	80c00017 	ldw	r3,0(r16)
   1758c:	183ff926 	beq	r3,zero,17574 <__alt_data_end+0xfffd8d74>
   17590:	88c00015 	stw	r3,0(r17)
   17594:	003ff706 	br	17574 <__alt_data_end+0xfffd8d74>

00017598 <__swsetup_r>:
   17598:	008000f4 	movhi	r2,3
   1759c:	defffd04 	addi	sp,sp,-12
   175a0:	10a8a204 	addi	r2,r2,-23928
   175a4:	dc400115 	stw	r17,4(sp)
   175a8:	2023883a 	mov	r17,r4
   175ac:	11000017 	ldw	r4,0(r2)
   175b0:	dc000015 	stw	r16,0(sp)
   175b4:	dfc00215 	stw	ra,8(sp)
   175b8:	2821883a 	mov	r16,r5
   175bc:	20000226 	beq	r4,zero,175c8 <__swsetup_r+0x30>
   175c0:	20800e17 	ldw	r2,56(r4)
   175c4:	10003126 	beq	r2,zero,1768c <__swsetup_r+0xf4>
   175c8:	8080030b 	ldhu	r2,12(r16)
   175cc:	10c0020c 	andi	r3,r2,8
   175d0:	1009883a 	mov	r4,r2
   175d4:	18000f26 	beq	r3,zero,17614 <__swsetup_r+0x7c>
   175d8:	80c00417 	ldw	r3,16(r16)
   175dc:	18001526 	beq	r3,zero,17634 <__swsetup_r+0x9c>
   175e0:	1100004c 	andi	r4,r2,1
   175e4:	20001c1e 	bne	r4,zero,17658 <__swsetup_r+0xc0>
   175e8:	1080008c 	andi	r2,r2,2
   175ec:	1000291e 	bne	r2,zero,17694 <__swsetup_r+0xfc>
   175f0:	80800517 	ldw	r2,20(r16)
   175f4:	80800215 	stw	r2,8(r16)
   175f8:	18001c26 	beq	r3,zero,1766c <__swsetup_r+0xd4>
   175fc:	0005883a 	mov	r2,zero
   17600:	dfc00217 	ldw	ra,8(sp)
   17604:	dc400117 	ldw	r17,4(sp)
   17608:	dc000017 	ldw	r16,0(sp)
   1760c:	dec00304 	addi	sp,sp,12
   17610:	f800283a 	ret
   17614:	2080040c 	andi	r2,r4,16
   17618:	10002e26 	beq	r2,zero,176d4 <__swsetup_r+0x13c>
   1761c:	2080010c 	andi	r2,r4,4
   17620:	10001e1e 	bne	r2,zero,1769c <__swsetup_r+0x104>
   17624:	80c00417 	ldw	r3,16(r16)
   17628:	20800214 	ori	r2,r4,8
   1762c:	8080030d 	sth	r2,12(r16)
   17630:	183feb1e 	bne	r3,zero,175e0 <__alt_data_end+0xfffd8de0>
   17634:	1100a00c 	andi	r4,r2,640
   17638:	01408004 	movi	r5,512
   1763c:	217fe826 	beq	r4,r5,175e0 <__alt_data_end+0xfffd8de0>
   17640:	800b883a 	mov	r5,r16
   17644:	8809883a 	mov	r4,r17
   17648:	0011c4c0 	call	11c4c <__smakebuf_r>
   1764c:	8080030b 	ldhu	r2,12(r16)
   17650:	80c00417 	ldw	r3,16(r16)
   17654:	003fe206 	br	175e0 <__alt_data_end+0xfffd8de0>
   17658:	80800517 	ldw	r2,20(r16)
   1765c:	80000215 	stw	zero,8(r16)
   17660:	0085c83a 	sub	r2,zero,r2
   17664:	80800615 	stw	r2,24(r16)
   17668:	183fe41e 	bne	r3,zero,175fc <__alt_data_end+0xfffd8dfc>
   1766c:	80c0030b 	ldhu	r3,12(r16)
   17670:	0005883a 	mov	r2,zero
   17674:	1900200c 	andi	r4,r3,128
   17678:	203fe126 	beq	r4,zero,17600 <__alt_data_end+0xfffd8e00>
   1767c:	18c01014 	ori	r3,r3,64
   17680:	80c0030d 	sth	r3,12(r16)
   17684:	00bfffc4 	movi	r2,-1
   17688:	003fdd06 	br	17600 <__alt_data_end+0xfffd8e00>
   1768c:	0010a900 	call	10a90 <__sinit>
   17690:	003fcd06 	br	175c8 <__alt_data_end+0xfffd8dc8>
   17694:	0005883a 	mov	r2,zero
   17698:	003fd606 	br	175f4 <__alt_data_end+0xfffd8df4>
   1769c:	81400c17 	ldw	r5,48(r16)
   176a0:	28000626 	beq	r5,zero,176bc <__swsetup_r+0x124>
   176a4:	80801004 	addi	r2,r16,64
   176a8:	28800326 	beq	r5,r2,176b8 <__swsetup_r+0x120>
   176ac:	8809883a 	mov	r4,r17
   176b0:	0010e100 	call	10e10 <_free_r>
   176b4:	8100030b 	ldhu	r4,12(r16)
   176b8:	80000c15 	stw	zero,48(r16)
   176bc:	80c00417 	ldw	r3,16(r16)
   176c0:	00bff6c4 	movi	r2,-37
   176c4:	1108703a 	and	r4,r2,r4
   176c8:	80000115 	stw	zero,4(r16)
   176cc:	80c00015 	stw	r3,0(r16)
   176d0:	003fd506 	br	17628 <__alt_data_end+0xfffd8e28>
   176d4:	00800244 	movi	r2,9
   176d8:	88800015 	stw	r2,0(r17)
   176dc:	20801014 	ori	r2,r4,64
   176e0:	8080030d 	sth	r2,12(r16)
   176e4:	00bfffc4 	movi	r2,-1
   176e8:	003fc506 	br	17600 <__alt_data_end+0xfffd8e00>

000176ec <_close_r>:
   176ec:	defffd04 	addi	sp,sp,-12
   176f0:	dc000015 	stw	r16,0(sp)
   176f4:	040000f4 	movhi	r16,3
   176f8:	dc400115 	stw	r17,4(sp)
   176fc:	842aed04 	addi	r16,r16,-21580
   17700:	2023883a 	mov	r17,r4
   17704:	2809883a 	mov	r4,r5
   17708:	dfc00215 	stw	ra,8(sp)
   1770c:	80000015 	stw	zero,0(r16)
   17710:	00284ec0 	call	284ec <close>
   17714:	00ffffc4 	movi	r3,-1
   17718:	10c00526 	beq	r2,r3,17730 <_close_r+0x44>
   1771c:	dfc00217 	ldw	ra,8(sp)
   17720:	dc400117 	ldw	r17,4(sp)
   17724:	dc000017 	ldw	r16,0(sp)
   17728:	dec00304 	addi	sp,sp,12
   1772c:	f800283a 	ret
   17730:	80c00017 	ldw	r3,0(r16)
   17734:	183ff926 	beq	r3,zero,1771c <__alt_data_end+0xfffd8f1c>
   17738:	88c00015 	stw	r3,0(r17)
   1773c:	003ff706 	br	1771c <__alt_data_end+0xfffd8f1c>

00017740 <quorem>:
   17740:	defff204 	addi	sp,sp,-56
   17744:	ddc00b15 	stw	r23,44(sp)
   17748:	20800417 	ldw	r2,16(r4)
   1774c:	2dc00417 	ldw	r23,16(r5)
   17750:	dfc00d15 	stw	ra,52(sp)
   17754:	df000c15 	stw	fp,48(sp)
   17758:	dd800a15 	stw	r22,40(sp)
   1775c:	dd400915 	stw	r21,36(sp)
   17760:	dd000815 	stw	r20,32(sp)
   17764:	dcc00715 	stw	r19,28(sp)
   17768:	dc800615 	stw	r18,24(sp)
   1776c:	dc400515 	stw	r17,20(sp)
   17770:	dc000415 	stw	r16,16(sp)
   17774:	15c07a16 	blt	r2,r23,17960 <quorem+0x220>
   17778:	bdffffc4 	addi	r23,r23,-1
   1777c:	bde9883a 	add	r20,r23,r23
   17780:	28c00504 	addi	r3,r5,20
   17784:	a529883a 	add	r20,r20,r20
   17788:	1d39883a 	add	fp,r3,r20
   1778c:	24c00504 	addi	r19,r4,20
   17790:	d9400215 	stw	r5,8(sp)
   17794:	9d29883a 	add	r20,r19,r20
   17798:	e1400017 	ldw	r5,0(fp)
   1779c:	d9000015 	stw	r4,0(sp)
   177a0:	a1000017 	ldw	r4,0(r20)
   177a4:	29400044 	addi	r5,r5,1
   177a8:	d8c00115 	stw	r3,4(sp)
   177ac:	dd000315 	stw	r20,12(sp)
   177b0:	00257c00 	call	257c0 <__udivsi3>
   177b4:	1025883a 	mov	r18,r2
   177b8:	10003026 	beq	r2,zero,1787c <quorem+0x13c>
   177bc:	dc400117 	ldw	r17,4(sp)
   177c0:	9829883a 	mov	r20,r19
   177c4:	002d883a 	mov	r22,zero
   177c8:	0021883a 	mov	r16,zero
   177cc:	8d400017 	ldw	r21,0(r17)
   177d0:	900b883a 	mov	r5,r18
   177d4:	8c400104 	addi	r17,r17,4
   177d8:	a93fffcc 	andi	r4,r21,65535
   177dc:	002587c0 	call	2587c <__mulsi3>
   177e0:	a808d43a 	srli	r4,r21,16
   177e4:	900b883a 	mov	r5,r18
   177e8:	15ad883a 	add	r22,r2,r22
   177ec:	002587c0 	call	2587c <__mulsi3>
   177f0:	a1000017 	ldw	r4,0(r20)
   177f4:	b00cd43a 	srli	r6,r22,16
   177f8:	b0ffffcc 	andi	r3,r22,65535
   177fc:	217fffcc 	andi	r5,r4,65535
   17800:	2c21883a 	add	r16,r5,r16
   17804:	80c7c83a 	sub	r3,r16,r3
   17808:	2008d43a 	srli	r4,r4,16
   1780c:	1185883a 	add	r2,r2,r6
   17810:	1821d43a 	srai	r16,r3,16
   17814:	117fffcc 	andi	r5,r2,65535
   17818:	2149c83a 	sub	r4,r4,r5
   1781c:	2421883a 	add	r16,r4,r16
   17820:	8008943a 	slli	r4,r16,16
   17824:	18ffffcc 	andi	r3,r3,65535
   17828:	102cd43a 	srli	r22,r2,16
   1782c:	20c8b03a 	or	r4,r4,r3
   17830:	a1000015 	stw	r4,0(r20)
   17834:	8021d43a 	srai	r16,r16,16
   17838:	a5000104 	addi	r20,r20,4
   1783c:	e47fe32e 	bgeu	fp,r17,177cc <__alt_data_end+0xfffd8fcc>
   17840:	d8c00317 	ldw	r3,12(sp)
   17844:	18800017 	ldw	r2,0(r3)
   17848:	10000c1e 	bne	r2,zero,1787c <quorem+0x13c>
   1784c:	18bfff04 	addi	r2,r3,-4
   17850:	9880082e 	bgeu	r19,r2,17874 <quorem+0x134>
   17854:	18ffff17 	ldw	r3,-4(r3)
   17858:	18000326 	beq	r3,zero,17868 <quorem+0x128>
   1785c:	00000506 	br	17874 <quorem+0x134>
   17860:	10c00017 	ldw	r3,0(r2)
   17864:	1800031e 	bne	r3,zero,17874 <quorem+0x134>
   17868:	10bfff04 	addi	r2,r2,-4
   1786c:	bdffffc4 	addi	r23,r23,-1
   17870:	98bffb36 	bltu	r19,r2,17860 <__alt_data_end+0xfffd9060>
   17874:	d8c00017 	ldw	r3,0(sp)
   17878:	1dc00415 	stw	r23,16(r3)
   1787c:	d9400217 	ldw	r5,8(sp)
   17880:	d9000017 	ldw	r4,0(sp)
   17884:	0019e040 	call	19e04 <__mcmp>
   17888:	10002816 	blt	r2,zero,1792c <quorem+0x1ec>
   1788c:	dc400117 	ldw	r17,4(sp)
   17890:	94800044 	addi	r18,r18,1
   17894:	980d883a 	mov	r6,r19
   17898:	0007883a 	mov	r3,zero
   1789c:	31000017 	ldw	r4,0(r6)
   178a0:	89400017 	ldw	r5,0(r17)
   178a4:	31800104 	addi	r6,r6,4
   178a8:	20bfffcc 	andi	r2,r4,65535
   178ac:	10c7883a 	add	r3,r2,r3
   178b0:	28bfffcc 	andi	r2,r5,65535
   178b4:	1885c83a 	sub	r2,r3,r2
   178b8:	280ad43a 	srli	r5,r5,16
   178bc:	2008d43a 	srli	r4,r4,16
   178c0:	1007d43a 	srai	r3,r2,16
   178c4:	10bfffcc 	andi	r2,r2,65535
   178c8:	2149c83a 	sub	r4,r4,r5
   178cc:	20c9883a 	add	r4,r4,r3
   178d0:	200a943a 	slli	r5,r4,16
   178d4:	8c400104 	addi	r17,r17,4
   178d8:	2007d43a 	srai	r3,r4,16
   178dc:	2884b03a 	or	r2,r5,r2
   178e0:	30bfff15 	stw	r2,-4(r6)
   178e4:	e47fed2e 	bgeu	fp,r17,1789c <__alt_data_end+0xfffd909c>
   178e8:	bdc5883a 	add	r2,r23,r23
   178ec:	1085883a 	add	r2,r2,r2
   178f0:	9887883a 	add	r3,r19,r2
   178f4:	18800017 	ldw	r2,0(r3)
   178f8:	10000c1e 	bne	r2,zero,1792c <quorem+0x1ec>
   178fc:	18bfff04 	addi	r2,r3,-4
   17900:	9880082e 	bgeu	r19,r2,17924 <quorem+0x1e4>
   17904:	18ffff17 	ldw	r3,-4(r3)
   17908:	18000326 	beq	r3,zero,17918 <quorem+0x1d8>
   1790c:	00000506 	br	17924 <quorem+0x1e4>
   17910:	10c00017 	ldw	r3,0(r2)
   17914:	1800031e 	bne	r3,zero,17924 <quorem+0x1e4>
   17918:	10bfff04 	addi	r2,r2,-4
   1791c:	bdffffc4 	addi	r23,r23,-1
   17920:	98bffb36 	bltu	r19,r2,17910 <__alt_data_end+0xfffd9110>
   17924:	d8c00017 	ldw	r3,0(sp)
   17928:	1dc00415 	stw	r23,16(r3)
   1792c:	9005883a 	mov	r2,r18
   17930:	dfc00d17 	ldw	ra,52(sp)
   17934:	df000c17 	ldw	fp,48(sp)
   17938:	ddc00b17 	ldw	r23,44(sp)
   1793c:	dd800a17 	ldw	r22,40(sp)
   17940:	dd400917 	ldw	r21,36(sp)
   17944:	dd000817 	ldw	r20,32(sp)
   17948:	dcc00717 	ldw	r19,28(sp)
   1794c:	dc800617 	ldw	r18,24(sp)
   17950:	dc400517 	ldw	r17,20(sp)
   17954:	dc000417 	ldw	r16,16(sp)
   17958:	dec00e04 	addi	sp,sp,56
   1795c:	f800283a 	ret
   17960:	0005883a 	mov	r2,zero
   17964:	003ff206 	br	17930 <__alt_data_end+0xfffd9130>

00017968 <_dtoa_r>:
   17968:	20801017 	ldw	r2,64(r4)
   1796c:	deffde04 	addi	sp,sp,-136
   17970:	df002015 	stw	fp,128(sp)
   17974:	dcc01b15 	stw	r19,108(sp)
   17978:	dc801a15 	stw	r18,104(sp)
   1797c:	dc401915 	stw	r17,100(sp)
   17980:	dc001815 	stw	r16,96(sp)
   17984:	dfc02115 	stw	ra,132(sp)
   17988:	ddc01f15 	stw	r23,124(sp)
   1798c:	dd801e15 	stw	r22,120(sp)
   17990:	dd401d15 	stw	r21,116(sp)
   17994:	dd001c15 	stw	r20,112(sp)
   17998:	d9c00315 	stw	r7,12(sp)
   1799c:	2039883a 	mov	fp,r4
   179a0:	3023883a 	mov	r17,r6
   179a4:	2825883a 	mov	r18,r5
   179a8:	dc002417 	ldw	r16,144(sp)
   179ac:	3027883a 	mov	r19,r6
   179b0:	10000826 	beq	r2,zero,179d4 <_dtoa_r+0x6c>
   179b4:	21801117 	ldw	r6,68(r4)
   179b8:	00c00044 	movi	r3,1
   179bc:	100b883a 	mov	r5,r2
   179c0:	1986983a 	sll	r3,r3,r6
   179c4:	11800115 	stw	r6,4(r2)
   179c8:	10c00215 	stw	r3,8(r2)
   179cc:	00195280 	call	19528 <_Bfree>
   179d0:	e0001015 	stw	zero,64(fp)
   179d4:	88002e16 	blt	r17,zero,17a90 <_dtoa_r+0x128>
   179d8:	80000015 	stw	zero,0(r16)
   179dc:	889ffc2c 	andhi	r2,r17,32752
   179e0:	00dffc34 	movhi	r3,32752
   179e4:	10c01c26 	beq	r2,r3,17a58 <_dtoa_r+0xf0>
   179e8:	000d883a 	mov	r6,zero
   179ec:	000f883a 	mov	r7,zero
   179f0:	9009883a 	mov	r4,r18
   179f4:	980b883a 	mov	r5,r19
   179f8:	0026d1c0 	call	26d1c <__eqdf2>
   179fc:	10002b1e 	bne	r2,zero,17aac <_dtoa_r+0x144>
   17a00:	d9c02317 	ldw	r7,140(sp)
   17a04:	00800044 	movi	r2,1
   17a08:	38800015 	stw	r2,0(r7)
   17a0c:	d8802517 	ldw	r2,148(sp)
   17a10:	10019e26 	beq	r2,zero,1808c <_dtoa_r+0x724>
   17a14:	d8c02517 	ldw	r3,148(sp)
   17a18:	008000f4 	movhi	r2,3
   17a1c:	10a4c344 	addi	r2,r2,-27891
   17a20:	18800015 	stw	r2,0(r3)
   17a24:	10bfffc4 	addi	r2,r2,-1
   17a28:	dfc02117 	ldw	ra,132(sp)
   17a2c:	df002017 	ldw	fp,128(sp)
   17a30:	ddc01f17 	ldw	r23,124(sp)
   17a34:	dd801e17 	ldw	r22,120(sp)
   17a38:	dd401d17 	ldw	r21,116(sp)
   17a3c:	dd001c17 	ldw	r20,112(sp)
   17a40:	dcc01b17 	ldw	r19,108(sp)
   17a44:	dc801a17 	ldw	r18,104(sp)
   17a48:	dc401917 	ldw	r17,100(sp)
   17a4c:	dc001817 	ldw	r16,96(sp)
   17a50:	dec02204 	addi	sp,sp,136
   17a54:	f800283a 	ret
   17a58:	d8c02317 	ldw	r3,140(sp)
   17a5c:	0089c3c4 	movi	r2,9999
   17a60:	18800015 	stw	r2,0(r3)
   17a64:	90017726 	beq	r18,zero,18044 <_dtoa_r+0x6dc>
   17a68:	008000f4 	movhi	r2,3
   17a6c:	10a56f04 	addi	r2,r2,-27204
   17a70:	d9002517 	ldw	r4,148(sp)
   17a74:	203fec26 	beq	r4,zero,17a28 <__alt_data_end+0xfffd9228>
   17a78:	10c000c7 	ldb	r3,3(r2)
   17a7c:	1801781e 	bne	r3,zero,18060 <_dtoa_r+0x6f8>
   17a80:	10c000c4 	addi	r3,r2,3
   17a84:	d9802517 	ldw	r6,148(sp)
   17a88:	30c00015 	stw	r3,0(r6)
   17a8c:	003fe606 	br	17a28 <__alt_data_end+0xfffd9228>
   17a90:	04e00034 	movhi	r19,32768
   17a94:	9cffffc4 	addi	r19,r19,-1
   17a98:	00800044 	movi	r2,1
   17a9c:	8ce6703a 	and	r19,r17,r19
   17aa0:	80800015 	stw	r2,0(r16)
   17aa4:	9823883a 	mov	r17,r19
   17aa8:	003fcc06 	br	179dc <__alt_data_end+0xfffd91dc>
   17aac:	d8800204 	addi	r2,sp,8
   17ab0:	d8800015 	stw	r2,0(sp)
   17ab4:	d9c00104 	addi	r7,sp,4
   17ab8:	900b883a 	mov	r5,r18
   17abc:	980d883a 	mov	r6,r19
   17ac0:	e009883a 	mov	r4,fp
   17ac4:	8820d53a 	srli	r16,r17,20
   17ac8:	001a1d00 	call	1a1d0 <__d2b>
   17acc:	d8800915 	stw	r2,36(sp)
   17ad0:	8001651e 	bne	r16,zero,18068 <_dtoa_r+0x700>
   17ad4:	dd800217 	ldw	r22,8(sp)
   17ad8:	dc000117 	ldw	r16,4(sp)
   17adc:	00800804 	movi	r2,32
   17ae0:	b421883a 	add	r16,r22,r16
   17ae4:	80c10c84 	addi	r3,r16,1074
   17ae8:	10c2d10e 	bge	r2,r3,18630 <_dtoa_r+0xcc8>
   17aec:	00801004 	movi	r2,64
   17af0:	81010484 	addi	r4,r16,1042
   17af4:	10c7c83a 	sub	r3,r2,r3
   17af8:	9108d83a 	srl	r4,r18,r4
   17afc:	88e2983a 	sll	r17,r17,r3
   17b00:	2448b03a 	or	r4,r4,r17
   17b04:	00282380 	call	28238 <__floatunsidf>
   17b08:	017f8434 	movhi	r5,65040
   17b0c:	01800044 	movi	r6,1
   17b10:	1009883a 	mov	r4,r2
   17b14:	194b883a 	add	r5,r3,r5
   17b18:	843fffc4 	addi	r16,r16,-1
   17b1c:	d9801115 	stw	r6,68(sp)
   17b20:	000d883a 	mov	r6,zero
   17b24:	01cffe34 	movhi	r7,16376
   17b28:	00277e00 	call	277e0 <__subdf3>
   17b2c:	0198dbf4 	movhi	r6,25455
   17b30:	01cff4f4 	movhi	r7,16339
   17b34:	3190d844 	addi	r6,r6,17249
   17b38:	39e1e9c4 	addi	r7,r7,-30809
   17b3c:	1009883a 	mov	r4,r2
   17b40:	180b883a 	mov	r5,r3
   17b44:	0026f740 	call	26f74 <__muldf3>
   17b48:	01a2d874 	movhi	r6,35681
   17b4c:	01cff1f4 	movhi	r7,16327
   17b50:	31b22cc4 	addi	r6,r6,-14157
   17b54:	39e28a04 	addi	r7,r7,-30168
   17b58:	180b883a 	mov	r5,r3
   17b5c:	1009883a 	mov	r4,r2
   17b60:	0025aa00 	call	25aa0 <__adddf3>
   17b64:	8009883a 	mov	r4,r16
   17b68:	1029883a 	mov	r20,r2
   17b6c:	1823883a 	mov	r17,r3
   17b70:	002815c0 	call	2815c <__floatsidf>
   17b74:	019427f4 	movhi	r6,20639
   17b78:	01cff4f4 	movhi	r7,16339
   17b7c:	319e7ec4 	addi	r6,r6,31227
   17b80:	39d104c4 	addi	r7,r7,17427
   17b84:	1009883a 	mov	r4,r2
   17b88:	180b883a 	mov	r5,r3
   17b8c:	0026f740 	call	26f74 <__muldf3>
   17b90:	100d883a 	mov	r6,r2
   17b94:	180f883a 	mov	r7,r3
   17b98:	a009883a 	mov	r4,r20
   17b9c:	880b883a 	mov	r5,r17
   17ba0:	0025aa00 	call	25aa0 <__adddf3>
   17ba4:	1009883a 	mov	r4,r2
   17ba8:	180b883a 	mov	r5,r3
   17bac:	1029883a 	mov	r20,r2
   17bb0:	1823883a 	mov	r17,r3
   17bb4:	00280dc0 	call	280dc <__fixdfsi>
   17bb8:	000d883a 	mov	r6,zero
   17bbc:	000f883a 	mov	r7,zero
   17bc0:	a009883a 	mov	r4,r20
   17bc4:	880b883a 	mov	r5,r17
   17bc8:	d8800515 	stw	r2,20(sp)
   17bcc:	0026e800 	call	26e80 <__ledf2>
   17bd0:	10028716 	blt	r2,zero,185f0 <_dtoa_r+0xc88>
   17bd4:	d8c00517 	ldw	r3,20(sp)
   17bd8:	00800584 	movi	r2,22
   17bdc:	10c27536 	bltu	r2,r3,185b4 <_dtoa_r+0xc4c>
   17be0:	180490fa 	slli	r2,r3,3
   17be4:	00c000f4 	movhi	r3,3
   17be8:	18e58a04 	addi	r3,r3,-27096
   17bec:	1885883a 	add	r2,r3,r2
   17bf0:	11000017 	ldw	r4,0(r2)
   17bf4:	11400117 	ldw	r5,4(r2)
   17bf8:	900d883a 	mov	r6,r18
   17bfc:	980f883a 	mov	r7,r19
   17c00:	0026da40 	call	26da4 <__gedf2>
   17c04:	00828d0e 	bge	zero,r2,1863c <_dtoa_r+0xcd4>
   17c08:	d9000517 	ldw	r4,20(sp)
   17c0c:	d8000e15 	stw	zero,56(sp)
   17c10:	213fffc4 	addi	r4,r4,-1
   17c14:	d9000515 	stw	r4,20(sp)
   17c18:	b42dc83a 	sub	r22,r22,r16
   17c1c:	b5bfffc4 	addi	r22,r22,-1
   17c20:	b0026f16 	blt	r22,zero,185e0 <_dtoa_r+0xc78>
   17c24:	d8000815 	stw	zero,32(sp)
   17c28:	d9c00517 	ldw	r7,20(sp)
   17c2c:	38026416 	blt	r7,zero,185c0 <_dtoa_r+0xc58>
   17c30:	b1ed883a 	add	r22,r22,r7
   17c34:	d9c00d15 	stw	r7,52(sp)
   17c38:	d8000a15 	stw	zero,40(sp)
   17c3c:	d9800317 	ldw	r6,12(sp)
   17c40:	00800244 	movi	r2,9
   17c44:	11811436 	bltu	r2,r6,18098 <_dtoa_r+0x730>
   17c48:	00800144 	movi	r2,5
   17c4c:	1184e10e 	bge	r2,r6,18fd4 <_dtoa_r+0x166c>
   17c50:	31bfff04 	addi	r6,r6,-4
   17c54:	d9800315 	stw	r6,12(sp)
   17c58:	0023883a 	mov	r17,zero
   17c5c:	d9800317 	ldw	r6,12(sp)
   17c60:	008000c4 	movi	r2,3
   17c64:	30836726 	beq	r6,r2,18a04 <_dtoa_r+0x109c>
   17c68:	1183410e 	bge	r2,r6,18970 <_dtoa_r+0x1008>
   17c6c:	d9c00317 	ldw	r7,12(sp)
   17c70:	00800104 	movi	r2,4
   17c74:	38827c26 	beq	r7,r2,18668 <_dtoa_r+0xd00>
   17c78:	00800144 	movi	r2,5
   17c7c:	3884c41e 	bne	r7,r2,18f90 <_dtoa_r+0x1628>
   17c80:	00800044 	movi	r2,1
   17c84:	d8800b15 	stw	r2,44(sp)
   17c88:	d8c00517 	ldw	r3,20(sp)
   17c8c:	d9002217 	ldw	r4,136(sp)
   17c90:	1907883a 	add	r3,r3,r4
   17c94:	19800044 	addi	r6,r3,1
   17c98:	d8c00c15 	stw	r3,48(sp)
   17c9c:	d9800615 	stw	r6,24(sp)
   17ca0:	0183a40e 	bge	zero,r6,18b34 <_dtoa_r+0x11cc>
   17ca4:	d9800617 	ldw	r6,24(sp)
   17ca8:	3021883a 	mov	r16,r6
   17cac:	e0001115 	stw	zero,68(fp)
   17cb0:	008005c4 	movi	r2,23
   17cb4:	1184c92e 	bgeu	r2,r6,18fdc <_dtoa_r+0x1674>
   17cb8:	00c00044 	movi	r3,1
   17cbc:	00800104 	movi	r2,4
   17cc0:	1085883a 	add	r2,r2,r2
   17cc4:	11000504 	addi	r4,r2,20
   17cc8:	180b883a 	mov	r5,r3
   17ccc:	18c00044 	addi	r3,r3,1
   17cd0:	313ffb2e 	bgeu	r6,r4,17cc0 <__alt_data_end+0xfffd94c0>
   17cd4:	e1401115 	stw	r5,68(fp)
   17cd8:	e009883a 	mov	r4,fp
   17cdc:	00194800 	call	19480 <_Balloc>
   17ce0:	d8800715 	stw	r2,28(sp)
   17ce4:	e0801015 	stw	r2,64(fp)
   17ce8:	00800384 	movi	r2,14
   17cec:	1400f736 	bltu	r2,r16,180cc <_dtoa_r+0x764>
   17cf0:	8800f626 	beq	r17,zero,180cc <_dtoa_r+0x764>
   17cf4:	d9c00517 	ldw	r7,20(sp)
   17cf8:	01c39a0e 	bge	zero,r7,18b64 <_dtoa_r+0x11fc>
   17cfc:	388003cc 	andi	r2,r7,15
   17d00:	100490fa 	slli	r2,r2,3
   17d04:	382bd13a 	srai	r21,r7,4
   17d08:	00c000f4 	movhi	r3,3
   17d0c:	18e58a04 	addi	r3,r3,-27096
   17d10:	1885883a 	add	r2,r3,r2
   17d14:	a8c0040c 	andi	r3,r21,16
   17d18:	12400017 	ldw	r9,0(r2)
   17d1c:	12000117 	ldw	r8,4(r2)
   17d20:	18037926 	beq	r3,zero,18b08 <_dtoa_r+0x11a0>
   17d24:	008000f4 	movhi	r2,3
   17d28:	10a58004 	addi	r2,r2,-27136
   17d2c:	11800817 	ldw	r6,32(r2)
   17d30:	11c00917 	ldw	r7,36(r2)
   17d34:	9009883a 	mov	r4,r18
   17d38:	980b883a 	mov	r5,r19
   17d3c:	da001715 	stw	r8,92(sp)
   17d40:	da401615 	stw	r9,88(sp)
   17d44:	002634c0 	call	2634c <__divdf3>
   17d48:	da001717 	ldw	r8,92(sp)
   17d4c:	da401617 	ldw	r9,88(sp)
   17d50:	ad4003cc 	andi	r21,r21,15
   17d54:	040000c4 	movi	r16,3
   17d58:	1023883a 	mov	r17,r2
   17d5c:	1829883a 	mov	r20,r3
   17d60:	a8001126 	beq	r21,zero,17da8 <_dtoa_r+0x440>
   17d64:	05c000f4 	movhi	r23,3
   17d68:	bde58004 	addi	r23,r23,-27136
   17d6c:	4805883a 	mov	r2,r9
   17d70:	4007883a 	mov	r3,r8
   17d74:	a980004c 	andi	r6,r21,1
   17d78:	1009883a 	mov	r4,r2
   17d7c:	a82bd07a 	srai	r21,r21,1
   17d80:	180b883a 	mov	r5,r3
   17d84:	30000426 	beq	r6,zero,17d98 <_dtoa_r+0x430>
   17d88:	b9800017 	ldw	r6,0(r23)
   17d8c:	b9c00117 	ldw	r7,4(r23)
   17d90:	84000044 	addi	r16,r16,1
   17d94:	0026f740 	call	26f74 <__muldf3>
   17d98:	bdc00204 	addi	r23,r23,8
   17d9c:	a83ff51e 	bne	r21,zero,17d74 <__alt_data_end+0xfffd9574>
   17da0:	1013883a 	mov	r9,r2
   17da4:	1811883a 	mov	r8,r3
   17da8:	480d883a 	mov	r6,r9
   17dac:	400f883a 	mov	r7,r8
   17db0:	8809883a 	mov	r4,r17
   17db4:	a00b883a 	mov	r5,r20
   17db8:	002634c0 	call	2634c <__divdf3>
   17dbc:	d8800f15 	stw	r2,60(sp)
   17dc0:	d8c01015 	stw	r3,64(sp)
   17dc4:	d8c00e17 	ldw	r3,56(sp)
   17dc8:	18000626 	beq	r3,zero,17de4 <_dtoa_r+0x47c>
   17dcc:	d9000f17 	ldw	r4,60(sp)
   17dd0:	d9401017 	ldw	r5,64(sp)
   17dd4:	000d883a 	mov	r6,zero
   17dd8:	01cffc34 	movhi	r7,16368
   17ddc:	0026e800 	call	26e80 <__ledf2>
   17de0:	10040b16 	blt	r2,zero,18e10 <_dtoa_r+0x14a8>
   17de4:	8009883a 	mov	r4,r16
   17de8:	002815c0 	call	2815c <__floatsidf>
   17dec:	d9800f17 	ldw	r6,60(sp)
   17df0:	d9c01017 	ldw	r7,64(sp)
   17df4:	1009883a 	mov	r4,r2
   17df8:	180b883a 	mov	r5,r3
   17dfc:	0026f740 	call	26f74 <__muldf3>
   17e00:	000d883a 	mov	r6,zero
   17e04:	01d00734 	movhi	r7,16412
   17e08:	1009883a 	mov	r4,r2
   17e0c:	180b883a 	mov	r5,r3
   17e10:	0025aa00 	call	25aa0 <__adddf3>
   17e14:	1021883a 	mov	r16,r2
   17e18:	d8800617 	ldw	r2,24(sp)
   17e1c:	047f3034 	movhi	r17,64704
   17e20:	1c63883a 	add	r17,r3,r17
   17e24:	10031826 	beq	r2,zero,18a88 <_dtoa_r+0x1120>
   17e28:	d8c00517 	ldw	r3,20(sp)
   17e2c:	db000617 	ldw	r12,24(sp)
   17e30:	d8c01315 	stw	r3,76(sp)
   17e34:	d9000b17 	ldw	r4,44(sp)
   17e38:	20038f26 	beq	r4,zero,18c78 <_dtoa_r+0x1310>
   17e3c:	60bfffc4 	addi	r2,r12,-1
   17e40:	100490fa 	slli	r2,r2,3
   17e44:	00c000f4 	movhi	r3,3
   17e48:	18e58a04 	addi	r3,r3,-27096
   17e4c:	1885883a 	add	r2,r3,r2
   17e50:	11800017 	ldw	r6,0(r2)
   17e54:	11c00117 	ldw	r7,4(r2)
   17e58:	d8800717 	ldw	r2,28(sp)
   17e5c:	0009883a 	mov	r4,zero
   17e60:	014ff834 	movhi	r5,16352
   17e64:	db001615 	stw	r12,88(sp)
   17e68:	15c00044 	addi	r23,r2,1
   17e6c:	002634c0 	call	2634c <__divdf3>
   17e70:	800d883a 	mov	r6,r16
   17e74:	880f883a 	mov	r7,r17
   17e78:	1009883a 	mov	r4,r2
   17e7c:	180b883a 	mov	r5,r3
   17e80:	00277e00 	call	277e0 <__subdf3>
   17e84:	d9401017 	ldw	r5,64(sp)
   17e88:	d9000f17 	ldw	r4,60(sp)
   17e8c:	102b883a 	mov	r21,r2
   17e90:	d8c01215 	stw	r3,72(sp)
   17e94:	00280dc0 	call	280dc <__fixdfsi>
   17e98:	1009883a 	mov	r4,r2
   17e9c:	1029883a 	mov	r20,r2
   17ea0:	002815c0 	call	2815c <__floatsidf>
   17ea4:	d9000f17 	ldw	r4,60(sp)
   17ea8:	d9401017 	ldw	r5,64(sp)
   17eac:	100d883a 	mov	r6,r2
   17eb0:	180f883a 	mov	r7,r3
   17eb4:	00277e00 	call	277e0 <__subdf3>
   17eb8:	1823883a 	mov	r17,r3
   17ebc:	d8c00717 	ldw	r3,28(sp)
   17ec0:	d9401217 	ldw	r5,72(sp)
   17ec4:	a2000c04 	addi	r8,r20,48
   17ec8:	1021883a 	mov	r16,r2
   17ecc:	1a000005 	stb	r8,0(r3)
   17ed0:	800d883a 	mov	r6,r16
   17ed4:	880f883a 	mov	r7,r17
   17ed8:	a809883a 	mov	r4,r21
   17edc:	4029883a 	mov	r20,r8
   17ee0:	0026da40 	call	26da4 <__gedf2>
   17ee4:	00841d16 	blt	zero,r2,18f5c <_dtoa_r+0x15f4>
   17ee8:	800d883a 	mov	r6,r16
   17eec:	880f883a 	mov	r7,r17
   17ef0:	0009883a 	mov	r4,zero
   17ef4:	014ffc34 	movhi	r5,16368
   17ef8:	00277e00 	call	277e0 <__subdf3>
   17efc:	d9401217 	ldw	r5,72(sp)
   17f00:	100d883a 	mov	r6,r2
   17f04:	180f883a 	mov	r7,r3
   17f08:	a809883a 	mov	r4,r21
   17f0c:	0026da40 	call	26da4 <__gedf2>
   17f10:	db001617 	ldw	r12,88(sp)
   17f14:	00840e16 	blt	zero,r2,18f50 <_dtoa_r+0x15e8>
   17f18:	00800044 	movi	r2,1
   17f1c:	13006b0e 	bge	r2,r12,180cc <_dtoa_r+0x764>
   17f20:	d9000717 	ldw	r4,28(sp)
   17f24:	dd800f15 	stw	r22,60(sp)
   17f28:	dcc01015 	stw	r19,64(sp)
   17f2c:	2319883a 	add	r12,r4,r12
   17f30:	dcc01217 	ldw	r19,72(sp)
   17f34:	602d883a 	mov	r22,r12
   17f38:	dc801215 	stw	r18,72(sp)
   17f3c:	b825883a 	mov	r18,r23
   17f40:	00000906 	br	17f68 <_dtoa_r+0x600>
   17f44:	00277e00 	call	277e0 <__subdf3>
   17f48:	a80d883a 	mov	r6,r21
   17f4c:	980f883a 	mov	r7,r19
   17f50:	1009883a 	mov	r4,r2
   17f54:	180b883a 	mov	r5,r3
   17f58:	0026e800 	call	26e80 <__ledf2>
   17f5c:	1003e816 	blt	r2,zero,18f00 <_dtoa_r+0x1598>
   17f60:	b825883a 	mov	r18,r23
   17f64:	bd83e926 	beq	r23,r22,18f0c <_dtoa_r+0x15a4>
   17f68:	a809883a 	mov	r4,r21
   17f6c:	980b883a 	mov	r5,r19
   17f70:	000d883a 	mov	r6,zero
   17f74:	01d00934 	movhi	r7,16420
   17f78:	0026f740 	call	26f74 <__muldf3>
   17f7c:	000d883a 	mov	r6,zero
   17f80:	01d00934 	movhi	r7,16420
   17f84:	8009883a 	mov	r4,r16
   17f88:	880b883a 	mov	r5,r17
   17f8c:	102b883a 	mov	r21,r2
   17f90:	1827883a 	mov	r19,r3
   17f94:	0026f740 	call	26f74 <__muldf3>
   17f98:	180b883a 	mov	r5,r3
   17f9c:	1009883a 	mov	r4,r2
   17fa0:	1821883a 	mov	r16,r3
   17fa4:	1023883a 	mov	r17,r2
   17fa8:	00280dc0 	call	280dc <__fixdfsi>
   17fac:	1009883a 	mov	r4,r2
   17fb0:	1029883a 	mov	r20,r2
   17fb4:	002815c0 	call	2815c <__floatsidf>
   17fb8:	8809883a 	mov	r4,r17
   17fbc:	800b883a 	mov	r5,r16
   17fc0:	100d883a 	mov	r6,r2
   17fc4:	180f883a 	mov	r7,r3
   17fc8:	00277e00 	call	277e0 <__subdf3>
   17fcc:	a5000c04 	addi	r20,r20,48
   17fd0:	a80d883a 	mov	r6,r21
   17fd4:	980f883a 	mov	r7,r19
   17fd8:	1009883a 	mov	r4,r2
   17fdc:	180b883a 	mov	r5,r3
   17fe0:	95000005 	stb	r20,0(r18)
   17fe4:	1021883a 	mov	r16,r2
   17fe8:	1823883a 	mov	r17,r3
   17fec:	0026e800 	call	26e80 <__ledf2>
   17ff0:	bdc00044 	addi	r23,r23,1
   17ff4:	800d883a 	mov	r6,r16
   17ff8:	880f883a 	mov	r7,r17
   17ffc:	0009883a 	mov	r4,zero
   18000:	014ffc34 	movhi	r5,16368
   18004:	103fcf0e 	bge	r2,zero,17f44 <__alt_data_end+0xfffd9744>
   18008:	d8c01317 	ldw	r3,76(sp)
   1800c:	d8c00515 	stw	r3,20(sp)
   18010:	d9400917 	ldw	r5,36(sp)
   18014:	e009883a 	mov	r4,fp
   18018:	00195280 	call	19528 <_Bfree>
   1801c:	d9000517 	ldw	r4,20(sp)
   18020:	d9802317 	ldw	r6,140(sp)
   18024:	d9c02517 	ldw	r7,148(sp)
   18028:	b8000005 	stb	zero,0(r23)
   1802c:	20800044 	addi	r2,r4,1
   18030:	30800015 	stw	r2,0(r6)
   18034:	3802aa26 	beq	r7,zero,18ae0 <_dtoa_r+0x1178>
   18038:	3dc00015 	stw	r23,0(r7)
   1803c:	d8800717 	ldw	r2,28(sp)
   18040:	003e7906 	br	17a28 <__alt_data_end+0xfffd9228>
   18044:	00800434 	movhi	r2,16
   18048:	10bfffc4 	addi	r2,r2,-1
   1804c:	88a2703a 	and	r17,r17,r2
   18050:	883e851e 	bne	r17,zero,17a68 <__alt_data_end+0xfffd9268>
   18054:	008000f4 	movhi	r2,3
   18058:	10a56c04 	addi	r2,r2,-27216
   1805c:	003e8406 	br	17a70 <__alt_data_end+0xfffd9270>
   18060:	10c00204 	addi	r3,r2,8
   18064:	003e8706 	br	17a84 <__alt_data_end+0xfffd9284>
   18068:	01400434 	movhi	r5,16
   1806c:	297fffc4 	addi	r5,r5,-1
   18070:	994a703a 	and	r5,r19,r5
   18074:	9009883a 	mov	r4,r18
   18078:	843f0044 	addi	r16,r16,-1023
   1807c:	294ffc34 	orhi	r5,r5,16368
   18080:	dd800217 	ldw	r22,8(sp)
   18084:	d8001115 	stw	zero,68(sp)
   18088:	003ea506 	br	17b20 <__alt_data_end+0xfffd9320>
   1808c:	008000f4 	movhi	r2,3
   18090:	10a4c304 	addi	r2,r2,-27892
   18094:	003e6406 	br	17a28 <__alt_data_end+0xfffd9228>
   18098:	e0001115 	stw	zero,68(fp)
   1809c:	000b883a 	mov	r5,zero
   180a0:	e009883a 	mov	r4,fp
   180a4:	00194800 	call	19480 <_Balloc>
   180a8:	01bfffc4 	movi	r6,-1
   180ac:	01c00044 	movi	r7,1
   180b0:	d8800715 	stw	r2,28(sp)
   180b4:	d9800c15 	stw	r6,48(sp)
   180b8:	e0801015 	stw	r2,64(fp)
   180bc:	d8000315 	stw	zero,12(sp)
   180c0:	d9c00b15 	stw	r7,44(sp)
   180c4:	d9800615 	stw	r6,24(sp)
   180c8:	d8002215 	stw	zero,136(sp)
   180cc:	d8800117 	ldw	r2,4(sp)
   180d0:	10008916 	blt	r2,zero,182f8 <_dtoa_r+0x990>
   180d4:	d9000517 	ldw	r4,20(sp)
   180d8:	00c00384 	movi	r3,14
   180dc:	19008616 	blt	r3,r4,182f8 <_dtoa_r+0x990>
   180e0:	200490fa 	slli	r2,r4,3
   180e4:	00c000f4 	movhi	r3,3
   180e8:	d9802217 	ldw	r6,136(sp)
   180ec:	18e58a04 	addi	r3,r3,-27096
   180f0:	1885883a 	add	r2,r3,r2
   180f4:	14000017 	ldw	r16,0(r2)
   180f8:	14400117 	ldw	r17,4(r2)
   180fc:	30016316 	blt	r6,zero,1868c <_dtoa_r+0xd24>
   18100:	800d883a 	mov	r6,r16
   18104:	880f883a 	mov	r7,r17
   18108:	9009883a 	mov	r4,r18
   1810c:	980b883a 	mov	r5,r19
   18110:	002634c0 	call	2634c <__divdf3>
   18114:	180b883a 	mov	r5,r3
   18118:	1009883a 	mov	r4,r2
   1811c:	00280dc0 	call	280dc <__fixdfsi>
   18120:	1009883a 	mov	r4,r2
   18124:	102b883a 	mov	r21,r2
   18128:	002815c0 	call	2815c <__floatsidf>
   1812c:	800d883a 	mov	r6,r16
   18130:	880f883a 	mov	r7,r17
   18134:	1009883a 	mov	r4,r2
   18138:	180b883a 	mov	r5,r3
   1813c:	0026f740 	call	26f74 <__muldf3>
   18140:	100d883a 	mov	r6,r2
   18144:	180f883a 	mov	r7,r3
   18148:	9009883a 	mov	r4,r18
   1814c:	980b883a 	mov	r5,r19
   18150:	00277e00 	call	277e0 <__subdf3>
   18154:	d9c00717 	ldw	r7,28(sp)
   18158:	1009883a 	mov	r4,r2
   1815c:	a8800c04 	addi	r2,r21,48
   18160:	38800005 	stb	r2,0(r7)
   18164:	3dc00044 	addi	r23,r7,1
   18168:	d9c00617 	ldw	r7,24(sp)
   1816c:	01800044 	movi	r6,1
   18170:	180b883a 	mov	r5,r3
   18174:	2005883a 	mov	r2,r4
   18178:	39803826 	beq	r7,r6,1825c <_dtoa_r+0x8f4>
   1817c:	000d883a 	mov	r6,zero
   18180:	01d00934 	movhi	r7,16420
   18184:	0026f740 	call	26f74 <__muldf3>
   18188:	000d883a 	mov	r6,zero
   1818c:	000f883a 	mov	r7,zero
   18190:	1009883a 	mov	r4,r2
   18194:	180b883a 	mov	r5,r3
   18198:	1025883a 	mov	r18,r2
   1819c:	1827883a 	mov	r19,r3
   181a0:	0026d1c0 	call	26d1c <__eqdf2>
   181a4:	103f9a26 	beq	r2,zero,18010 <__alt_data_end+0xfffd9810>
   181a8:	d9c00617 	ldw	r7,24(sp)
   181ac:	d8c00717 	ldw	r3,28(sp)
   181b0:	b829883a 	mov	r20,r23
   181b4:	38bfffc4 	addi	r2,r7,-1
   181b8:	18ad883a 	add	r22,r3,r2
   181bc:	00000a06 	br	181e8 <_dtoa_r+0x880>
   181c0:	0026f740 	call	26f74 <__muldf3>
   181c4:	000d883a 	mov	r6,zero
   181c8:	000f883a 	mov	r7,zero
   181cc:	1009883a 	mov	r4,r2
   181d0:	180b883a 	mov	r5,r3
   181d4:	1025883a 	mov	r18,r2
   181d8:	1827883a 	mov	r19,r3
   181dc:	b829883a 	mov	r20,r23
   181e0:	0026d1c0 	call	26d1c <__eqdf2>
   181e4:	103f8a26 	beq	r2,zero,18010 <__alt_data_end+0xfffd9810>
   181e8:	800d883a 	mov	r6,r16
   181ec:	880f883a 	mov	r7,r17
   181f0:	9009883a 	mov	r4,r18
   181f4:	980b883a 	mov	r5,r19
   181f8:	002634c0 	call	2634c <__divdf3>
   181fc:	180b883a 	mov	r5,r3
   18200:	1009883a 	mov	r4,r2
   18204:	00280dc0 	call	280dc <__fixdfsi>
   18208:	1009883a 	mov	r4,r2
   1820c:	102b883a 	mov	r21,r2
   18210:	002815c0 	call	2815c <__floatsidf>
   18214:	800d883a 	mov	r6,r16
   18218:	880f883a 	mov	r7,r17
   1821c:	1009883a 	mov	r4,r2
   18220:	180b883a 	mov	r5,r3
   18224:	0026f740 	call	26f74 <__muldf3>
   18228:	100d883a 	mov	r6,r2
   1822c:	180f883a 	mov	r7,r3
   18230:	9009883a 	mov	r4,r18
   18234:	980b883a 	mov	r5,r19
   18238:	00277e00 	call	277e0 <__subdf3>
   1823c:	aa000c04 	addi	r8,r21,48
   18240:	a2000005 	stb	r8,0(r20)
   18244:	000d883a 	mov	r6,zero
   18248:	01d00934 	movhi	r7,16420
   1824c:	1009883a 	mov	r4,r2
   18250:	180b883a 	mov	r5,r3
   18254:	a5c00044 	addi	r23,r20,1
   18258:	b53fd91e 	bne	r22,r20,181c0 <__alt_data_end+0xfffd99c0>
   1825c:	100d883a 	mov	r6,r2
   18260:	180f883a 	mov	r7,r3
   18264:	1009883a 	mov	r4,r2
   18268:	180b883a 	mov	r5,r3
   1826c:	0025aa00 	call	25aa0 <__adddf3>
   18270:	100d883a 	mov	r6,r2
   18274:	180f883a 	mov	r7,r3
   18278:	8009883a 	mov	r4,r16
   1827c:	880b883a 	mov	r5,r17
   18280:	1027883a 	mov	r19,r2
   18284:	1825883a 	mov	r18,r3
   18288:	0026e800 	call	26e80 <__ledf2>
   1828c:	10000816 	blt	r2,zero,182b0 <_dtoa_r+0x948>
   18290:	980d883a 	mov	r6,r19
   18294:	900f883a 	mov	r7,r18
   18298:	8009883a 	mov	r4,r16
   1829c:	880b883a 	mov	r5,r17
   182a0:	0026d1c0 	call	26d1c <__eqdf2>
   182a4:	103f5a1e 	bne	r2,zero,18010 <__alt_data_end+0xfffd9810>
   182a8:	ad40004c 	andi	r21,r21,1
   182ac:	a83f5826 	beq	r21,zero,18010 <__alt_data_end+0xfffd9810>
   182b0:	bd3fffc3 	ldbu	r20,-1(r23)
   182b4:	b8bfffc4 	addi	r2,r23,-1
   182b8:	1007883a 	mov	r3,r2
   182bc:	01400e44 	movi	r5,57
   182c0:	d9800717 	ldw	r6,28(sp)
   182c4:	00000506 	br	182dc <_dtoa_r+0x974>
   182c8:	18ffffc4 	addi	r3,r3,-1
   182cc:	11824726 	beq	r2,r6,18bec <_dtoa_r+0x1284>
   182d0:	1d000003 	ldbu	r20,0(r3)
   182d4:	102f883a 	mov	r23,r2
   182d8:	10bfffc4 	addi	r2,r2,-1
   182dc:	a1003fcc 	andi	r4,r20,255
   182e0:	2100201c 	xori	r4,r4,128
   182e4:	213fe004 	addi	r4,r4,-128
   182e8:	217ff726 	beq	r4,r5,182c8 <__alt_data_end+0xfffd9ac8>
   182ec:	a2000044 	addi	r8,r20,1
   182f0:	12000005 	stb	r8,0(r2)
   182f4:	003f4606 	br	18010 <__alt_data_end+0xfffd9810>
   182f8:	d9000b17 	ldw	r4,44(sp)
   182fc:	2000c826 	beq	r4,zero,18620 <_dtoa_r+0xcb8>
   18300:	d9800317 	ldw	r6,12(sp)
   18304:	00c00044 	movi	r3,1
   18308:	1980f90e 	bge	r3,r6,186f0 <_dtoa_r+0xd88>
   1830c:	d8800617 	ldw	r2,24(sp)
   18310:	d8c00a17 	ldw	r3,40(sp)
   18314:	157fffc4 	addi	r21,r2,-1
   18318:	1d41f316 	blt	r3,r21,18ae8 <_dtoa_r+0x1180>
   1831c:	1d6bc83a 	sub	r21,r3,r21
   18320:	d9c00617 	ldw	r7,24(sp)
   18324:	3802aa16 	blt	r7,zero,18dd0 <_dtoa_r+0x1468>
   18328:	dd000817 	ldw	r20,32(sp)
   1832c:	d8800617 	ldw	r2,24(sp)
   18330:	d8c00817 	ldw	r3,32(sp)
   18334:	01400044 	movi	r5,1
   18338:	e009883a 	mov	r4,fp
   1833c:	1887883a 	add	r3,r3,r2
   18340:	d8c00815 	stw	r3,32(sp)
   18344:	b0ad883a 	add	r22,r22,r2
   18348:	00198b40 	call	198b4 <__i2b>
   1834c:	1023883a 	mov	r17,r2
   18350:	a0000826 	beq	r20,zero,18374 <_dtoa_r+0xa0c>
   18354:	0580070e 	bge	zero,r22,18374 <_dtoa_r+0xa0c>
   18358:	a005883a 	mov	r2,r20
   1835c:	b500b916 	blt	r22,r20,18644 <_dtoa_r+0xcdc>
   18360:	d9000817 	ldw	r4,32(sp)
   18364:	a0a9c83a 	sub	r20,r20,r2
   18368:	b0adc83a 	sub	r22,r22,r2
   1836c:	2089c83a 	sub	r4,r4,r2
   18370:	d9000815 	stw	r4,32(sp)
   18374:	d9800a17 	ldw	r6,40(sp)
   18378:	0181810e 	bge	zero,r6,18980 <_dtoa_r+0x1018>
   1837c:	d9c00b17 	ldw	r7,44(sp)
   18380:	3800b326 	beq	r7,zero,18650 <_dtoa_r+0xce8>
   18384:	a800b226 	beq	r21,zero,18650 <_dtoa_r+0xce8>
   18388:	880b883a 	mov	r5,r17
   1838c:	a80d883a 	mov	r6,r21
   18390:	e009883a 	mov	r4,fp
   18394:	0019b7c0 	call	19b7c <__pow5mult>
   18398:	d9800917 	ldw	r6,36(sp)
   1839c:	100b883a 	mov	r5,r2
   183a0:	e009883a 	mov	r4,fp
   183a4:	1023883a 	mov	r17,r2
   183a8:	00198f00 	call	198f0 <__multiply>
   183ac:	1021883a 	mov	r16,r2
   183b0:	d8800a17 	ldw	r2,40(sp)
   183b4:	d9400917 	ldw	r5,36(sp)
   183b8:	e009883a 	mov	r4,fp
   183bc:	1545c83a 	sub	r2,r2,r21
   183c0:	d8800a15 	stw	r2,40(sp)
   183c4:	00195280 	call	19528 <_Bfree>
   183c8:	d8c00a17 	ldw	r3,40(sp)
   183cc:	18009f1e 	bne	r3,zero,1864c <_dtoa_r+0xce4>
   183d0:	05c00044 	movi	r23,1
   183d4:	e009883a 	mov	r4,fp
   183d8:	b80b883a 	mov	r5,r23
   183dc:	00198b40 	call	198b4 <__i2b>
   183e0:	d9000d17 	ldw	r4,52(sp)
   183e4:	102b883a 	mov	r21,r2
   183e8:	2000ce26 	beq	r4,zero,18724 <_dtoa_r+0xdbc>
   183ec:	200d883a 	mov	r6,r4
   183f0:	100b883a 	mov	r5,r2
   183f4:	e009883a 	mov	r4,fp
   183f8:	0019b7c0 	call	19b7c <__pow5mult>
   183fc:	d9800317 	ldw	r6,12(sp)
   18400:	102b883a 	mov	r21,r2
   18404:	b981810e 	bge	r23,r6,18a0c <_dtoa_r+0x10a4>
   18408:	0027883a 	mov	r19,zero
   1840c:	a8800417 	ldw	r2,16(r21)
   18410:	05c00804 	movi	r23,32
   18414:	10800104 	addi	r2,r2,4
   18418:	1085883a 	add	r2,r2,r2
   1841c:	1085883a 	add	r2,r2,r2
   18420:	a885883a 	add	r2,r21,r2
   18424:	11000017 	ldw	r4,0(r2)
   18428:	001979c0 	call	1979c <__hi0bits>
   1842c:	b885c83a 	sub	r2,r23,r2
   18430:	1585883a 	add	r2,r2,r22
   18434:	108007cc 	andi	r2,r2,31
   18438:	1000b326 	beq	r2,zero,18708 <_dtoa_r+0xda0>
   1843c:	00c00804 	movi	r3,32
   18440:	1887c83a 	sub	r3,r3,r2
   18444:	01000104 	movi	r4,4
   18448:	20c2cd0e 	bge	r4,r3,18f80 <_dtoa_r+0x1618>
   1844c:	00c00704 	movi	r3,28
   18450:	1885c83a 	sub	r2,r3,r2
   18454:	d8c00817 	ldw	r3,32(sp)
   18458:	a0a9883a 	add	r20,r20,r2
   1845c:	b0ad883a 	add	r22,r22,r2
   18460:	1887883a 	add	r3,r3,r2
   18464:	d8c00815 	stw	r3,32(sp)
   18468:	d9800817 	ldw	r6,32(sp)
   1846c:	0180040e 	bge	zero,r6,18480 <_dtoa_r+0xb18>
   18470:	800b883a 	mov	r5,r16
   18474:	e009883a 	mov	r4,fp
   18478:	0019cbc0 	call	19cbc <__lshift>
   1847c:	1021883a 	mov	r16,r2
   18480:	0580050e 	bge	zero,r22,18498 <_dtoa_r+0xb30>
   18484:	a80b883a 	mov	r5,r21
   18488:	b00d883a 	mov	r6,r22
   1848c:	e009883a 	mov	r4,fp
   18490:	0019cbc0 	call	19cbc <__lshift>
   18494:	102b883a 	mov	r21,r2
   18498:	d9c00e17 	ldw	r7,56(sp)
   1849c:	3801211e 	bne	r7,zero,18924 <_dtoa_r+0xfbc>
   184a0:	d9800617 	ldw	r6,24(sp)
   184a4:	0181380e 	bge	zero,r6,18988 <_dtoa_r+0x1020>
   184a8:	d8c00b17 	ldw	r3,44(sp)
   184ac:	1800ab1e 	bne	r3,zero,1875c <_dtoa_r+0xdf4>
   184b0:	dc800717 	ldw	r18,28(sp)
   184b4:	dcc00617 	ldw	r19,24(sp)
   184b8:	9029883a 	mov	r20,r18
   184bc:	00000206 	br	184c8 <_dtoa_r+0xb60>
   184c0:	00195500 	call	19550 <__multadd>
   184c4:	1021883a 	mov	r16,r2
   184c8:	a80b883a 	mov	r5,r21
   184cc:	8009883a 	mov	r4,r16
   184d0:	00177400 	call	17740 <quorem>
   184d4:	10800c04 	addi	r2,r2,48
   184d8:	90800005 	stb	r2,0(r18)
   184dc:	94800044 	addi	r18,r18,1
   184e0:	9507c83a 	sub	r3,r18,r20
   184e4:	000f883a 	mov	r7,zero
   184e8:	01800284 	movi	r6,10
   184ec:	800b883a 	mov	r5,r16
   184f0:	e009883a 	mov	r4,fp
   184f4:	1cfff216 	blt	r3,r19,184c0 <__alt_data_end+0xfffd9cc0>
   184f8:	1011883a 	mov	r8,r2
   184fc:	d8800617 	ldw	r2,24(sp)
   18500:	0082370e 	bge	zero,r2,18de0 <_dtoa_r+0x1478>
   18504:	d9000717 	ldw	r4,28(sp)
   18508:	0025883a 	mov	r18,zero
   1850c:	20af883a 	add	r23,r4,r2
   18510:	01800044 	movi	r6,1
   18514:	800b883a 	mov	r5,r16
   18518:	e009883a 	mov	r4,fp
   1851c:	da001715 	stw	r8,92(sp)
   18520:	0019cbc0 	call	19cbc <__lshift>
   18524:	a80b883a 	mov	r5,r21
   18528:	1009883a 	mov	r4,r2
   1852c:	d8800915 	stw	r2,36(sp)
   18530:	0019e040 	call	19e04 <__mcmp>
   18534:	da001717 	ldw	r8,92(sp)
   18538:	0081800e 	bge	zero,r2,18b3c <_dtoa_r+0x11d4>
   1853c:	b93fffc3 	ldbu	r4,-1(r23)
   18540:	b8bfffc4 	addi	r2,r23,-1
   18544:	1007883a 	mov	r3,r2
   18548:	01800e44 	movi	r6,57
   1854c:	d9c00717 	ldw	r7,28(sp)
   18550:	00000506 	br	18568 <_dtoa_r+0xc00>
   18554:	18ffffc4 	addi	r3,r3,-1
   18558:	11c12326 	beq	r2,r7,189e8 <_dtoa_r+0x1080>
   1855c:	19000003 	ldbu	r4,0(r3)
   18560:	102f883a 	mov	r23,r2
   18564:	10bfffc4 	addi	r2,r2,-1
   18568:	21403fcc 	andi	r5,r4,255
   1856c:	2940201c 	xori	r5,r5,128
   18570:	297fe004 	addi	r5,r5,-128
   18574:	29bff726 	beq	r5,r6,18554 <__alt_data_end+0xfffd9d54>
   18578:	21000044 	addi	r4,r4,1
   1857c:	11000005 	stb	r4,0(r2)
   18580:	a80b883a 	mov	r5,r21
   18584:	e009883a 	mov	r4,fp
   18588:	00195280 	call	19528 <_Bfree>
   1858c:	883ea026 	beq	r17,zero,18010 <__alt_data_end+0xfffd9810>
   18590:	90000426 	beq	r18,zero,185a4 <_dtoa_r+0xc3c>
   18594:	94400326 	beq	r18,r17,185a4 <_dtoa_r+0xc3c>
   18598:	900b883a 	mov	r5,r18
   1859c:	e009883a 	mov	r4,fp
   185a0:	00195280 	call	19528 <_Bfree>
   185a4:	880b883a 	mov	r5,r17
   185a8:	e009883a 	mov	r4,fp
   185ac:	00195280 	call	19528 <_Bfree>
   185b0:	003e9706 	br	18010 <__alt_data_end+0xfffd9810>
   185b4:	01800044 	movi	r6,1
   185b8:	d9800e15 	stw	r6,56(sp)
   185bc:	003d9606 	br	17c18 <__alt_data_end+0xfffd9418>
   185c0:	d8800817 	ldw	r2,32(sp)
   185c4:	d8c00517 	ldw	r3,20(sp)
   185c8:	d8000d15 	stw	zero,52(sp)
   185cc:	10c5c83a 	sub	r2,r2,r3
   185d0:	00c9c83a 	sub	r4,zero,r3
   185d4:	d8800815 	stw	r2,32(sp)
   185d8:	d9000a15 	stw	r4,40(sp)
   185dc:	003d9706 	br	17c3c <__alt_data_end+0xfffd943c>
   185e0:	05adc83a 	sub	r22,zero,r22
   185e4:	dd800815 	stw	r22,32(sp)
   185e8:	002d883a 	mov	r22,zero
   185ec:	003d8e06 	br	17c28 <__alt_data_end+0xfffd9428>
   185f0:	d9000517 	ldw	r4,20(sp)
   185f4:	002815c0 	call	2815c <__floatsidf>
   185f8:	100d883a 	mov	r6,r2
   185fc:	180f883a 	mov	r7,r3
   18600:	a009883a 	mov	r4,r20
   18604:	880b883a 	mov	r5,r17
   18608:	0026d1c0 	call	26d1c <__eqdf2>
   1860c:	103d7126 	beq	r2,zero,17bd4 <__alt_data_end+0xfffd93d4>
   18610:	d9c00517 	ldw	r7,20(sp)
   18614:	39ffffc4 	addi	r7,r7,-1
   18618:	d9c00515 	stw	r7,20(sp)
   1861c:	003d6d06 	br	17bd4 <__alt_data_end+0xfffd93d4>
   18620:	dd400a17 	ldw	r21,40(sp)
   18624:	dd000817 	ldw	r20,32(sp)
   18628:	0023883a 	mov	r17,zero
   1862c:	003f4806 	br	18350 <__alt_data_end+0xfffd9b50>
   18630:	10e3c83a 	sub	r17,r2,r3
   18634:	9448983a 	sll	r4,r18,r17
   18638:	003d3206 	br	17b04 <__alt_data_end+0xfffd9304>
   1863c:	d8000e15 	stw	zero,56(sp)
   18640:	003d7506 	br	17c18 <__alt_data_end+0xfffd9418>
   18644:	b005883a 	mov	r2,r22
   18648:	003f4506 	br	18360 <__alt_data_end+0xfffd9b60>
   1864c:	dc000915 	stw	r16,36(sp)
   18650:	d9800a17 	ldw	r6,40(sp)
   18654:	d9400917 	ldw	r5,36(sp)
   18658:	e009883a 	mov	r4,fp
   1865c:	0019b7c0 	call	19b7c <__pow5mult>
   18660:	1021883a 	mov	r16,r2
   18664:	003f5a06 	br	183d0 <__alt_data_end+0xfffd9bd0>
   18668:	01c00044 	movi	r7,1
   1866c:	d9c00b15 	stw	r7,44(sp)
   18670:	d8802217 	ldw	r2,136(sp)
   18674:	0081280e 	bge	zero,r2,18b18 <_dtoa_r+0x11b0>
   18678:	100d883a 	mov	r6,r2
   1867c:	1021883a 	mov	r16,r2
   18680:	d8800c15 	stw	r2,48(sp)
   18684:	d8800615 	stw	r2,24(sp)
   18688:	003d8806 	br	17cac <__alt_data_end+0xfffd94ac>
   1868c:	d8800617 	ldw	r2,24(sp)
   18690:	00be9b16 	blt	zero,r2,18100 <__alt_data_end+0xfffd9900>
   18694:	10010f1e 	bne	r2,zero,18ad4 <_dtoa_r+0x116c>
   18698:	880b883a 	mov	r5,r17
   1869c:	000d883a 	mov	r6,zero
   186a0:	01d00534 	movhi	r7,16404
   186a4:	8009883a 	mov	r4,r16
   186a8:	0026f740 	call	26f74 <__muldf3>
   186ac:	900d883a 	mov	r6,r18
   186b0:	980f883a 	mov	r7,r19
   186b4:	1009883a 	mov	r4,r2
   186b8:	180b883a 	mov	r5,r3
   186bc:	0026da40 	call	26da4 <__gedf2>
   186c0:	002b883a 	mov	r21,zero
   186c4:	0023883a 	mov	r17,zero
   186c8:	1000bf16 	blt	r2,zero,189c8 <_dtoa_r+0x1060>
   186cc:	d9802217 	ldw	r6,136(sp)
   186d0:	ddc00717 	ldw	r23,28(sp)
   186d4:	018c303a 	nor	r6,zero,r6
   186d8:	d9800515 	stw	r6,20(sp)
   186dc:	a80b883a 	mov	r5,r21
   186e0:	e009883a 	mov	r4,fp
   186e4:	00195280 	call	19528 <_Bfree>
   186e8:	883e4926 	beq	r17,zero,18010 <__alt_data_end+0xfffd9810>
   186ec:	003fad06 	br	185a4 <__alt_data_end+0xfffd9da4>
   186f0:	d9c01117 	ldw	r7,68(sp)
   186f4:	3801bc26 	beq	r7,zero,18de8 <_dtoa_r+0x1480>
   186f8:	10810cc4 	addi	r2,r2,1075
   186fc:	dd400a17 	ldw	r21,40(sp)
   18700:	dd000817 	ldw	r20,32(sp)
   18704:	003f0a06 	br	18330 <__alt_data_end+0xfffd9b30>
   18708:	00800704 	movi	r2,28
   1870c:	d9000817 	ldw	r4,32(sp)
   18710:	a0a9883a 	add	r20,r20,r2
   18714:	b0ad883a 	add	r22,r22,r2
   18718:	2089883a 	add	r4,r4,r2
   1871c:	d9000815 	stw	r4,32(sp)
   18720:	003f5106 	br	18468 <__alt_data_end+0xfffd9c68>
   18724:	d8c00317 	ldw	r3,12(sp)
   18728:	b8c1fc0e 	bge	r23,r3,18f1c <_dtoa_r+0x15b4>
   1872c:	0027883a 	mov	r19,zero
   18730:	b805883a 	mov	r2,r23
   18734:	003f3e06 	br	18430 <__alt_data_end+0xfffd9c30>
   18738:	880b883a 	mov	r5,r17
   1873c:	e009883a 	mov	r4,fp
   18740:	000f883a 	mov	r7,zero
   18744:	01800284 	movi	r6,10
   18748:	00195500 	call	19550 <__multadd>
   1874c:	d9000c17 	ldw	r4,48(sp)
   18750:	1023883a 	mov	r17,r2
   18754:	0102040e 	bge	zero,r4,18f68 <_dtoa_r+0x1600>
   18758:	d9000615 	stw	r4,24(sp)
   1875c:	0500050e 	bge	zero,r20,18774 <_dtoa_r+0xe0c>
   18760:	880b883a 	mov	r5,r17
   18764:	a00d883a 	mov	r6,r20
   18768:	e009883a 	mov	r4,fp
   1876c:	0019cbc0 	call	19cbc <__lshift>
   18770:	1023883a 	mov	r17,r2
   18774:	9801241e 	bne	r19,zero,18c08 <_dtoa_r+0x12a0>
   18778:	8829883a 	mov	r20,r17
   1877c:	d9000617 	ldw	r4,24(sp)
   18780:	dcc00717 	ldw	r19,28(sp)
   18784:	9480004c 	andi	r18,r18,1
   18788:	20bfffc4 	addi	r2,r4,-1
   1878c:	9885883a 	add	r2,r19,r2
   18790:	d8800415 	stw	r2,16(sp)
   18794:	dc800615 	stw	r18,24(sp)
   18798:	a80b883a 	mov	r5,r21
   1879c:	8009883a 	mov	r4,r16
   187a0:	00177400 	call	17740 <quorem>
   187a4:	880b883a 	mov	r5,r17
   187a8:	8009883a 	mov	r4,r16
   187ac:	102f883a 	mov	r23,r2
   187b0:	0019e040 	call	19e04 <__mcmp>
   187b4:	a80b883a 	mov	r5,r21
   187b8:	a00d883a 	mov	r6,r20
   187bc:	e009883a 	mov	r4,fp
   187c0:	102d883a 	mov	r22,r2
   187c4:	0019e640 	call	19e64 <__mdiff>
   187c8:	1007883a 	mov	r3,r2
   187cc:	10800317 	ldw	r2,12(r2)
   187d0:	bc800c04 	addi	r18,r23,48
   187d4:	180b883a 	mov	r5,r3
   187d8:	10004e1e 	bne	r2,zero,18914 <_dtoa_r+0xfac>
   187dc:	8009883a 	mov	r4,r16
   187e0:	d8c01615 	stw	r3,88(sp)
   187e4:	0019e040 	call	19e04 <__mcmp>
   187e8:	d8c01617 	ldw	r3,88(sp)
   187ec:	e009883a 	mov	r4,fp
   187f0:	d8801615 	stw	r2,88(sp)
   187f4:	180b883a 	mov	r5,r3
   187f8:	00195280 	call	19528 <_Bfree>
   187fc:	d8801617 	ldw	r2,88(sp)
   18800:	1000041e 	bne	r2,zero,18814 <_dtoa_r+0xeac>
   18804:	d9800317 	ldw	r6,12(sp)
   18808:	3000021e 	bne	r6,zero,18814 <_dtoa_r+0xeac>
   1880c:	d8c00617 	ldw	r3,24(sp)
   18810:	18003726 	beq	r3,zero,188f0 <_dtoa_r+0xf88>
   18814:	b0002016 	blt	r22,zero,18898 <_dtoa_r+0xf30>
   18818:	b000041e 	bne	r22,zero,1882c <_dtoa_r+0xec4>
   1881c:	d9000317 	ldw	r4,12(sp)
   18820:	2000021e 	bne	r4,zero,1882c <_dtoa_r+0xec4>
   18824:	d8c00617 	ldw	r3,24(sp)
   18828:	18001b26 	beq	r3,zero,18898 <_dtoa_r+0xf30>
   1882c:	00810716 	blt	zero,r2,18c4c <_dtoa_r+0x12e4>
   18830:	d8c00417 	ldw	r3,16(sp)
   18834:	9d800044 	addi	r22,r19,1
   18838:	9c800005 	stb	r18,0(r19)
   1883c:	b02f883a 	mov	r23,r22
   18840:	98c10626 	beq	r19,r3,18c5c <_dtoa_r+0x12f4>
   18844:	800b883a 	mov	r5,r16
   18848:	000f883a 	mov	r7,zero
   1884c:	01800284 	movi	r6,10
   18850:	e009883a 	mov	r4,fp
   18854:	00195500 	call	19550 <__multadd>
   18858:	1021883a 	mov	r16,r2
   1885c:	000f883a 	mov	r7,zero
   18860:	01800284 	movi	r6,10
   18864:	880b883a 	mov	r5,r17
   18868:	e009883a 	mov	r4,fp
   1886c:	8d002526 	beq	r17,r20,18904 <_dtoa_r+0xf9c>
   18870:	00195500 	call	19550 <__multadd>
   18874:	a00b883a 	mov	r5,r20
   18878:	000f883a 	mov	r7,zero
   1887c:	01800284 	movi	r6,10
   18880:	e009883a 	mov	r4,fp
   18884:	1023883a 	mov	r17,r2
   18888:	00195500 	call	19550 <__multadd>
   1888c:	1029883a 	mov	r20,r2
   18890:	b027883a 	mov	r19,r22
   18894:	003fc006 	br	18798 <__alt_data_end+0xfffd9f98>
   18898:	9011883a 	mov	r8,r18
   1889c:	00800e0e 	bge	zero,r2,188d8 <_dtoa_r+0xf70>
   188a0:	800b883a 	mov	r5,r16
   188a4:	01800044 	movi	r6,1
   188a8:	e009883a 	mov	r4,fp
   188ac:	da001715 	stw	r8,92(sp)
   188b0:	0019cbc0 	call	19cbc <__lshift>
   188b4:	a80b883a 	mov	r5,r21
   188b8:	1009883a 	mov	r4,r2
   188bc:	1021883a 	mov	r16,r2
   188c0:	0019e040 	call	19e04 <__mcmp>
   188c4:	da001717 	ldw	r8,92(sp)
   188c8:	0081960e 	bge	zero,r2,18f24 <_dtoa_r+0x15bc>
   188cc:	00800e44 	movi	r2,57
   188d0:	40817026 	beq	r8,r2,18e94 <_dtoa_r+0x152c>
   188d4:	ba000c44 	addi	r8,r23,49
   188d8:	8825883a 	mov	r18,r17
   188dc:	9dc00044 	addi	r23,r19,1
   188e0:	9a000005 	stb	r8,0(r19)
   188e4:	a023883a 	mov	r17,r20
   188e8:	dc000915 	stw	r16,36(sp)
   188ec:	003f2406 	br	18580 <__alt_data_end+0xfffd9d80>
   188f0:	00800e44 	movi	r2,57
   188f4:	9011883a 	mov	r8,r18
   188f8:	90816626 	beq	r18,r2,18e94 <_dtoa_r+0x152c>
   188fc:	05bff516 	blt	zero,r22,188d4 <__alt_data_end+0xfffda0d4>
   18900:	003ff506 	br	188d8 <__alt_data_end+0xfffda0d8>
   18904:	00195500 	call	19550 <__multadd>
   18908:	1023883a 	mov	r17,r2
   1890c:	1029883a 	mov	r20,r2
   18910:	003fdf06 	br	18890 <__alt_data_end+0xfffda090>
   18914:	e009883a 	mov	r4,fp
   18918:	00195280 	call	19528 <_Bfree>
   1891c:	00800044 	movi	r2,1
   18920:	003fbc06 	br	18814 <__alt_data_end+0xfffda014>
   18924:	a80b883a 	mov	r5,r21
   18928:	8009883a 	mov	r4,r16
   1892c:	0019e040 	call	19e04 <__mcmp>
   18930:	103edb0e 	bge	r2,zero,184a0 <__alt_data_end+0xfffd9ca0>
   18934:	800b883a 	mov	r5,r16
   18938:	000f883a 	mov	r7,zero
   1893c:	01800284 	movi	r6,10
   18940:	e009883a 	mov	r4,fp
   18944:	00195500 	call	19550 <__multadd>
   18948:	1021883a 	mov	r16,r2
   1894c:	d8800517 	ldw	r2,20(sp)
   18950:	d8c00b17 	ldw	r3,44(sp)
   18954:	10bfffc4 	addi	r2,r2,-1
   18958:	d8800515 	stw	r2,20(sp)
   1895c:	183f761e 	bne	r3,zero,18738 <__alt_data_end+0xfffd9f38>
   18960:	d9000c17 	ldw	r4,48(sp)
   18964:	0101730e 	bge	zero,r4,18f34 <_dtoa_r+0x15cc>
   18968:	d9000615 	stw	r4,24(sp)
   1896c:	003ed006 	br	184b0 <__alt_data_end+0xfffd9cb0>
   18970:	00800084 	movi	r2,2
   18974:	3081861e 	bne	r6,r2,18f90 <_dtoa_r+0x1628>
   18978:	d8000b15 	stw	zero,44(sp)
   1897c:	003f3c06 	br	18670 <__alt_data_end+0xfffd9e70>
   18980:	dc000917 	ldw	r16,36(sp)
   18984:	003e9206 	br	183d0 <__alt_data_end+0xfffd9bd0>
   18988:	d9c00317 	ldw	r7,12(sp)
   1898c:	00800084 	movi	r2,2
   18990:	11fec50e 	bge	r2,r7,184a8 <__alt_data_end+0xfffd9ca8>
   18994:	d9000617 	ldw	r4,24(sp)
   18998:	20013c1e 	bne	r4,zero,18e8c <_dtoa_r+0x1524>
   1899c:	a80b883a 	mov	r5,r21
   189a0:	000f883a 	mov	r7,zero
   189a4:	01800144 	movi	r6,5
   189a8:	e009883a 	mov	r4,fp
   189ac:	00195500 	call	19550 <__multadd>
   189b0:	100b883a 	mov	r5,r2
   189b4:	8009883a 	mov	r4,r16
   189b8:	102b883a 	mov	r21,r2
   189bc:	0019e040 	call	19e04 <__mcmp>
   189c0:	dc000915 	stw	r16,36(sp)
   189c4:	00bf410e 	bge	zero,r2,186cc <__alt_data_end+0xfffd9ecc>
   189c8:	d9c00717 	ldw	r7,28(sp)
   189cc:	00800c44 	movi	r2,49
   189d0:	38800005 	stb	r2,0(r7)
   189d4:	d8800517 	ldw	r2,20(sp)
   189d8:	3dc00044 	addi	r23,r7,1
   189dc:	10800044 	addi	r2,r2,1
   189e0:	d8800515 	stw	r2,20(sp)
   189e4:	003f3d06 	br	186dc <__alt_data_end+0xfffd9edc>
   189e8:	d9800517 	ldw	r6,20(sp)
   189ec:	d9c00717 	ldw	r7,28(sp)
   189f0:	00800c44 	movi	r2,49
   189f4:	31800044 	addi	r6,r6,1
   189f8:	d9800515 	stw	r6,20(sp)
   189fc:	38800005 	stb	r2,0(r7)
   18a00:	003edf06 	br	18580 <__alt_data_end+0xfffd9d80>
   18a04:	d8000b15 	stw	zero,44(sp)
   18a08:	003c9f06 	br	17c88 <__alt_data_end+0xfffd9488>
   18a0c:	903e7e1e 	bne	r18,zero,18408 <__alt_data_end+0xfffd9c08>
   18a10:	00800434 	movhi	r2,16
   18a14:	10bfffc4 	addi	r2,r2,-1
   18a18:	9884703a 	and	r2,r19,r2
   18a1c:	1000ea1e 	bne	r2,zero,18dc8 <_dtoa_r+0x1460>
   18a20:	9cdffc2c 	andhi	r19,r19,32752
   18a24:	9800e826 	beq	r19,zero,18dc8 <_dtoa_r+0x1460>
   18a28:	d9c00817 	ldw	r7,32(sp)
   18a2c:	b5800044 	addi	r22,r22,1
   18a30:	04c00044 	movi	r19,1
   18a34:	39c00044 	addi	r7,r7,1
   18a38:	d9c00815 	stw	r7,32(sp)
   18a3c:	d8800d17 	ldw	r2,52(sp)
   18a40:	103e721e 	bne	r2,zero,1840c <__alt_data_end+0xfffd9c0c>
   18a44:	00800044 	movi	r2,1
   18a48:	003e7906 	br	18430 <__alt_data_end+0xfffd9c30>
   18a4c:	8009883a 	mov	r4,r16
   18a50:	002815c0 	call	2815c <__floatsidf>
   18a54:	d9800f17 	ldw	r6,60(sp)
   18a58:	d9c01017 	ldw	r7,64(sp)
   18a5c:	1009883a 	mov	r4,r2
   18a60:	180b883a 	mov	r5,r3
   18a64:	0026f740 	call	26f74 <__muldf3>
   18a68:	000d883a 	mov	r6,zero
   18a6c:	01d00734 	movhi	r7,16412
   18a70:	1009883a 	mov	r4,r2
   18a74:	180b883a 	mov	r5,r3
   18a78:	0025aa00 	call	25aa0 <__adddf3>
   18a7c:	047f3034 	movhi	r17,64704
   18a80:	1021883a 	mov	r16,r2
   18a84:	1c63883a 	add	r17,r3,r17
   18a88:	d9000f17 	ldw	r4,60(sp)
   18a8c:	d9401017 	ldw	r5,64(sp)
   18a90:	000d883a 	mov	r6,zero
   18a94:	01d00534 	movhi	r7,16404
   18a98:	00277e00 	call	277e0 <__subdf3>
   18a9c:	800d883a 	mov	r6,r16
   18aa0:	880f883a 	mov	r7,r17
   18aa4:	1009883a 	mov	r4,r2
   18aa8:	180b883a 	mov	r5,r3
   18aac:	102b883a 	mov	r21,r2
   18ab0:	1829883a 	mov	r20,r3
   18ab4:	0026da40 	call	26da4 <__gedf2>
   18ab8:	00806c16 	blt	zero,r2,18c6c <_dtoa_r+0x1304>
   18abc:	89e0003c 	xorhi	r7,r17,32768
   18ac0:	800d883a 	mov	r6,r16
   18ac4:	a809883a 	mov	r4,r21
   18ac8:	a00b883a 	mov	r5,r20
   18acc:	0026e800 	call	26e80 <__ledf2>
   18ad0:	103d7e0e 	bge	r2,zero,180cc <__alt_data_end+0xfffd98cc>
   18ad4:	002b883a 	mov	r21,zero
   18ad8:	0023883a 	mov	r17,zero
   18adc:	003efb06 	br	186cc <__alt_data_end+0xfffd9ecc>
   18ae0:	d8800717 	ldw	r2,28(sp)
   18ae4:	003bd006 	br	17a28 <__alt_data_end+0xfffd9228>
   18ae8:	d9000a17 	ldw	r4,40(sp)
   18aec:	d9800d17 	ldw	r6,52(sp)
   18af0:	dd400a15 	stw	r21,40(sp)
   18af4:	a905c83a 	sub	r2,r21,r4
   18af8:	308d883a 	add	r6,r6,r2
   18afc:	d9800d15 	stw	r6,52(sp)
   18b00:	002b883a 	mov	r21,zero
   18b04:	003e0606 	br	18320 <__alt_data_end+0xfffd9b20>
   18b08:	9023883a 	mov	r17,r18
   18b0c:	9829883a 	mov	r20,r19
   18b10:	04000084 	movi	r16,2
   18b14:	003c9206 	br	17d60 <__alt_data_end+0xfffd9560>
   18b18:	04000044 	movi	r16,1
   18b1c:	dc000c15 	stw	r16,48(sp)
   18b20:	dc000615 	stw	r16,24(sp)
   18b24:	dc002215 	stw	r16,136(sp)
   18b28:	e0001115 	stw	zero,68(fp)
   18b2c:	000b883a 	mov	r5,zero
   18b30:	003c6906 	br	17cd8 <__alt_data_end+0xfffd94d8>
   18b34:	3021883a 	mov	r16,r6
   18b38:	003ffb06 	br	18b28 <__alt_data_end+0xfffda328>
   18b3c:	1000021e 	bne	r2,zero,18b48 <_dtoa_r+0x11e0>
   18b40:	4200004c 	andi	r8,r8,1
   18b44:	403e7d1e 	bne	r8,zero,1853c <__alt_data_end+0xfffd9d3c>
   18b48:	01000c04 	movi	r4,48
   18b4c:	00000106 	br	18b54 <_dtoa_r+0x11ec>
   18b50:	102f883a 	mov	r23,r2
   18b54:	b8bfffc4 	addi	r2,r23,-1
   18b58:	10c00007 	ldb	r3,0(r2)
   18b5c:	193ffc26 	beq	r3,r4,18b50 <__alt_data_end+0xfffda350>
   18b60:	003e8706 	br	18580 <__alt_data_end+0xfffd9d80>
   18b64:	d8800517 	ldw	r2,20(sp)
   18b68:	00a3c83a 	sub	r17,zero,r2
   18b6c:	8800a426 	beq	r17,zero,18e00 <_dtoa_r+0x1498>
   18b70:	888003cc 	andi	r2,r17,15
   18b74:	100490fa 	slli	r2,r2,3
   18b78:	00c000f4 	movhi	r3,3
   18b7c:	18e58a04 	addi	r3,r3,-27096
   18b80:	1885883a 	add	r2,r3,r2
   18b84:	11800017 	ldw	r6,0(r2)
   18b88:	11c00117 	ldw	r7,4(r2)
   18b8c:	9009883a 	mov	r4,r18
   18b90:	980b883a 	mov	r5,r19
   18b94:	8823d13a 	srai	r17,r17,4
   18b98:	0026f740 	call	26f74 <__muldf3>
   18b9c:	d8800f15 	stw	r2,60(sp)
   18ba0:	d8c01015 	stw	r3,64(sp)
   18ba4:	8800e826 	beq	r17,zero,18f48 <_dtoa_r+0x15e0>
   18ba8:	050000f4 	movhi	r20,3
   18bac:	a5258004 	addi	r20,r20,-27136
   18bb0:	04000084 	movi	r16,2
   18bb4:	8980004c 	andi	r6,r17,1
   18bb8:	1009883a 	mov	r4,r2
   18bbc:	8823d07a 	srai	r17,r17,1
   18bc0:	180b883a 	mov	r5,r3
   18bc4:	30000426 	beq	r6,zero,18bd8 <_dtoa_r+0x1270>
   18bc8:	a1800017 	ldw	r6,0(r20)
   18bcc:	a1c00117 	ldw	r7,4(r20)
   18bd0:	84000044 	addi	r16,r16,1
   18bd4:	0026f740 	call	26f74 <__muldf3>
   18bd8:	a5000204 	addi	r20,r20,8
   18bdc:	883ff51e 	bne	r17,zero,18bb4 <__alt_data_end+0xfffda3b4>
   18be0:	d8800f15 	stw	r2,60(sp)
   18be4:	d8c01015 	stw	r3,64(sp)
   18be8:	003c7606 	br	17dc4 <__alt_data_end+0xfffd95c4>
   18bec:	00c00c04 	movi	r3,48
   18bf0:	10c00005 	stb	r3,0(r2)
   18bf4:	d8c00517 	ldw	r3,20(sp)
   18bf8:	bd3fffc3 	ldbu	r20,-1(r23)
   18bfc:	18c00044 	addi	r3,r3,1
   18c00:	d8c00515 	stw	r3,20(sp)
   18c04:	003db906 	br	182ec <__alt_data_end+0xfffd9aec>
   18c08:	89400117 	ldw	r5,4(r17)
   18c0c:	e009883a 	mov	r4,fp
   18c10:	00194800 	call	19480 <_Balloc>
   18c14:	89800417 	ldw	r6,16(r17)
   18c18:	89400304 	addi	r5,r17,12
   18c1c:	11000304 	addi	r4,r2,12
   18c20:	31800084 	addi	r6,r6,2
   18c24:	318d883a 	add	r6,r6,r6
   18c28:	318d883a 	add	r6,r6,r6
   18c2c:	1027883a 	mov	r19,r2
   18c30:	00127200 	call	12720 <memcpy>
   18c34:	01800044 	movi	r6,1
   18c38:	980b883a 	mov	r5,r19
   18c3c:	e009883a 	mov	r4,fp
   18c40:	0019cbc0 	call	19cbc <__lshift>
   18c44:	1029883a 	mov	r20,r2
   18c48:	003ecc06 	br	1877c <__alt_data_end+0xfffd9f7c>
   18c4c:	00800e44 	movi	r2,57
   18c50:	90809026 	beq	r18,r2,18e94 <_dtoa_r+0x152c>
   18c54:	92000044 	addi	r8,r18,1
   18c58:	003f1f06 	br	188d8 <__alt_data_end+0xfffda0d8>
   18c5c:	9011883a 	mov	r8,r18
   18c60:	8825883a 	mov	r18,r17
   18c64:	a023883a 	mov	r17,r20
   18c68:	003e2906 	br	18510 <__alt_data_end+0xfffd9d10>
   18c6c:	002b883a 	mov	r21,zero
   18c70:	0023883a 	mov	r17,zero
   18c74:	003f5406 	br	189c8 <__alt_data_end+0xfffda1c8>
   18c78:	61bfffc4 	addi	r6,r12,-1
   18c7c:	300490fa 	slli	r2,r6,3
   18c80:	00c000f4 	movhi	r3,3
   18c84:	18e58a04 	addi	r3,r3,-27096
   18c88:	1885883a 	add	r2,r3,r2
   18c8c:	11000017 	ldw	r4,0(r2)
   18c90:	11400117 	ldw	r5,4(r2)
   18c94:	d8800717 	ldw	r2,28(sp)
   18c98:	880f883a 	mov	r7,r17
   18c9c:	d9801215 	stw	r6,72(sp)
   18ca0:	800d883a 	mov	r6,r16
   18ca4:	db001615 	stw	r12,88(sp)
   18ca8:	15c00044 	addi	r23,r2,1
   18cac:	0026f740 	call	26f74 <__muldf3>
   18cb0:	d9401017 	ldw	r5,64(sp)
   18cb4:	d9000f17 	ldw	r4,60(sp)
   18cb8:	d8c01515 	stw	r3,84(sp)
   18cbc:	d8801415 	stw	r2,80(sp)
   18cc0:	00280dc0 	call	280dc <__fixdfsi>
   18cc4:	1009883a 	mov	r4,r2
   18cc8:	1021883a 	mov	r16,r2
   18ccc:	002815c0 	call	2815c <__floatsidf>
   18cd0:	d9000f17 	ldw	r4,60(sp)
   18cd4:	d9401017 	ldw	r5,64(sp)
   18cd8:	100d883a 	mov	r6,r2
   18cdc:	180f883a 	mov	r7,r3
   18ce0:	00277e00 	call	277e0 <__subdf3>
   18ce4:	1829883a 	mov	r20,r3
   18ce8:	d8c00717 	ldw	r3,28(sp)
   18cec:	84000c04 	addi	r16,r16,48
   18cf0:	1023883a 	mov	r17,r2
   18cf4:	1c000005 	stb	r16,0(r3)
   18cf8:	db001617 	ldw	r12,88(sp)
   18cfc:	00800044 	movi	r2,1
   18d00:	60802226 	beq	r12,r2,18d8c <_dtoa_r+0x1424>
   18d04:	d9c00717 	ldw	r7,28(sp)
   18d08:	8805883a 	mov	r2,r17
   18d0c:	b82b883a 	mov	r21,r23
   18d10:	3b19883a 	add	r12,r7,r12
   18d14:	6023883a 	mov	r17,r12
   18d18:	a007883a 	mov	r3,r20
   18d1c:	dc800f15 	stw	r18,60(sp)
   18d20:	000d883a 	mov	r6,zero
   18d24:	01d00934 	movhi	r7,16420
   18d28:	1009883a 	mov	r4,r2
   18d2c:	180b883a 	mov	r5,r3
   18d30:	0026f740 	call	26f74 <__muldf3>
   18d34:	180b883a 	mov	r5,r3
   18d38:	1009883a 	mov	r4,r2
   18d3c:	1829883a 	mov	r20,r3
   18d40:	1025883a 	mov	r18,r2
   18d44:	00280dc0 	call	280dc <__fixdfsi>
   18d48:	1009883a 	mov	r4,r2
   18d4c:	1021883a 	mov	r16,r2
   18d50:	002815c0 	call	2815c <__floatsidf>
   18d54:	100d883a 	mov	r6,r2
   18d58:	180f883a 	mov	r7,r3
   18d5c:	9009883a 	mov	r4,r18
   18d60:	a00b883a 	mov	r5,r20
   18d64:	84000c04 	addi	r16,r16,48
   18d68:	00277e00 	call	277e0 <__subdf3>
   18d6c:	ad400044 	addi	r21,r21,1
   18d70:	ac3fffc5 	stb	r16,-1(r21)
   18d74:	ac7fea1e 	bne	r21,r17,18d20 <__alt_data_end+0xfffda520>
   18d78:	1023883a 	mov	r17,r2
   18d7c:	d8801217 	ldw	r2,72(sp)
   18d80:	dc800f17 	ldw	r18,60(sp)
   18d84:	1829883a 	mov	r20,r3
   18d88:	b8af883a 	add	r23,r23,r2
   18d8c:	d9001417 	ldw	r4,80(sp)
   18d90:	d9401517 	ldw	r5,84(sp)
   18d94:	000d883a 	mov	r6,zero
   18d98:	01cff834 	movhi	r7,16352
   18d9c:	0025aa00 	call	25aa0 <__adddf3>
   18da0:	880d883a 	mov	r6,r17
   18da4:	a00f883a 	mov	r7,r20
   18da8:	1009883a 	mov	r4,r2
   18dac:	180b883a 	mov	r5,r3
   18db0:	0026e800 	call	26e80 <__ledf2>
   18db4:	10003e0e 	bge	r2,zero,18eb0 <_dtoa_r+0x1548>
   18db8:	d9001317 	ldw	r4,76(sp)
   18dbc:	bd3fffc3 	ldbu	r20,-1(r23)
   18dc0:	d9000515 	stw	r4,20(sp)
   18dc4:	003d3b06 	br	182b4 <__alt_data_end+0xfffd9ab4>
   18dc8:	0027883a 	mov	r19,zero
   18dcc:	003f1b06 	br	18a3c <__alt_data_end+0xfffda23c>
   18dd0:	d8800817 	ldw	r2,32(sp)
   18dd4:	11e9c83a 	sub	r20,r2,r7
   18dd8:	0005883a 	mov	r2,zero
   18ddc:	003d5406 	br	18330 <__alt_data_end+0xfffd9b30>
   18de0:	00800044 	movi	r2,1
   18de4:	003dc706 	br	18504 <__alt_data_end+0xfffd9d04>
   18de8:	d8c00217 	ldw	r3,8(sp)
   18dec:	00800d84 	movi	r2,54
   18df0:	dd400a17 	ldw	r21,40(sp)
   18df4:	10c5c83a 	sub	r2,r2,r3
   18df8:	dd000817 	ldw	r20,32(sp)
   18dfc:	003d4c06 	br	18330 <__alt_data_end+0xfffd9b30>
   18e00:	dc800f15 	stw	r18,60(sp)
   18e04:	dcc01015 	stw	r19,64(sp)
   18e08:	04000084 	movi	r16,2
   18e0c:	003bed06 	br	17dc4 <__alt_data_end+0xfffd95c4>
   18e10:	d9000617 	ldw	r4,24(sp)
   18e14:	203f0d26 	beq	r4,zero,18a4c <__alt_data_end+0xfffda24c>
   18e18:	d9800c17 	ldw	r6,48(sp)
   18e1c:	01bcab0e 	bge	zero,r6,180cc <__alt_data_end+0xfffd98cc>
   18e20:	d9401017 	ldw	r5,64(sp)
   18e24:	d9000f17 	ldw	r4,60(sp)
   18e28:	000d883a 	mov	r6,zero
   18e2c:	01d00934 	movhi	r7,16420
   18e30:	0026f740 	call	26f74 <__muldf3>
   18e34:	81000044 	addi	r4,r16,1
   18e38:	d8800f15 	stw	r2,60(sp)
   18e3c:	d8c01015 	stw	r3,64(sp)
   18e40:	002815c0 	call	2815c <__floatsidf>
   18e44:	d9800f17 	ldw	r6,60(sp)
   18e48:	d9c01017 	ldw	r7,64(sp)
   18e4c:	1009883a 	mov	r4,r2
   18e50:	180b883a 	mov	r5,r3
   18e54:	0026f740 	call	26f74 <__muldf3>
   18e58:	01d00734 	movhi	r7,16412
   18e5c:	000d883a 	mov	r6,zero
   18e60:	1009883a 	mov	r4,r2
   18e64:	180b883a 	mov	r5,r3
   18e68:	0025aa00 	call	25aa0 <__adddf3>
   18e6c:	d9c00517 	ldw	r7,20(sp)
   18e70:	047f3034 	movhi	r17,64704
   18e74:	1021883a 	mov	r16,r2
   18e78:	39ffffc4 	addi	r7,r7,-1
   18e7c:	d9c01315 	stw	r7,76(sp)
   18e80:	1c63883a 	add	r17,r3,r17
   18e84:	db000c17 	ldw	r12,48(sp)
   18e88:	003bea06 	br	17e34 <__alt_data_end+0xfffd9634>
   18e8c:	dc000915 	stw	r16,36(sp)
   18e90:	003e0e06 	br	186cc <__alt_data_end+0xfffd9ecc>
   18e94:	01000e44 	movi	r4,57
   18e98:	8825883a 	mov	r18,r17
   18e9c:	9dc00044 	addi	r23,r19,1
   18ea0:	99000005 	stb	r4,0(r19)
   18ea4:	a023883a 	mov	r17,r20
   18ea8:	dc000915 	stw	r16,36(sp)
   18eac:	003da406 	br	18540 <__alt_data_end+0xfffd9d40>
   18eb0:	d9801417 	ldw	r6,80(sp)
   18eb4:	d9c01517 	ldw	r7,84(sp)
   18eb8:	0009883a 	mov	r4,zero
   18ebc:	014ff834 	movhi	r5,16352
   18ec0:	00277e00 	call	277e0 <__subdf3>
   18ec4:	880d883a 	mov	r6,r17
   18ec8:	a00f883a 	mov	r7,r20
   18ecc:	1009883a 	mov	r4,r2
   18ed0:	180b883a 	mov	r5,r3
   18ed4:	0026da40 	call	26da4 <__gedf2>
   18ed8:	00bc7c0e 	bge	zero,r2,180cc <__alt_data_end+0xfffd98cc>
   18edc:	01000c04 	movi	r4,48
   18ee0:	00000106 	br	18ee8 <_dtoa_r+0x1580>
   18ee4:	102f883a 	mov	r23,r2
   18ee8:	b8bfffc4 	addi	r2,r23,-1
   18eec:	10c00007 	ldb	r3,0(r2)
   18ef0:	193ffc26 	beq	r3,r4,18ee4 <__alt_data_end+0xfffda6e4>
   18ef4:	d9801317 	ldw	r6,76(sp)
   18ef8:	d9800515 	stw	r6,20(sp)
   18efc:	003c4406 	br	18010 <__alt_data_end+0xfffd9810>
   18f00:	d9801317 	ldw	r6,76(sp)
   18f04:	d9800515 	stw	r6,20(sp)
   18f08:	003cea06 	br	182b4 <__alt_data_end+0xfffd9ab4>
   18f0c:	dd800f17 	ldw	r22,60(sp)
   18f10:	dcc01017 	ldw	r19,64(sp)
   18f14:	dc801217 	ldw	r18,72(sp)
   18f18:	003c6c06 	br	180cc <__alt_data_end+0xfffd98cc>
   18f1c:	903e031e 	bne	r18,zero,1872c <__alt_data_end+0xfffd9f2c>
   18f20:	003ebb06 	br	18a10 <__alt_data_end+0xfffda210>
   18f24:	103e6c1e 	bne	r2,zero,188d8 <__alt_data_end+0xfffda0d8>
   18f28:	4080004c 	andi	r2,r8,1
   18f2c:	103e6a26 	beq	r2,zero,188d8 <__alt_data_end+0xfffda0d8>
   18f30:	003e6606 	br	188cc <__alt_data_end+0xfffda0cc>
   18f34:	d8c00317 	ldw	r3,12(sp)
   18f38:	00800084 	movi	r2,2
   18f3c:	10c02916 	blt	r2,r3,18fe4 <_dtoa_r+0x167c>
   18f40:	d9000c17 	ldw	r4,48(sp)
   18f44:	003e8806 	br	18968 <__alt_data_end+0xfffda168>
   18f48:	04000084 	movi	r16,2
   18f4c:	003b9d06 	br	17dc4 <__alt_data_end+0xfffd95c4>
   18f50:	d9001317 	ldw	r4,76(sp)
   18f54:	d9000515 	stw	r4,20(sp)
   18f58:	003cd606 	br	182b4 <__alt_data_end+0xfffd9ab4>
   18f5c:	d8801317 	ldw	r2,76(sp)
   18f60:	d8800515 	stw	r2,20(sp)
   18f64:	003c2a06 	br	18010 <__alt_data_end+0xfffd9810>
   18f68:	d9800317 	ldw	r6,12(sp)
   18f6c:	00800084 	movi	r2,2
   18f70:	11801516 	blt	r2,r6,18fc8 <_dtoa_r+0x1660>
   18f74:	d9c00c17 	ldw	r7,48(sp)
   18f78:	d9c00615 	stw	r7,24(sp)
   18f7c:	003df706 	br	1875c <__alt_data_end+0xfffd9f5c>
   18f80:	193d3926 	beq	r3,r4,18468 <__alt_data_end+0xfffd9c68>
   18f84:	00c00f04 	movi	r3,60
   18f88:	1885c83a 	sub	r2,r3,r2
   18f8c:	003ddf06 	br	1870c <__alt_data_end+0xfffd9f0c>
   18f90:	e009883a 	mov	r4,fp
   18f94:	e0001115 	stw	zero,68(fp)
   18f98:	000b883a 	mov	r5,zero
   18f9c:	00194800 	call	19480 <_Balloc>
   18fa0:	d8800715 	stw	r2,28(sp)
   18fa4:	d8c00717 	ldw	r3,28(sp)
   18fa8:	00bfffc4 	movi	r2,-1
   18fac:	01000044 	movi	r4,1
   18fb0:	d8800c15 	stw	r2,48(sp)
   18fb4:	e0c01015 	stw	r3,64(fp)
   18fb8:	d9000b15 	stw	r4,44(sp)
   18fbc:	d8800615 	stw	r2,24(sp)
   18fc0:	d8002215 	stw	zero,136(sp)
   18fc4:	003c4106 	br	180cc <__alt_data_end+0xfffd98cc>
   18fc8:	d8c00c17 	ldw	r3,48(sp)
   18fcc:	d8c00615 	stw	r3,24(sp)
   18fd0:	003e7006 	br	18994 <__alt_data_end+0xfffda194>
   18fd4:	04400044 	movi	r17,1
   18fd8:	003b2006 	br	17c5c <__alt_data_end+0xfffd945c>
   18fdc:	000b883a 	mov	r5,zero
   18fe0:	003b3d06 	br	17cd8 <__alt_data_end+0xfffd94d8>
   18fe4:	d8800c17 	ldw	r2,48(sp)
   18fe8:	d8800615 	stw	r2,24(sp)
   18fec:	003e6906 	br	18994 <__alt_data_end+0xfffda194>

00018ff0 <__sflags>:
   18ff0:	28800007 	ldb	r2,0(r5)
   18ff4:	00c01c84 	movi	r3,114
   18ff8:	10c02426 	beq	r2,r3,1908c <__sflags+0x9c>
   18ffc:	00c01dc4 	movi	r3,119
   19000:	10c01e26 	beq	r2,r3,1907c <__sflags+0x8c>
   19004:	00c01844 	movi	r3,97
   19008:	10c00426 	beq	r2,r3,1901c <__sflags+0x2c>
   1900c:	00800584 	movi	r2,22
   19010:	20800015 	stw	r2,0(r4)
   19014:	0005883a 	mov	r2,zero
   19018:	f800283a 	ret
   1901c:	02c08204 	movi	r11,520
   19020:	01000044 	movi	r4,1
   19024:	00804204 	movi	r2,264
   19028:	01c00ac4 	movi	r7,43
   1902c:	02bff8c4 	movi	r10,-29
   19030:	027fff04 	movi	r9,-4
   19034:	02001e04 	movi	r8,120
   19038:	29400044 	addi	r5,r5,1
   1903c:	28c00007 	ldb	r3,0(r5)
   19040:	18000626 	beq	r3,zero,1905c <__sflags+0x6c>
   19044:	19c00826 	beq	r3,r7,19068 <__sflags+0x78>
   19048:	1a3ffb1e 	bne	r3,r8,19038 <__alt_data_end+0xfffda838>
   1904c:	29400044 	addi	r5,r5,1
   19050:	28c00007 	ldb	r3,0(r5)
   19054:	21020014 	ori	r4,r4,2048
   19058:	183ffa1e 	bne	r3,zero,19044 <__alt_data_end+0xfffda844>
   1905c:	22c8b03a 	or	r4,r4,r11
   19060:	31000015 	stw	r4,0(r6)
   19064:	f800283a 	ret
   19068:	1284703a 	and	r2,r2,r10
   1906c:	2248703a 	and	r4,r4,r9
   19070:	10800414 	ori	r2,r2,16
   19074:	21000094 	ori	r4,r4,2
   19078:	003fef06 	br	19038 <__alt_data_end+0xfffda838>
   1907c:	02c18004 	movi	r11,1536
   19080:	01000044 	movi	r4,1
   19084:	00800204 	movi	r2,8
   19088:	003fe706 	br	19028 <__alt_data_end+0xfffda828>
   1908c:	0017883a 	mov	r11,zero
   19090:	0009883a 	mov	r4,zero
   19094:	00800104 	movi	r2,4
   19098:	003fe306 	br	19028 <__alt_data_end+0xfffda828>

0001909c <_isatty_r>:
   1909c:	defffd04 	addi	sp,sp,-12
   190a0:	dc000015 	stw	r16,0(sp)
   190a4:	040000f4 	movhi	r16,3
   190a8:	dc400115 	stw	r17,4(sp)
   190ac:	842aed04 	addi	r16,r16,-21580
   190b0:	2023883a 	mov	r17,r4
   190b4:	2809883a 	mov	r4,r5
   190b8:	dfc00215 	stw	ra,8(sp)
   190bc:	80000015 	stw	zero,0(r16)
   190c0:	00287740 	call	28774 <isatty>
   190c4:	00ffffc4 	movi	r3,-1
   190c8:	10c00526 	beq	r2,r3,190e0 <_isatty_r+0x44>
   190cc:	dfc00217 	ldw	ra,8(sp)
   190d0:	dc400117 	ldw	r17,4(sp)
   190d4:	dc000017 	ldw	r16,0(sp)
   190d8:	dec00304 	addi	sp,sp,12
   190dc:	f800283a 	ret
   190e0:	80c00017 	ldw	r3,0(r16)
   190e4:	183ff926 	beq	r3,zero,190cc <__alt_data_end+0xfffda8cc>
   190e8:	88c00015 	stw	r3,0(r17)
   190ec:	003ff706 	br	190cc <__alt_data_end+0xfffda8cc>

000190f0 <iswspace>:
   190f0:	00803fc4 	movi	r2,255
   190f4:	11000836 	bltu	r2,r4,19118 <iswspace+0x28>
   190f8:	008000f4 	movhi	r2,3
   190fc:	10a8a504 	addi	r2,r2,-23916
   19100:	10800017 	ldw	r2,0(r2)
   19104:	1109883a 	add	r4,r2,r4
   19108:	20800043 	ldbu	r2,1(r4)
   1910c:	1080020c 	andi	r2,r2,8
   19110:	10803fcc 	andi	r2,r2,255
   19114:	f800283a 	ret
   19118:	0005883a 	mov	r2,zero
   1911c:	f800283a 	ret

00019120 <_setlocale_r>:
   19120:	30001b26 	beq	r6,zero,19190 <_setlocale_r+0x70>
   19124:	014000f4 	movhi	r5,3
   19128:	defffe04 	addi	sp,sp,-8
   1912c:	29657004 	addi	r5,r5,-27200
   19130:	3009883a 	mov	r4,r6
   19134:	dc000015 	stw	r16,0(sp)
   19138:	dfc00115 	stw	ra,4(sp)
   1913c:	3021883a 	mov	r16,r6
   19140:	00136840 	call	13684 <strcmp>
   19144:	1000061e 	bne	r2,zero,19160 <_setlocale_r+0x40>
   19148:	008000f4 	movhi	r2,3
   1914c:	10a4a804 	addi	r2,r2,-28000
   19150:	dfc00117 	ldw	ra,4(sp)
   19154:	dc000017 	ldw	r16,0(sp)
   19158:	dec00204 	addi	sp,sp,8
   1915c:	f800283a 	ret
   19160:	014000f4 	movhi	r5,3
   19164:	2964a804 	addi	r5,r5,-28000
   19168:	8009883a 	mov	r4,r16
   1916c:	00136840 	call	13684 <strcmp>
   19170:	103ff526 	beq	r2,zero,19148 <__alt_data_end+0xfffda948>
   19174:	014000f4 	movhi	r5,3
   19178:	29635404 	addi	r5,r5,-29360
   1917c:	8009883a 	mov	r4,r16
   19180:	00136840 	call	13684 <strcmp>
   19184:	103ff026 	beq	r2,zero,19148 <__alt_data_end+0xfffda948>
   19188:	0005883a 	mov	r2,zero
   1918c:	003ff006 	br	19150 <__alt_data_end+0xfffda950>
   19190:	008000f4 	movhi	r2,3
   19194:	10a4a804 	addi	r2,r2,-28000
   19198:	f800283a 	ret

0001919c <__locale_charset>:
   1919c:	008000f4 	movhi	r2,3
   191a0:	10a88804 	addi	r2,r2,-24032
   191a4:	f800283a 	ret

000191a8 <__locale_mb_cur_max>:
   191a8:	008000f4 	movhi	r2,3
   191ac:	10a8a604 	addi	r2,r2,-23912
   191b0:	10800017 	ldw	r2,0(r2)
   191b4:	f800283a 	ret

000191b8 <__locale_msgcharset>:
   191b8:	008000f4 	movhi	r2,3
   191bc:	10a88004 	addi	r2,r2,-24064
   191c0:	f800283a 	ret

000191c4 <__locale_cjk_lang>:
   191c4:	0005883a 	mov	r2,zero
   191c8:	f800283a 	ret

000191cc <_localeconv_r>:
   191cc:	008000f4 	movhi	r2,3
   191d0:	10a89004 	addi	r2,r2,-24000
   191d4:	f800283a 	ret

000191d8 <setlocale>:
   191d8:	008000f4 	movhi	r2,3
   191dc:	10a8a204 	addi	r2,r2,-23928
   191e0:	280d883a 	mov	r6,r5
   191e4:	200b883a 	mov	r5,r4
   191e8:	11000017 	ldw	r4,0(r2)
   191ec:	00191201 	jmpi	19120 <_setlocale_r>

000191f0 <localeconv>:
   191f0:	008000f4 	movhi	r2,3
   191f4:	10a89004 	addi	r2,r2,-24000
   191f8:	f800283a 	ret

000191fc <_lseek_r>:
   191fc:	defffd04 	addi	sp,sp,-12
   19200:	2805883a 	mov	r2,r5
   19204:	dc000015 	stw	r16,0(sp)
   19208:	040000f4 	movhi	r16,3
   1920c:	dc400115 	stw	r17,4(sp)
   19210:	300b883a 	mov	r5,r6
   19214:	842aed04 	addi	r16,r16,-21580
   19218:	2023883a 	mov	r17,r4
   1921c:	380d883a 	mov	r6,r7
   19220:	1009883a 	mov	r4,r2
   19224:	dfc00215 	stw	ra,8(sp)
   19228:	80000015 	stw	zero,0(r16)
   1922c:	00288600 	call	28860 <lseek>
   19230:	00ffffc4 	movi	r3,-1
   19234:	10c00526 	beq	r2,r3,1924c <_lseek_r+0x50>
   19238:	dfc00217 	ldw	ra,8(sp)
   1923c:	dc400117 	ldw	r17,4(sp)
   19240:	dc000017 	ldw	r16,0(sp)
   19244:	dec00304 	addi	sp,sp,12
   19248:	f800283a 	ret
   1924c:	80c00017 	ldw	r3,0(r16)
   19250:	183ff926 	beq	r3,zero,19238 <__alt_data_end+0xfffdaa38>
   19254:	88c00015 	stw	r3,0(r17)
   19258:	003ff706 	br	19238 <__alt_data_end+0xfffdaa38>

0001925c <_mbrtowc_r>:
   1925c:	defff704 	addi	sp,sp,-36
   19260:	008000f4 	movhi	r2,3
   19264:	dc800715 	stw	r18,28(sp)
   19268:	dc400615 	stw	r17,24(sp)
   1926c:	dc000515 	stw	r16,20(sp)
   19270:	10a8a704 	addi	r2,r2,-23908
   19274:	dfc00815 	stw	ra,32(sp)
   19278:	2021883a 	mov	r16,r4
   1927c:	dc400917 	ldw	r17,36(sp)
   19280:	14800017 	ldw	r18,0(r2)
   19284:	30001626 	beq	r6,zero,192e0 <_mbrtowc_r+0x84>
   19288:	d9400215 	stw	r5,8(sp)
   1928c:	d9800315 	stw	r6,12(sp)
   19290:	d9c00415 	stw	r7,16(sp)
   19294:	001919c0 	call	1919c <__locale_charset>
   19298:	d9c00417 	ldw	r7,16(sp)
   1929c:	d9800317 	ldw	r6,12(sp)
   192a0:	d9400217 	ldw	r5,8(sp)
   192a4:	d8800015 	stw	r2,0(sp)
   192a8:	dc400115 	stw	r17,4(sp)
   192ac:	8009883a 	mov	r4,r16
   192b0:	903ee83a 	callr	r18
   192b4:	00ffffc4 	movi	r3,-1
   192b8:	10c0031e 	bne	r2,r3,192c8 <_mbrtowc_r+0x6c>
   192bc:	88000015 	stw	zero,0(r17)
   192c0:	00c02284 	movi	r3,138
   192c4:	80c00015 	stw	r3,0(r16)
   192c8:	dfc00817 	ldw	ra,32(sp)
   192cc:	dc800717 	ldw	r18,28(sp)
   192d0:	dc400617 	ldw	r17,24(sp)
   192d4:	dc000517 	ldw	r16,20(sp)
   192d8:	dec00904 	addi	sp,sp,36
   192dc:	f800283a 	ret
   192e0:	001919c0 	call	1919c <__locale_charset>
   192e4:	018000f4 	movhi	r6,3
   192e8:	31a35404 	addi	r6,r6,-29360
   192ec:	dc400115 	stw	r17,4(sp)
   192f0:	d8800015 	stw	r2,0(sp)
   192f4:	01c00044 	movi	r7,1
   192f8:	000b883a 	mov	r5,zero
   192fc:	8009883a 	mov	r4,r16
   19300:	903ee83a 	callr	r18
   19304:	003feb06 	br	192b4 <__alt_data_end+0xfffdaab4>

00019308 <mbrtowc>:
   19308:	defff704 	addi	sp,sp,-36
   1930c:	008000f4 	movhi	r2,3
   19310:	dc800415 	stw	r18,16(sp)
   19314:	dc400315 	stw	r17,12(sp)
   19318:	10a8a204 	addi	r2,r2,-23928
   1931c:	dfc00815 	stw	ra,32(sp)
   19320:	dd400715 	stw	r21,28(sp)
   19324:	dd000615 	stw	r20,24(sp)
   19328:	dcc00515 	stw	r19,20(sp)
   1932c:	dc000215 	stw	r16,8(sp)
   19330:	3825883a 	mov	r18,r7
   19334:	14400017 	ldw	r17,0(r2)
   19338:	28001c26 	beq	r5,zero,193ac <mbrtowc+0xa4>
   1933c:	008000f4 	movhi	r2,3
   19340:	10a8a704 	addi	r2,r2,-23908
   19344:	15400017 	ldw	r21,0(r2)
   19348:	2821883a 	mov	r16,r5
   1934c:	2027883a 	mov	r19,r4
   19350:	3029883a 	mov	r20,r6
   19354:	001919c0 	call	1919c <__locale_charset>
   19358:	d8800015 	stw	r2,0(sp)
   1935c:	dc800115 	stw	r18,4(sp)
   19360:	a00f883a 	mov	r7,r20
   19364:	800d883a 	mov	r6,r16
   19368:	980b883a 	mov	r5,r19
   1936c:	8809883a 	mov	r4,r17
   19370:	a83ee83a 	callr	r21
   19374:	00ffffc4 	movi	r3,-1
   19378:	10c0031e 	bne	r2,r3,19388 <mbrtowc+0x80>
   1937c:	90000015 	stw	zero,0(r18)
   19380:	00c02284 	movi	r3,138
   19384:	88c00015 	stw	r3,0(r17)
   19388:	dfc00817 	ldw	ra,32(sp)
   1938c:	dd400717 	ldw	r21,28(sp)
   19390:	dd000617 	ldw	r20,24(sp)
   19394:	dcc00517 	ldw	r19,20(sp)
   19398:	dc800417 	ldw	r18,16(sp)
   1939c:	dc400317 	ldw	r17,12(sp)
   193a0:	dc000217 	ldw	r16,8(sp)
   193a4:	dec00904 	addi	sp,sp,36
   193a8:	f800283a 	ret
   193ac:	008000f4 	movhi	r2,3
   193b0:	10a8a704 	addi	r2,r2,-23908
   193b4:	14000017 	ldw	r16,0(r2)
   193b8:	001919c0 	call	1919c <__locale_charset>
   193bc:	018000f4 	movhi	r6,3
   193c0:	31a35404 	addi	r6,r6,-29360
   193c4:	dc800115 	stw	r18,4(sp)
   193c8:	d8800015 	stw	r2,0(sp)
   193cc:	01c00044 	movi	r7,1
   193d0:	000b883a 	mov	r5,zero
   193d4:	8809883a 	mov	r4,r17
   193d8:	803ee83a 	callr	r16
   193dc:	003fe506 	br	19374 <__alt_data_end+0xfffdab74>

000193e0 <__ascii_mbtowc>:
   193e0:	deffff04 	addi	sp,sp,-4
   193e4:	28000826 	beq	r5,zero,19408 <__ascii_mbtowc+0x28>
   193e8:	30000926 	beq	r6,zero,19410 <__ascii_mbtowc+0x30>
   193ec:	38000b26 	beq	r7,zero,1941c <__ascii_mbtowc+0x3c>
   193f0:	30800003 	ldbu	r2,0(r6)
   193f4:	28800015 	stw	r2,0(r5)
   193f8:	30800003 	ldbu	r2,0(r6)
   193fc:	1004c03a 	cmpne	r2,r2,zero
   19400:	dec00104 	addi	sp,sp,4
   19404:	f800283a 	ret
   19408:	d80b883a 	mov	r5,sp
   1940c:	303ff71e 	bne	r6,zero,193ec <__alt_data_end+0xfffdabec>
   19410:	0005883a 	mov	r2,zero
   19414:	dec00104 	addi	sp,sp,4
   19418:	f800283a 	ret
   1941c:	00bfff84 	movi	r2,-2
   19420:	003ff706 	br	19400 <__alt_data_end+0xfffdac00>

00019424 <_mbtowc_r>:
   19424:	008000f4 	movhi	r2,3
   19428:	defff804 	addi	sp,sp,-32
   1942c:	10a8a704 	addi	r2,r2,-23908
   19430:	dfc00715 	stw	ra,28(sp)
   19434:	dc000615 	stw	r16,24(sp)
   19438:	14000017 	ldw	r16,0(r2)
   1943c:	d9000215 	stw	r4,8(sp)
   19440:	d9400315 	stw	r5,12(sp)
   19444:	d9800415 	stw	r6,16(sp)
   19448:	d9c00515 	stw	r7,20(sp)
   1944c:	001919c0 	call	1919c <__locale_charset>
   19450:	d8800015 	stw	r2,0(sp)
   19454:	d8800817 	ldw	r2,32(sp)
   19458:	d9c00517 	ldw	r7,20(sp)
   1945c:	d9800417 	ldw	r6,16(sp)
   19460:	d9400317 	ldw	r5,12(sp)
   19464:	d9000217 	ldw	r4,8(sp)
   19468:	d8800115 	stw	r2,4(sp)
   1946c:	803ee83a 	callr	r16
   19470:	dfc00717 	ldw	ra,28(sp)
   19474:	dc000617 	ldw	r16,24(sp)
   19478:	dec00804 	addi	sp,sp,32
   1947c:	f800283a 	ret

00019480 <_Balloc>:
   19480:	20801317 	ldw	r2,76(r4)
   19484:	defffc04 	addi	sp,sp,-16
   19488:	dc400115 	stw	r17,4(sp)
   1948c:	dc000015 	stw	r16,0(sp)
   19490:	dfc00315 	stw	ra,12(sp)
   19494:	dc800215 	stw	r18,8(sp)
   19498:	2023883a 	mov	r17,r4
   1949c:	2821883a 	mov	r16,r5
   194a0:	10000f26 	beq	r2,zero,194e0 <_Balloc+0x60>
   194a4:	8407883a 	add	r3,r16,r16
   194a8:	18c7883a 	add	r3,r3,r3
   194ac:	10c7883a 	add	r3,r2,r3
   194b0:	18800017 	ldw	r2,0(r3)
   194b4:	10001126 	beq	r2,zero,194fc <_Balloc+0x7c>
   194b8:	11000017 	ldw	r4,0(r2)
   194bc:	19000015 	stw	r4,0(r3)
   194c0:	10000415 	stw	zero,16(r2)
   194c4:	10000315 	stw	zero,12(r2)
   194c8:	dfc00317 	ldw	ra,12(sp)
   194cc:	dc800217 	ldw	r18,8(sp)
   194d0:	dc400117 	ldw	r17,4(sp)
   194d4:	dc000017 	ldw	r16,0(sp)
   194d8:	dec00404 	addi	sp,sp,16
   194dc:	f800283a 	ret
   194e0:	01800844 	movi	r6,33
   194e4:	01400104 	movi	r5,4
   194e8:	0021c780 	call	21c78 <_calloc_r>
   194ec:	88801315 	stw	r2,76(r17)
   194f0:	103fec1e 	bne	r2,zero,194a4 <__alt_data_end+0xfffdaca4>
   194f4:	0005883a 	mov	r2,zero
   194f8:	003ff306 	br	194c8 <__alt_data_end+0xfffdacc8>
   194fc:	01400044 	movi	r5,1
   19500:	2c24983a 	sll	r18,r5,r16
   19504:	8809883a 	mov	r4,r17
   19508:	91800144 	addi	r6,r18,5
   1950c:	318d883a 	add	r6,r6,r6
   19510:	318d883a 	add	r6,r6,r6
   19514:	0021c780 	call	21c78 <_calloc_r>
   19518:	103ff626 	beq	r2,zero,194f4 <__alt_data_end+0xfffdacf4>
   1951c:	14000115 	stw	r16,4(r2)
   19520:	14800215 	stw	r18,8(r2)
   19524:	003fe606 	br	194c0 <__alt_data_end+0xfffdacc0>

00019528 <_Bfree>:
   19528:	28000826 	beq	r5,zero,1954c <_Bfree+0x24>
   1952c:	28c00117 	ldw	r3,4(r5)
   19530:	20801317 	ldw	r2,76(r4)
   19534:	18c7883a 	add	r3,r3,r3
   19538:	18c7883a 	add	r3,r3,r3
   1953c:	10c5883a 	add	r2,r2,r3
   19540:	10c00017 	ldw	r3,0(r2)
   19544:	28c00015 	stw	r3,0(r5)
   19548:	11400015 	stw	r5,0(r2)
   1954c:	f800283a 	ret

00019550 <__multadd>:
   19550:	defff704 	addi	sp,sp,-36
   19554:	dc800215 	stw	r18,8(sp)
   19558:	2c800417 	ldw	r18,16(r5)
   1955c:	dd800615 	stw	r22,24(sp)
   19560:	dd400515 	stw	r21,20(sp)
   19564:	dd000415 	stw	r20,16(sp)
   19568:	dcc00315 	stw	r19,12(sp)
   1956c:	dc400115 	stw	r17,4(sp)
   19570:	dc000015 	stw	r16,0(sp)
   19574:	dfc00815 	stw	ra,32(sp)
   19578:	ddc00715 	stw	r23,28(sp)
   1957c:	2827883a 	mov	r19,r5
   19580:	2029883a 	mov	r20,r4
   19584:	3023883a 	mov	r17,r6
   19588:	3821883a 	mov	r16,r7
   1958c:	2d400504 	addi	r21,r5,20
   19590:	002d883a 	mov	r22,zero
   19594:	adc00017 	ldw	r23,0(r21)
   19598:	880b883a 	mov	r5,r17
   1959c:	ad400104 	addi	r21,r21,4
   195a0:	b93fffcc 	andi	r4,r23,65535
   195a4:	002587c0 	call	2587c <__mulsi3>
   195a8:	b808d43a 	srli	r4,r23,16
   195ac:	880b883a 	mov	r5,r17
   195b0:	1421883a 	add	r16,r2,r16
   195b4:	002587c0 	call	2587c <__mulsi3>
   195b8:	800ed43a 	srli	r7,r16,16
   195bc:	80ffffcc 	andi	r3,r16,65535
   195c0:	b5800044 	addi	r22,r22,1
   195c4:	11c5883a 	add	r2,r2,r7
   195c8:	100e943a 	slli	r7,r2,16
   195cc:	1020d43a 	srli	r16,r2,16
   195d0:	38c7883a 	add	r3,r7,r3
   195d4:	a8ffff15 	stw	r3,-4(r21)
   195d8:	b4bfee16 	blt	r22,r18,19594 <__alt_data_end+0xfffdad94>
   195dc:	80000926 	beq	r16,zero,19604 <__multadd+0xb4>
   195e0:	98800217 	ldw	r2,8(r19)
   195e4:	9080130e 	bge	r18,r2,19634 <__multadd+0xe4>
   195e8:	90800144 	addi	r2,r18,5
   195ec:	1085883a 	add	r2,r2,r2
   195f0:	1085883a 	add	r2,r2,r2
   195f4:	9885883a 	add	r2,r19,r2
   195f8:	14000015 	stw	r16,0(r2)
   195fc:	94800044 	addi	r18,r18,1
   19600:	9c800415 	stw	r18,16(r19)
   19604:	9805883a 	mov	r2,r19
   19608:	dfc00817 	ldw	ra,32(sp)
   1960c:	ddc00717 	ldw	r23,28(sp)
   19610:	dd800617 	ldw	r22,24(sp)
   19614:	dd400517 	ldw	r21,20(sp)
   19618:	dd000417 	ldw	r20,16(sp)
   1961c:	dcc00317 	ldw	r19,12(sp)
   19620:	dc800217 	ldw	r18,8(sp)
   19624:	dc400117 	ldw	r17,4(sp)
   19628:	dc000017 	ldw	r16,0(sp)
   1962c:	dec00904 	addi	sp,sp,36
   19630:	f800283a 	ret
   19634:	99400117 	ldw	r5,4(r19)
   19638:	a009883a 	mov	r4,r20
   1963c:	29400044 	addi	r5,r5,1
   19640:	00194800 	call	19480 <_Balloc>
   19644:	99800417 	ldw	r6,16(r19)
   19648:	99400304 	addi	r5,r19,12
   1964c:	11000304 	addi	r4,r2,12
   19650:	31800084 	addi	r6,r6,2
   19654:	318d883a 	add	r6,r6,r6
   19658:	318d883a 	add	r6,r6,r6
   1965c:	1023883a 	mov	r17,r2
   19660:	00127200 	call	12720 <memcpy>
   19664:	98000a26 	beq	r19,zero,19690 <__multadd+0x140>
   19668:	98c00117 	ldw	r3,4(r19)
   1966c:	a0801317 	ldw	r2,76(r20)
   19670:	18c7883a 	add	r3,r3,r3
   19674:	18c7883a 	add	r3,r3,r3
   19678:	10c5883a 	add	r2,r2,r3
   1967c:	10c00017 	ldw	r3,0(r2)
   19680:	98c00015 	stw	r3,0(r19)
   19684:	14c00015 	stw	r19,0(r2)
   19688:	8827883a 	mov	r19,r17
   1968c:	003fd606 	br	195e8 <__alt_data_end+0xfffdade8>
   19690:	8827883a 	mov	r19,r17
   19694:	003fd406 	br	195e8 <__alt_data_end+0xfffdade8>

00019698 <__s2b>:
   19698:	defff904 	addi	sp,sp,-28
   1969c:	dc400115 	stw	r17,4(sp)
   196a0:	dc000015 	stw	r16,0(sp)
   196a4:	2023883a 	mov	r17,r4
   196a8:	2821883a 	mov	r16,r5
   196ac:	39000204 	addi	r4,r7,8
   196b0:	01400244 	movi	r5,9
   196b4:	dcc00315 	stw	r19,12(sp)
   196b8:	dc800215 	stw	r18,8(sp)
   196bc:	dfc00615 	stw	ra,24(sp)
   196c0:	dd400515 	stw	r21,20(sp)
   196c4:	dd000415 	stw	r20,16(sp)
   196c8:	3825883a 	mov	r18,r7
   196cc:	3027883a 	mov	r19,r6
   196d0:	00256c80 	call	256c8 <__divsi3>
   196d4:	00c00044 	movi	r3,1
   196d8:	000b883a 	mov	r5,zero
   196dc:	1880030e 	bge	r3,r2,196ec <__s2b+0x54>
   196e0:	18c7883a 	add	r3,r3,r3
   196e4:	29400044 	addi	r5,r5,1
   196e8:	18bffd16 	blt	r3,r2,196e0 <__alt_data_end+0xfffdaee0>
   196ec:	8809883a 	mov	r4,r17
   196f0:	00194800 	call	19480 <_Balloc>
   196f4:	d8c00717 	ldw	r3,28(sp)
   196f8:	10c00515 	stw	r3,20(r2)
   196fc:	00c00044 	movi	r3,1
   19700:	10c00415 	stw	r3,16(r2)
   19704:	00c00244 	movi	r3,9
   19708:	1cc0210e 	bge	r3,r19,19790 <__s2b+0xf8>
   1970c:	80eb883a 	add	r21,r16,r3
   19710:	a829883a 	mov	r20,r21
   19714:	84e1883a 	add	r16,r16,r19
   19718:	a1c00007 	ldb	r7,0(r20)
   1971c:	01800284 	movi	r6,10
   19720:	a5000044 	addi	r20,r20,1
   19724:	100b883a 	mov	r5,r2
   19728:	39fff404 	addi	r7,r7,-48
   1972c:	8809883a 	mov	r4,r17
   19730:	00195500 	call	19550 <__multadd>
   19734:	a43ff81e 	bne	r20,r16,19718 <__alt_data_end+0xfffdaf18>
   19738:	ace1883a 	add	r16,r21,r19
   1973c:	843ffe04 	addi	r16,r16,-8
   19740:	9c800a0e 	bge	r19,r18,1976c <__s2b+0xd4>
   19744:	94e5c83a 	sub	r18,r18,r19
   19748:	84a5883a 	add	r18,r16,r18
   1974c:	81c00007 	ldb	r7,0(r16)
   19750:	01800284 	movi	r6,10
   19754:	84000044 	addi	r16,r16,1
   19758:	100b883a 	mov	r5,r2
   1975c:	39fff404 	addi	r7,r7,-48
   19760:	8809883a 	mov	r4,r17
   19764:	00195500 	call	19550 <__multadd>
   19768:	84bff81e 	bne	r16,r18,1974c <__alt_data_end+0xfffdaf4c>
   1976c:	dfc00617 	ldw	ra,24(sp)
   19770:	dd400517 	ldw	r21,20(sp)
   19774:	dd000417 	ldw	r20,16(sp)
   19778:	dcc00317 	ldw	r19,12(sp)
   1977c:	dc800217 	ldw	r18,8(sp)
   19780:	dc400117 	ldw	r17,4(sp)
   19784:	dc000017 	ldw	r16,0(sp)
   19788:	dec00704 	addi	sp,sp,28
   1978c:	f800283a 	ret
   19790:	84000284 	addi	r16,r16,10
   19794:	1827883a 	mov	r19,r3
   19798:	003fe906 	br	19740 <__alt_data_end+0xfffdaf40>

0001979c <__hi0bits>:
   1979c:	20bfffec 	andhi	r2,r4,65535
   197a0:	1000141e 	bne	r2,zero,197f4 <__hi0bits+0x58>
   197a4:	2008943a 	slli	r4,r4,16
   197a8:	00800404 	movi	r2,16
   197ac:	20ffc02c 	andhi	r3,r4,65280
   197b0:	1800021e 	bne	r3,zero,197bc <__hi0bits+0x20>
   197b4:	2008923a 	slli	r4,r4,8
   197b8:	10800204 	addi	r2,r2,8
   197bc:	20fc002c 	andhi	r3,r4,61440
   197c0:	1800021e 	bne	r3,zero,197cc <__hi0bits+0x30>
   197c4:	2008913a 	slli	r4,r4,4
   197c8:	10800104 	addi	r2,r2,4
   197cc:	20f0002c 	andhi	r3,r4,49152
   197d0:	1800031e 	bne	r3,zero,197e0 <__hi0bits+0x44>
   197d4:	2109883a 	add	r4,r4,r4
   197d8:	10800084 	addi	r2,r2,2
   197dc:	2109883a 	add	r4,r4,r4
   197e0:	20000316 	blt	r4,zero,197f0 <__hi0bits+0x54>
   197e4:	2110002c 	andhi	r4,r4,16384
   197e8:	2000041e 	bne	r4,zero,197fc <__hi0bits+0x60>
   197ec:	00800804 	movi	r2,32
   197f0:	f800283a 	ret
   197f4:	0005883a 	mov	r2,zero
   197f8:	003fec06 	br	197ac <__alt_data_end+0xfffdafac>
   197fc:	10800044 	addi	r2,r2,1
   19800:	f800283a 	ret

00019804 <__lo0bits>:
   19804:	20c00017 	ldw	r3,0(r4)
   19808:	188001cc 	andi	r2,r3,7
   1980c:	10000826 	beq	r2,zero,19830 <__lo0bits+0x2c>
   19810:	1880004c 	andi	r2,r3,1
   19814:	1000211e 	bne	r2,zero,1989c <__lo0bits+0x98>
   19818:	1880008c 	andi	r2,r3,2
   1981c:	1000211e 	bne	r2,zero,198a4 <__lo0bits+0xa0>
   19820:	1806d0ba 	srli	r3,r3,2
   19824:	00800084 	movi	r2,2
   19828:	20c00015 	stw	r3,0(r4)
   1982c:	f800283a 	ret
   19830:	18bfffcc 	andi	r2,r3,65535
   19834:	10001326 	beq	r2,zero,19884 <__lo0bits+0x80>
   19838:	0005883a 	mov	r2,zero
   1983c:	19403fcc 	andi	r5,r3,255
   19840:	2800021e 	bne	r5,zero,1984c <__lo0bits+0x48>
   19844:	1806d23a 	srli	r3,r3,8
   19848:	10800204 	addi	r2,r2,8
   1984c:	194003cc 	andi	r5,r3,15
   19850:	2800021e 	bne	r5,zero,1985c <__lo0bits+0x58>
   19854:	1806d13a 	srli	r3,r3,4
   19858:	10800104 	addi	r2,r2,4
   1985c:	194000cc 	andi	r5,r3,3
   19860:	2800021e 	bne	r5,zero,1986c <__lo0bits+0x68>
   19864:	1806d0ba 	srli	r3,r3,2
   19868:	10800084 	addi	r2,r2,2
   1986c:	1940004c 	andi	r5,r3,1
   19870:	2800081e 	bne	r5,zero,19894 <__lo0bits+0x90>
   19874:	1806d07a 	srli	r3,r3,1
   19878:	1800051e 	bne	r3,zero,19890 <__lo0bits+0x8c>
   1987c:	00800804 	movi	r2,32
   19880:	f800283a 	ret
   19884:	1806d43a 	srli	r3,r3,16
   19888:	00800404 	movi	r2,16
   1988c:	003feb06 	br	1983c <__alt_data_end+0xfffdb03c>
   19890:	10800044 	addi	r2,r2,1
   19894:	20c00015 	stw	r3,0(r4)
   19898:	f800283a 	ret
   1989c:	0005883a 	mov	r2,zero
   198a0:	f800283a 	ret
   198a4:	1806d07a 	srli	r3,r3,1
   198a8:	00800044 	movi	r2,1
   198ac:	20c00015 	stw	r3,0(r4)
   198b0:	f800283a 	ret

000198b4 <__i2b>:
   198b4:	defffd04 	addi	sp,sp,-12
   198b8:	dc000015 	stw	r16,0(sp)
   198bc:	04000044 	movi	r16,1
   198c0:	dc400115 	stw	r17,4(sp)
   198c4:	2823883a 	mov	r17,r5
   198c8:	800b883a 	mov	r5,r16
   198cc:	dfc00215 	stw	ra,8(sp)
   198d0:	00194800 	call	19480 <_Balloc>
   198d4:	14400515 	stw	r17,20(r2)
   198d8:	14000415 	stw	r16,16(r2)
   198dc:	dfc00217 	ldw	ra,8(sp)
   198e0:	dc400117 	ldw	r17,4(sp)
   198e4:	dc000017 	ldw	r16,0(sp)
   198e8:	dec00304 	addi	sp,sp,12
   198ec:	f800283a 	ret

000198f0 <__multiply>:
   198f0:	deffef04 	addi	sp,sp,-68
   198f4:	dc400815 	stw	r17,32(sp)
   198f8:	dc000715 	stw	r16,28(sp)
   198fc:	34400417 	ldw	r17,16(r6)
   19900:	2c000417 	ldw	r16,16(r5)
   19904:	dd800d15 	stw	r22,52(sp)
   19908:	dc800915 	stw	r18,36(sp)
   1990c:	dfc01015 	stw	ra,64(sp)
   19910:	df000f15 	stw	fp,60(sp)
   19914:	ddc00e15 	stw	r23,56(sp)
   19918:	dd400c15 	stw	r21,48(sp)
   1991c:	dd000b15 	stw	r20,44(sp)
   19920:	dcc00a15 	stw	r19,40(sp)
   19924:	2825883a 	mov	r18,r5
   19928:	302d883a 	mov	r22,r6
   1992c:	8440050e 	bge	r16,r17,19944 <__multiply+0x54>
   19930:	8007883a 	mov	r3,r16
   19934:	3025883a 	mov	r18,r6
   19938:	8821883a 	mov	r16,r17
   1993c:	282d883a 	mov	r22,r5
   19940:	1823883a 	mov	r17,r3
   19944:	90800217 	ldw	r2,8(r18)
   19948:	8447883a 	add	r3,r16,r17
   1994c:	d8c00215 	stw	r3,8(sp)
   19950:	91400117 	ldw	r5,4(r18)
   19954:	10c0010e 	bge	r2,r3,1995c <__multiply+0x6c>
   19958:	29400044 	addi	r5,r5,1
   1995c:	00194800 	call	19480 <_Balloc>
   19960:	d8c00217 	ldw	r3,8(sp)
   19964:	d8800615 	stw	r2,24(sp)
   19968:	18eb883a 	add	r21,r3,r3
   1996c:	ad6b883a 	add	r21,r21,r21
   19970:	10c00504 	addi	r3,r2,20
   19974:	1d6b883a 	add	r21,r3,r21
   19978:	d8c00115 	stw	r3,4(sp)
   1997c:	dd400315 	stw	r21,12(sp)
   19980:	1805883a 	mov	r2,r3
   19984:	1d40042e 	bgeu	r3,r21,19998 <__multiply+0xa8>
   19988:	d8c00317 	ldw	r3,12(sp)
   1998c:	10000015 	stw	zero,0(r2)
   19990:	10800104 	addi	r2,r2,4
   19994:	10fffc36 	bltu	r2,r3,19988 <__alt_data_end+0xfffdb188>
   19998:	8c63883a 	add	r17,r17,r17
   1999c:	b5800504 	addi	r22,r22,20
   199a0:	8c63883a 	add	r17,r17,r17
   199a4:	94800504 	addi	r18,r18,20
   199a8:	8421883a 	add	r16,r16,r16
   199ac:	b463883a 	add	r17,r22,r17
   199b0:	8421883a 	add	r16,r16,r16
   199b4:	dd800015 	stw	r22,0(sp)
   199b8:	dc800415 	stw	r18,16(sp)
   199bc:	dc400515 	stw	r17,20(sp)
   199c0:	9429883a 	add	r20,r18,r16
   199c4:	b4404f2e 	bgeu	r22,r17,19b04 <__multiply+0x214>
   199c8:	d8c00017 	ldw	r3,0(sp)
   199cc:	1c800017 	ldw	r18,0(r3)
   199d0:	947fffcc 	andi	r17,r18,65535
   199d4:	88001e26 	beq	r17,zero,19a50 <__multiply+0x160>
   199d8:	dd800117 	ldw	r22,4(sp)
   199dc:	dd400417 	ldw	r21,16(sp)
   199e0:	0027883a 	mov	r19,zero
   199e4:	ac800017 	ldw	r18,0(r21)
   199e8:	b4000017 	ldw	r16,0(r22)
   199ec:	880b883a 	mov	r5,r17
   199f0:	913fffcc 	andi	r4,r18,65535
   199f4:	002587c0 	call	2587c <__mulsi3>
   199f8:	9008d43a 	srli	r4,r18,16
   199fc:	84bfffcc 	andi	r18,r16,65535
   19a00:	1485883a 	add	r2,r2,r18
   19a04:	14e5883a 	add	r18,r2,r19
   19a08:	8020d43a 	srli	r16,r16,16
   19a0c:	9026d43a 	srli	r19,r18,16
   19a10:	880b883a 	mov	r5,r17
   19a14:	002587c0 	call	2587c <__mulsi3>
   19a18:	1405883a 	add	r2,r2,r16
   19a1c:	14e1883a 	add	r16,r2,r19
   19a20:	90ffffcc 	andi	r3,r18,65535
   19a24:	8024943a 	slli	r18,r16,16
   19a28:	ad400104 	addi	r21,r21,4
   19a2c:	b005883a 	mov	r2,r22
   19a30:	90c6b03a 	or	r3,r18,r3
   19a34:	b0c00015 	stw	r3,0(r22)
   19a38:	8026d43a 	srli	r19,r16,16
   19a3c:	b5800104 	addi	r22,r22,4
   19a40:	ad3fe836 	bltu	r21,r20,199e4 <__alt_data_end+0xfffdb1e4>
   19a44:	d8c00017 	ldw	r3,0(sp)
   19a48:	14c00115 	stw	r19,4(r2)
   19a4c:	1c800017 	ldw	r18,0(r3)
   19a50:	9024d43a 	srli	r18,r18,16
   19a54:	90002226 	beq	r18,zero,19ae0 <__multiply+0x1f0>
   19a58:	d8c00117 	ldw	r3,4(sp)
   19a5c:	dd800417 	ldw	r22,16(sp)
   19a60:	002f883a 	mov	r23,zero
   19a64:	1f000017 	ldw	fp,0(r3)
   19a68:	1823883a 	mov	r17,r3
   19a6c:	182b883a 	mov	r21,r3
   19a70:	e021883a 	mov	r16,fp
   19a74:	00000106 	br	19a7c <__multiply+0x18c>
   19a78:	982b883a 	mov	r21,r19
   19a7c:	b100000b 	ldhu	r4,0(r22)
   19a80:	8020d43a 	srli	r16,r16,16
   19a84:	900b883a 	mov	r5,r18
   19a88:	002587c0 	call	2587c <__mulsi3>
   19a8c:	1405883a 	add	r2,r2,r16
   19a90:	15ef883a 	add	r23,r2,r23
   19a94:	b804943a 	slli	r2,r23,16
   19a98:	e0ffffcc 	andi	r3,fp,65535
   19a9c:	8c400104 	addi	r17,r17,4
   19aa0:	10c6b03a 	or	r3,r2,r3
   19aa4:	88ffff15 	stw	r3,-4(r17)
   19aa8:	b5800104 	addi	r22,r22,4
   19aac:	b13fff17 	ldw	r4,-4(r22)
   19ab0:	acc00104 	addi	r19,r21,4
   19ab4:	900b883a 	mov	r5,r18
   19ab8:	2008d43a 	srli	r4,r4,16
   19abc:	9c000017 	ldw	r16,0(r19)
   19ac0:	002587c0 	call	2587c <__mulsi3>
   19ac4:	b806d43a 	srli	r3,r23,16
   19ac8:	813fffcc 	andi	r4,r16,65535
   19acc:	1105883a 	add	r2,r2,r4
   19ad0:	10f9883a 	add	fp,r2,r3
   19ad4:	e02ed43a 	srli	r23,fp,16
   19ad8:	b53fe736 	bltu	r22,r20,19a78 <__alt_data_end+0xfffdb278>
   19adc:	af000115 	stw	fp,4(r21)
   19ae0:	d8c00017 	ldw	r3,0(sp)
   19ae4:	d9000517 	ldw	r4,20(sp)
   19ae8:	18c00104 	addi	r3,r3,4
   19aec:	d8c00015 	stw	r3,0(sp)
   19af0:	d8c00117 	ldw	r3,4(sp)
   19af4:	18c00104 	addi	r3,r3,4
   19af8:	d8c00115 	stw	r3,4(sp)
   19afc:	d8c00017 	ldw	r3,0(sp)
   19b00:	193fb136 	bltu	r3,r4,199c8 <__alt_data_end+0xfffdb1c8>
   19b04:	d8c00217 	ldw	r3,8(sp)
   19b08:	00c00c0e 	bge	zero,r3,19b3c <__multiply+0x24c>
   19b0c:	d8c00317 	ldw	r3,12(sp)
   19b10:	18bfff17 	ldw	r2,-4(r3)
   19b14:	1d7fff04 	addi	r21,r3,-4
   19b18:	10000326 	beq	r2,zero,19b28 <__multiply+0x238>
   19b1c:	00000706 	br	19b3c <__multiply+0x24c>
   19b20:	a8800017 	ldw	r2,0(r21)
   19b24:	1000051e 	bne	r2,zero,19b3c <__multiply+0x24c>
   19b28:	d8c00217 	ldw	r3,8(sp)
   19b2c:	ad7fff04 	addi	r21,r21,-4
   19b30:	18ffffc4 	addi	r3,r3,-1
   19b34:	d8c00215 	stw	r3,8(sp)
   19b38:	183ff91e 	bne	r3,zero,19b20 <__alt_data_end+0xfffdb320>
   19b3c:	d8c00617 	ldw	r3,24(sp)
   19b40:	d9000217 	ldw	r4,8(sp)
   19b44:	1805883a 	mov	r2,r3
   19b48:	19000415 	stw	r4,16(r3)
   19b4c:	dfc01017 	ldw	ra,64(sp)
   19b50:	df000f17 	ldw	fp,60(sp)
   19b54:	ddc00e17 	ldw	r23,56(sp)
   19b58:	dd800d17 	ldw	r22,52(sp)
   19b5c:	dd400c17 	ldw	r21,48(sp)
   19b60:	dd000b17 	ldw	r20,44(sp)
   19b64:	dcc00a17 	ldw	r19,40(sp)
   19b68:	dc800917 	ldw	r18,36(sp)
   19b6c:	dc400817 	ldw	r17,32(sp)
   19b70:	dc000717 	ldw	r16,28(sp)
   19b74:	dec01104 	addi	sp,sp,68
   19b78:	f800283a 	ret

00019b7c <__pow5mult>:
   19b7c:	defffa04 	addi	sp,sp,-24
   19b80:	dcc00315 	stw	r19,12(sp)
   19b84:	dc000015 	stw	r16,0(sp)
   19b88:	dfc00515 	stw	ra,20(sp)
   19b8c:	dd000415 	stw	r20,16(sp)
   19b90:	dc800215 	stw	r18,8(sp)
   19b94:	dc400115 	stw	r17,4(sp)
   19b98:	308000cc 	andi	r2,r6,3
   19b9c:	3021883a 	mov	r16,r6
   19ba0:	2027883a 	mov	r19,r4
   19ba4:	10002f1e 	bne	r2,zero,19c64 <__pow5mult+0xe8>
   19ba8:	2825883a 	mov	r18,r5
   19bac:	8021d0ba 	srai	r16,r16,2
   19bb0:	80001a26 	beq	r16,zero,19c1c <__pow5mult+0xa0>
   19bb4:	9c401217 	ldw	r17,72(r19)
   19bb8:	8800061e 	bne	r17,zero,19bd4 <__pow5mult+0x58>
   19bbc:	00003406 	br	19c90 <__pow5mult+0x114>
   19bc0:	8021d07a 	srai	r16,r16,1
   19bc4:	80001526 	beq	r16,zero,19c1c <__pow5mult+0xa0>
   19bc8:	88800017 	ldw	r2,0(r17)
   19bcc:	10001c26 	beq	r2,zero,19c40 <__pow5mult+0xc4>
   19bd0:	1023883a 	mov	r17,r2
   19bd4:	8080004c 	andi	r2,r16,1
   19bd8:	103ff926 	beq	r2,zero,19bc0 <__alt_data_end+0xfffdb3c0>
   19bdc:	880d883a 	mov	r6,r17
   19be0:	900b883a 	mov	r5,r18
   19be4:	9809883a 	mov	r4,r19
   19be8:	00198f00 	call	198f0 <__multiply>
   19bec:	90001b26 	beq	r18,zero,19c5c <__pow5mult+0xe0>
   19bf0:	91000117 	ldw	r4,4(r18)
   19bf4:	98c01317 	ldw	r3,76(r19)
   19bf8:	8021d07a 	srai	r16,r16,1
   19bfc:	2109883a 	add	r4,r4,r4
   19c00:	2109883a 	add	r4,r4,r4
   19c04:	1907883a 	add	r3,r3,r4
   19c08:	19000017 	ldw	r4,0(r3)
   19c0c:	91000015 	stw	r4,0(r18)
   19c10:	1c800015 	stw	r18,0(r3)
   19c14:	1025883a 	mov	r18,r2
   19c18:	803feb1e 	bne	r16,zero,19bc8 <__alt_data_end+0xfffdb3c8>
   19c1c:	9005883a 	mov	r2,r18
   19c20:	dfc00517 	ldw	ra,20(sp)
   19c24:	dd000417 	ldw	r20,16(sp)
   19c28:	dcc00317 	ldw	r19,12(sp)
   19c2c:	dc800217 	ldw	r18,8(sp)
   19c30:	dc400117 	ldw	r17,4(sp)
   19c34:	dc000017 	ldw	r16,0(sp)
   19c38:	dec00604 	addi	sp,sp,24
   19c3c:	f800283a 	ret
   19c40:	880d883a 	mov	r6,r17
   19c44:	880b883a 	mov	r5,r17
   19c48:	9809883a 	mov	r4,r19
   19c4c:	00198f00 	call	198f0 <__multiply>
   19c50:	88800015 	stw	r2,0(r17)
   19c54:	10000015 	stw	zero,0(r2)
   19c58:	003fdd06 	br	19bd0 <__alt_data_end+0xfffdb3d0>
   19c5c:	1025883a 	mov	r18,r2
   19c60:	003fd706 	br	19bc0 <__alt_data_end+0xfffdb3c0>
   19c64:	10bfffc4 	addi	r2,r2,-1
   19c68:	1085883a 	add	r2,r2,r2
   19c6c:	00c000f4 	movhi	r3,3
   19c70:	18e57304 	addi	r3,r3,-27188
   19c74:	1085883a 	add	r2,r2,r2
   19c78:	1885883a 	add	r2,r3,r2
   19c7c:	11800017 	ldw	r6,0(r2)
   19c80:	000f883a 	mov	r7,zero
   19c84:	00195500 	call	19550 <__multadd>
   19c88:	1025883a 	mov	r18,r2
   19c8c:	003fc706 	br	19bac <__alt_data_end+0xfffdb3ac>
   19c90:	05000044 	movi	r20,1
   19c94:	a00b883a 	mov	r5,r20
   19c98:	9809883a 	mov	r4,r19
   19c9c:	00194800 	call	19480 <_Balloc>
   19ca0:	1023883a 	mov	r17,r2
   19ca4:	00809c44 	movi	r2,625
   19ca8:	88800515 	stw	r2,20(r17)
   19cac:	8d000415 	stw	r20,16(r17)
   19cb0:	9c401215 	stw	r17,72(r19)
   19cb4:	88000015 	stw	zero,0(r17)
   19cb8:	003fc606 	br	19bd4 <__alt_data_end+0xfffdb3d4>

00019cbc <__lshift>:
   19cbc:	defff904 	addi	sp,sp,-28
   19cc0:	dd400515 	stw	r21,20(sp)
   19cc4:	dcc00315 	stw	r19,12(sp)
   19cc8:	302bd17a 	srai	r21,r6,5
   19ccc:	2cc00417 	ldw	r19,16(r5)
   19cd0:	28800217 	ldw	r2,8(r5)
   19cd4:	dd000415 	stw	r20,16(sp)
   19cd8:	ace7883a 	add	r19,r21,r19
   19cdc:	dc800215 	stw	r18,8(sp)
   19ce0:	dc400115 	stw	r17,4(sp)
   19ce4:	dc000015 	stw	r16,0(sp)
   19ce8:	dfc00615 	stw	ra,24(sp)
   19cec:	9c000044 	addi	r16,r19,1
   19cf0:	2823883a 	mov	r17,r5
   19cf4:	3029883a 	mov	r20,r6
   19cf8:	2025883a 	mov	r18,r4
   19cfc:	29400117 	ldw	r5,4(r5)
   19d00:	1400030e 	bge	r2,r16,19d10 <__lshift+0x54>
   19d04:	1085883a 	add	r2,r2,r2
   19d08:	29400044 	addi	r5,r5,1
   19d0c:	143ffd16 	blt	r2,r16,19d04 <__alt_data_end+0xfffdb504>
   19d10:	9009883a 	mov	r4,r18
   19d14:	00194800 	call	19480 <_Balloc>
   19d18:	10c00504 	addi	r3,r2,20
   19d1c:	0540070e 	bge	zero,r21,19d3c <__lshift+0x80>
   19d20:	ad6b883a 	add	r21,r21,r21
   19d24:	ad6b883a 	add	r21,r21,r21
   19d28:	1809883a 	mov	r4,r3
   19d2c:	1d47883a 	add	r3,r3,r21
   19d30:	20000015 	stw	zero,0(r4)
   19d34:	21000104 	addi	r4,r4,4
   19d38:	193ffd1e 	bne	r3,r4,19d30 <__alt_data_end+0xfffdb530>
   19d3c:	8a000417 	ldw	r8,16(r17)
   19d40:	89000504 	addi	r4,r17,20
   19d44:	a18007cc 	andi	r6,r20,31
   19d48:	4211883a 	add	r8,r8,r8
   19d4c:	4211883a 	add	r8,r8,r8
   19d50:	2211883a 	add	r8,r4,r8
   19d54:	30002326 	beq	r6,zero,19de4 <__lshift+0x128>
   19d58:	02400804 	movi	r9,32
   19d5c:	4993c83a 	sub	r9,r9,r6
   19d60:	000b883a 	mov	r5,zero
   19d64:	21c00017 	ldw	r7,0(r4)
   19d68:	1815883a 	mov	r10,r3
   19d6c:	18c00104 	addi	r3,r3,4
   19d70:	398e983a 	sll	r7,r7,r6
   19d74:	21000104 	addi	r4,r4,4
   19d78:	394ab03a 	or	r5,r7,r5
   19d7c:	197fff15 	stw	r5,-4(r3)
   19d80:	217fff17 	ldw	r5,-4(r4)
   19d84:	2a4ad83a 	srl	r5,r5,r9
   19d88:	223ff636 	bltu	r4,r8,19d64 <__alt_data_end+0xfffdb564>
   19d8c:	51400115 	stw	r5,4(r10)
   19d90:	28001a1e 	bne	r5,zero,19dfc <__lshift+0x140>
   19d94:	843fffc4 	addi	r16,r16,-1
   19d98:	14000415 	stw	r16,16(r2)
   19d9c:	88000826 	beq	r17,zero,19dc0 <__lshift+0x104>
   19da0:	89000117 	ldw	r4,4(r17)
   19da4:	90c01317 	ldw	r3,76(r18)
   19da8:	2109883a 	add	r4,r4,r4
   19dac:	2109883a 	add	r4,r4,r4
   19db0:	1907883a 	add	r3,r3,r4
   19db4:	19000017 	ldw	r4,0(r3)
   19db8:	89000015 	stw	r4,0(r17)
   19dbc:	1c400015 	stw	r17,0(r3)
   19dc0:	dfc00617 	ldw	ra,24(sp)
   19dc4:	dd400517 	ldw	r21,20(sp)
   19dc8:	dd000417 	ldw	r20,16(sp)
   19dcc:	dcc00317 	ldw	r19,12(sp)
   19dd0:	dc800217 	ldw	r18,8(sp)
   19dd4:	dc400117 	ldw	r17,4(sp)
   19dd8:	dc000017 	ldw	r16,0(sp)
   19ddc:	dec00704 	addi	sp,sp,28
   19de0:	f800283a 	ret
   19de4:	21400017 	ldw	r5,0(r4)
   19de8:	18c00104 	addi	r3,r3,4
   19dec:	21000104 	addi	r4,r4,4
   19df0:	197fff15 	stw	r5,-4(r3)
   19df4:	223ffb36 	bltu	r4,r8,19de4 <__alt_data_end+0xfffdb5e4>
   19df8:	003fe606 	br	19d94 <__alt_data_end+0xfffdb594>
   19dfc:	9c000084 	addi	r16,r19,2
   19e00:	003fe406 	br	19d94 <__alt_data_end+0xfffdb594>

00019e04 <__mcmp>:
   19e04:	20800417 	ldw	r2,16(r4)
   19e08:	28c00417 	ldw	r3,16(r5)
   19e0c:	10c5c83a 	sub	r2,r2,r3
   19e10:	1000111e 	bne	r2,zero,19e58 <__mcmp+0x54>
   19e14:	18c7883a 	add	r3,r3,r3
   19e18:	18c7883a 	add	r3,r3,r3
   19e1c:	21000504 	addi	r4,r4,20
   19e20:	29400504 	addi	r5,r5,20
   19e24:	20c5883a 	add	r2,r4,r3
   19e28:	28cb883a 	add	r5,r5,r3
   19e2c:	00000106 	br	19e34 <__mcmp+0x30>
   19e30:	20800a2e 	bgeu	r4,r2,19e5c <__mcmp+0x58>
   19e34:	10bfff04 	addi	r2,r2,-4
   19e38:	297fff04 	addi	r5,r5,-4
   19e3c:	11800017 	ldw	r6,0(r2)
   19e40:	28c00017 	ldw	r3,0(r5)
   19e44:	30fffa26 	beq	r6,r3,19e30 <__alt_data_end+0xfffdb630>
   19e48:	30c00236 	bltu	r6,r3,19e54 <__mcmp+0x50>
   19e4c:	00800044 	movi	r2,1
   19e50:	f800283a 	ret
   19e54:	00bfffc4 	movi	r2,-1
   19e58:	f800283a 	ret
   19e5c:	0005883a 	mov	r2,zero
   19e60:	f800283a 	ret

00019e64 <__mdiff>:
   19e64:	28c00417 	ldw	r3,16(r5)
   19e68:	30800417 	ldw	r2,16(r6)
   19e6c:	defffa04 	addi	sp,sp,-24
   19e70:	dcc00315 	stw	r19,12(sp)
   19e74:	dc800215 	stw	r18,8(sp)
   19e78:	dfc00515 	stw	ra,20(sp)
   19e7c:	dd000415 	stw	r20,16(sp)
   19e80:	dc400115 	stw	r17,4(sp)
   19e84:	dc000015 	stw	r16,0(sp)
   19e88:	1887c83a 	sub	r3,r3,r2
   19e8c:	2825883a 	mov	r18,r5
   19e90:	3027883a 	mov	r19,r6
   19e94:	1800141e 	bne	r3,zero,19ee8 <__mdiff+0x84>
   19e98:	1085883a 	add	r2,r2,r2
   19e9c:	1085883a 	add	r2,r2,r2
   19ea0:	2a000504 	addi	r8,r5,20
   19ea4:	34000504 	addi	r16,r6,20
   19ea8:	4087883a 	add	r3,r8,r2
   19eac:	8085883a 	add	r2,r16,r2
   19eb0:	00000106 	br	19eb8 <__mdiff+0x54>
   19eb4:	40c0592e 	bgeu	r8,r3,1a01c <__mdiff+0x1b8>
   19eb8:	18ffff04 	addi	r3,r3,-4
   19ebc:	10bfff04 	addi	r2,r2,-4
   19ec0:	19c00017 	ldw	r7,0(r3)
   19ec4:	11400017 	ldw	r5,0(r2)
   19ec8:	397ffa26 	beq	r7,r5,19eb4 <__alt_data_end+0xfffdb6b4>
   19ecc:	3940592e 	bgeu	r7,r5,1a034 <__mdiff+0x1d0>
   19ed0:	9005883a 	mov	r2,r18
   19ed4:	4023883a 	mov	r17,r8
   19ed8:	9825883a 	mov	r18,r19
   19edc:	05000044 	movi	r20,1
   19ee0:	1027883a 	mov	r19,r2
   19ee4:	00000406 	br	19ef8 <__mdiff+0x94>
   19ee8:	18005616 	blt	r3,zero,1a044 <__mdiff+0x1e0>
   19eec:	34400504 	addi	r17,r6,20
   19ef0:	2c000504 	addi	r16,r5,20
   19ef4:	0029883a 	mov	r20,zero
   19ef8:	91400117 	ldw	r5,4(r18)
   19efc:	00194800 	call	19480 <_Balloc>
   19f00:	92400417 	ldw	r9,16(r18)
   19f04:	9b000417 	ldw	r12,16(r19)
   19f08:	12c00504 	addi	r11,r2,20
   19f0c:	4a51883a 	add	r8,r9,r9
   19f10:	6319883a 	add	r12,r12,r12
   19f14:	4211883a 	add	r8,r8,r8
   19f18:	6319883a 	add	r12,r12,r12
   19f1c:	15000315 	stw	r20,12(r2)
   19f20:	8211883a 	add	r8,r16,r8
   19f24:	8b19883a 	add	r12,r17,r12
   19f28:	0007883a 	mov	r3,zero
   19f2c:	81400017 	ldw	r5,0(r16)
   19f30:	89c00017 	ldw	r7,0(r17)
   19f34:	59800104 	addi	r6,r11,4
   19f38:	293fffcc 	andi	r4,r5,65535
   19f3c:	20c7883a 	add	r3,r4,r3
   19f40:	393fffcc 	andi	r4,r7,65535
   19f44:	1909c83a 	sub	r4,r3,r4
   19f48:	280ad43a 	srli	r5,r5,16
   19f4c:	380ed43a 	srli	r7,r7,16
   19f50:	2007d43a 	srai	r3,r4,16
   19f54:	213fffcc 	andi	r4,r4,65535
   19f58:	29cbc83a 	sub	r5,r5,r7
   19f5c:	28c7883a 	add	r3,r5,r3
   19f60:	180a943a 	slli	r5,r3,16
   19f64:	8c400104 	addi	r17,r17,4
   19f68:	84000104 	addi	r16,r16,4
   19f6c:	2908b03a 	or	r4,r5,r4
   19f70:	59000015 	stw	r4,0(r11)
   19f74:	1807d43a 	srai	r3,r3,16
   19f78:	3015883a 	mov	r10,r6
   19f7c:	3017883a 	mov	r11,r6
   19f80:	8b3fea36 	bltu	r17,r12,19f2c <__alt_data_end+0xfffdb72c>
   19f84:	8200162e 	bgeu	r16,r8,19fe0 <__mdiff+0x17c>
   19f88:	8017883a 	mov	r11,r16
   19f8c:	59400017 	ldw	r5,0(r11)
   19f90:	31800104 	addi	r6,r6,4
   19f94:	5ac00104 	addi	r11,r11,4
   19f98:	293fffcc 	andi	r4,r5,65535
   19f9c:	20c7883a 	add	r3,r4,r3
   19fa0:	280ed43a 	srli	r7,r5,16
   19fa4:	180bd43a 	srai	r5,r3,16
   19fa8:	193fffcc 	andi	r4,r3,65535
   19fac:	3947883a 	add	r3,r7,r5
   19fb0:	180a943a 	slli	r5,r3,16
   19fb4:	1807d43a 	srai	r3,r3,16
   19fb8:	2908b03a 	or	r4,r5,r4
   19fbc:	313fff15 	stw	r4,-4(r6)
   19fc0:	5a3ff236 	bltu	r11,r8,19f8c <__alt_data_end+0xfffdb78c>
   19fc4:	0406303a 	nor	r3,zero,r16
   19fc8:	1a07883a 	add	r3,r3,r8
   19fcc:	1806d0ba 	srli	r3,r3,2
   19fd0:	18c00044 	addi	r3,r3,1
   19fd4:	18c7883a 	add	r3,r3,r3
   19fd8:	18c7883a 	add	r3,r3,r3
   19fdc:	50d5883a 	add	r10,r10,r3
   19fe0:	50ffff04 	addi	r3,r10,-4
   19fe4:	2000041e 	bne	r4,zero,19ff8 <__mdiff+0x194>
   19fe8:	18ffff04 	addi	r3,r3,-4
   19fec:	19000017 	ldw	r4,0(r3)
   19ff0:	4a7fffc4 	addi	r9,r9,-1
   19ff4:	203ffc26 	beq	r4,zero,19fe8 <__alt_data_end+0xfffdb7e8>
   19ff8:	12400415 	stw	r9,16(r2)
   19ffc:	dfc00517 	ldw	ra,20(sp)
   1a000:	dd000417 	ldw	r20,16(sp)
   1a004:	dcc00317 	ldw	r19,12(sp)
   1a008:	dc800217 	ldw	r18,8(sp)
   1a00c:	dc400117 	ldw	r17,4(sp)
   1a010:	dc000017 	ldw	r16,0(sp)
   1a014:	dec00604 	addi	sp,sp,24
   1a018:	f800283a 	ret
   1a01c:	000b883a 	mov	r5,zero
   1a020:	00194800 	call	19480 <_Balloc>
   1a024:	00c00044 	movi	r3,1
   1a028:	10c00415 	stw	r3,16(r2)
   1a02c:	10000515 	stw	zero,20(r2)
   1a030:	003ff206 	br	19ffc <__alt_data_end+0xfffdb7fc>
   1a034:	8023883a 	mov	r17,r16
   1a038:	0029883a 	mov	r20,zero
   1a03c:	4021883a 	mov	r16,r8
   1a040:	003fad06 	br	19ef8 <__alt_data_end+0xfffdb6f8>
   1a044:	9005883a 	mov	r2,r18
   1a048:	94400504 	addi	r17,r18,20
   1a04c:	9c000504 	addi	r16,r19,20
   1a050:	9825883a 	mov	r18,r19
   1a054:	05000044 	movi	r20,1
   1a058:	1027883a 	mov	r19,r2
   1a05c:	003fa606 	br	19ef8 <__alt_data_end+0xfffdb6f8>

0001a060 <__ulp>:
   1a060:	295ffc2c 	andhi	r5,r5,32752
   1a064:	00bf3034 	movhi	r2,64704
   1a068:	2887883a 	add	r3,r5,r2
   1a06c:	00c0020e 	bge	zero,r3,1a078 <__ulp+0x18>
   1a070:	0005883a 	mov	r2,zero
   1a074:	f800283a 	ret
   1a078:	00c7c83a 	sub	r3,zero,r3
   1a07c:	1807d53a 	srai	r3,r3,20
   1a080:	008004c4 	movi	r2,19
   1a084:	10c00b0e 	bge	r2,r3,1a0b4 <__ulp+0x54>
   1a088:	18bffb04 	addi	r2,r3,-20
   1a08c:	01000784 	movi	r4,30
   1a090:	0007883a 	mov	r3,zero
   1a094:	20800516 	blt	r4,r2,1a0ac <__ulp+0x4c>
   1a098:	010007c4 	movi	r4,31
   1a09c:	2089c83a 	sub	r4,r4,r2
   1a0a0:	00800044 	movi	r2,1
   1a0a4:	1104983a 	sll	r2,r2,r4
   1a0a8:	f800283a 	ret
   1a0ac:	00800044 	movi	r2,1
   1a0b0:	f800283a 	ret
   1a0b4:	01400234 	movhi	r5,8
   1a0b8:	28c7d83a 	sra	r3,r5,r3
   1a0bc:	0005883a 	mov	r2,zero
   1a0c0:	f800283a 	ret

0001a0c4 <__b2d>:
   1a0c4:	defffa04 	addi	sp,sp,-24
   1a0c8:	dc000015 	stw	r16,0(sp)
   1a0cc:	24000417 	ldw	r16,16(r4)
   1a0d0:	dc400115 	stw	r17,4(sp)
   1a0d4:	24400504 	addi	r17,r4,20
   1a0d8:	8421883a 	add	r16,r16,r16
   1a0dc:	8421883a 	add	r16,r16,r16
   1a0e0:	8c21883a 	add	r16,r17,r16
   1a0e4:	dc800215 	stw	r18,8(sp)
   1a0e8:	84bfff17 	ldw	r18,-4(r16)
   1a0ec:	dd000415 	stw	r20,16(sp)
   1a0f0:	dcc00315 	stw	r19,12(sp)
   1a0f4:	9009883a 	mov	r4,r18
   1a0f8:	2829883a 	mov	r20,r5
   1a0fc:	dfc00515 	stw	ra,20(sp)
   1a100:	001979c0 	call	1979c <__hi0bits>
   1a104:	00c00804 	movi	r3,32
   1a108:	1889c83a 	sub	r4,r3,r2
   1a10c:	a1000015 	stw	r4,0(r20)
   1a110:	01000284 	movi	r4,10
   1a114:	84ffff04 	addi	r19,r16,-4
   1a118:	20801216 	blt	r4,r2,1a164 <__b2d+0xa0>
   1a11c:	018002c4 	movi	r6,11
   1a120:	308dc83a 	sub	r6,r6,r2
   1a124:	9186d83a 	srl	r3,r18,r6
   1a128:	18cffc34 	orhi	r3,r3,16368
   1a12c:	8cc0212e 	bgeu	r17,r19,1a1b4 <__b2d+0xf0>
   1a130:	813ffe17 	ldw	r4,-8(r16)
   1a134:	218cd83a 	srl	r6,r4,r6
   1a138:	10800544 	addi	r2,r2,21
   1a13c:	9084983a 	sll	r2,r18,r2
   1a140:	1184b03a 	or	r2,r2,r6
   1a144:	dfc00517 	ldw	ra,20(sp)
   1a148:	dd000417 	ldw	r20,16(sp)
   1a14c:	dcc00317 	ldw	r19,12(sp)
   1a150:	dc800217 	ldw	r18,8(sp)
   1a154:	dc400117 	ldw	r17,4(sp)
   1a158:	dc000017 	ldw	r16,0(sp)
   1a15c:	dec00604 	addi	sp,sp,24
   1a160:	f800283a 	ret
   1a164:	8cc00f2e 	bgeu	r17,r19,1a1a4 <__b2d+0xe0>
   1a168:	117ffd44 	addi	r5,r2,-11
   1a16c:	80bffe17 	ldw	r2,-8(r16)
   1a170:	28000e26 	beq	r5,zero,1a1ac <__b2d+0xe8>
   1a174:	1949c83a 	sub	r4,r3,r5
   1a178:	9164983a 	sll	r18,r18,r5
   1a17c:	1106d83a 	srl	r3,r2,r4
   1a180:	81bffe04 	addi	r6,r16,-8
   1a184:	948ffc34 	orhi	r18,r18,16368
   1a188:	90c6b03a 	or	r3,r18,r3
   1a18c:	89800e2e 	bgeu	r17,r6,1a1c8 <__b2d+0x104>
   1a190:	81bffd17 	ldw	r6,-12(r16)
   1a194:	1144983a 	sll	r2,r2,r5
   1a198:	310ad83a 	srl	r5,r6,r4
   1a19c:	2884b03a 	or	r2,r5,r2
   1a1a0:	003fe806 	br	1a144 <__alt_data_end+0xfffdb944>
   1a1a4:	10bffd44 	addi	r2,r2,-11
   1a1a8:	1000041e 	bne	r2,zero,1a1bc <__b2d+0xf8>
   1a1ac:	90cffc34 	orhi	r3,r18,16368
   1a1b0:	003fe406 	br	1a144 <__alt_data_end+0xfffdb944>
   1a1b4:	000d883a 	mov	r6,zero
   1a1b8:	003fdf06 	br	1a138 <__alt_data_end+0xfffdb938>
   1a1bc:	90a4983a 	sll	r18,r18,r2
   1a1c0:	0005883a 	mov	r2,zero
   1a1c4:	003ff906 	br	1a1ac <__alt_data_end+0xfffdb9ac>
   1a1c8:	1144983a 	sll	r2,r2,r5
   1a1cc:	003fdd06 	br	1a144 <__alt_data_end+0xfffdb944>

0001a1d0 <__d2b>:
   1a1d0:	defff804 	addi	sp,sp,-32
   1a1d4:	dc000215 	stw	r16,8(sp)
   1a1d8:	3021883a 	mov	r16,r6
   1a1dc:	dc400315 	stw	r17,12(sp)
   1a1e0:	8022907a 	slli	r17,r16,1
   1a1e4:	dd000615 	stw	r20,24(sp)
   1a1e8:	2829883a 	mov	r20,r5
   1a1ec:	01400044 	movi	r5,1
   1a1f0:	dcc00515 	stw	r19,20(sp)
   1a1f4:	dc800415 	stw	r18,16(sp)
   1a1f8:	dfc00715 	stw	ra,28(sp)
   1a1fc:	3825883a 	mov	r18,r7
   1a200:	8822d57a 	srli	r17,r17,21
   1a204:	00194800 	call	19480 <_Balloc>
   1a208:	1027883a 	mov	r19,r2
   1a20c:	00800434 	movhi	r2,16
   1a210:	10bfffc4 	addi	r2,r2,-1
   1a214:	808c703a 	and	r6,r16,r2
   1a218:	88000126 	beq	r17,zero,1a220 <__d2b+0x50>
   1a21c:	31800434 	orhi	r6,r6,16
   1a220:	d9800015 	stw	r6,0(sp)
   1a224:	a0002426 	beq	r20,zero,1a2b8 <__d2b+0xe8>
   1a228:	d9000104 	addi	r4,sp,4
   1a22c:	dd000115 	stw	r20,4(sp)
   1a230:	00198040 	call	19804 <__lo0bits>
   1a234:	d8c00017 	ldw	r3,0(sp)
   1a238:	10002f1e 	bne	r2,zero,1a2f8 <__d2b+0x128>
   1a23c:	d9000117 	ldw	r4,4(sp)
   1a240:	99000515 	stw	r4,20(r19)
   1a244:	1821003a 	cmpeq	r16,r3,zero
   1a248:	01000084 	movi	r4,2
   1a24c:	2421c83a 	sub	r16,r4,r16
   1a250:	98c00615 	stw	r3,24(r19)
   1a254:	9c000415 	stw	r16,16(r19)
   1a258:	88001f1e 	bne	r17,zero,1a2d8 <__d2b+0x108>
   1a25c:	10bef384 	addi	r2,r2,-1074
   1a260:	90800015 	stw	r2,0(r18)
   1a264:	00900034 	movhi	r2,16384
   1a268:	10bfffc4 	addi	r2,r2,-1
   1a26c:	8085883a 	add	r2,r16,r2
   1a270:	1085883a 	add	r2,r2,r2
   1a274:	1085883a 	add	r2,r2,r2
   1a278:	9885883a 	add	r2,r19,r2
   1a27c:	11000517 	ldw	r4,20(r2)
   1a280:	8020917a 	slli	r16,r16,5
   1a284:	001979c0 	call	1979c <__hi0bits>
   1a288:	d8c00817 	ldw	r3,32(sp)
   1a28c:	8085c83a 	sub	r2,r16,r2
   1a290:	18800015 	stw	r2,0(r3)
   1a294:	9805883a 	mov	r2,r19
   1a298:	dfc00717 	ldw	ra,28(sp)
   1a29c:	dd000617 	ldw	r20,24(sp)
   1a2a0:	dcc00517 	ldw	r19,20(sp)
   1a2a4:	dc800417 	ldw	r18,16(sp)
   1a2a8:	dc400317 	ldw	r17,12(sp)
   1a2ac:	dc000217 	ldw	r16,8(sp)
   1a2b0:	dec00804 	addi	sp,sp,32
   1a2b4:	f800283a 	ret
   1a2b8:	d809883a 	mov	r4,sp
   1a2bc:	00198040 	call	19804 <__lo0bits>
   1a2c0:	d8c00017 	ldw	r3,0(sp)
   1a2c4:	04000044 	movi	r16,1
   1a2c8:	9c000415 	stw	r16,16(r19)
   1a2cc:	98c00515 	stw	r3,20(r19)
   1a2d0:	10800804 	addi	r2,r2,32
   1a2d4:	883fe126 	beq	r17,zero,1a25c <__alt_data_end+0xfffdba5c>
   1a2d8:	00c00d44 	movi	r3,53
   1a2dc:	8c7ef344 	addi	r17,r17,-1075
   1a2e0:	88a3883a 	add	r17,r17,r2
   1a2e4:	1885c83a 	sub	r2,r3,r2
   1a2e8:	d8c00817 	ldw	r3,32(sp)
   1a2ec:	94400015 	stw	r17,0(r18)
   1a2f0:	18800015 	stw	r2,0(r3)
   1a2f4:	003fe706 	br	1a294 <__alt_data_end+0xfffdba94>
   1a2f8:	01000804 	movi	r4,32
   1a2fc:	2089c83a 	sub	r4,r4,r2
   1a300:	1908983a 	sll	r4,r3,r4
   1a304:	d9400117 	ldw	r5,4(sp)
   1a308:	1886d83a 	srl	r3,r3,r2
   1a30c:	2148b03a 	or	r4,r4,r5
   1a310:	99000515 	stw	r4,20(r19)
   1a314:	d8c00015 	stw	r3,0(sp)
   1a318:	003fca06 	br	1a244 <__alt_data_end+0xfffdba44>

0001a31c <__ratio>:
   1a31c:	defff904 	addi	sp,sp,-28
   1a320:	dc400315 	stw	r17,12(sp)
   1a324:	2823883a 	mov	r17,r5
   1a328:	d9400104 	addi	r5,sp,4
   1a32c:	dfc00615 	stw	ra,24(sp)
   1a330:	dcc00515 	stw	r19,20(sp)
   1a334:	dc800415 	stw	r18,16(sp)
   1a338:	2027883a 	mov	r19,r4
   1a33c:	dc000215 	stw	r16,8(sp)
   1a340:	001a0c40 	call	1a0c4 <__b2d>
   1a344:	d80b883a 	mov	r5,sp
   1a348:	8809883a 	mov	r4,r17
   1a34c:	1025883a 	mov	r18,r2
   1a350:	1821883a 	mov	r16,r3
   1a354:	001a0c40 	call	1a0c4 <__b2d>
   1a358:	8a000417 	ldw	r8,16(r17)
   1a35c:	99000417 	ldw	r4,16(r19)
   1a360:	d9400117 	ldw	r5,4(sp)
   1a364:	2209c83a 	sub	r4,r4,r8
   1a368:	2010917a 	slli	r8,r4,5
   1a36c:	d9000017 	ldw	r4,0(sp)
   1a370:	2909c83a 	sub	r4,r5,r4
   1a374:	4109883a 	add	r4,r8,r4
   1a378:	01000e0e 	bge	zero,r4,1a3b4 <__ratio+0x98>
   1a37c:	2008953a 	slli	r4,r4,20
   1a380:	2421883a 	add	r16,r4,r16
   1a384:	100d883a 	mov	r6,r2
   1a388:	180f883a 	mov	r7,r3
   1a38c:	9009883a 	mov	r4,r18
   1a390:	800b883a 	mov	r5,r16
   1a394:	002634c0 	call	2634c <__divdf3>
   1a398:	dfc00617 	ldw	ra,24(sp)
   1a39c:	dcc00517 	ldw	r19,20(sp)
   1a3a0:	dc800417 	ldw	r18,16(sp)
   1a3a4:	dc400317 	ldw	r17,12(sp)
   1a3a8:	dc000217 	ldw	r16,8(sp)
   1a3ac:	dec00704 	addi	sp,sp,28
   1a3b0:	f800283a 	ret
   1a3b4:	2008953a 	slli	r4,r4,20
   1a3b8:	1907c83a 	sub	r3,r3,r4
   1a3bc:	003ff106 	br	1a384 <__alt_data_end+0xfffdbb84>

0001a3c0 <_mprec_log10>:
   1a3c0:	defffe04 	addi	sp,sp,-8
   1a3c4:	dc000015 	stw	r16,0(sp)
   1a3c8:	dfc00115 	stw	ra,4(sp)
   1a3cc:	008005c4 	movi	r2,23
   1a3d0:	2021883a 	mov	r16,r4
   1a3d4:	11000d0e 	bge	r2,r4,1a40c <_mprec_log10+0x4c>
   1a3d8:	0005883a 	mov	r2,zero
   1a3dc:	00cffc34 	movhi	r3,16368
   1a3e0:	843fffc4 	addi	r16,r16,-1
   1a3e4:	000d883a 	mov	r6,zero
   1a3e8:	01d00934 	movhi	r7,16420
   1a3ec:	1009883a 	mov	r4,r2
   1a3f0:	180b883a 	mov	r5,r3
   1a3f4:	0026f740 	call	26f74 <__muldf3>
   1a3f8:	803ff91e 	bne	r16,zero,1a3e0 <__alt_data_end+0xfffdbbe0>
   1a3fc:	dfc00117 	ldw	ra,4(sp)
   1a400:	dc000017 	ldw	r16,0(sp)
   1a404:	dec00204 	addi	sp,sp,8
   1a408:	f800283a 	ret
   1a40c:	202090fa 	slli	r16,r4,3
   1a410:	008000f4 	movhi	r2,3
   1a414:	10a58a04 	addi	r2,r2,-27096
   1a418:	1421883a 	add	r16,r2,r16
   1a41c:	80800017 	ldw	r2,0(r16)
   1a420:	80c00117 	ldw	r3,4(r16)
   1a424:	dfc00117 	ldw	ra,4(sp)
   1a428:	dc000017 	ldw	r16,0(sp)
   1a42c:	dec00204 	addi	sp,sp,8
   1a430:	f800283a 	ret

0001a434 <__copybits>:
   1a434:	297fffc4 	addi	r5,r5,-1
   1a438:	280fd17a 	srai	r7,r5,5
   1a43c:	30c00417 	ldw	r3,16(r6)
   1a440:	30800504 	addi	r2,r6,20
   1a444:	39c00044 	addi	r7,r7,1
   1a448:	18c7883a 	add	r3,r3,r3
   1a44c:	39cf883a 	add	r7,r7,r7
   1a450:	18c7883a 	add	r3,r3,r3
   1a454:	39cf883a 	add	r7,r7,r7
   1a458:	10c7883a 	add	r3,r2,r3
   1a45c:	21cf883a 	add	r7,r4,r7
   1a460:	10c00d2e 	bgeu	r2,r3,1a498 <__copybits+0x64>
   1a464:	200b883a 	mov	r5,r4
   1a468:	12000017 	ldw	r8,0(r2)
   1a46c:	29400104 	addi	r5,r5,4
   1a470:	10800104 	addi	r2,r2,4
   1a474:	2a3fff15 	stw	r8,-4(r5)
   1a478:	10fffb36 	bltu	r2,r3,1a468 <__alt_data_end+0xfffdbc68>
   1a47c:	1985c83a 	sub	r2,r3,r6
   1a480:	10bffac4 	addi	r2,r2,-21
   1a484:	1004d0ba 	srli	r2,r2,2
   1a488:	10800044 	addi	r2,r2,1
   1a48c:	1085883a 	add	r2,r2,r2
   1a490:	1085883a 	add	r2,r2,r2
   1a494:	2089883a 	add	r4,r4,r2
   1a498:	21c0032e 	bgeu	r4,r7,1a4a8 <__copybits+0x74>
   1a49c:	20000015 	stw	zero,0(r4)
   1a4a0:	21000104 	addi	r4,r4,4
   1a4a4:	21fffd36 	bltu	r4,r7,1a49c <__alt_data_end+0xfffdbc9c>
   1a4a8:	f800283a 	ret

0001a4ac <__any_on>:
   1a4ac:	20c00417 	ldw	r3,16(r4)
   1a4b0:	2805d17a 	srai	r2,r5,5
   1a4b4:	21000504 	addi	r4,r4,20
   1a4b8:	18800d0e 	bge	r3,r2,1a4f0 <__any_on+0x44>
   1a4bc:	18c7883a 	add	r3,r3,r3
   1a4c0:	18c7883a 	add	r3,r3,r3
   1a4c4:	20c7883a 	add	r3,r4,r3
   1a4c8:	20c0192e 	bgeu	r4,r3,1a530 <__any_on+0x84>
   1a4cc:	18bfff17 	ldw	r2,-4(r3)
   1a4d0:	18ffff04 	addi	r3,r3,-4
   1a4d4:	1000041e 	bne	r2,zero,1a4e8 <__any_on+0x3c>
   1a4d8:	20c0142e 	bgeu	r4,r3,1a52c <__any_on+0x80>
   1a4dc:	18ffff04 	addi	r3,r3,-4
   1a4e0:	19400017 	ldw	r5,0(r3)
   1a4e4:	283ffc26 	beq	r5,zero,1a4d8 <__alt_data_end+0xfffdbcd8>
   1a4e8:	00800044 	movi	r2,1
   1a4ec:	f800283a 	ret
   1a4f0:	10c00a0e 	bge	r2,r3,1a51c <__any_on+0x70>
   1a4f4:	1085883a 	add	r2,r2,r2
   1a4f8:	1085883a 	add	r2,r2,r2
   1a4fc:	294007cc 	andi	r5,r5,31
   1a500:	2087883a 	add	r3,r4,r2
   1a504:	283ff026 	beq	r5,zero,1a4c8 <__alt_data_end+0xfffdbcc8>
   1a508:	19800017 	ldw	r6,0(r3)
   1a50c:	3144d83a 	srl	r2,r6,r5
   1a510:	114a983a 	sll	r5,r2,r5
   1a514:	317ff41e 	bne	r6,r5,1a4e8 <__alt_data_end+0xfffdbce8>
   1a518:	003feb06 	br	1a4c8 <__alt_data_end+0xfffdbcc8>
   1a51c:	1085883a 	add	r2,r2,r2
   1a520:	1085883a 	add	r2,r2,r2
   1a524:	2087883a 	add	r3,r4,r2
   1a528:	003fe706 	br	1a4c8 <__alt_data_end+0xfffdbcc8>
   1a52c:	f800283a 	ret
   1a530:	0005883a 	mov	r2,zero
   1a534:	f800283a 	ret

0001a538 <_putc_r>:
   1a538:	defffc04 	addi	sp,sp,-16
   1a53c:	dc000215 	stw	r16,8(sp)
   1a540:	dfc00315 	stw	ra,12(sp)
   1a544:	2021883a 	mov	r16,r4
   1a548:	20000226 	beq	r4,zero,1a554 <_putc_r+0x1c>
   1a54c:	20800e17 	ldw	r2,56(r4)
   1a550:	10001b26 	beq	r2,zero,1a5c0 <_putc_r+0x88>
   1a554:	30800217 	ldw	r2,8(r6)
   1a558:	10bfffc4 	addi	r2,r2,-1
   1a55c:	30800215 	stw	r2,8(r6)
   1a560:	10000a16 	blt	r2,zero,1a58c <_putc_r+0x54>
   1a564:	30800017 	ldw	r2,0(r6)
   1a568:	11400005 	stb	r5,0(r2)
   1a56c:	30800017 	ldw	r2,0(r6)
   1a570:	10c00044 	addi	r3,r2,1
   1a574:	30c00015 	stw	r3,0(r6)
   1a578:	10800003 	ldbu	r2,0(r2)
   1a57c:	dfc00317 	ldw	ra,12(sp)
   1a580:	dc000217 	ldw	r16,8(sp)
   1a584:	dec00404 	addi	sp,sp,16
   1a588:	f800283a 	ret
   1a58c:	30c00617 	ldw	r3,24(r6)
   1a590:	10c00616 	blt	r2,r3,1a5ac <_putc_r+0x74>
   1a594:	30800017 	ldw	r2,0(r6)
   1a598:	00c00284 	movi	r3,10
   1a59c:	11400005 	stb	r5,0(r2)
   1a5a0:	30800017 	ldw	r2,0(r6)
   1a5a4:	11400003 	ldbu	r5,0(r2)
   1a5a8:	28fff11e 	bne	r5,r3,1a570 <__alt_data_end+0xfffdbd70>
   1a5ac:	8009883a 	mov	r4,r16
   1a5b0:	dfc00317 	ldw	ra,12(sp)
   1a5b4:	dc000217 	ldw	r16,8(sp)
   1a5b8:	dec00404 	addi	sp,sp,16
   1a5bc:	0021b201 	jmpi	21b20 <__swbuf_r>
   1a5c0:	d9400015 	stw	r5,0(sp)
   1a5c4:	d9800115 	stw	r6,4(sp)
   1a5c8:	0010a900 	call	10a90 <__sinit>
   1a5cc:	d9800117 	ldw	r6,4(sp)
   1a5d0:	d9400017 	ldw	r5,0(sp)
   1a5d4:	003fdf06 	br	1a554 <__alt_data_end+0xfffdbd54>

0001a5d8 <putc>:
   1a5d8:	008000f4 	movhi	r2,3
   1a5dc:	defffc04 	addi	sp,sp,-16
   1a5e0:	10a8a204 	addi	r2,r2,-23928
   1a5e4:	dc000115 	stw	r16,4(sp)
   1a5e8:	14000017 	ldw	r16,0(r2)
   1a5ec:	dc400215 	stw	r17,8(sp)
   1a5f0:	dfc00315 	stw	ra,12(sp)
   1a5f4:	2023883a 	mov	r17,r4
   1a5f8:	80000226 	beq	r16,zero,1a604 <putc+0x2c>
   1a5fc:	80800e17 	ldw	r2,56(r16)
   1a600:	10001a26 	beq	r2,zero,1a66c <putc+0x94>
   1a604:	28800217 	ldw	r2,8(r5)
   1a608:	10bfffc4 	addi	r2,r2,-1
   1a60c:	28800215 	stw	r2,8(r5)
   1a610:	10000b16 	blt	r2,zero,1a640 <putc+0x68>
   1a614:	28800017 	ldw	r2,0(r5)
   1a618:	14400005 	stb	r17,0(r2)
   1a61c:	28800017 	ldw	r2,0(r5)
   1a620:	10c00044 	addi	r3,r2,1
   1a624:	28c00015 	stw	r3,0(r5)
   1a628:	10800003 	ldbu	r2,0(r2)
   1a62c:	dfc00317 	ldw	ra,12(sp)
   1a630:	dc400217 	ldw	r17,8(sp)
   1a634:	dc000117 	ldw	r16,4(sp)
   1a638:	dec00404 	addi	sp,sp,16
   1a63c:	f800283a 	ret
   1a640:	28c00617 	ldw	r3,24(r5)
   1a644:	10c00e16 	blt	r2,r3,1a680 <putc+0xa8>
   1a648:	28800017 	ldw	r2,0(r5)
   1a64c:	01000284 	movi	r4,10
   1a650:	14400005 	stb	r17,0(r2)
   1a654:	28800017 	ldw	r2,0(r5)
   1a658:	10c00003 	ldbu	r3,0(r2)
   1a65c:	193ff01e 	bne	r3,r4,1a620 <__alt_data_end+0xfffdbe20>
   1a660:	280d883a 	mov	r6,r5
   1a664:	180b883a 	mov	r5,r3
   1a668:	00000706 	br	1a688 <putc+0xb0>
   1a66c:	8009883a 	mov	r4,r16
   1a670:	d9400015 	stw	r5,0(sp)
   1a674:	0010a900 	call	10a90 <__sinit>
   1a678:	d9400017 	ldw	r5,0(sp)
   1a67c:	003fe106 	br	1a604 <__alt_data_end+0xfffdbe04>
   1a680:	280d883a 	mov	r6,r5
   1a684:	880b883a 	mov	r5,r17
   1a688:	8009883a 	mov	r4,r16
   1a68c:	dfc00317 	ldw	ra,12(sp)
   1a690:	dc400217 	ldw	r17,8(sp)
   1a694:	dc000117 	ldw	r16,4(sp)
   1a698:	dec00404 	addi	sp,sp,16
   1a69c:	0021b201 	jmpi	21b20 <__swbuf_r>

0001a6a0 <_read_r>:
   1a6a0:	defffd04 	addi	sp,sp,-12
   1a6a4:	2805883a 	mov	r2,r5
   1a6a8:	dc000015 	stw	r16,0(sp)
   1a6ac:	040000f4 	movhi	r16,3
   1a6b0:	dc400115 	stw	r17,4(sp)
   1a6b4:	300b883a 	mov	r5,r6
   1a6b8:	842aed04 	addi	r16,r16,-21580
   1a6bc:	2023883a 	mov	r17,r4
   1a6c0:	380d883a 	mov	r6,r7
   1a6c4:	1009883a 	mov	r4,r2
   1a6c8:	dfc00215 	stw	ra,8(sp)
   1a6cc:	80000015 	stw	zero,0(r16)
   1a6d0:	00289140 	call	28914 <read>
   1a6d4:	00ffffc4 	movi	r3,-1
   1a6d8:	10c00526 	beq	r2,r3,1a6f0 <_read_r+0x50>
   1a6dc:	dfc00217 	ldw	ra,8(sp)
   1a6e0:	dc400117 	ldw	r17,4(sp)
   1a6e4:	dc000017 	ldw	r16,0(sp)
   1a6e8:	dec00304 	addi	sp,sp,12
   1a6ec:	f800283a 	ret
   1a6f0:	80c00017 	ldw	r3,0(r16)
   1a6f4:	183ff926 	beq	r3,zero,1a6dc <__alt_data_end+0xfffdbedc>
   1a6f8:	88c00015 	stw	r3,0(r17)
   1a6fc:	003ff706 	br	1a6dc <__alt_data_end+0xfffdbedc>

0001a700 <__sccl>:
   1a700:	2a000003 	ldbu	r8,0(r5)
   1a704:	00801784 	movi	r2,94
   1a708:	40802a26 	beq	r8,r2,1a7b4 <__sccl+0xb4>
   1a70c:	29400044 	addi	r5,r5,1
   1a710:	000f883a 	mov	r7,zero
   1a714:	0013883a 	mov	r9,zero
   1a718:	2007883a 	mov	r3,r4
   1a71c:	21804004 	addi	r6,r4,256
   1a720:	19c00005 	stb	r7,0(r3)
   1a724:	18c00044 	addi	r3,r3,1
   1a728:	19bffd1e 	bne	r3,r6,1a720 <__alt_data_end+0xfffdbf20>
   1a72c:	40001126 	beq	r8,zero,1a774 <__sccl+0x74>
   1a730:	00800044 	movi	r2,1
   1a734:	124fc83a 	sub	r7,r2,r9
   1a738:	02800b44 	movi	r10,45
   1a73c:	02c01744 	movi	r11,93
   1a740:	2205883a 	add	r2,r4,r8
   1a744:	11c00005 	stb	r7,0(r2)
   1a748:	28800044 	addi	r2,r5,1
   1a74c:	28c00003 	ldbu	r3,0(r5)
   1a750:	1a800a26 	beq	r3,r10,1a77c <__sccl+0x7c>
   1a754:	1ac00426 	beq	r3,r11,1a768 <__sccl+0x68>
   1a758:	18000426 	beq	r3,zero,1a76c <__sccl+0x6c>
   1a75c:	1811883a 	mov	r8,r3
   1a760:	100b883a 	mov	r5,r2
   1a764:	003ff606 	br	1a740 <__alt_data_end+0xfffdbf40>
   1a768:	f800283a 	ret
   1a76c:	2805883a 	mov	r2,r5
   1a770:	f800283a 	ret
   1a774:	28bfffc4 	addi	r2,r5,-1
   1a778:	f800283a 	ret
   1a77c:	12400003 	ldbu	r9,0(r2)
   1a780:	4ac01126 	beq	r9,r11,1a7c8 <__sccl+0xc8>
   1a784:	4a001016 	blt	r9,r8,1a7c8 <__sccl+0xc8>
   1a788:	41800044 	addi	r6,r8,1
   1a78c:	29400084 	addi	r5,r5,2
   1a790:	2187883a 	add	r3,r4,r6
   1a794:	00000106 	br	1a79c <__sccl+0x9c>
   1a798:	31800044 	addi	r6,r6,1
   1a79c:	19c00005 	stb	r7,0(r3)
   1a7a0:	3011883a 	mov	r8,r6
   1a7a4:	18c00044 	addi	r3,r3,1
   1a7a8:	327ffb16 	blt	r6,r9,1a798 <__alt_data_end+0xfffdbf98>
   1a7ac:	10800084 	addi	r2,r2,2
   1a7b0:	003fe606 	br	1a74c <__alt_data_end+0xfffdbf4c>
   1a7b4:	2a000043 	ldbu	r8,1(r5)
   1a7b8:	01c00044 	movi	r7,1
   1a7bc:	29400084 	addi	r5,r5,2
   1a7c0:	02400044 	movi	r9,1
   1a7c4:	003fd406 	br	1a718 <__alt_data_end+0xfffdbf18>
   1a7c8:	5011883a 	mov	r8,r10
   1a7cc:	003fe406 	br	1a760 <__alt_data_end+0xfffdbf60>

0001a7d0 <nanf>:
   1a7d0:	009ff034 	movhi	r2,32704
   1a7d4:	f800283a 	ret

0001a7d8 <_sprintf_r>:
   1a7d8:	deffe404 	addi	sp,sp,-112
   1a7dc:	2807883a 	mov	r3,r5
   1a7e0:	dfc01a15 	stw	ra,104(sp)
   1a7e4:	d9c01b15 	stw	r7,108(sp)
   1a7e8:	00a00034 	movhi	r2,32768
   1a7ec:	10bfffc4 	addi	r2,r2,-1
   1a7f0:	02008204 	movi	r8,520
   1a7f4:	d8800215 	stw	r2,8(sp)
   1a7f8:	d8800515 	stw	r2,20(sp)
   1a7fc:	d9c01b04 	addi	r7,sp,108
   1a800:	d80b883a 	mov	r5,sp
   1a804:	00bfffc4 	movi	r2,-1
   1a808:	d8c00015 	stw	r3,0(sp)
   1a80c:	d8c00415 	stw	r3,16(sp)
   1a810:	da00030d 	sth	r8,12(sp)
   1a814:	d880038d 	sth	r2,14(sp)
   1a818:	001deec0 	call	1deec <___svfprintf_internal_r>
   1a81c:	d8c00017 	ldw	r3,0(sp)
   1a820:	18000005 	stb	zero,0(r3)
   1a824:	dfc01a17 	ldw	ra,104(sp)
   1a828:	dec01c04 	addi	sp,sp,112
   1a82c:	f800283a 	ret

0001a830 <sprintf>:
   1a830:	deffe304 	addi	sp,sp,-116
   1a834:	2007883a 	mov	r3,r4
   1a838:	dfc01a15 	stw	ra,104(sp)
   1a83c:	d9801b15 	stw	r6,108(sp)
   1a840:	d9c01c15 	stw	r7,112(sp)
   1a844:	010000f4 	movhi	r4,3
   1a848:	2128a204 	addi	r4,r4,-23928
   1a84c:	21000017 	ldw	r4,0(r4)
   1a850:	00a00034 	movhi	r2,32768
   1a854:	10bfffc4 	addi	r2,r2,-1
   1a858:	280d883a 	mov	r6,r5
   1a85c:	02008204 	movi	r8,520
   1a860:	d8800215 	stw	r2,8(sp)
   1a864:	d8800515 	stw	r2,20(sp)
   1a868:	d9c01b04 	addi	r7,sp,108
   1a86c:	d80b883a 	mov	r5,sp
   1a870:	00bfffc4 	movi	r2,-1
   1a874:	d8c00015 	stw	r3,0(sp)
   1a878:	d8c00415 	stw	r3,16(sp)
   1a87c:	da00030d 	sth	r8,12(sp)
   1a880:	d880038d 	sth	r2,14(sp)
   1a884:	001deec0 	call	1deec <___svfprintf_internal_r>
   1a888:	d8c00017 	ldw	r3,0(sp)
   1a88c:	18000005 	stb	zero,0(r3)
   1a890:	dfc01a17 	ldw	ra,104(sp)
   1a894:	dec01d04 	addi	sp,sp,116
   1a898:	f800283a 	ret

0001a89c <sulp>:
   1a89c:	defffd04 	addi	sp,sp,-12
   1a8a0:	dc400115 	stw	r17,4(sp)
   1a8a4:	3023883a 	mov	r17,r6
   1a8a8:	dc000015 	stw	r16,0(sp)
   1a8ac:	dfc00215 	stw	ra,8(sp)
   1a8b0:	2821883a 	mov	r16,r5
   1a8b4:	001a0600 	call	1a060 <__ulp>
   1a8b8:	88000c26 	beq	r17,zero,1a8ec <sulp+0x50>
   1a8bc:	841ffc2c 	andhi	r16,r16,32752
   1a8c0:	8020d53a 	srli	r16,r16,20
   1a8c4:	01c01ac4 	movi	r7,107
   1a8c8:	3c21c83a 	sub	r16,r7,r16
   1a8cc:	0400070e 	bge	zero,r16,1a8ec <sulp+0x50>
   1a8d0:	8020953a 	slli	r16,r16,20
   1a8d4:	01cffc34 	movhi	r7,16368
   1a8d8:	000d883a 	mov	r6,zero
   1a8dc:	81cf883a 	add	r7,r16,r7
   1a8e0:	1009883a 	mov	r4,r2
   1a8e4:	180b883a 	mov	r5,r3
   1a8e8:	0026f740 	call	26f74 <__muldf3>
   1a8ec:	dfc00217 	ldw	ra,8(sp)
   1a8f0:	dc400117 	ldw	r17,4(sp)
   1a8f4:	dc000017 	ldw	r16,0(sp)
   1a8f8:	dec00304 	addi	sp,sp,12
   1a8fc:	f800283a 	ret

0001a900 <_strtod_r>:
   1a900:	deffe204 	addi	sp,sp,-120
   1a904:	ddc01b15 	stw	r23,108(sp)
   1a908:	dd801a15 	stw	r22,104(sp)
   1a90c:	dc401515 	stw	r17,84(sp)
   1a910:	dfc01d15 	stw	ra,116(sp)
   1a914:	df001c15 	stw	fp,112(sp)
   1a918:	dd401915 	stw	r21,100(sp)
   1a91c:	dd001815 	stw	r20,96(sp)
   1a920:	dcc01715 	stw	r19,92(sp)
   1a924:	dc801615 	stw	r18,88(sp)
   1a928:	dc001415 	stw	r16,80(sp)
   1a92c:	d8000515 	stw	zero,20(sp)
   1a930:	d9400615 	stw	r5,24(sp)
   1a934:	2807883a 	mov	r3,r5
   1a938:	1f000003 	ldbu	fp,0(r3)
   1a93c:	01c000b4 	movhi	r7,2
   1a940:	2023883a 	mov	r17,r4
   1a944:	d9400715 	stw	r5,28(sp)
   1a948:	d9800915 	stw	r6,36(sp)
   1a94c:	01000b44 	movi	r4,45
   1a950:	e0803fcc 	andi	r2,fp,255
   1a954:	39ea5d04 	addi	r7,r7,-22156
   1a958:	002f883a 	mov	r23,zero
   1a95c:	002d883a 	mov	r22,zero
   1a960:	20809c36 	bltu	r4,r2,1abd4 <_strtod_r+0x2d4>
   1a964:	100490ba 	slli	r2,r2,2
   1a968:	11c5883a 	add	r2,r2,r7
   1a96c:	10800017 	ldw	r2,0(r2)
   1a970:	1000683a 	jmp	r2
   1a974:	0001aa34 	movhi	zero,1704
   1a978:	0001abd4 	movui	zero,1711
   1a97c:	0001abd4 	movui	zero,1711
   1a980:	0001abd4 	movui	zero,1711
   1a984:	0001abd4 	movui	zero,1711
   1a988:	0001abd4 	movui	zero,1711
   1a98c:	0001abd4 	movui	zero,1711
   1a990:	0001abd4 	movui	zero,1711
   1a994:	0001abd4 	movui	zero,1711
   1a998:	0001abc0 	call	1abc <set_addrs_to_default+0x97c>
   1a99c:	0001abc0 	call	1abc <set_addrs_to_default+0x97c>
   1a9a0:	0001abc0 	call	1abc <set_addrs_to_default+0x97c>
   1a9a4:	0001abc0 	call	1abc <set_addrs_to_default+0x97c>
   1a9a8:	0001abc0 	call	1abc <set_addrs_to_default+0x97c>
   1a9ac:	0001abd4 	movui	zero,1711
   1a9b0:	0001abd4 	movui	zero,1711
   1a9b4:	0001abd4 	movui	zero,1711
   1a9b8:	0001abd4 	movui	zero,1711
   1a9bc:	0001abd4 	movui	zero,1711
   1a9c0:	0001abd4 	movui	zero,1711
   1a9c4:	0001abd4 	movui	zero,1711
   1a9c8:	0001abd4 	movui	zero,1711
   1a9cc:	0001abd4 	movui	zero,1711
   1a9d0:	0001abd4 	movui	zero,1711
   1a9d4:	0001abd4 	movui	zero,1711
   1a9d8:	0001abd4 	movui	zero,1711
   1a9dc:	0001abd4 	movui	zero,1711
   1a9e0:	0001abd4 	movui	zero,1711
   1a9e4:	0001abd4 	movui	zero,1711
   1a9e8:	0001abd4 	movui	zero,1711
   1a9ec:	0001abd4 	movui	zero,1711
   1a9f0:	0001abd4 	movui	zero,1711
   1a9f4:	0001abc0 	call	1abc <set_addrs_to_default+0x97c>
   1a9f8:	0001abd4 	movui	zero,1711
   1a9fc:	0001abd4 	movui	zero,1711
   1aa00:	0001abd4 	movui	zero,1711
   1aa04:	0001abd4 	movui	zero,1711
   1aa08:	0001abd4 	movui	zero,1711
   1aa0c:	0001abd4 	movui	zero,1711
   1aa10:	0001abd4 	movui	zero,1711
   1aa14:	0001abd4 	movui	zero,1711
   1aa18:	0001abd4 	movui	zero,1711
   1aa1c:	0001abd4 	movui	zero,1711
   1aa20:	0001aa98 	cmpnei	zero,zero,1706
   1aa24:	0001abd4 	movui	zero,1711
   1aa28:	0001abb4 	movhi	zero,1710
   1aa2c:	00801244 	movi	r2,73
   1aa30:	b8844726 	beq	r23,r2,1bb50 <_strtod_r+0x1250>
   1aa34:	d9000917 	ldw	r4,36(sp)
   1aa38:	d8000815 	stw	zero,32(sp)
   1aa3c:	0039883a 	mov	fp,zero
   1aa40:	20000726 	beq	r4,zero,1aa60 <_strtod_r+0x160>
   1aa44:	dc800717 	ldw	r18,28(sp)
   1aa48:	d8000a15 	stw	zero,40(sp)
   1aa4c:	d9400917 	ldw	r5,36(sp)
   1aa50:	2c800015 	stw	r18,0(r5)
   1aa54:	d8800a17 	ldw	r2,40(sp)
   1aa58:	10000126 	beq	r2,zero,1aa60 <_strtod_r+0x160>
   1aa5c:	e720003c 	xorhi	fp,fp,32768
   1aa60:	d8800817 	ldw	r2,32(sp)
   1aa64:	e007883a 	mov	r3,fp
   1aa68:	dfc01d17 	ldw	ra,116(sp)
   1aa6c:	df001c17 	ldw	fp,112(sp)
   1aa70:	ddc01b17 	ldw	r23,108(sp)
   1aa74:	dd801a17 	ldw	r22,104(sp)
   1aa78:	dd401917 	ldw	r21,100(sp)
   1aa7c:	dd001817 	ldw	r20,96(sp)
   1aa80:	dcc01717 	ldw	r19,92(sp)
   1aa84:	dc801617 	ldw	r18,88(sp)
   1aa88:	dc401517 	ldw	r17,84(sp)
   1aa8c:	dc001417 	ldw	r16,80(sp)
   1aa90:	dec01e04 	addi	sp,sp,120
   1aa94:	f800283a 	ret
   1aa98:	d8000a15 	stw	zero,40(sp)
   1aa9c:	1c000044 	addi	r16,r3,1
   1aaa0:	dc000615 	stw	r16,24(sp)
   1aaa4:	1f000043 	ldbu	fp,1(r3)
   1aaa8:	e0803fcc 	andi	r2,fp,255
   1aaac:	1080201c 	xori	r2,r2,128
   1aab0:	10bfe004 	addi	r2,r2,-128
   1aab4:	103fdf26 	beq	r2,zero,1aa34 <__alt_data_end+0xfffdc234>
   1aab8:	e1003fcc 	andi	r4,fp,255
   1aabc:	2100201c 	xori	r4,r4,128
   1aac0:	213fe004 	addi	r4,r4,-128
   1aac4:	00800c04 	movi	r2,48
   1aac8:	2080d426 	beq	r4,r2,1ae1c <_strtod_r+0x51c>
   1aacc:	dc000815 	stw	r16,32(sp)
   1aad0:	d8000c15 	stw	zero,48(sp)
   1aad4:	e0bff404 	addi	r2,fp,-48
   1aad8:	10803fcc 	andi	r2,r2,255
   1aadc:	05400244 	movi	r21,9
   1aae0:	a8837836 	bltu	r21,r2,1b8c4 <_strtod_r+0xfc4>
   1aae4:	dc800817 	ldw	r18,32(sp)
   1aae8:	0029883a 	mov	r20,zero
   1aaec:	0027883a 	mov	r19,zero
   1aaf0:	0021883a 	mov	r16,zero
   1aaf4:	05800204 	movi	r22,8
   1aaf8:	b4003916 	blt	r22,r16,1abe0 <_strtod_r+0x2e0>
   1aafc:	e7003fcc 	andi	fp,fp,255
   1ab00:	9809883a 	mov	r4,r19
   1ab04:	01400284 	movi	r5,10
   1ab08:	e700201c 	xori	fp,fp,128
   1ab0c:	002587c0 	call	2587c <__mulsi3>
   1ab10:	e73fe004 	addi	fp,fp,-128
   1ab14:	1705883a 	add	r2,r2,fp
   1ab18:	14fff404 	addi	r19,r2,-48
   1ab1c:	94800044 	addi	r18,r18,1
   1ab20:	dc800615 	stw	r18,24(sp)
   1ab24:	97000003 	ldbu	fp,0(r18)
   1ab28:	84000044 	addi	r16,r16,1
   1ab2c:	e0bff404 	addi	r2,fp,-48
   1ab30:	10803fcc 	andi	r2,r2,255
   1ab34:	a8bff02e 	bgeu	r21,r2,1aaf8 <__alt_data_end+0xfffdc2f8>
   1ab38:	e5c03fcc 	andi	r23,fp,255
   1ab3c:	bdc0201c 	xori	r23,r23,128
   1ab40:	bdffe004 	addi	r23,r23,-128
   1ab44:	8809883a 	mov	r4,r17
   1ab48:	00191cc0 	call	191cc <_localeconv_r>
   1ab4c:	8809883a 	mov	r4,r17
   1ab50:	15400017 	ldw	r21,0(r2)
   1ab54:	00191cc0 	call	191cc <_localeconv_r>
   1ab58:	11000017 	ldw	r4,0(r2)
   1ab5c:	00137600 	call	13760 <strlen>
   1ab60:	100d883a 	mov	r6,r2
   1ab64:	a80b883a 	mov	r5,r21
   1ab68:	9009883a 	mov	r4,r18
   1ab6c:	0022b080 	call	22b08 <strncmp>
   1ab70:	1000bd26 	beq	r2,zero,1ae68 <_strtod_r+0x568>
   1ab74:	8039883a 	mov	fp,r16
   1ab78:	002d883a 	mov	r22,zero
   1ab7c:	d8000b15 	stw	zero,44(sp)
   1ab80:	0025883a 	mov	r18,zero
   1ab84:	00801944 	movi	r2,101
   1ab88:	b8806026 	beq	r23,r2,1ad0c <_strtod_r+0x40c>
   1ab8c:	00801144 	movi	r2,69
   1ab90:	b8805e26 	beq	r23,r2,1ad0c <_strtod_r+0x40c>
   1ab94:	0009883a 	mov	r4,zero
   1ab98:	e0001a1e 	bne	fp,zero,1ac04 <_strtod_r+0x304>
   1ab9c:	b000cd26 	beq	r22,zero,1aed4 <_strtod_r+0x5d4>
   1aba0:	d8000815 	stw	zero,32(sp)
   1aba4:	d9000917 	ldw	r4,36(sp)
   1aba8:	203faa26 	beq	r4,zero,1aa54 <__alt_data_end+0xfffdc254>
   1abac:	dc800617 	ldw	r18,24(sp)
   1abb0:	003fa606 	br	1aa4c <__alt_data_end+0xfffdc24c>
   1abb4:	00800044 	movi	r2,1
   1abb8:	d8800a15 	stw	r2,40(sp)
   1abbc:	003fb706 	br	1aa9c <__alt_data_end+0xfffdc29c>
   1abc0:	18c00044 	addi	r3,r3,1
   1abc4:	d8c00615 	stw	r3,24(sp)
   1abc8:	1f000003 	ldbu	fp,0(r3)
   1abcc:	e0803fcc 	andi	r2,fp,255
   1abd0:	20bf642e 	bgeu	r4,r2,1a964 <__alt_data_end+0xfffdc164>
   1abd4:	1821883a 	mov	r16,r3
   1abd8:	d8000a15 	stw	zero,40(sp)
   1abdc:	003fb606 	br	1aab8 <__alt_data_end+0xfffdc2b8>
   1abe0:	e7003fcc 	andi	fp,fp,255
   1abe4:	a009883a 	mov	r4,r20
   1abe8:	01400284 	movi	r5,10
   1abec:	e700201c 	xori	fp,fp,128
   1abf0:	002587c0 	call	2587c <__mulsi3>
   1abf4:	e73fe004 	addi	fp,fp,-128
   1abf8:	1705883a 	add	r2,r2,fp
   1abfc:	153ff404 	addi	r20,r2,-48
   1ac00:	003fc606 	br	1ab1c <__alt_data_end+0xfffdc31c>
   1ac04:	d8c00b17 	ldw	r3,44(sp)
   1ac08:	20ebc83a 	sub	r21,r4,r3
   1ac0c:	8000011e 	bne	r16,zero,1ac14 <_strtod_r+0x314>
   1ac10:	e021883a 	mov	r16,fp
   1ac14:	00800404 	movi	r2,16
   1ac18:	e025883a 	mov	r18,fp
   1ac1c:	1700010e 	bge	r2,fp,1ac24 <_strtod_r+0x324>
   1ac20:	1025883a 	mov	r18,r2
   1ac24:	9809883a 	mov	r4,r19
   1ac28:	00282380 	call	28238 <__floatunsidf>
   1ac2c:	102f883a 	mov	r23,r2
   1ac30:	00800244 	movi	r2,9
   1ac34:	182d883a 	mov	r22,r3
   1ac38:	1480150e 	bge	r2,r18,1ac90 <_strtod_r+0x390>
   1ac3c:	90bffdc4 	addi	r2,r18,-9
   1ac40:	100490fa 	slli	r2,r2,3
   1ac44:	180b883a 	mov	r5,r3
   1ac48:	00c000f4 	movhi	r3,3
   1ac4c:	18e58a04 	addi	r3,r3,-27096
   1ac50:	1885883a 	add	r2,r3,r2
   1ac54:	11800017 	ldw	r6,0(r2)
   1ac58:	11c00117 	ldw	r7,4(r2)
   1ac5c:	b809883a 	mov	r4,r23
   1ac60:	0026f740 	call	26f74 <__muldf3>
   1ac64:	a009883a 	mov	r4,r20
   1ac68:	102f883a 	mov	r23,r2
   1ac6c:	182d883a 	mov	r22,r3
   1ac70:	00282380 	call	28238 <__floatunsidf>
   1ac74:	b809883a 	mov	r4,r23
   1ac78:	b00b883a 	mov	r5,r22
   1ac7c:	100d883a 	mov	r6,r2
   1ac80:	180f883a 	mov	r7,r3
   1ac84:	0025aa00 	call	25aa0 <__adddf3>
   1ac88:	102f883a 	mov	r23,r2
   1ac8c:	182d883a 	mov	r22,r3
   1ac90:	008003c4 	movi	r2,15
   1ac94:	17009416 	blt	r2,fp,1aee8 <_strtod_r+0x5e8>
   1ac98:	a8001926 	beq	r21,zero,1ad00 <_strtod_r+0x400>
   1ac9c:	05439c0e 	bge	zero,r21,1bb10 <_strtod_r+0x1210>
   1aca0:	00c00584 	movi	r3,22
   1aca4:	1d430f16 	blt	r3,r21,1b8e4 <_strtod_r+0xfe4>
   1aca8:	a82a90fa 	slli	r21,r21,3
   1acac:	008000f4 	movhi	r2,3
   1acb0:	10a58a04 	addi	r2,r2,-27096
   1acb4:	1545883a 	add	r2,r2,r21
   1acb8:	11000017 	ldw	r4,0(r2)
   1acbc:	11400117 	ldw	r5,4(r2)
   1acc0:	b80d883a 	mov	r6,r23
   1acc4:	b00f883a 	mov	r7,r22
   1acc8:	0026f740 	call	26f74 <__muldf3>
   1accc:	d8800815 	stw	r2,32(sp)
   1acd0:	1839883a 	mov	fp,r3
   1acd4:	003fb306 	br	1aba4 <__alt_data_end+0xfffdc3a4>
   1acd8:	014000f4 	movhi	r5,3
   1acdc:	2965c004 	addi	r5,r5,-26880
   1ace0:	d9800204 	addi	r6,sp,8
   1ace4:	d9000604 	addi	r4,sp,24
   1ace8:	00228ac0 	call	228ac <__hexnan>
   1acec:	00c00144 	movi	r3,5
   1acf0:	10c2161e 	bne	r2,r3,1b54c <_strtod_r+0xc4c>
   1acf4:	dd800317 	ldw	r22,12(sp)
   1acf8:	ddc00217 	ldw	r23,8(sp)
   1acfc:	b59ffc34 	orhi	r22,r22,32752
   1ad00:	ddc00815 	stw	r23,32(sp)
   1ad04:	b039883a 	mov	fp,r22
   1ad08:	003fa606 	br	1aba4 <__alt_data_end+0xfffdc3a4>
   1ad0c:	e001a926 	beq	fp,zero,1b3b4 <_strtod_r+0xab4>
   1ad10:	d8c00617 	ldw	r3,24(sp)
   1ad14:	18800044 	addi	r2,r3,1
   1ad18:	d8800615 	stw	r2,24(sp)
   1ad1c:	d8c00715 	stw	r3,28(sp)
   1ad20:	18c00047 	ldb	r3,1(r3)
   1ad24:	00800ac4 	movi	r2,43
   1ad28:	1881e526 	beq	r3,r2,1b4c0 <_strtod_r+0xbc0>
   1ad2c:	00800b44 	movi	r2,45
   1ad30:	1881dc26 	beq	r3,r2,1b4a4 <_strtod_r+0xba4>
   1ad34:	182f883a 	mov	r23,r3
   1ad38:	d8000e15 	stw	zero,56(sp)
   1ad3c:	b8bff404 	addi	r2,r23,-48
   1ad40:	01000244 	movi	r4,9
   1ad44:	2081ab36 	bltu	r4,r2,1b3f4 <_strtod_r+0xaf4>
   1ad48:	00800c04 	movi	r2,48
   1ad4c:	b880071e 	bne	r23,r2,1ad6c <_strtod_r+0x46c>
   1ad50:	d8800617 	ldw	r2,24(sp)
   1ad54:	b809883a 	mov	r4,r23
   1ad58:	10800044 	addi	r2,r2,1
   1ad5c:	d8800615 	stw	r2,24(sp)
   1ad60:	15c00007 	ldb	r23,0(r2)
   1ad64:	10800044 	addi	r2,r2,1
   1ad68:	b93ffc26 	beq	r23,r4,1ad5c <__alt_data_end+0xfffdc55c>
   1ad6c:	b8bff3c4 	addi	r2,r23,-49
   1ad70:	01000204 	movi	r4,8
   1ad74:	20bf8736 	bltu	r4,r2,1ab94 <__alt_data_end+0xfffdc394>
   1ad78:	d8c00617 	ldw	r3,24(sp)
   1ad7c:	b93ff404 	addi	r4,r23,-48
   1ad80:	01400244 	movi	r5,9
   1ad84:	1ac00044 	addi	r11,r3,1
   1ad88:	dac00615 	stw	r11,24(sp)
   1ad8c:	d8c00d15 	stw	r3,52(sp)
   1ad90:	18c00043 	ldbu	r3,1(r3)
   1ad94:	18bff404 	addi	r2,r3,-48
   1ad98:	1dc03fcc 	andi	r23,r3,255
   1ad9c:	bdc0201c 	xori	r23,r23,128
   1ada0:	10803fcc 	andi	r2,r2,255
   1ada4:	bdffe004 	addi	r23,r23,-128
   1ada8:	28801136 	bltu	r5,r2,1adf0 <_strtod_r+0x4f0>
   1adac:	d8c00d17 	ldw	r3,52(sp)
   1adb0:	1d400084 	addi	r21,r3,2
   1adb4:	01400284 	movi	r5,10
   1adb8:	002587c0 	call	2587c <__mulsi3>
   1adbc:	dd400615 	stw	r21,24(sp)
   1adc0:	a9400003 	ldbu	r5,0(r21)
   1adc4:	15c5883a 	add	r2,r2,r23
   1adc8:	a817883a 	mov	r11,r21
   1adcc:	28fff404 	addi	r3,r5,-48
   1add0:	2dc03fcc 	andi	r23,r5,255
   1add4:	bdc0201c 	xori	r23,r23,128
   1add8:	18c03fcc 	andi	r3,r3,255
   1addc:	01400244 	movi	r5,9
   1ade0:	113ff404 	addi	r4,r2,-48
   1ade4:	bdffe004 	addi	r23,r23,-128
   1ade8:	ad400044 	addi	r21,r21,1
   1adec:	28fff12e 	bgeu	r5,r3,1adb4 <__alt_data_end+0xfffdc5b4>
   1adf0:	d8c00d17 	ldw	r3,52(sp)
   1adf4:	00800204 	movi	r2,8
   1adf8:	58d7c83a 	sub	r11,r11,r3
   1adfc:	12c2ab16 	blt	r2,r11,1b8ac <_strtod_r+0xfac>
   1ae00:	009387c4 	movi	r2,19999
   1ae04:	1100010e 	bge	r2,r4,1ae0c <_strtod_r+0x50c>
   1ae08:	1009883a 	mov	r4,r2
   1ae0c:	d8c00e17 	ldw	r3,56(sp)
   1ae10:	183f6126 	beq	r3,zero,1ab98 <__alt_data_end+0xfffdc398>
   1ae14:	0109c83a 	sub	r4,zero,r4
   1ae18:	003f5f06 	br	1ab98 <__alt_data_end+0xfffdc398>
   1ae1c:	80800047 	ldb	r2,1(r16)
   1ae20:	00c01604 	movi	r3,88
   1ae24:	10c20026 	beq	r2,r3,1b628 <_strtod_r+0xd28>
   1ae28:	00c01e04 	movi	r3,120
   1ae2c:	10c1fe26 	beq	r2,r3,1b628 <_strtod_r+0xd28>
   1ae30:	80800044 	addi	r2,r16,1
   1ae34:	1021883a 	mov	r16,r2
   1ae38:	d8800615 	stw	r2,24(sp)
   1ae3c:	10800044 	addi	r2,r2,1
   1ae40:	173fffc3 	ldbu	fp,-1(r2)
   1ae44:	e0c03fcc 	andi	r3,fp,255
   1ae48:	18c0201c 	xori	r3,r3,128
   1ae4c:	18ffe004 	addi	r3,r3,-128
   1ae50:	193ff826 	beq	r3,r4,1ae34 <__alt_data_end+0xfffdc634>
   1ae54:	18002126 	beq	r3,zero,1aedc <_strtod_r+0x5dc>
   1ae58:	00c00044 	movi	r3,1
   1ae5c:	dc000815 	stw	r16,32(sp)
   1ae60:	d8c00c15 	stw	r3,48(sp)
   1ae64:	003f1b06 	br	1aad4 <__alt_data_end+0xfffdc2d4>
   1ae68:	8809883a 	mov	r4,r17
   1ae6c:	00191cc0 	call	191cc <_localeconv_r>
   1ae70:	11000017 	ldw	r4,0(r2)
   1ae74:	00137600 	call	13760 <strlen>
   1ae78:	d8c00617 	ldw	r3,24(sp)
   1ae7c:	1885883a 	add	r2,r3,r2
   1ae80:	d8800615 	stw	r2,24(sp)
   1ae84:	15c00007 	ldb	r23,0(r2)
   1ae88:	8001771e 	bne	r16,zero,1b468 <_strtod_r+0xb68>
   1ae8c:	01000c04 	movi	r4,48
   1ae90:	b903581e 	bne	r23,r4,1bbf4 <_strtod_r+0x12f4>
   1ae94:	11000044 	addi	r4,r2,1
   1ae98:	b80b883a 	mov	r5,r23
   1ae9c:	d9000615 	stw	r4,24(sp)
   1aea0:	25c00007 	ldb	r23,0(r4)
   1aea4:	20adc83a 	sub	r22,r4,r2
   1aea8:	21000044 	addi	r4,r4,1
   1aeac:	b97ffb26 	beq	r23,r5,1ae9c <__alt_data_end+0xfffdc69c>
   1aeb0:	b8bff3c4 	addi	r2,r23,-49
   1aeb4:	01000204 	movi	r4,8
   1aeb8:	2083002e 	bgeu	r4,r2,1babc <_strtod_r+0x11bc>
   1aebc:	00801944 	movi	r2,101
   1aec0:	b8813a26 	beq	r23,r2,1b3ac <_strtod_r+0xaac>
   1aec4:	0039883a 	mov	fp,zero
   1aec8:	d8000b15 	stw	zero,44(sp)
   1aecc:	04800044 	movi	r18,1
   1aed0:	003f2e06 	br	1ab8c <__alt_data_end+0xfffdc38c>
   1aed4:	d8c00c17 	ldw	r3,48(sp)
   1aed8:	18017d26 	beq	r3,zero,1b4d0 <_strtod_r+0xbd0>
   1aedc:	d8000815 	stw	zero,32(sp)
   1aee0:	0039883a 	mov	fp,zero
   1aee4:	003f2f06 	br	1aba4 <__alt_data_end+0xfffdc3a4>
   1aee8:	e4a5c83a 	sub	r18,fp,r18
   1aeec:	9565883a 	add	r18,r18,r21
   1aef0:	0482370e 	bge	zero,r18,1b7d0 <_strtod_r+0xed0>
   1aef4:	908003cc 	andi	r2,r18,15
   1aef8:	10000b26 	beq	r2,zero,1af28 <_strtod_r+0x628>
   1aefc:	100490fa 	slli	r2,r2,3
   1af00:	00c000f4 	movhi	r3,3
   1af04:	18e58a04 	addi	r3,r3,-27096
   1af08:	1885883a 	add	r2,r3,r2
   1af0c:	11000017 	ldw	r4,0(r2)
   1af10:	11400117 	ldw	r5,4(r2)
   1af14:	b80d883a 	mov	r6,r23
   1af18:	b00f883a 	mov	r7,r22
   1af1c:	0026f740 	call	26f74 <__muldf3>
   1af20:	102f883a 	mov	r23,r2
   1af24:	182d883a 	mov	r22,r3
   1af28:	053ffc04 	movi	r20,-16
   1af2c:	9524703a 	and	r18,r18,r20
   1af30:	90003826 	beq	r18,zero,1b014 <_strtod_r+0x714>
   1af34:	00804d04 	movi	r2,308
   1af38:	1481eb16 	blt	r2,r18,1b6e8 <_strtod_r+0xde8>
   1af3c:	9029d13a 	srai	r20,r18,4
   1af40:	02c00044 	movi	r11,1
   1af44:	5d03900e 	bge	r11,r20,1bd88 <_strtod_r+0x1488>
   1af48:	010000f4 	movhi	r4,3
   1af4c:	21258004 	addi	r4,r4,-27136
   1af50:	2011883a 	mov	r8,r4
   1af54:	0025883a 	mov	r18,zero
   1af58:	880b883a 	mov	r5,r17
   1af5c:	d9000715 	stw	r4,28(sp)
   1af60:	dc000b15 	stw	r16,44(sp)
   1af64:	9023883a 	mov	r17,r18
   1af68:	b805883a 	mov	r2,r23
   1af6c:	b007883a 	mov	r3,r22
   1af70:	0009883a 	mov	r4,zero
   1af74:	4021883a 	mov	r16,r8
   1af78:	2825883a 	mov	r18,r5
   1af7c:	a180004c 	andi	r6,r20,1
   1af80:	30000826 	beq	r6,zero,1afa4 <_strtod_r+0x6a4>
   1af84:	81800017 	ldw	r6,0(r16)
   1af88:	81c00117 	ldw	r7,4(r16)
   1af8c:	1009883a 	mov	r4,r2
   1af90:	180b883a 	mov	r5,r3
   1af94:	dac01315 	stw	r11,76(sp)
   1af98:	0026f740 	call	26f74 <__muldf3>
   1af9c:	dac01317 	ldw	r11,76(sp)
   1afa0:	01000044 	movi	r4,1
   1afa4:	a029d07a 	srai	r20,r20,1
   1afa8:	8c400044 	addi	r17,r17,1
   1afac:	84000204 	addi	r16,r16,8
   1afb0:	a2fff21e 	bne	r20,r11,1af7c <__alt_data_end+0xfffdc77c>
   1afb4:	900b883a 	mov	r5,r18
   1afb8:	21003fcc 	andi	r4,r4,255
   1afbc:	8825883a 	mov	r18,r17
   1afc0:	dc000b17 	ldw	r16,44(sp)
   1afc4:	2823883a 	mov	r17,r5
   1afc8:	2003c01e 	bne	r4,zero,1becc <_strtod_r+0x15cc>
   1afcc:	901490fa 	slli	r10,r18,3
   1afd0:	d8800717 	ldw	r2,28(sp)
   1afd4:	01ff2c34 	movhi	r7,64688
   1afd8:	b80d883a 	mov	r6,r23
   1afdc:	12a5883a 	add	r18,r2,r10
   1afe0:	91000017 	ldw	r4,0(r18)
   1afe4:	91400117 	ldw	r5,4(r18)
   1afe8:	b1cf883a 	add	r7,r22,r7
   1afec:	0026f740 	call	26f74 <__muldf3>
   1aff0:	102f883a 	mov	r23,r2
   1aff4:	011f2834 	movhi	r4,31904
   1aff8:	189ffc2c 	andhi	r2,r3,32752
   1affc:	2081ba36 	bltu	r4,r2,1b6e8 <_strtod_r+0xde8>
   1b000:	011f2434 	movhi	r4,31888
   1b004:	20834a2e 	bgeu	r4,r2,1bd30 <_strtod_r+0x1430>
   1b008:	059ffc34 	movhi	r22,32752
   1b00c:	b5bfffc4 	addi	r22,r22,-1
   1b010:	05ffffc4 	movi	r23,-1
   1b014:	d8000715 	stw	zero,28(sp)
   1b018:	d9400817 	ldw	r5,32(sp)
   1b01c:	dcc00015 	stw	r19,0(sp)
   1b020:	e00f883a 	mov	r7,fp
   1b024:	800d883a 	mov	r6,r16
   1b028:	8809883a 	mov	r4,r17
   1b02c:	00196980 	call	19698 <__s2b>
   1b030:	d8800b15 	stw	r2,44(sp)
   1b034:	1001ac26 	beq	r2,zero,1b6e8 <_strtod_r+0xde8>
   1b038:	a807d7fa 	srai	r3,r21,31
   1b03c:	0545c83a 	sub	r2,zero,r21
   1b040:	dd400c15 	stw	r21,48(sp)
   1b044:	1886703a 	and	r3,r3,r2
   1b048:	d8c00e15 	stw	r3,56(sp)
   1b04c:	a8015916 	blt	r21,zero,1b5b4 <_strtod_r+0xcb4>
   1b050:	d9400b17 	ldw	r5,44(sp)
   1b054:	0011883a 	mov	r8,zero
   1b058:	0021883a 	mov	r16,zero
   1b05c:	29400304 	addi	r5,r5,12
   1b060:	d9401115 	stw	r5,68(sp)
   1b064:	4025883a 	mov	r18,r8
   1b068:	d8800b17 	ldw	r2,44(sp)
   1b06c:	8809883a 	mov	r4,r17
   1b070:	11400117 	ldw	r5,4(r2)
   1b074:	00194800 	call	19480 <_Balloc>
   1b078:	1027883a 	mov	r19,r2
   1b07c:	10015226 	beq	r2,zero,1b5c8 <_strtod_r+0xcc8>
   1b080:	d8c00b17 	ldw	r3,44(sp)
   1b084:	d9401117 	ldw	r5,68(sp)
   1b088:	11000304 	addi	r4,r2,12
   1b08c:	19800417 	ldw	r6,16(r3)
   1b090:	31800084 	addi	r6,r6,2
   1b094:	318d883a 	add	r6,r6,r6
   1b098:	318d883a 	add	r6,r6,r6
   1b09c:	00127200 	call	12720 <memcpy>
   1b0a0:	d9000204 	addi	r4,sp,8
   1b0a4:	d9000015 	stw	r4,0(sp)
   1b0a8:	d9c00404 	addi	r7,sp,16
   1b0ac:	b80b883a 	mov	r5,r23
   1b0b0:	b00d883a 	mov	r6,r22
   1b0b4:	8809883a 	mov	r4,r17
   1b0b8:	001a1d00 	call	1a1d0 <__d2b>
   1b0bc:	d8800515 	stw	r2,20(sp)
   1b0c0:	ddc00815 	stw	r23,32(sp)
   1b0c4:	dd801215 	stw	r22,72(sp)
   1b0c8:	10029f26 	beq	r2,zero,1bb48 <_strtod_r+0x1248>
   1b0cc:	01400044 	movi	r5,1
   1b0d0:	8809883a 	mov	r4,r17
   1b0d4:	00198b40 	call	198b4 <__i2b>
   1b0d8:	1021883a 	mov	r16,r2
   1b0dc:	10013a26 	beq	r2,zero,1b5c8 <_strtod_r+0xcc8>
   1b0e0:	d8800417 	ldw	r2,16(sp)
   1b0e4:	1000b816 	blt	r2,zero,1b3c8 <_strtod_r+0xac8>
   1b0e8:	d9400e17 	ldw	r5,56(sp)
   1b0ec:	d9000c17 	ldw	r4,48(sp)
   1b0f0:	28a9883a 	add	r20,r5,r2
   1b0f4:	d9400717 	ldw	r5,28(sp)
   1b0f8:	dd400217 	ldw	r21,8(sp)
   1b0fc:	073f0084 	movi	fp,-1022
   1b100:	1147c83a 	sub	r3,r2,r5
   1b104:	1d47883a 	add	r3,r3,r21
   1b108:	00800d84 	movi	r2,54
   1b10c:	18ffffc4 	addi	r3,r3,-1
   1b110:	156bc83a 	sub	r21,r2,r21
   1b114:	1f00950e 	bge	r3,fp,1b36c <_strtod_r+0xa6c>
   1b118:	e0f9c83a 	sub	fp,fp,r3
   1b11c:	008007c4 	movi	r2,31
   1b120:	af2bc83a 	sub	r21,r21,fp
   1b124:	1700ac16 	blt	r2,fp,1b3d8 <_strtod_r+0xad8>
   1b128:	00800044 	movi	r2,1
   1b12c:	1704983a 	sll	r2,r2,fp
   1b130:	d8000d15 	stw	zero,52(sp)
   1b134:	d8800f15 	stw	r2,60(sp)
   1b138:	2547883a 	add	r3,r4,r21
   1b13c:	d9000717 	ldw	r4,28(sp)
   1b140:	a56b883a 	add	r21,r20,r21
   1b144:	20f9883a 	add	fp,r4,r3
   1b148:	a009883a 	mov	r4,r20
   1b14c:	ad00010e 	bge	r21,r20,1b154 <_strtod_r+0x854>
   1b150:	a809883a 	mov	r4,r21
   1b154:	e005883a 	mov	r2,fp
   1b158:	2700010e 	bge	r4,fp,1b160 <_strtod_r+0x860>
   1b15c:	2005883a 	mov	r2,r4
   1b160:	0080030e 	bge	zero,r2,1b170 <_strtod_r+0x870>
   1b164:	a8abc83a 	sub	r21,r21,r2
   1b168:	e0b9c83a 	sub	fp,fp,r2
   1b16c:	a0a9c83a 	sub	r20,r20,r2
   1b170:	d9400e17 	ldw	r5,56(sp)
   1b174:	28001126 	beq	r5,zero,1b1bc <_strtod_r+0x8bc>
   1b178:	280d883a 	mov	r6,r5
   1b17c:	8809883a 	mov	r4,r17
   1b180:	800b883a 	mov	r5,r16
   1b184:	0019b7c0 	call	19b7c <__pow5mult>
   1b188:	1021883a 	mov	r16,r2
   1b18c:	10010e26 	beq	r2,zero,1b5c8 <_strtod_r+0xcc8>
   1b190:	d9800517 	ldw	r6,20(sp)
   1b194:	100b883a 	mov	r5,r2
   1b198:	8809883a 	mov	r4,r17
   1b19c:	00198f00 	call	198f0 <__multiply>
   1b1a0:	10010926 	beq	r2,zero,1b5c8 <_strtod_r+0xcc8>
   1b1a4:	d9400517 	ldw	r5,20(sp)
   1b1a8:	8809883a 	mov	r4,r17
   1b1ac:	d8801315 	stw	r2,76(sp)
   1b1b0:	00195280 	call	19528 <_Bfree>
   1b1b4:	d8801317 	ldw	r2,76(sp)
   1b1b8:	d8800515 	stw	r2,20(sp)
   1b1bc:	0540060e 	bge	zero,r21,1b1d8 <_strtod_r+0x8d8>
   1b1c0:	d9400517 	ldw	r5,20(sp)
   1b1c4:	a80d883a 	mov	r6,r21
   1b1c8:	8809883a 	mov	r4,r17
   1b1cc:	0019cbc0 	call	19cbc <__lshift>
   1b1d0:	d8800515 	stw	r2,20(sp)
   1b1d4:	10025c26 	beq	r2,zero,1bb48 <_strtod_r+0x1248>
   1b1d8:	d8800c17 	ldw	r2,48(sp)
   1b1dc:	10000626 	beq	r2,zero,1b1f8 <_strtod_r+0x8f8>
   1b1e0:	d9800c17 	ldw	r6,48(sp)
   1b1e4:	980b883a 	mov	r5,r19
   1b1e8:	8809883a 	mov	r4,r17
   1b1ec:	0019b7c0 	call	19b7c <__pow5mult>
   1b1f0:	1027883a 	mov	r19,r2
   1b1f4:	1000f426 	beq	r2,zero,1b5c8 <_strtod_r+0xcc8>
   1b1f8:	0700060e 	bge	zero,fp,1b214 <_strtod_r+0x914>
   1b1fc:	980b883a 	mov	r5,r19
   1b200:	e00d883a 	mov	r6,fp
   1b204:	8809883a 	mov	r4,r17
   1b208:	0019cbc0 	call	19cbc <__lshift>
   1b20c:	1027883a 	mov	r19,r2
   1b210:	1000ed26 	beq	r2,zero,1b5c8 <_strtod_r+0xcc8>
   1b214:	0500060e 	bge	zero,r20,1b230 <_strtod_r+0x930>
   1b218:	800b883a 	mov	r5,r16
   1b21c:	a00d883a 	mov	r6,r20
   1b220:	8809883a 	mov	r4,r17
   1b224:	0019cbc0 	call	19cbc <__lshift>
   1b228:	1021883a 	mov	r16,r2
   1b22c:	1000e626 	beq	r2,zero,1b5c8 <_strtod_r+0xcc8>
   1b230:	d9400517 	ldw	r5,20(sp)
   1b234:	980d883a 	mov	r6,r19
   1b238:	8809883a 	mov	r4,r17
   1b23c:	0019e640 	call	19e64 <__mdiff>
   1b240:	1025883a 	mov	r18,r2
   1b244:	1000e026 	beq	r2,zero,1b5c8 <_strtod_r+0xcc8>
   1b248:	15400317 	ldw	r21,12(r2)
   1b24c:	800b883a 	mov	r5,r16
   1b250:	10000315 	stw	zero,12(r2)
   1b254:	1009883a 	mov	r4,r2
   1b258:	0019e040 	call	19e04 <__mcmp>
   1b25c:	10026716 	blt	r2,zero,1bbfc <_strtod_r+0x12fc>
   1b260:	10029626 	beq	r2,zero,1bcbc <_strtod_r+0x13bc>
   1b264:	800b883a 	mov	r5,r16
   1b268:	9009883a 	mov	r4,r18
   1b26c:	001a31c0 	call	1a31c <__ratio>
   1b270:	000d883a 	mov	r6,zero
   1b274:	01d00034 	movhi	r7,16384
   1b278:	1009883a 	mov	r4,r2
   1b27c:	180b883a 	mov	r5,r3
   1b280:	1039883a 	mov	fp,r2
   1b284:	1829883a 	mov	r20,r3
   1b288:	0026e800 	call	26e80 <__ledf2>
   1b28c:	00803b16 	blt	zero,r2,1b37c <_strtod_r+0xa7c>
   1b290:	a8005e26 	beq	r21,zero,1b40c <_strtod_r+0xb0c>
   1b294:	050ffc34 	movhi	r20,16368
   1b298:	d8000f15 	stw	zero,60(sp)
   1b29c:	d8001015 	stw	zero,64(sp)
   1b2a0:	dd000d15 	stw	r20,52(sp)
   1b2a4:	b71ffc2c 	andhi	fp,r22,32752
   1b2a8:	009ff834 	movhi	r2,32736
   1b2ac:	e080f226 	beq	fp,r2,1b678 <_strtod_r+0xd78>
   1b2b0:	d9000717 	ldw	r4,28(sp)
   1b2b4:	20000c26 	beq	r4,zero,1b2e8 <_strtod_r+0x9e8>
   1b2b8:	0081a834 	movhi	r2,1696
   1b2bc:	17000a36 	bltu	r2,fp,1b2e8 <_strtod_r+0x9e8>
   1b2c0:	d9001017 	ldw	r4,64(sp)
   1b2c4:	d9400d17 	ldw	r5,52(sp)
   1b2c8:	01d07834 	movhi	r7,16864
   1b2cc:	39ffffc4 	addi	r7,r7,-1
   1b2d0:	01bff034 	movhi	r6,65472
   1b2d4:	0026e800 	call	26e80 <__ledf2>
   1b2d8:	0080a70e 	bge	zero,r2,1b578 <_strtod_r+0xc78>
   1b2dc:	0081ac34 	movhi	r2,1712
   1b2e0:	a091883a 	add	r8,r20,r2
   1b2e4:	4729c83a 	sub	r20,r8,fp
   1b2e8:	b809883a 	mov	r4,r23
   1b2ec:	b00b883a 	mov	r5,r22
   1b2f0:	001a0600 	call	1a060 <__ulp>
   1b2f4:	d9000f17 	ldw	r4,60(sp)
   1b2f8:	a00b883a 	mov	r5,r20
   1b2fc:	100d883a 	mov	r6,r2
   1b300:	180f883a 	mov	r7,r3
   1b304:	0026f740 	call	26f74 <__muldf3>
   1b308:	b80d883a 	mov	r6,r23
   1b30c:	b00f883a 	mov	r7,r22
   1b310:	1009883a 	mov	r4,r2
   1b314:	180b883a 	mov	r5,r3
   1b318:	0025aa00 	call	25aa0 <__adddf3>
   1b31c:	102f883a 	mov	r23,r2
   1b320:	182d883a 	mov	r22,r3
   1b324:	1829883a 	mov	r20,r3
   1b328:	d9000717 	ldw	r4,28(sp)
   1b32c:	2000021e 	bne	r4,zero,1b338 <_strtod_r+0xa38>
   1b330:	a09ffc2c 	andhi	r2,r20,32752
   1b334:	e080f126 	beq	fp,r2,1b6fc <_strtod_r+0xdfc>
   1b338:	d9400517 	ldw	r5,20(sp)
   1b33c:	8809883a 	mov	r4,r17
   1b340:	00195280 	call	19528 <_Bfree>
   1b344:	980b883a 	mov	r5,r19
   1b348:	8809883a 	mov	r4,r17
   1b34c:	00195280 	call	19528 <_Bfree>
   1b350:	800b883a 	mov	r5,r16
   1b354:	8809883a 	mov	r4,r17
   1b358:	00195280 	call	19528 <_Bfree>
   1b35c:	900b883a 	mov	r5,r18
   1b360:	8809883a 	mov	r4,r17
   1b364:	00195280 	call	19528 <_Bfree>
   1b368:	003f3f06 	br	1b068 <__alt_data_end+0xfffdc868>
   1b36c:	00c00044 	movi	r3,1
   1b370:	d8000d15 	stw	zero,52(sp)
   1b374:	d8c00f15 	stw	r3,60(sp)
   1b378:	003f6f06 	br	1b138 <__alt_data_end+0xfffdc938>
   1b37c:	000d883a 	mov	r6,zero
   1b380:	01cff834 	movhi	r7,16352
   1b384:	e009883a 	mov	r4,fp
   1b388:	a00b883a 	mov	r5,r20
   1b38c:	0026f740 	call	26f74 <__muldf3>
   1b390:	d8801015 	stw	r2,64(sp)
   1b394:	d8c00d15 	stw	r3,52(sp)
   1b398:	a8001a1e 	bne	r21,zero,1b404 <_strtod_r+0xb04>
   1b39c:	1a20003c 	xorhi	r8,r3,32768
   1b3a0:	d8800f15 	stw	r2,60(sp)
   1b3a4:	4029883a 	mov	r20,r8
   1b3a8:	003fbe06 	br	1b2a4 <__alt_data_end+0xfffdcaa4>
   1b3ac:	d8000b15 	stw	zero,44(sp)
   1b3b0:	04800044 	movi	r18,1
   1b3b4:	b000021e 	bne	r22,zero,1b3c0 <_strtod_r+0xac0>
   1b3b8:	d8c00c17 	ldw	r3,48(sp)
   1b3bc:	183d9d26 	beq	r3,zero,1aa34 <__alt_data_end+0xfffdc234>
   1b3c0:	0039883a 	mov	fp,zero
   1b3c4:	003e5206 	br	1ad10 <__alt_data_end+0xfffdc510>
   1b3c8:	d8c00c17 	ldw	r3,48(sp)
   1b3cc:	dd000e17 	ldw	r20,56(sp)
   1b3d0:	1889c83a 	sub	r4,r3,r2
   1b3d4:	003f4706 	br	1b0f4 <__alt_data_end+0xfffdc8f4>
   1b3d8:	00bef884 	movi	r2,-1054
   1b3dc:	07000044 	movi	fp,1
   1b3e0:	10c5c83a 	sub	r2,r2,r3
   1b3e4:	e084983a 	sll	r2,fp,r2
   1b3e8:	df000f15 	stw	fp,60(sp)
   1b3ec:	d8800d15 	stw	r2,52(sp)
   1b3f0:	003f5106 	br	1b138 <__alt_data_end+0xfffdc938>
   1b3f4:	d8c00717 	ldw	r3,28(sp)
   1b3f8:	0009883a 	mov	r4,zero
   1b3fc:	d8c00615 	stw	r3,24(sp)
   1b400:	003de506 	br	1ab98 <__alt_data_end+0xfffdc398>
   1b404:	da000d17 	ldw	r8,52(sp)
   1b408:	003fe506 	br	1b3a0 <__alt_data_end+0xfffdcba0>
   1b40c:	b800521e 	bne	r23,zero,1b558 <_strtod_r+0xc58>
   1b410:	01000434 	movhi	r4,16
   1b414:	213fffc4 	addi	r4,r4,-1
   1b418:	b104703a 	and	r2,r22,r4
   1b41c:	1000501e 	bne	r2,zero,1b560 <_strtod_r+0xc60>
   1b420:	000d883a 	mov	r6,zero
   1b424:	01cffc34 	movhi	r7,16368
   1b428:	e009883a 	mov	r4,fp
   1b42c:	a00b883a 	mov	r5,r20
   1b430:	0026e800 	call	26e80 <__ledf2>
   1b434:	10024216 	blt	r2,zero,1bd40 <_strtod_r+0x1440>
   1b438:	a00b883a 	mov	r5,r20
   1b43c:	000d883a 	mov	r6,zero
   1b440:	01cff834 	movhi	r7,16352
   1b444:	e009883a 	mov	r4,fp
   1b448:	0026f740 	call	26f74 <__muldf3>
   1b44c:	d8801015 	stw	r2,64(sp)
   1b450:	d8c00d15 	stw	r3,52(sp)
   1b454:	1029883a 	mov	r20,r2
   1b458:	1a20003c 	xorhi	r8,r3,32768
   1b45c:	dd000f15 	stw	r20,60(sp)
   1b460:	4029883a 	mov	r20,r8
   1b464:	003f8f06 	br	1b2a4 <__alt_data_end+0xfffdcaa4>
   1b468:	8039883a 	mov	fp,r16
   1b46c:	002d883a 	mov	r22,zero
   1b470:	d8000b15 	stw	zero,44(sp)
   1b474:	bd7ff404 	addi	r21,r23,-48
   1b478:	00800244 	movi	r2,9
   1b47c:	15401236 	bltu	r2,r21,1b4c8 <_strtod_r+0xbc8>
   1b480:	dd400e15 	stw	r21,56(sp)
   1b484:	b0800044 	addi	r2,r22,1
   1b488:	a801701e 	bne	r21,zero,1ba4c <_strtod_r+0x114c>
   1b48c:	ddc00617 	ldw	r23,24(sp)
   1b490:	102d883a 	mov	r22,r2
   1b494:	b8800044 	addi	r2,r23,1
   1b498:	d8800615 	stw	r2,24(sp)
   1b49c:	bdc00047 	ldb	r23,1(r23)
   1b4a0:	003ff406 	br	1b474 <__alt_data_end+0xfffdcc74>
   1b4a4:	00c00044 	movi	r3,1
   1b4a8:	d8c00e15 	stw	r3,56(sp)
   1b4ac:	d8c00717 	ldw	r3,28(sp)
   1b4b0:	18800084 	addi	r2,r3,2
   1b4b4:	d8800615 	stw	r2,24(sp)
   1b4b8:	1dc00087 	ldb	r23,2(r3)
   1b4bc:	003e1f06 	br	1ad3c <__alt_data_end+0xfffdc53c>
   1b4c0:	d8000e15 	stw	zero,56(sp)
   1b4c4:	003ff906 	br	1b4ac <__alt_data_end+0xfffdccac>
   1b4c8:	04800044 	movi	r18,1
   1b4cc:	003dad06 	br	1ab84 <__alt_data_end+0xfffdc384>
   1b4d0:	903d581e 	bne	r18,zero,1aa34 <__alt_data_end+0xfffdc234>
   1b4d4:	00801384 	movi	r2,78
   1b4d8:	b8800526 	beq	r23,r2,1b4f0 <_strtod_r+0xbf0>
   1b4dc:	15fd530e 	bge	r2,r23,1aa2c <__alt_data_end+0xfffdc22c>
   1b4e0:	00801a44 	movi	r2,105
   1b4e4:	b8819a26 	beq	r23,r2,1bb50 <_strtod_r+0x1250>
   1b4e8:	00801b84 	movi	r2,110
   1b4ec:	b8bd511e 	bne	r23,r2,1aa34 <__alt_data_end+0xfffdc234>
   1b4f0:	014000f4 	movhi	r5,3
   1b4f4:	d9000617 	ldw	r4,24(sp)
   1b4f8:	2965bf04 	addi	r5,r5,-26884
   1b4fc:	01c00644 	movi	r7,25
   1b500:	00000b06 	br	1b530 <_strtod_r+0xc30>
   1b504:	21000044 	addi	r4,r4,1
   1b508:	20800003 	ldbu	r2,0(r4)
   1b50c:	10ffefc4 	addi	r3,r2,-65
   1b510:	10803fcc 	andi	r2,r2,255
   1b514:	1080201c 	xori	r2,r2,128
   1b518:	18c03fcc 	andi	r3,r3,255
   1b51c:	10bfe004 	addi	r2,r2,-128
   1b520:	38c00136 	bltu	r7,r3,1b528 <_strtod_r+0xc28>
   1b524:	10800804 	addi	r2,r2,32
   1b528:	29400044 	addi	r5,r5,1
   1b52c:	11bd411e 	bne	r2,r6,1aa34 <__alt_data_end+0xfffdc234>
   1b530:	29800007 	ldb	r6,0(r5)
   1b534:	303ff31e 	bne	r6,zero,1b504 <__alt_data_end+0xfffdcd04>
   1b538:	20800044 	addi	r2,r4,1
   1b53c:	d8800615 	stw	r2,24(sp)
   1b540:	20c00047 	ldb	r3,1(r4)
   1b544:	00800a04 	movi	r2,40
   1b548:	18bde326 	beq	r3,r2,1acd8 <__alt_data_end+0xfffdc4d8>
   1b54c:	05bffe34 	movhi	r22,65528
   1b550:	002f883a 	mov	r23,zero
   1b554:	003dea06 	br	1ad00 <__alt_data_end+0xfffdc500>
   1b558:	00800044 	movi	r2,1
   1b55c:	b880ff26 	beq	r23,r2,1b95c <_strtod_r+0x105c>
   1b560:	014ffc34 	movhi	r5,16368
   1b564:	d8000f15 	stw	zero,60(sp)
   1b568:	052ffc34 	movhi	r20,49136
   1b56c:	d8001015 	stw	zero,64(sp)
   1b570:	d9400d15 	stw	r5,52(sp)
   1b574:	003f4b06 	br	1b2a4 <__alt_data_end+0xfffdcaa4>
   1b578:	d9001017 	ldw	r4,64(sp)
   1b57c:	d9400d17 	ldw	r5,52(sp)
   1b580:	002443c0 	call	2443c <__fixunsdfsi>
   1b584:	1000f126 	beq	r2,zero,1b94c <_strtod_r+0x104c>
   1b588:	1009883a 	mov	r4,r2
   1b58c:	00282380 	call	28238 <__floatunsidf>
   1b590:	d8801015 	stw	r2,64(sp)
   1b594:	d8c00d15 	stw	r3,52(sp)
   1b598:	a800ea1e 	bne	r21,zero,1b944 <_strtod_r+0x1044>
   1b59c:	d8800d17 	ldw	r2,52(sp)
   1b5a0:	1220003c 	xorhi	r8,r2,32768
   1b5a4:	d8c01017 	ldw	r3,64(sp)
   1b5a8:	4029883a 	mov	r20,r8
   1b5ac:	d8c00f15 	stw	r3,60(sp)
   1b5b0:	003f4a06 	br	1b2dc <__alt_data_end+0xfffdcadc>
   1b5b4:	d8000c15 	stw	zero,48(sp)
   1b5b8:	003ea506 	br	1b050 <__alt_data_end+0xfffdc850>
   1b5bc:	d8c00817 	ldw	r3,32(sp)
   1b5c0:	00bfffc4 	movi	r2,-1
   1b5c4:	1880441e 	bne	r3,r2,1b6d8 <_strtod_r+0xdd8>
   1b5c8:	9011883a 	mov	r8,r18
   1b5cc:	d8800517 	ldw	r2,20(sp)
   1b5d0:	00c00884 	movi	r3,34
   1b5d4:	88c00015 	stw	r3,0(r17)
   1b5d8:	d8000815 	stw	zero,32(sp)
   1b5dc:	071ffc34 	movhi	fp,32752
   1b5e0:	100b883a 	mov	r5,r2
   1b5e4:	8809883a 	mov	r4,r17
   1b5e8:	da001315 	stw	r8,76(sp)
   1b5ec:	00195280 	call	19528 <_Bfree>
   1b5f0:	980b883a 	mov	r5,r19
   1b5f4:	8809883a 	mov	r4,r17
   1b5f8:	00195280 	call	19528 <_Bfree>
   1b5fc:	800b883a 	mov	r5,r16
   1b600:	8809883a 	mov	r4,r17
   1b604:	00195280 	call	19528 <_Bfree>
   1b608:	d9400b17 	ldw	r5,44(sp)
   1b60c:	8809883a 	mov	r4,r17
   1b610:	00195280 	call	19528 <_Bfree>
   1b614:	da001317 	ldw	r8,76(sp)
   1b618:	8809883a 	mov	r4,r17
   1b61c:	400b883a 	mov	r5,r8
   1b620:	00195280 	call	19528 <_Bfree>
   1b624:	003d5f06 	br	1aba4 <__alt_data_end+0xfffdc3a4>
   1b628:	d8c00a17 	ldw	r3,40(sp)
   1b62c:	d8800504 	addi	r2,sp,20
   1b630:	018000f4 	movhi	r6,3
   1b634:	31a5c504 	addi	r6,r6,-26860
   1b638:	d8c00115 	stw	r3,4(sp)
   1b63c:	d8800015 	stw	r2,0(sp)
   1b640:	d9c00404 	addi	r7,sp,16
   1b644:	d9400604 	addi	r5,sp,24
   1b648:	8809883a 	mov	r4,r17
   1b64c:	002205c0 	call	2205c <__gethex>
   1b650:	148001cc 	andi	r18,r2,7
   1b654:	903e2126 	beq	r18,zero,1aedc <__alt_data_end+0xfffdc6dc>
   1b658:	00c00184 	movi	r3,6
   1b65c:	90c0c71e 	bne	r18,r3,1b97c <_strtod_r+0x107c>
   1b660:	84000044 	addi	r16,r16,1
   1b664:	dc000615 	stw	r16,24(sp)
   1b668:	d8000815 	stw	zero,32(sp)
   1b66c:	0039883a 	mov	fp,zero
   1b670:	d8000a15 	stw	zero,40(sp)
   1b674:	003d4b06 	br	1aba4 <__alt_data_end+0xfffdc3a4>
   1b678:	00bf2c34 	movhi	r2,64688
   1b67c:	b0ad883a 	add	r22,r22,r2
   1b680:	b809883a 	mov	r4,r23
   1b684:	b00b883a 	mov	r5,r22
   1b688:	001a0600 	call	1a060 <__ulp>
   1b68c:	d9000f17 	ldw	r4,60(sp)
   1b690:	100d883a 	mov	r6,r2
   1b694:	180f883a 	mov	r7,r3
   1b698:	a00b883a 	mov	r5,r20
   1b69c:	0026f740 	call	26f74 <__muldf3>
   1b6a0:	b80d883a 	mov	r6,r23
   1b6a4:	1009883a 	mov	r4,r2
   1b6a8:	b00f883a 	mov	r7,r22
   1b6ac:	180b883a 	mov	r5,r3
   1b6b0:	0025aa00 	call	25aa0 <__adddf3>
   1b6b4:	011f2834 	movhi	r4,31904
   1b6b8:	102f883a 	mov	r23,r2
   1b6bc:	213fffc4 	addi	r4,r4,-1
   1b6c0:	189ffc2c 	andhi	r2,r3,32752
   1b6c4:	20807b2e 	bgeu	r4,r2,1b8b4 <_strtod_r+0xfb4>
   1b6c8:	d9401217 	ldw	r5,72(sp)
   1b6cc:	009ffc34 	movhi	r2,32752
   1b6d0:	10bfffc4 	addi	r2,r2,-1
   1b6d4:	28bfb926 	beq	r5,r2,1b5bc <__alt_data_end+0xfffdcdbc>
   1b6d8:	059ffc34 	movhi	r22,32752
   1b6dc:	b5bfffc4 	addi	r22,r22,-1
   1b6e0:	05ffffc4 	movi	r23,-1
   1b6e4:	003f1406 	br	1b338 <__alt_data_end+0xfffdcb38>
   1b6e8:	00800884 	movi	r2,34
   1b6ec:	88800015 	stw	r2,0(r17)
   1b6f0:	d8000815 	stw	zero,32(sp)
   1b6f4:	071ffc34 	movhi	fp,32752
   1b6f8:	003d2a06 	br	1aba4 <__alt_data_end+0xfffdc3a4>
   1b6fc:	d9400d17 	ldw	r5,52(sp)
   1b700:	d9001017 	ldw	r4,64(sp)
   1b704:	00280dc0 	call	280dc <__fixdfsi>
   1b708:	1009883a 	mov	r4,r2
   1b70c:	002815c0 	call	2815c <__floatsidf>
   1b710:	d9001017 	ldw	r4,64(sp)
   1b714:	d9400d17 	ldw	r5,52(sp)
   1b718:	100d883a 	mov	r6,r2
   1b71c:	180f883a 	mov	r7,r3
   1b720:	00277e00 	call	277e0 <__subdf3>
   1b724:	1011883a 	mov	r8,r2
   1b728:	1839883a 	mov	fp,r3
   1b72c:	a800121e 	bne	r21,zero,1b778 <_strtod_r+0xe78>
   1b730:	b800111e 	bne	r23,zero,1b778 <_strtod_r+0xe78>
   1b734:	01400434 	movhi	r5,16
   1b738:	297fffc4 	addi	r5,r5,-1
   1b73c:	a168703a 	and	r20,r20,r5
   1b740:	a0000d1e 	bne	r20,zero,1b778 <_strtod_r+0xe78>
   1b744:	01a52834 	movhi	r6,38048
   1b748:	01cff434 	movhi	r7,16336
   1b74c:	318d6544 	addi	r6,r6,13717
   1b750:	39ffffc4 	addi	r7,r7,-1
   1b754:	1009883a 	mov	r4,r2
   1b758:	180b883a 	mov	r5,r3
   1b75c:	0026e800 	call	26e80 <__ledf2>
   1b760:	103ef50e 	bge	r2,zero,1b338 <__alt_data_end+0xfffdcb38>
   1b764:	9011883a 	mov	r8,r18
   1b768:	d8800517 	ldw	r2,20(sp)
   1b76c:	d8000815 	stw	zero,32(sp)
   1b770:	b039883a 	mov	fp,r22
   1b774:	003f9a06 	br	1b5e0 <__alt_data_end+0xfffdcde0>
   1b778:	01a52834 	movhi	r6,38048
   1b77c:	01cff834 	movhi	r7,16352
   1b780:	4009883a 	mov	r4,r8
   1b784:	318d6544 	addi	r6,r6,13717
   1b788:	39ffffc4 	addi	r7,r7,-1
   1b78c:	e00b883a 	mov	r5,fp
   1b790:	da001315 	stw	r8,76(sp)
   1b794:	0026e800 	call	26e80 <__ledf2>
   1b798:	da001317 	ldw	r8,76(sp)
   1b79c:	10000716 	blt	r2,zero,1b7bc <_strtod_r+0xebc>
   1b7a0:	018d6c34 	movhi	r6,13744
   1b7a4:	31b94d44 	addi	r6,r6,-6859
   1b7a8:	01cff834 	movhi	r7,16352
   1b7ac:	4009883a 	mov	r4,r8
   1b7b0:	e00b883a 	mov	r5,fp
   1b7b4:	0026da40 	call	26da4 <__gedf2>
   1b7b8:	00bedf0e 	bge	zero,r2,1b338 <__alt_data_end+0xfffdcb38>
   1b7bc:	9011883a 	mov	r8,r18
   1b7c0:	d8800517 	ldw	r2,20(sp)
   1b7c4:	ddc00815 	stw	r23,32(sp)
   1b7c8:	b039883a 	mov	fp,r22
   1b7cc:	003f8406 	br	1b5e0 <__alt_data_end+0xfffdcde0>
   1b7d0:	903e1026 	beq	r18,zero,1b014 <__alt_data_end+0xfffdc814>
   1b7d4:	04a5c83a 	sub	r18,zero,r18
   1b7d8:	908003cc 	andi	r2,r18,15
   1b7dc:	10000b26 	beq	r2,zero,1b80c <_strtod_r+0xf0c>
   1b7e0:	100490fa 	slli	r2,r2,3
   1b7e4:	00c000f4 	movhi	r3,3
   1b7e8:	18e58a04 	addi	r3,r3,-27096
   1b7ec:	1885883a 	add	r2,r3,r2
   1b7f0:	11800017 	ldw	r6,0(r2)
   1b7f4:	11c00117 	ldw	r7,4(r2)
   1b7f8:	b809883a 	mov	r4,r23
   1b7fc:	b00b883a 	mov	r5,r22
   1b800:	002634c0 	call	2634c <__divdf3>
   1b804:	102f883a 	mov	r23,r2
   1b808:	182d883a 	mov	r22,r3
   1b80c:	9025d13a 	srai	r18,r18,4
   1b810:	903e0026 	beq	r18,zero,1b014 <__alt_data_end+0xfffdc814>
   1b814:	008007c4 	movi	r2,31
   1b818:	14801f16 	blt	r2,r18,1b898 <_strtod_r+0xf98>
   1b81c:	9080040c 	andi	r2,r18,16
   1b820:	10018d26 	beq	r2,zero,1be58 <_strtod_r+0x1558>
   1b824:	00c01a84 	movi	r3,106
   1b828:	d8c00715 	stw	r3,28(sp)
   1b82c:	04817e0e 	bge	zero,r18,1be28 <_strtod_r+0x1528>
   1b830:	050000f4 	movhi	r20,3
   1b834:	a525ca04 	addi	r20,r20,-26840
   1b838:	b805883a 	mov	r2,r23
   1b83c:	b007883a 	mov	r3,r22
   1b840:	0009883a 	mov	r4,zero
   1b844:	9180004c 	andi	r6,r18,1
   1b848:	30000626 	beq	r6,zero,1b864 <_strtod_r+0xf64>
   1b84c:	a1800017 	ldw	r6,0(r20)
   1b850:	a1c00117 	ldw	r7,4(r20)
   1b854:	1009883a 	mov	r4,r2
   1b858:	180b883a 	mov	r5,r3
   1b85c:	0026f740 	call	26f74 <__muldf3>
   1b860:	01000044 	movi	r4,1
   1b864:	9025d07a 	srai	r18,r18,1
   1b868:	a5000204 	addi	r20,r20,8
   1b86c:	903ff51e 	bne	r18,zero,1b844 <__alt_data_end+0xfffdd044>
   1b870:	21003fcc 	andi	r4,r4,255
   1b874:	2001891e 	bne	r4,zero,1be9c <_strtod_r+0x159c>
   1b878:	d9000717 	ldw	r4,28(sp)
   1b87c:	20016a1e 	bne	r4,zero,1be28 <_strtod_r+0x1528>
   1b880:	000d883a 	mov	r6,zero
   1b884:	000f883a 	mov	r7,zero
   1b888:	b809883a 	mov	r4,r23
   1b88c:	b00b883a 	mov	r5,r22
   1b890:	0026d1c0 	call	26d1c <__eqdf2>
   1b894:	103de01e 	bne	r2,zero,1b018 <__alt_data_end+0xfffdc818>
   1b898:	00800884 	movi	r2,34
   1b89c:	88800015 	stw	r2,0(r17)
   1b8a0:	d8000815 	stw	zero,32(sp)
   1b8a4:	0039883a 	mov	fp,zero
   1b8a8:	003cbe06 	br	1aba4 <__alt_data_end+0xfffdc3a4>
   1b8ac:	011387c4 	movi	r4,19999
   1b8b0:	003d5606 	br	1ae0c <__alt_data_end+0xfffdc60c>
   1b8b4:	0580d434 	movhi	r22,848
   1b8b8:	1dad883a 	add	r22,r3,r22
   1b8bc:	b029883a 	mov	r20,r22
   1b8c0:	003e9906 	br	1b328 <__alt_data_end+0xfffdcb28>
   1b8c4:	e5c03fcc 	andi	r23,fp,255
   1b8c8:	bdc0201c 	xori	r23,r23,128
   1b8cc:	bdffe004 	addi	r23,r23,-128
   1b8d0:	dc800817 	ldw	r18,32(sp)
   1b8d4:	0029883a 	mov	r20,zero
   1b8d8:	0027883a 	mov	r19,zero
   1b8dc:	0021883a 	mov	r16,zero
   1b8e0:	003c9806 	br	1ab44 <__alt_data_end+0xfffdc344>
   1b8e4:	00c00944 	movi	r3,37
   1b8e8:	1f07c83a 	sub	r3,r3,fp
   1b8ec:	1d7d7e16 	blt	r3,r21,1aee8 <__alt_data_end+0xfffdc6e8>
   1b8f0:	1721c83a 	sub	r16,r2,fp
   1b8f4:	800490fa 	slli	r2,r16,3
   1b8f8:	044000f4 	movhi	r17,3
   1b8fc:	8c658a04 	addi	r17,r17,-27096
   1b900:	8885883a 	add	r2,r17,r2
   1b904:	11000017 	ldw	r4,0(r2)
   1b908:	11400117 	ldw	r5,4(r2)
   1b90c:	b80d883a 	mov	r6,r23
   1b910:	b00f883a 	mov	r7,r22
   1b914:	0026f740 	call	26f74 <__muldf3>
   1b918:	ac2bc83a 	sub	r21,r21,r16
   1b91c:	a80c90fa 	slli	r6,r21,3
   1b920:	1009883a 	mov	r4,r2
   1b924:	180b883a 	mov	r5,r3
   1b928:	8985883a 	add	r2,r17,r6
   1b92c:	11800017 	ldw	r6,0(r2)
   1b930:	11c00117 	ldw	r7,4(r2)
   1b934:	0026f740 	call	26f74 <__muldf3>
   1b938:	d8800815 	stw	r2,32(sp)
   1b93c:	1839883a 	mov	fp,r3
   1b940:	003c9806 	br	1aba4 <__alt_data_end+0xfffdc3a4>
   1b944:	da000d17 	ldw	r8,52(sp)
   1b948:	003f1606 	br	1b5a4 <__alt_data_end+0xfffdcda4>
   1b94c:	014ffc34 	movhi	r5,16368
   1b950:	d8001015 	stw	zero,64(sp)
   1b954:	d9400d15 	stw	r5,52(sp)
   1b958:	003f0f06 	br	1b598 <__alt_data_end+0xfffdcd98>
   1b95c:	b03f001e 	bne	r22,zero,1b560 <__alt_data_end+0xfffdcd60>
   1b960:	9011883a 	mov	r8,r18
   1b964:	00800884 	movi	r2,34
   1b968:	88800015 	stw	r2,0(r17)
   1b96c:	d8000815 	stw	zero,32(sp)
   1b970:	d8800517 	ldw	r2,20(sp)
   1b974:	0039883a 	mov	fp,zero
   1b978:	003f1906 	br	1b5e0 <__alt_data_end+0xfffdcde0>
   1b97c:	d9800517 	ldw	r6,20(sp)
   1b980:	30000826 	beq	r6,zero,1b9a4 <_strtod_r+0x10a4>
   1b984:	01400d44 	movi	r5,53
   1b988:	d9000204 	addi	r4,sp,8
   1b98c:	d8801315 	stw	r2,76(sp)
   1b990:	001a4340 	call	1a434 <__copybits>
   1b994:	d9400517 	ldw	r5,20(sp)
   1b998:	8809883a 	mov	r4,r17
   1b99c:	00195280 	call	19528 <_Bfree>
   1b9a0:	d8801317 	ldw	r2,76(sp)
   1b9a4:	00c00184 	movi	r3,6
   1b9a8:	1c800f36 	bltu	r3,r18,1b9e8 <_strtod_r+0x10e8>
   1b9ac:	902490ba 	slli	r18,r18,2
   1b9b0:	00c000b4 	movhi	r3,2
   1b9b4:	18ee7104 	addi	r3,r3,-17980
   1b9b8:	90e5883a 	add	r18,r18,r3
   1b9bc:	90c00017 	ldw	r3,0(r18)
   1b9c0:	1800683a 	jmp	r3
   1b9c4:	0001ba40 	call	1ba4 <set_addrs_to_default+0xa64>
   1b9c8:	0001ba18 	cmpnei	zero,zero,1768
   1b9cc:	0001b9fc 	xorhi	zero,zero,1767
   1b9d0:	0001b9e0 	cmpeqi	zero,zero,1767
   1b9d4:	0001ba08 	cmpgei	zero,zero,1768
   1b9d8:	0001ba18 	cmpnei	zero,zero,1768
   1b9dc:	0001ba40 	call	1ba4 <set_addrs_to_default+0xa64>
   1b9e0:	059ffc34 	movhi	r22,32752
   1b9e4:	002f883a 	mov	r23,zero
   1b9e8:	1080020c 	andi	r2,r2,8
   1b9ec:	ddc00815 	stw	r23,32(sp)
   1b9f0:	103cc426 	beq	r2,zero,1ad04 <__alt_data_end+0xfffdc504>
   1b9f4:	b7200034 	orhi	fp,r22,32768
   1b9f8:	003c6a06 	br	1aba4 <__alt_data_end+0xfffdc3a4>
   1b9fc:	ddc00217 	ldw	r23,8(sp)
   1ba00:	dd800317 	ldw	r22,12(sp)
   1ba04:	003ff806 	br	1b9e8 <__alt_data_end+0xfffdd1e8>
   1ba08:	05a00034 	movhi	r22,32768
   1ba0c:	b5bfffc4 	addi	r22,r22,-1
   1ba10:	05ffffc4 	movi	r23,-1
   1ba14:	003ff406 	br	1b9e8 <__alt_data_end+0xfffdd1e8>
   1ba18:	d8c00417 	ldw	r3,16(sp)
   1ba1c:	dd800317 	ldw	r22,12(sp)
   1ba20:	013ffc34 	movhi	r4,65520
   1ba24:	18c10cc4 	addi	r3,r3,1075
   1ba28:	1806953a 	slli	r3,r3,20
   1ba2c:	213fffc4 	addi	r4,r4,-1
   1ba30:	b12c703a 	and	r22,r22,r4
   1ba34:	ddc00217 	ldw	r23,8(sp)
   1ba38:	b0ecb03a 	or	r22,r22,r3
   1ba3c:	003fea06 	br	1b9e8 <__alt_data_end+0xfffdd1e8>
   1ba40:	002d883a 	mov	r22,zero
   1ba44:	002f883a 	mov	r23,zero
   1ba48:	003fe706 	br	1b9e8 <__alt_data_end+0xfffdd1e8>
   1ba4c:	d8c00b17 	ldw	r3,44(sp)
   1ba50:	b72d883a 	add	r22,r22,fp
   1ba54:	1887883a 	add	r3,r3,r2
   1ba58:	d8c00b15 	stw	r3,44(sp)
   1ba5c:	00c00044 	movi	r3,1
   1ba60:	10c11126 	beq	r2,r3,1bea8 <_strtod_r+0x15a8>
   1ba64:	05c00204 	movi	r23,8
   1ba68:	04800404 	movi	r18,16
   1ba6c:	e7000044 	addi	fp,fp,1
   1ba70:	e0bfffc4 	addi	r2,fp,-1
   1ba74:	b8802016 	blt	r23,r2,1baf8 <_strtod_r+0x11f8>
   1ba78:	9809883a 	mov	r4,r19
   1ba7c:	01400284 	movi	r5,10
   1ba80:	002587c0 	call	2587c <__mulsi3>
   1ba84:	1027883a 	mov	r19,r2
   1ba88:	e5bff81e 	bne	fp,r22,1ba6c <__alt_data_end+0xfffdd26c>
   1ba8c:	ddc00617 	ldw	r23,24(sp)
   1ba90:	e7000044 	addi	fp,fp,1
   1ba94:	00800204 	movi	r2,8
   1ba98:	1580100e 	bge	r2,r22,1badc <_strtod_r+0x11dc>
   1ba9c:	00800404 	movi	r2,16
   1baa0:	002d883a 	mov	r22,zero
   1baa4:	173e7b16 	blt	r2,fp,1b494 <__alt_data_end+0xfffdcc94>
   1baa8:	a009883a 	mov	r4,r20
   1baac:	01400284 	movi	r5,10
   1bab0:	002587c0 	call	2587c <__mulsi3>
   1bab4:	a8a9883a 	add	r20,r21,r2
   1bab8:	003e7606 	br	1b494 <__alt_data_end+0xfffdcc94>
   1babc:	d9000617 	ldw	r4,24(sp)
   1bac0:	bdfff404 	addi	r23,r23,-48
   1bac4:	b5800044 	addi	r22,r22,1
   1bac8:	ddc00e15 	stw	r23,56(sp)
   1bacc:	d9000815 	stw	r4,32(sp)
   1bad0:	dd800b15 	stw	r22,44(sp)
   1bad4:	202f883a 	mov	r23,r4
   1bad8:	07000044 	movi	fp,1
   1badc:	9809883a 	mov	r4,r19
   1bae0:	01400284 	movi	r5,10
   1bae4:	002587c0 	call	2587c <__mulsi3>
   1bae8:	d8c00e17 	ldw	r3,56(sp)
   1baec:	002d883a 	mov	r22,zero
   1baf0:	18a7883a 	add	r19,r3,r2
   1baf4:	003e6706 	br	1b494 <__alt_data_end+0xfffdcc94>
   1baf8:	973fe316 	blt	r18,fp,1ba88 <__alt_data_end+0xfffdd288>
   1bafc:	a009883a 	mov	r4,r20
   1bb00:	01400284 	movi	r5,10
   1bb04:	002587c0 	call	2587c <__mulsi3>
   1bb08:	1029883a 	mov	r20,r2
   1bb0c:	003fde06 	br	1ba88 <__alt_data_end+0xfffdd288>
   1bb10:	00bffa84 	movi	r2,-22
   1bb14:	a8bcf416 	blt	r21,r2,1aee8 <__alt_data_end+0xfffdc6e8>
   1bb18:	a82a90fa 	slli	r21,r21,3
   1bb1c:	008000f4 	movhi	r2,3
   1bb20:	10a58a04 	addi	r2,r2,-27096
   1bb24:	1545c83a 	sub	r2,r2,r21
   1bb28:	11800017 	ldw	r6,0(r2)
   1bb2c:	11c00117 	ldw	r7,4(r2)
   1bb30:	b809883a 	mov	r4,r23
   1bb34:	b00b883a 	mov	r5,r22
   1bb38:	002634c0 	call	2634c <__divdf3>
   1bb3c:	d8800815 	stw	r2,32(sp)
   1bb40:	1839883a 	mov	fp,r3
   1bb44:	003c1706 	br	1aba4 <__alt_data_end+0xfffdc3a4>
   1bb48:	9011883a 	mov	r8,r18
   1bb4c:	003ea006 	br	1b5d0 <__alt_data_end+0xfffdcdd0>
   1bb50:	014000f4 	movhi	r5,3
   1bb54:	d9000617 	ldw	r4,24(sp)
   1bb58:	2965bc04 	addi	r5,r5,-26896
   1bb5c:	01c00644 	movi	r7,25
   1bb60:	00000b06 	br	1bb90 <_strtod_r+0x1290>
   1bb64:	21000044 	addi	r4,r4,1
   1bb68:	20800003 	ldbu	r2,0(r4)
   1bb6c:	10ffefc4 	addi	r3,r2,-65
   1bb70:	10803fcc 	andi	r2,r2,255
   1bb74:	1080201c 	xori	r2,r2,128
   1bb78:	18c03fcc 	andi	r3,r3,255
   1bb7c:	10bfe004 	addi	r2,r2,-128
   1bb80:	38c00136 	bltu	r7,r3,1bb88 <_strtod_r+0x1288>
   1bb84:	10800804 	addi	r2,r2,32
   1bb88:	29400044 	addi	r5,r5,1
   1bb8c:	11bba91e 	bne	r2,r6,1aa34 <__alt_data_end+0xfffdc234>
   1bb90:	29800007 	ldb	r6,0(r5)
   1bb94:	303ff31e 	bne	r6,zero,1bb64 <__alt_data_end+0xfffdd364>
   1bb98:	018000f4 	movhi	r6,3
   1bb9c:	d9000615 	stw	r4,24(sp)
   1bba0:	31a5bd04 	addi	r6,r6,-26892
   1bba4:	200b883a 	mov	r5,r4
   1bba8:	02000644 	movi	r8,25
   1bbac:	00000a06 	br	1bbd8 <_strtod_r+0x12d8>
   1bbb0:	28800003 	ldbu	r2,0(r5)
   1bbb4:	10ffefc4 	addi	r3,r2,-65
   1bbb8:	10803fcc 	andi	r2,r2,255
   1bbbc:	1080201c 	xori	r2,r2,128
   1bbc0:	18c03fcc 	andi	r3,r3,255
   1bbc4:	10bfe004 	addi	r2,r2,-128
   1bbc8:	40c00136 	bltu	r8,r3,1bbd0 <_strtod_r+0x12d0>
   1bbcc:	10800804 	addi	r2,r2,32
   1bbd0:	31800044 	addi	r6,r6,1
   1bbd4:	11c0691e 	bne	r2,r7,1bd7c <_strtod_r+0x147c>
   1bbd8:	31c00007 	ldb	r7,0(r6)
   1bbdc:	29400044 	addi	r5,r5,1
   1bbe0:	383ff31e 	bne	r7,zero,1bbb0 <__alt_data_end+0xfffdd3b0>
   1bbe4:	d9400615 	stw	r5,24(sp)
   1bbe8:	059ffc34 	movhi	r22,32752
   1bbec:	002f883a 	mov	r23,zero
   1bbf0:	003c4306 	br	1ad00 <__alt_data_end+0xfffdc500>
   1bbf4:	002d883a 	mov	r22,zero
   1bbf8:	003cad06 	br	1aeb0 <__alt_data_end+0xfffdc6b0>
   1bbfc:	9011883a 	mov	r8,r18
   1bc00:	df001217 	ldw	fp,72(sp)
   1bc04:	a800461e 	bne	r21,zero,1bd20 <_strtod_r+0x1420>
   1bc08:	b800451e 	bne	r23,zero,1bd20 <_strtod_r+0x1420>
   1bc0c:	00800434 	movhi	r2,16
   1bc10:	10bfffc4 	addi	r2,r2,-1
   1bc14:	b084703a 	and	r2,r22,r2
   1bc18:	1000411e 	bne	r2,zero,1bd20 <_strtod_r+0x1420>
   1bc1c:	b49ffc2c 	andhi	r18,r22,32752
   1bc20:	0081ac34 	movhi	r2,1712
   1bc24:	14803e2e 	bgeu	r2,r18,1bd20 <_strtod_r+0x1420>
   1bc28:	40800517 	ldw	r2,20(r8)
   1bc2c:	1000031e 	bne	r2,zero,1bc3c <_strtod_r+0x133c>
   1bc30:	40800417 	ldw	r2,16(r8)
   1bc34:	00c00044 	movi	r3,1
   1bc38:	1880390e 	bge	r3,r2,1bd20 <_strtod_r+0x1420>
   1bc3c:	400b883a 	mov	r5,r8
   1bc40:	01800044 	movi	r6,1
   1bc44:	8809883a 	mov	r4,r17
   1bc48:	0019cbc0 	call	19cbc <__lshift>
   1bc4c:	800b883a 	mov	r5,r16
   1bc50:	1009883a 	mov	r4,r2
   1bc54:	d8801315 	stw	r2,76(sp)
   1bc58:	0019e040 	call	19e04 <__mcmp>
   1bc5c:	da001317 	ldw	r8,76(sp)
   1bc60:	00802f0e 	bge	zero,r2,1bd20 <_strtod_r+0x1420>
   1bc64:	d9000717 	ldw	r4,28(sp)
   1bc68:	20008026 	beq	r4,zero,1be6c <_strtod_r+0x156c>
   1bc6c:	0081ac34 	movhi	r2,1712
   1bc70:	14807e16 	blt	r2,r18,1be6c <_strtod_r+0x156c>
   1bc74:	0080dc34 	movhi	r2,880
   1bc78:	14bf3a0e 	bge	r2,r18,1b964 <__alt_data_end+0xfffdd164>
   1bc7c:	d9000817 	ldw	r4,32(sp)
   1bc80:	e00b883a 	mov	r5,fp
   1bc84:	000d883a 	mov	r6,zero
   1bc88:	01ce5434 	movhi	r7,14672
   1bc8c:	da001315 	stw	r8,76(sp)
   1bc90:	0026f740 	call	26f74 <__muldf3>
   1bc94:	d8800815 	stw	r2,32(sp)
   1bc98:	1839883a 	mov	fp,r3
   1bc9c:	da001317 	ldw	r8,76(sp)
   1bca0:	1800211e 	bne	r3,zero,1bd28 <_strtod_r+0x1428>
   1bca4:	d8c00817 	ldw	r3,32(sp)
   1bca8:	d8800517 	ldw	r2,20(sp)
   1bcac:	183e4c1e 	bne	r3,zero,1b5e0 <__alt_data_end+0xfffdcde0>
   1bcb0:	00c00884 	movi	r3,34
   1bcb4:	88c00015 	stw	r3,0(r17)
   1bcb8:	003e4906 	br	1b5e0 <__alt_data_end+0xfffdcde0>
   1bcbc:	00800434 	movhi	r2,16
   1bcc0:	9011883a 	mov	r8,r18
   1bcc4:	df001217 	ldw	fp,72(sp)
   1bcc8:	10bfffc4 	addi	r2,r2,-1
   1bccc:	a8002226 	beq	r21,zero,1bd58 <_strtod_r+0x1458>
   1bcd0:	b086703a 	and	r3,r22,r2
   1bcd4:	18804126 	beq	r3,r2,1bddc <_strtod_r+0x14dc>
   1bcd8:	d8c00d17 	ldw	r3,52(sp)
   1bcdc:	18002326 	beq	r3,zero,1bd6c <_strtod_r+0x146c>
   1bce0:	1da4703a 	and	r18,r3,r22
   1bce4:	90000e26 	beq	r18,zero,1bd20 <_strtod_r+0x1420>
   1bce8:	da001315 	stw	r8,76(sp)
   1bcec:	d9800717 	ldw	r6,28(sp)
   1bcf0:	b809883a 	mov	r4,r23
   1bcf4:	b00b883a 	mov	r5,r22
   1bcf8:	a8002826 	beq	r21,zero,1bd9c <_strtod_r+0x149c>
   1bcfc:	001a89c0 	call	1a89c <sulp>
   1bd00:	100d883a 	mov	r6,r2
   1bd04:	180f883a 	mov	r7,r3
   1bd08:	b809883a 	mov	r4,r23
   1bd0c:	b00b883a 	mov	r5,r22
   1bd10:	0025aa00 	call	25aa0 <__adddf3>
   1bd14:	da001317 	ldw	r8,76(sp)
   1bd18:	d8800815 	stw	r2,32(sp)
   1bd1c:	1839883a 	mov	fp,r3
   1bd20:	d8800717 	ldw	r2,28(sp)
   1bd24:	103fd51e 	bne	r2,zero,1bc7c <__alt_data_end+0xfffdd47c>
   1bd28:	d8800517 	ldw	r2,20(sp)
   1bd2c:	003e2c06 	br	1b5e0 <__alt_data_end+0xfffdcde0>
   1bd30:	0580d434 	movhi	r22,848
   1bd34:	1dad883a 	add	r22,r3,r22
   1bd38:	d8000715 	stw	zero,28(sp)
   1bd3c:	003cb606 	br	1b018 <__alt_data_end+0xfffdc818>
   1bd40:	008ff834 	movhi	r2,16352
   1bd44:	0029883a 	mov	r20,zero
   1bd48:	022ff834 	movhi	r8,49120
   1bd4c:	d8001015 	stw	zero,64(sp)
   1bd50:	d8800d15 	stw	r2,52(sp)
   1bd54:	003dc106 	br	1b45c <__alt_data_end+0xfffdcc5c>
   1bd58:	b084703a 	and	r2,r22,r2
   1bd5c:	103fde1e 	bne	r2,zero,1bcd8 <__alt_data_end+0xfffdd4d8>
   1bd60:	b83fdd1e 	bne	r23,zero,1bcd8 <__alt_data_end+0xfffdd4d8>
   1bd64:	b49ffc2c 	andhi	r18,r22,32752
   1bd68:	003fbe06 	br	1bc64 <__alt_data_end+0xfffdd464>
   1bd6c:	d8c00f17 	ldw	r3,60(sp)
   1bd70:	1de8703a 	and	r20,r3,r23
   1bd74:	a03fea26 	beq	r20,zero,1bd20 <__alt_data_end+0xfffdd520>
   1bd78:	003fdb06 	br	1bce8 <__alt_data_end+0xfffdd4e8>
   1bd7c:	21000044 	addi	r4,r4,1
   1bd80:	d9000615 	stw	r4,24(sp)
   1bd84:	003f9806 	br	1bbe8 <__alt_data_end+0xfffdd3e8>
   1bd88:	014000f4 	movhi	r5,3
   1bd8c:	29658004 	addi	r5,r5,-27136
   1bd90:	d9400715 	stw	r5,28(sp)
   1bd94:	0025883a 	mov	r18,zero
   1bd98:	003c8c06 	br	1afcc <__alt_data_end+0xfffdc7cc>
   1bd9c:	001a89c0 	call	1a89c <sulp>
   1bda0:	100d883a 	mov	r6,r2
   1bda4:	180f883a 	mov	r7,r3
   1bda8:	b809883a 	mov	r4,r23
   1bdac:	b00b883a 	mov	r5,r22
   1bdb0:	00277e00 	call	277e0 <__subdf3>
   1bdb4:	000d883a 	mov	r6,zero
   1bdb8:	000f883a 	mov	r7,zero
   1bdbc:	1009883a 	mov	r4,r2
   1bdc0:	180b883a 	mov	r5,r3
   1bdc4:	d8800815 	stw	r2,32(sp)
   1bdc8:	1839883a 	mov	fp,r3
   1bdcc:	0026d1c0 	call	26d1c <__eqdf2>
   1bdd0:	da001317 	ldw	r8,76(sp)
   1bdd4:	103ee326 	beq	r2,zero,1b964 <__alt_data_end+0xfffdd164>
   1bdd8:	003fd106 	br	1bd20 <__alt_data_end+0xfffdd520>
   1bddc:	d8c00717 	ldw	r3,28(sp)
   1bde0:	18002026 	beq	r3,zero,1be64 <_strtod_r+0x1564>
   1bde4:	b09ffc2c 	andhi	r2,r22,32752
   1bde8:	00c1a834 	movhi	r3,1696
   1bdec:	18801d36 	bltu	r3,r2,1be64 <_strtod_r+0x1564>
   1bdf0:	1004d53a 	srli	r2,r2,20
   1bdf4:	00c01ac4 	movi	r3,107
   1bdf8:	1887c83a 	sub	r3,r3,r2
   1bdfc:	00bfffc4 	movi	r2,-1
   1be00:	10c4983a 	sll	r2,r2,r3
   1be04:	15ffb41e 	bne	r2,r23,1bcd8 <__alt_data_end+0xfffdd4d8>
   1be08:	00dffc34 	movhi	r3,32752
   1be0c:	18ffffc4 	addi	r3,r3,-1
   1be10:	b0c03126 	beq	r22,r3,1bed8 <_strtod_r+0x15d8>
   1be14:	b59ffc2c 	andhi	r22,r22,32752
   1be18:	00800434 	movhi	r2,16
   1be1c:	d8000815 	stw	zero,32(sp)
   1be20:	b0b9883a 	add	fp,r22,r2
   1be24:	003fbe06 	br	1bd20 <__alt_data_end+0xfffdd520>
   1be28:	b49ffc2c 	andhi	r18,r22,32752
   1be2c:	9024d53a 	srli	r18,r18,20
   1be30:	00801ac4 	movi	r2,107
   1be34:	14a5c83a 	sub	r18,r2,r18
   1be38:	04be910e 	bge	zero,r18,1b880 <__alt_data_end+0xfffdd080>
   1be3c:	008007c4 	movi	r2,31
   1be40:	1480120e 	bge	r2,r18,1be8c <_strtod_r+0x158c>
   1be44:	00800d04 	movi	r2,52
   1be48:	002f883a 	mov	r23,zero
   1be4c:	14801a0e 	bge	r2,r18,1beb8 <_strtod_r+0x15b8>
   1be50:	0580dc34 	movhi	r22,880
   1be54:	003e8a06 	br	1b880 <__alt_data_end+0xfffdd080>
   1be58:	d8000715 	stw	zero,28(sp)
   1be5c:	04be7416 	blt	zero,r18,1b830 <__alt_data_end+0xfffdd030>
   1be60:	003e8706 	br	1b880 <__alt_data_end+0xfffdd080>
   1be64:	00bfffc4 	movi	r2,-1
   1be68:	003fe606 	br	1be04 <__alt_data_end+0xfffdd604>
   1be6c:	073ffc34 	movhi	fp,65520
   1be70:	9725883a 	add	r18,r18,fp
   1be74:	017fffc4 	movi	r5,-1
   1be78:	07000434 	movhi	fp,16
   1be7c:	e179883a 	add	fp,fp,r5
   1be80:	d9400815 	stw	r5,32(sp)
   1be84:	9738b03a 	or	fp,r18,fp
   1be88:	003fa506 	br	1bd20 <__alt_data_end+0xfffdd520>
   1be8c:	00bfffc4 	movi	r2,-1
   1be90:	14a4983a 	sll	r18,r2,r18
   1be94:	95ee703a 	and	r23,r18,r23
   1be98:	003e7906 	br	1b880 <__alt_data_end+0xfffdd080>
   1be9c:	102f883a 	mov	r23,r2
   1bea0:	182d883a 	mov	r22,r3
   1bea4:	003e7406 	br	1b878 <__alt_data_end+0xfffdd078>
   1bea8:	e02d883a 	mov	r22,fp
   1beac:	ddc00617 	ldw	r23,24(sp)
   1beb0:	e0f9883a 	add	fp,fp,r3
   1beb4:	003ef706 	br	1ba94 <__alt_data_end+0xfffdd294>
   1beb8:	94bff804 	addi	r18,r18,-32
   1bebc:	00bfffc4 	movi	r2,-1
   1bec0:	14a4983a 	sll	r18,r2,r18
   1bec4:	95ac703a 	and	r22,r18,r22
   1bec8:	003e6d06 	br	1b880 <__alt_data_end+0xfffdd080>
   1becc:	102f883a 	mov	r23,r2
   1bed0:	182d883a 	mov	r22,r3
   1bed4:	003c3d06 	br	1afcc <__alt_data_end+0xfffdc7cc>
   1bed8:	00ffffc4 	movi	r3,-1
   1bedc:	10ffcd1e 	bne	r2,r3,1be14 <__alt_data_end+0xfffdd614>
   1bee0:	003dba06 	br	1b5cc <__alt_data_end+0xfffdcdcc>

0001bee4 <strtod>:
   1bee4:	008000f4 	movhi	r2,3
   1bee8:	10a8a204 	addi	r2,r2,-23928
   1beec:	280d883a 	mov	r6,r5
   1bef0:	200b883a 	mov	r5,r4
   1bef4:	11000017 	ldw	r4,0(r2)
   1bef8:	001a9001 	jmpi	1a900 <_strtod_r>

0001befc <strtof>:
   1befc:	defffb04 	addi	sp,sp,-20
   1bf00:	dcc00315 	stw	r19,12(sp)
   1bf04:	04c000f4 	movhi	r19,3
   1bf08:	9ce8a204 	addi	r19,r19,-23928
   1bf0c:	280d883a 	mov	r6,r5
   1bf10:	200b883a 	mov	r5,r4
   1bf14:	99000017 	ldw	r4,0(r19)
   1bf18:	dfc00415 	stw	ra,16(sp)
   1bf1c:	dc800215 	stw	r18,8(sp)
   1bf20:	dc400115 	stw	r17,4(sp)
   1bf24:	dc000015 	stw	r16,0(sp)
   1bf28:	001a9000 	call	1a900 <_strtod_r>
   1bf2c:	1009883a 	mov	r4,r2
   1bf30:	180b883a 	mov	r5,r3
   1bf34:	1025883a 	mov	r18,r2
   1bf38:	1823883a 	mov	r17,r3
   1bf3c:	00282e00 	call	282e0 <__truncdfsf2>
   1bf40:	000b883a 	mov	r5,zero
   1bf44:	1009883a 	mov	r4,r2
   1bf48:	1021883a 	mov	r16,r2
   1bf4c:	00258a40 	call	258a4 <__eqsf2>
   1bf50:	1000111e 	bne	r2,zero,1bf98 <strtof+0x9c>
   1bf54:	000d883a 	mov	r6,zero
   1bf58:	000f883a 	mov	r7,zero
   1bf5c:	9009883a 	mov	r4,r18
   1bf60:	880b883a 	mov	r5,r17
   1bf64:	0026d1c0 	call	26d1c <__eqdf2>
   1bf68:	10000b26 	beq	r2,zero,1bf98 <strtof+0x9c>
   1bf6c:	98800017 	ldw	r2,0(r19)
   1bf70:	00c00884 	movi	r3,34
   1bf74:	10c00015 	stw	r3,0(r2)
   1bf78:	8005883a 	mov	r2,r16
   1bf7c:	dfc00417 	ldw	ra,16(sp)
   1bf80:	dcc00317 	ldw	r19,12(sp)
   1bf84:	dc800217 	ldw	r18,8(sp)
   1bf88:	dc400117 	ldw	r17,4(sp)
   1bf8c:	dc000017 	ldw	r16,0(sp)
   1bf90:	dec00504 	addi	sp,sp,20
   1bf94:	f800283a 	ret
   1bf98:	015fe034 	movhi	r5,32640
   1bf9c:	297fffc4 	addi	r5,r5,-1
   1bfa0:	8009883a 	mov	r4,r16
   1bfa4:	002591c0 	call	2591c <__gesf2>
   1bfa8:	0080070e 	bge	zero,r2,1bfc8 <strtof+0xcc>
   1bfac:	01dffc34 	movhi	r7,32752
   1bfb0:	39ffffc4 	addi	r7,r7,-1
   1bfb4:	01bfffc4 	movi	r6,-1
   1bfb8:	9009883a 	mov	r4,r18
   1bfbc:	880b883a 	mov	r5,r17
   1bfc0:	0026da40 	call	26da4 <__gedf2>
   1bfc4:	00bfe90e 	bge	zero,r2,1bf6c <__alt_data_end+0xfffdd76c>
   1bfc8:	017fe034 	movhi	r5,65408
   1bfcc:	297fffc4 	addi	r5,r5,-1
   1bfd0:	8009883a 	mov	r4,r16
   1bfd4:	00259d80 	call	259d8 <__lesf2>
   1bfd8:	103fe70e 	bge	r2,zero,1bf78 <__alt_data_end+0xfffdd778>
   1bfdc:	01fffc34 	movhi	r7,65520
   1bfe0:	39ffffc4 	addi	r7,r7,-1
   1bfe4:	01bfffc4 	movi	r6,-1
   1bfe8:	9009883a 	mov	r4,r18
   1bfec:	880b883a 	mov	r5,r17
   1bff0:	0026e800 	call	26e80 <__ledf2>
   1bff4:	103fdd0e 	bge	r2,zero,1bf6c <__alt_data_end+0xfffdd76c>
   1bff8:	003fdf06 	br	1bf78 <__alt_data_end+0xfffdd778>

0001bffc <_strtol_r>:
   1bffc:	008000f4 	movhi	r2,3
   1c000:	defff204 	addi	sp,sp,-56
   1c004:	10a8a504 	addi	r2,r2,-23916
   1c008:	dd800a15 	stw	r22,40(sp)
   1c00c:	15800017 	ldw	r22,0(r2)
   1c010:	df000c15 	stw	fp,48(sp)
   1c014:	d9000315 	stw	r4,12(sp)
   1c018:	dfc00d15 	stw	ra,52(sp)
   1c01c:	ddc00b15 	stw	r23,44(sp)
   1c020:	dd400915 	stw	r21,36(sp)
   1c024:	dd000815 	stw	r20,32(sp)
   1c028:	dcc00715 	stw	r19,28(sp)
   1c02c:	dc800615 	stw	r18,24(sp)
   1c030:	dc400515 	stw	r17,20(sp)
   1c034:	dc000415 	stw	r16,16(sp)
   1c038:	d9400215 	stw	r5,8(sp)
   1c03c:	d9800015 	stw	r6,0(sp)
   1c040:	3839883a 	mov	fp,r7
   1c044:	2809883a 	mov	r4,r5
   1c048:	24000003 	ldbu	r16,0(r4)
   1c04c:	24400044 	addi	r17,r4,1
   1c050:	2007883a 	mov	r3,r4
   1c054:	b405883a 	add	r2,r22,r16
   1c058:	10800043 	ldbu	r2,1(r2)
   1c05c:	8809883a 	mov	r4,r17
   1c060:	1080020c 	andi	r2,r2,8
   1c064:	103ff81e 	bne	r2,zero,1c048 <__alt_data_end+0xfffdd848>
   1c068:	00800b44 	movi	r2,45
   1c06c:	80805526 	beq	r16,r2,1c1c4 <_strtol_r+0x1c8>
   1c070:	00800ac4 	movi	r2,43
   1c074:	80806026 	beq	r16,r2,1c1f8 <_strtol_r+0x1fc>
   1c078:	0029883a 	mov	r20,zero
   1c07c:	e0004726 	beq	fp,zero,1c19c <_strtol_r+0x1a0>
   1c080:	00800404 	movi	r2,16
   1c084:	e0806626 	beq	fp,r2,1c220 <_strtol_r+0x224>
   1c088:	e027883a 	mov	r19,fp
   1c08c:	00a00034 	movhi	r2,32768
   1c090:	a025003a 	cmpeq	r18,r20,zero
   1c094:	14a5c83a 	sub	r18,r2,r18
   1c098:	9009883a 	mov	r4,r18
   1c09c:	980b883a 	mov	r5,r19
   1c0a0:	00258240 	call	25824 <__umodsi3>
   1c0a4:	9009883a 	mov	r4,r18
   1c0a8:	980b883a 	mov	r5,r19
   1c0ac:	d8800115 	stw	r2,4(sp)
   1c0b0:	00257c00 	call	257c0 <__udivsi3>
   1c0b4:	b407883a 	add	r3,r22,r16
   1c0b8:	18c00043 	ldbu	r3,1(r3)
   1c0bc:	102b883a 	mov	r21,r2
   1c0c0:	0009883a 	mov	r4,zero
   1c0c4:	1940010c 	andi	r5,r3,4
   1c0c8:	0005883a 	mov	r2,zero
   1c0cc:	04800044 	movi	r18,1
   1c0d0:	05ffffc4 	movi	r23,-1
   1c0d4:	28000f26 	beq	r5,zero,1c114 <_strtol_r+0x118>
   1c0d8:	843ff404 	addi	r16,r16,-48
   1c0dc:	8700130e 	bge	r16,fp,1c12c <_strtol_r+0x130>
   1c0e0:	15c00626 	beq	r2,r23,1c0fc <_strtol_r+0x100>
   1c0e4:	a9002936 	bltu	r21,r4,1c18c <_strtol_r+0x190>
   1c0e8:	25402626 	beq	r4,r21,1c184 <_strtol_r+0x188>
   1c0ec:	980b883a 	mov	r5,r19
   1c0f0:	002587c0 	call	2587c <__mulsi3>
   1c0f4:	8089883a 	add	r4,r16,r2
   1c0f8:	00800044 	movi	r2,1
   1c0fc:	8c000003 	ldbu	r16,0(r17)
   1c100:	8c400044 	addi	r17,r17,1
   1c104:	b407883a 	add	r3,r22,r16
   1c108:	18c00043 	ldbu	r3,1(r3)
   1c10c:	1940010c 	andi	r5,r3,4
   1c110:	283ff11e 	bne	r5,zero,1c0d8 <__alt_data_end+0xfffdd8d8>
   1c114:	18c000cc 	andi	r3,r3,3
   1c118:	18000426 	beq	r3,zero,1c12c <_strtol_r+0x130>
   1c11c:	1c801d26 	beq	r3,r18,1c194 <_strtol_r+0x198>
   1c120:	00c015c4 	movi	r3,87
   1c124:	80e1c83a 	sub	r16,r16,r3
   1c128:	873fed16 	blt	r16,fp,1c0e0 <__alt_data_end+0xfffdd8e0>
   1c12c:	00ffffc4 	movi	r3,-1
   1c130:	10c02826 	beq	r2,r3,1c1d4 <_strtol_r+0x1d8>
   1c134:	a0001e1e 	bne	r20,zero,1c1b0 <_strtol_r+0x1b4>
   1c138:	d8c00017 	ldw	r3,0(sp)
   1c13c:	18004326 	beq	r3,zero,1c24c <_strtol_r+0x250>
   1c140:	10001d1e 	bne	r2,zero,1c1b8 <_strtol_r+0x1bc>
   1c144:	dd800217 	ldw	r22,8(sp)
   1c148:	2005883a 	mov	r2,r4
   1c14c:	d8c00017 	ldw	r3,0(sp)
   1c150:	1d800015 	stw	r22,0(r3)
   1c154:	dfc00d17 	ldw	ra,52(sp)
   1c158:	df000c17 	ldw	fp,48(sp)
   1c15c:	ddc00b17 	ldw	r23,44(sp)
   1c160:	dd800a17 	ldw	r22,40(sp)
   1c164:	dd400917 	ldw	r21,36(sp)
   1c168:	dd000817 	ldw	r20,32(sp)
   1c16c:	dcc00717 	ldw	r19,28(sp)
   1c170:	dc800617 	ldw	r18,24(sp)
   1c174:	dc400517 	ldw	r17,20(sp)
   1c178:	dc000417 	ldw	r16,16(sp)
   1c17c:	dec00e04 	addi	sp,sp,56
   1c180:	f800283a 	ret
   1c184:	d8c00117 	ldw	r3,4(sp)
   1c188:	1c3fd80e 	bge	r3,r16,1c0ec <__alt_data_end+0xfffdd8ec>
   1c18c:	00bfffc4 	movi	r2,-1
   1c190:	003fda06 	br	1c0fc <__alt_data_end+0xfffdd8fc>
   1c194:	00c00dc4 	movi	r3,55
   1c198:	003fe206 	br	1c124 <__alt_data_end+0xfffdd924>
   1c19c:	00800c04 	movi	r2,48
   1c1a0:	80801926 	beq	r16,r2,1c208 <_strtol_r+0x20c>
   1c1a4:	07000284 	movi	fp,10
   1c1a8:	e027883a 	mov	r19,fp
   1c1ac:	003fb706 	br	1c08c <__alt_data_end+0xfffdd88c>
   1c1b0:	0109c83a 	sub	r4,zero,r4
   1c1b4:	003fe006 	br	1c138 <__alt_data_end+0xfffdd938>
   1c1b8:	2005883a 	mov	r2,r4
   1c1bc:	8dbfffc4 	addi	r22,r17,-1
   1c1c0:	003fe206 	br	1c14c <__alt_data_end+0xfffdd94c>
   1c1c4:	1c400084 	addi	r17,r3,2
   1c1c8:	1c000043 	ldbu	r16,1(r3)
   1c1cc:	05000044 	movi	r20,1
   1c1d0:	003faa06 	br	1c07c <__alt_data_end+0xfffdd87c>
   1c1d4:	d9000317 	ldw	r4,12(sp)
   1c1d8:	00c00884 	movi	r3,34
   1c1dc:	a005003a 	cmpeq	r2,r20,zero
   1c1e0:	20c00015 	stw	r3,0(r4)
   1c1e4:	00e00034 	movhi	r3,32768
   1c1e8:	1885c83a 	sub	r2,r3,r2
   1c1ec:	d8c00017 	ldw	r3,0(sp)
   1c1f0:	183ff21e 	bne	r3,zero,1c1bc <__alt_data_end+0xfffdd9bc>
   1c1f4:	003fd706 	br	1c154 <__alt_data_end+0xfffdd954>
   1c1f8:	1c400084 	addi	r17,r3,2
   1c1fc:	1c000043 	ldbu	r16,1(r3)
   1c200:	0029883a 	mov	r20,zero
   1c204:	003f9d06 	br	1c07c <__alt_data_end+0xfffdd87c>
   1c208:	88800003 	ldbu	r2,0(r17)
   1c20c:	00c01604 	movi	r3,88
   1c210:	108037cc 	andi	r2,r2,223
   1c214:	10c00826 	beq	r2,r3,1c238 <_strtol_r+0x23c>
   1c218:	07000204 	movi	fp,8
   1c21c:	003f9a06 	br	1c088 <__alt_data_end+0xfffdd888>
   1c220:	00800c04 	movi	r2,48
   1c224:	80bf981e 	bne	r16,r2,1c088 <__alt_data_end+0xfffdd888>
   1c228:	88800003 	ldbu	r2,0(r17)
   1c22c:	00c01604 	movi	r3,88
   1c230:	108037cc 	andi	r2,r2,223
   1c234:	10ff941e 	bne	r2,r3,1c088 <__alt_data_end+0xfffdd888>
   1c238:	04c00404 	movi	r19,16
   1c23c:	8c000043 	ldbu	r16,1(r17)
   1c240:	9839883a 	mov	fp,r19
   1c244:	8c400084 	addi	r17,r17,2
   1c248:	003f9006 	br	1c08c <__alt_data_end+0xfffdd88c>
   1c24c:	2005883a 	mov	r2,r4
   1c250:	003fc006 	br	1c154 <__alt_data_end+0xfffdd954>

0001c254 <strtol>:
   1c254:	008000f4 	movhi	r2,3
   1c258:	10a8a204 	addi	r2,r2,-23928
   1c25c:	300f883a 	mov	r7,r6
   1c260:	280d883a 	mov	r6,r5
   1c264:	200b883a 	mov	r5,r4
   1c268:	11000017 	ldw	r4,0(r2)
   1c26c:	001bffc1 	jmpi	1bffc <_strtol_r>

0001c270 <_strtoll_r>:
   1c270:	008000f4 	movhi	r2,3
   1c274:	deffef04 	addi	sp,sp,-68
   1c278:	10a8a504 	addi	r2,r2,-23916
   1c27c:	dd800d15 	stw	r22,52(sp)
   1c280:	15800017 	ldw	r22,0(r2)
   1c284:	df000f15 	stw	fp,60(sp)
   1c288:	d9000515 	stw	r4,20(sp)
   1c28c:	dfc01015 	stw	ra,64(sp)
   1c290:	ddc00e15 	stw	r23,56(sp)
   1c294:	dd400c15 	stw	r21,48(sp)
   1c298:	dd000b15 	stw	r20,44(sp)
   1c29c:	dcc00a15 	stw	r19,40(sp)
   1c2a0:	dc800915 	stw	r18,36(sp)
   1c2a4:	dc400815 	stw	r17,32(sp)
   1c2a8:	dc000715 	stw	r16,28(sp)
   1c2ac:	d9400415 	stw	r5,16(sp)
   1c2b0:	d9800215 	stw	r6,8(sp)
   1c2b4:	3839883a 	mov	fp,r7
   1c2b8:	2809883a 	mov	r4,r5
   1c2bc:	22000003 	ldbu	r8,0(r4)
   1c2c0:	24400044 	addi	r17,r4,1
   1c2c4:	2007883a 	mov	r3,r4
   1c2c8:	b205883a 	add	r2,r22,r8
   1c2cc:	10800043 	ldbu	r2,1(r2)
   1c2d0:	8809883a 	mov	r4,r17
   1c2d4:	1080020c 	andi	r2,r2,8
   1c2d8:	103ff81e 	bne	r2,zero,1c2bc <__alt_data_end+0xfffddabc>
   1c2dc:	00800b44 	movi	r2,45
   1c2e0:	40807e26 	beq	r8,r2,1c4dc <_strtoll_r+0x26c>
   1c2e4:	00800ac4 	movi	r2,43
   1c2e8:	40808126 	beq	r8,r2,1c4f0 <_strtoll_r+0x280>
   1c2ec:	d8000115 	stw	zero,4(sp)
   1c2f0:	e0000b26 	beq	fp,zero,1c320 <_strtoll_r+0xb0>
   1c2f4:	00800404 	movi	r2,16
   1c2f8:	e0808926 	beq	fp,r2,1c520 <_strtoll_r+0x2b0>
   1c2fc:	e00bd7fa 	srai	r5,fp,31
   1c300:	d9000117 	ldw	r4,4(sp)
   1c304:	e025883a 	mov	r18,fp
   1c308:	d9400015 	stw	r5,0(sp)
   1c30c:	20000b1e 	bne	r4,zero,1c33c <_strtoll_r+0xcc>
   1c310:	04200034 	movhi	r16,32768
   1c314:	843fffc4 	addi	r16,r16,-1
   1c318:	053fffc4 	movi	r20,-1
   1c31c:	00000906 	br	1c344 <_strtoll_r+0xd4>
   1c320:	00800c04 	movi	r2,48
   1c324:	40807626 	beq	r8,r2,1c500 <_strtoll_r+0x290>
   1c328:	04800284 	movi	r18,10
   1c32c:	d8000015 	stw	zero,0(sp)
   1c330:	9039883a 	mov	fp,r18
   1c334:	d9000117 	ldw	r4,4(sp)
   1c338:	203ff526 	beq	r4,zero,1c310 <__alt_data_end+0xfffddb10>
   1c33c:	0029883a 	mov	r20,zero
   1c340:	04200034 	movhi	r16,32768
   1c344:	d9c00017 	ldw	r7,0(sp)
   1c348:	a009883a 	mov	r4,r20
   1c34c:	800b883a 	mov	r5,r16
   1c350:	900d883a 	mov	r6,r18
   1c354:	da000615 	stw	r8,24(sp)
   1c358:	00251040 	call	25104 <__umoddi3>
   1c35c:	d9c00017 	ldw	r7,0(sp)
   1c360:	a009883a 	mov	r4,r20
   1c364:	800b883a 	mov	r5,r16
   1c368:	900d883a 	mov	r6,r18
   1c36c:	d8800315 	stw	r2,12(sp)
   1c370:	0024b080 	call	24b08 <__udivdi3>
   1c374:	da000617 	ldw	r8,24(sp)
   1c378:	1829883a 	mov	r20,r3
   1c37c:	882f883a 	mov	r23,r17
   1c380:	b207883a 	add	r3,r22,r8
   1c384:	19800043 	ldbu	r6,1(r3)
   1c388:	1021883a 	mov	r16,r2
   1c38c:	000f883a 	mov	r7,zero
   1c390:	30c0010c 	andi	r3,r6,4
   1c394:	0009883a 	mov	r4,zero
   1c398:	000b883a 	mov	r5,zero
   1c39c:	04400044 	movi	r17,1
   1c3a0:	057fffc4 	movi	r21,-1
   1c3a4:	18000d26 	beq	r3,zero,1c3dc <_strtoll_r+0x16c>
   1c3a8:	44fff404 	addi	r19,r8,-48
   1c3ac:	9f00110e 	bge	r19,fp,1c3f4 <_strtoll_r+0x184>
   1c3b0:	3d400426 	beq	r7,r21,1c3c4 <_strtoll_r+0x154>
   1c3b4:	a1400236 	bltu	r20,r5,1c3c0 <_strtoll_r+0x150>
   1c3b8:	2d002a1e 	bne	r5,r20,1c464 <_strtoll_r+0x1f4>
   1c3bc:	8100292e 	bgeu	r16,r4,1c464 <_strtoll_r+0x1f4>
   1c3c0:	01ffffc4 	movi	r7,-1
   1c3c4:	ba000003 	ldbu	r8,0(r23)
   1c3c8:	bdc00044 	addi	r23,r23,1
   1c3cc:	b207883a 	add	r3,r22,r8
   1c3d0:	19800043 	ldbu	r6,1(r3)
   1c3d4:	30c0010c 	andi	r3,r6,4
   1c3d8:	183ff31e 	bne	r3,zero,1c3a8 <__alt_data_end+0xfffddba8>
   1c3dc:	318000cc 	andi	r6,r6,3
   1c3e0:	30000426 	beq	r6,zero,1c3f4 <_strtoll_r+0x184>
   1c3e4:	34402b26 	beq	r6,r17,1c494 <_strtoll_r+0x224>
   1c3e8:	00c015c4 	movi	r3,87
   1c3ec:	40e7c83a 	sub	r19,r8,r3
   1c3f0:	9f3fef16 	blt	r19,fp,1c3b0 <__alt_data_end+0xfffddbb0>
   1c3f4:	00bfffc4 	movi	r2,-1
   1c3f8:	38802c26 	beq	r7,r2,1c4ac <_strtoll_r+0x23c>
   1c3fc:	d8800117 	ldw	r2,4(sp)
   1c400:	10000426 	beq	r2,zero,1c414 <_strtoll_r+0x1a4>
   1c404:	0109c83a 	sub	r4,zero,r4
   1c408:	2004c03a 	cmpne	r2,r4,zero
   1c40c:	0151c83a 	sub	r8,zero,r5
   1c410:	408bc83a 	sub	r5,r8,r2
   1c414:	d8800217 	ldw	r2,8(sp)
   1c418:	10005026 	beq	r2,zero,1c55c <_strtoll_r+0x2ec>
   1c41c:	2005883a 	mov	r2,r4
   1c420:	2807883a 	mov	r3,r5
   1c424:	38002b1e 	bne	r7,zero,1c4d4 <_strtoll_r+0x264>
   1c428:	dd800417 	ldw	r22,16(sp)
   1c42c:	d9000217 	ldw	r4,8(sp)
   1c430:	25800015 	stw	r22,0(r4)
   1c434:	dfc01017 	ldw	ra,64(sp)
   1c438:	df000f17 	ldw	fp,60(sp)
   1c43c:	ddc00e17 	ldw	r23,56(sp)
   1c440:	dd800d17 	ldw	r22,52(sp)
   1c444:	dd400c17 	ldw	r21,48(sp)
   1c448:	dd000b17 	ldw	r20,44(sp)
   1c44c:	dcc00a17 	ldw	r19,40(sp)
   1c450:	dc800917 	ldw	r18,36(sp)
   1c454:	dc400817 	ldw	r17,32(sp)
   1c458:	dc000717 	ldw	r16,28(sp)
   1c45c:	dec01104 	addi	sp,sp,68
   1c460:	f800283a 	ret
   1c464:	24000d26 	beq	r4,r16,1c49c <_strtoll_r+0x22c>
   1c468:	d9c00017 	ldw	r7,0(sp)
   1c46c:	900d883a 	mov	r6,r18
   1c470:	00243300 	call	24330 <__muldi3>
   1c474:	980bd7fa 	srai	r5,r19,31
   1c478:	9885883a 	add	r2,r19,r2
   1c47c:	14d1803a 	cmpltu	r8,r2,r19
   1c480:	28c7883a 	add	r3,r5,r3
   1c484:	1009883a 	mov	r4,r2
   1c488:	40cb883a 	add	r5,r8,r3
   1c48c:	01c00044 	movi	r7,1
   1c490:	003fcc06 	br	1c3c4 <__alt_data_end+0xfffddbc4>
   1c494:	00c00dc4 	movi	r3,55
   1c498:	003fd406 	br	1c3ec <__alt_data_end+0xfffddbec>
   1c49c:	2d3ff21e 	bne	r5,r20,1c468 <__alt_data_end+0xfffddc68>
   1c4a0:	d8800317 	ldw	r2,12(sp)
   1c4a4:	14ffc616 	blt	r2,r19,1c3c0 <__alt_data_end+0xfffddbc0>
   1c4a8:	003fef06 	br	1c468 <__alt_data_end+0xfffddc68>
   1c4ac:	d9000117 	ldw	r4,4(sp)
   1c4b0:	2000271e 	bne	r4,zero,1c550 <_strtoll_r+0x2e0>
   1c4b4:	00e00034 	movhi	r3,32768
   1c4b8:	18ffffc4 	addi	r3,r3,-1
   1c4bc:	3805883a 	mov	r2,r7
   1c4c0:	d9400517 	ldw	r5,20(sp)
   1c4c4:	01000884 	movi	r4,34
   1c4c8:	29000015 	stw	r4,0(r5)
   1c4cc:	d9000217 	ldw	r4,8(sp)
   1c4d0:	203fd826 	beq	r4,zero,1c434 <__alt_data_end+0xfffddc34>
   1c4d4:	bdbfffc4 	addi	r22,r23,-1
   1c4d8:	003fd406 	br	1c42c <__alt_data_end+0xfffddc2c>
   1c4dc:	00800044 	movi	r2,1
   1c4e0:	1c400084 	addi	r17,r3,2
   1c4e4:	1a000043 	ldbu	r8,1(r3)
   1c4e8:	d8800115 	stw	r2,4(sp)
   1c4ec:	003f8006 	br	1c2f0 <__alt_data_end+0xfffddaf0>
   1c4f0:	1c400084 	addi	r17,r3,2
   1c4f4:	1a000043 	ldbu	r8,1(r3)
   1c4f8:	d8000115 	stw	zero,4(sp)
   1c4fc:	003f7c06 	br	1c2f0 <__alt_data_end+0xfffddaf0>
   1c500:	88800003 	ldbu	r2,0(r17)
   1c504:	00c01604 	movi	r3,88
   1c508:	108037cc 	andi	r2,r2,223
   1c50c:	10c00a26 	beq	r2,r3,1c538 <_strtoll_r+0x2c8>
   1c510:	04800204 	movi	r18,8
   1c514:	d8000015 	stw	zero,0(sp)
   1c518:	9039883a 	mov	fp,r18
   1c51c:	003f8506 	br	1c334 <__alt_data_end+0xfffddb34>
   1c520:	00800c04 	movi	r2,48
   1c524:	4080101e 	bne	r8,r2,1c568 <_strtoll_r+0x2f8>
   1c528:	88800003 	ldbu	r2,0(r17)
   1c52c:	00c01604 	movi	r3,88
   1c530:	108037cc 	andi	r2,r2,223
   1c534:	10c00c1e 	bne	r2,r3,1c568 <_strtoll_r+0x2f8>
   1c538:	04800404 	movi	r18,16
   1c53c:	8a000043 	ldbu	r8,1(r17)
   1c540:	d8000015 	stw	zero,0(sp)
   1c544:	8c400084 	addi	r17,r17,2
   1c548:	9039883a 	mov	fp,r18
   1c54c:	003f7906 	br	1c334 <__alt_data_end+0xfffddb34>
   1c550:	0005883a 	mov	r2,zero
   1c554:	00e00034 	movhi	r3,32768
   1c558:	003fd906 	br	1c4c0 <__alt_data_end+0xfffddcc0>
   1c55c:	2005883a 	mov	r2,r4
   1c560:	2807883a 	mov	r3,r5
   1c564:	003fb306 	br	1c434 <__alt_data_end+0xfffddc34>
   1c568:	e025883a 	mov	r18,fp
   1c56c:	d8000015 	stw	zero,0(sp)
   1c570:	003f7006 	br	1c334 <__alt_data_end+0xfffddb34>

0001c574 <_strtoul_r>:
   1c574:	008000f4 	movhi	r2,3
   1c578:	defff204 	addi	sp,sp,-56
   1c57c:	10a8a504 	addi	r2,r2,-23916
   1c580:	dd800a15 	stw	r22,40(sp)
   1c584:	15800017 	ldw	r22,0(r2)
   1c588:	df000c15 	stw	fp,48(sp)
   1c58c:	dd400915 	stw	r21,36(sp)
   1c590:	d9000315 	stw	r4,12(sp)
   1c594:	dfc00d15 	stw	ra,52(sp)
   1c598:	ddc00b15 	stw	r23,44(sp)
   1c59c:	dd000815 	stw	r20,32(sp)
   1c5a0:	dcc00715 	stw	r19,28(sp)
   1c5a4:	dc800615 	stw	r18,24(sp)
   1c5a8:	dc400515 	stw	r17,20(sp)
   1c5ac:	dc000415 	stw	r16,16(sp)
   1c5b0:	d9400015 	stw	r5,0(sp)
   1c5b4:	302b883a 	mov	r21,r6
   1c5b8:	3839883a 	mov	fp,r7
   1c5bc:	2809883a 	mov	r4,r5
   1c5c0:	24000003 	ldbu	r16,0(r4)
   1c5c4:	24400044 	addi	r17,r4,1
   1c5c8:	2007883a 	mov	r3,r4
   1c5cc:	b405883a 	add	r2,r22,r16
   1c5d0:	10800043 	ldbu	r2,1(r2)
   1c5d4:	8809883a 	mov	r4,r17
   1c5d8:	1080020c 	andi	r2,r2,8
   1c5dc:	103ff81e 	bne	r2,zero,1c5c0 <__alt_data_end+0xfffdddc0>
   1c5e0:	00800b44 	movi	r2,45
   1c5e4:	80805826 	beq	r16,r2,1c748 <_strtoul_r+0x1d4>
   1c5e8:	00800ac4 	movi	r2,43
   1c5ec:	80805b26 	beq	r16,r2,1c75c <_strtoul_r+0x1e8>
   1c5f0:	d8000215 	stw	zero,8(sp)
   1c5f4:	e0000d26 	beq	fp,zero,1c62c <_strtoul_r+0xb8>
   1c5f8:	00800404 	movi	r2,16
   1c5fc:	e0806626 	beq	fp,r2,1c798 <_strtoul_r+0x224>
   1c600:	013fffc4 	movi	r4,-1
   1c604:	e00b883a 	mov	r5,fp
   1c608:	00257c00 	call	257c0 <__udivsi3>
   1c60c:	e00b883a 	mov	r5,fp
   1c610:	013fffc4 	movi	r4,-1
   1c614:	1025883a 	mov	r18,r2
   1c618:	00258240 	call	25824 <__umodsi3>
   1c61c:	d8800115 	stw	r2,4(sp)
   1c620:	e027883a 	mov	r19,fp
   1c624:	902f883a 	mov	r23,r18
   1c628:	00000806 	br	1c64c <_strtoul_r+0xd8>
   1c62c:	00800c04 	movi	r2,48
   1c630:	80804e26 	beq	r16,r2,1c76c <_strtoul_r+0x1f8>
   1c634:	07000284 	movi	fp,10
   1c638:	00c00144 	movi	r3,5
   1c63c:	05c666b4 	movhi	r23,6554
   1c640:	d8c00115 	stw	r3,4(sp)
   1c644:	bde66644 	addi	r23,r23,-26215
   1c648:	e027883a 	mov	r19,fp
   1c64c:	b407883a 	add	r3,r22,r16
   1c650:	18c00043 	ldbu	r3,1(r3)
   1c654:	0005883a 	mov	r2,zero
   1c658:	0009883a 	mov	r4,zero
   1c65c:	1940010c 	andi	r5,r3,4
   1c660:	04800044 	movi	r18,1
   1c664:	053fffc4 	movi	r20,-1
   1c668:	28000f26 	beq	r5,zero,1c6a8 <_strtoul_r+0x134>
   1c66c:	843ff404 	addi	r16,r16,-48
   1c670:	8700130e 	bge	r16,fp,1c6c0 <_strtoul_r+0x14c>
   1c674:	15000626 	beq	r2,r20,1c690 <_strtoul_r+0x11c>
   1c678:	b9002836 	bltu	r23,r4,1c71c <_strtoul_r+0x1a8>
   1c67c:	25c02526 	beq	r4,r23,1c714 <_strtoul_r+0x1a0>
   1c680:	980b883a 	mov	r5,r19
   1c684:	002587c0 	call	2587c <__mulsi3>
   1c688:	8089883a 	add	r4,r16,r2
   1c68c:	00800044 	movi	r2,1
   1c690:	8c000003 	ldbu	r16,0(r17)
   1c694:	8c400044 	addi	r17,r17,1
   1c698:	b407883a 	add	r3,r22,r16
   1c69c:	18c00043 	ldbu	r3,1(r3)
   1c6a0:	1940010c 	andi	r5,r3,4
   1c6a4:	283ff11e 	bne	r5,zero,1c66c <__alt_data_end+0xfffdde6c>
   1c6a8:	18c000cc 	andi	r3,r3,3
   1c6ac:	18000426 	beq	r3,zero,1c6c0 <_strtoul_r+0x14c>
   1c6b0:	1c801c26 	beq	r3,r18,1c724 <_strtoul_r+0x1b0>
   1c6b4:	00c015c4 	movi	r3,87
   1c6b8:	80e1c83a 	sub	r16,r16,r3
   1c6bc:	873fed16 	blt	r16,fp,1c674 <__alt_data_end+0xfffdde74>
   1c6c0:	10001a16 	blt	r2,zero,1c72c <_strtoul_r+0x1b8>
   1c6c4:	d8c00217 	ldw	r3,8(sp)
   1c6c8:	18000126 	beq	r3,zero,1c6d0 <_strtoul_r+0x15c>
   1c6cc:	0109c83a 	sub	r4,zero,r4
   1c6d0:	a8000326 	beq	r21,zero,1c6e0 <_strtoul_r+0x16c>
   1c6d4:	dd000017 	ldw	r20,0(sp)
   1c6d8:	1000191e 	bne	r2,zero,1c740 <_strtoul_r+0x1cc>
   1c6dc:	ad000015 	stw	r20,0(r21)
   1c6e0:	2005883a 	mov	r2,r4
   1c6e4:	dfc00d17 	ldw	ra,52(sp)
   1c6e8:	df000c17 	ldw	fp,48(sp)
   1c6ec:	ddc00b17 	ldw	r23,44(sp)
   1c6f0:	dd800a17 	ldw	r22,40(sp)
   1c6f4:	dd400917 	ldw	r21,36(sp)
   1c6f8:	dd000817 	ldw	r20,32(sp)
   1c6fc:	dcc00717 	ldw	r19,28(sp)
   1c700:	dc800617 	ldw	r18,24(sp)
   1c704:	dc400517 	ldw	r17,20(sp)
   1c708:	dc000417 	ldw	r16,16(sp)
   1c70c:	dec00e04 	addi	sp,sp,56
   1c710:	f800283a 	ret
   1c714:	d8c00117 	ldw	r3,4(sp)
   1c718:	1c3fd90e 	bge	r3,r16,1c680 <__alt_data_end+0xfffdde80>
   1c71c:	00bfffc4 	movi	r2,-1
   1c720:	003fdb06 	br	1c690 <__alt_data_end+0xfffdde90>
   1c724:	00c00dc4 	movi	r3,55
   1c728:	003fe306 	br	1c6b8 <__alt_data_end+0xfffddeb8>
   1c72c:	d8c00317 	ldw	r3,12(sp)
   1c730:	00800884 	movi	r2,34
   1c734:	013fffc4 	movi	r4,-1
   1c738:	18800015 	stw	r2,0(r3)
   1c73c:	a83fe826 	beq	r21,zero,1c6e0 <__alt_data_end+0xfffddee0>
   1c740:	8d3fffc4 	addi	r20,r17,-1
   1c744:	003fe506 	br	1c6dc <__alt_data_end+0xfffddedc>
   1c748:	1c400084 	addi	r17,r3,2
   1c74c:	1c000043 	ldbu	r16,1(r3)
   1c750:	00c00044 	movi	r3,1
   1c754:	d8c00215 	stw	r3,8(sp)
   1c758:	003fa606 	br	1c5f4 <__alt_data_end+0xfffdddf4>
   1c75c:	1c400084 	addi	r17,r3,2
   1c760:	1c000043 	ldbu	r16,1(r3)
   1c764:	d8000215 	stw	zero,8(sp)
   1c768:	003fa206 	br	1c5f4 <__alt_data_end+0xfffdddf4>
   1c76c:	88800003 	ldbu	r2,0(r17)
   1c770:	00c01604 	movi	r3,88
   1c774:	108037cc 	andi	r2,r2,223
   1c778:	10c00d26 	beq	r2,r3,1c7b0 <_strtoul_r+0x23c>
   1c77c:	07000204 	movi	fp,8
   1c780:	00c001c4 	movi	r3,7
   1c784:	05c80034 	movhi	r23,8192
   1c788:	d8c00115 	stw	r3,4(sp)
   1c78c:	bdffffc4 	addi	r23,r23,-1
   1c790:	e027883a 	mov	r19,fp
   1c794:	003fad06 	br	1c64c <__alt_data_end+0xfffdde4c>
   1c798:	00800c04 	movi	r2,48
   1c79c:	80800d1e 	bne	r16,r2,1c7d4 <_strtoul_r+0x260>
   1c7a0:	88800003 	ldbu	r2,0(r17)
   1c7a4:	00c01604 	movi	r3,88
   1c7a8:	108037cc 	andi	r2,r2,223
   1c7ac:	10c0091e 	bne	r2,r3,1c7d4 <_strtoul_r+0x260>
   1c7b0:	04c00404 	movi	r19,16
   1c7b4:	00c003c4 	movi	r3,15
   1c7b8:	04840034 	movhi	r18,4096
   1c7bc:	8c000043 	ldbu	r16,1(r17)
   1c7c0:	d8c00115 	stw	r3,4(sp)
   1c7c4:	8c400084 	addi	r17,r17,2
   1c7c8:	94bfffc4 	addi	r18,r18,-1
   1c7cc:	9839883a 	mov	fp,r19
   1c7d0:	003f9406 	br	1c624 <__alt_data_end+0xfffdde24>
   1c7d4:	00c003c4 	movi	r3,15
   1c7d8:	05c40034 	movhi	r23,4096
   1c7dc:	d8c00115 	stw	r3,4(sp)
   1c7e0:	bdffffc4 	addi	r23,r23,-1
   1c7e4:	e027883a 	mov	r19,fp
   1c7e8:	003f9806 	br	1c64c <__alt_data_end+0xfffdde4c>

0001c7ec <strtoul>:
   1c7ec:	008000f4 	movhi	r2,3
   1c7f0:	10a8a204 	addi	r2,r2,-23928
   1c7f4:	300f883a 	mov	r7,r6
   1c7f8:	280d883a 	mov	r6,r5
   1c7fc:	200b883a 	mov	r5,r4
   1c800:	11000017 	ldw	r4,0(r2)
   1c804:	001c5741 	jmpi	1c574 <_strtoul_r>

0001c808 <_strtoull_r>:
   1c808:	008000f4 	movhi	r2,3
   1c80c:	deffef04 	addi	sp,sp,-68
   1c810:	10a8a504 	addi	r2,r2,-23916
   1c814:	dd800d15 	stw	r22,52(sp)
   1c818:	15800017 	ldw	r22,0(r2)
   1c81c:	df000f15 	stw	fp,60(sp)
   1c820:	d9000515 	stw	r4,20(sp)
   1c824:	dfc01015 	stw	ra,64(sp)
   1c828:	ddc00e15 	stw	r23,56(sp)
   1c82c:	dd400c15 	stw	r21,48(sp)
   1c830:	dd000b15 	stw	r20,44(sp)
   1c834:	dcc00a15 	stw	r19,40(sp)
   1c838:	dc800915 	stw	r18,36(sp)
   1c83c:	dc400815 	stw	r17,32(sp)
   1c840:	dc000715 	stw	r16,28(sp)
   1c844:	d9400215 	stw	r5,8(sp)
   1c848:	d9800115 	stw	r6,4(sp)
   1c84c:	3839883a 	mov	fp,r7
   1c850:	2809883a 	mov	r4,r5
   1c854:	22000003 	ldbu	r8,0(r4)
   1c858:	24400044 	addi	r17,r4,1
   1c85c:	2007883a 	mov	r3,r4
   1c860:	b205883a 	add	r2,r22,r8
   1c864:	10800043 	ldbu	r2,1(r2)
   1c868:	8809883a 	mov	r4,r17
   1c86c:	1080020c 	andi	r2,r2,8
   1c870:	103ff81e 	bne	r2,zero,1c854 <__alt_data_end+0xfffde054>
   1c874:	00800b44 	movi	r2,45
   1c878:	40807726 	beq	r8,r2,1ca58 <_strtoull_r+0x250>
   1c87c:	00800ac4 	movi	r2,43
   1c880:	40807a26 	beq	r8,r2,1ca6c <_strtoull_r+0x264>
   1c884:	d8000415 	stw	zero,16(sp)
   1c888:	e0001426 	beq	fp,zero,1c8dc <_strtoull_r+0xd4>
   1c88c:	00800404 	movi	r2,16
   1c890:	e0808826 	beq	fp,r2,1cab4 <_strtoull_r+0x2ac>
   1c894:	e025d7fa 	srai	r18,fp,31
   1c898:	013fffc4 	movi	r4,-1
   1c89c:	200b883a 	mov	r5,r4
   1c8a0:	e00d883a 	mov	r6,fp
   1c8a4:	900f883a 	mov	r7,r18
   1c8a8:	da000615 	stw	r8,24(sp)
   1c8ac:	0024b080 	call	24b08 <__udivdi3>
   1c8b0:	013fffc4 	movi	r4,-1
   1c8b4:	e00d883a 	mov	r6,fp
   1c8b8:	900f883a 	mov	r7,r18
   1c8bc:	200b883a 	mov	r5,r4
   1c8c0:	1021883a 	mov	r16,r2
   1c8c4:	182f883a 	mov	r23,r3
   1c8c8:	00251040 	call	25104 <__umoddi3>
   1c8cc:	d8800315 	stw	r2,12(sp)
   1c8d0:	df000015 	stw	fp,0(sp)
   1c8d4:	da000617 	ldw	r8,24(sp)
   1c8d8:	00000c06 	br	1c90c <_strtoull_r+0x104>
   1c8dc:	00800c04 	movi	r2,48
   1c8e0:	40806626 	beq	r8,r2,1ca7c <_strtoull_r+0x274>
   1c8e4:	00800284 	movi	r2,10
   1c8e8:	00c00144 	movi	r3,5
   1c8ec:	042666b4 	movhi	r16,39322
   1c8f0:	05c666b4 	movhi	r23,6554
   1c8f4:	d8800015 	stw	r2,0(sp)
   1c8f8:	d8c00315 	stw	r3,12(sp)
   1c8fc:	84266644 	addi	r16,r16,-26215
   1c900:	bde66644 	addi	r23,r23,-26215
   1c904:	0025883a 	mov	r18,zero
   1c908:	1039883a 	mov	fp,r2
   1c90c:	b205883a 	add	r2,r22,r8
   1c910:	11800043 	ldbu	r6,1(r2)
   1c914:	882b883a 	mov	r21,r17
   1c918:	000f883a 	mov	r7,zero
   1c91c:	3080010c 	andi	r2,r6,4
   1c920:	0009883a 	mov	r4,zero
   1c924:	000b883a 	mov	r5,zero
   1c928:	04400044 	movi	r17,1
   1c92c:	053fffc4 	movi	r20,-1
   1c930:	10000d26 	beq	r2,zero,1c968 <_strtoull_r+0x160>
   1c934:	44fff404 	addi	r19,r8,-48
   1c938:	9f00110e 	bge	r19,fp,1c980 <_strtoull_r+0x178>
   1c93c:	3d000426 	beq	r7,r20,1c950 <_strtoull_r+0x148>
   1c940:	b9400236 	bltu	r23,r5,1c94c <_strtoull_r+0x144>
   1c944:	2dc0291e 	bne	r5,r23,1c9ec <_strtoull_r+0x1e4>
   1c948:	8100282e 	bgeu	r16,r4,1c9ec <_strtoull_r+0x1e4>
   1c94c:	01ffffc4 	movi	r7,-1
   1c950:	aa000003 	ldbu	r8,0(r21)
   1c954:	ad400044 	addi	r21,r21,1
   1c958:	b205883a 	add	r2,r22,r8
   1c95c:	11800043 	ldbu	r6,1(r2)
   1c960:	3080010c 	andi	r2,r6,4
   1c964:	103ff31e 	bne	r2,zero,1c934 <__alt_data_end+0xfffde134>
   1c968:	318000cc 	andi	r6,r6,3
   1c96c:	30000426 	beq	r6,zero,1c980 <_strtoull_r+0x178>
   1c970:	34402a26 	beq	r6,r17,1ca1c <_strtoull_r+0x214>
   1c974:	00c015c4 	movi	r3,87
   1c978:	40e7c83a 	sub	r19,r8,r3
   1c97c:	9f3fef16 	blt	r19,fp,1c93c <__alt_data_end+0xfffde13c>
   1c980:	38002c16 	blt	r7,zero,1ca34 <_strtoull_r+0x22c>
   1c984:	d8c00417 	ldw	r3,16(sp)
   1c988:	18000426 	beq	r3,zero,1c99c <_strtoull_r+0x194>
   1c98c:	0109c83a 	sub	r4,zero,r4
   1c990:	2004c03a 	cmpne	r2,r4,zero
   1c994:	0151c83a 	sub	r8,zero,r5
   1c998:	408bc83a 	sub	r5,r8,r2
   1c99c:	d8800117 	ldw	r2,4(sp)
   1c9a0:	10000426 	beq	r2,zero,1c9b4 <_strtoull_r+0x1ac>
   1c9a4:	dd000217 	ldw	r20,8(sp)
   1c9a8:	3800291e 	bne	r7,zero,1ca50 <_strtoull_r+0x248>
   1c9ac:	d8c00117 	ldw	r3,4(sp)
   1c9b0:	1d000015 	stw	r20,0(r3)
   1c9b4:	2005883a 	mov	r2,r4
   1c9b8:	2807883a 	mov	r3,r5
   1c9bc:	dfc01017 	ldw	ra,64(sp)
   1c9c0:	df000f17 	ldw	fp,60(sp)
   1c9c4:	ddc00e17 	ldw	r23,56(sp)
   1c9c8:	dd800d17 	ldw	r22,52(sp)
   1c9cc:	dd400c17 	ldw	r21,48(sp)
   1c9d0:	dd000b17 	ldw	r20,44(sp)
   1c9d4:	dcc00a17 	ldw	r19,40(sp)
   1c9d8:	dc800917 	ldw	r18,36(sp)
   1c9dc:	dc400817 	ldw	r17,32(sp)
   1c9e0:	dc000717 	ldw	r16,28(sp)
   1c9e4:	dec01104 	addi	sp,sp,68
   1c9e8:	f800283a 	ret
   1c9ec:	24000d26 	beq	r4,r16,1ca24 <_strtoull_r+0x21c>
   1c9f0:	d9800017 	ldw	r6,0(sp)
   1c9f4:	900f883a 	mov	r7,r18
   1c9f8:	00243300 	call	24330 <__muldi3>
   1c9fc:	980bd7fa 	srai	r5,r19,31
   1ca00:	9885883a 	add	r2,r19,r2
   1ca04:	14d1803a 	cmpltu	r8,r2,r19
   1ca08:	28c7883a 	add	r3,r5,r3
   1ca0c:	1009883a 	mov	r4,r2
   1ca10:	40cb883a 	add	r5,r8,r3
   1ca14:	01c00044 	movi	r7,1
   1ca18:	003fcd06 	br	1c950 <__alt_data_end+0xfffde150>
   1ca1c:	00c00dc4 	movi	r3,55
   1ca20:	003fd506 	br	1c978 <__alt_data_end+0xfffde178>
   1ca24:	2dfff21e 	bne	r5,r23,1c9f0 <__alt_data_end+0xfffde1f0>
   1ca28:	d8c00317 	ldw	r3,12(sp)
   1ca2c:	1cffc716 	blt	r3,r19,1c94c <__alt_data_end+0xfffde14c>
   1ca30:	003fef06 	br	1c9f0 <__alt_data_end+0xfffde1f0>
   1ca34:	d8c00517 	ldw	r3,20(sp)
   1ca38:	00800884 	movi	r2,34
   1ca3c:	013fffc4 	movi	r4,-1
   1ca40:	18800015 	stw	r2,0(r3)
   1ca44:	d8800117 	ldw	r2,4(sp)
   1ca48:	200b883a 	mov	r5,r4
   1ca4c:	103fd926 	beq	r2,zero,1c9b4 <__alt_data_end+0xfffde1b4>
   1ca50:	ad3fffc4 	addi	r20,r21,-1
   1ca54:	003fd506 	br	1c9ac <__alt_data_end+0xfffde1ac>
   1ca58:	00800044 	movi	r2,1
   1ca5c:	1c400084 	addi	r17,r3,2
   1ca60:	1a000043 	ldbu	r8,1(r3)
   1ca64:	d8800415 	stw	r2,16(sp)
   1ca68:	003f8706 	br	1c888 <__alt_data_end+0xfffde088>
   1ca6c:	1c400084 	addi	r17,r3,2
   1ca70:	1a000043 	ldbu	r8,1(r3)
   1ca74:	d8000415 	stw	zero,16(sp)
   1ca78:	003f8306 	br	1c888 <__alt_data_end+0xfffde088>
   1ca7c:	88800003 	ldbu	r2,0(r17)
   1ca80:	00c01604 	movi	r3,88
   1ca84:	108037cc 	andi	r2,r2,223
   1ca88:	10c01026 	beq	r2,r3,1cacc <_strtoull_r+0x2c4>
   1ca8c:	00c00204 	movi	r3,8
   1ca90:	008001c4 	movi	r2,7
   1ca94:	043fffc4 	movi	r16,-1
   1ca98:	05c80034 	movhi	r23,8192
   1ca9c:	d8c00015 	stw	r3,0(sp)
   1caa0:	d8800315 	stw	r2,12(sp)
   1caa4:	bc2f883a 	add	r23,r23,r16
   1caa8:	0025883a 	mov	r18,zero
   1caac:	1839883a 	mov	fp,r3
   1cab0:	003f9606 	br	1c90c <__alt_data_end+0xfffde10c>
   1cab4:	00800c04 	movi	r2,48
   1cab8:	4080101e 	bne	r8,r2,1cafc <_strtoull_r+0x2f4>
   1cabc:	88800003 	ldbu	r2,0(r17)
   1cac0:	00c01604 	movi	r3,88
   1cac4:	108037cc 	andi	r2,r2,223
   1cac8:	10c0141e 	bne	r2,r3,1cb1c <_strtoull_r+0x314>
   1cacc:	00c00404 	movi	r3,16
   1cad0:	008003c4 	movi	r2,15
   1cad4:	043fffc4 	movi	r16,-1
   1cad8:	05c40034 	movhi	r23,4096
   1cadc:	8a000043 	ldbu	r8,1(r17)
   1cae0:	d8c00015 	stw	r3,0(sp)
   1cae4:	d8800315 	stw	r2,12(sp)
   1cae8:	8c400084 	addi	r17,r17,2
   1caec:	bc2f883a 	add	r23,r23,r16
   1caf0:	0025883a 	mov	r18,zero
   1caf4:	1839883a 	mov	fp,r3
   1caf8:	003f8406 	br	1c90c <__alt_data_end+0xfffde10c>
   1cafc:	008003c4 	movi	r2,15
   1cb00:	d8800315 	stw	r2,12(sp)
   1cb04:	043fffc4 	movi	r16,-1
   1cb08:	05c40034 	movhi	r23,4096
   1cb0c:	bc2f883a 	add	r23,r23,r16
   1cb10:	df000015 	stw	fp,0(sp)
   1cb14:	0025883a 	mov	r18,zero
   1cb18:	003f7c06 	br	1c90c <__alt_data_end+0xfffde10c>
   1cb1c:	00c003c4 	movi	r3,15
   1cb20:	d8c00315 	stw	r3,12(sp)
   1cb24:	003ff706 	br	1cb04 <__alt_data_end+0xfffde304>

0001cb28 <_sungetc_r>:
   1cb28:	00bfffc4 	movi	r2,-1
   1cb2c:	28803726 	beq	r5,r2,1cc0c <_sungetc_r+0xe4>
   1cb30:	3080030b 	ldhu	r2,12(r6)
   1cb34:	30c00c17 	ldw	r3,48(r6)
   1cb38:	defffc04 	addi	sp,sp,-16
   1cb3c:	10bff7cc 	andi	r2,r2,65503
   1cb40:	dc800215 	stw	r18,8(sp)
   1cb44:	dfc00315 	stw	ra,12(sp)
   1cb48:	dc400115 	stw	r17,4(sp)
   1cb4c:	dc000015 	stw	r16,0(sp)
   1cb50:	3080030d 	sth	r2,12(r6)
   1cb54:	2c803fcc 	andi	r18,r5,255
   1cb58:	18001826 	beq	r3,zero,1cbbc <_sungetc_r+0x94>
   1cb5c:	30c00117 	ldw	r3,4(r6)
   1cb60:	30800d17 	ldw	r2,52(r6)
   1cb64:	3021883a 	mov	r16,r6
   1cb68:	2823883a 	mov	r17,r5
   1cb6c:	18800e0e 	bge	r3,r2,1cba8 <_sungetc_r+0x80>
   1cb70:	80c00017 	ldw	r3,0(r16)
   1cb74:	9005883a 	mov	r2,r18
   1cb78:	193fffc4 	addi	r4,r3,-1
   1cb7c:	81000015 	stw	r4,0(r16)
   1cb80:	1c7fffc5 	stb	r17,-1(r3)
   1cb84:	80c00117 	ldw	r3,4(r16)
   1cb88:	18c00044 	addi	r3,r3,1
   1cb8c:	80c00115 	stw	r3,4(r16)
   1cb90:	dfc00317 	ldw	ra,12(sp)
   1cb94:	dc800217 	ldw	r18,8(sp)
   1cb98:	dc400117 	ldw	r17,4(sp)
   1cb9c:	dc000017 	ldw	r16,0(sp)
   1cba0:	dec00404 	addi	sp,sp,16
   1cba4:	f800283a 	ret
   1cba8:	300b883a 	mov	r5,r6
   1cbac:	00201a80 	call	201a8 <__submore>
   1cbb0:	103fef26 	beq	r2,zero,1cb70 <__alt_data_end+0xfffde370>
   1cbb4:	00bfffc4 	movi	r2,-1
   1cbb8:	003ff506 	br	1cb90 <__alt_data_end+0xfffde390>
   1cbbc:	30c00417 	ldw	r3,16(r6)
   1cbc0:	30800017 	ldw	r2,0(r6)
   1cbc4:	18000326 	beq	r3,zero,1cbd4 <_sungetc_r+0xac>
   1cbc8:	1880022e 	bgeu	r3,r2,1cbd4 <_sungetc_r+0xac>
   1cbcc:	10ffffc3 	ldbu	r3,-1(r2)
   1cbd0:	90c01026 	beq	r18,r3,1cc14 <_sungetc_r+0xec>
   1cbd4:	31c00117 	ldw	r7,4(r6)
   1cbd8:	30800e15 	stw	r2,56(r6)
   1cbdc:	008000c4 	movi	r2,3
   1cbe0:	31001004 	addi	r4,r6,64
   1cbe4:	30c01084 	addi	r3,r6,66
   1cbe8:	30800d15 	stw	r2,52(r6)
   1cbec:	00800044 	movi	r2,1
   1cbf0:	30800115 	stw	r2,4(r6)
   1cbf4:	31c00f15 	stw	r7,60(r6)
   1cbf8:	31000c15 	stw	r4,48(r6)
   1cbfc:	31401085 	stb	r5,66(r6)
   1cc00:	30c00015 	stw	r3,0(r6)
   1cc04:	9005883a 	mov	r2,r18
   1cc08:	003fe106 	br	1cb90 <__alt_data_end+0xfffde390>
   1cc0c:	00bfffc4 	movi	r2,-1
   1cc10:	f800283a 	ret
   1cc14:	30c00117 	ldw	r3,4(r6)
   1cc18:	10bfffc4 	addi	r2,r2,-1
   1cc1c:	30800015 	stw	r2,0(r6)
   1cc20:	18800044 	addi	r2,r3,1
   1cc24:	30800115 	stw	r2,4(r6)
   1cc28:	9005883a 	mov	r2,r18
   1cc2c:	003fd806 	br	1cb90 <__alt_data_end+0xfffde390>

0001cc30 <__ssrefill_r>:
   1cc30:	defffe04 	addi	sp,sp,-8
   1cc34:	dc000015 	stw	r16,0(sp)
   1cc38:	2821883a 	mov	r16,r5
   1cc3c:	29400c17 	ldw	r5,48(r5)
   1cc40:	dfc00115 	stw	ra,4(sp)
   1cc44:	28000e26 	beq	r5,zero,1cc80 <__ssrefill_r+0x50>
   1cc48:	80801004 	addi	r2,r16,64
   1cc4c:	28800126 	beq	r5,r2,1cc54 <__ssrefill_r+0x24>
   1cc50:	0010e100 	call	10e10 <_free_r>
   1cc54:	80800f17 	ldw	r2,60(r16)
   1cc58:	80000c15 	stw	zero,48(r16)
   1cc5c:	80800115 	stw	r2,4(r16)
   1cc60:	10000726 	beq	r2,zero,1cc80 <__ssrefill_r+0x50>
   1cc64:	80c00e17 	ldw	r3,56(r16)
   1cc68:	0005883a 	mov	r2,zero
   1cc6c:	80c00015 	stw	r3,0(r16)
   1cc70:	dfc00117 	ldw	ra,4(sp)
   1cc74:	dc000017 	ldw	r16,0(sp)
   1cc78:	dec00204 	addi	sp,sp,8
   1cc7c:	f800283a 	ret
   1cc80:	8080030b 	ldhu	r2,12(r16)
   1cc84:	80c00417 	ldw	r3,16(r16)
   1cc88:	80000115 	stw	zero,4(r16)
   1cc8c:	10800814 	ori	r2,r2,32
   1cc90:	8080030d 	sth	r2,12(r16)
   1cc94:	80c00015 	stw	r3,0(r16)
   1cc98:	00bfffc4 	movi	r2,-1
   1cc9c:	003ff406 	br	1cc70 <__alt_data_end+0xfffde470>

0001cca0 <_sfread_r>:
   1cca0:	defff704 	addi	sp,sp,-36
   1cca4:	dd000415 	stw	r20,16(sp)
   1cca8:	dcc00315 	stw	r19,12(sp)
   1ccac:	2029883a 	mov	r20,r4
   1ccb0:	2827883a 	mov	r19,r5
   1ccb4:	3809883a 	mov	r4,r7
   1ccb8:	300b883a 	mov	r5,r6
   1ccbc:	ddc00715 	stw	r23,28(sp)
   1ccc0:	dd400515 	stw	r21,20(sp)
   1ccc4:	dc400115 	stw	r17,4(sp)
   1ccc8:	dfc00815 	stw	ra,32(sp)
   1cccc:	dd800615 	stw	r22,24(sp)
   1ccd0:	dc800215 	stw	r18,8(sp)
   1ccd4:	dc000015 	stw	r16,0(sp)
   1ccd8:	302f883a 	mov	r23,r6
   1ccdc:	382b883a 	mov	r21,r7
   1cce0:	002587c0 	call	2587c <__mulsi3>
   1cce4:	dc400917 	ldw	r17,36(sp)
   1cce8:	10002726 	beq	r2,zero,1cd88 <_sfread_r+0xe8>
   1ccec:	102d883a 	mov	r22,r2
   1ccf0:	1025883a 	mov	r18,r2
   1ccf4:	00000b06 	br	1cd24 <_sfread_r+0x84>
   1ccf8:	00127200 	call	12720 <memcpy>
   1ccfc:	88800017 	ldw	r2,0(r17)
   1cd00:	9c27883a 	add	r19,r19,r16
   1cd04:	9425c83a 	sub	r18,r18,r16
   1cd08:	1421883a 	add	r16,r2,r16
   1cd0c:	88000115 	stw	zero,4(r17)
   1cd10:	880b883a 	mov	r5,r17
   1cd14:	8c000015 	stw	r16,0(r17)
   1cd18:	a009883a 	mov	r4,r20
   1cd1c:	001cc300 	call	1cc30 <__ssrefill_r>
   1cd20:	10001b1e 	bne	r2,zero,1cd90 <_sfread_r+0xf0>
   1cd24:	8c000117 	ldw	r16,4(r17)
   1cd28:	9809883a 	mov	r4,r19
   1cd2c:	89400017 	ldw	r5,0(r17)
   1cd30:	800d883a 	mov	r6,r16
   1cd34:	84bff036 	bltu	r16,r18,1ccf8 <__alt_data_end+0xfffde4f8>
   1cd38:	900d883a 	mov	r6,r18
   1cd3c:	00127200 	call	12720 <memcpy>
   1cd40:	88c00117 	ldw	r3,4(r17)
   1cd44:	89000017 	ldw	r4,0(r17)
   1cd48:	a805883a 	mov	r2,r21
   1cd4c:	1c87c83a 	sub	r3,r3,r18
   1cd50:	24a5883a 	add	r18,r4,r18
   1cd54:	88c00115 	stw	r3,4(r17)
   1cd58:	8c800015 	stw	r18,0(r17)
   1cd5c:	dfc00817 	ldw	ra,32(sp)
   1cd60:	ddc00717 	ldw	r23,28(sp)
   1cd64:	dd800617 	ldw	r22,24(sp)
   1cd68:	dd400517 	ldw	r21,20(sp)
   1cd6c:	dd000417 	ldw	r20,16(sp)
   1cd70:	dcc00317 	ldw	r19,12(sp)
   1cd74:	dc800217 	ldw	r18,8(sp)
   1cd78:	dc400117 	ldw	r17,4(sp)
   1cd7c:	dc000017 	ldw	r16,0(sp)
   1cd80:	dec00904 	addi	sp,sp,36
   1cd84:	f800283a 	ret
   1cd88:	0005883a 	mov	r2,zero
   1cd8c:	003ff306 	br	1cd5c <__alt_data_end+0xfffde55c>
   1cd90:	b80b883a 	mov	r5,r23
   1cd94:	b489c83a 	sub	r4,r22,r18
   1cd98:	00257c00 	call	257c0 <__udivsi3>
   1cd9c:	003fef06 	br	1cd5c <__alt_data_end+0xfffde55c>

0001cda0 <__ssvfiscanf_r>:
   1cda0:	2880030b 	ldhu	r2,12(r5)
   1cda4:	deff9b04 	addi	sp,sp,-404
   1cda8:	dd005f15 	stw	r20,380(sp)
   1cdac:	dc405c15 	stw	r17,368(sp)
   1cdb0:	dfc06415 	stw	ra,400(sp)
   1cdb4:	df006315 	stw	fp,396(sp)
   1cdb8:	ddc06215 	stw	r23,392(sp)
   1cdbc:	dd806115 	stw	r22,388(sp)
   1cdc0:	dd406015 	stw	r21,384(sp)
   1cdc4:	dcc05e15 	stw	r19,376(sp)
   1cdc8:	dc805d15 	stw	r18,372(sp)
   1cdcc:	dc005b15 	stw	r16,364(sp)
   1cdd0:	10c8000c 	andi	r3,r2,8192
   1cdd4:	d9c04f15 	stw	r7,316(sp)
   1cdd8:	2829883a 	mov	r20,r5
   1cddc:	2023883a 	mov	r17,r4
   1cde0:	1800061e 	bne	r3,zero,1cdfc <__ssvfiscanf_r+0x5c>
   1cde4:	29001917 	ldw	r4,100(r5)
   1cde8:	00f7ffc4 	movi	r3,-8193
   1cdec:	10880014 	ori	r2,r2,8192
   1cdf0:	20c6703a 	and	r3,r4,r3
   1cdf4:	2880030d 	sth	r2,12(r5)
   1cdf8:	28c01915 	stw	r3,100(r5)
   1cdfc:	30800003 	ldbu	r2,0(r6)
   1ce00:	dac04104 	addi	r11,sp,260
   1ce04:	0039883a 	mov	fp,zero
   1ce08:	048000f4 	movhi	r18,3
   1ce0c:	d8005215 	stw	zero,328(sp)
   1ce10:	d8005015 	stw	zero,320(sp)
   1ce14:	d8005115 	stw	zero,324(sp)
   1ce18:	dac04e15 	stw	r11,312(sp)
   1ce1c:	d8804d15 	stw	r2,308(sp)
   1ce20:	e027883a 	mov	r19,fp
   1ce24:	94a8a504 	addi	r18,r18,-23916
   1ce28:	a039883a 	mov	fp,r20
   1ce2c:	35000044 	addi	r20,r6,1
   1ce30:	10001e26 	beq	r2,zero,1ceac <__ssvfiscanf_r+0x10c>
   1ce34:	95800017 	ldw	r22,0(r18)
   1ce38:	b087883a 	add	r3,r22,r2
   1ce3c:	18c00043 	ldbu	r3,1(r3)
   1ce40:	18c0020c 	andi	r3,r3,8
   1ce44:	18001b26 	beq	r3,zero,1ceb4 <__ssvfiscanf_r+0x114>
   1ce48:	e0800117 	ldw	r2,4(fp)
   1ce4c:	00800e0e 	bge	zero,r2,1ce88 <__ssvfiscanf_r+0xe8>
   1ce50:	e0c00017 	ldw	r3,0(fp)
   1ce54:	91000017 	ldw	r4,0(r18)
   1ce58:	18800003 	ldbu	r2,0(r3)
   1ce5c:	2085883a 	add	r2,r4,r2
   1ce60:	10800043 	ldbu	r2,1(r2)
   1ce64:	1080020c 	andi	r2,r2,8
   1ce68:	10000b26 	beq	r2,zero,1ce98 <__ssvfiscanf_r+0xf8>
   1ce6c:	e0800117 	ldw	r2,4(fp)
   1ce70:	18c00044 	addi	r3,r3,1
   1ce74:	e0c00015 	stw	r3,0(fp)
   1ce78:	10bfffc4 	addi	r2,r2,-1
   1ce7c:	e0800115 	stw	r2,4(fp)
   1ce80:	9cc00044 	addi	r19,r19,1
   1ce84:	00bff216 	blt	zero,r2,1ce50 <__alt_data_end+0xfffde650>
   1ce88:	e00b883a 	mov	r5,fp
   1ce8c:	8809883a 	mov	r4,r17
   1ce90:	001cc300 	call	1cc30 <__ssrefill_r>
   1ce94:	103fee26 	beq	r2,zero,1ce50 <__alt_data_end+0xfffde650>
   1ce98:	a00d883a 	mov	r6,r20
   1ce9c:	30800003 	ldbu	r2,0(r6)
   1cea0:	35000044 	addi	r20,r6,1
   1cea4:	d8804d15 	stw	r2,308(sp)
   1cea8:	103fe21e 	bne	r2,zero,1ce34 <__alt_data_end+0xfffde634>
   1ceac:	d8805117 	ldw	r2,324(sp)
   1ceb0:	00009a06 	br	1d11c <__ssvfiscanf_r+0x37c>
   1ceb4:	00c00944 	movi	r3,37
   1ceb8:	10c0891e 	bne	r2,r3,1d0e0 <__ssvfiscanf_r+0x340>
   1cebc:	31800043 	ldbu	r6,1(r6)
   1cec0:	002f883a 	mov	r23,zero
   1cec4:	b809883a 	mov	r4,r23
   1cec8:	0021883a 	mov	r16,zero
   1cecc:	01c01e04 	movi	r7,120
   1ced0:	00c01b04 	movi	r3,108
   1ced4:	302f883a 	mov	r23,r6
   1ced8:	a5400044 	addi	r21,r20,1
   1cedc:	3dc0e436 	bltu	r7,r23,1d270 <__ssvfiscanf_r+0x4d0>
   1cee0:	b80490ba 	slli	r2,r23,2
   1cee4:	014000b4 	movhi	r5,2
   1cee8:	2973be04 	addi	r5,r5,-12552
   1ceec:	1145883a 	add	r2,r2,r5
   1cef0:	10800017 	ldw	r2,0(r2)
   1cef4:	1000683a 	jmp	r2
   1cef8:	0001d118 	cmpnei	zero,zero,1860
   1cefc:	0001d270 	cmpltui	zero,zero,1865
   1cf00:	0001d270 	cmpltui	zero,zero,1865
   1cf04:	0001d270 	cmpltui	zero,zero,1865
   1cf08:	0001d270 	cmpltui	zero,zero,1865
   1cf0c:	0001d270 	cmpltui	zero,zero,1865
   1cf10:	0001d270 	cmpltui	zero,zero,1865
   1cf14:	0001d270 	cmpltui	zero,zero,1865
   1cf18:	0001d270 	cmpltui	zero,zero,1865
   1cf1c:	0001d270 	cmpltui	zero,zero,1865
   1cf20:	0001d270 	cmpltui	zero,zero,1865
   1cf24:	0001d270 	cmpltui	zero,zero,1865
   1cf28:	0001d270 	cmpltui	zero,zero,1865
   1cf2c:	0001d270 	cmpltui	zero,zero,1865
   1cf30:	0001d270 	cmpltui	zero,zero,1865
   1cf34:	0001d270 	cmpltui	zero,zero,1865
   1cf38:	0001d270 	cmpltui	zero,zero,1865
   1cf3c:	0001d270 	cmpltui	zero,zero,1865
   1cf40:	0001d270 	cmpltui	zero,zero,1865
   1cf44:	0001d270 	cmpltui	zero,zero,1865
   1cf48:	0001d270 	cmpltui	zero,zero,1865
   1cf4c:	0001d270 	cmpltui	zero,zero,1865
   1cf50:	0001d270 	cmpltui	zero,zero,1865
   1cf54:	0001d270 	cmpltui	zero,zero,1865
   1cf58:	0001d270 	cmpltui	zero,zero,1865
   1cf5c:	0001d270 	cmpltui	zero,zero,1865
   1cf60:	0001d270 	cmpltui	zero,zero,1865
   1cf64:	0001d270 	cmpltui	zero,zero,1865
   1cf68:	0001d270 	cmpltui	zero,zero,1865
   1cf6c:	0001d270 	cmpltui	zero,zero,1865
   1cf70:	0001d270 	cmpltui	zero,zero,1865
   1cf74:	0001d270 	cmpltui	zero,zero,1865
   1cf78:	0001d270 	cmpltui	zero,zero,1865
   1cf7c:	0001d270 	cmpltui	zero,zero,1865
   1cf80:	0001d270 	cmpltui	zero,zero,1865
   1cf84:	0001d270 	cmpltui	zero,zero,1865
   1cf88:	0001d270 	cmpltui	zero,zero,1865
   1cf8c:	0001d0dc 	xori	zero,zero,1859
   1cf90:	0001d270 	cmpltui	zero,zero,1865
   1cf94:	0001d270 	cmpltui	zero,zero,1865
   1cf98:	0001d270 	cmpltui	zero,zero,1865
   1cf9c:	0001d270 	cmpltui	zero,zero,1865
   1cfa0:	0001d4b4 	movhi	zero,1874
   1cfa4:	0001d270 	cmpltui	zero,zero,1865
   1cfa8:	0001d270 	cmpltui	zero,zero,1865
   1cfac:	0001d270 	cmpltui	zero,zero,1865
   1cfb0:	0001d270 	cmpltui	zero,zero,1865
   1cfb4:	0001d270 	cmpltui	zero,zero,1865
   1cfb8:	0001d420 	cmpeqi	zero,zero,1872
   1cfbc:	0001d420 	cmpeqi	zero,zero,1872
   1cfc0:	0001d420 	cmpeqi	zero,zero,1872
   1cfc4:	0001d420 	cmpeqi	zero,zero,1872
   1cfc8:	0001d420 	cmpeqi	zero,zero,1872
   1cfcc:	0001d420 	cmpeqi	zero,zero,1872
   1cfd0:	0001d420 	cmpeqi	zero,zero,1872
   1cfd4:	0001d420 	cmpeqi	zero,zero,1872
   1cfd8:	0001d420 	cmpeqi	zero,zero,1872
   1cfdc:	0001d420 	cmpeqi	zero,zero,1872
   1cfe0:	0001d270 	cmpltui	zero,zero,1865
   1cfe4:	0001d270 	cmpltui	zero,zero,1865
   1cfe8:	0001d270 	cmpltui	zero,zero,1865
   1cfec:	0001d270 	cmpltui	zero,zero,1865
   1cff0:	0001d270 	cmpltui	zero,zero,1865
   1cff4:	0001d270 	cmpltui	zero,zero,1865
   1cff8:	0001d270 	cmpltui	zero,zero,1865
   1cffc:	0001d270 	cmpltui	zero,zero,1865
   1d000:	0001d270 	cmpltui	zero,zero,1865
   1d004:	0001d270 	cmpltui	zero,zero,1865
   1d008:	0001d3f4 	movhi	zero,1871
   1d00c:	0001d270 	cmpltui	zero,zero,1865
   1d010:	0001d270 	cmpltui	zero,zero,1865
   1d014:	0001d270 	cmpltui	zero,zero,1865
   1d018:	0001d270 	cmpltui	zero,zero,1865
   1d01c:	0001d270 	cmpltui	zero,zero,1865
   1d020:	0001d270 	cmpltui	zero,zero,1865
   1d024:	0001d270 	cmpltui	zero,zero,1865
   1d028:	0001d478 	rdprs	zero,zero,1873
   1d02c:	0001d270 	cmpltui	zero,zero,1865
   1d030:	0001d270 	cmpltui	zero,zero,1865
   1d034:	0001d450 	cmplti	zero,zero,1873
   1d038:	0001d270 	cmpltui	zero,zero,1865
   1d03c:	0001d270 	cmpltui	zero,zero,1865
   1d040:	0001d270 	cmpltui	zero,zero,1865
   1d044:	0001d270 	cmpltui	zero,zero,1865
   1d048:	0001d270 	cmpltui	zero,zero,1865
   1d04c:	0001d270 	cmpltui	zero,zero,1865
   1d050:	0001d270 	cmpltui	zero,zero,1865
   1d054:	0001d270 	cmpltui	zero,zero,1865
   1d058:	0001d48c 	andi	zero,zero,1874
   1d05c:	0001d270 	cmpltui	zero,zero,1865
   1d060:	0001d270 	cmpltui	zero,zero,1865
   1d064:	0001d368 	cmpgeui	zero,zero,1869
   1d068:	0001d270 	cmpltui	zero,zero,1865
   1d06c:	0001d270 	cmpltui	zero,zero,1865
   1d070:	0001d270 	cmpltui	zero,zero,1865
   1d074:	0001d270 	cmpltui	zero,zero,1865
   1d078:	0001d270 	cmpltui	zero,zero,1865
   1d07c:	0001d270 	cmpltui	zero,zero,1865
   1d080:	0001d270 	cmpltui	zero,zero,1865
   1d084:	0001d2ec 	andhi	zero,zero,1867
   1d088:	0001d2c4 	movi	zero,1867
   1d08c:	0001d270 	cmpltui	zero,zero,1865
   1d090:	0001d270 	cmpltui	zero,zero,1865
   1d094:	0001d270 	cmpltui	zero,zero,1865
   1d098:	0001d2b0 	cmpltui	zero,zero,1866
   1d09c:	0001d4c8 	cmpgei	zero,zero,1875
   1d0a0:	0001d270 	cmpltui	zero,zero,1865
   1d0a4:	0001d270 	cmpltui	zero,zero,1865
   1d0a8:	0001d258 	cmpnei	zero,zero,1865
   1d0ac:	0001d270 	cmpltui	zero,zero,1865
   1d0b0:	0001d22c 	andhi	zero,zero,1864
   1d0b4:	0001d204 	movi	zero,1864
   1d0b8:	0001d1d8 	cmpnei	zero,zero,1863
   1d0bc:	0001d270 	cmpltui	zero,zero,1865
   1d0c0:	0001d270 	cmpltui	zero,zero,1865
   1d0c4:	0001d1c4 	movi	zero,1863
   1d0c8:	0001d270 	cmpltui	zero,zero,1865
   1d0cc:	0001d14c 	andi	zero,zero,1861
   1d0d0:	0001d270 	cmpltui	zero,zero,1865
   1d0d4:	0001d270 	cmpltui	zero,zero,1865
   1d0d8:	0001d48c 	andi	zero,zero,1874
   1d0dc:	a829883a 	mov	r20,r21
   1d0e0:	e0800117 	ldw	r2,4(fp)
   1d0e4:	0081e40e 	bge	zero,r2,1d878 <__ssvfiscanf_r+0xad8>
   1d0e8:	e0800017 	ldw	r2,0(fp)
   1d0ec:	a0ffffc3 	ldbu	r3,-1(r20)
   1d0f0:	11000003 	ldbu	r4,0(r2)
   1d0f4:	20ff6d1e 	bne	r4,r3,1ceac <__alt_data_end+0xfffde6ac>
   1d0f8:	e0c00117 	ldw	r3,4(fp)
   1d0fc:	10800044 	addi	r2,r2,1
   1d100:	e0800015 	stw	r2,0(fp)
   1d104:	18bfffc4 	addi	r2,r3,-1
   1d108:	e0800115 	stw	r2,4(fp)
   1d10c:	9cc00044 	addi	r19,r19,1
   1d110:	a00d883a 	mov	r6,r20
   1d114:	003f6106 	br	1ce9c <__alt_data_end+0xfffde69c>
   1d118:	00bfffc4 	movi	r2,-1
   1d11c:	dfc06417 	ldw	ra,400(sp)
   1d120:	df006317 	ldw	fp,396(sp)
   1d124:	ddc06217 	ldw	r23,392(sp)
   1d128:	dd806117 	ldw	r22,388(sp)
   1d12c:	dd406017 	ldw	r21,384(sp)
   1d130:	dd005f17 	ldw	r20,380(sp)
   1d134:	dcc05e17 	ldw	r19,376(sp)
   1d138:	dc805d17 	ldw	r18,372(sp)
   1d13c:	dc405c17 	ldw	r17,368(sp)
   1d140:	dc005b17 	ldw	r16,364(sp)
   1d144:	dec06504 	addi	sp,sp,404
   1d148:	f800283a 	ret
   1d14c:	e0800117 	ldw	r2,4(fp)
   1d150:	202f883a 	mov	r23,r4
   1d154:	0081f20e 	bge	zero,r2,1d920 <__ssvfiscanf_r+0xb80>
   1d158:	008000b4 	movhi	r2,2
   1d15c:	10b15d04 	addi	r2,r2,-14988
   1d160:	02c00284 	movi	r11,10
   1d164:	d8805215 	stw	r2,328(sp)
   1d168:	dac05015 	stw	r11,320(sp)
   1d16c:	050000c4 	movi	r20,3
   1d170:	e0800017 	ldw	r2,0(fp)
   1d174:	00000206 	br	1d180 <__ssvfiscanf_r+0x3e0>
   1d178:	10800044 	addi	r2,r2,1
   1d17c:	e0800015 	stw	r2,0(fp)
   1d180:	11000003 	ldbu	r4,0(r2)
   1d184:	20c03fcc 	andi	r3,r4,255
   1d188:	b0c7883a 	add	r3,r22,r3
   1d18c:	18c00043 	ldbu	r3,1(r3)
   1d190:	1940020c 	andi	r5,r3,8
   1d194:	2801ee26 	beq	r5,zero,1d950 <__ssvfiscanf_r+0xbb0>
   1d198:	e0c00117 	ldw	r3,4(fp)
   1d19c:	9cc00044 	addi	r19,r19,1
   1d1a0:	18ffffc4 	addi	r3,r3,-1
   1d1a4:	e0c00115 	stw	r3,4(fp)
   1d1a8:	00fff316 	blt	zero,r3,1d178 <__alt_data_end+0xfffde978>
   1d1ac:	e00b883a 	mov	r5,fp
   1d1b0:	8809883a 	mov	r4,r17
   1d1b4:	001cc300 	call	1cc30 <__ssrefill_r>
   1d1b8:	10016a1e 	bne	r2,zero,1d764 <__ssvfiscanf_r+0x9c4>
   1d1bc:	95800017 	ldw	r22,0(r18)
   1d1c0:	003feb06 	br	1d170 <__alt_data_end+0xfffde970>
   1d1c4:	e0800117 	ldw	r2,4(fp)
   1d1c8:	202f883a 	mov	r23,r4
   1d1cc:	0081c80e 	bge	zero,r2,1d8f0 <__ssvfiscanf_r+0xb50>
   1d1d0:	05000084 	movi	r20,2
   1d1d4:	003fe606 	br	1d170 <__alt_data_end+0xfffde970>
   1d1d8:	e0800117 	ldw	r2,4(fp)
   1d1dc:	202f883a 	mov	r23,r4
   1d1e0:	84008814 	ori	r16,r16,544
   1d1e4:	0080ad0e 	bge	zero,r2,1d49c <__ssvfiscanf_r+0x6fc>
   1d1e8:	008000b4 	movhi	r2,2
   1d1ec:	10b15d04 	addi	r2,r2,-14988
   1d1f0:	02c00404 	movi	r11,16
   1d1f4:	d8805215 	stw	r2,328(sp)
   1d1f8:	dac05015 	stw	r11,320(sp)
   1d1fc:	050000c4 	movi	r20,3
   1d200:	003fdb06 	br	1d170 <__alt_data_end+0xfffde970>
   1d204:	e0800117 	ldw	r2,4(fp)
   1d208:	202f883a 	mov	r23,r4
   1d20c:	0080940e 	bge	zero,r2,1d460 <__ssvfiscanf_r+0x6c0>
   1d210:	008000b4 	movhi	r2,2
   1d214:	10b15d04 	addi	r2,r2,-14988
   1d218:	02c00204 	movi	r11,8
   1d21c:	d8805215 	stw	r2,328(sp)
   1d220:	dac05015 	stw	r11,320(sp)
   1d224:	050000c4 	movi	r20,3
   1d228:	003fd106 	br	1d170 <__alt_data_end+0xfffde970>
   1d22c:	8080040c 	andi	r2,r16,16
   1d230:	1000e41e 	bne	r2,zero,1d5c4 <__ssvfiscanf_r+0x824>
   1d234:	8080010c 	andi	r2,r16,4
   1d238:	10019926 	beq	r2,zero,1d8a0 <__ssvfiscanf_r+0xb00>
   1d23c:	dac04f17 	ldw	r11,316(sp)
   1d240:	a829883a 	mov	r20,r21
   1d244:	58800017 	ldw	r2,0(r11)
   1d248:	5ac00104 	addi	r11,r11,4
   1d24c:	dac04f15 	stw	r11,316(sp)
   1d250:	14c0000d 	sth	r19,0(r2)
   1d254:	003f1006 	br	1ce98 <__alt_data_end+0xfffde698>
   1d258:	a5c00043 	ldbu	r23,1(r20)
   1d25c:	b8c18b26 	beq	r23,r3,1d88c <__ssvfiscanf_r+0xaec>
   1d260:	a829883a 	mov	r20,r21
   1d264:	84000054 	ori	r16,r16,1
   1d268:	a5400044 	addi	r21,r20,1
   1d26c:	3dff1c2e 	bgeu	r7,r23,1cee0 <__alt_data_end+0xfffde6e0>
   1d270:	b80d883a 	mov	r6,r23
   1d274:	b185883a 	add	r2,r22,r6
   1d278:	10800043 	ldbu	r2,1(r2)
   1d27c:	00c00044 	movi	r3,1
   1d280:	202f883a 	mov	r23,r4
   1d284:	108000cc 	andi	r2,r2,3
   1d288:	10c17226 	beq	r2,r3,1d854 <__ssvfiscanf_r+0xab4>
   1d28c:	e0800117 	ldw	r2,4(fp)
   1d290:	0081730e 	bge	zero,r2,1d860 <__ssvfiscanf_r+0xac0>
   1d294:	008000b4 	movhi	r2,2
   1d298:	10afff04 	addi	r2,r2,-16388
   1d29c:	02c00284 	movi	r11,10
   1d2a0:	d8805215 	stw	r2,328(sp)
   1d2a4:	dac05015 	stw	r11,320(sp)
   1d2a8:	050000c4 	movi	r20,3
   1d2ac:	003fb006 	br	1d170 <__alt_data_end+0xfffde970>
   1d2b0:	a1400043 	ldbu	r5,1(r20)
   1d2b4:	84000114 	ori	r16,r16,4
   1d2b8:	a829883a 	mov	r20,r21
   1d2bc:	2dc03fcc 	andi	r23,r5,255
   1d2c0:	003f0506 	br	1ced8 <__alt_data_end+0xfffde6d8>
   1d2c4:	e0800117 	ldw	r2,4(fp)
   1d2c8:	202f883a 	mov	r23,r4
   1d2cc:	0081640e 	bge	zero,r2,1d860 <__ssvfiscanf_r+0xac0>
   1d2d0:	02c000b4 	movhi	r11,2
   1d2d4:	5aefff04 	addi	r11,r11,-16388
   1d2d8:	dac05215 	stw	r11,328(sp)
   1d2dc:	02c00284 	movi	r11,10
   1d2e0:	dac05015 	stw	r11,320(sp)
   1d2e4:	050000c4 	movi	r20,3
   1d2e8:	003fa106 	br	1d170 <__alt_data_end+0xfffde970>
   1d2ec:	e0800117 	ldw	r2,4(fp)
   1d2f0:	202f883a 	mov	r23,r4
   1d2f4:	00812c0e 	bge	zero,r2,1d7a8 <__ssvfiscanf_r+0xa08>
   1d2f8:	b800011e 	bne	r23,zero,1d300 <__ssvfiscanf_r+0x560>
   1d2fc:	05c00044 	movi	r23,1
   1d300:	8080004c 	andi	r2,r16,1
   1d304:	1000791e 	bne	r2,zero,1d4ec <__ssvfiscanf_r+0x74c>
   1d308:	8400040c 	andi	r16,r16,16
   1d30c:	80013f26 	beq	r16,zero,1d80c <__ssvfiscanf_r+0xa6c>
   1d310:	0021883a 	mov	r16,zero
   1d314:	00000806 	br	1d338 <__ssvfiscanf_r+0x598>
   1d318:	1887883a 	add	r3,r3,r2
   1d31c:	e00b883a 	mov	r5,fp
   1d320:	8809883a 	mov	r4,r17
   1d324:	e0c00015 	stw	r3,0(fp)
   1d328:	80a1883a 	add	r16,r16,r2
   1d32c:	b8afc83a 	sub	r23,r23,r2
   1d330:	001cc300 	call	1cc30 <__ssrefill_r>
   1d334:	1001331e 	bne	r2,zero,1d804 <__ssvfiscanf_r+0xa64>
   1d338:	e0800117 	ldw	r2,4(fp)
   1d33c:	e0c00017 	ldw	r3,0(fp)
   1d340:	15fff516 	blt	r2,r23,1d318 <__alt_data_end+0xfffdeb18>
   1d344:	15c5c83a 	sub	r2,r2,r23
   1d348:	1dd5883a 	add	r10,r3,r23
   1d34c:	85e1883a 	add	r16,r16,r23
   1d350:	e0800115 	stw	r2,4(fp)
   1d354:	e2800015 	stw	r10,0(fp)
   1d358:	a829883a 	mov	r20,r21
   1d35c:	9c27883a 	add	r19,r19,r16
   1d360:	a00d883a 	mov	r6,r20
   1d364:	003ecd06 	br	1ce9c <__alt_data_end+0xfffde69c>
   1d368:	202f883a 	mov	r23,r4
   1d36c:	a80b883a 	mov	r5,r21
   1d370:	d9000104 	addi	r4,sp,4
   1d374:	001a7000 	call	1a700 <__sccl>
   1d378:	1029883a 	mov	r20,r2
   1d37c:	e0800117 	ldw	r2,4(fp)
   1d380:	0081620e 	bge	zero,r2,1d90c <__ssvfiscanf_r+0xb6c>
   1d384:	e1000017 	ldw	r4,0(fp)
   1d388:	20800003 	ldbu	r2,0(r4)
   1d38c:	b8009026 	beq	r23,zero,1d5d0 <__ssvfiscanf_r+0x830>
   1d390:	8400040c 	andi	r16,r16,16
   1d394:	80009126 	beq	r16,zero,1d5dc <__ssvfiscanf_r+0x83c>
   1d398:	b821883a 	mov	r16,r23
   1d39c:	002b883a 	mov	r21,zero
   1d3a0:	00000106 	br	1d3a8 <__ssvfiscanf_r+0x608>
   1d3a4:	20800003 	ldbu	r2,0(r4)
   1d3a8:	10803fcc 	andi	r2,r2,255
   1d3ac:	d8c00104 	addi	r3,sp,4
   1d3b0:	1885883a 	add	r2,r3,r2
   1d3b4:	10800007 	ldb	r2,0(r2)
   1d3b8:	10011026 	beq	r2,zero,1d7fc <__ssvfiscanf_r+0xa5c>
   1d3bc:	e0800117 	ldw	r2,4(fp)
   1d3c0:	21000044 	addi	r4,r4,1
   1d3c4:	ad400044 	addi	r21,r21,1
   1d3c8:	10bfffc4 	addi	r2,r2,-1
   1d3cc:	e0800115 	stw	r2,4(fp)
   1d3d0:	e1000015 	stw	r4,0(fp)
   1d3d4:	adc0eb26 	beq	r21,r23,1d784 <__ssvfiscanf_r+0x9e4>
   1d3d8:	00bff216 	blt	zero,r2,1d3a4 <__alt_data_end+0xfffdeba4>
   1d3dc:	e00b883a 	mov	r5,fp
   1d3e0:	8809883a 	mov	r4,r17
   1d3e4:	001cc300 	call	1cc30 <__ssrefill_r>
   1d3e8:	1000e51e 	bne	r2,zero,1d780 <__ssvfiscanf_r+0x9e0>
   1d3ec:	e1000017 	ldw	r4,0(fp)
   1d3f0:	003fec06 	br	1d3a4 <__alt_data_end+0xfffdeba4>
   1d3f4:	e0800117 	ldw	r2,4(fp)
   1d3f8:	202f883a 	mov	r23,r4
   1d3fc:	84000054 	ori	r16,r16,1
   1d400:	0081170e 	bge	zero,r2,1d860 <__ssvfiscanf_r+0xac0>
   1d404:	00c000b4 	movhi	r3,2
   1d408:	18efff04 	addi	r3,r3,-16388
   1d40c:	02c00284 	movi	r11,10
   1d410:	d8c05215 	stw	r3,328(sp)
   1d414:	dac05015 	stw	r11,320(sp)
   1d418:	050000c4 	movi	r20,3
   1d41c:	003f5406 	br	1d170 <__alt_data_end+0xfffde970>
   1d420:	01400284 	movi	r5,10
   1d424:	d8c05a15 	stw	r3,360(sp)
   1d428:	d9c05915 	stw	r7,356(sp)
   1d42c:	002587c0 	call	2587c <__mulsi3>
   1d430:	a1400043 	ldbu	r5,1(r20)
   1d434:	15c5883a 	add	r2,r2,r23
   1d438:	113ff404 	addi	r4,r2,-48
   1d43c:	a829883a 	mov	r20,r21
   1d440:	2dc03fcc 	andi	r23,r5,255
   1d444:	d8c05a17 	ldw	r3,360(sp)
   1d448:	d9c05917 	ldw	r7,356(sp)
   1d44c:	003ea206 	br	1ced8 <__alt_data_end+0xfffde6d8>
   1d450:	e0800117 	ldw	r2,4(fp)
   1d454:	202f883a 	mov	r23,r4
   1d458:	84000054 	ori	r16,r16,1
   1d45c:	00bf6c16 	blt	zero,r2,1d210 <__alt_data_end+0xfffdea10>
   1d460:	e00b883a 	mov	r5,fp
   1d464:	8809883a 	mov	r4,r17
   1d468:	001cc300 	call	1cc30 <__ssrefill_r>
   1d46c:	1000bd1e 	bne	r2,zero,1d764 <__ssvfiscanf_r+0x9c4>
   1d470:	95800017 	ldw	r22,0(r18)
   1d474:	003f6606 	br	1d210 <__alt_data_end+0xfffdea10>
   1d478:	a1400043 	ldbu	r5,1(r20)
   1d47c:	84000094 	ori	r16,r16,2
   1d480:	a829883a 	mov	r20,r21
   1d484:	2dc03fcc 	andi	r23,r5,255
   1d488:	003e9306 	br	1ced8 <__alt_data_end+0xfffde6d8>
   1d48c:	e0800117 	ldw	r2,4(fp)
   1d490:	202f883a 	mov	r23,r4
   1d494:	84008014 	ori	r16,r16,512
   1d498:	00bf5316 	blt	zero,r2,1d1e8 <__alt_data_end+0xfffde9e8>
   1d49c:	e00b883a 	mov	r5,fp
   1d4a0:	8809883a 	mov	r4,r17
   1d4a4:	001cc300 	call	1cc30 <__ssrefill_r>
   1d4a8:	1000ae1e 	bne	r2,zero,1d764 <__ssvfiscanf_r+0x9c4>
   1d4ac:	95800017 	ldw	r22,0(r18)
   1d4b0:	003f4d06 	br	1d1e8 <__alt_data_end+0xfffde9e8>
   1d4b4:	a1400043 	ldbu	r5,1(r20)
   1d4b8:	84000414 	ori	r16,r16,16
   1d4bc:	a829883a 	mov	r20,r21
   1d4c0:	2dc03fcc 	andi	r23,r5,255
   1d4c4:	003e8406 	br	1ced8 <__alt_data_end+0xfffde6d8>
   1d4c8:	e0800117 	ldw	r2,4(fp)
   1d4cc:	202f883a 	mov	r23,r4
   1d4d0:	0081190e 	bge	zero,r2,1d938 <__ssvfiscanf_r+0xb98>
   1d4d4:	008000b4 	movhi	r2,2
   1d4d8:	10afff04 	addi	r2,r2,-16388
   1d4dc:	d8805215 	stw	r2,328(sp)
   1d4e0:	d8005015 	stw	zero,320(sp)
   1d4e4:	050000c4 	movi	r20,3
   1d4e8:	003f2106 	br	1d170 <__alt_data_end+0xfffde970>
   1d4ec:	d8c04b04 	addi	r3,sp,300
   1d4f0:	8400040c 	andi	r16,r16,16
   1d4f4:	01800204 	movi	r6,8
   1d4f8:	000b883a 	mov	r5,zero
   1d4fc:	1809883a 	mov	r4,r3
   1d500:	dc005415 	stw	r16,336(sp)
   1d504:	d8c05315 	stw	r3,332(sp)
   1d508:	00129c40 	call	129c4 <memset>
   1d50c:	dc005417 	ldw	r16,336(sp)
   1d510:	8000a026 	beq	r16,zero,1d794 <__ssvfiscanf_r+0x9f4>
   1d514:	002d883a 	mov	r22,zero
   1d518:	0021883a 	mov	r16,zero
   1d51c:	00191a80 	call	191a8 <__locale_mb_cur_max>
   1d520:	14009026 	beq	r2,r16,1d764 <__ssvfiscanf_r+0x9c4>
   1d524:	e0800017 	ldw	r2,0(fp)
   1d528:	e0c00117 	ldw	r3,4(fp)
   1d52c:	dac05317 	ldw	r11,332(sp)
   1d530:	12000003 	ldbu	r8,0(r2)
   1d534:	18ffffc4 	addi	r3,r3,-1
   1d538:	10800044 	addi	r2,r2,1
   1d53c:	d9004104 	addi	r4,sp,260
   1d540:	e0c00115 	stw	r3,4(fp)
   1d544:	e0800015 	stw	r2,0(fp)
   1d548:	85000044 	addi	r20,r16,1
   1d54c:	dac00015 	stw	r11,0(sp)
   1d550:	2421883a 	add	r16,r4,r16
   1d554:	200d883a 	mov	r6,r4
   1d558:	a00f883a 	mov	r7,r20
   1d55c:	b00b883a 	mov	r5,r22
   1d560:	8809883a 	mov	r4,r17
   1d564:	82000005 	stb	r8,0(r16)
   1d568:	001925c0 	call	1925c <_mbrtowc_r>
   1d56c:	00ffffc4 	movi	r3,-1
   1d570:	10c07c26 	beq	r2,r3,1d764 <__ssvfiscanf_r+0x9c4>
   1d574:	1000911e 	bne	r2,zero,1d7bc <__ssvfiscanf_r+0xa1c>
   1d578:	dac05417 	ldw	r11,336(sp)
   1d57c:	5800951e 	bne	r11,zero,1d7d4 <__ssvfiscanf_r+0xa34>
   1d580:	b0000015 	stw	zero,0(r22)
   1d584:	9d27883a 	add	r19,r19,r20
   1d588:	b8ef883a 	add	r23,r23,r3
   1d58c:	b5800104 	addi	r22,r22,4
   1d590:	e0800117 	ldw	r2,4(fp)
   1d594:	0021883a 	mov	r16,zero
   1d598:	00807c16 	blt	zero,r2,1d78c <__ssvfiscanf_r+0x9ec>
   1d59c:	e00b883a 	mov	r5,fp
   1d5a0:	8809883a 	mov	r4,r17
   1d5a4:	001cc300 	call	1cc30 <__ssrefill_r>
   1d5a8:	10007826 	beq	r2,zero,1d78c <__ssvfiscanf_r+0x9ec>
   1d5ac:	80006d1e 	bne	r16,zero,1d764 <__ssvfiscanf_r+0x9c4>
   1d5b0:	d8c05417 	ldw	r3,336(sp)
   1d5b4:	1800031e 	bne	r3,zero,1d5c4 <__ssvfiscanf_r+0x824>
   1d5b8:	dac05117 	ldw	r11,324(sp)
   1d5bc:	5ac00044 	addi	r11,r11,1
   1d5c0:	dac05115 	stw	r11,324(sp)
   1d5c4:	a829883a 	mov	r20,r21
   1d5c8:	a00d883a 	mov	r6,r20
   1d5cc:	003e3306 	br	1ce9c <__alt_data_end+0xfffde69c>
   1d5d0:	8400040c 	andi	r16,r16,16
   1d5d4:	05ffffc4 	movi	r23,-1
   1d5d8:	803f6f1e 	bne	r16,zero,1d398 <__alt_data_end+0xfffdeb98>
   1d5dc:	dac04f17 	ldw	r11,316(sp)
   1d5e0:	babfffc4 	addi	r10,r23,-1
   1d5e4:	5d400017 	ldw	r21,0(r11)
   1d5e8:	5c000104 	addi	r16,r11,4
   1d5ec:	a807883a 	mov	r3,r21
   1d5f0:	aaaf883a 	add	r23,r21,r10
   1d5f4:	00000306 	br	1d604 <__ssvfiscanf_r+0x864>
   1d5f8:	e1000017 	ldw	r4,0(fp)
   1d5fc:	b007883a 	mov	r3,r22
   1d600:	20800003 	ldbu	r2,0(r4)
   1d604:	10803fcc 	andi	r2,r2,255
   1d608:	d9400104 	addi	r5,sp,4
   1d60c:	2885883a 	add	r2,r5,r2
   1d610:	10800007 	ldb	r2,0(r2)
   1d614:	10007726 	beq	r2,zero,1d7f4 <__ssvfiscanf_r+0xa54>
   1d618:	e0800117 	ldw	r2,4(fp)
   1d61c:	21400044 	addi	r5,r4,1
   1d620:	e1400015 	stw	r5,0(fp)
   1d624:	10bfffc4 	addi	r2,r2,-1
   1d628:	e0800115 	stw	r2,4(fp)
   1d62c:	20800003 	ldbu	r2,0(r4)
   1d630:	1d800044 	addi	r22,r3,1
   1d634:	18800005 	stb	r2,0(r3)
   1d638:	1dc00726 	beq	r3,r23,1d658 <__ssvfiscanf_r+0x8b8>
   1d63c:	e0800117 	ldw	r2,4(fp)
   1d640:	00bfed16 	blt	zero,r2,1d5f8 <__alt_data_end+0xfffdedf8>
   1d644:	e00b883a 	mov	r5,fp
   1d648:	8809883a 	mov	r4,r17
   1d64c:	001cc300 	call	1cc30 <__ssrefill_r>
   1d650:	103fe926 	beq	r2,zero,1d5f8 <__alt_data_end+0xfffdedf8>
   1d654:	ad804326 	beq	r21,r22,1d764 <__ssvfiscanf_r+0x9c4>
   1d658:	b56bc83a 	sub	r21,r22,r21
   1d65c:	a83e1326 	beq	r21,zero,1ceac <__alt_data_end+0xfffde6ac>
   1d660:	dac05117 	ldw	r11,324(sp)
   1d664:	b0000005 	stb	zero,0(r22)
   1d668:	dc004f15 	stw	r16,316(sp)
   1d66c:	5ac00044 	addi	r11,r11,1
   1d670:	dac05115 	stw	r11,324(sp)
   1d674:	9d67883a 	add	r19,r19,r21
   1d678:	a00d883a 	mov	r6,r20
   1d67c:	003e0706 	br	1ce9c <__alt_data_end+0xfffde69c>
   1d680:	d8c04b04 	addi	r3,sp,300
   1d684:	8400040c 	andi	r16,r16,16
   1d688:	01800204 	movi	r6,8
   1d68c:	000b883a 	mov	r5,zero
   1d690:	1809883a 	mov	r4,r3
   1d694:	d8c05315 	stw	r3,332(sp)
   1d698:	00129c40 	call	129c4 <memset>
   1d69c:	8001eb1e 	bne	r16,zero,1de4c <__ssvfiscanf_r+0x10ac>
   1d6a0:	dac04f17 	ldw	r11,316(sp)
   1d6a4:	5d800017 	ldw	r22,0(r11)
   1d6a8:	5ac00104 	addi	r11,r11,4
   1d6ac:	dac04f15 	stw	r11,316(sp)
   1d6b0:	000d883a 	mov	r6,zero
   1d6b4:	3029883a 	mov	r20,r6
   1d6b8:	e0800017 	ldw	r2,0(fp)
   1d6bc:	90c00017 	ldw	r3,0(r18)
   1d6c0:	10800003 	ldbu	r2,0(r2)
   1d6c4:	1885883a 	add	r2,r3,r2
   1d6c8:	10800043 	ldbu	r2,1(r2)
   1d6cc:	1080020c 	andi	r2,r2,8
   1d6d0:	1001ce1e 	bne	r2,zero,1de0c <__ssvfiscanf_r+0x106c>
   1d6d4:	b801cd26 	beq	r23,zero,1de0c <__ssvfiscanf_r+0x106c>
   1d6d8:	00191a80 	call	191a8 <__locale_mb_cur_max>
   1d6dc:	a0802126 	beq	r20,r2,1d764 <__ssvfiscanf_r+0x9c4>
   1d6e0:	e0800017 	ldw	r2,0(fp)
   1d6e4:	e1000117 	ldw	r4,4(fp)
   1d6e8:	dac05317 	ldw	r11,332(sp)
   1d6ec:	12000003 	ldbu	r8,0(r2)
   1d6f0:	213fffc4 	addi	r4,r4,-1
   1d6f4:	10800044 	addi	r2,r2,1
   1d6f8:	e1000115 	stw	r4,4(fp)
   1d6fc:	d9404104 	addi	r5,sp,260
   1d700:	e0800015 	stw	r2,0(fp)
   1d704:	a0c00044 	addi	r3,r20,1
   1d708:	dac00015 	stw	r11,0(sp)
   1d70c:	2d29883a 	add	r20,r5,r20
   1d710:	180f883a 	mov	r7,r3
   1d714:	280d883a 	mov	r6,r5
   1d718:	8809883a 	mov	r4,r17
   1d71c:	a2000005 	stb	r8,0(r20)
   1d720:	b00b883a 	mov	r5,r22
   1d724:	d8c05a15 	stw	r3,360(sp)
   1d728:	001925c0 	call	1925c <_mbrtowc_r>
   1d72c:	013fffc4 	movi	r4,-1
   1d730:	d8c05a17 	ldw	r3,360(sp)
   1d734:	11000b26 	beq	r2,r4,1d764 <__ssvfiscanf_r+0x9c4>
   1d738:	1001a226 	beq	r2,zero,1ddc4 <__ssvfiscanf_r+0x1024>
   1d73c:	017fff84 	movi	r5,-2
   1d740:	1829883a 	mov	r20,r3
   1d744:	1141e51e 	bne	r2,r5,1dedc <__ssvfiscanf_r+0x113c>
   1d748:	e0800117 	ldw	r2,4(fp)
   1d74c:	00bfda16 	blt	zero,r2,1d6b8 <__alt_data_end+0xfffdeeb8>
   1d750:	e00b883a 	mov	r5,fp
   1d754:	8809883a 	mov	r4,r17
   1d758:	001cc300 	call	1cc30 <__ssrefill_r>
   1d75c:	103fd626 	beq	r2,zero,1d6b8 <__alt_data_end+0xfffdeeb8>
   1d760:	a001aa26 	beq	r20,zero,1de0c <__ssvfiscanf_r+0x106c>
   1d764:	dac05117 	ldw	r11,324(sp)
   1d768:	583e6b26 	beq	r11,zero,1d118 <__alt_data_end+0xfffde918>
   1d76c:	e080030b 	ldhu	r2,12(fp)
   1d770:	1080100c 	andi	r2,r2,64
   1d774:	103e681e 	bne	r2,zero,1d118 <__alt_data_end+0xfffde918>
   1d778:	5805883a 	mov	r2,r11
   1d77c:	003e6706 	br	1d11c <__alt_data_end+0xfffde91c>
   1d780:	a821883a 	mov	r16,r21
   1d784:	802b883a 	mov	r21,r16
   1d788:	003fba06 	br	1d674 <__alt_data_end+0xfffdee74>
   1d78c:	b83f631e 	bne	r23,zero,1d51c <__alt_data_end+0xfffded1c>
   1d790:	003f8706 	br	1d5b0 <__alt_data_end+0xfffdedb0>
   1d794:	dac04f17 	ldw	r11,316(sp)
   1d798:	5d800017 	ldw	r22,0(r11)
   1d79c:	5ac00104 	addi	r11,r11,4
   1d7a0:	dac04f15 	stw	r11,316(sp)
   1d7a4:	003f5c06 	br	1d518 <__alt_data_end+0xfffded18>
   1d7a8:	e00b883a 	mov	r5,fp
   1d7ac:	8809883a 	mov	r4,r17
   1d7b0:	001cc300 	call	1cc30 <__ssrefill_r>
   1d7b4:	103ed026 	beq	r2,zero,1d2f8 <__alt_data_end+0xfffdeaf8>
   1d7b8:	003fea06 	br	1d764 <__alt_data_end+0xfffdef64>
   1d7bc:	00ffff84 	movi	r3,-2
   1d7c0:	10c0071e 	bne	r2,r3,1d7e0 <__ssvfiscanf_r+0xa40>
   1d7c4:	e0800117 	ldw	r2,4(fp)
   1d7c8:	a021883a 	mov	r16,r20
   1d7cc:	00bf5316 	blt	zero,r2,1d51c <__alt_data_end+0xfffded1c>
   1d7d0:	003f7206 	br	1d59c <__alt_data_end+0xfffded9c>
   1d7d4:	9d27883a 	add	r19,r19,r20
   1d7d8:	bdffffc4 	addi	r23,r23,-1
   1d7dc:	003f6c06 	br	1d590 <__alt_data_end+0xfffded90>
   1d7e0:	dac05417 	ldw	r11,336(sp)
   1d7e4:	9d27883a 	add	r19,r19,r20
   1d7e8:	bdffffc4 	addi	r23,r23,-1
   1d7ec:	583f6726 	beq	r11,zero,1d58c <__alt_data_end+0xfffded8c>
   1d7f0:	003f6706 	br	1d590 <__alt_data_end+0xfffded90>
   1d7f4:	182d883a 	mov	r22,r3
   1d7f8:	003f9706 	br	1d658 <__alt_data_end+0xfffdee58>
   1d7fc:	a83f9d1e 	bne	r21,zero,1d674 <__alt_data_end+0xfffdee74>
   1d800:	003daa06 	br	1ceac <__alt_data_end+0xfffde6ac>
   1d804:	803ed41e 	bne	r16,zero,1d358 <__alt_data_end+0xfffdeb58>
   1d808:	003fd606 	br	1d764 <__alt_data_end+0xfffdef64>
   1d80c:	dac04f17 	ldw	r11,316(sp)
   1d810:	df000015 	stw	fp,0(sp)
   1d814:	b80f883a 	mov	r7,r23
   1d818:	59400017 	ldw	r5,0(r11)
   1d81c:	01800044 	movi	r6,1
   1d820:	8809883a 	mov	r4,r17
   1d824:	001cca00 	call	1cca0 <_sfread_r>
   1d828:	dac04f17 	ldw	r11,316(sp)
   1d82c:	58c00104 	addi	r3,r11,4
   1d830:	103fcc26 	beq	r2,zero,1d764 <__alt_data_end+0xfffdef64>
   1d834:	dac05117 	ldw	r11,324(sp)
   1d838:	a829883a 	mov	r20,r21
   1d83c:	98a7883a 	add	r19,r19,r2
   1d840:	5ac00044 	addi	r11,r11,1
   1d844:	dac05115 	stw	r11,324(sp)
   1d848:	d8c04f15 	stw	r3,316(sp)
   1d84c:	a00d883a 	mov	r6,r20
   1d850:	003d9206 	br	1ce9c <__alt_data_end+0xfffde69c>
   1d854:	e0800117 	ldw	r2,4(fp)
   1d858:	80e0b03a 	or	r16,r16,r3
   1d85c:	00be8d16 	blt	zero,r2,1d294 <__alt_data_end+0xfffdea94>
   1d860:	e00b883a 	mov	r5,fp
   1d864:	8809883a 	mov	r4,r17
   1d868:	001cc300 	call	1cc30 <__ssrefill_r>
   1d86c:	103fbd1e 	bne	r2,zero,1d764 <__alt_data_end+0xfffdef64>
   1d870:	95800017 	ldw	r22,0(r18)
   1d874:	003e8706 	br	1d294 <__alt_data_end+0xfffdea94>
   1d878:	e00b883a 	mov	r5,fp
   1d87c:	8809883a 	mov	r4,r17
   1d880:	001cc300 	call	1cc30 <__ssrefill_r>
   1d884:	103e1826 	beq	r2,zero,1d0e8 <__alt_data_end+0xfffde8e8>
   1d888:	003fb606 	br	1d764 <__alt_data_end+0xfffdef64>
   1d88c:	a1400083 	ldbu	r5,2(r20)
   1d890:	84000094 	ori	r16,r16,2
   1d894:	a5000084 	addi	r20,r20,2
   1d898:	2dc03fcc 	andi	r23,r5,255
   1d89c:	003d8e06 	br	1ced8 <__alt_data_end+0xfffde6d8>
   1d8a0:	8080004c 	andi	r2,r16,1
   1d8a4:	10000b1e 	bne	r2,zero,1d8d4 <__ssvfiscanf_r+0xb34>
   1d8a8:	8400008c 	andi	r16,r16,2
   1d8ac:	80000926 	beq	r16,zero,1d8d4 <__ssvfiscanf_r+0xb34>
   1d8b0:	dac04f17 	ldw	r11,316(sp)
   1d8b4:	9807d7fa 	srai	r3,r19,31
   1d8b8:	a829883a 	mov	r20,r21
   1d8bc:	58800017 	ldw	r2,0(r11)
   1d8c0:	5ac00104 	addi	r11,r11,4
   1d8c4:	dac04f15 	stw	r11,316(sp)
   1d8c8:	14c00015 	stw	r19,0(r2)
   1d8cc:	10c00115 	stw	r3,4(r2)
   1d8d0:	003d7106 	br	1ce98 <__alt_data_end+0xfffde698>
   1d8d4:	dac04f17 	ldw	r11,316(sp)
   1d8d8:	a829883a 	mov	r20,r21
   1d8dc:	58800017 	ldw	r2,0(r11)
   1d8e0:	5ac00104 	addi	r11,r11,4
   1d8e4:	dac04f15 	stw	r11,316(sp)
   1d8e8:	14c00015 	stw	r19,0(r2)
   1d8ec:	003d6a06 	br	1ce98 <__alt_data_end+0xfffde698>
   1d8f0:	e00b883a 	mov	r5,fp
   1d8f4:	8809883a 	mov	r4,r17
   1d8f8:	001cc300 	call	1cc30 <__ssrefill_r>
   1d8fc:	103f991e 	bne	r2,zero,1d764 <__alt_data_end+0xfffdef64>
   1d900:	95800017 	ldw	r22,0(r18)
   1d904:	05000084 	movi	r20,2
   1d908:	003e1906 	br	1d170 <__alt_data_end+0xfffde970>
   1d90c:	e00b883a 	mov	r5,fp
   1d910:	8809883a 	mov	r4,r17
   1d914:	001cc300 	call	1cc30 <__ssrefill_r>
   1d918:	103e9a26 	beq	r2,zero,1d384 <__alt_data_end+0xfffdeb84>
   1d91c:	003f9106 	br	1d764 <__alt_data_end+0xfffdef64>
   1d920:	e00b883a 	mov	r5,fp
   1d924:	8809883a 	mov	r4,r17
   1d928:	001cc300 	call	1cc30 <__ssrefill_r>
   1d92c:	103f8d1e 	bne	r2,zero,1d764 <__alt_data_end+0xfffdef64>
   1d930:	95800017 	ldw	r22,0(r18)
   1d934:	003e0806 	br	1d158 <__alt_data_end+0xfffde958>
   1d938:	e00b883a 	mov	r5,fp
   1d93c:	8809883a 	mov	r4,r17
   1d940:	001cc300 	call	1cc30 <__ssrefill_r>
   1d944:	103f871e 	bne	r2,zero,1d764 <__alt_data_end+0xfffdef64>
   1d948:	95800017 	ldw	r22,0(r18)
   1d94c:	003ee106 	br	1d4d4 <__alt_data_end+0xfffdecd4>
   1d950:	014000c4 	movi	r5,3
   1d954:	a140ae1e 	bne	r20,r5,1dc10 <__ssvfiscanf_r+0xe70>
   1d958:	b8ffffc4 	addi	r3,r23,-1
   1d95c:	01400984 	movi	r5,38
   1d960:	28c0d82e 	bgeu	r5,r3,1dcc4 <__ssvfiscanf_r+0xf24>
   1d964:	b9bff644 	addi	r6,r23,-39
   1d968:	05c009c4 	movi	r23,39
   1d96c:	85836014 	ori	r22,r16,3456
   1d970:	0021883a 	mov	r16,zero
   1d974:	a815883a 	mov	r10,r21
   1d978:	982b883a 	mov	r21,r19
   1d97c:	8027883a 	mov	r19,r16
   1d980:	dc005017 	ldw	r16,320(sp)
   1d984:	dd004104 	addi	r20,sp,260
   1d988:	02401344 	movi	r9,77
   1d98c:	01c08004 	movi	r7,512
   1d990:	00ff7fc4 	movi	r3,-513
   1d994:	023fdfc4 	movi	r8,-129
   1d998:	217ff544 	addi	r5,r4,-43
   1d99c:	29403fcc 	andi	r5,r5,255
   1d9a0:	49408836 	bltu	r9,r5,1dbc4 <__ssvfiscanf_r+0xe24>
   1d9a4:	280a90ba 	slli	r5,r5,2
   1d9a8:	02c000b4 	movhi	r11,2
   1d9ac:	5af66f04 	addi	r11,r11,-9796
   1d9b0:	2acb883a 	add	r5,r5,r11
   1d9b4:	29400017 	ldw	r5,0(r5)
   1d9b8:	2800683a 	jmp	r5
   1d9bc:	0001db50 	cmplti	zero,zero,1901
   1d9c0:	0001dbc4 	movi	zero,1903
   1d9c4:	0001db50 	cmplti	zero,zero,1901
   1d9c8:	0001dbc4 	movi	zero,1903
   1d9cc:	0001dbc4 	movi	zero,1903
   1d9d0:	0001db80 	call	1db8 <set_addrs_to_default+0xc78>
   1d9d4:	0001db60 	cmpeqi	zero,zero,1901
   1d9d8:	0001db60 	cmpeqi	zero,zero,1901
   1d9dc:	0001db60 	cmpeqi	zero,zero,1901
   1d9e0:	0001db60 	cmpeqi	zero,zero,1901
   1d9e4:	0001db60 	cmpeqi	zero,zero,1901
   1d9e8:	0001db60 	cmpeqi	zero,zero,1901
   1d9ec:	0001db60 	cmpeqi	zero,zero,1901
   1d9f0:	0001dba8 	cmpgeui	zero,zero,1902
   1d9f4:	0001dba8 	cmpgeui	zero,zero,1902
   1d9f8:	0001dbc4 	movi	zero,1903
   1d9fc:	0001dbc4 	movi	zero,1903
   1da00:	0001dbc4 	movi	zero,1903
   1da04:	0001dbc4 	movi	zero,1903
   1da08:	0001dbc4 	movi	zero,1903
   1da0c:	0001dbc4 	movi	zero,1903
   1da10:	0001dbc4 	movi	zero,1903
   1da14:	0001db3c 	xorhi	zero,zero,1900
   1da18:	0001db3c 	xorhi	zero,zero,1900
   1da1c:	0001db3c 	xorhi	zero,zero,1900
   1da20:	0001db3c 	xorhi	zero,zero,1900
   1da24:	0001db3c 	xorhi	zero,zero,1900
   1da28:	0001db3c 	xorhi	zero,zero,1900
   1da2c:	0001dbc4 	movi	zero,1903
   1da30:	0001dbc4 	movi	zero,1903
   1da34:	0001dbc4 	movi	zero,1903
   1da38:	0001dbc4 	movi	zero,1903
   1da3c:	0001dbc4 	movi	zero,1903
   1da40:	0001dbc4 	movi	zero,1903
   1da44:	0001dbc4 	movi	zero,1903
   1da48:	0001dbc4 	movi	zero,1903
   1da4c:	0001dbc4 	movi	zero,1903
   1da50:	0001dbc4 	movi	zero,1903
   1da54:	0001dbc4 	movi	zero,1903
   1da58:	0001dbc4 	movi	zero,1903
   1da5c:	0001dbc4 	movi	zero,1903
   1da60:	0001dbc4 	movi	zero,1903
   1da64:	0001dbc4 	movi	zero,1903
   1da68:	0001dbc4 	movi	zero,1903
   1da6c:	0001dbc4 	movi	zero,1903
   1da70:	0001daf4 	movhi	zero,1899
   1da74:	0001dbc4 	movi	zero,1903
   1da78:	0001dbc4 	movi	zero,1903
   1da7c:	0001dbc4 	movi	zero,1903
   1da80:	0001dbc4 	movi	zero,1903
   1da84:	0001dbc4 	movi	zero,1903
   1da88:	0001dbc4 	movi	zero,1903
   1da8c:	0001dbc4 	movi	zero,1903
   1da90:	0001dbc4 	movi	zero,1903
   1da94:	0001db3c 	xorhi	zero,zero,1900
   1da98:	0001db3c 	xorhi	zero,zero,1900
   1da9c:	0001db3c 	xorhi	zero,zero,1900
   1daa0:	0001db3c 	xorhi	zero,zero,1900
   1daa4:	0001db3c 	xorhi	zero,zero,1900
   1daa8:	0001db3c 	xorhi	zero,zero,1900
   1daac:	0001dbc4 	movi	zero,1903
   1dab0:	0001dbc4 	movi	zero,1903
   1dab4:	0001dbc4 	movi	zero,1903
   1dab8:	0001dbc4 	movi	zero,1903
   1dabc:	0001dbc4 	movi	zero,1903
   1dac0:	0001dbc4 	movi	zero,1903
   1dac4:	0001dbc4 	movi	zero,1903
   1dac8:	0001dbc4 	movi	zero,1903
   1dacc:	0001dbc4 	movi	zero,1903
   1dad0:	0001dbc4 	movi	zero,1903
   1dad4:	0001dbc4 	movi	zero,1903
   1dad8:	0001dbc4 	movi	zero,1903
   1dadc:	0001dbc4 	movi	zero,1903
   1dae0:	0001dbc4 	movi	zero,1903
   1dae4:	0001dbc4 	movi	zero,1903
   1dae8:	0001dbc4 	movi	zero,1903
   1daec:	0001dbc4 	movi	zero,1903
   1daf0:	0001daf4 	movhi	zero,1899
   1daf4:	b141800c 	andi	r5,r22,1536
   1daf8:	29c0321e 	bne	r5,r7,1dbc4 <__ssvfiscanf_r+0xe24>
   1dafc:	b0ec703a 	and	r22,r22,r3
   1db00:	b5814014 	ori	r22,r22,1280
   1db04:	04000404 	movi	r16,16
   1db08:	a1000005 	stb	r4,0(r20)
   1db0c:	a5000044 	addi	r20,r20,1
   1db10:	e1000117 	ldw	r4,4(fp)
   1db14:	213fffc4 	addi	r4,r4,-1
   1db18:	e1000115 	stw	r4,4(fp)
   1db1c:	0100580e 	bge	zero,r4,1dc80 <__ssvfiscanf_r+0xee0>
   1db20:	10800044 	addi	r2,r2,1
   1db24:	e0800015 	stw	r2,0(fp)
   1db28:	bdffffc4 	addi	r23,r23,-1
   1db2c:	b8002526 	beq	r23,zero,1dbc4 <__ssvfiscanf_r+0xe24>
   1db30:	e0800017 	ldw	r2,0(fp)
   1db34:	11000003 	ldbu	r4,0(r2)
   1db38:	003f9706 	br	1d998 <__alt_data_end+0xfffdf198>
   1db3c:	01400284 	movi	r5,10
   1db40:	2c00200e 	bge	r5,r16,1dbc4 <__ssvfiscanf_r+0xe24>
   1db44:	017d1fc4 	movi	r5,-2945
   1db48:	b16c703a 	and	r22,r22,r5
   1db4c:	003fee06 	br	1db08 <__alt_data_end+0xfffdf308>
   1db50:	b140200c 	andi	r5,r22,128
   1db54:	28001b26 	beq	r5,zero,1dbc4 <__ssvfiscanf_r+0xe24>
   1db58:	b22c703a 	and	r22,r22,r8
   1db5c:	003fea06 	br	1db08 <__alt_data_end+0xfffdf308>
   1db60:	02c000f4 	movhi	r11,3
   1db64:	8421883a 	add	r16,r16,r16
   1db68:	5ae5d404 	addi	r11,r11,-26800
   1db6c:	5c0b883a 	add	r5,r11,r16
   1db70:	2c00000f 	ldh	r16,0(r5)
   1db74:	017d1fc4 	movi	r5,-2945
   1db78:	b16c703a 	and	r22,r22,r5
   1db7c:	003fe206 	br	1db08 <__alt_data_end+0xfffdf308>
   1db80:	b142000c 	andi	r5,r22,2048
   1db84:	283fe026 	beq	r5,zero,1db08 <__alt_data_end+0xfffdf308>
   1db88:	8000021e 	bne	r16,zero,1db94 <__ssvfiscanf_r+0xdf4>
   1db8c:	b5808014 	ori	r22,r22,512
   1db90:	04000204 	movi	r16,8
   1db94:	b141000c 	andi	r5,r22,1024
   1db98:	28009f26 	beq	r5,zero,1de18 <__ssvfiscanf_r+0x1078>
   1db9c:	017e9fc4 	movi	r5,-1409
   1dba0:	b16c703a 	and	r22,r22,r5
   1dba4:	003fd806 	br	1db08 <__alt_data_end+0xfffdf308>
   1dba8:	02c000f4 	movhi	r11,3
   1dbac:	8421883a 	add	r16,r16,r16
   1dbb0:	5ae5d404 	addi	r11,r11,-26800
   1dbb4:	5c0b883a 	add	r5,r11,r16
   1dbb8:	2c00000f 	ldh	r16,0(r5)
   1dbbc:	01400204 	movi	r5,8
   1dbc0:	2c3fe016 	blt	r5,r16,1db44 <__alt_data_end+0xfffdf344>
   1dbc4:	dc005015 	stw	r16,320(sp)
   1dbc8:	b080400c 	andi	r2,r22,256
   1dbcc:	9821883a 	mov	r16,r19
   1dbd0:	a827883a 	mov	r19,r21
   1dbd4:	502b883a 	mov	r21,r10
   1dbd8:	10000426 	beq	r2,zero,1dbec <__ssvfiscanf_r+0xe4c>
   1dbdc:	dac04e17 	ldw	r11,312(sp)
   1dbe0:	5d009c36 	bltu	r11,r20,1de54 <__ssvfiscanf_r+0x10b4>
   1dbe4:	dac04e17 	ldw	r11,312(sp)
   1dbe8:	a2fcb026 	beq	r20,r11,1ceac <__alt_data_end+0xfffde6ac>
   1dbec:	b080040c 	andi	r2,r22,16
   1dbf0:	10006026 	beq	r2,zero,1dd74 <__ssvfiscanf_r+0xfd4>
   1dbf4:	dac04e17 	ldw	r11,312(sp)
   1dbf8:	a2e9c83a 	sub	r20,r20,r11
   1dbfc:	a429883a 	add	r20,r20,r16
   1dc00:	9d27883a 	add	r19,r19,r20
   1dc04:	a829883a 	mov	r20,r21
   1dc08:	a00d883a 	mov	r6,r20
   1dc0c:	003ca306 	br	1ce9c <__alt_data_end+0xfffde69c>
   1dc10:	b800011e 	bne	r23,zero,1dc18 <__ssvfiscanf_r+0xe78>
   1dc14:	05ffffc4 	movi	r23,-1
   1dc18:	8100004c 	andi	r4,r16,1
   1dc1c:	203e981e 	bne	r4,zero,1d680 <__alt_data_end+0xfffdee80>
   1dc20:	8400040c 	andi	r16,r16,16
   1dc24:	80002926 	beq	r16,zero,1dccc <__ssvfiscanf_r+0xf2c>
   1dc28:	0021883a 	mov	r16,zero
   1dc2c:	00000306 	br	1dc3c <__ssvfiscanf_r+0xe9c>
   1dc30:	10c00003 	ldbu	r3,0(r2)
   1dc34:	b0c7883a 	add	r3,r22,r3
   1dc38:	18c00043 	ldbu	r3,1(r3)
   1dc3c:	18c0020c 	andi	r3,r3,8
   1dc40:	183dc51e 	bne	r3,zero,1d358 <__alt_data_end+0xfffdeb58>
   1dc44:	e0c00117 	ldw	r3,4(fp)
   1dc48:	10800044 	addi	r2,r2,1
   1dc4c:	84000044 	addi	r16,r16,1
   1dc50:	18ffffc4 	addi	r3,r3,-1
   1dc54:	e0c00115 	stw	r3,4(fp)
   1dc58:	e0800015 	stw	r2,0(fp)
   1dc5c:	85fdbe26 	beq	r16,r23,1d358 <__alt_data_end+0xfffdeb58>
   1dc60:	00fff316 	blt	zero,r3,1dc30 <__alt_data_end+0xfffdf430>
   1dc64:	e00b883a 	mov	r5,fp
   1dc68:	8809883a 	mov	r4,r17
   1dc6c:	001cc300 	call	1cc30 <__ssrefill_r>
   1dc70:	103db91e 	bne	r2,zero,1d358 <__alt_data_end+0xfffdeb58>
   1dc74:	95800017 	ldw	r22,0(r18)
   1dc78:	e0800017 	ldw	r2,0(fp)
   1dc7c:	003fec06 	br	1dc30 <__alt_data_end+0xfffdf430>
   1dc80:	e00b883a 	mov	r5,fp
   1dc84:	8809883a 	mov	r4,r17
   1dc88:	d8c05a15 	stw	r3,360(sp)
   1dc8c:	d9805715 	stw	r6,348(sp)
   1dc90:	d9c05915 	stw	r7,356(sp)
   1dc94:	da005615 	stw	r8,344(sp)
   1dc98:	da405515 	stw	r9,340(sp)
   1dc9c:	da805815 	stw	r10,352(sp)
   1dca0:	001cc300 	call	1cc30 <__ssrefill_r>
   1dca4:	d8c05a17 	ldw	r3,360(sp)
   1dca8:	d9805717 	ldw	r6,348(sp)
   1dcac:	d9c05917 	ldw	r7,356(sp)
   1dcb0:	da005617 	ldw	r8,344(sp)
   1dcb4:	da405517 	ldw	r9,340(sp)
   1dcb8:	da805817 	ldw	r10,352(sp)
   1dcbc:	103f9a26 	beq	r2,zero,1db28 <__alt_data_end+0xfffdf328>
   1dcc0:	003fc006 	br	1dbc4 <__alt_data_end+0xfffdf3c4>
   1dcc4:	000d883a 	mov	r6,zero
   1dcc8:	003f2806 	br	1d96c <__alt_data_end+0xfffdf16c>
   1dccc:	dac04f17 	ldw	r11,316(sp)
   1dcd0:	babfffc4 	addi	r10,r23,-1
   1dcd4:	5d000017 	ldw	r20,0(r11)
   1dcd8:	5c000104 	addi	r16,r11,4
   1dcdc:	a00b883a 	mov	r5,r20
   1dce0:	a2ad883a 	add	r22,r20,r10
   1dce4:	00000606 	br	1dd00 <__ssvfiscanf_r+0xf60>
   1dce8:	e0800017 	ldw	r2,0(fp)
   1dcec:	91000017 	ldw	r4,0(r18)
   1dcf0:	b80b883a 	mov	r5,r23
   1dcf4:	10c00003 	ldbu	r3,0(r2)
   1dcf8:	20c7883a 	add	r3,r4,r3
   1dcfc:	18c00043 	ldbu	r3,1(r3)
   1dd00:	18c0020c 	andi	r3,r3,8
   1dd04:	2809883a 	mov	r4,r5
   1dd08:	1800101e 	bne	r3,zero,1dd4c <__ssvfiscanf_r+0xfac>
   1dd0c:	e0c00117 	ldw	r3,4(fp)
   1dd10:	11800044 	addi	r6,r2,1
   1dd14:	e1800015 	stw	r6,0(fp)
   1dd18:	18ffffc4 	addi	r3,r3,-1
   1dd1c:	e0c00115 	stw	r3,4(fp)
   1dd20:	10800003 	ldbu	r2,0(r2)
   1dd24:	25c00044 	addi	r23,r4,1
   1dd28:	28800005 	stb	r2,0(r5)
   1dd2c:	25800626 	beq	r4,r22,1dd48 <__ssvfiscanf_r+0xfa8>
   1dd30:	e0800117 	ldw	r2,4(fp)
   1dd34:	00bfec16 	blt	zero,r2,1dce8 <__alt_data_end+0xfffdf4e8>
   1dd38:	e00b883a 	mov	r5,fp
   1dd3c:	8809883a 	mov	r4,r17
   1dd40:	001cc300 	call	1cc30 <__ssrefill_r>
   1dd44:	103fe826 	beq	r2,zero,1dce8 <__alt_data_end+0xfffdf4e8>
   1dd48:	b809883a 	mov	r4,r23
   1dd4c:	dac05117 	ldw	r11,324(sp)
   1dd50:	2529c83a 	sub	r20,r4,r20
   1dd54:	9d27883a 	add	r19,r19,r20
   1dd58:	5ac00044 	addi	r11,r11,1
   1dd5c:	a829883a 	mov	r20,r21
   1dd60:	20000005 	stb	zero,0(r4)
   1dd64:	dac05115 	stw	r11,324(sp)
   1dd68:	dc004f15 	stw	r16,316(sp)
   1dd6c:	a00d883a 	mov	r6,r20
   1dd70:	003c4a06 	br	1ce9c <__alt_data_end+0xfffde69c>
   1dd74:	d9c05017 	ldw	r7,320(sp)
   1dd78:	dac05217 	ldw	r11,328(sp)
   1dd7c:	000d883a 	mov	r6,zero
   1dd80:	d9404104 	addi	r5,sp,260
   1dd84:	8809883a 	mov	r4,r17
   1dd88:	a0000005 	stb	zero,0(r20)
   1dd8c:	583ee83a 	callr	r11
   1dd90:	b0c0080c 	andi	r3,r22,32
   1dd94:	1800271e 	bne	r3,zero,1de34 <__ssvfiscanf_r+0x1094>
   1dd98:	b0c0010c 	andi	r3,r22,4
   1dd9c:	18003326 	beq	r3,zero,1de6c <__ssvfiscanf_r+0x10cc>
   1dda0:	dac04f17 	ldw	r11,316(sp)
   1dda4:	58c00017 	ldw	r3,0(r11)
   1dda8:	5ac00104 	addi	r11,r11,4
   1ddac:	dac04f15 	stw	r11,316(sp)
   1ddb0:	1880000d 	sth	r2,0(r3)
   1ddb4:	dac05117 	ldw	r11,324(sp)
   1ddb8:	5ac00044 	addi	r11,r11,1
   1ddbc:	dac05115 	stw	r11,324(sp)
   1ddc0:	003f8c06 	br	1dbf4 <__alt_data_end+0xfffdf3f4>
   1ddc4:	b0000015 	stw	zero,0(r22)
   1ddc8:	0009883a 	mov	r4,zero
   1ddcc:	d8c05a15 	stw	r3,360(sp)
   1ddd0:	00190f00 	call	190f0 <iswspace>
   1ddd4:	d8c05a17 	ldw	r3,360(sp)
   1ddd8:	10003826 	beq	r2,zero,1debc <__ssvfiscanf_r+0x111c>
   1dddc:	18000b26 	beq	r3,zero,1de0c <__ssvfiscanf_r+0x106c>
   1dde0:	1d3fffc4 	addi	r20,r3,-1
   1dde4:	dac04104 	addi	r11,sp,260
   1dde8:	5d2f883a 	add	r23,r11,r20
   1ddec:	00000106 	br	1ddf4 <__ssvfiscanf_r+0x1054>
   1ddf0:	a53fffc4 	addi	r20,r20,-1
   1ddf4:	b9400003 	ldbu	r5,0(r23)
   1ddf8:	e00d883a 	mov	r6,fp
   1ddfc:	8809883a 	mov	r4,r17
   1de00:	001cb280 	call	1cb28 <_sungetc_r>
   1de04:	bdffffc4 	addi	r23,r23,-1
   1de08:	a03ff91e 	bne	r20,zero,1ddf0 <__alt_data_end+0xfffdf5f0>
   1de0c:	803ded1e 	bne	r16,zero,1d5c4 <__alt_data_end+0xfffdedc4>
   1de10:	b0000015 	stw	zero,0(r22)
   1de14:	003de806 	br	1d5b8 <__alt_data_end+0xfffdedb8>
   1de18:	013f1fc4 	movi	r4,-897
   1de1c:	b12c703a 	and	r22,r22,r4
   1de20:	30000226 	beq	r6,zero,1de2c <__ssvfiscanf_r+0x108c>
   1de24:	31bfffc4 	addi	r6,r6,-1
   1de28:	bdc00044 	addi	r23,r23,1
   1de2c:	9cc00044 	addi	r19,r19,1
   1de30:	003f3706 	br	1db10 <__alt_data_end+0xfffdf310>
   1de34:	dac04f17 	ldw	r11,316(sp)
   1de38:	58c00017 	ldw	r3,0(r11)
   1de3c:	5ac00104 	addi	r11,r11,4
   1de40:	dac04f15 	stw	r11,316(sp)
   1de44:	18800015 	stw	r2,0(r3)
   1de48:	003fda06 	br	1ddb4 <__alt_data_end+0xfffdf5b4>
   1de4c:	dd804d04 	addi	r22,sp,308
   1de50:	003e1706 	br	1d6b0 <__alt_data_end+0xfffdeeb0>
   1de54:	a17fffc7 	ldb	r5,-1(r20)
   1de58:	e00d883a 	mov	r6,fp
   1de5c:	8809883a 	mov	r4,r17
   1de60:	a53fffc4 	addi	r20,r20,-1
   1de64:	001cb280 	call	1cb28 <_sungetc_r>
   1de68:	003f5e06 	br	1dbe4 <__alt_data_end+0xfffdf3e4>
   1de6c:	b0c0004c 	andi	r3,r22,1
   1de70:	183ff01e 	bne	r3,zero,1de34 <__alt_data_end+0xfffdf634>
   1de74:	b580008c 	andi	r22,r22,2
   1de78:	b03fee26 	beq	r22,zero,1de34 <__alt_data_end+0xfffdf634>
   1de7c:	dac05217 	ldw	r11,328(sp)
   1de80:	008000b4 	movhi	r2,2
   1de84:	10b15d04 	addi	r2,r2,-14988
   1de88:	d9c05017 	ldw	r7,320(sp)
   1de8c:	000d883a 	mov	r6,zero
   1de90:	d9404104 	addi	r5,sp,260
   1de94:	8809883a 	mov	r4,r17
   1de98:	58801226 	beq	r11,r2,1dee4 <__ssvfiscanf_r+0x1144>
   1de9c:	001c2700 	call	1c270 <_strtoll_r>
   1dea0:	dac04f17 	ldw	r11,316(sp)
   1dea4:	59000017 	ldw	r4,0(r11)
   1dea8:	5ac00104 	addi	r11,r11,4
   1deac:	dac04f15 	stw	r11,316(sp)
   1deb0:	20800015 	stw	r2,0(r4)
   1deb4:	20c00115 	stw	r3,4(r4)
   1deb8:	003fbe06 	br	1ddb4 <__alt_data_end+0xfffdf5b4>
   1debc:	98e7883a 	add	r19,r19,r3
   1dec0:	bdffffc4 	addi	r23,r23,-1
   1dec4:	8000031e 	bne	r16,zero,1ded4 <__ssvfiscanf_r+0x1134>
   1dec8:	b5800104 	addi	r22,r22,4
   1decc:	0029883a 	mov	r20,zero
   1ded0:	003e1d06 	br	1d748 <__alt_data_end+0xfffdef48>
   1ded4:	0029883a 	mov	r20,zero
   1ded8:	003e1b06 	br	1d748 <__alt_data_end+0xfffdef48>
   1dedc:	b1000017 	ldw	r4,0(r22)
   1dee0:	003fba06 	br	1ddcc <__alt_data_end+0xfffdf5cc>
   1dee4:	001c8080 	call	1c808 <_strtoull_r>
   1dee8:	003fed06 	br	1dea0 <__alt_data_end+0xfffdf6a0>

0001deec <___svfprintf_internal_r>:
   1deec:	deffb704 	addi	sp,sp,-292
   1def0:	dfc04815 	stw	ra,288(sp)
   1def4:	ddc04615 	stw	r23,280(sp)
   1def8:	d9402d15 	stw	r5,180(sp)
   1defc:	d9003915 	stw	r4,228(sp)
   1df00:	302f883a 	mov	r23,r6
   1df04:	d9c02e15 	stw	r7,184(sp)
   1df08:	df004715 	stw	fp,284(sp)
   1df0c:	dd804515 	stw	r22,276(sp)
   1df10:	dd404415 	stw	r21,272(sp)
   1df14:	dd004315 	stw	r20,268(sp)
   1df18:	dcc04215 	stw	r19,264(sp)
   1df1c:	dc804115 	stw	r18,260(sp)
   1df20:	dc404015 	stw	r17,256(sp)
   1df24:	dc003f15 	stw	r16,252(sp)
   1df28:	00191cc0 	call	191cc <_localeconv_r>
   1df2c:	10800017 	ldw	r2,0(r2)
   1df30:	1009883a 	mov	r4,r2
   1df34:	d8803415 	stw	r2,208(sp)
   1df38:	00137600 	call	13760 <strlen>
   1df3c:	d8c02d17 	ldw	r3,180(sp)
   1df40:	d8803815 	stw	r2,224(sp)
   1df44:	1880030b 	ldhu	r2,12(r3)
   1df48:	1080200c 	andi	r2,r2,128
   1df4c:	10000226 	beq	r2,zero,1df58 <___svfprintf_internal_r+0x6c>
   1df50:	18800417 	ldw	r2,16(r3)
   1df54:	1006b126 	beq	r2,zero,1fa1c <___svfprintf_internal_r+0x1b30>
   1df58:	dcc03917 	ldw	r19,228(sp)
   1df5c:	d8c00404 	addi	r3,sp,16
   1df60:	054000f4 	movhi	r21,3
   1df64:	d9001e04 	addi	r4,sp,120
   1df68:	ad65dc84 	addi	r21,r21,-26766
   1df6c:	d8c01e15 	stw	r3,120(sp)
   1df70:	d8002015 	stw	zero,128(sp)
   1df74:	d8001f15 	stw	zero,124(sp)
   1df78:	d8003315 	stw	zero,204(sp)
   1df7c:	d8003615 	stw	zero,216(sp)
   1df80:	d8003715 	stw	zero,220(sp)
   1df84:	1811883a 	mov	r8,r3
   1df88:	d8003a15 	stw	zero,232(sp)
   1df8c:	d8003b15 	stw	zero,236(sp)
   1df90:	d8002f15 	stw	zero,188(sp)
   1df94:	d9002815 	stw	r4,160(sp)
   1df98:	b8800007 	ldb	r2,0(r23)
   1df9c:	10027726 	beq	r2,zero,1e97c <___svfprintf_internal_r+0xa90>
   1dfa0:	00c00944 	movi	r3,37
   1dfa4:	b823883a 	mov	r17,r23
   1dfa8:	10c0021e 	bne	r2,r3,1dfb4 <___svfprintf_internal_r+0xc8>
   1dfac:	00001406 	br	1e000 <___svfprintf_internal_r+0x114>
   1dfb0:	10c00326 	beq	r2,r3,1dfc0 <___svfprintf_internal_r+0xd4>
   1dfb4:	8c400044 	addi	r17,r17,1
   1dfb8:	88800007 	ldb	r2,0(r17)
   1dfbc:	103ffc1e 	bne	r2,zero,1dfb0 <__alt_data_end+0xfffdf7b0>
   1dfc0:	8de1c83a 	sub	r16,r17,r23
   1dfc4:	80000e26 	beq	r16,zero,1e000 <___svfprintf_internal_r+0x114>
   1dfc8:	d8c02017 	ldw	r3,128(sp)
   1dfcc:	d8801f17 	ldw	r2,124(sp)
   1dfd0:	45c00015 	stw	r23,0(r8)
   1dfd4:	1c07883a 	add	r3,r3,r16
   1dfd8:	10800044 	addi	r2,r2,1
   1dfdc:	d8c02015 	stw	r3,128(sp)
   1dfe0:	44000115 	stw	r16,4(r8)
   1dfe4:	d8801f15 	stw	r2,124(sp)
   1dfe8:	00c001c4 	movi	r3,7
   1dfec:	18809916 	blt	r3,r2,1e254 <___svfprintf_internal_r+0x368>
   1dff0:	42000204 	addi	r8,r8,8
   1dff4:	d9402f17 	ldw	r5,188(sp)
   1dff8:	2c0b883a 	add	r5,r5,r16
   1dffc:	d9402f15 	stw	r5,188(sp)
   1e000:	88800007 	ldb	r2,0(r17)
   1e004:	10009a26 	beq	r2,zero,1e270 <___svfprintf_internal_r+0x384>
   1e008:	8dc00044 	addi	r23,r17,1
   1e00c:	8c400047 	ldb	r17,1(r17)
   1e010:	0021883a 	mov	r16,zero
   1e014:	00bfffc4 	movi	r2,-1
   1e018:	0025883a 	mov	r18,zero
   1e01c:	dc002905 	stb	r16,164(sp)
   1e020:	d8002785 	stb	zero,158(sp)
   1e024:	d8002b05 	stb	zero,172(sp)
   1e028:	d8802a15 	stw	r2,168(sp)
   1e02c:	d8003115 	stw	zero,196(sp)
   1e030:	05001604 	movi	r20,88
   1e034:	05800244 	movi	r22,9
   1e038:	4039883a 	mov	fp,r8
   1e03c:	9021883a 	mov	r16,r18
   1e040:	bdc00044 	addi	r23,r23,1
   1e044:	88bff804 	addi	r2,r17,-32
   1e048:	a0831e36 	bltu	r20,r2,1ecc4 <___svfprintf_internal_r+0xdd8>
   1e04c:	100490ba 	slli	r2,r2,2
   1e050:	00c000b4 	movhi	r3,2
   1e054:	18f81904 	addi	r3,r3,-8092
   1e058:	10c5883a 	add	r2,r2,r3
   1e05c:	10800017 	ldw	r2,0(r2)
   1e060:	1000683a 	jmp	r2
   1e064:	0001ec0c 	andi	zero,zero,1968
   1e068:	0001ecc4 	movi	zero,1971
   1e06c:	0001ecc4 	movi	zero,1971
   1e070:	0001ec00 	call	1ec0 <set_addrs_to_default+0xd80>
   1e074:	0001ecc4 	movi	zero,1971
   1e078:	0001ecc4 	movi	zero,1971
   1e07c:	0001ecc4 	movi	zero,1971
   1e080:	0001ecc4 	movi	zero,1971
   1e084:	0001ecc4 	movi	zero,1971
   1e088:	0001ecc4 	movi	zero,1971
   1e08c:	0001e2cc 	andi	zero,zero,1931
   1e090:	0001eb10 	cmplti	zero,zero,1964
   1e094:	0001ecc4 	movi	zero,1971
   1e098:	0001e1d8 	cmpnei	zero,zero,1927
   1e09c:	0001e2f0 	cmpltui	zero,zero,1931
   1e0a0:	0001ecc4 	movi	zero,1971
   1e0a4:	0001e37c 	xorhi	zero,zero,1933
   1e0a8:	0001e340 	call	1e34 <set_addrs_to_default+0xcf4>
   1e0ac:	0001e340 	call	1e34 <set_addrs_to_default+0xcf4>
   1e0b0:	0001e340 	call	1e34 <set_addrs_to_default+0xcf4>
   1e0b4:	0001e340 	call	1e34 <set_addrs_to_default+0xcf4>
   1e0b8:	0001e340 	call	1e34 <set_addrs_to_default+0xcf4>
   1e0bc:	0001e340 	call	1e34 <set_addrs_to_default+0xcf4>
   1e0c0:	0001e340 	call	1e34 <set_addrs_to_default+0xcf4>
   1e0c4:	0001e340 	call	1e34 <set_addrs_to_default+0xcf4>
   1e0c8:	0001e340 	call	1e34 <set_addrs_to_default+0xcf4>
   1e0cc:	0001ecc4 	movi	zero,1971
   1e0d0:	0001ecc4 	movi	zero,1971
   1e0d4:	0001ecc4 	movi	zero,1971
   1e0d8:	0001ecc4 	movi	zero,1971
   1e0dc:	0001ecc4 	movi	zero,1971
   1e0e0:	0001ecc4 	movi	zero,1971
   1e0e4:	0001ecc4 	movi	zero,1971
   1e0e8:	0001ecc4 	movi	zero,1971
   1e0ec:	0001ecc4 	movi	zero,1971
   1e0f0:	0001ecc4 	movi	zero,1971
   1e0f4:	0001e440 	call	1e44 <set_addrs_to_default+0xd04>
   1e0f8:	0001e388 	cmpgei	zero,zero,1934
   1e0fc:	0001ecc4 	movi	zero,1971
   1e100:	0001e388 	cmpgei	zero,zero,1934
   1e104:	0001ecc4 	movi	zero,1971
   1e108:	0001ecc4 	movi	zero,1971
   1e10c:	0001ecc4 	movi	zero,1971
   1e110:	0001ecc4 	movi	zero,1971
   1e114:	0001e434 	movhi	zero,1936
   1e118:	0001ecc4 	movi	zero,1971
   1e11c:	0001ecc4 	movi	zero,1971
   1e120:	0001e508 	cmpgei	zero,zero,1940
   1e124:	0001ecc4 	movi	zero,1971
   1e128:	0001ecc4 	movi	zero,1971
   1e12c:	0001ecc4 	movi	zero,1971
   1e130:	0001ecc4 	movi	zero,1971
   1e134:	0001ecc4 	movi	zero,1971
   1e138:	0001e984 	movi	zero,1958
   1e13c:	0001ecc4 	movi	zero,1971
   1e140:	0001ecc4 	movi	zero,1971
   1e144:	0001e9f0 	cmpltui	zero,zero,1959
   1e148:	0001ecc4 	movi	zero,1971
   1e14c:	0001ecc4 	movi	zero,1971
   1e150:	0001ecc4 	movi	zero,1971
   1e154:	0001ecc4 	movi	zero,1971
   1e158:	0001ecc4 	movi	zero,1971
   1e15c:	0001ecc4 	movi	zero,1971
   1e160:	0001ecc4 	movi	zero,1971
   1e164:	0001ecc4 	movi	zero,1971
   1e168:	0001ecc4 	movi	zero,1971
   1e16c:	0001ecc4 	movi	zero,1971
   1e170:	0001eaac 	andhi	zero,zero,1962
   1e174:	0001ec2c 	andhi	zero,zero,1968
   1e178:	0001e388 	cmpgei	zero,zero,1934
   1e17c:	0001e388 	cmpgei	zero,zero,1934
   1e180:	0001e388 	cmpgei	zero,zero,1934
   1e184:	0001eca0 	cmpeqi	zero,zero,1970
   1e188:	0001ec2c 	andhi	zero,zero,1968
   1e18c:	0001ecc4 	movi	zero,1971
   1e190:	0001ecc4 	movi	zero,1971
   1e194:	0001ec4c 	andi	zero,zero,1969
   1e198:	0001ecc4 	movi	zero,1971
   1e19c:	0001ec60 	cmpeqi	zero,zero,1969
   1e1a0:	0001eaf0 	cmpltui	zero,zero,1963
   1e1a4:	0001e1e4 	muli	zero,zero,1927
   1e1a8:	0001eb28 	cmpgeui	zero,zero,1964
   1e1ac:	0001ecc4 	movi	zero,1971
   1e1b0:	0001eb34 	movhi	zero,1964
   1e1b4:	0001ecc4 	movi	zero,1971
   1e1b8:	0001eb98 	cmpnei	zero,zero,1966
   1e1bc:	0001ecc4 	movi	zero,1971
   1e1c0:	0001ecc4 	movi	zero,1971
   1e1c4:	0001ebb8 	rdprs	zero,zero,1966
   1e1c8:	d8c03117 	ldw	r3,196(sp)
   1e1cc:	d8802e15 	stw	r2,184(sp)
   1e1d0:	00c7c83a 	sub	r3,zero,r3
   1e1d4:	d8c03115 	stw	r3,196(sp)
   1e1d8:	84000114 	ori	r16,r16,4
   1e1dc:	bc400007 	ldb	r17,0(r23)
   1e1e0:	003f9706 	br	1e040 <__alt_data_end+0xfffdf840>
   1e1e4:	00800c04 	movi	r2,48
   1e1e8:	d8802705 	stb	r2,156(sp)
   1e1ec:	00801e04 	movi	r2,120
   1e1f0:	d8802745 	stb	r2,157(sp)
   1e1f4:	d9002a17 	ldw	r4,168(sp)
   1e1f8:	d8802e17 	ldw	r2,184(sp)
   1e1fc:	d8002785 	stb	zero,158(sp)
   1e200:	e011883a 	mov	r8,fp
   1e204:	10c00104 	addi	r3,r2,4
   1e208:	15000017 	ldw	r20,0(r2)
   1e20c:	002d883a 	mov	r22,zero
   1e210:	80800094 	ori	r2,r16,2
   1e214:	2002b616 	blt	r4,zero,1ecf0 <___svfprintf_internal_r+0xe04>
   1e218:	00bfdfc4 	movi	r2,-129
   1e21c:	80a4703a 	and	r18,r16,r2
   1e220:	d8c02e15 	stw	r3,184(sp)
   1e224:	94800094 	ori	r18,r18,2
   1e228:	a002a01e 	bne	r20,zero,1ecac <___svfprintf_internal_r+0xdc0>
   1e22c:	014000f4 	movhi	r5,3
   1e230:	2964bc04 	addi	r5,r5,-27920
   1e234:	d9403a15 	stw	r5,232(sp)
   1e238:	04401e04 	movi	r17,120
   1e23c:	d8c02a17 	ldw	r3,168(sp)
   1e240:	0039883a 	mov	fp,zero
   1e244:	1801e626 	beq	r3,zero,1e9e0 <___svfprintf_internal_r+0xaf4>
   1e248:	0029883a 	mov	r20,zero
   1e24c:	002d883a 	mov	r22,zero
   1e250:	00020506 	br	1ea68 <___svfprintf_internal_r+0xb7c>
   1e254:	d9402d17 	ldw	r5,180(sp)
   1e258:	d9801e04 	addi	r6,sp,120
   1e25c:	9809883a 	mov	r4,r19
   1e260:	0022bd80 	call	22bd8 <__ssprint_r>
   1e264:	1000081e 	bne	r2,zero,1e288 <___svfprintf_internal_r+0x39c>
   1e268:	da000404 	addi	r8,sp,16
   1e26c:	003f6106 	br	1dff4 <__alt_data_end+0xfffdf7f4>
   1e270:	d8802017 	ldw	r2,128(sp)
   1e274:	10000426 	beq	r2,zero,1e288 <___svfprintf_internal_r+0x39c>
   1e278:	d9402d17 	ldw	r5,180(sp)
   1e27c:	d9003917 	ldw	r4,228(sp)
   1e280:	d9801e04 	addi	r6,sp,120
   1e284:	0022bd80 	call	22bd8 <__ssprint_r>
   1e288:	d8802d17 	ldw	r2,180(sp)
   1e28c:	10c0030b 	ldhu	r3,12(r2)
   1e290:	d8802f17 	ldw	r2,188(sp)
   1e294:	18c0100c 	andi	r3,r3,64
   1e298:	1806251e 	bne	r3,zero,1fb30 <___svfprintf_internal_r+0x1c44>
   1e29c:	dfc04817 	ldw	ra,288(sp)
   1e2a0:	df004717 	ldw	fp,284(sp)
   1e2a4:	ddc04617 	ldw	r23,280(sp)
   1e2a8:	dd804517 	ldw	r22,276(sp)
   1e2ac:	dd404417 	ldw	r21,272(sp)
   1e2b0:	dd004317 	ldw	r20,268(sp)
   1e2b4:	dcc04217 	ldw	r19,264(sp)
   1e2b8:	dc804117 	ldw	r18,260(sp)
   1e2bc:	dc404017 	ldw	r17,256(sp)
   1e2c0:	dc003f17 	ldw	r16,252(sp)
   1e2c4:	dec04904 	addi	sp,sp,292
   1e2c8:	f800283a 	ret
   1e2cc:	d9002e17 	ldw	r4,184(sp)
   1e2d0:	d9402e17 	ldw	r5,184(sp)
   1e2d4:	21000017 	ldw	r4,0(r4)
   1e2d8:	28800104 	addi	r2,r5,4
   1e2dc:	d9003115 	stw	r4,196(sp)
   1e2e0:	203fb916 	blt	r4,zero,1e1c8 <__alt_data_end+0xfffdf9c8>
   1e2e4:	d8802e15 	stw	r2,184(sp)
   1e2e8:	bc400007 	ldb	r17,0(r23)
   1e2ec:	003f5406 	br	1e040 <__alt_data_end+0xfffdf840>
   1e2f0:	bc400007 	ldb	r17,0(r23)
   1e2f4:	01000a84 	movi	r4,42
   1e2f8:	b8c00044 	addi	r3,r23,1
   1e2fc:	89076926 	beq	r17,r4,200a4 <___svfprintf_internal_r+0x21b8>
   1e300:	8cbff404 	addi	r18,r17,-48
   1e304:	b486b936 	bltu	r22,r18,1fdec <___svfprintf_internal_r+0x1f00>
   1e308:	0009883a 	mov	r4,zero
   1e30c:	1823883a 	mov	r17,r3
   1e310:	01400284 	movi	r5,10
   1e314:	002587c0 	call	2587c <__mulsi3>
   1e318:	88c00007 	ldb	r3,0(r17)
   1e31c:	1489883a 	add	r4,r2,r18
   1e320:	8dc00044 	addi	r23,r17,1
   1e324:	1cbff404 	addi	r18,r3,-48
   1e328:	b823883a 	mov	r17,r23
   1e32c:	b4bff82e 	bgeu	r22,r18,1e310 <__alt_data_end+0xfffdfb10>
   1e330:	1823883a 	mov	r17,r3
   1e334:	20060416 	blt	r4,zero,1fb48 <___svfprintf_internal_r+0x1c5c>
   1e338:	d9002a15 	stw	r4,168(sp)
   1e33c:	003f4106 	br	1e044 <__alt_data_end+0xfffdf844>
   1e340:	8cbff404 	addi	r18,r17,-48
   1e344:	d8003115 	stw	zero,196(sp)
   1e348:	0009883a 	mov	r4,zero
   1e34c:	b823883a 	mov	r17,r23
   1e350:	01400284 	movi	r5,10
   1e354:	002587c0 	call	2587c <__mulsi3>
   1e358:	88c00007 	ldb	r3,0(r17)
   1e35c:	9089883a 	add	r4,r18,r2
   1e360:	bdc00044 	addi	r23,r23,1
   1e364:	1cbff404 	addi	r18,r3,-48
   1e368:	b823883a 	mov	r17,r23
   1e36c:	b4bff82e 	bgeu	r22,r18,1e350 <__alt_data_end+0xfffdfb50>
   1e370:	1823883a 	mov	r17,r3
   1e374:	d9003115 	stw	r4,196(sp)
   1e378:	003f3206 	br	1e044 <__alt_data_end+0xfffdf844>
   1e37c:	84002014 	ori	r16,r16,128
   1e380:	bc400007 	ldb	r17,0(r23)
   1e384:	003f2e06 	br	1e040 <__alt_data_end+0xfffdf840>
   1e388:	8025883a 	mov	r18,r16
   1e38c:	dc002903 	ldbu	r16,164(sp)
   1e390:	e011883a 	mov	r8,fp
   1e394:	84003fcc 	andi	r16,r16,255
   1e398:	8007721e 	bne	r16,zero,20164 <___svfprintf_internal_r+0x2278>
   1e39c:	9080020c 	andi	r2,r18,8
   1e3a0:	1004a526 	beq	r2,zero,1f638 <___svfprintf_internal_r+0x174c>
   1e3a4:	d9002e17 	ldw	r4,184(sp)
   1e3a8:	d9402e17 	ldw	r5,184(sp)
   1e3ac:	d8802e17 	ldw	r2,184(sp)
   1e3b0:	21000017 	ldw	r4,0(r4)
   1e3b4:	29400117 	ldw	r5,4(r5)
   1e3b8:	10800204 	addi	r2,r2,8
   1e3bc:	d9003615 	stw	r4,216(sp)
   1e3c0:	d9403715 	stw	r5,220(sp)
   1e3c4:	d8802e15 	stw	r2,184(sp)
   1e3c8:	d9003617 	ldw	r4,216(sp)
   1e3cc:	d9403717 	ldw	r5,220(sp)
   1e3d0:	da003e15 	stw	r8,248(sp)
   1e3d4:	04000044 	movi	r16,1
   1e3d8:	000ff480 	call	ff48 <__fpclassifyd>
   1e3dc:	da003e17 	ldw	r8,248(sp)
   1e3e0:	1404731e 	bne	r2,r16,1f5b0 <___svfprintf_internal_r+0x16c4>
   1e3e4:	d9003617 	ldw	r4,216(sp)
   1e3e8:	d9403717 	ldw	r5,220(sp)
   1e3ec:	000d883a 	mov	r6,zero
   1e3f0:	000f883a 	mov	r7,zero
   1e3f4:	0026e800 	call	26e80 <__ledf2>
   1e3f8:	da003e17 	ldw	r8,248(sp)
   1e3fc:	10061b16 	blt	r2,zero,1fc6c <___svfprintf_internal_r+0x1d80>
   1e400:	df002783 	ldbu	fp,158(sp)
   1e404:	008011c4 	movi	r2,71
   1e408:	1445810e 	bge	r2,r17,1fa10 <___svfprintf_internal_r+0x1b24>
   1e40c:	040000f4 	movhi	r16,3
   1e410:	8424b404 	addi	r16,r16,-27952
   1e414:	00c000c4 	movi	r3,3
   1e418:	00bfdfc4 	movi	r2,-129
   1e41c:	d8c02915 	stw	r3,164(sp)
   1e420:	90a4703a 	and	r18,r18,r2
   1e424:	d8c02b15 	stw	r3,172(sp)
   1e428:	d8002a15 	stw	zero,168(sp)
   1e42c:	d8003215 	stw	zero,200(sp)
   1e430:	00006c06 	br	1e5e4 <___svfprintf_internal_r+0x6f8>
   1e434:	84000214 	ori	r16,r16,8
   1e438:	bc400007 	ldb	r17,0(r23)
   1e43c:	003f0006 	br	1e040 <__alt_data_end+0xfffdf840>
   1e440:	8025883a 	mov	r18,r16
   1e444:	dc002903 	ldbu	r16,164(sp)
   1e448:	e011883a 	mov	r8,fp
   1e44c:	84003fcc 	andi	r16,r16,255
   1e450:	80073f1e 	bne	r16,zero,20150 <___svfprintf_internal_r+0x2264>
   1e454:	94800414 	ori	r18,r18,16
   1e458:	9080080c 	andi	r2,r18,32
   1e45c:	1003bb26 	beq	r2,zero,1f34c <___svfprintf_internal_r+0x1460>
   1e460:	d9002e17 	ldw	r4,184(sp)
   1e464:	20800117 	ldw	r2,4(r4)
   1e468:	25000017 	ldw	r20,0(r4)
   1e46c:	21000204 	addi	r4,r4,8
   1e470:	d9002e15 	stw	r4,184(sp)
   1e474:	102d883a 	mov	r22,r2
   1e478:	1003bd16 	blt	r2,zero,1f370 <___svfprintf_internal_r+0x1484>
   1e47c:	d9002a17 	ldw	r4,168(sp)
   1e480:	df002783 	ldbu	fp,158(sp)
   1e484:	2003d016 	blt	r4,zero,1f3c8 <___svfprintf_internal_r+0x14dc>
   1e488:	00ffdfc4 	movi	r3,-129
   1e48c:	a584b03a 	or	r2,r20,r22
   1e490:	90e4703a 	and	r18,r18,r3
   1e494:	10015026 	beq	r2,zero,1e9d8 <___svfprintf_internal_r+0xaec>
   1e498:	b0037026 	beq	r22,zero,1f25c <___svfprintf_internal_r+0x1370>
   1e49c:	dc402915 	stw	r17,164(sp)
   1e4a0:	dc001e04 	addi	r16,sp,120
   1e4a4:	b023883a 	mov	r17,r22
   1e4a8:	402d883a 	mov	r22,r8
   1e4ac:	a009883a 	mov	r4,r20
   1e4b0:	880b883a 	mov	r5,r17
   1e4b4:	01800284 	movi	r6,10
   1e4b8:	000f883a 	mov	r7,zero
   1e4bc:	00251040 	call	25104 <__umoddi3>
   1e4c0:	10800c04 	addi	r2,r2,48
   1e4c4:	843fffc4 	addi	r16,r16,-1
   1e4c8:	a009883a 	mov	r4,r20
   1e4cc:	880b883a 	mov	r5,r17
   1e4d0:	80800005 	stb	r2,0(r16)
   1e4d4:	01800284 	movi	r6,10
   1e4d8:	000f883a 	mov	r7,zero
   1e4dc:	0024b080 	call	24b08 <__udivdi3>
   1e4e0:	1029883a 	mov	r20,r2
   1e4e4:	10c4b03a 	or	r2,r2,r3
   1e4e8:	1823883a 	mov	r17,r3
   1e4ec:	103fef1e 	bne	r2,zero,1e4ac <__alt_data_end+0xfffdfcac>
   1e4f0:	d8c02817 	ldw	r3,160(sp)
   1e4f4:	dc402917 	ldw	r17,164(sp)
   1e4f8:	b011883a 	mov	r8,r22
   1e4fc:	1c07c83a 	sub	r3,r3,r16
   1e500:	d8c02b15 	stw	r3,172(sp)
   1e504:	00003106 	br	1e5cc <___svfprintf_internal_r+0x6e0>
   1e508:	8025883a 	mov	r18,r16
   1e50c:	dc002903 	ldbu	r16,164(sp)
   1e510:	e011883a 	mov	r8,fp
   1e514:	84003fcc 	andi	r16,r16,255
   1e518:	80070a1e 	bne	r16,zero,20144 <___svfprintf_internal_r+0x2258>
   1e51c:	94800414 	ori	r18,r18,16
   1e520:	9080080c 	andi	r2,r18,32
   1e524:	1002f626 	beq	r2,zero,1f100 <___svfprintf_internal_r+0x1214>
   1e528:	d9002e17 	ldw	r4,184(sp)
   1e52c:	d9402a17 	ldw	r5,168(sp)
   1e530:	d8002785 	stb	zero,158(sp)
   1e534:	20800204 	addi	r2,r4,8
   1e538:	25000017 	ldw	r20,0(r4)
   1e53c:	25800117 	ldw	r22,4(r4)
   1e540:	28043716 	blt	r5,zero,1f620 <___svfprintf_internal_r+0x1734>
   1e544:	013fdfc4 	movi	r4,-129
   1e548:	a586b03a 	or	r3,r20,r22
   1e54c:	d8802e15 	stw	r2,184(sp)
   1e550:	9124703a 	and	r18,r18,r4
   1e554:	1802f71e 	bne	r3,zero,1f134 <___svfprintf_internal_r+0x1248>
   1e558:	d9402a17 	ldw	r5,168(sp)
   1e55c:	0039883a 	mov	fp,zero
   1e560:	2806df26 	beq	r5,zero,200e0 <___svfprintf_internal_r+0x21f4>
   1e564:	0029883a 	mov	r20,zero
   1e568:	002d883a 	mov	r22,zero
   1e56c:	dc001e04 	addi	r16,sp,120
   1e570:	a006d0fa 	srli	r3,r20,3
   1e574:	b008977a 	slli	r4,r22,29
   1e578:	b02cd0fa 	srli	r22,r22,3
   1e57c:	a50001cc 	andi	r20,r20,7
   1e580:	a0800c04 	addi	r2,r20,48
   1e584:	843fffc4 	addi	r16,r16,-1
   1e588:	20e8b03a 	or	r20,r4,r3
   1e58c:	80800005 	stb	r2,0(r16)
   1e590:	a586b03a 	or	r3,r20,r22
   1e594:	183ff61e 	bne	r3,zero,1e570 <__alt_data_end+0xfffdfd70>
   1e598:	90c0004c 	andi	r3,r18,1
   1e59c:	18013f26 	beq	r3,zero,1ea9c <___svfprintf_internal_r+0xbb0>
   1e5a0:	10803fcc 	andi	r2,r2,255
   1e5a4:	1080201c 	xori	r2,r2,128
   1e5a8:	10bfe004 	addi	r2,r2,-128
   1e5ac:	00c00c04 	movi	r3,48
   1e5b0:	10c13a26 	beq	r2,r3,1ea9c <___svfprintf_internal_r+0xbb0>
   1e5b4:	80ffffc5 	stb	r3,-1(r16)
   1e5b8:	d8c02817 	ldw	r3,160(sp)
   1e5bc:	80bfffc4 	addi	r2,r16,-1
   1e5c0:	1021883a 	mov	r16,r2
   1e5c4:	1887c83a 	sub	r3,r3,r2
   1e5c8:	d8c02b15 	stw	r3,172(sp)
   1e5cc:	d8802b17 	ldw	r2,172(sp)
   1e5d0:	d9002a17 	ldw	r4,168(sp)
   1e5d4:	1100010e 	bge	r2,r4,1e5dc <___svfprintf_internal_r+0x6f0>
   1e5d8:	2005883a 	mov	r2,r4
   1e5dc:	d8802915 	stw	r2,164(sp)
   1e5e0:	d8003215 	stw	zero,200(sp)
   1e5e4:	e7003fcc 	andi	fp,fp,255
   1e5e8:	e700201c 	xori	fp,fp,128
   1e5ec:	e73fe004 	addi	fp,fp,-128
   1e5f0:	e0000326 	beq	fp,zero,1e600 <___svfprintf_internal_r+0x714>
   1e5f4:	d8c02917 	ldw	r3,164(sp)
   1e5f8:	18c00044 	addi	r3,r3,1
   1e5fc:	d8c02915 	stw	r3,164(sp)
   1e600:	90c0008c 	andi	r3,r18,2
   1e604:	d8c02c15 	stw	r3,176(sp)
   1e608:	18000326 	beq	r3,zero,1e618 <___svfprintf_internal_r+0x72c>
   1e60c:	d8c02917 	ldw	r3,164(sp)
   1e610:	18c00084 	addi	r3,r3,2
   1e614:	d8c02915 	stw	r3,164(sp)
   1e618:	90c0210c 	andi	r3,r18,132
   1e61c:	d8c03015 	stw	r3,192(sp)
   1e620:	1801c31e 	bne	r3,zero,1ed30 <___svfprintf_internal_r+0xe44>
   1e624:	d9003117 	ldw	r4,196(sp)
   1e628:	d8c02917 	ldw	r3,164(sp)
   1e62c:	20e9c83a 	sub	r20,r4,r3
   1e630:	0501bf0e 	bge	zero,r20,1ed30 <___svfprintf_internal_r+0xe44>
   1e634:	02400404 	movi	r9,16
   1e638:	d8c02017 	ldw	r3,128(sp)
   1e63c:	d8801f17 	ldw	r2,124(sp)
   1e640:	4d053d0e 	bge	r9,r20,1fb38 <___svfprintf_internal_r+0x1c4c>
   1e644:	014000f4 	movhi	r5,3
   1e648:	2965e084 	addi	r5,r5,-26750
   1e64c:	dc403c15 	stw	r17,240(sp)
   1e650:	d9403515 	stw	r5,212(sp)
   1e654:	a023883a 	mov	r17,r20
   1e658:	482d883a 	mov	r22,r9
   1e65c:	9029883a 	mov	r20,r18
   1e660:	070001c4 	movi	fp,7
   1e664:	8025883a 	mov	r18,r16
   1e668:	dc002d17 	ldw	r16,180(sp)
   1e66c:	00000306 	br	1e67c <___svfprintf_internal_r+0x790>
   1e670:	8c7ffc04 	addi	r17,r17,-16
   1e674:	42000204 	addi	r8,r8,8
   1e678:	b440130e 	bge	r22,r17,1e6c8 <___svfprintf_internal_r+0x7dc>
   1e67c:	010000f4 	movhi	r4,3
   1e680:	18c00404 	addi	r3,r3,16
   1e684:	10800044 	addi	r2,r2,1
   1e688:	2125e084 	addi	r4,r4,-26750
   1e68c:	41000015 	stw	r4,0(r8)
   1e690:	45800115 	stw	r22,4(r8)
   1e694:	d8c02015 	stw	r3,128(sp)
   1e698:	d8801f15 	stw	r2,124(sp)
   1e69c:	e0bff40e 	bge	fp,r2,1e670 <__alt_data_end+0xfffdfe70>
   1e6a0:	d9801e04 	addi	r6,sp,120
   1e6a4:	800b883a 	mov	r5,r16
   1e6a8:	9809883a 	mov	r4,r19
   1e6ac:	0022bd80 	call	22bd8 <__ssprint_r>
   1e6b0:	103ef51e 	bne	r2,zero,1e288 <__alt_data_end+0xfffdfa88>
   1e6b4:	8c7ffc04 	addi	r17,r17,-16
   1e6b8:	d8c02017 	ldw	r3,128(sp)
   1e6bc:	d8801f17 	ldw	r2,124(sp)
   1e6c0:	da000404 	addi	r8,sp,16
   1e6c4:	b47fed16 	blt	r22,r17,1e67c <__alt_data_end+0xfffdfe7c>
   1e6c8:	9021883a 	mov	r16,r18
   1e6cc:	a025883a 	mov	r18,r20
   1e6d0:	8829883a 	mov	r20,r17
   1e6d4:	dc403c17 	ldw	r17,240(sp)
   1e6d8:	d9403517 	ldw	r5,212(sp)
   1e6dc:	a0c7883a 	add	r3,r20,r3
   1e6e0:	10800044 	addi	r2,r2,1
   1e6e4:	41400015 	stw	r5,0(r8)
   1e6e8:	45000115 	stw	r20,4(r8)
   1e6ec:	d8c02015 	stw	r3,128(sp)
   1e6f0:	d8801f15 	stw	r2,124(sp)
   1e6f4:	010001c4 	movi	r4,7
   1e6f8:	2082c116 	blt	r4,r2,1f200 <___svfprintf_internal_r+0x1314>
   1e6fc:	df002787 	ldb	fp,158(sp)
   1e700:	42000204 	addi	r8,r8,8
   1e704:	e0000c26 	beq	fp,zero,1e738 <___svfprintf_internal_r+0x84c>
   1e708:	d8801f17 	ldw	r2,124(sp)
   1e70c:	d9002784 	addi	r4,sp,158
   1e710:	18c00044 	addi	r3,r3,1
   1e714:	10800044 	addi	r2,r2,1
   1e718:	41000015 	stw	r4,0(r8)
   1e71c:	01000044 	movi	r4,1
   1e720:	41000115 	stw	r4,4(r8)
   1e724:	d8c02015 	stw	r3,128(sp)
   1e728:	d8801f15 	stw	r2,124(sp)
   1e72c:	010001c4 	movi	r4,7
   1e730:	20825a16 	blt	r4,r2,1f09c <___svfprintf_internal_r+0x11b0>
   1e734:	42000204 	addi	r8,r8,8
   1e738:	d8802c17 	ldw	r2,176(sp)
   1e73c:	10000c26 	beq	r2,zero,1e770 <___svfprintf_internal_r+0x884>
   1e740:	d8801f17 	ldw	r2,124(sp)
   1e744:	d9002704 	addi	r4,sp,156
   1e748:	18c00084 	addi	r3,r3,2
   1e74c:	10800044 	addi	r2,r2,1
   1e750:	41000015 	stw	r4,0(r8)
   1e754:	01000084 	movi	r4,2
   1e758:	41000115 	stw	r4,4(r8)
   1e75c:	d8c02015 	stw	r3,128(sp)
   1e760:	d8801f15 	stw	r2,124(sp)
   1e764:	010001c4 	movi	r4,7
   1e768:	20825416 	blt	r4,r2,1f0bc <___svfprintf_internal_r+0x11d0>
   1e76c:	42000204 	addi	r8,r8,8
   1e770:	d9003017 	ldw	r4,192(sp)
   1e774:	00802004 	movi	r2,128
   1e778:	2081b926 	beq	r4,r2,1ee60 <___svfprintf_internal_r+0xf74>
   1e77c:	d9402a17 	ldw	r5,168(sp)
   1e780:	d8802b17 	ldw	r2,172(sp)
   1e784:	28adc83a 	sub	r22,r5,r2
   1e788:	05802f0e 	bge	zero,r22,1e848 <___svfprintf_internal_r+0x95c>
   1e78c:	07000404 	movi	fp,16
   1e790:	d8801f17 	ldw	r2,124(sp)
   1e794:	e583e20e 	bge	fp,r22,1f720 <___svfprintf_internal_r+0x1834>
   1e798:	014000f4 	movhi	r5,3
   1e79c:	2965dc84 	addi	r5,r5,-26766
   1e7a0:	dc402a15 	stw	r17,168(sp)
   1e7a4:	d9402c15 	stw	r5,176(sp)
   1e7a8:	b023883a 	mov	r17,r22
   1e7ac:	050001c4 	movi	r20,7
   1e7b0:	902d883a 	mov	r22,r18
   1e7b4:	8025883a 	mov	r18,r16
   1e7b8:	dc002d17 	ldw	r16,180(sp)
   1e7bc:	00000306 	br	1e7cc <___svfprintf_internal_r+0x8e0>
   1e7c0:	8c7ffc04 	addi	r17,r17,-16
   1e7c4:	42000204 	addi	r8,r8,8
   1e7c8:	e440110e 	bge	fp,r17,1e810 <___svfprintf_internal_r+0x924>
   1e7cc:	18c00404 	addi	r3,r3,16
   1e7d0:	10800044 	addi	r2,r2,1
   1e7d4:	45400015 	stw	r21,0(r8)
   1e7d8:	47000115 	stw	fp,4(r8)
   1e7dc:	d8c02015 	stw	r3,128(sp)
   1e7e0:	d8801f15 	stw	r2,124(sp)
   1e7e4:	a0bff60e 	bge	r20,r2,1e7c0 <__alt_data_end+0xfffdffc0>
   1e7e8:	d9801e04 	addi	r6,sp,120
   1e7ec:	800b883a 	mov	r5,r16
   1e7f0:	9809883a 	mov	r4,r19
   1e7f4:	0022bd80 	call	22bd8 <__ssprint_r>
   1e7f8:	103ea31e 	bne	r2,zero,1e288 <__alt_data_end+0xfffdfa88>
   1e7fc:	8c7ffc04 	addi	r17,r17,-16
   1e800:	d8c02017 	ldw	r3,128(sp)
   1e804:	d8801f17 	ldw	r2,124(sp)
   1e808:	da000404 	addi	r8,sp,16
   1e80c:	e47fef16 	blt	fp,r17,1e7cc <__alt_data_end+0xfffdffcc>
   1e810:	9021883a 	mov	r16,r18
   1e814:	b025883a 	mov	r18,r22
   1e818:	882d883a 	mov	r22,r17
   1e81c:	dc402a17 	ldw	r17,168(sp)
   1e820:	d9002c17 	ldw	r4,176(sp)
   1e824:	1d87883a 	add	r3,r3,r22
   1e828:	10800044 	addi	r2,r2,1
   1e82c:	41000015 	stw	r4,0(r8)
   1e830:	45800115 	stw	r22,4(r8)
   1e834:	d8c02015 	stw	r3,128(sp)
   1e838:	d8801f15 	stw	r2,124(sp)
   1e83c:	010001c4 	movi	r4,7
   1e840:	20820e16 	blt	r4,r2,1f07c <___svfprintf_internal_r+0x1190>
   1e844:	42000204 	addi	r8,r8,8
   1e848:	9080400c 	andi	r2,r18,256
   1e84c:	10013a1e 	bne	r2,zero,1ed38 <___svfprintf_internal_r+0xe4c>
   1e850:	d9402b17 	ldw	r5,172(sp)
   1e854:	d8801f17 	ldw	r2,124(sp)
   1e858:	44000015 	stw	r16,0(r8)
   1e85c:	1947883a 	add	r3,r3,r5
   1e860:	10800044 	addi	r2,r2,1
   1e864:	41400115 	stw	r5,4(r8)
   1e868:	d8c02015 	stw	r3,128(sp)
   1e86c:	d8801f15 	stw	r2,124(sp)
   1e870:	010001c4 	movi	r4,7
   1e874:	2081f316 	blt	r4,r2,1f044 <___svfprintf_internal_r+0x1158>
   1e878:	42000204 	addi	r8,r8,8
   1e87c:	9480010c 	andi	r18,r18,4
   1e880:	90003226 	beq	r18,zero,1e94c <___svfprintf_internal_r+0xa60>
   1e884:	d9403117 	ldw	r5,196(sp)
   1e888:	d8802917 	ldw	r2,164(sp)
   1e88c:	28a1c83a 	sub	r16,r5,r2
   1e890:	04002e0e 	bge	zero,r16,1e94c <___svfprintf_internal_r+0xa60>
   1e894:	04400404 	movi	r17,16
   1e898:	d8801f17 	ldw	r2,124(sp)
   1e89c:	8c04db0e 	bge	r17,r16,1fc0c <___svfprintf_internal_r+0x1d20>
   1e8a0:	014000f4 	movhi	r5,3
   1e8a4:	2965e084 	addi	r5,r5,-26750
   1e8a8:	d9403515 	stw	r5,212(sp)
   1e8ac:	048001c4 	movi	r18,7
   1e8b0:	dd002d17 	ldw	r20,180(sp)
   1e8b4:	00000306 	br	1e8c4 <___svfprintf_internal_r+0x9d8>
   1e8b8:	843ffc04 	addi	r16,r16,-16
   1e8bc:	42000204 	addi	r8,r8,8
   1e8c0:	8c00130e 	bge	r17,r16,1e910 <___svfprintf_internal_r+0xa24>
   1e8c4:	010000f4 	movhi	r4,3
   1e8c8:	18c00404 	addi	r3,r3,16
   1e8cc:	10800044 	addi	r2,r2,1
   1e8d0:	2125e084 	addi	r4,r4,-26750
   1e8d4:	41000015 	stw	r4,0(r8)
   1e8d8:	44400115 	stw	r17,4(r8)
   1e8dc:	d8c02015 	stw	r3,128(sp)
   1e8e0:	d8801f15 	stw	r2,124(sp)
   1e8e4:	90bff40e 	bge	r18,r2,1e8b8 <__alt_data_end+0xfffe00b8>
   1e8e8:	d9801e04 	addi	r6,sp,120
   1e8ec:	a00b883a 	mov	r5,r20
   1e8f0:	9809883a 	mov	r4,r19
   1e8f4:	0022bd80 	call	22bd8 <__ssprint_r>
   1e8f8:	103e631e 	bne	r2,zero,1e288 <__alt_data_end+0xfffdfa88>
   1e8fc:	843ffc04 	addi	r16,r16,-16
   1e900:	d8c02017 	ldw	r3,128(sp)
   1e904:	d8801f17 	ldw	r2,124(sp)
   1e908:	da000404 	addi	r8,sp,16
   1e90c:	8c3fed16 	blt	r17,r16,1e8c4 <__alt_data_end+0xfffe00c4>
   1e910:	d9403517 	ldw	r5,212(sp)
   1e914:	1c07883a 	add	r3,r3,r16
   1e918:	10800044 	addi	r2,r2,1
   1e91c:	41400015 	stw	r5,0(r8)
   1e920:	44000115 	stw	r16,4(r8)
   1e924:	d8c02015 	stw	r3,128(sp)
   1e928:	d8801f15 	stw	r2,124(sp)
   1e92c:	010001c4 	movi	r4,7
   1e930:	2080060e 	bge	r4,r2,1e94c <___svfprintf_internal_r+0xa60>
   1e934:	d9402d17 	ldw	r5,180(sp)
   1e938:	d9801e04 	addi	r6,sp,120
   1e93c:	9809883a 	mov	r4,r19
   1e940:	0022bd80 	call	22bd8 <__ssprint_r>
   1e944:	103e501e 	bne	r2,zero,1e288 <__alt_data_end+0xfffdfa88>
   1e948:	d8c02017 	ldw	r3,128(sp)
   1e94c:	d8803117 	ldw	r2,196(sp)
   1e950:	d9002917 	ldw	r4,164(sp)
   1e954:	1100010e 	bge	r2,r4,1e95c <___svfprintf_internal_r+0xa70>
   1e958:	2005883a 	mov	r2,r4
   1e95c:	d9402f17 	ldw	r5,188(sp)
   1e960:	288b883a 	add	r5,r5,r2
   1e964:	d9402f15 	stw	r5,188(sp)
   1e968:	1801be1e 	bne	r3,zero,1f064 <___svfprintf_internal_r+0x1178>
   1e96c:	b8800007 	ldb	r2,0(r23)
   1e970:	d8001f15 	stw	zero,124(sp)
   1e974:	da000404 	addi	r8,sp,16
   1e978:	103d891e 	bne	r2,zero,1dfa0 <__alt_data_end+0xfffdf7a0>
   1e97c:	b823883a 	mov	r17,r23
   1e980:	003d9f06 	br	1e000 <__alt_data_end+0xfffdf800>
   1e984:	8025883a 	mov	r18,r16
   1e988:	dc002903 	ldbu	r16,164(sp)
   1e98c:	e011883a 	mov	r8,fp
   1e990:	84003fcc 	andi	r16,r16,255
   1e994:	8005e61e 	bne	r16,zero,20130 <___svfprintf_internal_r+0x2244>
   1e998:	94800414 	ori	r18,r18,16
   1e99c:	9080080c 	andi	r2,r18,32
   1e9a0:	10022026 	beq	r2,zero,1f224 <___svfprintf_internal_r+0x1338>
   1e9a4:	d9002e17 	ldw	r4,184(sp)
   1e9a8:	d9402a17 	ldw	r5,168(sp)
   1e9ac:	d8002785 	stb	zero,158(sp)
   1e9b0:	20c00204 	addi	r3,r4,8
   1e9b4:	25000017 	ldw	r20,0(r4)
   1e9b8:	25800117 	ldw	r22,4(r4)
   1e9bc:	2803ad16 	blt	r5,zero,1f874 <___svfprintf_internal_r+0x1988>
   1e9c0:	013fdfc4 	movi	r4,-129
   1e9c4:	a584b03a 	or	r2,r20,r22
   1e9c8:	d8c02e15 	stw	r3,184(sp)
   1e9cc:	9124703a 	and	r18,r18,r4
   1e9d0:	0039883a 	mov	fp,zero
   1e9d4:	103eb01e 	bne	r2,zero,1e498 <__alt_data_end+0xfffdfc98>
   1e9d8:	d8802a17 	ldw	r2,168(sp)
   1e9dc:	1002e71e 	bne	r2,zero,1f57c <___svfprintf_internal_r+0x1690>
   1e9e0:	d8002a15 	stw	zero,168(sp)
   1e9e4:	d8002b15 	stw	zero,172(sp)
   1e9e8:	dc001e04 	addi	r16,sp,120
   1e9ec:	003ef706 	br	1e5cc <__alt_data_end+0xfffdfdcc>
   1e9f0:	8025883a 	mov	r18,r16
   1e9f4:	dc002903 	ldbu	r16,164(sp)
   1e9f8:	e011883a 	mov	r8,fp
   1e9fc:	84003fcc 	andi	r16,r16,255
   1ea00:	8005c81e 	bne	r16,zero,20124 <___svfprintf_internal_r+0x2238>
   1ea04:	010000f4 	movhi	r4,3
   1ea08:	2124b704 	addi	r4,r4,-27940
   1ea0c:	d9003a15 	stw	r4,232(sp)
   1ea10:	9080080c 	andi	r2,r18,32
   1ea14:	10007226 	beq	r2,zero,1ebe0 <___svfprintf_internal_r+0xcf4>
   1ea18:	d9402e17 	ldw	r5,184(sp)
   1ea1c:	2d000017 	ldw	r20,0(r5)
   1ea20:	2d800117 	ldw	r22,4(r5)
   1ea24:	29400204 	addi	r5,r5,8
   1ea28:	d9402e15 	stw	r5,184(sp)
   1ea2c:	9080004c 	andi	r2,r18,1
   1ea30:	1001aa26 	beq	r2,zero,1f0dc <___svfprintf_internal_r+0x11f0>
   1ea34:	a584b03a 	or	r2,r20,r22
   1ea38:	10032526 	beq	r2,zero,1f6d0 <___svfprintf_internal_r+0x17e4>
   1ea3c:	d8c02a17 	ldw	r3,168(sp)
   1ea40:	00800c04 	movi	r2,48
   1ea44:	d8802705 	stb	r2,156(sp)
   1ea48:	dc402745 	stb	r17,157(sp)
   1ea4c:	d8002785 	stb	zero,158(sp)
   1ea50:	90800094 	ori	r2,r18,2
   1ea54:	1804a316 	blt	r3,zero,1fce4 <___svfprintf_internal_r+0x1df8>
   1ea58:	00bfdfc4 	movi	r2,-129
   1ea5c:	90a4703a 	and	r18,r18,r2
   1ea60:	94800094 	ori	r18,r18,2
   1ea64:	0039883a 	mov	fp,zero
   1ea68:	d9003a17 	ldw	r4,232(sp)
   1ea6c:	dc001e04 	addi	r16,sp,120
   1ea70:	a08003cc 	andi	r2,r20,15
   1ea74:	b006973a 	slli	r3,r22,28
   1ea78:	2085883a 	add	r2,r4,r2
   1ea7c:	a028d13a 	srli	r20,r20,4
   1ea80:	10800003 	ldbu	r2,0(r2)
   1ea84:	b02cd13a 	srli	r22,r22,4
   1ea88:	843fffc4 	addi	r16,r16,-1
   1ea8c:	1d28b03a 	or	r20,r3,r20
   1ea90:	80800005 	stb	r2,0(r16)
   1ea94:	a584b03a 	or	r2,r20,r22
   1ea98:	103ff51e 	bne	r2,zero,1ea70 <__alt_data_end+0xfffe0270>
   1ea9c:	d8c02817 	ldw	r3,160(sp)
   1eaa0:	1c07c83a 	sub	r3,r3,r16
   1eaa4:	d8c02b15 	stw	r3,172(sp)
   1eaa8:	003ec806 	br	1e5cc <__alt_data_end+0xfffdfdcc>
   1eaac:	d8c02e17 	ldw	r3,184(sp)
   1eab0:	d9002e17 	ldw	r4,184(sp)
   1eab4:	8025883a 	mov	r18,r16
   1eab8:	18800017 	ldw	r2,0(r3)
   1eabc:	21000104 	addi	r4,r4,4
   1eac0:	00c00044 	movi	r3,1
   1eac4:	e011883a 	mov	r8,fp
   1eac8:	d8c02915 	stw	r3,164(sp)
   1eacc:	d8002785 	stb	zero,158(sp)
   1ead0:	d8801405 	stb	r2,80(sp)
   1ead4:	d9002e15 	stw	r4,184(sp)
   1ead8:	d8c02b15 	stw	r3,172(sp)
   1eadc:	d8002a15 	stw	zero,168(sp)
   1eae0:	d8003215 	stw	zero,200(sp)
   1eae4:	dc001404 	addi	r16,sp,80
   1eae8:	0039883a 	mov	fp,zero
   1eaec:	003ec406 	br	1e600 <__alt_data_end+0xfffdfe00>
   1eaf0:	8025883a 	mov	r18,r16
   1eaf4:	dc002903 	ldbu	r16,164(sp)
   1eaf8:	e011883a 	mov	r8,fp
   1eafc:	84003fcc 	andi	r16,r16,255
   1eb00:	803e8726 	beq	r16,zero,1e520 <__alt_data_end+0xfffdfd20>
   1eb04:	d8c02b03 	ldbu	r3,172(sp)
   1eb08:	d8c02785 	stb	r3,158(sp)
   1eb0c:	003e8406 	br	1e520 <__alt_data_end+0xfffdfd20>
   1eb10:	00c00044 	movi	r3,1
   1eb14:	d8c02905 	stb	r3,164(sp)
   1eb18:	00c00ac4 	movi	r3,43
   1eb1c:	d8c02b05 	stb	r3,172(sp)
   1eb20:	bc400007 	ldb	r17,0(r23)
   1eb24:	003d4606 	br	1e040 <__alt_data_end+0xfffdf840>
   1eb28:	84000814 	ori	r16,r16,32
   1eb2c:	bc400007 	ldb	r17,0(r23)
   1eb30:	003d4306 	br	1e040 <__alt_data_end+0xfffdf840>
   1eb34:	d8802e17 	ldw	r2,184(sp)
   1eb38:	8025883a 	mov	r18,r16
   1eb3c:	d8002785 	stb	zero,158(sp)
   1eb40:	14000017 	ldw	r16,0(r2)
   1eb44:	e011883a 	mov	r8,fp
   1eb48:	15000104 	addi	r20,r2,4
   1eb4c:	80042126 	beq	r16,zero,1fbd4 <___svfprintf_internal_r+0x1ce8>
   1eb50:	d8c02a17 	ldw	r3,168(sp)
   1eb54:	1803ee16 	blt	r3,zero,1fb10 <___svfprintf_internal_r+0x1c24>
   1eb58:	180d883a 	mov	r6,r3
   1eb5c:	000b883a 	mov	r5,zero
   1eb60:	8009883a 	mov	r4,r16
   1eb64:	df003e15 	stw	fp,248(sp)
   1eb68:	001263c0 	call	1263c <memchr>
   1eb6c:	da003e17 	ldw	r8,248(sp)
   1eb70:	10046a26 	beq	r2,zero,1fd1c <___svfprintf_internal_r+0x1e30>
   1eb74:	1405c83a 	sub	r2,r2,r16
   1eb78:	d8802b15 	stw	r2,172(sp)
   1eb7c:	1003ea16 	blt	r2,zero,1fb28 <___svfprintf_internal_r+0x1c3c>
   1eb80:	df002783 	ldbu	fp,158(sp)
   1eb84:	d8802915 	stw	r2,164(sp)
   1eb88:	dd002e15 	stw	r20,184(sp)
   1eb8c:	d8002a15 	stw	zero,168(sp)
   1eb90:	d8003215 	stw	zero,200(sp)
   1eb94:	003e9306 	br	1e5e4 <__alt_data_end+0xfffdfde4>
   1eb98:	8025883a 	mov	r18,r16
   1eb9c:	dc002903 	ldbu	r16,164(sp)
   1eba0:	e011883a 	mov	r8,fp
   1eba4:	84003fcc 	andi	r16,r16,255
   1eba8:	803f7c26 	beq	r16,zero,1e99c <__alt_data_end+0xfffe019c>
   1ebac:	d8c02b03 	ldbu	r3,172(sp)
   1ebb0:	d8c02785 	stb	r3,158(sp)
   1ebb4:	003f7906 	br	1e99c <__alt_data_end+0xfffe019c>
   1ebb8:	8025883a 	mov	r18,r16
   1ebbc:	dc002903 	ldbu	r16,164(sp)
   1ebc0:	e011883a 	mov	r8,fp
   1ebc4:	84003fcc 	andi	r16,r16,255
   1ebc8:	8005741e 	bne	r16,zero,2019c <___svfprintf_internal_r+0x22b0>
   1ebcc:	010000f4 	movhi	r4,3
   1ebd0:	2124bc04 	addi	r4,r4,-27920
   1ebd4:	d9003a15 	stw	r4,232(sp)
   1ebd8:	9080080c 	andi	r2,r18,32
   1ebdc:	103f8e1e 	bne	r2,zero,1ea18 <__alt_data_end+0xfffe0218>
   1ebe0:	9080040c 	andi	r2,r18,16
   1ebe4:	1002a726 	beq	r2,zero,1f684 <___svfprintf_internal_r+0x1798>
   1ebe8:	d8802e17 	ldw	r2,184(sp)
   1ebec:	002d883a 	mov	r22,zero
   1ebf0:	15000017 	ldw	r20,0(r2)
   1ebf4:	10800104 	addi	r2,r2,4
   1ebf8:	d8802e15 	stw	r2,184(sp)
   1ebfc:	003f8b06 	br	1ea2c <__alt_data_end+0xfffe022c>
   1ec00:	84000054 	ori	r16,r16,1
   1ec04:	bc400007 	ldb	r17,0(r23)
   1ec08:	003d0d06 	br	1e040 <__alt_data_end+0xfffdf840>
   1ec0c:	d8802b07 	ldb	r2,172(sp)
   1ec10:	1002a41e 	bne	r2,zero,1f6a4 <___svfprintf_internal_r+0x17b8>
   1ec14:	00c00044 	movi	r3,1
   1ec18:	d8c02905 	stb	r3,164(sp)
   1ec1c:	00c00804 	movi	r3,32
   1ec20:	d8c02b05 	stb	r3,172(sp)
   1ec24:	bc400007 	ldb	r17,0(r23)
   1ec28:	003d0506 	br	1e040 <__alt_data_end+0xfffdf840>
   1ec2c:	8025883a 	mov	r18,r16
   1ec30:	dc002903 	ldbu	r16,164(sp)
   1ec34:	e011883a 	mov	r8,fp
   1ec38:	84003fcc 	andi	r16,r16,255
   1ec3c:	803e0626 	beq	r16,zero,1e458 <__alt_data_end+0xfffdfc58>
   1ec40:	d8c02b03 	ldbu	r3,172(sp)
   1ec44:	d8c02785 	stb	r3,158(sp)
   1ec48:	003e0306 	br	1e458 <__alt_data_end+0xfffdfc58>
   1ec4c:	bc400007 	ldb	r17,0(r23)
   1ec50:	00801b04 	movi	r2,108
   1ec54:	88830a26 	beq	r17,r2,1f880 <___svfprintf_internal_r+0x1994>
   1ec58:	84000414 	ori	r16,r16,16
   1ec5c:	003cf806 	br	1e040 <__alt_data_end+0xfffdf840>
   1ec60:	8025883a 	mov	r18,r16
   1ec64:	dc002903 	ldbu	r16,164(sp)
   1ec68:	e011883a 	mov	r8,fp
   1ec6c:	84003fcc 	andi	r16,r16,255
   1ec70:	8005471e 	bne	r16,zero,20190 <___svfprintf_internal_r+0x22a4>
   1ec74:	9080080c 	andi	r2,r18,32
   1ec78:	10028c26 	beq	r2,zero,1f6ac <___svfprintf_internal_r+0x17c0>
   1ec7c:	d9002e17 	ldw	r4,184(sp)
   1ec80:	d9402f17 	ldw	r5,188(sp)
   1ec84:	20800017 	ldw	r2,0(r4)
   1ec88:	2807d7fa 	srai	r3,r5,31
   1ec8c:	21000104 	addi	r4,r4,4
   1ec90:	d9002e15 	stw	r4,184(sp)
   1ec94:	11400015 	stw	r5,0(r2)
   1ec98:	10c00115 	stw	r3,4(r2)
   1ec9c:	003cbe06 	br	1df98 <__alt_data_end+0xfffdf798>
   1eca0:	84001014 	ori	r16,r16,64
   1eca4:	bc400007 	ldb	r17,0(r23)
   1eca8:	003ce506 	br	1e040 <__alt_data_end+0xfffdf840>
   1ecac:	010000f4 	movhi	r4,3
   1ecb0:	2124bc04 	addi	r4,r4,-27920
   1ecb4:	0039883a 	mov	fp,zero
   1ecb8:	d9003a15 	stw	r4,232(sp)
   1ecbc:	04401e04 	movi	r17,120
   1ecc0:	003f6906 	br	1ea68 <__alt_data_end+0xfffe0268>
   1ecc4:	8025883a 	mov	r18,r16
   1ecc8:	dc002903 	ldbu	r16,164(sp)
   1eccc:	e011883a 	mov	r8,fp
   1ecd0:	84003fcc 	andi	r16,r16,255
   1ecd4:	8005261e 	bne	r16,zero,20170 <___svfprintf_internal_r+0x2284>
   1ecd8:	883d6526 	beq	r17,zero,1e270 <__alt_data_end+0xfffdfa70>
   1ecdc:	00c00044 	movi	r3,1
   1ece0:	d8c02915 	stw	r3,164(sp)
   1ece4:	dc401405 	stb	r17,80(sp)
   1ece8:	d8002785 	stb	zero,158(sp)
   1ecec:	003f7a06 	br	1ead8 <__alt_data_end+0xfffe02d8>
   1ecf0:	010000f4 	movhi	r4,3
   1ecf4:	2124bc04 	addi	r4,r4,-27920
   1ecf8:	d9003a15 	stw	r4,232(sp)
   1ecfc:	d8c02e15 	stw	r3,184(sp)
   1ed00:	1025883a 	mov	r18,r2
   1ed04:	04401e04 	movi	r17,120
   1ed08:	a584b03a 	or	r2,r20,r22
   1ed0c:	1000fa1e 	bne	r2,zero,1f0f8 <___svfprintf_internal_r+0x120c>
   1ed10:	0039883a 	mov	fp,zero
   1ed14:	00800084 	movi	r2,2
   1ed18:	10803fcc 	andi	r2,r2,255
   1ed1c:	00c00044 	movi	r3,1
   1ed20:	10c21626 	beq	r2,r3,1f57c <___svfprintf_internal_r+0x1690>
   1ed24:	00c00084 	movi	r3,2
   1ed28:	10fe0e1e 	bne	r2,r3,1e564 <__alt_data_end+0xfffdfd64>
   1ed2c:	003d4606 	br	1e248 <__alt_data_end+0xfffdfa48>
   1ed30:	d8c02017 	ldw	r3,128(sp)
   1ed34:	003e7306 	br	1e704 <__alt_data_end+0xfffdff04>
   1ed38:	00801944 	movi	r2,101
   1ed3c:	14407c0e 	bge	r2,r17,1ef30 <___svfprintf_internal_r+0x1044>
   1ed40:	d9003617 	ldw	r4,216(sp)
   1ed44:	d9403717 	ldw	r5,220(sp)
   1ed48:	000d883a 	mov	r6,zero
   1ed4c:	000f883a 	mov	r7,zero
   1ed50:	d8c03d15 	stw	r3,244(sp)
   1ed54:	da003e15 	stw	r8,248(sp)
   1ed58:	0026d1c0 	call	26d1c <__eqdf2>
   1ed5c:	d8c03d17 	ldw	r3,244(sp)
   1ed60:	da003e17 	ldw	r8,248(sp)
   1ed64:	1000f51e 	bne	r2,zero,1f13c <___svfprintf_internal_r+0x1250>
   1ed68:	d8801f17 	ldw	r2,124(sp)
   1ed6c:	010000f4 	movhi	r4,3
   1ed70:	2124c304 	addi	r4,r4,-27892
   1ed74:	18c00044 	addi	r3,r3,1
   1ed78:	10800044 	addi	r2,r2,1
   1ed7c:	41000015 	stw	r4,0(r8)
   1ed80:	01000044 	movi	r4,1
   1ed84:	41000115 	stw	r4,4(r8)
   1ed88:	d8c02015 	stw	r3,128(sp)
   1ed8c:	d8801f15 	stw	r2,124(sp)
   1ed90:	010001c4 	movi	r4,7
   1ed94:	20826616 	blt	r4,r2,1f730 <___svfprintf_internal_r+0x1844>
   1ed98:	42000204 	addi	r8,r8,8
   1ed9c:	d8802617 	ldw	r2,152(sp)
   1eda0:	d9403317 	ldw	r5,204(sp)
   1eda4:	11400216 	blt	r2,r5,1edb0 <___svfprintf_internal_r+0xec4>
   1eda8:	9080004c 	andi	r2,r18,1
   1edac:	103eb326 	beq	r2,zero,1e87c <__alt_data_end+0xfffe007c>
   1edb0:	d8803817 	ldw	r2,224(sp)
   1edb4:	d9003417 	ldw	r4,208(sp)
   1edb8:	d9403817 	ldw	r5,224(sp)
   1edbc:	1887883a 	add	r3,r3,r2
   1edc0:	d8801f17 	ldw	r2,124(sp)
   1edc4:	41000015 	stw	r4,0(r8)
   1edc8:	41400115 	stw	r5,4(r8)
   1edcc:	10800044 	addi	r2,r2,1
   1edd0:	d8c02015 	stw	r3,128(sp)
   1edd4:	d8801f15 	stw	r2,124(sp)
   1edd8:	010001c4 	movi	r4,7
   1eddc:	2082af16 	blt	r4,r2,1f89c <___svfprintf_internal_r+0x19b0>
   1ede0:	42000204 	addi	r8,r8,8
   1ede4:	d8803317 	ldw	r2,204(sp)
   1ede8:	143fffc4 	addi	r16,r2,-1
   1edec:	043ea30e 	bge	zero,r16,1e87c <__alt_data_end+0xfffe007c>
   1edf0:	04400404 	movi	r17,16
   1edf4:	d8801f17 	ldw	r2,124(sp)
   1edf8:	8c00860e 	bge	r17,r16,1f014 <___svfprintf_internal_r+0x1128>
   1edfc:	014000f4 	movhi	r5,3
   1ee00:	2965dc84 	addi	r5,r5,-26766
   1ee04:	d9402c15 	stw	r5,176(sp)
   1ee08:	058001c4 	movi	r22,7
   1ee0c:	dd002d17 	ldw	r20,180(sp)
   1ee10:	00000306 	br	1ee20 <___svfprintf_internal_r+0xf34>
   1ee14:	42000204 	addi	r8,r8,8
   1ee18:	843ffc04 	addi	r16,r16,-16
   1ee1c:	8c00800e 	bge	r17,r16,1f020 <___svfprintf_internal_r+0x1134>
   1ee20:	18c00404 	addi	r3,r3,16
   1ee24:	10800044 	addi	r2,r2,1
   1ee28:	45400015 	stw	r21,0(r8)
   1ee2c:	44400115 	stw	r17,4(r8)
   1ee30:	d8c02015 	stw	r3,128(sp)
   1ee34:	d8801f15 	stw	r2,124(sp)
   1ee38:	b0bff60e 	bge	r22,r2,1ee14 <__alt_data_end+0xfffe0614>
   1ee3c:	d9801e04 	addi	r6,sp,120
   1ee40:	a00b883a 	mov	r5,r20
   1ee44:	9809883a 	mov	r4,r19
   1ee48:	0022bd80 	call	22bd8 <__ssprint_r>
   1ee4c:	103d0e1e 	bne	r2,zero,1e288 <__alt_data_end+0xfffdfa88>
   1ee50:	d8c02017 	ldw	r3,128(sp)
   1ee54:	d8801f17 	ldw	r2,124(sp)
   1ee58:	da000404 	addi	r8,sp,16
   1ee5c:	003fee06 	br	1ee18 <__alt_data_end+0xfffe0618>
   1ee60:	d9403117 	ldw	r5,196(sp)
   1ee64:	d8802917 	ldw	r2,164(sp)
   1ee68:	28adc83a 	sub	r22,r5,r2
   1ee6c:	05be430e 	bge	zero,r22,1e77c <__alt_data_end+0xfffdff7c>
   1ee70:	07000404 	movi	fp,16
   1ee74:	d8801f17 	ldw	r2,124(sp)
   1ee78:	e583a20e 	bge	fp,r22,1fd04 <___svfprintf_internal_r+0x1e18>
   1ee7c:	014000f4 	movhi	r5,3
   1ee80:	2965dc84 	addi	r5,r5,-26766
   1ee84:	dc403015 	stw	r17,192(sp)
   1ee88:	d9402c15 	stw	r5,176(sp)
   1ee8c:	b023883a 	mov	r17,r22
   1ee90:	050001c4 	movi	r20,7
   1ee94:	902d883a 	mov	r22,r18
   1ee98:	8025883a 	mov	r18,r16
   1ee9c:	dc002d17 	ldw	r16,180(sp)
   1eea0:	00000306 	br	1eeb0 <___svfprintf_internal_r+0xfc4>
   1eea4:	8c7ffc04 	addi	r17,r17,-16
   1eea8:	42000204 	addi	r8,r8,8
   1eeac:	e440110e 	bge	fp,r17,1eef4 <___svfprintf_internal_r+0x1008>
   1eeb0:	18c00404 	addi	r3,r3,16
   1eeb4:	10800044 	addi	r2,r2,1
   1eeb8:	45400015 	stw	r21,0(r8)
   1eebc:	47000115 	stw	fp,4(r8)
   1eec0:	d8c02015 	stw	r3,128(sp)
   1eec4:	d8801f15 	stw	r2,124(sp)
   1eec8:	a0bff60e 	bge	r20,r2,1eea4 <__alt_data_end+0xfffe06a4>
   1eecc:	d9801e04 	addi	r6,sp,120
   1eed0:	800b883a 	mov	r5,r16
   1eed4:	9809883a 	mov	r4,r19
   1eed8:	0022bd80 	call	22bd8 <__ssprint_r>
   1eedc:	103cea1e 	bne	r2,zero,1e288 <__alt_data_end+0xfffdfa88>
   1eee0:	8c7ffc04 	addi	r17,r17,-16
   1eee4:	d8c02017 	ldw	r3,128(sp)
   1eee8:	d8801f17 	ldw	r2,124(sp)
   1eeec:	da000404 	addi	r8,sp,16
   1eef0:	e47fef16 	blt	fp,r17,1eeb0 <__alt_data_end+0xfffe06b0>
   1eef4:	9021883a 	mov	r16,r18
   1eef8:	b025883a 	mov	r18,r22
   1eefc:	882d883a 	mov	r22,r17
   1ef00:	dc403017 	ldw	r17,192(sp)
   1ef04:	d9002c17 	ldw	r4,176(sp)
   1ef08:	1d87883a 	add	r3,r3,r22
   1ef0c:	10800044 	addi	r2,r2,1
   1ef10:	41000015 	stw	r4,0(r8)
   1ef14:	45800115 	stw	r22,4(r8)
   1ef18:	d8c02015 	stw	r3,128(sp)
   1ef1c:	d8801f15 	stw	r2,124(sp)
   1ef20:	010001c4 	movi	r4,7
   1ef24:	20819a16 	blt	r4,r2,1f590 <___svfprintf_internal_r+0x16a4>
   1ef28:	42000204 	addi	r8,r8,8
   1ef2c:	003e1306 	br	1e77c <__alt_data_end+0xfffdff7c>
   1ef30:	d9403317 	ldw	r5,204(sp)
   1ef34:	00800044 	movi	r2,1
   1ef38:	18c00044 	addi	r3,r3,1
   1ef3c:	1141710e 	bge	r2,r5,1f504 <___svfprintf_internal_r+0x1618>
   1ef40:	dc401f17 	ldw	r17,124(sp)
   1ef44:	00800044 	movi	r2,1
   1ef48:	40800115 	stw	r2,4(r8)
   1ef4c:	8c400044 	addi	r17,r17,1
   1ef50:	44000015 	stw	r16,0(r8)
   1ef54:	d8c02015 	stw	r3,128(sp)
   1ef58:	dc401f15 	stw	r17,124(sp)
   1ef5c:	008001c4 	movi	r2,7
   1ef60:	14417416 	blt	r2,r17,1f534 <___svfprintf_internal_r+0x1648>
   1ef64:	42000204 	addi	r8,r8,8
   1ef68:	d8803817 	ldw	r2,224(sp)
   1ef6c:	d9003417 	ldw	r4,208(sp)
   1ef70:	8c400044 	addi	r17,r17,1
   1ef74:	10c7883a 	add	r3,r2,r3
   1ef78:	40800115 	stw	r2,4(r8)
   1ef7c:	41000015 	stw	r4,0(r8)
   1ef80:	d8c02015 	stw	r3,128(sp)
   1ef84:	dc401f15 	stw	r17,124(sp)
   1ef88:	008001c4 	movi	r2,7
   1ef8c:	14417216 	blt	r2,r17,1f558 <___svfprintf_internal_r+0x166c>
   1ef90:	45800204 	addi	r22,r8,8
   1ef94:	d9003617 	ldw	r4,216(sp)
   1ef98:	d9403717 	ldw	r5,220(sp)
   1ef9c:	000d883a 	mov	r6,zero
   1efa0:	000f883a 	mov	r7,zero
   1efa4:	d8c03d15 	stw	r3,244(sp)
   1efa8:	0026d1c0 	call	26d1c <__eqdf2>
   1efac:	d8c03d17 	ldw	r3,244(sp)
   1efb0:	1000b326 	beq	r2,zero,1f280 <___svfprintf_internal_r+0x1394>
   1efb4:	d9403317 	ldw	r5,204(sp)
   1efb8:	84000044 	addi	r16,r16,1
   1efbc:	8c400044 	addi	r17,r17,1
   1efc0:	28bfffc4 	addi	r2,r5,-1
   1efc4:	1887883a 	add	r3,r3,r2
   1efc8:	b0800115 	stw	r2,4(r22)
   1efcc:	b4000015 	stw	r16,0(r22)
   1efd0:	d8c02015 	stw	r3,128(sp)
   1efd4:	dc401f15 	stw	r17,124(sp)
   1efd8:	008001c4 	movi	r2,7
   1efdc:	1440d216 	blt	r2,r17,1f328 <___svfprintf_internal_r+0x143c>
   1efe0:	b5800204 	addi	r22,r22,8
   1efe4:	d9003b17 	ldw	r4,236(sp)
   1efe8:	df0022c4 	addi	fp,sp,139
   1efec:	8c400044 	addi	r17,r17,1
   1eff0:	20c7883a 	add	r3,r4,r3
   1eff4:	b7000015 	stw	fp,0(r22)
   1eff8:	b1000115 	stw	r4,4(r22)
   1effc:	d8c02015 	stw	r3,128(sp)
   1f000:	dc401f15 	stw	r17,124(sp)
   1f004:	008001c4 	movi	r2,7
   1f008:	14400e16 	blt	r2,r17,1f044 <___svfprintf_internal_r+0x1158>
   1f00c:	b2000204 	addi	r8,r22,8
   1f010:	003e1a06 	br	1e87c <__alt_data_end+0xfffe007c>
   1f014:	010000f4 	movhi	r4,3
   1f018:	2125dc84 	addi	r4,r4,-26766
   1f01c:	d9002c15 	stw	r4,176(sp)
   1f020:	d9002c17 	ldw	r4,176(sp)
   1f024:	1c07883a 	add	r3,r3,r16
   1f028:	44000115 	stw	r16,4(r8)
   1f02c:	41000015 	stw	r4,0(r8)
   1f030:	10800044 	addi	r2,r2,1
   1f034:	d8c02015 	stw	r3,128(sp)
   1f038:	d8801f15 	stw	r2,124(sp)
   1f03c:	010001c4 	movi	r4,7
   1f040:	20be0d0e 	bge	r4,r2,1e878 <__alt_data_end+0xfffe0078>
   1f044:	d9402d17 	ldw	r5,180(sp)
   1f048:	d9801e04 	addi	r6,sp,120
   1f04c:	9809883a 	mov	r4,r19
   1f050:	0022bd80 	call	22bd8 <__ssprint_r>
   1f054:	103c8c1e 	bne	r2,zero,1e288 <__alt_data_end+0xfffdfa88>
   1f058:	d8c02017 	ldw	r3,128(sp)
   1f05c:	da000404 	addi	r8,sp,16
   1f060:	003e0606 	br	1e87c <__alt_data_end+0xfffe007c>
   1f064:	d9402d17 	ldw	r5,180(sp)
   1f068:	d9801e04 	addi	r6,sp,120
   1f06c:	9809883a 	mov	r4,r19
   1f070:	0022bd80 	call	22bd8 <__ssprint_r>
   1f074:	103e3d26 	beq	r2,zero,1e96c <__alt_data_end+0xfffe016c>
   1f078:	003c8306 	br	1e288 <__alt_data_end+0xfffdfa88>
   1f07c:	d9402d17 	ldw	r5,180(sp)
   1f080:	d9801e04 	addi	r6,sp,120
   1f084:	9809883a 	mov	r4,r19
   1f088:	0022bd80 	call	22bd8 <__ssprint_r>
   1f08c:	103c7e1e 	bne	r2,zero,1e288 <__alt_data_end+0xfffdfa88>
   1f090:	d8c02017 	ldw	r3,128(sp)
   1f094:	da000404 	addi	r8,sp,16
   1f098:	003deb06 	br	1e848 <__alt_data_end+0xfffe0048>
   1f09c:	d9402d17 	ldw	r5,180(sp)
   1f0a0:	d9801e04 	addi	r6,sp,120
   1f0a4:	9809883a 	mov	r4,r19
   1f0a8:	0022bd80 	call	22bd8 <__ssprint_r>
   1f0ac:	103c761e 	bne	r2,zero,1e288 <__alt_data_end+0xfffdfa88>
   1f0b0:	d8c02017 	ldw	r3,128(sp)
   1f0b4:	da000404 	addi	r8,sp,16
   1f0b8:	003d9f06 	br	1e738 <__alt_data_end+0xfffdff38>
   1f0bc:	d9402d17 	ldw	r5,180(sp)
   1f0c0:	d9801e04 	addi	r6,sp,120
   1f0c4:	9809883a 	mov	r4,r19
   1f0c8:	0022bd80 	call	22bd8 <__ssprint_r>
   1f0cc:	103c6e1e 	bne	r2,zero,1e288 <__alt_data_end+0xfffdfa88>
   1f0d0:	d8c02017 	ldw	r3,128(sp)
   1f0d4:	da000404 	addi	r8,sp,16
   1f0d8:	003da506 	br	1e770 <__alt_data_end+0xfffdff70>
   1f0dc:	d9402a17 	ldw	r5,168(sp)
   1f0e0:	d8002785 	stb	zero,158(sp)
   1f0e4:	283f0816 	blt	r5,zero,1ed08 <__alt_data_end+0xfffe0508>
   1f0e8:	00ffdfc4 	movi	r3,-129
   1f0ec:	a584b03a 	or	r2,r20,r22
   1f0f0:	90e4703a 	and	r18,r18,r3
   1f0f4:	103c5126 	beq	r2,zero,1e23c <__alt_data_end+0xfffdfa3c>
   1f0f8:	0039883a 	mov	fp,zero
   1f0fc:	003e5a06 	br	1ea68 <__alt_data_end+0xfffe0268>
   1f100:	9080040c 	andi	r2,r18,16
   1f104:	10013d26 	beq	r2,zero,1f5fc <___svfprintf_internal_r+0x1710>
   1f108:	d8c02e17 	ldw	r3,184(sp)
   1f10c:	d9002a17 	ldw	r4,168(sp)
   1f110:	d8002785 	stb	zero,158(sp)
   1f114:	18800104 	addi	r2,r3,4
   1f118:	1d000017 	ldw	r20,0(r3)
   1f11c:	002d883a 	mov	r22,zero
   1f120:	20013f16 	blt	r4,zero,1f620 <___svfprintf_internal_r+0x1734>
   1f124:	00ffdfc4 	movi	r3,-129
   1f128:	d8802e15 	stw	r2,184(sp)
   1f12c:	90e4703a 	and	r18,r18,r3
   1f130:	a03d0926 	beq	r20,zero,1e558 <__alt_data_end+0xfffdfd58>
   1f134:	0039883a 	mov	fp,zero
   1f138:	003d0c06 	br	1e56c <__alt_data_end+0xfffdfd6c>
   1f13c:	dc402617 	ldw	r17,152(sp)
   1f140:	0441830e 	bge	zero,r17,1f750 <___svfprintf_internal_r+0x1864>
   1f144:	dc403217 	ldw	r17,200(sp)
   1f148:	d8803317 	ldw	r2,204(sp)
   1f14c:	1440010e 	bge	r2,r17,1f154 <___svfprintf_internal_r+0x1268>
   1f150:	1023883a 	mov	r17,r2
   1f154:	04400a0e 	bge	zero,r17,1f180 <___svfprintf_internal_r+0x1294>
   1f158:	d8801f17 	ldw	r2,124(sp)
   1f15c:	1c47883a 	add	r3,r3,r17
   1f160:	44000015 	stw	r16,0(r8)
   1f164:	10800044 	addi	r2,r2,1
   1f168:	44400115 	stw	r17,4(r8)
   1f16c:	d8c02015 	stw	r3,128(sp)
   1f170:	d8801f15 	stw	r2,124(sp)
   1f174:	010001c4 	movi	r4,7
   1f178:	20827516 	blt	r4,r2,1fb50 <___svfprintf_internal_r+0x1c64>
   1f17c:	42000204 	addi	r8,r8,8
   1f180:	88027b16 	blt	r17,zero,1fb70 <___svfprintf_internal_r+0x1c84>
   1f184:	d9003217 	ldw	r4,200(sp)
   1f188:	2463c83a 	sub	r17,r4,r17
   1f18c:	0440990e 	bge	zero,r17,1f3f4 <___svfprintf_internal_r+0x1508>
   1f190:	05800404 	movi	r22,16
   1f194:	d8801f17 	ldw	r2,124(sp)
   1f198:	b441530e 	bge	r22,r17,1f6e8 <___svfprintf_internal_r+0x17fc>
   1f19c:	010000f4 	movhi	r4,3
   1f1a0:	2125dc84 	addi	r4,r4,-26766
   1f1a4:	d9002c15 	stw	r4,176(sp)
   1f1a8:	070001c4 	movi	fp,7
   1f1ac:	dd002d17 	ldw	r20,180(sp)
   1f1b0:	00000306 	br	1f1c0 <___svfprintf_internal_r+0x12d4>
   1f1b4:	42000204 	addi	r8,r8,8
   1f1b8:	8c7ffc04 	addi	r17,r17,-16
   1f1bc:	b4414d0e 	bge	r22,r17,1f6f4 <___svfprintf_internal_r+0x1808>
   1f1c0:	18c00404 	addi	r3,r3,16
   1f1c4:	10800044 	addi	r2,r2,1
   1f1c8:	45400015 	stw	r21,0(r8)
   1f1cc:	45800115 	stw	r22,4(r8)
   1f1d0:	d8c02015 	stw	r3,128(sp)
   1f1d4:	d8801f15 	stw	r2,124(sp)
   1f1d8:	e0bff60e 	bge	fp,r2,1f1b4 <__alt_data_end+0xfffe09b4>
   1f1dc:	d9801e04 	addi	r6,sp,120
   1f1e0:	a00b883a 	mov	r5,r20
   1f1e4:	9809883a 	mov	r4,r19
   1f1e8:	0022bd80 	call	22bd8 <__ssprint_r>
   1f1ec:	103c261e 	bne	r2,zero,1e288 <__alt_data_end+0xfffdfa88>
   1f1f0:	d8c02017 	ldw	r3,128(sp)
   1f1f4:	d8801f17 	ldw	r2,124(sp)
   1f1f8:	da000404 	addi	r8,sp,16
   1f1fc:	003fee06 	br	1f1b8 <__alt_data_end+0xfffe09b8>
   1f200:	d9402d17 	ldw	r5,180(sp)
   1f204:	d9801e04 	addi	r6,sp,120
   1f208:	9809883a 	mov	r4,r19
   1f20c:	0022bd80 	call	22bd8 <__ssprint_r>
   1f210:	103c1d1e 	bne	r2,zero,1e288 <__alt_data_end+0xfffdfa88>
   1f214:	d8c02017 	ldw	r3,128(sp)
   1f218:	df002787 	ldb	fp,158(sp)
   1f21c:	da000404 	addi	r8,sp,16
   1f220:	003d3806 	br	1e704 <__alt_data_end+0xfffdff04>
   1f224:	9080040c 	andi	r2,r18,16
   1f228:	10005c26 	beq	r2,zero,1f39c <___svfprintf_internal_r+0x14b0>
   1f22c:	d8c02e17 	ldw	r3,184(sp)
   1f230:	d9002a17 	ldw	r4,168(sp)
   1f234:	d8002785 	stb	zero,158(sp)
   1f238:	18800104 	addi	r2,r3,4
   1f23c:	1d000017 	ldw	r20,0(r3)
   1f240:	002d883a 	mov	r22,zero
   1f244:	20005e16 	blt	r4,zero,1f3c0 <___svfprintf_internal_r+0x14d4>
   1f248:	00ffdfc4 	movi	r3,-129
   1f24c:	d8802e15 	stw	r2,184(sp)
   1f250:	90e4703a 	and	r18,r18,r3
   1f254:	0039883a 	mov	fp,zero
   1f258:	a03ddf26 	beq	r20,zero,1e9d8 <__alt_data_end+0xfffe01d8>
   1f25c:	00800244 	movi	r2,9
   1f260:	153c8e36 	bltu	r2,r20,1e49c <__alt_data_end+0xfffdfc9c>
   1f264:	a5000c04 	addi	r20,r20,48
   1f268:	dc001dc4 	addi	r16,sp,119
   1f26c:	dd001dc5 	stb	r20,119(sp)
   1f270:	d8c02817 	ldw	r3,160(sp)
   1f274:	1c07c83a 	sub	r3,r3,r16
   1f278:	d8c02b15 	stw	r3,172(sp)
   1f27c:	003cd306 	br	1e5cc <__alt_data_end+0xfffdfdcc>
   1f280:	d8803317 	ldw	r2,204(sp)
   1f284:	143fffc4 	addi	r16,r2,-1
   1f288:	043f560e 	bge	zero,r16,1efe4 <__alt_data_end+0xfffe07e4>
   1f28c:	07000404 	movi	fp,16
   1f290:	e403530e 	bge	fp,r16,1ffe0 <___svfprintf_internal_r+0x20f4>
   1f294:	014000f4 	movhi	r5,3
   1f298:	2965dc84 	addi	r5,r5,-26766
   1f29c:	d9402c15 	stw	r5,176(sp)
   1f2a0:	01c001c4 	movi	r7,7
   1f2a4:	dd002d17 	ldw	r20,180(sp)
   1f2a8:	00000306 	br	1f2b8 <___svfprintf_internal_r+0x13cc>
   1f2ac:	843ffc04 	addi	r16,r16,-16
   1f2b0:	b5800204 	addi	r22,r22,8
   1f2b4:	e400130e 	bge	fp,r16,1f304 <___svfprintf_internal_r+0x1418>
   1f2b8:	18c00404 	addi	r3,r3,16
   1f2bc:	8c400044 	addi	r17,r17,1
   1f2c0:	b5400015 	stw	r21,0(r22)
   1f2c4:	b7000115 	stw	fp,4(r22)
   1f2c8:	d8c02015 	stw	r3,128(sp)
   1f2cc:	dc401f15 	stw	r17,124(sp)
   1f2d0:	3c7ff60e 	bge	r7,r17,1f2ac <__alt_data_end+0xfffe0aac>
   1f2d4:	d9801e04 	addi	r6,sp,120
   1f2d8:	a00b883a 	mov	r5,r20
   1f2dc:	9809883a 	mov	r4,r19
   1f2e0:	d9c03d15 	stw	r7,244(sp)
   1f2e4:	0022bd80 	call	22bd8 <__ssprint_r>
   1f2e8:	d9c03d17 	ldw	r7,244(sp)
   1f2ec:	103be61e 	bne	r2,zero,1e288 <__alt_data_end+0xfffdfa88>
   1f2f0:	843ffc04 	addi	r16,r16,-16
   1f2f4:	d8c02017 	ldw	r3,128(sp)
   1f2f8:	dc401f17 	ldw	r17,124(sp)
   1f2fc:	dd800404 	addi	r22,sp,16
   1f300:	e43fed16 	blt	fp,r16,1f2b8 <__alt_data_end+0xfffe0ab8>
   1f304:	d8802c17 	ldw	r2,176(sp)
   1f308:	1c07883a 	add	r3,r3,r16
   1f30c:	8c400044 	addi	r17,r17,1
   1f310:	b0800015 	stw	r2,0(r22)
   1f314:	b4000115 	stw	r16,4(r22)
   1f318:	d8c02015 	stw	r3,128(sp)
   1f31c:	dc401f15 	stw	r17,124(sp)
   1f320:	008001c4 	movi	r2,7
   1f324:	147f2e0e 	bge	r2,r17,1efe0 <__alt_data_end+0xfffe07e0>
   1f328:	d9402d17 	ldw	r5,180(sp)
   1f32c:	d9801e04 	addi	r6,sp,120
   1f330:	9809883a 	mov	r4,r19
   1f334:	0022bd80 	call	22bd8 <__ssprint_r>
   1f338:	103bd31e 	bne	r2,zero,1e288 <__alt_data_end+0xfffdfa88>
   1f33c:	d8c02017 	ldw	r3,128(sp)
   1f340:	dc401f17 	ldw	r17,124(sp)
   1f344:	dd800404 	addi	r22,sp,16
   1f348:	003f2606 	br	1efe4 <__alt_data_end+0xfffe07e4>
   1f34c:	9080040c 	andi	r2,r18,16
   1f350:	1000c326 	beq	r2,zero,1f660 <___svfprintf_internal_r+0x1774>
   1f354:	d9402e17 	ldw	r5,184(sp)
   1f358:	2d000017 	ldw	r20,0(r5)
   1f35c:	29400104 	addi	r5,r5,4
   1f360:	d9402e15 	stw	r5,184(sp)
   1f364:	a02dd7fa 	srai	r22,r20,31
   1f368:	b005883a 	mov	r2,r22
   1f36c:	103c430e 	bge	r2,zero,1e47c <__alt_data_end+0xfffdfc7c>
   1f370:	d9402a17 	ldw	r5,168(sp)
   1f374:	0529c83a 	sub	r20,zero,r20
   1f378:	07000b44 	movi	fp,45
   1f37c:	a004c03a 	cmpne	r2,r20,zero
   1f380:	05adc83a 	sub	r22,zero,r22
   1f384:	df002785 	stb	fp,158(sp)
   1f388:	b0adc83a 	sub	r22,r22,r2
   1f38c:	28022e16 	blt	r5,zero,1fc48 <___svfprintf_internal_r+0x1d5c>
   1f390:	00bfdfc4 	movi	r2,-129
   1f394:	90a4703a 	and	r18,r18,r2
   1f398:	003c3f06 	br	1e498 <__alt_data_end+0xfffdfc98>
   1f39c:	9080100c 	andi	r2,r18,64
   1f3a0:	d8002785 	stb	zero,158(sp)
   1f3a4:	10012526 	beq	r2,zero,1f83c <___svfprintf_internal_r+0x1950>
   1f3a8:	d9402e17 	ldw	r5,184(sp)
   1f3ac:	d8c02a17 	ldw	r3,168(sp)
   1f3b0:	002d883a 	mov	r22,zero
   1f3b4:	28800104 	addi	r2,r5,4
   1f3b8:	2d00000b 	ldhu	r20,0(r5)
   1f3bc:	183fa20e 	bge	r3,zero,1f248 <__alt_data_end+0xfffe0a48>
   1f3c0:	d8802e15 	stw	r2,184(sp)
   1f3c4:	0039883a 	mov	fp,zero
   1f3c8:	a584b03a 	or	r2,r20,r22
   1f3cc:	103c321e 	bne	r2,zero,1e498 <__alt_data_end+0xfffdfc98>
   1f3d0:	00800044 	movi	r2,1
   1f3d4:	003e5006 	br	1ed18 <__alt_data_end+0xfffe0518>
   1f3d8:	d9402d17 	ldw	r5,180(sp)
   1f3dc:	d9801e04 	addi	r6,sp,120
   1f3e0:	9809883a 	mov	r4,r19
   1f3e4:	0022bd80 	call	22bd8 <__ssprint_r>
   1f3e8:	103ba71e 	bne	r2,zero,1e288 <__alt_data_end+0xfffdfa88>
   1f3ec:	d8c02017 	ldw	r3,128(sp)
   1f3f0:	da000404 	addi	r8,sp,16
   1f3f4:	d9003217 	ldw	r4,200(sp)
   1f3f8:	d8802617 	ldw	r2,152(sp)
   1f3fc:	d9403317 	ldw	r5,204(sp)
   1f400:	8123883a 	add	r17,r16,r4
   1f404:	11400216 	blt	r2,r5,1f410 <___svfprintf_internal_r+0x1524>
   1f408:	9100004c 	andi	r4,r18,1
   1f40c:	20000d26 	beq	r4,zero,1f444 <___svfprintf_internal_r+0x1558>
   1f410:	d9003817 	ldw	r4,224(sp)
   1f414:	d9403417 	ldw	r5,208(sp)
   1f418:	1907883a 	add	r3,r3,r4
   1f41c:	d9001f17 	ldw	r4,124(sp)
   1f420:	41400015 	stw	r5,0(r8)
   1f424:	d9403817 	ldw	r5,224(sp)
   1f428:	21000044 	addi	r4,r4,1
   1f42c:	d8c02015 	stw	r3,128(sp)
   1f430:	41400115 	stw	r5,4(r8)
   1f434:	d9001f15 	stw	r4,124(sp)
   1f438:	014001c4 	movi	r5,7
   1f43c:	2901dc16 	blt	r5,r4,1fbb0 <___svfprintf_internal_r+0x1cc4>
   1f440:	42000204 	addi	r8,r8,8
   1f444:	d9003317 	ldw	r4,204(sp)
   1f448:	8121883a 	add	r16,r16,r4
   1f44c:	2085c83a 	sub	r2,r4,r2
   1f450:	8461c83a 	sub	r16,r16,r17
   1f454:	1400010e 	bge	r2,r16,1f45c <___svfprintf_internal_r+0x1570>
   1f458:	1021883a 	mov	r16,r2
   1f45c:	04000a0e 	bge	zero,r16,1f488 <___svfprintf_internal_r+0x159c>
   1f460:	d9001f17 	ldw	r4,124(sp)
   1f464:	1c07883a 	add	r3,r3,r16
   1f468:	44400015 	stw	r17,0(r8)
   1f46c:	21000044 	addi	r4,r4,1
   1f470:	44000115 	stw	r16,4(r8)
   1f474:	d8c02015 	stw	r3,128(sp)
   1f478:	d9001f15 	stw	r4,124(sp)
   1f47c:	014001c4 	movi	r5,7
   1f480:	2901e616 	blt	r5,r4,1fc1c <___svfprintf_internal_r+0x1d30>
   1f484:	42000204 	addi	r8,r8,8
   1f488:	8001f616 	blt	r16,zero,1fc64 <___svfprintf_internal_r+0x1d78>
   1f48c:	1421c83a 	sub	r16,r2,r16
   1f490:	043cfa0e 	bge	zero,r16,1e87c <__alt_data_end+0xfffe007c>
   1f494:	04400404 	movi	r17,16
   1f498:	d8801f17 	ldw	r2,124(sp)
   1f49c:	8c3edd0e 	bge	r17,r16,1f014 <__alt_data_end+0xfffe0814>
   1f4a0:	014000f4 	movhi	r5,3
   1f4a4:	2965dc84 	addi	r5,r5,-26766
   1f4a8:	d9402c15 	stw	r5,176(sp)
   1f4ac:	058001c4 	movi	r22,7
   1f4b0:	dd002d17 	ldw	r20,180(sp)
   1f4b4:	00000306 	br	1f4c4 <___svfprintf_internal_r+0x15d8>
   1f4b8:	42000204 	addi	r8,r8,8
   1f4bc:	843ffc04 	addi	r16,r16,-16
   1f4c0:	8c3ed70e 	bge	r17,r16,1f020 <__alt_data_end+0xfffe0820>
   1f4c4:	18c00404 	addi	r3,r3,16
   1f4c8:	10800044 	addi	r2,r2,1
   1f4cc:	45400015 	stw	r21,0(r8)
   1f4d0:	44400115 	stw	r17,4(r8)
   1f4d4:	d8c02015 	stw	r3,128(sp)
   1f4d8:	d8801f15 	stw	r2,124(sp)
   1f4dc:	b0bff60e 	bge	r22,r2,1f4b8 <__alt_data_end+0xfffe0cb8>
   1f4e0:	d9801e04 	addi	r6,sp,120
   1f4e4:	a00b883a 	mov	r5,r20
   1f4e8:	9809883a 	mov	r4,r19
   1f4ec:	0022bd80 	call	22bd8 <__ssprint_r>
   1f4f0:	103b651e 	bne	r2,zero,1e288 <__alt_data_end+0xfffdfa88>
   1f4f4:	d8c02017 	ldw	r3,128(sp)
   1f4f8:	d8801f17 	ldw	r2,124(sp)
   1f4fc:	da000404 	addi	r8,sp,16
   1f500:	003fee06 	br	1f4bc <__alt_data_end+0xfffe0cbc>
   1f504:	9088703a 	and	r4,r18,r2
   1f508:	203e8d1e 	bne	r4,zero,1ef40 <__alt_data_end+0xfffe0740>
   1f50c:	dc401f17 	ldw	r17,124(sp)
   1f510:	40800115 	stw	r2,4(r8)
   1f514:	44000015 	stw	r16,0(r8)
   1f518:	8c400044 	addi	r17,r17,1
   1f51c:	d8c02015 	stw	r3,128(sp)
   1f520:	dc401f15 	stw	r17,124(sp)
   1f524:	008001c4 	movi	r2,7
   1f528:	147f7f16 	blt	r2,r17,1f328 <__alt_data_end+0xfffe0b28>
   1f52c:	45800204 	addi	r22,r8,8
   1f530:	003eac06 	br	1efe4 <__alt_data_end+0xfffe07e4>
   1f534:	d9402d17 	ldw	r5,180(sp)
   1f538:	d9801e04 	addi	r6,sp,120
   1f53c:	9809883a 	mov	r4,r19
   1f540:	0022bd80 	call	22bd8 <__ssprint_r>
   1f544:	103b501e 	bne	r2,zero,1e288 <__alt_data_end+0xfffdfa88>
   1f548:	d8c02017 	ldw	r3,128(sp)
   1f54c:	dc401f17 	ldw	r17,124(sp)
   1f550:	da000404 	addi	r8,sp,16
   1f554:	003e8406 	br	1ef68 <__alt_data_end+0xfffe0768>
   1f558:	d9402d17 	ldw	r5,180(sp)
   1f55c:	d9801e04 	addi	r6,sp,120
   1f560:	9809883a 	mov	r4,r19
   1f564:	0022bd80 	call	22bd8 <__ssprint_r>
   1f568:	103b471e 	bne	r2,zero,1e288 <__alt_data_end+0xfffdfa88>
   1f56c:	d8c02017 	ldw	r3,128(sp)
   1f570:	dc401f17 	ldw	r17,124(sp)
   1f574:	dd800404 	addi	r22,sp,16
   1f578:	003e8606 	br	1ef94 <__alt_data_end+0xfffe0794>
   1f57c:	0029883a 	mov	r20,zero
   1f580:	a5000c04 	addi	r20,r20,48
   1f584:	dc001dc4 	addi	r16,sp,119
   1f588:	dd001dc5 	stb	r20,119(sp)
   1f58c:	003f3806 	br	1f270 <__alt_data_end+0xfffe0a70>
   1f590:	d9402d17 	ldw	r5,180(sp)
   1f594:	d9801e04 	addi	r6,sp,120
   1f598:	9809883a 	mov	r4,r19
   1f59c:	0022bd80 	call	22bd8 <__ssprint_r>
   1f5a0:	103b391e 	bne	r2,zero,1e288 <__alt_data_end+0xfffdfa88>
   1f5a4:	d8c02017 	ldw	r3,128(sp)
   1f5a8:	da000404 	addi	r8,sp,16
   1f5ac:	003c7306 	br	1e77c <__alt_data_end+0xfffdff7c>
   1f5b0:	d9003617 	ldw	r4,216(sp)
   1f5b4:	d9403717 	ldw	r5,220(sp)
   1f5b8:	da003e15 	stw	r8,248(sp)
   1f5bc:	000ff480 	call	ff48 <__fpclassifyd>
   1f5c0:	da003e17 	ldw	r8,248(sp)
   1f5c4:	1000bd1e 	bne	r2,zero,1f8bc <___svfprintf_internal_r+0x19d0>
   1f5c8:	008011c4 	movi	r2,71
   1f5cc:	14411e0e 	bge	r2,r17,1fa48 <___svfprintf_internal_r+0x1b5c>
   1f5d0:	040000f4 	movhi	r16,3
   1f5d4:	8424b604 	addi	r16,r16,-27944
   1f5d8:	00c000c4 	movi	r3,3
   1f5dc:	00bfdfc4 	movi	r2,-129
   1f5e0:	d8c02915 	stw	r3,164(sp)
   1f5e4:	90a4703a 	and	r18,r18,r2
   1f5e8:	df002783 	ldbu	fp,158(sp)
   1f5ec:	d8c02b15 	stw	r3,172(sp)
   1f5f0:	d8002a15 	stw	zero,168(sp)
   1f5f4:	d8003215 	stw	zero,200(sp)
   1f5f8:	003bfa06 	br	1e5e4 <__alt_data_end+0xfffdfde4>
   1f5fc:	9080100c 	andi	r2,r18,64
   1f600:	d8002785 	stb	zero,158(sp)
   1f604:	10009426 	beq	r2,zero,1f858 <___svfprintf_internal_r+0x196c>
   1f608:	d9402e17 	ldw	r5,184(sp)
   1f60c:	d8c02a17 	ldw	r3,168(sp)
   1f610:	002d883a 	mov	r22,zero
   1f614:	28800104 	addi	r2,r5,4
   1f618:	2d00000b 	ldhu	r20,0(r5)
   1f61c:	183ec10e 	bge	r3,zero,1f124 <__alt_data_end+0xfffe0924>
   1f620:	a586b03a 	or	r3,r20,r22
   1f624:	d8802e15 	stw	r2,184(sp)
   1f628:	183ec21e 	bne	r3,zero,1f134 <__alt_data_end+0xfffe0934>
   1f62c:	0039883a 	mov	fp,zero
   1f630:	0005883a 	mov	r2,zero
   1f634:	003db806 	br	1ed18 <__alt_data_end+0xfffe0518>
   1f638:	d8c02e17 	ldw	r3,184(sp)
   1f63c:	d9002e17 	ldw	r4,184(sp)
   1f640:	d9402e17 	ldw	r5,184(sp)
   1f644:	18c00017 	ldw	r3,0(r3)
   1f648:	21000117 	ldw	r4,4(r4)
   1f64c:	29400204 	addi	r5,r5,8
   1f650:	d8c03615 	stw	r3,216(sp)
   1f654:	d9003715 	stw	r4,220(sp)
   1f658:	d9402e15 	stw	r5,184(sp)
   1f65c:	003b5a06 	br	1e3c8 <__alt_data_end+0xfffdfbc8>
   1f660:	9080100c 	andi	r2,r18,64
   1f664:	10010726 	beq	r2,zero,1fa84 <___svfprintf_internal_r+0x1b98>
   1f668:	d8802e17 	ldw	r2,184(sp)
   1f66c:	1500000f 	ldh	r20,0(r2)
   1f670:	10800104 	addi	r2,r2,4
   1f674:	d8802e15 	stw	r2,184(sp)
   1f678:	a02dd7fa 	srai	r22,r20,31
   1f67c:	b005883a 	mov	r2,r22
   1f680:	003b7d06 	br	1e478 <__alt_data_end+0xfffdfc78>
   1f684:	9080100c 	andi	r2,r18,64
   1f688:	10010526 	beq	r2,zero,1faa0 <___svfprintf_internal_r+0x1bb4>
   1f68c:	d8c02e17 	ldw	r3,184(sp)
   1f690:	002d883a 	mov	r22,zero
   1f694:	1d00000b 	ldhu	r20,0(r3)
   1f698:	18c00104 	addi	r3,r3,4
   1f69c:	d8c02e15 	stw	r3,184(sp)
   1f6a0:	003ce206 	br	1ea2c <__alt_data_end+0xfffe022c>
   1f6a4:	bc400007 	ldb	r17,0(r23)
   1f6a8:	003a6506 	br	1e040 <__alt_data_end+0xfffdf840>
   1f6ac:	9080040c 	andi	r2,r18,16
   1f6b0:	10010126 	beq	r2,zero,1fab8 <___svfprintf_internal_r+0x1bcc>
   1f6b4:	d8c02e17 	ldw	r3,184(sp)
   1f6b8:	d9002f17 	ldw	r4,188(sp)
   1f6bc:	18800017 	ldw	r2,0(r3)
   1f6c0:	18c00104 	addi	r3,r3,4
   1f6c4:	d8c02e15 	stw	r3,184(sp)
   1f6c8:	11000015 	stw	r4,0(r2)
   1f6cc:	003a3206 	br	1df98 <__alt_data_end+0xfffdf798>
   1f6d0:	d9002a17 	ldw	r4,168(sp)
   1f6d4:	d8002785 	stb	zero,158(sp)
   1f6d8:	203d8d16 	blt	r4,zero,1ed10 <__alt_data_end+0xfffe0510>
   1f6dc:	00bfdfc4 	movi	r2,-129
   1f6e0:	90a4703a 	and	r18,r18,r2
   1f6e4:	003ad506 	br	1e23c <__alt_data_end+0xfffdfa3c>
   1f6e8:	014000f4 	movhi	r5,3
   1f6ec:	2965dc84 	addi	r5,r5,-26766
   1f6f0:	d9402c15 	stw	r5,176(sp)
   1f6f4:	d9402c17 	ldw	r5,176(sp)
   1f6f8:	1c47883a 	add	r3,r3,r17
   1f6fc:	10800044 	addi	r2,r2,1
   1f700:	41400015 	stw	r5,0(r8)
   1f704:	44400115 	stw	r17,4(r8)
   1f708:	d8c02015 	stw	r3,128(sp)
   1f70c:	d8801f15 	stw	r2,124(sp)
   1f710:	010001c4 	movi	r4,7
   1f714:	20bf3016 	blt	r4,r2,1f3d8 <__alt_data_end+0xfffe0bd8>
   1f718:	42000204 	addi	r8,r8,8
   1f71c:	003f3506 	br	1f3f4 <__alt_data_end+0xfffe0bf4>
   1f720:	010000f4 	movhi	r4,3
   1f724:	2125dc84 	addi	r4,r4,-26766
   1f728:	d9002c15 	stw	r4,176(sp)
   1f72c:	003c3c06 	br	1e820 <__alt_data_end+0xfffe0020>
   1f730:	d9402d17 	ldw	r5,180(sp)
   1f734:	d9801e04 	addi	r6,sp,120
   1f738:	9809883a 	mov	r4,r19
   1f73c:	0022bd80 	call	22bd8 <__ssprint_r>
   1f740:	103ad11e 	bne	r2,zero,1e288 <__alt_data_end+0xfffdfa88>
   1f744:	d8c02017 	ldw	r3,128(sp)
   1f748:	da000404 	addi	r8,sp,16
   1f74c:	003d9306 	br	1ed9c <__alt_data_end+0xfffe059c>
   1f750:	d8801f17 	ldw	r2,124(sp)
   1f754:	014000f4 	movhi	r5,3
   1f758:	01000044 	movi	r4,1
   1f75c:	18c00044 	addi	r3,r3,1
   1f760:	10800044 	addi	r2,r2,1
   1f764:	2964c304 	addi	r5,r5,-27892
   1f768:	41000115 	stw	r4,4(r8)
   1f76c:	41400015 	stw	r5,0(r8)
   1f770:	d8c02015 	stw	r3,128(sp)
   1f774:	d8801f15 	stw	r2,124(sp)
   1f778:	010001c4 	movi	r4,7
   1f77c:	2080b516 	blt	r4,r2,1fa54 <___svfprintf_internal_r+0x1b68>
   1f780:	42000204 	addi	r8,r8,8
   1f784:	8800041e 	bne	r17,zero,1f798 <___svfprintf_internal_r+0x18ac>
   1f788:	d8803317 	ldw	r2,204(sp)
   1f78c:	1000021e 	bne	r2,zero,1f798 <___svfprintf_internal_r+0x18ac>
   1f790:	9080004c 	andi	r2,r18,1
   1f794:	103c3926 	beq	r2,zero,1e87c <__alt_data_end+0xfffe007c>
   1f798:	d9003817 	ldw	r4,224(sp)
   1f79c:	d8801f17 	ldw	r2,124(sp)
   1f7a0:	d9403417 	ldw	r5,208(sp)
   1f7a4:	20c7883a 	add	r3,r4,r3
   1f7a8:	10800044 	addi	r2,r2,1
   1f7ac:	41000115 	stw	r4,4(r8)
   1f7b0:	41400015 	stw	r5,0(r8)
   1f7b4:	d8c02015 	stw	r3,128(sp)
   1f7b8:	d8801f15 	stw	r2,124(sp)
   1f7bc:	010001c4 	movi	r4,7
   1f7c0:	20818016 	blt	r4,r2,1fdc4 <___svfprintf_internal_r+0x1ed8>
   1f7c4:	42000204 	addi	r8,r8,8
   1f7c8:	0463c83a 	sub	r17,zero,r17
   1f7cc:	0440cb0e 	bge	zero,r17,1fafc <___svfprintf_internal_r+0x1c10>
   1f7d0:	05800404 	movi	r22,16
   1f7d4:	b440e80e 	bge	r22,r17,1fb78 <___svfprintf_internal_r+0x1c8c>
   1f7d8:	014000f4 	movhi	r5,3
   1f7dc:	2965dc84 	addi	r5,r5,-26766
   1f7e0:	d9402c15 	stw	r5,176(sp)
   1f7e4:	070001c4 	movi	fp,7
   1f7e8:	dd002d17 	ldw	r20,180(sp)
   1f7ec:	00000306 	br	1f7fc <___svfprintf_internal_r+0x1910>
   1f7f0:	42000204 	addi	r8,r8,8
   1f7f4:	8c7ffc04 	addi	r17,r17,-16
   1f7f8:	b440e20e 	bge	r22,r17,1fb84 <___svfprintf_internal_r+0x1c98>
   1f7fc:	18c00404 	addi	r3,r3,16
   1f800:	10800044 	addi	r2,r2,1
   1f804:	45400015 	stw	r21,0(r8)
   1f808:	45800115 	stw	r22,4(r8)
   1f80c:	d8c02015 	stw	r3,128(sp)
   1f810:	d8801f15 	stw	r2,124(sp)
   1f814:	e0bff60e 	bge	fp,r2,1f7f0 <__alt_data_end+0xfffe0ff0>
   1f818:	d9801e04 	addi	r6,sp,120
   1f81c:	a00b883a 	mov	r5,r20
   1f820:	9809883a 	mov	r4,r19
   1f824:	0022bd80 	call	22bd8 <__ssprint_r>
   1f828:	103a971e 	bne	r2,zero,1e288 <__alt_data_end+0xfffdfa88>
   1f82c:	d8c02017 	ldw	r3,128(sp)
   1f830:	d8801f17 	ldw	r2,124(sp)
   1f834:	da000404 	addi	r8,sp,16
   1f838:	003fee06 	br	1f7f4 <__alt_data_end+0xfffe0ff4>
   1f83c:	d9002e17 	ldw	r4,184(sp)
   1f840:	d9402a17 	ldw	r5,168(sp)
   1f844:	002d883a 	mov	r22,zero
   1f848:	20800104 	addi	r2,r4,4
   1f84c:	25000017 	ldw	r20,0(r4)
   1f850:	283e7d0e 	bge	r5,zero,1f248 <__alt_data_end+0xfffe0a48>
   1f854:	003eda06 	br	1f3c0 <__alt_data_end+0xfffe0bc0>
   1f858:	d9002e17 	ldw	r4,184(sp)
   1f85c:	d9402a17 	ldw	r5,168(sp)
   1f860:	002d883a 	mov	r22,zero
   1f864:	20800104 	addi	r2,r4,4
   1f868:	25000017 	ldw	r20,0(r4)
   1f86c:	283e2d0e 	bge	r5,zero,1f124 <__alt_data_end+0xfffe0924>
   1f870:	003f6b06 	br	1f620 <__alt_data_end+0xfffe0e20>
   1f874:	d8c02e15 	stw	r3,184(sp)
   1f878:	0039883a 	mov	fp,zero
   1f87c:	003ed206 	br	1f3c8 <__alt_data_end+0xfffe0bc8>
   1f880:	bc400043 	ldbu	r17,1(r23)
   1f884:	84000814 	ori	r16,r16,32
   1f888:	bdc00044 	addi	r23,r23,1
   1f88c:	8c403fcc 	andi	r17,r17,255
   1f890:	8c40201c 	xori	r17,r17,128
   1f894:	8c7fe004 	addi	r17,r17,-128
   1f898:	0039e906 	br	1e040 <__alt_data_end+0xfffdf840>
   1f89c:	d9402d17 	ldw	r5,180(sp)
   1f8a0:	d9801e04 	addi	r6,sp,120
   1f8a4:	9809883a 	mov	r4,r19
   1f8a8:	0022bd80 	call	22bd8 <__ssprint_r>
   1f8ac:	103a761e 	bne	r2,zero,1e288 <__alt_data_end+0xfffdfa88>
   1f8b0:	d8c02017 	ldw	r3,128(sp)
   1f8b4:	da000404 	addi	r8,sp,16
   1f8b8:	003d4a06 	br	1ede4 <__alt_data_end+0xfffe05e4>
   1f8bc:	d9002a17 	ldw	r4,168(sp)
   1f8c0:	05bff7c4 	movi	r22,-33
   1f8c4:	00bfffc4 	movi	r2,-1
   1f8c8:	8dac703a 	and	r22,r17,r22
   1f8cc:	20806a26 	beq	r4,r2,1fa78 <___svfprintf_internal_r+0x1b8c>
   1f8d0:	008011c4 	movi	r2,71
   1f8d4:	b0813726 	beq	r22,r2,1fdb4 <___svfprintf_internal_r+0x1ec8>
   1f8d8:	d9003717 	ldw	r4,220(sp)
   1f8dc:	90c04014 	ori	r3,r18,256
   1f8e0:	d8c02c15 	stw	r3,176(sp)
   1f8e4:	20015d16 	blt	r4,zero,1fe5c <___svfprintf_internal_r+0x1f70>
   1f8e8:	dd003717 	ldw	r20,220(sp)
   1f8ec:	d8002905 	stb	zero,164(sp)
   1f8f0:	00801984 	movi	r2,102
   1f8f4:	88814026 	beq	r17,r2,1fdf8 <___svfprintf_internal_r+0x1f0c>
   1f8f8:	00801184 	movi	r2,70
   1f8fc:	88817126 	beq	r17,r2,1fec4 <___svfprintf_internal_r+0x1fd8>
   1f900:	00801144 	movi	r2,69
   1f904:	b0816226 	beq	r22,r2,1fe90 <___svfprintf_internal_r+0x1fa4>
   1f908:	d8c02a17 	ldw	r3,168(sp)
   1f90c:	d8802104 	addi	r2,sp,132
   1f910:	d8800315 	stw	r2,12(sp)
   1f914:	d9403617 	ldw	r5,216(sp)
   1f918:	d8802504 	addi	r2,sp,148
   1f91c:	d8800215 	stw	r2,8(sp)
   1f920:	d8802604 	addi	r2,sp,152
   1f924:	d8c00015 	stw	r3,0(sp)
   1f928:	d8800115 	stw	r2,4(sp)
   1f92c:	01c00084 	movi	r7,2
   1f930:	a00d883a 	mov	r6,r20
   1f934:	9809883a 	mov	r4,r19
   1f938:	d8c03d15 	stw	r3,244(sp)
   1f93c:	da003e15 	stw	r8,248(sp)
   1f940:	00179680 	call	17968 <_dtoa_r>
   1f944:	1021883a 	mov	r16,r2
   1f948:	008019c4 	movi	r2,103
   1f94c:	d8c03d17 	ldw	r3,244(sp)
   1f950:	da003e17 	ldw	r8,248(sp)
   1f954:	8880e726 	beq	r17,r2,1fcf4 <___svfprintf_internal_r+0x1e08>
   1f958:	008011c4 	movi	r2,71
   1f95c:	8880d426 	beq	r17,r2,1fcb0 <___svfprintf_internal_r+0x1dc4>
   1f960:	80f9883a 	add	fp,r16,r3
   1f964:	d9003617 	ldw	r4,216(sp)
   1f968:	000d883a 	mov	r6,zero
   1f96c:	000f883a 	mov	r7,zero
   1f970:	a00b883a 	mov	r5,r20
   1f974:	da003e15 	stw	r8,248(sp)
   1f978:	0026d1c0 	call	26d1c <__eqdf2>
   1f97c:	da003e17 	ldw	r8,248(sp)
   1f980:	1000e426 	beq	r2,zero,1fd14 <___svfprintf_internal_r+0x1e28>
   1f984:	d8802117 	ldw	r2,132(sp)
   1f988:	1700062e 	bgeu	r2,fp,1f9a4 <___svfprintf_internal_r+0x1ab8>
   1f98c:	01000c04 	movi	r4,48
   1f990:	10c00044 	addi	r3,r2,1
   1f994:	d8c02115 	stw	r3,132(sp)
   1f998:	11000005 	stb	r4,0(r2)
   1f99c:	d8802117 	ldw	r2,132(sp)
   1f9a0:	173ffb36 	bltu	r2,fp,1f990 <__alt_data_end+0xfffe1190>
   1f9a4:	1405c83a 	sub	r2,r2,r16
   1f9a8:	d8803315 	stw	r2,204(sp)
   1f9ac:	008011c4 	movi	r2,71
   1f9b0:	b080c526 	beq	r22,r2,1fcc8 <___svfprintf_internal_r+0x1ddc>
   1f9b4:	00801944 	movi	r2,101
   1f9b8:	1441d80e 	bge	r2,r17,2011c <___svfprintf_internal_r+0x2230>
   1f9bc:	d8c02617 	ldw	r3,152(sp)
   1f9c0:	00801984 	movi	r2,102
   1f9c4:	d8c03215 	stw	r3,200(sp)
   1f9c8:	88813426 	beq	r17,r2,1fe9c <___svfprintf_internal_r+0x1fb0>
   1f9cc:	d8c03217 	ldw	r3,200(sp)
   1f9d0:	d9003317 	ldw	r4,204(sp)
   1f9d4:	19012516 	blt	r3,r4,1fe6c <___svfprintf_internal_r+0x1f80>
   1f9d8:	9480004c 	andi	r18,r18,1
   1f9dc:	9001841e 	bne	r18,zero,1fff0 <___svfprintf_internal_r+0x2104>
   1f9e0:	1805883a 	mov	r2,r3
   1f9e4:	1801cb16 	blt	r3,zero,20114 <___svfprintf_internal_r+0x2228>
   1f9e8:	d8c03217 	ldw	r3,200(sp)
   1f9ec:	044019c4 	movi	r17,103
   1f9f0:	d8c02b15 	stw	r3,172(sp)
   1f9f4:	df002907 	ldb	fp,164(sp)
   1f9f8:	e000a61e 	bne	fp,zero,1fc94 <___svfprintf_internal_r+0x1da8>
   1f9fc:	df002783 	ldbu	fp,158(sp)
   1fa00:	d8802915 	stw	r2,164(sp)
   1fa04:	dc802c17 	ldw	r18,176(sp)
   1fa08:	d8002a15 	stw	zero,168(sp)
   1fa0c:	003af506 	br	1e5e4 <__alt_data_end+0xfffdfde4>
   1fa10:	040000f4 	movhi	r16,3
   1fa14:	8424b304 	addi	r16,r16,-27956
   1fa18:	003a7e06 	br	1e414 <__alt_data_end+0xfffdfc14>
   1fa1c:	d9003917 	ldw	r4,228(sp)
   1fa20:	04001004 	movi	r16,64
   1fa24:	800b883a 	mov	r5,r16
   1fa28:	0011e300 	call	11e30 <_malloc_r>
   1fa2c:	d9002d17 	ldw	r4,180(sp)
   1fa30:	20800015 	stw	r2,0(r4)
   1fa34:	20800415 	stw	r2,16(r4)
   1fa38:	1001d026 	beq	r2,zero,2017c <___svfprintf_internal_r+0x2290>
   1fa3c:	d8802d17 	ldw	r2,180(sp)
   1fa40:	14000515 	stw	r16,20(r2)
   1fa44:	00394406 	br	1df58 <__alt_data_end+0xfffdf758>
   1fa48:	040000f4 	movhi	r16,3
   1fa4c:	8424b504 	addi	r16,r16,-27948
   1fa50:	003ee106 	br	1f5d8 <__alt_data_end+0xfffe0dd8>
   1fa54:	d9402d17 	ldw	r5,180(sp)
   1fa58:	d9801e04 	addi	r6,sp,120
   1fa5c:	9809883a 	mov	r4,r19
   1fa60:	0022bd80 	call	22bd8 <__ssprint_r>
   1fa64:	103a081e 	bne	r2,zero,1e288 <__alt_data_end+0xfffdfa88>
   1fa68:	dc402617 	ldw	r17,152(sp)
   1fa6c:	d8c02017 	ldw	r3,128(sp)
   1fa70:	da000404 	addi	r8,sp,16
   1fa74:	003f4306 	br	1f784 <__alt_data_end+0xfffe0f84>
   1fa78:	01400184 	movi	r5,6
   1fa7c:	d9402a15 	stw	r5,168(sp)
   1fa80:	003f9506 	br	1f8d8 <__alt_data_end+0xfffe10d8>
   1fa84:	d8c02e17 	ldw	r3,184(sp)
   1fa88:	1d000017 	ldw	r20,0(r3)
   1fa8c:	18c00104 	addi	r3,r3,4
   1fa90:	d8c02e15 	stw	r3,184(sp)
   1fa94:	a02dd7fa 	srai	r22,r20,31
   1fa98:	b005883a 	mov	r2,r22
   1fa9c:	003a7606 	br	1e478 <__alt_data_end+0xfffdfc78>
   1faa0:	d9002e17 	ldw	r4,184(sp)
   1faa4:	002d883a 	mov	r22,zero
   1faa8:	25000017 	ldw	r20,0(r4)
   1faac:	21000104 	addi	r4,r4,4
   1fab0:	d9002e15 	stw	r4,184(sp)
   1fab4:	003bdd06 	br	1ea2c <__alt_data_end+0xfffe022c>
   1fab8:	9480100c 	andi	r18,r18,64
   1fabc:	90006e26 	beq	r18,zero,1fc78 <___svfprintf_internal_r+0x1d8c>
   1fac0:	d9402e17 	ldw	r5,184(sp)
   1fac4:	d8c02f17 	ldw	r3,188(sp)
   1fac8:	28800017 	ldw	r2,0(r5)
   1facc:	29400104 	addi	r5,r5,4
   1fad0:	d9402e15 	stw	r5,184(sp)
   1fad4:	10c0000d 	sth	r3,0(r2)
   1fad8:	00392f06 	br	1df98 <__alt_data_end+0xfffdf798>
   1fadc:	d9402d17 	ldw	r5,180(sp)
   1fae0:	d9801e04 	addi	r6,sp,120
   1fae4:	9809883a 	mov	r4,r19
   1fae8:	0022bd80 	call	22bd8 <__ssprint_r>
   1faec:	1039e61e 	bne	r2,zero,1e288 <__alt_data_end+0xfffdfa88>
   1faf0:	d8c02017 	ldw	r3,128(sp)
   1faf4:	d8801f17 	ldw	r2,124(sp)
   1faf8:	da000404 	addi	r8,sp,16
   1fafc:	d9403317 	ldw	r5,204(sp)
   1fb00:	10800044 	addi	r2,r2,1
   1fb04:	44000015 	stw	r16,0(r8)
   1fb08:	28c7883a 	add	r3,r5,r3
   1fb0c:	003b5506 	br	1e864 <__alt_data_end+0xfffe0064>
   1fb10:	8009883a 	mov	r4,r16
   1fb14:	df003e15 	stw	fp,248(sp)
   1fb18:	00137600 	call	13760 <strlen>
   1fb1c:	d8802b15 	stw	r2,172(sp)
   1fb20:	da003e17 	ldw	r8,248(sp)
   1fb24:	103c160e 	bge	r2,zero,1eb80 <__alt_data_end+0xfffe0380>
   1fb28:	0005883a 	mov	r2,zero
   1fb2c:	003c1406 	br	1eb80 <__alt_data_end+0xfffe0380>
   1fb30:	00bfffc4 	movi	r2,-1
   1fb34:	0039d906 	br	1e29c <__alt_data_end+0xfffdfa9c>
   1fb38:	010000f4 	movhi	r4,3
   1fb3c:	2125e084 	addi	r4,r4,-26750
   1fb40:	d9003515 	stw	r4,212(sp)
   1fb44:	003ae406 	br	1e6d8 <__alt_data_end+0xfffdfed8>
   1fb48:	013fffc4 	movi	r4,-1
   1fb4c:	0039fa06 	br	1e338 <__alt_data_end+0xfffdfb38>
   1fb50:	d9402d17 	ldw	r5,180(sp)
   1fb54:	d9801e04 	addi	r6,sp,120
   1fb58:	9809883a 	mov	r4,r19
   1fb5c:	0022bd80 	call	22bd8 <__ssprint_r>
   1fb60:	1039c91e 	bne	r2,zero,1e288 <__alt_data_end+0xfffdfa88>
   1fb64:	d8c02017 	ldw	r3,128(sp)
   1fb68:	da000404 	addi	r8,sp,16
   1fb6c:	003d8406 	br	1f180 <__alt_data_end+0xfffe0980>
   1fb70:	0023883a 	mov	r17,zero
   1fb74:	003d8306 	br	1f184 <__alt_data_end+0xfffe0984>
   1fb78:	010000f4 	movhi	r4,3
   1fb7c:	2125dc84 	addi	r4,r4,-26766
   1fb80:	d9002c15 	stw	r4,176(sp)
   1fb84:	d9002c17 	ldw	r4,176(sp)
   1fb88:	1c47883a 	add	r3,r3,r17
   1fb8c:	10800044 	addi	r2,r2,1
   1fb90:	41000015 	stw	r4,0(r8)
   1fb94:	44400115 	stw	r17,4(r8)
   1fb98:	d8c02015 	stw	r3,128(sp)
   1fb9c:	d8801f15 	stw	r2,124(sp)
   1fba0:	010001c4 	movi	r4,7
   1fba4:	20bfcd16 	blt	r4,r2,1fadc <__alt_data_end+0xfffe12dc>
   1fba8:	42000204 	addi	r8,r8,8
   1fbac:	003fd306 	br	1fafc <__alt_data_end+0xfffe12fc>
   1fbb0:	d9402d17 	ldw	r5,180(sp)
   1fbb4:	d9801e04 	addi	r6,sp,120
   1fbb8:	9809883a 	mov	r4,r19
   1fbbc:	0022bd80 	call	22bd8 <__ssprint_r>
   1fbc0:	1039b11e 	bne	r2,zero,1e288 <__alt_data_end+0xfffdfa88>
   1fbc4:	d8802617 	ldw	r2,152(sp)
   1fbc8:	d8c02017 	ldw	r3,128(sp)
   1fbcc:	da000404 	addi	r8,sp,16
   1fbd0:	003e1c06 	br	1f444 <__alt_data_end+0xfffe0c44>
   1fbd4:	d8802a17 	ldw	r2,168(sp)
   1fbd8:	00c00184 	movi	r3,6
   1fbdc:	1880012e 	bgeu	r3,r2,1fbe4 <___svfprintf_internal_r+0x1cf8>
   1fbe0:	1805883a 	mov	r2,r3
   1fbe4:	d8802b15 	stw	r2,172(sp)
   1fbe8:	1000f316 	blt	r2,zero,1ffb8 <___svfprintf_internal_r+0x20cc>
   1fbec:	040000f4 	movhi	r16,3
   1fbf0:	d8802915 	stw	r2,164(sp)
   1fbf4:	dd002e15 	stw	r20,184(sp)
   1fbf8:	d8002a15 	stw	zero,168(sp)
   1fbfc:	d8003215 	stw	zero,200(sp)
   1fc00:	8424c104 	addi	r16,r16,-27900
   1fc04:	0039883a 	mov	fp,zero
   1fc08:	003a7d06 	br	1e600 <__alt_data_end+0xfffdfe00>
   1fc0c:	010000f4 	movhi	r4,3
   1fc10:	2125e084 	addi	r4,r4,-26750
   1fc14:	d9003515 	stw	r4,212(sp)
   1fc18:	003b3d06 	br	1e910 <__alt_data_end+0xfffe0110>
   1fc1c:	d9402d17 	ldw	r5,180(sp)
   1fc20:	d9801e04 	addi	r6,sp,120
   1fc24:	9809883a 	mov	r4,r19
   1fc28:	0022bd80 	call	22bd8 <__ssprint_r>
   1fc2c:	1039961e 	bne	r2,zero,1e288 <__alt_data_end+0xfffdfa88>
   1fc30:	d8802617 	ldw	r2,152(sp)
   1fc34:	d9403317 	ldw	r5,204(sp)
   1fc38:	d8c02017 	ldw	r3,128(sp)
   1fc3c:	da000404 	addi	r8,sp,16
   1fc40:	2885c83a 	sub	r2,r5,r2
   1fc44:	003e1006 	br	1f488 <__alt_data_end+0xfffe0c88>
   1fc48:	00800044 	movi	r2,1
   1fc4c:	10803fcc 	andi	r2,r2,255
   1fc50:	00c00044 	movi	r3,1
   1fc54:	10fa1026 	beq	r2,r3,1e498 <__alt_data_end+0xfffdfc98>
   1fc58:	00c00084 	movi	r3,2
   1fc5c:	10fb8226 	beq	r2,r3,1ea68 <__alt_data_end+0xfffe0268>
   1fc60:	003a4206 	br	1e56c <__alt_data_end+0xfffdfd6c>
   1fc64:	0021883a 	mov	r16,zero
   1fc68:	003e0806 	br	1f48c <__alt_data_end+0xfffe0c8c>
   1fc6c:	07000b44 	movi	fp,45
   1fc70:	df002785 	stb	fp,158(sp)
   1fc74:	0039e306 	br	1e404 <__alt_data_end+0xfffdfc04>
   1fc78:	d9002e17 	ldw	r4,184(sp)
   1fc7c:	d9402f17 	ldw	r5,188(sp)
   1fc80:	20800017 	ldw	r2,0(r4)
   1fc84:	21000104 	addi	r4,r4,4
   1fc88:	d9002e15 	stw	r4,184(sp)
   1fc8c:	11400015 	stw	r5,0(r2)
   1fc90:	0038c106 	br	1df98 <__alt_data_end+0xfffdf798>
   1fc94:	00c00b44 	movi	r3,45
   1fc98:	d8c02785 	stb	r3,158(sp)
   1fc9c:	d8802915 	stw	r2,164(sp)
   1fca0:	dc802c17 	ldw	r18,176(sp)
   1fca4:	d8002a15 	stw	zero,168(sp)
   1fca8:	07000b44 	movi	fp,45
   1fcac:	003a5106 	br	1e5f4 <__alt_data_end+0xfffdfdf4>
   1fcb0:	9080004c 	andi	r2,r18,1
   1fcb4:	1000941e 	bne	r2,zero,1ff08 <___svfprintf_internal_r+0x201c>
   1fcb8:	d8802117 	ldw	r2,132(sp)
   1fcbc:	1405c83a 	sub	r2,r2,r16
   1fcc0:	d8803315 	stw	r2,204(sp)
   1fcc4:	b441151e 	bne	r22,r17,2011c <___svfprintf_internal_r+0x2230>
   1fcc8:	dd802617 	ldw	r22,152(sp)
   1fccc:	00bfff44 	movi	r2,-3
   1fcd0:	b0801a16 	blt	r22,r2,1fd3c <___svfprintf_internal_r+0x1e50>
   1fcd4:	d9402a17 	ldw	r5,168(sp)
   1fcd8:	2d801816 	blt	r5,r22,1fd3c <___svfprintf_internal_r+0x1e50>
   1fcdc:	dd803215 	stw	r22,200(sp)
   1fce0:	003f3a06 	br	1f9cc <__alt_data_end+0xfffe11cc>
   1fce4:	1025883a 	mov	r18,r2
   1fce8:	0039883a 	mov	fp,zero
   1fcec:	00800084 	movi	r2,2
   1fcf0:	003fd606 	br	1fc4c <__alt_data_end+0xfffe144c>
   1fcf4:	9080004c 	andi	r2,r18,1
   1fcf8:	103f191e 	bne	r2,zero,1f960 <__alt_data_end+0xfffe1160>
   1fcfc:	d8802117 	ldw	r2,132(sp)
   1fd00:	003f2806 	br	1f9a4 <__alt_data_end+0xfffe11a4>
   1fd04:	010000f4 	movhi	r4,3
   1fd08:	2125dc84 	addi	r4,r4,-26766
   1fd0c:	d9002c15 	stw	r4,176(sp)
   1fd10:	003c7c06 	br	1ef04 <__alt_data_end+0xfffe0704>
   1fd14:	e005883a 	mov	r2,fp
   1fd18:	003f2206 	br	1f9a4 <__alt_data_end+0xfffe11a4>
   1fd1c:	d9002a17 	ldw	r4,168(sp)
   1fd20:	df002783 	ldbu	fp,158(sp)
   1fd24:	dd002e15 	stw	r20,184(sp)
   1fd28:	d9002915 	stw	r4,164(sp)
   1fd2c:	d9002b15 	stw	r4,172(sp)
   1fd30:	d8002a15 	stw	zero,168(sp)
   1fd34:	d8003215 	stw	zero,200(sp)
   1fd38:	003a2a06 	br	1e5e4 <__alt_data_end+0xfffdfde4>
   1fd3c:	8c7fff84 	addi	r17,r17,-2
   1fd40:	b5bfffc4 	addi	r22,r22,-1
   1fd44:	dd802615 	stw	r22,152(sp)
   1fd48:	dc4022c5 	stb	r17,139(sp)
   1fd4c:	b000c316 	blt	r22,zero,2005c <___svfprintf_internal_r+0x2170>
   1fd50:	00800ac4 	movi	r2,43
   1fd54:	d8802305 	stb	r2,140(sp)
   1fd58:	00800244 	movi	r2,9
   1fd5c:	15806e16 	blt	r2,r22,1ff18 <___svfprintf_internal_r+0x202c>
   1fd60:	00800c04 	movi	r2,48
   1fd64:	b5800c04 	addi	r22,r22,48
   1fd68:	d8802345 	stb	r2,141(sp)
   1fd6c:	dd802385 	stb	r22,142(sp)
   1fd70:	d88023c4 	addi	r2,sp,143
   1fd74:	df0022c4 	addi	fp,sp,139
   1fd78:	d8c03317 	ldw	r3,204(sp)
   1fd7c:	1739c83a 	sub	fp,r2,fp
   1fd80:	d9003317 	ldw	r4,204(sp)
   1fd84:	e0c7883a 	add	r3,fp,r3
   1fd88:	df003b15 	stw	fp,236(sp)
   1fd8c:	d8c02b15 	stw	r3,172(sp)
   1fd90:	00800044 	movi	r2,1
   1fd94:	1100b70e 	bge	r2,r4,20074 <___svfprintf_internal_r+0x2188>
   1fd98:	d8c02b17 	ldw	r3,172(sp)
   1fd9c:	18c00044 	addi	r3,r3,1
   1fda0:	d8c02b15 	stw	r3,172(sp)
   1fda4:	1805883a 	mov	r2,r3
   1fda8:	1800b016 	blt	r3,zero,2006c <___svfprintf_internal_r+0x2180>
   1fdac:	d8003215 	stw	zero,200(sp)
   1fdb0:	003f1006 	br	1f9f4 <__alt_data_end+0xfffe11f4>
   1fdb4:	d8802a17 	ldw	r2,168(sp)
   1fdb8:	103ec71e 	bne	r2,zero,1f8d8 <__alt_data_end+0xfffe10d8>
   1fdbc:	dc002a15 	stw	r16,168(sp)
   1fdc0:	003ec506 	br	1f8d8 <__alt_data_end+0xfffe10d8>
   1fdc4:	d9402d17 	ldw	r5,180(sp)
   1fdc8:	d9801e04 	addi	r6,sp,120
   1fdcc:	9809883a 	mov	r4,r19
   1fdd0:	0022bd80 	call	22bd8 <__ssprint_r>
   1fdd4:	10392c1e 	bne	r2,zero,1e288 <__alt_data_end+0xfffdfa88>
   1fdd8:	dc402617 	ldw	r17,152(sp)
   1fddc:	d8c02017 	ldw	r3,128(sp)
   1fde0:	d8801f17 	ldw	r2,124(sp)
   1fde4:	da000404 	addi	r8,sp,16
   1fde8:	003e7706 	br	1f7c8 <__alt_data_end+0xfffe0fc8>
   1fdec:	182f883a 	mov	r23,r3
   1fdf0:	d8002a15 	stw	zero,168(sp)
   1fdf4:	00389306 	br	1e044 <__alt_data_end+0xfffdf844>
   1fdf8:	d8c02a17 	ldw	r3,168(sp)
   1fdfc:	d8802104 	addi	r2,sp,132
   1fe00:	d8800315 	stw	r2,12(sp)
   1fe04:	d9403617 	ldw	r5,216(sp)
   1fe08:	d8802504 	addi	r2,sp,148
   1fe0c:	d8800215 	stw	r2,8(sp)
   1fe10:	d8802604 	addi	r2,sp,152
   1fe14:	d8c00015 	stw	r3,0(sp)
   1fe18:	9809883a 	mov	r4,r19
   1fe1c:	d8800115 	stw	r2,4(sp)
   1fe20:	01c000c4 	movi	r7,3
   1fe24:	a00d883a 	mov	r6,r20
   1fe28:	da003e15 	stw	r8,248(sp)
   1fe2c:	00179680 	call	17968 <_dtoa_r>
   1fe30:	d9002a17 	ldw	r4,168(sp)
   1fe34:	da003e17 	ldw	r8,248(sp)
   1fe38:	1021883a 	mov	r16,r2
   1fe3c:	1139883a 	add	fp,r2,r4
   1fe40:	2007883a 	mov	r3,r4
   1fe44:	81000007 	ldb	r4,0(r16)
   1fe48:	00800c04 	movi	r2,48
   1fe4c:	20806f26 	beq	r4,r2,2000c <___svfprintf_internal_r+0x2120>
   1fe50:	d8c02617 	ldw	r3,152(sp)
   1fe54:	e0f9883a 	add	fp,fp,r3
   1fe58:	003ec206 	br	1f964 <__alt_data_end+0xfffe1164>
   1fe5c:	00c00b44 	movi	r3,45
   1fe60:	2520003c 	xorhi	r20,r4,32768
   1fe64:	d8c02905 	stb	r3,164(sp)
   1fe68:	003ea106 	br	1f8f0 <__alt_data_end+0xfffe10f0>
   1fe6c:	d8c03217 	ldw	r3,200(sp)
   1fe70:	00c0890e 	bge	zero,r3,20098 <___svfprintf_internal_r+0x21ac>
   1fe74:	00800044 	movi	r2,1
   1fe78:	d9003317 	ldw	r4,204(sp)
   1fe7c:	1105883a 	add	r2,r2,r4
   1fe80:	d8802b15 	stw	r2,172(sp)
   1fe84:	10005f16 	blt	r2,zero,20004 <___svfprintf_internal_r+0x2118>
   1fe88:	044019c4 	movi	r17,103
   1fe8c:	003ed906 	br	1f9f4 <__alt_data_end+0xfffe11f4>
   1fe90:	d9002a17 	ldw	r4,168(sp)
   1fe94:	20c00044 	addi	r3,r4,1
   1fe98:	003e9c06 	br	1f90c <__alt_data_end+0xfffe110c>
   1fe9c:	d9002a17 	ldw	r4,168(sp)
   1fea0:	00c0680e 	bge	zero,r3,20044 <___svfprintf_internal_r+0x2158>
   1fea4:	2000461e 	bne	r4,zero,1ffc0 <___svfprintf_internal_r+0x20d4>
   1fea8:	9480004c 	andi	r18,r18,1
   1feac:	9000441e 	bne	r18,zero,1ffc0 <___svfprintf_internal_r+0x20d4>
   1feb0:	1805883a 	mov	r2,r3
   1feb4:	1800a116 	blt	r3,zero,2013c <___svfprintf_internal_r+0x2250>
   1feb8:	d8c03217 	ldw	r3,200(sp)
   1febc:	d8c02b15 	stw	r3,172(sp)
   1fec0:	003ecc06 	br	1f9f4 <__alt_data_end+0xfffe11f4>
   1fec4:	d9402a17 	ldw	r5,168(sp)
   1fec8:	d8802104 	addi	r2,sp,132
   1fecc:	d8800315 	stw	r2,12(sp)
   1fed0:	d9400015 	stw	r5,0(sp)
   1fed4:	d8802504 	addi	r2,sp,148
   1fed8:	d9403617 	ldw	r5,216(sp)
   1fedc:	d8800215 	stw	r2,8(sp)
   1fee0:	d8802604 	addi	r2,sp,152
   1fee4:	d8800115 	stw	r2,4(sp)
   1fee8:	01c000c4 	movi	r7,3
   1feec:	a00d883a 	mov	r6,r20
   1fef0:	9809883a 	mov	r4,r19
   1fef4:	da003e15 	stw	r8,248(sp)
   1fef8:	00179680 	call	17968 <_dtoa_r>
   1fefc:	d8c02a17 	ldw	r3,168(sp)
   1ff00:	da003e17 	ldw	r8,248(sp)
   1ff04:	1021883a 	mov	r16,r2
   1ff08:	00801184 	movi	r2,70
   1ff0c:	80f9883a 	add	fp,r16,r3
   1ff10:	88bfcc26 	beq	r17,r2,1fe44 <__alt_data_end+0xfffe1644>
   1ff14:	003e9306 	br	1f964 <__alt_data_end+0xfffe1164>
   1ff18:	df0022c4 	addi	fp,sp,139
   1ff1c:	dc002a15 	stw	r16,168(sp)
   1ff20:	9829883a 	mov	r20,r19
   1ff24:	e021883a 	mov	r16,fp
   1ff28:	4027883a 	mov	r19,r8
   1ff2c:	b009883a 	mov	r4,r22
   1ff30:	01400284 	movi	r5,10
   1ff34:	002574c0 	call	2574c <__modsi3>
   1ff38:	10800c04 	addi	r2,r2,48
   1ff3c:	843fffc4 	addi	r16,r16,-1
   1ff40:	b009883a 	mov	r4,r22
   1ff44:	01400284 	movi	r5,10
   1ff48:	80800005 	stb	r2,0(r16)
   1ff4c:	00256c80 	call	256c8 <__divsi3>
   1ff50:	102d883a 	mov	r22,r2
   1ff54:	00800244 	movi	r2,9
   1ff58:	15bff416 	blt	r2,r22,1ff2c <__alt_data_end+0xfffe172c>
   1ff5c:	9811883a 	mov	r8,r19
   1ff60:	b0800c04 	addi	r2,r22,48
   1ff64:	a027883a 	mov	r19,r20
   1ff68:	8029883a 	mov	r20,r16
   1ff6c:	a17fffc4 	addi	r5,r20,-1
   1ff70:	a0bfffc5 	stb	r2,-1(r20)
   1ff74:	dc002a17 	ldw	r16,168(sp)
   1ff78:	2f00782e 	bgeu	r5,fp,2015c <___svfprintf_internal_r+0x2270>
   1ff7c:	d9c02384 	addi	r7,sp,142
   1ff80:	3d0fc83a 	sub	r7,r7,r20
   1ff84:	d9002344 	addi	r4,sp,141
   1ff88:	e1cf883a 	add	r7,fp,r7
   1ff8c:	00000106 	br	1ff94 <___svfprintf_internal_r+0x20a8>
   1ff90:	28800003 	ldbu	r2,0(r5)
   1ff94:	20800005 	stb	r2,0(r4)
   1ff98:	21000044 	addi	r4,r4,1
   1ff9c:	29400044 	addi	r5,r5,1
   1ffa0:	21fffb1e 	bne	r4,r7,1ff90 <__alt_data_end+0xfffe1790>
   1ffa4:	d8802304 	addi	r2,sp,140
   1ffa8:	1505c83a 	sub	r2,r2,r20
   1ffac:	d8c02344 	addi	r3,sp,141
   1ffb0:	1885883a 	add	r2,r3,r2
   1ffb4:	003f7006 	br	1fd78 <__alt_data_end+0xfffe1578>
   1ffb8:	0005883a 	mov	r2,zero
   1ffbc:	003f0b06 	br	1fbec <__alt_data_end+0xfffe13ec>
   1ffc0:	d9002a17 	ldw	r4,168(sp)
   1ffc4:	d8c03217 	ldw	r3,200(sp)
   1ffc8:	20800044 	addi	r2,r4,1
   1ffcc:	1885883a 	add	r2,r3,r2
   1ffd0:	d8802b15 	stw	r2,172(sp)
   1ffd4:	103e870e 	bge	r2,zero,1f9f4 <__alt_data_end+0xfffe11f4>
   1ffd8:	0005883a 	mov	r2,zero
   1ffdc:	003e8506 	br	1f9f4 <__alt_data_end+0xfffe11f4>
   1ffe0:	010000f4 	movhi	r4,3
   1ffe4:	2125dc84 	addi	r4,r4,-26766
   1ffe8:	d9002c15 	stw	r4,176(sp)
   1ffec:	003cc506 	br	1f304 <__alt_data_end+0xfffe0b04>
   1fff0:	d8c03217 	ldw	r3,200(sp)
   1fff4:	18c00044 	addi	r3,r3,1
   1fff8:	d8c02b15 	stw	r3,172(sp)
   1fffc:	1805883a 	mov	r2,r3
   20000:	183fa10e 	bge	r3,zero,1fe88 <__alt_data_end+0xfffe1688>
   20004:	0005883a 	mov	r2,zero
   20008:	003f9f06 	br	1fe88 <__alt_data_end+0xfffe1688>
   2000c:	d9003617 	ldw	r4,216(sp)
   20010:	000d883a 	mov	r6,zero
   20014:	000f883a 	mov	r7,zero
   20018:	a00b883a 	mov	r5,r20
   2001c:	d8c03d15 	stw	r3,244(sp)
   20020:	da003e15 	stw	r8,248(sp)
   20024:	0026d1c0 	call	26d1c <__eqdf2>
   20028:	d8c03d17 	ldw	r3,244(sp)
   2002c:	da003e17 	ldw	r8,248(sp)
   20030:	103f8726 	beq	r2,zero,1fe50 <__alt_data_end+0xfffe1650>
   20034:	00800044 	movi	r2,1
   20038:	10c7c83a 	sub	r3,r2,r3
   2003c:	d8c02615 	stw	r3,152(sp)
   20040:	003f8406 	br	1fe54 <__alt_data_end+0xfffe1654>
   20044:	20000e1e 	bne	r4,zero,20080 <___svfprintf_internal_r+0x2194>
   20048:	9480004c 	andi	r18,r18,1
   2004c:	90000c1e 	bne	r18,zero,20080 <___svfprintf_internal_r+0x2194>
   20050:	00800044 	movi	r2,1
   20054:	d8802b15 	stw	r2,172(sp)
   20058:	003e6606 	br	1f9f4 <__alt_data_end+0xfffe11f4>
   2005c:	00800b44 	movi	r2,45
   20060:	05adc83a 	sub	r22,zero,r22
   20064:	d8802305 	stb	r2,140(sp)
   20068:	003f3b06 	br	1fd58 <__alt_data_end+0xfffe1558>
   2006c:	0005883a 	mov	r2,zero
   20070:	003f4e06 	br	1fdac <__alt_data_end+0xfffe15ac>
   20074:	90a4703a 	and	r18,r18,r2
   20078:	903f4a26 	beq	r18,zero,1fda4 <__alt_data_end+0xfffe15a4>
   2007c:	003f4606 	br	1fd98 <__alt_data_end+0xfffe1598>
   20080:	d8c02a17 	ldw	r3,168(sp)
   20084:	18c00084 	addi	r3,r3,2
   20088:	d8c02b15 	stw	r3,172(sp)
   2008c:	1805883a 	mov	r2,r3
   20090:	183e580e 	bge	r3,zero,1f9f4 <__alt_data_end+0xfffe11f4>
   20094:	003fd006 	br	1ffd8 <__alt_data_end+0xfffe17d8>
   20098:	00800084 	movi	r2,2
   2009c:	10c5c83a 	sub	r2,r2,r3
   200a0:	003f7506 	br	1fe78 <__alt_data_end+0xfffe1678>
   200a4:	d9402e17 	ldw	r5,184(sp)
   200a8:	d9002e17 	ldw	r4,184(sp)
   200ac:	bc400043 	ldbu	r17,1(r23)
   200b0:	29400017 	ldw	r5,0(r5)
   200b4:	20800104 	addi	r2,r4,4
   200b8:	d8802e15 	stw	r2,184(sp)
   200bc:	d9402a15 	stw	r5,168(sp)
   200c0:	182f883a 	mov	r23,r3
   200c4:	283df10e 	bge	r5,zero,1f88c <__alt_data_end+0xfffe108c>
   200c8:	8c403fcc 	andi	r17,r17,255
   200cc:	017fffc4 	movi	r5,-1
   200d0:	8c40201c 	xori	r17,r17,128
   200d4:	d9402a15 	stw	r5,168(sp)
   200d8:	8c7fe004 	addi	r17,r17,-128
   200dc:	0037d806 	br	1e040 <__alt_data_end+0xfffdf840>
   200e0:	9080004c 	andi	r2,r18,1
   200e4:	0039883a 	mov	fp,zero
   200e8:	10000726 	beq	r2,zero,20108 <___svfprintf_internal_r+0x221c>
   200ec:	d8c02817 	ldw	r3,160(sp)
   200f0:	dc001dc4 	addi	r16,sp,119
   200f4:	00800c04 	movi	r2,48
   200f8:	1c07c83a 	sub	r3,r3,r16
   200fc:	d8801dc5 	stb	r2,119(sp)
   20100:	d8c02b15 	stw	r3,172(sp)
   20104:	00393106 	br	1e5cc <__alt_data_end+0xfffdfdcc>
   20108:	d8002b15 	stw	zero,172(sp)
   2010c:	dc001e04 	addi	r16,sp,120
   20110:	00392e06 	br	1e5cc <__alt_data_end+0xfffdfdcc>
   20114:	0005883a 	mov	r2,zero
   20118:	003e3306 	br	1f9e8 <__alt_data_end+0xfffe11e8>
   2011c:	dd802617 	ldw	r22,152(sp)
   20120:	003f0706 	br	1fd40 <__alt_data_end+0xfffe1540>
   20124:	d8c02b03 	ldbu	r3,172(sp)
   20128:	d8c02785 	stb	r3,158(sp)
   2012c:	003a3506 	br	1ea04 <__alt_data_end+0xfffe0204>
   20130:	d8c02b03 	ldbu	r3,172(sp)
   20134:	d8c02785 	stb	r3,158(sp)
   20138:	003a1706 	br	1e998 <__alt_data_end+0xfffe0198>
   2013c:	0005883a 	mov	r2,zero
   20140:	003f5d06 	br	1feb8 <__alt_data_end+0xfffe16b8>
   20144:	d8c02b03 	ldbu	r3,172(sp)
   20148:	d8c02785 	stb	r3,158(sp)
   2014c:	0038f306 	br	1e51c <__alt_data_end+0xfffdfd1c>
   20150:	d8c02b03 	ldbu	r3,172(sp)
   20154:	d8c02785 	stb	r3,158(sp)
   20158:	0038be06 	br	1e454 <__alt_data_end+0xfffdfc54>
   2015c:	d8802344 	addi	r2,sp,141
   20160:	003f0506 	br	1fd78 <__alt_data_end+0xfffe1578>
   20164:	d8c02b03 	ldbu	r3,172(sp)
   20168:	d8c02785 	stb	r3,158(sp)
   2016c:	00388b06 	br	1e39c <__alt_data_end+0xfffdfb9c>
   20170:	d8c02b03 	ldbu	r3,172(sp)
   20174:	d8c02785 	stb	r3,158(sp)
   20178:	003ad706 	br	1ecd8 <__alt_data_end+0xfffe04d8>
   2017c:	d9403917 	ldw	r5,228(sp)
   20180:	00800304 	movi	r2,12
   20184:	28800015 	stw	r2,0(r5)
   20188:	00bfffc4 	movi	r2,-1
   2018c:	00384306 	br	1e29c <__alt_data_end+0xfffdfa9c>
   20190:	d8c02b03 	ldbu	r3,172(sp)
   20194:	d8c02785 	stb	r3,158(sp)
   20198:	003ab606 	br	1ec74 <__alt_data_end+0xfffe0474>
   2019c:	d8c02b03 	ldbu	r3,172(sp)
   201a0:	d8c02785 	stb	r3,158(sp)
   201a4:	003a8906 	br	1ebcc <__alt_data_end+0xfffe03cc>

000201a8 <__submore>:
   201a8:	defffa04 	addi	sp,sp,-24
   201ac:	dc000015 	stw	r16,0(sp)
   201b0:	2821883a 	mov	r16,r5
   201b4:	29400c17 	ldw	r5,48(r5)
   201b8:	dfc00515 	stw	ra,20(sp)
   201bc:	dd000415 	stw	r20,16(sp)
   201c0:	dcc00315 	stw	r19,12(sp)
   201c4:	dc800215 	stw	r18,8(sp)
   201c8:	dc400115 	stw	r17,4(sp)
   201cc:	80801004 	addi	r2,r16,64
   201d0:	28801726 	beq	r5,r2,20230 <__submore+0x88>
   201d4:	84400d17 	ldw	r17,52(r16)
   201d8:	8c67883a 	add	r19,r17,r17
   201dc:	980d883a 	mov	r6,r19
   201e0:	0012cac0 	call	12cac <_realloc_r>
   201e4:	1025883a 	mov	r18,r2
   201e8:	10002226 	beq	r2,zero,20274 <__submore+0xcc>
   201ec:	1469883a 	add	r20,r2,r17
   201f0:	880d883a 	mov	r6,r17
   201f4:	100b883a 	mov	r5,r2
   201f8:	a009883a 	mov	r4,r20
   201fc:	00127200 	call	12720 <memcpy>
   20200:	0005883a 	mov	r2,zero
   20204:	85000015 	stw	r20,0(r16)
   20208:	84800c15 	stw	r18,48(r16)
   2020c:	84c00d15 	stw	r19,52(r16)
   20210:	dfc00517 	ldw	ra,20(sp)
   20214:	dd000417 	ldw	r20,16(sp)
   20218:	dcc00317 	ldw	r19,12(sp)
   2021c:	dc800217 	ldw	r18,8(sp)
   20220:	dc400117 	ldw	r17,4(sp)
   20224:	dc000017 	ldw	r16,0(sp)
   20228:	dec00604 	addi	sp,sp,24
   2022c:	f800283a 	ret
   20230:	04410004 	movi	r17,1024
   20234:	880b883a 	mov	r5,r17
   20238:	0011e300 	call	11e30 <_malloc_r>
   2023c:	1007883a 	mov	r3,r2
   20240:	10000c26 	beq	r2,zero,20274 <__submore+0xcc>
   20244:	80801083 	ldbu	r2,66(r16)
   20248:	80c00c15 	stw	r3,48(r16)
   2024c:	84400d15 	stw	r17,52(r16)
   20250:	1880ffc5 	stb	r2,1023(r3)
   20254:	81401043 	ldbu	r5,65(r16)
   20258:	1900ff44 	addi	r4,r3,1021
   2025c:	0005883a 	mov	r2,zero
   20260:	1940ff85 	stb	r5,1022(r3)
   20264:	81401003 	ldbu	r5,64(r16)
   20268:	1940ff45 	stb	r5,1021(r3)
   2026c:	81000015 	stw	r4,0(r16)
   20270:	003fe706 	br	20210 <__alt_data_end+0xfffe1a10>
   20274:	00bfffc4 	movi	r2,-1
   20278:	003fe506 	br	20210 <__alt_data_end+0xfffe1a10>

0002027c <_ungetc_r>:
   2027c:	00bfffc4 	movi	r2,-1
   20280:	28806126 	beq	r5,r2,20408 <_ungetc_r+0x18c>
   20284:	defffb04 	addi	sp,sp,-20
   20288:	dcc00315 	stw	r19,12(sp)
   2028c:	dc400115 	stw	r17,4(sp)
   20290:	dc000015 	stw	r16,0(sp)
   20294:	dfc00415 	stw	ra,16(sp)
   20298:	dc800215 	stw	r18,8(sp)
   2029c:	2023883a 	mov	r17,r4
   202a0:	3021883a 	mov	r16,r6
   202a4:	2827883a 	mov	r19,r5
   202a8:	20000226 	beq	r4,zero,202b4 <_ungetc_r+0x38>
   202ac:	20800e17 	ldw	r2,56(r4)
   202b0:	10002e26 	beq	r2,zero,2036c <_ungetc_r+0xf0>
   202b4:	80c0030b 	ldhu	r3,12(r16)
   202b8:	1888000c 	andi	r2,r3,8192
   202bc:	1000051e 	bne	r2,zero,202d4 <_ungetc_r+0x58>
   202c0:	81001917 	ldw	r4,100(r16)
   202c4:	00b7ffc4 	movi	r2,-8193
   202c8:	18c80014 	ori	r3,r3,8192
   202cc:	2084703a 	and	r2,r4,r2
   202d0:	80801915 	stw	r2,100(r16)
   202d4:	00bff7c4 	movi	r2,-33
   202d8:	1884703a 	and	r2,r3,r2
   202dc:	8080030d 	sth	r2,12(r16)
   202e0:	1900010c 	andi	r4,r3,4
   202e4:	2000061e 	bne	r4,zero,20300 <_ungetc_r+0x84>
   202e8:	1900040c 	andi	r4,r3,16
   202ec:	20001d26 	beq	r4,zero,20364 <_ungetc_r+0xe8>
   202f0:	18c0020c 	andi	r3,r3,8
   202f4:	1800331e 	bne	r3,zero,203c4 <_ungetc_r+0x148>
   202f8:	10800114 	ori	r2,r2,4
   202fc:	8080030d 	sth	r2,12(r16)
   20300:	80800c17 	ldw	r2,48(r16)
   20304:	9c803fcc 	andi	r18,r19,255
   20308:	10001a26 	beq	r2,zero,20374 <_ungetc_r+0xf8>
   2030c:	80c00117 	ldw	r3,4(r16)
   20310:	80800d17 	ldw	r2,52(r16)
   20314:	18800f0e 	bge	r3,r2,20354 <_ungetc_r+0xd8>
   20318:	80c00017 	ldw	r3,0(r16)
   2031c:	9005883a 	mov	r2,r18
   20320:	193fffc4 	addi	r4,r3,-1
   20324:	81000015 	stw	r4,0(r16)
   20328:	1cffffc5 	stb	r19,-1(r3)
   2032c:	80c00117 	ldw	r3,4(r16)
   20330:	18c00044 	addi	r3,r3,1
   20334:	80c00115 	stw	r3,4(r16)
   20338:	dfc00417 	ldw	ra,16(sp)
   2033c:	dcc00317 	ldw	r19,12(sp)
   20340:	dc800217 	ldw	r18,8(sp)
   20344:	dc400117 	ldw	r17,4(sp)
   20348:	dc000017 	ldw	r16,0(sp)
   2034c:	dec00504 	addi	sp,sp,20
   20350:	f800283a 	ret
   20354:	800b883a 	mov	r5,r16
   20358:	8809883a 	mov	r4,r17
   2035c:	00201a80 	call	201a8 <__submore>
   20360:	103fed26 	beq	r2,zero,20318 <__alt_data_end+0xfffe1b18>
   20364:	00bfffc4 	movi	r2,-1
   20368:	003ff306 	br	20338 <__alt_data_end+0xfffe1b38>
   2036c:	0010a900 	call	10a90 <__sinit>
   20370:	003fd006 	br	202b4 <__alt_data_end+0xfffe1ab4>
   20374:	80c00417 	ldw	r3,16(r16)
   20378:	80800017 	ldw	r2,0(r16)
   2037c:	18000326 	beq	r3,zero,2038c <_ungetc_r+0x110>
   20380:	1880022e 	bgeu	r3,r2,2038c <_ungetc_r+0x110>
   20384:	10ffffc3 	ldbu	r3,-1(r2)
   20388:	90c01826 	beq	r18,r3,203ec <_ungetc_r+0x170>
   2038c:	81400117 	ldw	r5,4(r16)
   20390:	80800e15 	stw	r2,56(r16)
   20394:	008000c4 	movi	r2,3
   20398:	81001004 	addi	r4,r16,64
   2039c:	80c01084 	addi	r3,r16,66
   203a0:	80800d15 	stw	r2,52(r16)
   203a4:	00800044 	movi	r2,1
   203a8:	80800115 	stw	r2,4(r16)
   203ac:	81400f15 	stw	r5,60(r16)
   203b0:	81000c15 	stw	r4,48(r16)
   203b4:	84c01085 	stb	r19,66(r16)
   203b8:	80c00015 	stw	r3,0(r16)
   203bc:	9005883a 	mov	r2,r18
   203c0:	003fdd06 	br	20338 <__alt_data_end+0xfffe1b38>
   203c4:	800b883a 	mov	r5,r16
   203c8:	8809883a 	mov	r4,r17
   203cc:	00106a40 	call	106a4 <_fflush_r>
   203d0:	103fe41e 	bne	r2,zero,20364 <__alt_data_end+0xfffe1b64>
   203d4:	8080030b 	ldhu	r2,12(r16)
   203d8:	00fffdc4 	movi	r3,-9
   203dc:	80000215 	stw	zero,8(r16)
   203e0:	1884703a 	and	r2,r3,r2
   203e4:	80000615 	stw	zero,24(r16)
   203e8:	003fc306 	br	202f8 <__alt_data_end+0xfffe1af8>
   203ec:	80c00117 	ldw	r3,4(r16)
   203f0:	10bfffc4 	addi	r2,r2,-1
   203f4:	80800015 	stw	r2,0(r16)
   203f8:	18800044 	addi	r2,r3,1
   203fc:	80800115 	stw	r2,4(r16)
   20400:	9005883a 	mov	r2,r18
   20404:	003fcc06 	br	20338 <__alt_data_end+0xfffe1b38>
   20408:	00bfffc4 	movi	r2,-1
   2040c:	f800283a 	ret

00020410 <ungetc>:
   20410:	008000f4 	movhi	r2,3
   20414:	10a8a204 	addi	r2,r2,-23928
   20418:	280d883a 	mov	r6,r5
   2041c:	200b883a 	mov	r5,r4
   20420:	11000017 	ldw	r4,0(r2)
   20424:	002027c1 	jmpi	2027c <_ungetc_r>

00020428 <__sprint_r.part.0>:
   20428:	28801917 	ldw	r2,100(r5)
   2042c:	defff604 	addi	sp,sp,-40
   20430:	dd400515 	stw	r21,20(sp)
   20434:	dfc00915 	stw	ra,36(sp)
   20438:	df000815 	stw	fp,32(sp)
   2043c:	ddc00715 	stw	r23,28(sp)
   20440:	dd800615 	stw	r22,24(sp)
   20444:	dd000415 	stw	r20,16(sp)
   20448:	dcc00315 	stw	r19,12(sp)
   2044c:	dc800215 	stw	r18,8(sp)
   20450:	dc400115 	stw	r17,4(sp)
   20454:	dc000015 	stw	r16,0(sp)
   20458:	1088000c 	andi	r2,r2,8192
   2045c:	302b883a 	mov	r21,r6
   20460:	10002e26 	beq	r2,zero,2051c <__sprint_r.part.0+0xf4>
   20464:	30800217 	ldw	r2,8(r6)
   20468:	35800017 	ldw	r22,0(r6)
   2046c:	10002926 	beq	r2,zero,20514 <__sprint_r.part.0+0xec>
   20470:	2827883a 	mov	r19,r5
   20474:	2029883a 	mov	r20,r4
   20478:	b5c00104 	addi	r23,r22,4
   2047c:	04bfffc4 	movi	r18,-1
   20480:	bc400017 	ldw	r17,0(r23)
   20484:	b4000017 	ldw	r16,0(r22)
   20488:	0039883a 	mov	fp,zero
   2048c:	8822d0ba 	srli	r17,r17,2
   20490:	8800031e 	bne	r17,zero,204a0 <__sprint_r.part.0+0x78>
   20494:	00001806 	br	204f8 <__sprint_r.part.0+0xd0>
   20498:	84000104 	addi	r16,r16,4
   2049c:	8f001526 	beq	r17,fp,204f4 <__sprint_r.part.0+0xcc>
   204a0:	81400017 	ldw	r5,0(r16)
   204a4:	980d883a 	mov	r6,r19
   204a8:	a009883a 	mov	r4,r20
   204ac:	0021eb80 	call	21eb8 <_fputwc_r>
   204b0:	e7000044 	addi	fp,fp,1
   204b4:	14bff81e 	bne	r2,r18,20498 <__alt_data_end+0xfffe1c98>
   204b8:	9005883a 	mov	r2,r18
   204bc:	a8000215 	stw	zero,8(r21)
   204c0:	a8000115 	stw	zero,4(r21)
   204c4:	dfc00917 	ldw	ra,36(sp)
   204c8:	df000817 	ldw	fp,32(sp)
   204cc:	ddc00717 	ldw	r23,28(sp)
   204d0:	dd800617 	ldw	r22,24(sp)
   204d4:	dd400517 	ldw	r21,20(sp)
   204d8:	dd000417 	ldw	r20,16(sp)
   204dc:	dcc00317 	ldw	r19,12(sp)
   204e0:	dc800217 	ldw	r18,8(sp)
   204e4:	dc400117 	ldw	r17,4(sp)
   204e8:	dc000017 	ldw	r16,0(sp)
   204ec:	dec00a04 	addi	sp,sp,40
   204f0:	f800283a 	ret
   204f4:	a8800217 	ldw	r2,8(r21)
   204f8:	8c63883a 	add	r17,r17,r17
   204fc:	8c63883a 	add	r17,r17,r17
   20500:	1445c83a 	sub	r2,r2,r17
   20504:	a8800215 	stw	r2,8(r21)
   20508:	b5800204 	addi	r22,r22,8
   2050c:	bdc00204 	addi	r23,r23,8
   20510:	103fdb1e 	bne	r2,zero,20480 <__alt_data_end+0xfffe1c80>
   20514:	0005883a 	mov	r2,zero
   20518:	003fe806 	br	204bc <__alt_data_end+0xfffe1cbc>
   2051c:	00115fc0 	call	115fc <__sfvwrite_r>
   20520:	003fe606 	br	204bc <__alt_data_end+0xfffe1cbc>

00020524 <__sprint_r>:
   20524:	30c00217 	ldw	r3,8(r6)
   20528:	18000126 	beq	r3,zero,20530 <__sprint_r+0xc>
   2052c:	00204281 	jmpi	20428 <__sprint_r.part.0>
   20530:	30000115 	stw	zero,4(r6)
   20534:	0005883a 	mov	r2,zero
   20538:	f800283a 	ret

0002053c <___vfiprintf_internal_r>:
   2053c:	deffca04 	addi	sp,sp,-216
   20540:	dd403115 	stw	r21,196(sp)
   20544:	dfc03515 	stw	ra,212(sp)
   20548:	df003415 	stw	fp,208(sp)
   2054c:	ddc03315 	stw	r23,204(sp)
   20550:	dd803215 	stw	r22,200(sp)
   20554:	dd003015 	stw	r20,192(sp)
   20558:	dcc02f15 	stw	r19,188(sp)
   2055c:	dc802e15 	stw	r18,184(sp)
   20560:	dc402d15 	stw	r17,180(sp)
   20564:	dc002c15 	stw	r16,176(sp)
   20568:	d9002115 	stw	r4,132(sp)
   2056c:	d9402015 	stw	r5,128(sp)
   20570:	d9c02215 	stw	r7,136(sp)
   20574:	302b883a 	mov	r21,r6
   20578:	20000226 	beq	r4,zero,20584 <___vfiprintf_internal_r+0x48>
   2057c:	20800e17 	ldw	r2,56(r4)
   20580:	1000cf26 	beq	r2,zero,208c0 <___vfiprintf_internal_r+0x384>
   20584:	d8c02017 	ldw	r3,128(sp)
   20588:	1880030b 	ldhu	r2,12(r3)
   2058c:	10c8000c 	andi	r3,r2,8192
   20590:	1800071e 	bne	r3,zero,205b0 <___vfiprintf_internal_r+0x74>
   20594:	d9402017 	ldw	r5,128(sp)
   20598:	00f7ffc4 	movi	r3,-8193
   2059c:	10880014 	ori	r2,r2,8192
   205a0:	29001917 	ldw	r4,100(r5)
   205a4:	2880030d 	sth	r2,12(r5)
   205a8:	20c6703a 	and	r3,r4,r3
   205ac:	28c01915 	stw	r3,100(r5)
   205b0:	10c0020c 	andi	r3,r2,8
   205b4:	1800a526 	beq	r3,zero,2084c <___vfiprintf_internal_r+0x310>
   205b8:	d9002017 	ldw	r4,128(sp)
   205bc:	20c00417 	ldw	r3,16(r4)
   205c0:	1800a226 	beq	r3,zero,2084c <___vfiprintf_internal_r+0x310>
   205c4:	1080068c 	andi	r2,r2,26
   205c8:	00c00284 	movi	r3,10
   205cc:	10c0a826 	beq	r2,r3,20870 <___vfiprintf_internal_r+0x334>
   205d0:	d9001a04 	addi	r4,sp,104
   205d4:	d94019c4 	addi	r5,sp,103
   205d8:	048000f4 	movhi	r18,3
   205dc:	2145c83a 	sub	r2,r4,r5
   205e0:	94a5e484 	addi	r18,r18,-26734
   205e4:	d9001e15 	stw	r4,120(sp)
   205e8:	d9401f15 	stw	r5,124(sp)
   205ec:	dec01a15 	stw	sp,104(sp)
   205f0:	d8001c15 	stw	zero,112(sp)
   205f4:	d8001b15 	stw	zero,108(sp)
   205f8:	d811883a 	mov	r8,sp
   205fc:	d8002615 	stw	zero,152(sp)
   20600:	d8002415 	stw	zero,144(sp)
   20604:	d8802815 	stw	r2,160(sp)
   20608:	a82d883a 	mov	r22,r21
   2060c:	b0800007 	ldb	r2,0(r22)
   20610:	10040d26 	beq	r2,zero,21648 <___vfiprintf_internal_r+0x110c>
   20614:	00c00944 	movi	r3,37
   20618:	b029883a 	mov	r20,r22
   2061c:	10c0021e 	bne	r2,r3,20628 <___vfiprintf_internal_r+0xec>
   20620:	00001606 	br	2067c <___vfiprintf_internal_r+0x140>
   20624:	10c00326 	beq	r2,r3,20634 <___vfiprintf_internal_r+0xf8>
   20628:	a5000044 	addi	r20,r20,1
   2062c:	a0800007 	ldb	r2,0(r20)
   20630:	103ffc1e 	bne	r2,zero,20624 <__alt_data_end+0xfffe1e24>
   20634:	a5a1c83a 	sub	r16,r20,r22
   20638:	80001026 	beq	r16,zero,2067c <___vfiprintf_internal_r+0x140>
   2063c:	d8c01c17 	ldw	r3,112(sp)
   20640:	d8801b17 	ldw	r2,108(sp)
   20644:	45800015 	stw	r22,0(r8)
   20648:	80c7883a 	add	r3,r16,r3
   2064c:	10800044 	addi	r2,r2,1
   20650:	44000115 	stw	r16,4(r8)
   20654:	d8c01c15 	stw	r3,112(sp)
   20658:	d8801b15 	stw	r2,108(sp)
   2065c:	010001c4 	movi	r4,7
   20660:	2080750e 	bge	r4,r2,20838 <___vfiprintf_internal_r+0x2fc>
   20664:	1803951e 	bne	r3,zero,214bc <___vfiprintf_internal_r+0xf80>
   20668:	d8c02417 	ldw	r3,144(sp)
   2066c:	d8001b15 	stw	zero,108(sp)
   20670:	d811883a 	mov	r8,sp
   20674:	1c07883a 	add	r3,r3,r16
   20678:	d8c02415 	stw	r3,144(sp)
   2067c:	a0800007 	ldb	r2,0(r20)
   20680:	1002e026 	beq	r2,zero,21204 <___vfiprintf_internal_r+0xcc8>
   20684:	a5800044 	addi	r22,r20,1
   20688:	a0c00047 	ldb	r3,1(r20)
   2068c:	d8001d85 	stb	zero,118(sp)
   20690:	0027883a 	mov	r19,zero
   20694:	d8002305 	stb	zero,140(sp)
   20698:	043fffc4 	movi	r16,-1
   2069c:	d8002515 	stw	zero,148(sp)
   206a0:	0023883a 	mov	r17,zero
   206a4:	05001604 	movi	r20,88
   206a8:	05400244 	movi	r21,9
   206ac:	402f883a 	mov	r23,r8
   206b0:	b5800044 	addi	r22,r22,1
   206b4:	18bff804 	addi	r2,r3,-32
   206b8:	a0827736 	bltu	r20,r2,21098 <___vfiprintf_internal_r+0xb5c>
   206bc:	100490ba 	slli	r2,r2,2
   206c0:	010000b4 	movhi	r4,2
   206c4:	2101b504 	addi	r4,r4,1748
   206c8:	1105883a 	add	r2,r2,r4
   206cc:	10800017 	ldw	r2,0(r2)
   206d0:	1000683a 	jmp	r2
   206d4:	00020d98 	cmpnei	zero,zero,2102
   206d8:	00021098 	cmpnei	zero,zero,2114
   206dc:	00021098 	cmpnei	zero,zero,2114
   206e0:	00020db4 	movhi	zero,2102
   206e4:	00021098 	cmpnei	zero,zero,2114
   206e8:	00021098 	cmpnei	zero,zero,2114
   206ec:	00021098 	cmpnei	zero,zero,2114
   206f0:	00021098 	cmpnei	zero,zero,2114
   206f4:	00021098 	cmpnei	zero,zero,2114
   206f8:	00021098 	cmpnei	zero,zero,2114
   206fc:	00020fbc 	xorhi	zero,zero,2110
   20700:	00020fe0 	cmpeqi	zero,zero,2111
   20704:	00021098 	cmpnei	zero,zero,2114
   20708:	000208d8 	cmpnei	zero,zero,2083
   2070c:	00020ff4 	movhi	zero,2111
   20710:	00021098 	cmpnei	zero,zero,2114
   20714:	00020dc0 	call	20dc <set_addrs_to_default+0xf9c>
   20718:	00020dcc 	andi	zero,zero,2103
   2071c:	00020dcc 	andi	zero,zero,2103
   20720:	00020dcc 	andi	zero,zero,2103
   20724:	00020dcc 	andi	zero,zero,2103
   20728:	00020dcc 	andi	zero,zero,2103
   2072c:	00020dcc 	andi	zero,zero,2103
   20730:	00020dcc 	andi	zero,zero,2103
   20734:	00020dcc 	andi	zero,zero,2103
   20738:	00020dcc 	andi	zero,zero,2103
   2073c:	00021098 	cmpnei	zero,zero,2114
   20740:	00021098 	cmpnei	zero,zero,2114
   20744:	00021098 	cmpnei	zero,zero,2114
   20748:	00021098 	cmpnei	zero,zero,2114
   2074c:	00021098 	cmpnei	zero,zero,2114
   20750:	00021098 	cmpnei	zero,zero,2114
   20754:	00021098 	cmpnei	zero,zero,2114
   20758:	00021098 	cmpnei	zero,zero,2114
   2075c:	00021098 	cmpnei	zero,zero,2114
   20760:	00021098 	cmpnei	zero,zero,2114
   20764:	00020e0c 	andi	zero,zero,2104
   20768:	00021098 	cmpnei	zero,zero,2114
   2076c:	00021098 	cmpnei	zero,zero,2114
   20770:	00021098 	cmpnei	zero,zero,2114
   20774:	00021098 	cmpnei	zero,zero,2114
   20778:	00021098 	cmpnei	zero,zero,2114
   2077c:	00021098 	cmpnei	zero,zero,2114
   20780:	00021098 	cmpnei	zero,zero,2114
   20784:	00021098 	cmpnei	zero,zero,2114
   20788:	00021098 	cmpnei	zero,zero,2114
   2078c:	00021098 	cmpnei	zero,zero,2114
   20790:	00020e48 	cmpgei	zero,zero,2105
   20794:	00021098 	cmpnei	zero,zero,2114
   20798:	00021098 	cmpnei	zero,zero,2114
   2079c:	00021098 	cmpnei	zero,zero,2114
   207a0:	00021098 	cmpnei	zero,zero,2114
   207a4:	00021098 	cmpnei	zero,zero,2114
   207a8:	00020ea4 	muli	zero,zero,2106
   207ac:	00021098 	cmpnei	zero,zero,2114
   207b0:	00021098 	cmpnei	zero,zero,2114
   207b4:	00020f18 	cmpnei	zero,zero,2108
   207b8:	00021098 	cmpnei	zero,zero,2114
   207bc:	00021098 	cmpnei	zero,zero,2114
   207c0:	00021098 	cmpnei	zero,zero,2114
   207c4:	00021098 	cmpnei	zero,zero,2114
   207c8:	00021098 	cmpnei	zero,zero,2114
   207cc:	00021098 	cmpnei	zero,zero,2114
   207d0:	00021098 	cmpnei	zero,zero,2114
   207d4:	00021098 	cmpnei	zero,zero,2114
   207d8:	00021098 	cmpnei	zero,zero,2114
   207dc:	00021098 	cmpnei	zero,zero,2114
   207e0:	00020cc0 	call	20cc <set_addrs_to_default+0xf8c>
   207e4:	00020cf0 	cmpltui	zero,zero,2099
   207e8:	00021098 	cmpnei	zero,zero,2114
   207ec:	00021098 	cmpnei	zero,zero,2114
   207f0:	00021098 	cmpnei	zero,zero,2114
   207f4:	00021040 	call	2104 <set_addrs_to_default+0xfc4>
   207f8:	00020cf0 	cmpltui	zero,zero,2099
   207fc:	00021098 	cmpnei	zero,zero,2114
   20800:	00021098 	cmpnei	zero,zero,2114
   20804:	00020b98 	cmpnei	zero,zero,2094
   20808:	00021098 	cmpnei	zero,zero,2114
   2080c:	00020bac 	andhi	zero,zero,2094
   20810:	00020be4 	muli	zero,zero,2095
   20814:	000208e4 	muli	zero,zero,2083
   20818:	00020b8c 	andi	zero,zero,2094
   2081c:	00021098 	cmpnei	zero,zero,2114
   20820:	00020f58 	cmpnei	zero,zero,2109
   20824:	00021098 	cmpnei	zero,zero,2114
   20828:	00020fa4 	muli	zero,zero,2110
   2082c:	00021098 	cmpnei	zero,zero,2114
   20830:	00021098 	cmpnei	zero,zero,2114
   20834:	00020c68 	cmpgeui	zero,zero,2097
   20838:	42000204 	addi	r8,r8,8
   2083c:	d8c02417 	ldw	r3,144(sp)
   20840:	1c07883a 	add	r3,r3,r16
   20844:	d8c02415 	stw	r3,144(sp)
   20848:	003f8c06 	br	2067c <__alt_data_end+0xfffe1e7c>
   2084c:	d9402017 	ldw	r5,128(sp)
   20850:	d9002117 	ldw	r4,132(sp)
   20854:	00175980 	call	17598 <__swsetup_r>
   20858:	1003c11e 	bne	r2,zero,21760 <___vfiprintf_internal_r+0x1224>
   2085c:	d9402017 	ldw	r5,128(sp)
   20860:	00c00284 	movi	r3,10
   20864:	2880030b 	ldhu	r2,12(r5)
   20868:	1080068c 	andi	r2,r2,26
   2086c:	10ff581e 	bne	r2,r3,205d0 <__alt_data_end+0xfffe1dd0>
   20870:	d8c02017 	ldw	r3,128(sp)
   20874:	1880038f 	ldh	r2,14(r3)
   20878:	103f5516 	blt	r2,zero,205d0 <__alt_data_end+0xfffe1dd0>
   2087c:	d9c02217 	ldw	r7,136(sp)
   20880:	d9002117 	ldw	r4,132(sp)
   20884:	a80d883a 	mov	r6,r21
   20888:	180b883a 	mov	r5,r3
   2088c:	0021a640 	call	21a64 <__sbprintf>
   20890:	dfc03517 	ldw	ra,212(sp)
   20894:	df003417 	ldw	fp,208(sp)
   20898:	ddc03317 	ldw	r23,204(sp)
   2089c:	dd803217 	ldw	r22,200(sp)
   208a0:	dd403117 	ldw	r21,196(sp)
   208a4:	dd003017 	ldw	r20,192(sp)
   208a8:	dcc02f17 	ldw	r19,188(sp)
   208ac:	dc802e17 	ldw	r18,184(sp)
   208b0:	dc402d17 	ldw	r17,180(sp)
   208b4:	dc002c17 	ldw	r16,176(sp)
   208b8:	dec03604 	addi	sp,sp,216
   208bc:	f800283a 	ret
   208c0:	0010a900 	call	10a90 <__sinit>
   208c4:	003f2f06 	br	20584 <__alt_data_end+0xfffe1d84>
   208c8:	d8c02517 	ldw	r3,148(sp)
   208cc:	d8802215 	stw	r2,136(sp)
   208d0:	00c7c83a 	sub	r3,zero,r3
   208d4:	d8c02515 	stw	r3,148(sp)
   208d8:	8c400114 	ori	r17,r17,4
   208dc:	b0c00007 	ldb	r3,0(r22)
   208e0:	003f7306 	br	206b0 <__alt_data_end+0xfffe1eb0>
   208e4:	00800c04 	movi	r2,48
   208e8:	d9402217 	ldw	r5,136(sp)
   208ec:	d8801d05 	stb	r2,116(sp)
   208f0:	00801e04 	movi	r2,120
   208f4:	d8801d45 	stb	r2,117(sp)
   208f8:	d8001d85 	stb	zero,118(sp)
   208fc:	b811883a 	mov	r8,r23
   20900:	28c00104 	addi	r3,r5,4
   20904:	2cc00017 	ldw	r19,0(r5)
   20908:	0029883a 	mov	r20,zero
   2090c:	88800094 	ori	r2,r17,2
   20910:	80032516 	blt	r16,zero,215a8 <___vfiprintf_internal_r+0x106c>
   20914:	00bfdfc4 	movi	r2,-129
   20918:	88a2703a 	and	r17,r17,r2
   2091c:	d8c02215 	stw	r3,136(sp)
   20920:	8c400094 	ori	r17,r17,2
   20924:	98032a1e 	bne	r19,zero,215d0 <___vfiprintf_internal_r+0x1094>
   20928:	008000f4 	movhi	r2,3
   2092c:	10a4bc04 	addi	r2,r2,-27920
   20930:	d8802615 	stw	r2,152(sp)
   20934:	002b883a 	mov	r21,zero
   20938:	8001741e 	bne	r16,zero,20f0c <___vfiprintf_internal_r+0x9d0>
   2093c:	0021883a 	mov	r16,zero
   20940:	0029883a 	mov	r20,zero
   20944:	ddc01a04 	addi	r23,sp,104
   20948:	8027883a 	mov	r19,r16
   2094c:	8500010e 	bge	r16,r20,20954 <___vfiprintf_internal_r+0x418>
   20950:	a027883a 	mov	r19,r20
   20954:	ad403fcc 	andi	r21,r21,255
   20958:	ad40201c 	xori	r21,r21,128
   2095c:	ad7fe004 	addi	r21,r21,-128
   20960:	a8000126 	beq	r21,zero,20968 <___vfiprintf_internal_r+0x42c>
   20964:	9cc00044 	addi	r19,r19,1
   20968:	89c0008c 	andi	r7,r17,2
   2096c:	38000126 	beq	r7,zero,20974 <___vfiprintf_internal_r+0x438>
   20970:	9cc00084 	addi	r19,r19,2
   20974:	88c0210c 	andi	r3,r17,132
   20978:	1801dd1e 	bne	r3,zero,210f0 <___vfiprintf_internal_r+0xbb4>
   2097c:	d9402517 	ldw	r5,148(sp)
   20980:	2cebc83a 	sub	r21,r5,r19
   20984:	0541da0e 	bge	zero,r21,210f0 <___vfiprintf_internal_r+0xbb4>
   20988:	07000404 	movi	fp,16
   2098c:	d8801c17 	ldw	r2,112(sp)
   20990:	e543be0e 	bge	fp,r21,2188c <___vfiprintf_internal_r+0x1350>
   20994:	014000f4 	movhi	r5,3
   20998:	2965e884 	addi	r5,r5,-26718
   2099c:	dc002715 	stw	r16,156(sp)
   209a0:	d9801b17 	ldw	r6,108(sp)
   209a4:	a821883a 	mov	r16,r21
   209a8:	d9402315 	stw	r5,140(sp)
   209ac:	028001c4 	movi	r10,7
   209b0:	d9c02915 	stw	r7,164(sp)
   209b4:	182b883a 	mov	r21,r3
   209b8:	00000506 	br	209d0 <___vfiprintf_internal_r+0x494>
   209bc:	31000084 	addi	r4,r6,2
   209c0:	42000204 	addi	r8,r8,8
   209c4:	180d883a 	mov	r6,r3
   209c8:	843ffc04 	addi	r16,r16,-16
   209cc:	e4000f0e 	bge	fp,r16,20a0c <___vfiprintf_internal_r+0x4d0>
   209d0:	010000f4 	movhi	r4,3
   209d4:	10800404 	addi	r2,r2,16
   209d8:	30c00044 	addi	r3,r6,1
   209dc:	2125e884 	addi	r4,r4,-26718
   209e0:	41000015 	stw	r4,0(r8)
   209e4:	47000115 	stw	fp,4(r8)
   209e8:	d8801c15 	stw	r2,112(sp)
   209ec:	d8c01b15 	stw	r3,108(sp)
   209f0:	50fff20e 	bge	r10,r3,209bc <__alt_data_end+0xfffe21bc>
   209f4:	1001b21e 	bne	r2,zero,210c0 <___vfiprintf_internal_r+0xb84>
   209f8:	843ffc04 	addi	r16,r16,-16
   209fc:	000d883a 	mov	r6,zero
   20a00:	01000044 	movi	r4,1
   20a04:	d811883a 	mov	r8,sp
   20a08:	e43ff116 	blt	fp,r16,209d0 <__alt_data_end+0xfffe21d0>
   20a0c:	a807883a 	mov	r3,r21
   20a10:	d9c02917 	ldw	r7,164(sp)
   20a14:	802b883a 	mov	r21,r16
   20a18:	dc002717 	ldw	r16,156(sp)
   20a1c:	d9402317 	ldw	r5,140(sp)
   20a20:	a885883a 	add	r2,r21,r2
   20a24:	45400115 	stw	r21,4(r8)
   20a28:	41400015 	stw	r5,0(r8)
   20a2c:	d8801c15 	stw	r2,112(sp)
   20a30:	d9001b15 	stw	r4,108(sp)
   20a34:	014001c4 	movi	r5,7
   20a38:	29026216 	blt	r5,r4,213c4 <___vfiprintf_internal_r+0xe88>
   20a3c:	d9801d87 	ldb	r6,118(sp)
   20a40:	42000204 	addi	r8,r8,8
   20a44:	21400044 	addi	r5,r4,1
   20a48:	3001ae1e 	bne	r6,zero,21104 <___vfiprintf_internal_r+0xbc8>
   20a4c:	3801bb26 	beq	r7,zero,2113c <___vfiprintf_internal_r+0xc00>
   20a50:	d9001d04 	addi	r4,sp,116
   20a54:	10800084 	addi	r2,r2,2
   20a58:	41000015 	stw	r4,0(r8)
   20a5c:	01000084 	movi	r4,2
   20a60:	41000115 	stw	r4,4(r8)
   20a64:	d8801c15 	stw	r2,112(sp)
   20a68:	d9401b15 	stw	r5,108(sp)
   20a6c:	010001c4 	movi	r4,7
   20a70:	2142680e 	bge	r4,r5,21414 <___vfiprintf_internal_r+0xed8>
   20a74:	1002b11e 	bne	r2,zero,2153c <___vfiprintf_internal_r+0x1000>
   20a78:	01802004 	movi	r6,128
   20a7c:	01400044 	movi	r5,1
   20a80:	0009883a 	mov	r4,zero
   20a84:	d811883a 	mov	r8,sp
   20a88:	1981ae1e 	bne	r3,r6,21144 <___vfiprintf_internal_r+0xc08>
   20a8c:	d8c02517 	ldw	r3,148(sp)
   20a90:	1cf9c83a 	sub	fp,r3,r19
   20a94:	0701ab0e 	bge	zero,fp,21144 <___vfiprintf_internal_r+0xc08>
   20a98:	05400404 	movi	r21,16
   20a9c:	af03a90e 	bge	r21,fp,21944 <___vfiprintf_internal_r+0x1408>
   20aa0:	014000f4 	movhi	r5,3
   20aa4:	2965e484 	addi	r5,r5,-26734
   20aa8:	d9402315 	stw	r5,140(sp)
   20aac:	01c001c4 	movi	r7,7
   20ab0:	00000506 	br	20ac8 <___vfiprintf_internal_r+0x58c>
   20ab4:	21800084 	addi	r6,r4,2
   20ab8:	42000204 	addi	r8,r8,8
   20abc:	1809883a 	mov	r4,r3
   20ac0:	e73ffc04 	addi	fp,fp,-16
   20ac4:	af000d0e 	bge	r21,fp,20afc <___vfiprintf_internal_r+0x5c0>
   20ac8:	10800404 	addi	r2,r2,16
   20acc:	20c00044 	addi	r3,r4,1
   20ad0:	44800015 	stw	r18,0(r8)
   20ad4:	45400115 	stw	r21,4(r8)
   20ad8:	d8801c15 	stw	r2,112(sp)
   20adc:	d8c01b15 	stw	r3,108(sp)
   20ae0:	38fff40e 	bge	r7,r3,20ab4 <__alt_data_end+0xfffe22b4>
   20ae4:	10022b1e 	bne	r2,zero,21394 <___vfiprintf_internal_r+0xe58>
   20ae8:	e73ffc04 	addi	fp,fp,-16
   20aec:	01800044 	movi	r6,1
   20af0:	0009883a 	mov	r4,zero
   20af4:	d811883a 	mov	r8,sp
   20af8:	af3ff316 	blt	r21,fp,20ac8 <__alt_data_end+0xfffe22c8>
   20afc:	d8c02317 	ldw	r3,140(sp)
   20b00:	1705883a 	add	r2,r2,fp
   20b04:	47000115 	stw	fp,4(r8)
   20b08:	40c00015 	stw	r3,0(r8)
   20b0c:	d8801c15 	stw	r2,112(sp)
   20b10:	d9801b15 	stw	r6,108(sp)
   20b14:	00c001c4 	movi	r3,7
   20b18:	19829416 	blt	r3,r6,2156c <___vfiprintf_internal_r+0x1030>
   20b1c:	8521c83a 	sub	r16,r16,r20
   20b20:	42000204 	addi	r8,r8,8
   20b24:	31400044 	addi	r5,r6,1
   20b28:	3009883a 	mov	r4,r6
   20b2c:	04018716 	blt	zero,r16,2114c <___vfiprintf_internal_r+0xc10>
   20b30:	a085883a 	add	r2,r20,r2
   20b34:	45c00015 	stw	r23,0(r8)
   20b38:	45000115 	stw	r20,4(r8)
   20b3c:	d8801c15 	stw	r2,112(sp)
   20b40:	d9401b15 	stw	r5,108(sp)
   20b44:	00c001c4 	movi	r3,7
   20b48:	1941c20e 	bge	r3,r5,21254 <___vfiprintf_internal_r+0xd18>
   20b4c:	1002531e 	bne	r2,zero,2149c <___vfiprintf_internal_r+0xf60>
   20b50:	d8001b15 	stw	zero,108(sp)
   20b54:	8c40010c 	andi	r17,r17,4
   20b58:	88023226 	beq	r17,zero,21424 <___vfiprintf_internal_r+0xee8>
   20b5c:	d9002517 	ldw	r4,148(sp)
   20b60:	24e3c83a 	sub	r17,r4,r19
   20b64:	04432916 	blt	zero,r17,2180c <___vfiprintf_internal_r+0x12d0>
   20b68:	d8802517 	ldw	r2,148(sp)
   20b6c:	14c0010e 	bge	r2,r19,20b74 <___vfiprintf_internal_r+0x638>
   20b70:	9805883a 	mov	r2,r19
   20b74:	d8c02417 	ldw	r3,144(sp)
   20b78:	1887883a 	add	r3,r3,r2
   20b7c:	d8c02415 	stw	r3,144(sp)
   20b80:	d8001b15 	stw	zero,108(sp)
   20b84:	d811883a 	mov	r8,sp
   20b88:	003ea006 	br	2060c <__alt_data_end+0xfffe1e0c>
   20b8c:	8c400814 	ori	r17,r17,32
   20b90:	b0c00007 	ldb	r3,0(r22)
   20b94:	003ec606 	br	206b0 <__alt_data_end+0xfffe1eb0>
   20b98:	b0c00007 	ldb	r3,0(r22)
   20b9c:	00801b04 	movi	r2,108
   20ba0:	18832026 	beq	r3,r2,21824 <___vfiprintf_internal_r+0x12e8>
   20ba4:	8c400414 	ori	r17,r17,16
   20ba8:	003ec106 	br	206b0 <__alt_data_end+0xfffe1eb0>
   20bac:	9cc03fcc 	andi	r19,r19,255
   20bb0:	b811883a 	mov	r8,r23
   20bb4:	9803981e 	bne	r19,zero,21a18 <___vfiprintf_internal_r+0x14dc>
   20bb8:	8880080c 	andi	r2,r17,32
   20bbc:	1002be26 	beq	r2,zero,216b8 <___vfiprintf_internal_r+0x117c>
   20bc0:	d9002217 	ldw	r4,136(sp)
   20bc4:	d9402417 	ldw	r5,144(sp)
   20bc8:	20800017 	ldw	r2,0(r4)
   20bcc:	2807d7fa 	srai	r3,r5,31
   20bd0:	21000104 	addi	r4,r4,4
   20bd4:	d9002215 	stw	r4,136(sp)
   20bd8:	11400015 	stw	r5,0(r2)
   20bdc:	10c00115 	stw	r3,4(r2)
   20be0:	003e8a06 	br	2060c <__alt_data_end+0xfffe1e0c>
   20be4:	9cc03fcc 	andi	r19,r19,255
   20be8:	b811883a 	mov	r8,r23
   20bec:	9803871e 	bne	r19,zero,21a0c <___vfiprintf_internal_r+0x14d0>
   20bf0:	8880080c 	andi	r2,r17,32
   20bf4:	10009a26 	beq	r2,zero,20e60 <___vfiprintf_internal_r+0x924>
   20bf8:	d9002217 	ldw	r4,136(sp)
   20bfc:	d8001d85 	stb	zero,118(sp)
   20c00:	20800204 	addi	r2,r4,8
   20c04:	24c00017 	ldw	r19,0(r4)
   20c08:	25000117 	ldw	r20,4(r4)
   20c0c:	8002a416 	blt	r16,zero,216a0 <___vfiprintf_internal_r+0x1164>
   20c10:	013fdfc4 	movi	r4,-129
   20c14:	9d06b03a 	or	r3,r19,r20
   20c18:	d8802215 	stw	r2,136(sp)
   20c1c:	8922703a 	and	r17,r17,r4
   20c20:	18009b26 	beq	r3,zero,20e90 <___vfiprintf_internal_r+0x954>
   20c24:	002b883a 	mov	r21,zero
   20c28:	ddc01a04 	addi	r23,sp,104
   20c2c:	9806d0fa 	srli	r3,r19,3
   20c30:	a008977a 	slli	r4,r20,29
   20c34:	a028d0fa 	srli	r20,r20,3
   20c38:	9cc001cc 	andi	r19,r19,7
   20c3c:	98800c04 	addi	r2,r19,48
   20c40:	bdffffc4 	addi	r23,r23,-1
   20c44:	20e6b03a 	or	r19,r4,r3
   20c48:	b8800005 	stb	r2,0(r23)
   20c4c:	9d06b03a 	or	r3,r19,r20
   20c50:	183ff61e 	bne	r3,zero,20c2c <__alt_data_end+0xfffe242c>
   20c54:	88c0004c 	andi	r3,r17,1
   20c58:	18021f1e 	bne	r3,zero,214d8 <___vfiprintf_internal_r+0xf9c>
   20c5c:	d9401e17 	ldw	r5,120(sp)
   20c60:	2de9c83a 	sub	r20,r5,r23
   20c64:	003f3806 	br	20948 <__alt_data_end+0xfffe2148>
   20c68:	9cc03fcc 	andi	r19,r19,255
   20c6c:	b811883a 	mov	r8,r23
   20c70:	98034f1e 	bne	r19,zero,219b0 <___vfiprintf_internal_r+0x1474>
   20c74:	008000f4 	movhi	r2,3
   20c78:	10a4bc04 	addi	r2,r2,-27920
   20c7c:	d8802615 	stw	r2,152(sp)
   20c80:	8880080c 	andi	r2,r17,32
   20c84:	1000ac26 	beq	r2,zero,20f38 <___vfiprintf_internal_r+0x9fc>
   20c88:	d9002217 	ldw	r4,136(sp)
   20c8c:	24c00017 	ldw	r19,0(r4)
   20c90:	25000117 	ldw	r20,4(r4)
   20c94:	21000204 	addi	r4,r4,8
   20c98:	d9002215 	stw	r4,136(sp)
   20c9c:	8880004c 	andi	r2,r17,1
   20ca0:	1001e726 	beq	r2,zero,21440 <___vfiprintf_internal_r+0xf04>
   20ca4:	9d04b03a 	or	r2,r19,r20
   20ca8:	10025c1e 	bne	r2,zero,2161c <___vfiprintf_internal_r+0x10e0>
   20cac:	d8001d85 	stb	zero,118(sp)
   20cb0:	80024416 	blt	r16,zero,215c4 <___vfiprintf_internal_r+0x1088>
   20cb4:	00bfdfc4 	movi	r2,-129
   20cb8:	88a2703a 	and	r17,r17,r2
   20cbc:	003f1d06 	br	20934 <__alt_data_end+0xfffe2134>
   20cc0:	d8c02217 	ldw	r3,136(sp)
   20cc4:	04c00044 	movi	r19,1
   20cc8:	b811883a 	mov	r8,r23
   20ccc:	18800017 	ldw	r2,0(r3)
   20cd0:	18c00104 	addi	r3,r3,4
   20cd4:	d8001d85 	stb	zero,118(sp)
   20cd8:	d8801005 	stb	r2,64(sp)
   20cdc:	d8c02215 	stw	r3,136(sp)
   20ce0:	9829883a 	mov	r20,r19
   20ce4:	ddc01004 	addi	r23,sp,64
   20ce8:	0021883a 	mov	r16,zero
   20cec:	003f1e06 	br	20968 <__alt_data_end+0xfffe2168>
   20cf0:	9cc03fcc 	andi	r19,r19,255
   20cf4:	b811883a 	mov	r8,r23
   20cf8:	9803331e 	bne	r19,zero,219c8 <___vfiprintf_internal_r+0x148c>
   20cfc:	8880080c 	andi	r2,r17,32
   20d00:	10004826 	beq	r2,zero,20e24 <___vfiprintf_internal_r+0x8e8>
   20d04:	d9002217 	ldw	r4,136(sp)
   20d08:	20800117 	ldw	r2,4(r4)
   20d0c:	24c00017 	ldw	r19,0(r4)
   20d10:	21000204 	addi	r4,r4,8
   20d14:	d9002215 	stw	r4,136(sp)
   20d18:	1029883a 	mov	r20,r2
   20d1c:	10024c16 	blt	r2,zero,21650 <___vfiprintf_internal_r+0x1114>
   20d20:	dd401d83 	ldbu	r21,118(sp)
   20d24:	80007116 	blt	r16,zero,20eec <___vfiprintf_internal_r+0x9b0>
   20d28:	00ffdfc4 	movi	r3,-129
   20d2c:	9d04b03a 	or	r2,r19,r20
   20d30:	88e2703a 	and	r17,r17,r3
   20d34:	1000d126 	beq	r2,zero,2107c <___vfiprintf_internal_r+0xb40>
   20d38:	a0023526 	beq	r20,zero,21610 <___vfiprintf_internal_r+0x10d4>
   20d3c:	ddc01a04 	addi	r23,sp,104
   20d40:	4039883a 	mov	fp,r8
   20d44:	9809883a 	mov	r4,r19
   20d48:	a00b883a 	mov	r5,r20
   20d4c:	01800284 	movi	r6,10
   20d50:	000f883a 	mov	r7,zero
   20d54:	00251040 	call	25104 <__umoddi3>
   20d58:	10800c04 	addi	r2,r2,48
   20d5c:	bdffffc4 	addi	r23,r23,-1
   20d60:	9809883a 	mov	r4,r19
   20d64:	a00b883a 	mov	r5,r20
   20d68:	b8800005 	stb	r2,0(r23)
   20d6c:	01800284 	movi	r6,10
   20d70:	000f883a 	mov	r7,zero
   20d74:	0024b080 	call	24b08 <__udivdi3>
   20d78:	1027883a 	mov	r19,r2
   20d7c:	10c4b03a 	or	r2,r2,r3
   20d80:	1829883a 	mov	r20,r3
   20d84:	103fef1e 	bne	r2,zero,20d44 <__alt_data_end+0xfffe2544>
   20d88:	d9001e17 	ldw	r4,120(sp)
   20d8c:	e011883a 	mov	r8,fp
   20d90:	25e9c83a 	sub	r20,r4,r23
   20d94:	003eec06 	br	20948 <__alt_data_end+0xfffe2148>
   20d98:	d8802307 	ldb	r2,140(sp)
   20d9c:	1002361e 	bne	r2,zero,21678 <___vfiprintf_internal_r+0x113c>
   20da0:	00c00804 	movi	r3,32
   20da4:	d8c02305 	stb	r3,140(sp)
   20da8:	04c00044 	movi	r19,1
   20dac:	b0c00007 	ldb	r3,0(r22)
   20db0:	003e3f06 	br	206b0 <__alt_data_end+0xfffe1eb0>
   20db4:	8c400054 	ori	r17,r17,1
   20db8:	b0c00007 	ldb	r3,0(r22)
   20dbc:	003e3c06 	br	206b0 <__alt_data_end+0xfffe1eb0>
   20dc0:	8c402014 	ori	r17,r17,128
   20dc4:	b0c00007 	ldb	r3,0(r22)
   20dc8:	003e3906 	br	206b0 <__alt_data_end+0xfffe1eb0>
   20dcc:	dc002715 	stw	r16,156(sp)
   20dd0:	d8002515 	stw	zero,148(sp)
   20dd4:	1f3ff404 	addi	fp,r3,-48
   20dd8:	0009883a 	mov	r4,zero
   20ddc:	b021883a 	mov	r16,r22
   20de0:	01400284 	movi	r5,10
   20de4:	002587c0 	call	2587c <__mulsi3>
   20de8:	80c00007 	ldb	r3,0(r16)
   20dec:	e089883a 	add	r4,fp,r2
   20df0:	b5800044 	addi	r22,r22,1
   20df4:	1f3ff404 	addi	fp,r3,-48
   20df8:	b021883a 	mov	r16,r22
   20dfc:	af3ff82e 	bgeu	r21,fp,20de0 <__alt_data_end+0xfffe25e0>
   20e00:	d9002515 	stw	r4,148(sp)
   20e04:	dc002717 	ldw	r16,156(sp)
   20e08:	003e2a06 	br	206b4 <__alt_data_end+0xfffe1eb4>
   20e0c:	9cc03fcc 	andi	r19,r19,255
   20e10:	b811883a 	mov	r8,r23
   20e14:	9802e91e 	bne	r19,zero,219bc <___vfiprintf_internal_r+0x1480>
   20e18:	8c400414 	ori	r17,r17,16
   20e1c:	8880080c 	andi	r2,r17,32
   20e20:	103fb81e 	bne	r2,zero,20d04 <__alt_data_end+0xfffe2504>
   20e24:	8880040c 	andi	r2,r17,16
   20e28:	10022e26 	beq	r2,zero,216e4 <___vfiprintf_internal_r+0x11a8>
   20e2c:	d9402217 	ldw	r5,136(sp)
   20e30:	2cc00017 	ldw	r19,0(r5)
   20e34:	29400104 	addi	r5,r5,4
   20e38:	d9402215 	stw	r5,136(sp)
   20e3c:	9829d7fa 	srai	r20,r19,31
   20e40:	a005883a 	mov	r2,r20
   20e44:	003fb506 	br	20d1c <__alt_data_end+0xfffe251c>
   20e48:	9cc03fcc 	andi	r19,r19,255
   20e4c:	b811883a 	mov	r8,r23
   20e50:	9802fa1e 	bne	r19,zero,21a3c <___vfiprintf_internal_r+0x1500>
   20e54:	8c400414 	ori	r17,r17,16
   20e58:	8880080c 	andi	r2,r17,32
   20e5c:	103f661e 	bne	r2,zero,20bf8 <__alt_data_end+0xfffe23f8>
   20e60:	8880040c 	andi	r2,r17,16
   20e64:	10020626 	beq	r2,zero,21680 <___vfiprintf_internal_r+0x1144>
   20e68:	d9402217 	ldw	r5,136(sp)
   20e6c:	d8001d85 	stb	zero,118(sp)
   20e70:	0029883a 	mov	r20,zero
   20e74:	28800104 	addi	r2,r5,4
   20e78:	2cc00017 	ldw	r19,0(r5)
   20e7c:	80020816 	blt	r16,zero,216a0 <___vfiprintf_internal_r+0x1164>
   20e80:	00ffdfc4 	movi	r3,-129
   20e84:	d8802215 	stw	r2,136(sp)
   20e88:	88e2703a 	and	r17,r17,r3
   20e8c:	983f651e 	bne	r19,zero,20c24 <__alt_data_end+0xfffe2424>
   20e90:	002b883a 	mov	r21,zero
   20e94:	8002cf26 	beq	r16,zero,219d4 <___vfiprintf_internal_r+0x1498>
   20e98:	0027883a 	mov	r19,zero
   20e9c:	0029883a 	mov	r20,zero
   20ea0:	003f6106 	br	20c28 <__alt_data_end+0xfffe2428>
   20ea4:	9cc03fcc 	andi	r19,r19,255
   20ea8:	b811883a 	mov	r8,r23
   20eac:	9802e01e 	bne	r19,zero,21a30 <___vfiprintf_internal_r+0x14f4>
   20eb0:	8c400414 	ori	r17,r17,16
   20eb4:	8880080c 	andi	r2,r17,32
   20eb8:	1000641e 	bne	r2,zero,2104c <___vfiprintf_internal_r+0xb10>
   20ebc:	8880040c 	andi	r2,r17,16
   20ec0:	1001c81e 	bne	r2,zero,215e4 <___vfiprintf_internal_r+0x10a8>
   20ec4:	8880100c 	andi	r2,r17,64
   20ec8:	d8001d85 	stb	zero,118(sp)
   20ecc:	1002281e 	bne	r2,zero,21770 <___vfiprintf_internal_r+0x1234>
   20ed0:	d9002217 	ldw	r4,136(sp)
   20ed4:	0029883a 	mov	r20,zero
   20ed8:	20800104 	addi	r2,r4,4
   20edc:	24c00017 	ldw	r19,0(r4)
   20ee0:	8001c60e 	bge	r16,zero,215fc <___vfiprintf_internal_r+0x10c0>
   20ee4:	d8802215 	stw	r2,136(sp)
   20ee8:	002b883a 	mov	r21,zero
   20eec:	9d04b03a 	or	r2,r19,r20
   20ef0:	103f911e 	bne	r2,zero,20d38 <__alt_data_end+0xfffe2538>
   20ef4:	00800044 	movi	r2,1
   20ef8:	10803fcc 	andi	r2,r2,255
   20efc:	00c00044 	movi	r3,1
   20f00:	10c05f26 	beq	r2,r3,21080 <___vfiprintf_internal_r+0xb44>
   20f04:	00c00084 	movi	r3,2
   20f08:	10ffe31e 	bne	r2,r3,20e98 <__alt_data_end+0xfffe2698>
   20f0c:	0027883a 	mov	r19,zero
   20f10:	0029883a 	mov	r20,zero
   20f14:	00015106 	br	2145c <___vfiprintf_internal_r+0xf20>
   20f18:	9cc03fcc 	andi	r19,r19,255
   20f1c:	b811883a 	mov	r8,r23
   20f20:	9802c01e 	bne	r19,zero,21a24 <___vfiprintf_internal_r+0x14e8>
   20f24:	014000f4 	movhi	r5,3
   20f28:	2964b704 	addi	r5,r5,-27940
   20f2c:	d9402615 	stw	r5,152(sp)
   20f30:	8880080c 	andi	r2,r17,32
   20f34:	103f541e 	bne	r2,zero,20c88 <__alt_data_end+0xfffe2488>
   20f38:	8880040c 	andi	r2,r17,16
   20f3c:	1001f226 	beq	r2,zero,21708 <___vfiprintf_internal_r+0x11cc>
   20f40:	d9402217 	ldw	r5,136(sp)
   20f44:	0029883a 	mov	r20,zero
   20f48:	2cc00017 	ldw	r19,0(r5)
   20f4c:	29400104 	addi	r5,r5,4
   20f50:	d9402215 	stw	r5,136(sp)
   20f54:	003f5106 	br	20c9c <__alt_data_end+0xfffe249c>
   20f58:	d8c02217 	ldw	r3,136(sp)
   20f5c:	b811883a 	mov	r8,r23
   20f60:	d8001d85 	stb	zero,118(sp)
   20f64:	1dc00017 	ldw	r23,0(r3)
   20f68:	1f000104 	addi	fp,r3,4
   20f6c:	b8025926 	beq	r23,zero,218d4 <___vfiprintf_internal_r+0x1398>
   20f70:	80023316 	blt	r16,zero,21840 <___vfiprintf_internal_r+0x1304>
   20f74:	800d883a 	mov	r6,r16
   20f78:	000b883a 	mov	r5,zero
   20f7c:	b809883a 	mov	r4,r23
   20f80:	da002a15 	stw	r8,168(sp)
   20f84:	001263c0 	call	1263c <memchr>
   20f88:	da002a17 	ldw	r8,168(sp)
   20f8c:	10026826 	beq	r2,zero,21930 <___vfiprintf_internal_r+0x13f4>
   20f90:	15e9c83a 	sub	r20,r2,r23
   20f94:	dd401d83 	ldbu	r21,118(sp)
   20f98:	df002215 	stw	fp,136(sp)
   20f9c:	0021883a 	mov	r16,zero
   20fa0:	003e6906 	br	20948 <__alt_data_end+0xfffe2148>
   20fa4:	9cc03fcc 	andi	r19,r19,255
   20fa8:	b811883a 	mov	r8,r23
   20fac:	983fc126 	beq	r19,zero,20eb4 <__alt_data_end+0xfffe26b4>
   20fb0:	d8c02303 	ldbu	r3,140(sp)
   20fb4:	d8c01d85 	stb	r3,118(sp)
   20fb8:	003fbe06 	br	20eb4 <__alt_data_end+0xfffe26b4>
   20fbc:	d9002217 	ldw	r4,136(sp)
   20fc0:	d9402217 	ldw	r5,136(sp)
   20fc4:	21000017 	ldw	r4,0(r4)
   20fc8:	28800104 	addi	r2,r5,4
   20fcc:	d9002515 	stw	r4,148(sp)
   20fd0:	203e3d16 	blt	r4,zero,208c8 <__alt_data_end+0xfffe20c8>
   20fd4:	d8802215 	stw	r2,136(sp)
   20fd8:	b0c00007 	ldb	r3,0(r22)
   20fdc:	003db406 	br	206b0 <__alt_data_end+0xfffe1eb0>
   20fe0:	00c00ac4 	movi	r3,43
   20fe4:	d8c02305 	stb	r3,140(sp)
   20fe8:	04c00044 	movi	r19,1
   20fec:	b0c00007 	ldb	r3,0(r22)
   20ff0:	003daf06 	br	206b0 <__alt_data_end+0xfffe1eb0>
   20ff4:	b0c00007 	ldb	r3,0(r22)
   20ff8:	01000a84 	movi	r4,42
   20ffc:	b4000044 	addi	r16,r22,1
   21000:	19025e26 	beq	r3,r4,2197c <___vfiprintf_internal_r+0x1440>
   21004:	1f3ff404 	addi	fp,r3,-48
   21008:	0009883a 	mov	r4,zero
   2100c:	af025236 	bltu	r21,fp,21958 <___vfiprintf_internal_r+0x141c>
   21010:	01400284 	movi	r5,10
   21014:	002587c0 	call	2587c <__mulsi3>
   21018:	80c00007 	ldb	r3,0(r16)
   2101c:	1709883a 	add	r4,r2,fp
   21020:	85800044 	addi	r22,r16,1
   21024:	1f3ff404 	addi	fp,r3,-48
   21028:	b021883a 	mov	r16,r22
   2102c:	af3ff82e 	bgeu	r21,fp,21010 <__alt_data_end+0xfffe2810>
   21030:	2021883a 	mov	r16,r4
   21034:	203d9f0e 	bge	r4,zero,206b4 <__alt_data_end+0xfffe1eb4>
   21038:	043fffc4 	movi	r16,-1
   2103c:	003d9d06 	br	206b4 <__alt_data_end+0xfffe1eb4>
   21040:	8c401014 	ori	r17,r17,64
   21044:	b0c00007 	ldb	r3,0(r22)
   21048:	003d9906 	br	206b0 <__alt_data_end+0xfffe1eb0>
   2104c:	d9002217 	ldw	r4,136(sp)
   21050:	d8001d85 	stb	zero,118(sp)
   21054:	20c00204 	addi	r3,r4,8
   21058:	24c00017 	ldw	r19,0(r4)
   2105c:	25000117 	ldw	r20,4(r4)
   21060:	8001e716 	blt	r16,zero,21800 <___vfiprintf_internal_r+0x12c4>
   21064:	013fdfc4 	movi	r4,-129
   21068:	9d04b03a 	or	r2,r19,r20
   2106c:	d8c02215 	stw	r3,136(sp)
   21070:	8922703a 	and	r17,r17,r4
   21074:	002b883a 	mov	r21,zero
   21078:	103f2f1e 	bne	r2,zero,20d38 <__alt_data_end+0xfffe2538>
   2107c:	803e2f26 	beq	r16,zero,2093c <__alt_data_end+0xfffe213c>
   21080:	0027883a 	mov	r19,zero
   21084:	9cc00c04 	addi	r19,r19,48
   21088:	dcc019c5 	stb	r19,103(sp)
   2108c:	dd002817 	ldw	r20,160(sp)
   21090:	ddc019c4 	addi	r23,sp,103
   21094:	003e2c06 	br	20948 <__alt_data_end+0xfffe2148>
   21098:	9cc03fcc 	andi	r19,r19,255
   2109c:	b811883a 	mov	r8,r23
   210a0:	9802571e 	bne	r19,zero,21a00 <___vfiprintf_internal_r+0x14c4>
   210a4:	18005726 	beq	r3,zero,21204 <___vfiprintf_internal_r+0xcc8>
   210a8:	04c00044 	movi	r19,1
   210ac:	d8c01005 	stb	r3,64(sp)
   210b0:	d8001d85 	stb	zero,118(sp)
   210b4:	9829883a 	mov	r20,r19
   210b8:	ddc01004 	addi	r23,sp,64
   210bc:	003f0a06 	br	20ce8 <__alt_data_end+0xfffe24e8>
   210c0:	d9402017 	ldw	r5,128(sp)
   210c4:	d9002117 	ldw	r4,132(sp)
   210c8:	d9801a04 	addi	r6,sp,104
   210cc:	da802a15 	stw	r10,168(sp)
   210d0:	00204280 	call	20428 <__sprint_r.part.0>
   210d4:	da802a17 	ldw	r10,168(sp)
   210d8:	1000501e 	bne	r2,zero,2121c <___vfiprintf_internal_r+0xce0>
   210dc:	d9801b17 	ldw	r6,108(sp)
   210e0:	d8801c17 	ldw	r2,112(sp)
   210e4:	d811883a 	mov	r8,sp
   210e8:	31000044 	addi	r4,r6,1
   210ec:	003e3606 	br	209c8 <__alt_data_end+0xfffe21c8>
   210f0:	d9001b17 	ldw	r4,108(sp)
   210f4:	d8801c17 	ldw	r2,112(sp)
   210f8:	21400044 	addi	r5,r4,1
   210fc:	d9801d87 	ldb	r6,118(sp)
   21100:	303e5226 	beq	r6,zero,20a4c <__alt_data_end+0xfffe224c>
   21104:	01800044 	movi	r6,1
   21108:	d9001d84 	addi	r4,sp,118
   2110c:	1185883a 	add	r2,r2,r6
   21110:	41000015 	stw	r4,0(r8)
   21114:	41800115 	stw	r6,4(r8)
   21118:	d8801c15 	stw	r2,112(sp)
   2111c:	d9401b15 	stw	r5,108(sp)
   21120:	010001c4 	movi	r4,7
   21124:	2140b00e 	bge	r4,r5,213e8 <___vfiprintf_internal_r+0xeac>
   21128:	1000f61e 	bne	r2,zero,21504 <___vfiprintf_internal_r+0xfc8>
   2112c:	3800b31e 	bne	r7,zero,213fc <___vfiprintf_internal_r+0xec0>
   21130:	0009883a 	mov	r4,zero
   21134:	300b883a 	mov	r5,r6
   21138:	d811883a 	mov	r8,sp
   2113c:	01802004 	movi	r6,128
   21140:	19be5226 	beq	r3,r6,20a8c <__alt_data_end+0xfffe228c>
   21144:	8521c83a 	sub	r16,r16,r20
   21148:	043e790e 	bge	zero,r16,20b30 <__alt_data_end+0xfffe2330>
   2114c:	05400404 	movi	r21,16
   21150:	ac01b00e 	bge	r21,r16,21814 <___vfiprintf_internal_r+0x12d8>
   21154:	014000f4 	movhi	r5,3
   21158:	2965e484 	addi	r5,r5,-26734
   2115c:	d9402315 	stw	r5,140(sp)
   21160:	070001c4 	movi	fp,7
   21164:	00000506 	br	2117c <___vfiprintf_internal_r+0xc40>
   21168:	21400084 	addi	r5,r4,2
   2116c:	42000204 	addi	r8,r8,8
   21170:	1809883a 	mov	r4,r3
   21174:	843ffc04 	addi	r16,r16,-16
   21178:	ac000d0e 	bge	r21,r16,211b0 <___vfiprintf_internal_r+0xc74>
   2117c:	10800404 	addi	r2,r2,16
   21180:	20c00044 	addi	r3,r4,1
   21184:	44800015 	stw	r18,0(r8)
   21188:	45400115 	stw	r21,4(r8)
   2118c:	d8801c15 	stw	r2,112(sp)
   21190:	d8c01b15 	stw	r3,108(sp)
   21194:	e0fff40e 	bge	fp,r3,21168 <__alt_data_end+0xfffe2968>
   21198:	1000101e 	bne	r2,zero,211dc <___vfiprintf_internal_r+0xca0>
   2119c:	843ffc04 	addi	r16,r16,-16
   211a0:	01400044 	movi	r5,1
   211a4:	0009883a 	mov	r4,zero
   211a8:	d811883a 	mov	r8,sp
   211ac:	ac3ff316 	blt	r21,r16,2117c <__alt_data_end+0xfffe297c>
   211b0:	d8c02317 	ldw	r3,140(sp)
   211b4:	1405883a 	add	r2,r2,r16
   211b8:	44000115 	stw	r16,4(r8)
   211bc:	40c00015 	stw	r3,0(r8)
   211c0:	d8801c15 	stw	r2,112(sp)
   211c4:	d9401b15 	stw	r5,108(sp)
   211c8:	00c001c4 	movi	r3,7
   211cc:	19401916 	blt	r3,r5,21234 <___vfiprintf_internal_r+0xcf8>
   211d0:	42000204 	addi	r8,r8,8
   211d4:	29400044 	addi	r5,r5,1
   211d8:	003e5506 	br	20b30 <__alt_data_end+0xfffe2330>
   211dc:	d9402017 	ldw	r5,128(sp)
   211e0:	d9002117 	ldw	r4,132(sp)
   211e4:	d9801a04 	addi	r6,sp,104
   211e8:	00204280 	call	20428 <__sprint_r.part.0>
   211ec:	10000b1e 	bne	r2,zero,2121c <___vfiprintf_internal_r+0xce0>
   211f0:	d9001b17 	ldw	r4,108(sp)
   211f4:	d8801c17 	ldw	r2,112(sp)
   211f8:	d811883a 	mov	r8,sp
   211fc:	21400044 	addi	r5,r4,1
   21200:	003fdc06 	br	21174 <__alt_data_end+0xfffe2974>
   21204:	d8801c17 	ldw	r2,112(sp)
   21208:	10000426 	beq	r2,zero,2121c <___vfiprintf_internal_r+0xce0>
   2120c:	d9402017 	ldw	r5,128(sp)
   21210:	d9002117 	ldw	r4,132(sp)
   21214:	d9801a04 	addi	r6,sp,104
   21218:	00204280 	call	20428 <__sprint_r.part.0>
   2121c:	d9402017 	ldw	r5,128(sp)
   21220:	2880030b 	ldhu	r2,12(r5)
   21224:	1080100c 	andi	r2,r2,64
   21228:	10014d1e 	bne	r2,zero,21760 <___vfiprintf_internal_r+0x1224>
   2122c:	d8802417 	ldw	r2,144(sp)
   21230:	003d9706 	br	20890 <__alt_data_end+0xfffe2090>
   21234:	1000d21e 	bne	r2,zero,21580 <___vfiprintf_internal_r+0x1044>
   21238:	00c00044 	movi	r3,1
   2123c:	a005883a 	mov	r2,r20
   21240:	ddc00015 	stw	r23,0(sp)
   21244:	dd000115 	stw	r20,4(sp)
   21248:	dd001c15 	stw	r20,112(sp)
   2124c:	d8c01b15 	stw	r3,108(sp)
   21250:	d811883a 	mov	r8,sp
   21254:	42000204 	addi	r8,r8,8
   21258:	8c40010c 	andi	r17,r17,4
   2125c:	88004026 	beq	r17,zero,21360 <___vfiprintf_internal_r+0xe24>
   21260:	d9002517 	ldw	r4,148(sp)
   21264:	24e3c83a 	sub	r17,r4,r19
   21268:	04403d0e 	bge	zero,r17,21360 <___vfiprintf_internal_r+0xe24>
   2126c:	04000404 	movi	r16,16
   21270:	8441a90e 	bge	r16,r17,21918 <___vfiprintf_internal_r+0x13dc>
   21274:	00c000f4 	movhi	r3,3
   21278:	18e5e884 	addi	r3,r3,-26718
   2127c:	d9001b17 	ldw	r4,108(sp)
   21280:	d8c02315 	stw	r3,140(sp)
   21284:	050001c4 	movi	r20,7
   21288:	dd402117 	ldw	r21,132(sp)
   2128c:	ddc02017 	ldw	r23,128(sp)
   21290:	00000506 	br	212a8 <___vfiprintf_internal_r+0xd6c>
   21294:	21400084 	addi	r5,r4,2
   21298:	42000204 	addi	r8,r8,8
   2129c:	1809883a 	mov	r4,r3
   212a0:	8c7ffc04 	addi	r17,r17,-16
   212a4:	84400f0e 	bge	r16,r17,212e4 <___vfiprintf_internal_r+0xda8>
   212a8:	014000f4 	movhi	r5,3
   212ac:	10800404 	addi	r2,r2,16
   212b0:	20c00044 	addi	r3,r4,1
   212b4:	2965e884 	addi	r5,r5,-26718
   212b8:	41400015 	stw	r5,0(r8)
   212bc:	44000115 	stw	r16,4(r8)
   212c0:	d8801c15 	stw	r2,112(sp)
   212c4:	d8c01b15 	stw	r3,108(sp)
   212c8:	a0fff20e 	bge	r20,r3,21294 <__alt_data_end+0xfffe2a94>
   212cc:	1000141e 	bne	r2,zero,21320 <___vfiprintf_internal_r+0xde4>
   212d0:	8c7ffc04 	addi	r17,r17,-16
   212d4:	01400044 	movi	r5,1
   212d8:	0009883a 	mov	r4,zero
   212dc:	d811883a 	mov	r8,sp
   212e0:	847ff116 	blt	r16,r17,212a8 <__alt_data_end+0xfffe2aa8>
   212e4:	d8c02317 	ldw	r3,140(sp)
   212e8:	1445883a 	add	r2,r2,r17
   212ec:	44400115 	stw	r17,4(r8)
   212f0:	40c00015 	stw	r3,0(r8)
   212f4:	d8801c15 	stw	r2,112(sp)
   212f8:	d9401b15 	stw	r5,108(sp)
   212fc:	00c001c4 	movi	r3,7
   21300:	1940170e 	bge	r3,r5,21360 <___vfiprintf_internal_r+0xe24>
   21304:	1000101e 	bne	r2,zero,21348 <___vfiprintf_internal_r+0xe0c>
   21308:	d8802517 	ldw	r2,148(sp)
   2130c:	14c11616 	blt	r2,r19,21768 <___vfiprintf_internal_r+0x122c>
   21310:	d9002417 	ldw	r4,144(sp)
   21314:	2089883a 	add	r4,r4,r2
   21318:	d9002415 	stw	r4,144(sp)
   2131c:	003e1806 	br	20b80 <__alt_data_end+0xfffe2380>
   21320:	d9801a04 	addi	r6,sp,104
   21324:	b80b883a 	mov	r5,r23
   21328:	a809883a 	mov	r4,r21
   2132c:	00204280 	call	20428 <__sprint_r.part.0>
   21330:	103fba1e 	bne	r2,zero,2121c <__alt_data_end+0xfffe2a1c>
   21334:	d9001b17 	ldw	r4,108(sp)
   21338:	d8801c17 	ldw	r2,112(sp)
   2133c:	d811883a 	mov	r8,sp
   21340:	21400044 	addi	r5,r4,1
   21344:	003fd606 	br	212a0 <__alt_data_end+0xfffe2aa0>
   21348:	d9402017 	ldw	r5,128(sp)
   2134c:	d9002117 	ldw	r4,132(sp)
   21350:	d9801a04 	addi	r6,sp,104
   21354:	00204280 	call	20428 <__sprint_r.part.0>
   21358:	103fb01e 	bne	r2,zero,2121c <__alt_data_end+0xfffe2a1c>
   2135c:	d8801c17 	ldw	r2,112(sp)
   21360:	d8c02517 	ldw	r3,148(sp)
   21364:	1cc0010e 	bge	r3,r19,2136c <___vfiprintf_internal_r+0xe30>
   21368:	9807883a 	mov	r3,r19
   2136c:	d9002417 	ldw	r4,144(sp)
   21370:	20c9883a 	add	r4,r4,r3
   21374:	d9002415 	stw	r4,144(sp)
   21378:	103e0126 	beq	r2,zero,20b80 <__alt_data_end+0xfffe2380>
   2137c:	d9402017 	ldw	r5,128(sp)
   21380:	d9002117 	ldw	r4,132(sp)
   21384:	d9801a04 	addi	r6,sp,104
   21388:	00204280 	call	20428 <__sprint_r.part.0>
   2138c:	103dfc26 	beq	r2,zero,20b80 <__alt_data_end+0xfffe2380>
   21390:	003fa206 	br	2121c <__alt_data_end+0xfffe2a1c>
   21394:	d9402017 	ldw	r5,128(sp)
   21398:	d9002117 	ldw	r4,132(sp)
   2139c:	d9801a04 	addi	r6,sp,104
   213a0:	d9c02b15 	stw	r7,172(sp)
   213a4:	00204280 	call	20428 <__sprint_r.part.0>
   213a8:	d9c02b17 	ldw	r7,172(sp)
   213ac:	103f9b1e 	bne	r2,zero,2121c <__alt_data_end+0xfffe2a1c>
   213b0:	d9001b17 	ldw	r4,108(sp)
   213b4:	d8801c17 	ldw	r2,112(sp)
   213b8:	d811883a 	mov	r8,sp
   213bc:	21800044 	addi	r6,r4,1
   213c0:	003dbf06 	br	20ac0 <__alt_data_end+0xfffe22c0>
   213c4:	1000d81e 	bne	r2,zero,21728 <___vfiprintf_internal_r+0x11ec>
   213c8:	d9001d87 	ldb	r4,118(sp)
   213cc:	20000a26 	beq	r4,zero,213f8 <___vfiprintf_internal_r+0xebc>
   213d0:	00800044 	movi	r2,1
   213d4:	d9001d84 	addi	r4,sp,118
   213d8:	100b883a 	mov	r5,r2
   213dc:	d9000015 	stw	r4,0(sp)
   213e0:	d8800115 	stw	r2,4(sp)
   213e4:	d811883a 	mov	r8,sp
   213e8:	2809883a 	mov	r4,r5
   213ec:	42000204 	addi	r8,r8,8
   213f0:	29400044 	addi	r5,r5,1
   213f4:	003d9506 	br	20a4c <__alt_data_end+0xfffe224c>
   213f8:	3800fd26 	beq	r7,zero,217f0 <___vfiprintf_internal_r+0x12b4>
   213fc:	00800084 	movi	r2,2
   21400:	d9001d04 	addi	r4,sp,116
   21404:	d9000015 	stw	r4,0(sp)
   21408:	d8800115 	stw	r2,4(sp)
   2140c:	01400044 	movi	r5,1
   21410:	d811883a 	mov	r8,sp
   21414:	2809883a 	mov	r4,r5
   21418:	42000204 	addi	r8,r8,8
   2141c:	29400044 	addi	r5,r5,1
   21420:	003f4606 	br	2113c <__alt_data_end+0xfffe293c>
   21424:	d8802517 	ldw	r2,148(sp)
   21428:	14c0010e 	bge	r2,r19,21430 <___vfiprintf_internal_r+0xef4>
   2142c:	9805883a 	mov	r2,r19
   21430:	d9402417 	ldw	r5,144(sp)
   21434:	288b883a 	add	r5,r5,r2
   21438:	d9402415 	stw	r5,144(sp)
   2143c:	003dd006 	br	20b80 <__alt_data_end+0xfffe2380>
   21440:	d8001d85 	stb	zero,118(sp)
   21444:	80005d16 	blt	r16,zero,215bc <___vfiprintf_internal_r+0x1080>
   21448:	00ffdfc4 	movi	r3,-129
   2144c:	9d04b03a 	or	r2,r19,r20
   21450:	88e2703a 	and	r17,r17,r3
   21454:	103d3726 	beq	r2,zero,20934 <__alt_data_end+0xfffe2134>
   21458:	002b883a 	mov	r21,zero
   2145c:	d9002617 	ldw	r4,152(sp)
   21460:	ddc01a04 	addi	r23,sp,104
   21464:	988003cc 	andi	r2,r19,15
   21468:	a006973a 	slli	r3,r20,28
   2146c:	2085883a 	add	r2,r4,r2
   21470:	9826d13a 	srli	r19,r19,4
   21474:	10800003 	ldbu	r2,0(r2)
   21478:	a028d13a 	srli	r20,r20,4
   2147c:	bdffffc4 	addi	r23,r23,-1
   21480:	1ce6b03a 	or	r19,r3,r19
   21484:	b8800005 	stb	r2,0(r23)
   21488:	9d04b03a 	or	r2,r19,r20
   2148c:	103ff51e 	bne	r2,zero,21464 <__alt_data_end+0xfffe2c64>
   21490:	d8801e17 	ldw	r2,120(sp)
   21494:	15e9c83a 	sub	r20,r2,r23
   21498:	003d2b06 	br	20948 <__alt_data_end+0xfffe2148>
   2149c:	d9402017 	ldw	r5,128(sp)
   214a0:	d9002117 	ldw	r4,132(sp)
   214a4:	d9801a04 	addi	r6,sp,104
   214a8:	00204280 	call	20428 <__sprint_r.part.0>
   214ac:	103f5b1e 	bne	r2,zero,2121c <__alt_data_end+0xfffe2a1c>
   214b0:	d8801c17 	ldw	r2,112(sp)
   214b4:	d811883a 	mov	r8,sp
   214b8:	003f6706 	br	21258 <__alt_data_end+0xfffe2a58>
   214bc:	d9402017 	ldw	r5,128(sp)
   214c0:	d9002117 	ldw	r4,132(sp)
   214c4:	d9801a04 	addi	r6,sp,104
   214c8:	00204280 	call	20428 <__sprint_r.part.0>
   214cc:	103f531e 	bne	r2,zero,2121c <__alt_data_end+0xfffe2a1c>
   214d0:	d811883a 	mov	r8,sp
   214d4:	003cd906 	br	2083c <__alt_data_end+0xfffe203c>
   214d8:	10803fcc 	andi	r2,r2,255
   214dc:	1080201c 	xori	r2,r2,128
   214e0:	10bfe004 	addi	r2,r2,-128
   214e4:	00c00c04 	movi	r3,48
   214e8:	10ffe926 	beq	r2,r3,21490 <__alt_data_end+0xfffe2c90>
   214ec:	b8ffffc5 	stb	r3,-1(r23)
   214f0:	d8c01e17 	ldw	r3,120(sp)
   214f4:	b8bfffc4 	addi	r2,r23,-1
   214f8:	102f883a 	mov	r23,r2
   214fc:	18a9c83a 	sub	r20,r3,r2
   21500:	003d1106 	br	20948 <__alt_data_end+0xfffe2148>
   21504:	d9402017 	ldw	r5,128(sp)
   21508:	d9002117 	ldw	r4,132(sp)
   2150c:	d9801a04 	addi	r6,sp,104
   21510:	d8c02a15 	stw	r3,168(sp)
   21514:	d9c02b15 	stw	r7,172(sp)
   21518:	00204280 	call	20428 <__sprint_r.part.0>
   2151c:	d8c02a17 	ldw	r3,168(sp)
   21520:	d9c02b17 	ldw	r7,172(sp)
   21524:	103f3d1e 	bne	r2,zero,2121c <__alt_data_end+0xfffe2a1c>
   21528:	d9001b17 	ldw	r4,108(sp)
   2152c:	d8801c17 	ldw	r2,112(sp)
   21530:	d811883a 	mov	r8,sp
   21534:	21400044 	addi	r5,r4,1
   21538:	003d4406 	br	20a4c <__alt_data_end+0xfffe224c>
   2153c:	d9402017 	ldw	r5,128(sp)
   21540:	d9002117 	ldw	r4,132(sp)
   21544:	d9801a04 	addi	r6,sp,104
   21548:	d8c02a15 	stw	r3,168(sp)
   2154c:	00204280 	call	20428 <__sprint_r.part.0>
   21550:	d8c02a17 	ldw	r3,168(sp)
   21554:	103f311e 	bne	r2,zero,2121c <__alt_data_end+0xfffe2a1c>
   21558:	d9001b17 	ldw	r4,108(sp)
   2155c:	d8801c17 	ldw	r2,112(sp)
   21560:	d811883a 	mov	r8,sp
   21564:	21400044 	addi	r5,r4,1
   21568:	003ef406 	br	2113c <__alt_data_end+0xfffe293c>
   2156c:	1000bd1e 	bne	r2,zero,21864 <___vfiprintf_internal_r+0x1328>
   21570:	01400044 	movi	r5,1
   21574:	0009883a 	mov	r4,zero
   21578:	d811883a 	mov	r8,sp
   2157c:	003ef106 	br	21144 <__alt_data_end+0xfffe2944>
   21580:	d9402017 	ldw	r5,128(sp)
   21584:	d9002117 	ldw	r4,132(sp)
   21588:	d9801a04 	addi	r6,sp,104
   2158c:	00204280 	call	20428 <__sprint_r.part.0>
   21590:	103f221e 	bne	r2,zero,2121c <__alt_data_end+0xfffe2a1c>
   21594:	d9401b17 	ldw	r5,108(sp)
   21598:	d8801c17 	ldw	r2,112(sp)
   2159c:	d811883a 	mov	r8,sp
   215a0:	29400044 	addi	r5,r5,1
   215a4:	003d6206 	br	20b30 <__alt_data_end+0xfffe2330>
   215a8:	014000f4 	movhi	r5,3
   215ac:	2964bc04 	addi	r5,r5,-27920
   215b0:	d9402615 	stw	r5,152(sp)
   215b4:	d8c02215 	stw	r3,136(sp)
   215b8:	1023883a 	mov	r17,r2
   215bc:	9d04b03a 	or	r2,r19,r20
   215c0:	103fa51e 	bne	r2,zero,21458 <__alt_data_end+0xfffe2c58>
   215c4:	002b883a 	mov	r21,zero
   215c8:	00800084 	movi	r2,2
   215cc:	003e4a06 	br	20ef8 <__alt_data_end+0xfffe26f8>
   215d0:	014000f4 	movhi	r5,3
   215d4:	2964bc04 	addi	r5,r5,-27920
   215d8:	002b883a 	mov	r21,zero
   215dc:	d9402615 	stw	r5,152(sp)
   215e0:	003f9e06 	br	2145c <__alt_data_end+0xfffe2c5c>
   215e4:	d9402217 	ldw	r5,136(sp)
   215e8:	d8001d85 	stb	zero,118(sp)
   215ec:	0029883a 	mov	r20,zero
   215f0:	28800104 	addi	r2,r5,4
   215f4:	2cc00017 	ldw	r19,0(r5)
   215f8:	803e3a16 	blt	r16,zero,20ee4 <__alt_data_end+0xfffe26e4>
   215fc:	00ffdfc4 	movi	r3,-129
   21600:	d8802215 	stw	r2,136(sp)
   21604:	88e2703a 	and	r17,r17,r3
   21608:	002b883a 	mov	r21,zero
   2160c:	983e9b26 	beq	r19,zero,2107c <__alt_data_end+0xfffe287c>
   21610:	00800244 	movi	r2,9
   21614:	14fdc936 	bltu	r2,r19,20d3c <__alt_data_end+0xfffe253c>
   21618:	003e9a06 	br	21084 <__alt_data_end+0xfffe2884>
   2161c:	00800c04 	movi	r2,48
   21620:	d8c01d45 	stb	r3,117(sp)
   21624:	d8801d05 	stb	r2,116(sp)
   21628:	d8001d85 	stb	zero,118(sp)
   2162c:	88c00094 	ori	r3,r17,2
   21630:	80009c16 	blt	r16,zero,218a4 <___vfiprintf_internal_r+0x1368>
   21634:	00bfdfc4 	movi	r2,-129
   21638:	88a2703a 	and	r17,r17,r2
   2163c:	8c400094 	ori	r17,r17,2
   21640:	002b883a 	mov	r21,zero
   21644:	003f8506 	br	2145c <__alt_data_end+0xfffe2c5c>
   21648:	b029883a 	mov	r20,r22
   2164c:	003c0b06 	br	2067c <__alt_data_end+0xfffe1e7c>
   21650:	04e7c83a 	sub	r19,zero,r19
   21654:	05400b44 	movi	r21,45
   21658:	9804c03a 	cmpne	r2,r19,zero
   2165c:	0529c83a 	sub	r20,zero,r20
   21660:	dd401d85 	stb	r21,118(sp)
   21664:	a0a9c83a 	sub	r20,r20,r2
   21668:	80009716 	blt	r16,zero,218c8 <___vfiprintf_internal_r+0x138c>
   2166c:	00bfdfc4 	movi	r2,-129
   21670:	88a2703a 	and	r17,r17,r2
   21674:	003db006 	br	20d38 <__alt_data_end+0xfffe2538>
   21678:	b0c00007 	ldb	r3,0(r22)
   2167c:	003c0c06 	br	206b0 <__alt_data_end+0xfffe1eb0>
   21680:	8880100c 	andi	r2,r17,64
   21684:	d8001d85 	stb	zero,118(sp)
   21688:	1000461e 	bne	r2,zero,217a4 <___vfiprintf_internal_r+0x1268>
   2168c:	d9002217 	ldw	r4,136(sp)
   21690:	0029883a 	mov	r20,zero
   21694:	20800104 	addi	r2,r4,4
   21698:	24c00017 	ldw	r19,0(r4)
   2169c:	803df80e 	bge	r16,zero,20e80 <__alt_data_end+0xfffe2680>
   216a0:	9d06b03a 	or	r3,r19,r20
   216a4:	d8802215 	stw	r2,136(sp)
   216a8:	183d5e1e 	bne	r3,zero,20c24 <__alt_data_end+0xfffe2424>
   216ac:	002b883a 	mov	r21,zero
   216b0:	0005883a 	mov	r2,zero
   216b4:	003e1006 	br	20ef8 <__alt_data_end+0xfffe26f8>
   216b8:	8880040c 	andi	r2,r17,16
   216bc:	1000321e 	bne	r2,zero,21788 <___vfiprintf_internal_r+0x124c>
   216c0:	8c40100c 	andi	r17,r17,64
   216c4:	88008d26 	beq	r17,zero,218fc <___vfiprintf_internal_r+0x13c0>
   216c8:	d9402217 	ldw	r5,136(sp)
   216cc:	d8c02417 	ldw	r3,144(sp)
   216d0:	28800017 	ldw	r2,0(r5)
   216d4:	29400104 	addi	r5,r5,4
   216d8:	d9402215 	stw	r5,136(sp)
   216dc:	10c0000d 	sth	r3,0(r2)
   216e0:	003bca06 	br	2060c <__alt_data_end+0xfffe1e0c>
   216e4:	8880100c 	andi	r2,r17,64
   216e8:	10003a26 	beq	r2,zero,217d4 <___vfiprintf_internal_r+0x1298>
   216ec:	d8802217 	ldw	r2,136(sp)
   216f0:	14c0000f 	ldh	r19,0(r2)
   216f4:	10800104 	addi	r2,r2,4
   216f8:	d8802215 	stw	r2,136(sp)
   216fc:	9829d7fa 	srai	r20,r19,31
   21700:	a005883a 	mov	r2,r20
   21704:	003d8506 	br	20d1c <__alt_data_end+0xfffe251c>
   21708:	8880100c 	andi	r2,r17,64
   2170c:	10002b26 	beq	r2,zero,217bc <___vfiprintf_internal_r+0x1280>
   21710:	d8802217 	ldw	r2,136(sp)
   21714:	0029883a 	mov	r20,zero
   21718:	14c0000b 	ldhu	r19,0(r2)
   2171c:	10800104 	addi	r2,r2,4
   21720:	d8802215 	stw	r2,136(sp)
   21724:	003d5d06 	br	20c9c <__alt_data_end+0xfffe249c>
   21728:	d9402017 	ldw	r5,128(sp)
   2172c:	d9002117 	ldw	r4,132(sp)
   21730:	d9801a04 	addi	r6,sp,104
   21734:	d8c02a15 	stw	r3,168(sp)
   21738:	d9c02b15 	stw	r7,172(sp)
   2173c:	00204280 	call	20428 <__sprint_r.part.0>
   21740:	d8c02a17 	ldw	r3,168(sp)
   21744:	d9c02b17 	ldw	r7,172(sp)
   21748:	103eb41e 	bne	r2,zero,2121c <__alt_data_end+0xfffe2a1c>
   2174c:	d9001b17 	ldw	r4,108(sp)
   21750:	d8801c17 	ldw	r2,112(sp)
   21754:	d811883a 	mov	r8,sp
   21758:	21400044 	addi	r5,r4,1
   2175c:	003e6706 	br	210fc <__alt_data_end+0xfffe28fc>
   21760:	00bfffc4 	movi	r2,-1
   21764:	003c4a06 	br	20890 <__alt_data_end+0xfffe2090>
   21768:	9805883a 	mov	r2,r19
   2176c:	003ee806 	br	21310 <__alt_data_end+0xfffe2b10>
   21770:	d8c02217 	ldw	r3,136(sp)
   21774:	0029883a 	mov	r20,zero
   21778:	18800104 	addi	r2,r3,4
   2177c:	1cc0000b 	ldhu	r19,0(r3)
   21780:	803f9e0e 	bge	r16,zero,215fc <__alt_data_end+0xfffe2dfc>
   21784:	003dd706 	br	20ee4 <__alt_data_end+0xfffe26e4>
   21788:	d8c02217 	ldw	r3,136(sp)
   2178c:	d9002417 	ldw	r4,144(sp)
   21790:	18800017 	ldw	r2,0(r3)
   21794:	18c00104 	addi	r3,r3,4
   21798:	d8c02215 	stw	r3,136(sp)
   2179c:	11000015 	stw	r4,0(r2)
   217a0:	003b9a06 	br	2060c <__alt_data_end+0xfffe1e0c>
   217a4:	d8c02217 	ldw	r3,136(sp)
   217a8:	0029883a 	mov	r20,zero
   217ac:	18800104 	addi	r2,r3,4
   217b0:	1cc0000b 	ldhu	r19,0(r3)
   217b4:	803db20e 	bge	r16,zero,20e80 <__alt_data_end+0xfffe2680>
   217b8:	003fb906 	br	216a0 <__alt_data_end+0xfffe2ea0>
   217bc:	d9002217 	ldw	r4,136(sp)
   217c0:	0029883a 	mov	r20,zero
   217c4:	24c00017 	ldw	r19,0(r4)
   217c8:	21000104 	addi	r4,r4,4
   217cc:	d9002215 	stw	r4,136(sp)
   217d0:	003d3206 	br	20c9c <__alt_data_end+0xfffe249c>
   217d4:	d8c02217 	ldw	r3,136(sp)
   217d8:	1cc00017 	ldw	r19,0(r3)
   217dc:	18c00104 	addi	r3,r3,4
   217e0:	d8c02215 	stw	r3,136(sp)
   217e4:	9829d7fa 	srai	r20,r19,31
   217e8:	a005883a 	mov	r2,r20
   217ec:	003d4b06 	br	20d1c <__alt_data_end+0xfffe251c>
   217f0:	0009883a 	mov	r4,zero
   217f4:	01400044 	movi	r5,1
   217f8:	d811883a 	mov	r8,sp
   217fc:	003e4f06 	br	2113c <__alt_data_end+0xfffe293c>
   21800:	d8c02215 	stw	r3,136(sp)
   21804:	002b883a 	mov	r21,zero
   21808:	003db806 	br	20eec <__alt_data_end+0xfffe26ec>
   2180c:	d811883a 	mov	r8,sp
   21810:	003e9606 	br	2126c <__alt_data_end+0xfffe2a6c>
   21814:	010000f4 	movhi	r4,3
   21818:	2125e484 	addi	r4,r4,-26734
   2181c:	d9002315 	stw	r4,140(sp)
   21820:	003e6306 	br	211b0 <__alt_data_end+0xfffe29b0>
   21824:	b0c00043 	ldbu	r3,1(r22)
   21828:	8c400814 	ori	r17,r17,32
   2182c:	b5800044 	addi	r22,r22,1
   21830:	18c03fcc 	andi	r3,r3,255
   21834:	18c0201c 	xori	r3,r3,128
   21838:	18ffe004 	addi	r3,r3,-128
   2183c:	003b9c06 	br	206b0 <__alt_data_end+0xfffe1eb0>
   21840:	b809883a 	mov	r4,r23
   21844:	da002a15 	stw	r8,168(sp)
   21848:	00137600 	call	13760 <strlen>
   2184c:	1029883a 	mov	r20,r2
   21850:	dd401d83 	ldbu	r21,118(sp)
   21854:	df002215 	stw	fp,136(sp)
   21858:	0021883a 	mov	r16,zero
   2185c:	da002a17 	ldw	r8,168(sp)
   21860:	003c3906 	br	20948 <__alt_data_end+0xfffe2148>
   21864:	d9402017 	ldw	r5,128(sp)
   21868:	d9002117 	ldw	r4,132(sp)
   2186c:	d9801a04 	addi	r6,sp,104
   21870:	00204280 	call	20428 <__sprint_r.part.0>
   21874:	103e691e 	bne	r2,zero,2121c <__alt_data_end+0xfffe2a1c>
   21878:	d9001b17 	ldw	r4,108(sp)
   2187c:	d8801c17 	ldw	r2,112(sp)
   21880:	d811883a 	mov	r8,sp
   21884:	21400044 	addi	r5,r4,1
   21888:	003e2e06 	br	21144 <__alt_data_end+0xfffe2944>
   2188c:	010000f4 	movhi	r4,3
   21890:	2125e884 	addi	r4,r4,-26718
   21894:	d9002315 	stw	r4,140(sp)
   21898:	d9001b17 	ldw	r4,108(sp)
   2189c:	21000044 	addi	r4,r4,1
   218a0:	003c5e06 	br	20a1c <__alt_data_end+0xfffe221c>
   218a4:	002b883a 	mov	r21,zero
   218a8:	00800084 	movi	r2,2
   218ac:	10803fcc 	andi	r2,r2,255
   218b0:	01000044 	movi	r4,1
   218b4:	11002b26 	beq	r2,r4,21964 <___vfiprintf_internal_r+0x1428>
   218b8:	01000084 	movi	r4,2
   218bc:	11002b1e 	bne	r2,r4,2196c <___vfiprintf_internal_r+0x1430>
   218c0:	1823883a 	mov	r17,r3
   218c4:	003ee506 	br	2145c <__alt_data_end+0xfffe2c5c>
   218c8:	8807883a 	mov	r3,r17
   218cc:	00800044 	movi	r2,1
   218d0:	003ff606 	br	218ac <__alt_data_end+0xfffe30ac>
   218d4:	00800184 	movi	r2,6
   218d8:	1400012e 	bgeu	r2,r16,218e0 <___vfiprintf_internal_r+0x13a4>
   218dc:	1021883a 	mov	r16,r2
   218e0:	8029883a 	mov	r20,r16
   218e4:	8027883a 	mov	r19,r16
   218e8:	80002216 	blt	r16,zero,21974 <___vfiprintf_internal_r+0x1438>
   218ec:	05c000f4 	movhi	r23,3
   218f0:	df002215 	stw	fp,136(sp)
   218f4:	bde4c104 	addi	r23,r23,-27900
   218f8:	003cfb06 	br	20ce8 <__alt_data_end+0xfffe24e8>
   218fc:	d9002217 	ldw	r4,136(sp)
   21900:	d9402417 	ldw	r5,144(sp)
   21904:	20800017 	ldw	r2,0(r4)
   21908:	21000104 	addi	r4,r4,4
   2190c:	d9002215 	stw	r4,136(sp)
   21910:	11400015 	stw	r5,0(r2)
   21914:	003b3d06 	br	2060c <__alt_data_end+0xfffe1e0c>
   21918:	014000f4 	movhi	r5,3
   2191c:	2965e884 	addi	r5,r5,-26718
   21920:	d9402315 	stw	r5,140(sp)
   21924:	d9401b17 	ldw	r5,108(sp)
   21928:	29400044 	addi	r5,r5,1
   2192c:	003e6d06 	br	212e4 <__alt_data_end+0xfffe2ae4>
   21930:	8029883a 	mov	r20,r16
   21934:	dd401d83 	ldbu	r21,118(sp)
   21938:	df002215 	stw	fp,136(sp)
   2193c:	0021883a 	mov	r16,zero
   21940:	003c0106 	br	20948 <__alt_data_end+0xfffe2148>
   21944:	00c000f4 	movhi	r3,3
   21948:	18e5e484 	addi	r3,r3,-26734
   2194c:	d8c02315 	stw	r3,140(sp)
   21950:	280d883a 	mov	r6,r5
   21954:	003c6906 	br	20afc <__alt_data_end+0xfffe22fc>
   21958:	802d883a 	mov	r22,r16
   2195c:	0021883a 	mov	r16,zero
   21960:	003b5406 	br	206b4 <__alt_data_end+0xfffe1eb4>
   21964:	1823883a 	mov	r17,r3
   21968:	003cf306 	br	20d38 <__alt_data_end+0xfffe2538>
   2196c:	1823883a 	mov	r17,r3
   21970:	003cad06 	br	20c28 <__alt_data_end+0xfffe2428>
   21974:	0027883a 	mov	r19,zero
   21978:	003fdc06 	br	218ec <__alt_data_end+0xfffe30ec>
   2197c:	d9402217 	ldw	r5,136(sp)
   21980:	8005883a 	mov	r2,r16
   21984:	b0c00043 	ldbu	r3,1(r22)
   21988:	2c000017 	ldw	r16,0(r5)
   2198c:	29000104 	addi	r4,r5,4
   21990:	d9002215 	stw	r4,136(sp)
   21994:	102d883a 	mov	r22,r2
   21998:	803fa50e 	bge	r16,zero,21830 <__alt_data_end+0xfffe3030>
   2199c:	18c03fcc 	andi	r3,r3,255
   219a0:	18c0201c 	xori	r3,r3,128
   219a4:	043fffc4 	movi	r16,-1
   219a8:	18ffe004 	addi	r3,r3,-128
   219ac:	003b4006 	br	206b0 <__alt_data_end+0xfffe1eb0>
   219b0:	d9402303 	ldbu	r5,140(sp)
   219b4:	d9401d85 	stb	r5,118(sp)
   219b8:	003cae06 	br	20c74 <__alt_data_end+0xfffe2474>
   219bc:	d8c02303 	ldbu	r3,140(sp)
   219c0:	d8c01d85 	stb	r3,118(sp)
   219c4:	003d1406 	br	20e18 <__alt_data_end+0xfffe2618>
   219c8:	d8c02303 	ldbu	r3,140(sp)
   219cc:	d8c01d85 	stb	r3,118(sp)
   219d0:	003cca06 	br	20cfc <__alt_data_end+0xfffe24fc>
   219d4:	8880004c 	andi	r2,r17,1
   219d8:	002b883a 	mov	r21,zero
   219dc:	10000526 	beq	r2,zero,219f4 <___vfiprintf_internal_r+0x14b8>
   219e0:	00800c04 	movi	r2,48
   219e4:	d88019c5 	stb	r2,103(sp)
   219e8:	dd002817 	ldw	r20,160(sp)
   219ec:	ddc019c4 	addi	r23,sp,103
   219f0:	003bd506 	br	20948 <__alt_data_end+0xfffe2148>
   219f4:	0029883a 	mov	r20,zero
   219f8:	ddc01a04 	addi	r23,sp,104
   219fc:	003bd206 	br	20948 <__alt_data_end+0xfffe2148>
   21a00:	d9002303 	ldbu	r4,140(sp)
   21a04:	d9001d85 	stb	r4,118(sp)
   21a08:	003da606 	br	210a4 <__alt_data_end+0xfffe28a4>
   21a0c:	d8c02303 	ldbu	r3,140(sp)
   21a10:	d8c01d85 	stb	r3,118(sp)
   21a14:	003c7606 	br	20bf0 <__alt_data_end+0xfffe23f0>
   21a18:	d8c02303 	ldbu	r3,140(sp)
   21a1c:	d8c01d85 	stb	r3,118(sp)
   21a20:	003c6506 	br	20bb8 <__alt_data_end+0xfffe23b8>
   21a24:	d9002303 	ldbu	r4,140(sp)
   21a28:	d9001d85 	stb	r4,118(sp)
   21a2c:	003d3d06 	br	20f24 <__alt_data_end+0xfffe2724>
   21a30:	d8c02303 	ldbu	r3,140(sp)
   21a34:	d8c01d85 	stb	r3,118(sp)
   21a38:	003d1d06 	br	20eb0 <__alt_data_end+0xfffe26b0>
   21a3c:	d8c02303 	ldbu	r3,140(sp)
   21a40:	d8c01d85 	stb	r3,118(sp)
   21a44:	003d0306 	br	20e54 <__alt_data_end+0xfffe2654>

00021a48 <__vfiprintf_internal>:
   21a48:	008000f4 	movhi	r2,3
   21a4c:	10a8a204 	addi	r2,r2,-23928
   21a50:	300f883a 	mov	r7,r6
   21a54:	280d883a 	mov	r6,r5
   21a58:	200b883a 	mov	r5,r4
   21a5c:	11000017 	ldw	r4,0(r2)
   21a60:	002053c1 	jmpi	2053c <___vfiprintf_internal_r>

00021a64 <__sbprintf>:
   21a64:	2880030b 	ldhu	r2,12(r5)
   21a68:	2ac01917 	ldw	r11,100(r5)
   21a6c:	2a80038b 	ldhu	r10,14(r5)
   21a70:	2a400717 	ldw	r9,28(r5)
   21a74:	2a000917 	ldw	r8,36(r5)
   21a78:	defee204 	addi	sp,sp,-1144
   21a7c:	00c10004 	movi	r3,1024
   21a80:	dc011a15 	stw	r16,1128(sp)
   21a84:	10bfff4c 	andi	r2,r2,65533
   21a88:	2821883a 	mov	r16,r5
   21a8c:	d8cb883a 	add	r5,sp,r3
   21a90:	dc811c15 	stw	r18,1136(sp)
   21a94:	dc411b15 	stw	r17,1132(sp)
   21a98:	dfc11d15 	stw	ra,1140(sp)
   21a9c:	2025883a 	mov	r18,r4
   21aa0:	d881030d 	sth	r2,1036(sp)
   21aa4:	dac11915 	stw	r11,1124(sp)
   21aa8:	da81038d 	sth	r10,1038(sp)
   21aac:	da410715 	stw	r9,1052(sp)
   21ab0:	da010915 	stw	r8,1060(sp)
   21ab4:	dec10015 	stw	sp,1024(sp)
   21ab8:	dec10415 	stw	sp,1040(sp)
   21abc:	d8c10215 	stw	r3,1032(sp)
   21ac0:	d8c10515 	stw	r3,1044(sp)
   21ac4:	d8010615 	stw	zero,1048(sp)
   21ac8:	002053c0 	call	2053c <___vfiprintf_internal_r>
   21acc:	1023883a 	mov	r17,r2
   21ad0:	10000416 	blt	r2,zero,21ae4 <__sbprintf+0x80>
   21ad4:	d9410004 	addi	r5,sp,1024
   21ad8:	9009883a 	mov	r4,r18
   21adc:	00106a40 	call	106a4 <_fflush_r>
   21ae0:	10000d1e 	bne	r2,zero,21b18 <__sbprintf+0xb4>
   21ae4:	d881030b 	ldhu	r2,1036(sp)
   21ae8:	1080100c 	andi	r2,r2,64
   21aec:	10000326 	beq	r2,zero,21afc <__sbprintf+0x98>
   21af0:	8080030b 	ldhu	r2,12(r16)
   21af4:	10801014 	ori	r2,r2,64
   21af8:	8080030d 	sth	r2,12(r16)
   21afc:	8805883a 	mov	r2,r17
   21b00:	dfc11d17 	ldw	ra,1140(sp)
   21b04:	dc811c17 	ldw	r18,1136(sp)
   21b08:	dc411b17 	ldw	r17,1132(sp)
   21b0c:	dc011a17 	ldw	r16,1128(sp)
   21b10:	dec11e04 	addi	sp,sp,1144
   21b14:	f800283a 	ret
   21b18:	047fffc4 	movi	r17,-1
   21b1c:	003ff106 	br	21ae4 <__alt_data_end+0xfffe32e4>

00021b20 <__swbuf_r>:
   21b20:	defffb04 	addi	sp,sp,-20
   21b24:	dcc00315 	stw	r19,12(sp)
   21b28:	dc800215 	stw	r18,8(sp)
   21b2c:	dc000015 	stw	r16,0(sp)
   21b30:	dfc00415 	stw	ra,16(sp)
   21b34:	dc400115 	stw	r17,4(sp)
   21b38:	2025883a 	mov	r18,r4
   21b3c:	2827883a 	mov	r19,r5
   21b40:	3021883a 	mov	r16,r6
   21b44:	20000226 	beq	r4,zero,21b50 <__swbuf_r+0x30>
   21b48:	20800e17 	ldw	r2,56(r4)
   21b4c:	10004226 	beq	r2,zero,21c58 <__swbuf_r+0x138>
   21b50:	80800617 	ldw	r2,24(r16)
   21b54:	8100030b 	ldhu	r4,12(r16)
   21b58:	80800215 	stw	r2,8(r16)
   21b5c:	2080020c 	andi	r2,r4,8
   21b60:	10003626 	beq	r2,zero,21c3c <__swbuf_r+0x11c>
   21b64:	80c00417 	ldw	r3,16(r16)
   21b68:	18003426 	beq	r3,zero,21c3c <__swbuf_r+0x11c>
   21b6c:	2088000c 	andi	r2,r4,8192
   21b70:	9c403fcc 	andi	r17,r19,255
   21b74:	10001a26 	beq	r2,zero,21be0 <__swbuf_r+0xc0>
   21b78:	80800017 	ldw	r2,0(r16)
   21b7c:	81000517 	ldw	r4,20(r16)
   21b80:	10c7c83a 	sub	r3,r2,r3
   21b84:	1900200e 	bge	r3,r4,21c08 <__swbuf_r+0xe8>
   21b88:	18c00044 	addi	r3,r3,1
   21b8c:	81000217 	ldw	r4,8(r16)
   21b90:	11400044 	addi	r5,r2,1
   21b94:	81400015 	stw	r5,0(r16)
   21b98:	213fffc4 	addi	r4,r4,-1
   21b9c:	81000215 	stw	r4,8(r16)
   21ba0:	14c00005 	stb	r19,0(r2)
   21ba4:	80800517 	ldw	r2,20(r16)
   21ba8:	10c01e26 	beq	r2,r3,21c24 <__swbuf_r+0x104>
   21bac:	8080030b 	ldhu	r2,12(r16)
   21bb0:	1080004c 	andi	r2,r2,1
   21bb4:	10000226 	beq	r2,zero,21bc0 <__swbuf_r+0xa0>
   21bb8:	00800284 	movi	r2,10
   21bbc:	88801926 	beq	r17,r2,21c24 <__swbuf_r+0x104>
   21bc0:	8805883a 	mov	r2,r17
   21bc4:	dfc00417 	ldw	ra,16(sp)
   21bc8:	dcc00317 	ldw	r19,12(sp)
   21bcc:	dc800217 	ldw	r18,8(sp)
   21bd0:	dc400117 	ldw	r17,4(sp)
   21bd4:	dc000017 	ldw	r16,0(sp)
   21bd8:	dec00504 	addi	sp,sp,20
   21bdc:	f800283a 	ret
   21be0:	81401917 	ldw	r5,100(r16)
   21be4:	00b7ffc4 	movi	r2,-8193
   21be8:	21080014 	ori	r4,r4,8192
   21bec:	2884703a 	and	r2,r5,r2
   21bf0:	80801915 	stw	r2,100(r16)
   21bf4:	80800017 	ldw	r2,0(r16)
   21bf8:	8100030d 	sth	r4,12(r16)
   21bfc:	81000517 	ldw	r4,20(r16)
   21c00:	10c7c83a 	sub	r3,r2,r3
   21c04:	193fe016 	blt	r3,r4,21b88 <__alt_data_end+0xfffe3388>
   21c08:	800b883a 	mov	r5,r16
   21c0c:	9009883a 	mov	r4,r18
   21c10:	00106a40 	call	106a4 <_fflush_r>
   21c14:	1000071e 	bne	r2,zero,21c34 <__swbuf_r+0x114>
   21c18:	80800017 	ldw	r2,0(r16)
   21c1c:	00c00044 	movi	r3,1
   21c20:	003fda06 	br	21b8c <__alt_data_end+0xfffe338c>
   21c24:	800b883a 	mov	r5,r16
   21c28:	9009883a 	mov	r4,r18
   21c2c:	00106a40 	call	106a4 <_fflush_r>
   21c30:	103fe326 	beq	r2,zero,21bc0 <__alt_data_end+0xfffe33c0>
   21c34:	00bfffc4 	movi	r2,-1
   21c38:	003fe206 	br	21bc4 <__alt_data_end+0xfffe33c4>
   21c3c:	800b883a 	mov	r5,r16
   21c40:	9009883a 	mov	r4,r18
   21c44:	00175980 	call	17598 <__swsetup_r>
   21c48:	103ffa1e 	bne	r2,zero,21c34 <__alt_data_end+0xfffe3434>
   21c4c:	8100030b 	ldhu	r4,12(r16)
   21c50:	80c00417 	ldw	r3,16(r16)
   21c54:	003fc506 	br	21b6c <__alt_data_end+0xfffe336c>
   21c58:	0010a900 	call	10a90 <__sinit>
   21c5c:	003fbc06 	br	21b50 <__alt_data_end+0xfffe3350>

00021c60 <__swbuf>:
   21c60:	008000f4 	movhi	r2,3
   21c64:	10a8a204 	addi	r2,r2,-23928
   21c68:	280d883a 	mov	r6,r5
   21c6c:	200b883a 	mov	r5,r4
   21c70:	11000017 	ldw	r4,0(r2)
   21c74:	0021b201 	jmpi	21b20 <__swbuf_r>

00021c78 <_calloc_r>:
   21c78:	defffe04 	addi	sp,sp,-8
   21c7c:	2805883a 	mov	r2,r5
   21c80:	dc000015 	stw	r16,0(sp)
   21c84:	300b883a 	mov	r5,r6
   21c88:	2021883a 	mov	r16,r4
   21c8c:	1009883a 	mov	r4,r2
   21c90:	dfc00115 	stw	ra,4(sp)
   21c94:	002587c0 	call	2587c <__mulsi3>
   21c98:	100b883a 	mov	r5,r2
   21c9c:	8009883a 	mov	r4,r16
   21ca0:	0011e300 	call	11e30 <_malloc_r>
   21ca4:	10002926 	beq	r2,zero,21d4c <_calloc_r+0xd4>
   21ca8:	11bfff17 	ldw	r6,-4(r2)
   21cac:	1021883a 	mov	r16,r2
   21cb0:	00bfff04 	movi	r2,-4
   21cb4:	308c703a 	and	r6,r6,r2
   21cb8:	00c00904 	movi	r3,36
   21cbc:	308d883a 	add	r6,r6,r2
   21cc0:	19801636 	bltu	r3,r6,21d1c <_calloc_r+0xa4>
   21cc4:	008004c4 	movi	r2,19
   21cc8:	11800b2e 	bgeu	r2,r6,21cf8 <_calloc_r+0x80>
   21ccc:	80000015 	stw	zero,0(r16)
   21cd0:	80000115 	stw	zero,4(r16)
   21cd4:	008006c4 	movi	r2,27
   21cd8:	11801a2e 	bgeu	r2,r6,21d44 <_calloc_r+0xcc>
   21cdc:	80000215 	stw	zero,8(r16)
   21ce0:	80000315 	stw	zero,12(r16)
   21ce4:	30c0151e 	bne	r6,r3,21d3c <_calloc_r+0xc4>
   21ce8:	80000415 	stw	zero,16(r16)
   21cec:	80800604 	addi	r2,r16,24
   21cf0:	80000515 	stw	zero,20(r16)
   21cf4:	00000106 	br	21cfc <_calloc_r+0x84>
   21cf8:	8005883a 	mov	r2,r16
   21cfc:	10000015 	stw	zero,0(r2)
   21d00:	10000115 	stw	zero,4(r2)
   21d04:	10000215 	stw	zero,8(r2)
   21d08:	8005883a 	mov	r2,r16
   21d0c:	dfc00117 	ldw	ra,4(sp)
   21d10:	dc000017 	ldw	r16,0(sp)
   21d14:	dec00204 	addi	sp,sp,8
   21d18:	f800283a 	ret
   21d1c:	000b883a 	mov	r5,zero
   21d20:	8009883a 	mov	r4,r16
   21d24:	00129c40 	call	129c4 <memset>
   21d28:	8005883a 	mov	r2,r16
   21d2c:	dfc00117 	ldw	ra,4(sp)
   21d30:	dc000017 	ldw	r16,0(sp)
   21d34:	dec00204 	addi	sp,sp,8
   21d38:	f800283a 	ret
   21d3c:	80800404 	addi	r2,r16,16
   21d40:	003fee06 	br	21cfc <__alt_data_end+0xfffe34fc>
   21d44:	80800204 	addi	r2,r16,8
   21d48:	003fec06 	br	21cfc <__alt_data_end+0xfffe34fc>
   21d4c:	0005883a 	mov	r2,zero
   21d50:	003fee06 	br	21d0c <__alt_data_end+0xfffe350c>

00021d54 <__fputwc>:
   21d54:	defff804 	addi	sp,sp,-32
   21d58:	dcc00415 	stw	r19,16(sp)
   21d5c:	dc800315 	stw	r18,12(sp)
   21d60:	dc000115 	stw	r16,4(sp)
   21d64:	dfc00715 	stw	ra,28(sp)
   21d68:	dd400615 	stw	r21,24(sp)
   21d6c:	dd000515 	stw	r20,20(sp)
   21d70:	dc400215 	stw	r17,8(sp)
   21d74:	2027883a 	mov	r19,r4
   21d78:	2825883a 	mov	r18,r5
   21d7c:	3021883a 	mov	r16,r6
   21d80:	00191a80 	call	191a8 <__locale_mb_cur_max>
   21d84:	00c00044 	movi	r3,1
   21d88:	10c03e26 	beq	r2,r3,21e84 <__fputwc+0x130>
   21d8c:	81c01704 	addi	r7,r16,92
   21d90:	900d883a 	mov	r6,r18
   21d94:	d80b883a 	mov	r5,sp
   21d98:	9809883a 	mov	r4,r19
   21d9c:	00241480 	call	24148 <_wcrtomb_r>
   21da0:	1029883a 	mov	r20,r2
   21da4:	00bfffc4 	movi	r2,-1
   21da8:	a0802026 	beq	r20,r2,21e2c <__fputwc+0xd8>
   21dac:	d9400003 	ldbu	r5,0(sp)
   21db0:	a0001c26 	beq	r20,zero,21e24 <__fputwc+0xd0>
   21db4:	0023883a 	mov	r17,zero
   21db8:	05400284 	movi	r21,10
   21dbc:	00000906 	br	21de4 <__fputwc+0x90>
   21dc0:	80800017 	ldw	r2,0(r16)
   21dc4:	11400005 	stb	r5,0(r2)
   21dc8:	80c00017 	ldw	r3,0(r16)
   21dcc:	18c00044 	addi	r3,r3,1
   21dd0:	80c00015 	stw	r3,0(r16)
   21dd4:	8c400044 	addi	r17,r17,1
   21dd8:	dc45883a 	add	r2,sp,r17
   21ddc:	8d00112e 	bgeu	r17,r20,21e24 <__fputwc+0xd0>
   21de0:	11400003 	ldbu	r5,0(r2)
   21de4:	80c00217 	ldw	r3,8(r16)
   21de8:	18ffffc4 	addi	r3,r3,-1
   21dec:	80c00215 	stw	r3,8(r16)
   21df0:	183ff30e 	bge	r3,zero,21dc0 <__alt_data_end+0xfffe35c0>
   21df4:	80800617 	ldw	r2,24(r16)
   21df8:	18801916 	blt	r3,r2,21e60 <__fputwc+0x10c>
   21dfc:	80800017 	ldw	r2,0(r16)
   21e00:	11400005 	stb	r5,0(r2)
   21e04:	80800017 	ldw	r2,0(r16)
   21e08:	10c00003 	ldbu	r3,0(r2)
   21e0c:	10800044 	addi	r2,r2,1
   21e10:	1d402326 	beq	r3,r21,21ea0 <__fputwc+0x14c>
   21e14:	80800015 	stw	r2,0(r16)
   21e18:	8c400044 	addi	r17,r17,1
   21e1c:	dc45883a 	add	r2,sp,r17
   21e20:	8d3fef36 	bltu	r17,r20,21de0 <__alt_data_end+0xfffe35e0>
   21e24:	9005883a 	mov	r2,r18
   21e28:	00000406 	br	21e3c <__fputwc+0xe8>
   21e2c:	80c0030b 	ldhu	r3,12(r16)
   21e30:	a005883a 	mov	r2,r20
   21e34:	18c01014 	ori	r3,r3,64
   21e38:	80c0030d 	sth	r3,12(r16)
   21e3c:	dfc00717 	ldw	ra,28(sp)
   21e40:	dd400617 	ldw	r21,24(sp)
   21e44:	dd000517 	ldw	r20,20(sp)
   21e48:	dcc00417 	ldw	r19,16(sp)
   21e4c:	dc800317 	ldw	r18,12(sp)
   21e50:	dc400217 	ldw	r17,8(sp)
   21e54:	dc000117 	ldw	r16,4(sp)
   21e58:	dec00804 	addi	sp,sp,32
   21e5c:	f800283a 	ret
   21e60:	800d883a 	mov	r6,r16
   21e64:	29403fcc 	andi	r5,r5,255
   21e68:	9809883a 	mov	r4,r19
   21e6c:	0021b200 	call	21b20 <__swbuf_r>
   21e70:	10bfffe0 	cmpeqi	r2,r2,-1
   21e74:	10803fcc 	andi	r2,r2,255
   21e78:	103fd626 	beq	r2,zero,21dd4 <__alt_data_end+0xfffe35d4>
   21e7c:	00bfffc4 	movi	r2,-1
   21e80:	003fee06 	br	21e3c <__alt_data_end+0xfffe363c>
   21e84:	90ffffc4 	addi	r3,r18,-1
   21e88:	01003f84 	movi	r4,254
   21e8c:	20ffbf36 	bltu	r4,r3,21d8c <__alt_data_end+0xfffe358c>
   21e90:	900b883a 	mov	r5,r18
   21e94:	dc800005 	stb	r18,0(sp)
   21e98:	1029883a 	mov	r20,r2
   21e9c:	003fc506 	br	21db4 <__alt_data_end+0xfffe35b4>
   21ea0:	800d883a 	mov	r6,r16
   21ea4:	a80b883a 	mov	r5,r21
   21ea8:	9809883a 	mov	r4,r19
   21eac:	0021b200 	call	21b20 <__swbuf_r>
   21eb0:	10bfffe0 	cmpeqi	r2,r2,-1
   21eb4:	003fef06 	br	21e74 <__alt_data_end+0xfffe3674>

00021eb8 <_fputwc_r>:
   21eb8:	3080030b 	ldhu	r2,12(r6)
   21ebc:	10c8000c 	andi	r3,r2,8192
   21ec0:	1800051e 	bne	r3,zero,21ed8 <_fputwc_r+0x20>
   21ec4:	30c01917 	ldw	r3,100(r6)
   21ec8:	10880014 	ori	r2,r2,8192
   21ecc:	3080030d 	sth	r2,12(r6)
   21ed0:	18880014 	ori	r2,r3,8192
   21ed4:	30801915 	stw	r2,100(r6)
   21ed8:	0021d541 	jmpi	21d54 <__fputwc>

00021edc <fputwc>:
   21edc:	008000f4 	movhi	r2,3
   21ee0:	defffc04 	addi	sp,sp,-16
   21ee4:	10a8a204 	addi	r2,r2,-23928
   21ee8:	dc000115 	stw	r16,4(sp)
   21eec:	14000017 	ldw	r16,0(r2)
   21ef0:	dc400215 	stw	r17,8(sp)
   21ef4:	dfc00315 	stw	ra,12(sp)
   21ef8:	2023883a 	mov	r17,r4
   21efc:	80000226 	beq	r16,zero,21f08 <fputwc+0x2c>
   21f00:	80800e17 	ldw	r2,56(r16)
   21f04:	10001026 	beq	r2,zero,21f48 <fputwc+0x6c>
   21f08:	2880030b 	ldhu	r2,12(r5)
   21f0c:	10c8000c 	andi	r3,r2,8192
   21f10:	1800051e 	bne	r3,zero,21f28 <fputwc+0x4c>
   21f14:	28c01917 	ldw	r3,100(r5)
   21f18:	10880014 	ori	r2,r2,8192
   21f1c:	2880030d 	sth	r2,12(r5)
   21f20:	18880014 	ori	r2,r3,8192
   21f24:	28801915 	stw	r2,100(r5)
   21f28:	280d883a 	mov	r6,r5
   21f2c:	8009883a 	mov	r4,r16
   21f30:	880b883a 	mov	r5,r17
   21f34:	dfc00317 	ldw	ra,12(sp)
   21f38:	dc400217 	ldw	r17,8(sp)
   21f3c:	dc000117 	ldw	r16,4(sp)
   21f40:	dec00404 	addi	sp,sp,16
   21f44:	0021d541 	jmpi	21d54 <__fputwc>
   21f48:	8009883a 	mov	r4,r16
   21f4c:	d9400015 	stw	r5,0(sp)
   21f50:	0010a900 	call	10a90 <__sinit>
   21f54:	d9400017 	ldw	r5,0(sp)
   21f58:	003feb06 	br	21f08 <__alt_data_end+0xfffe3708>

00021f5c <rshift>:
   21f5c:	2807d17a 	srai	r3,r5,5
   21f60:	20800417 	ldw	r2,16(r4)
   21f64:	22000504 	addi	r8,r4,20
   21f68:	1880250e 	bge	r3,r2,22000 <rshift+0xa4>
   21f6c:	1085883a 	add	r2,r2,r2
   21f70:	18c7883a 	add	r3,r3,r3
   21f74:	1085883a 	add	r2,r2,r2
   21f78:	18c7883a 	add	r3,r3,r3
   21f7c:	294007cc 	andi	r5,r5,31
   21f80:	4085883a 	add	r2,r8,r2
   21f84:	40c7883a 	add	r3,r8,r3
   21f88:	28002026 	beq	r5,zero,2200c <rshift+0xb0>
   21f8c:	19800017 	ldw	r6,0(r3)
   21f90:	02c00804 	movi	r11,32
   21f94:	19c00104 	addi	r7,r3,4
   21f98:	5957c83a 	sub	r11,r11,r5
   21f9c:	314cd83a 	srl	r6,r6,r5
   21fa0:	38802c2e 	bgeu	r7,r2,22054 <rshift+0xf8>
   21fa4:	4015883a 	mov	r10,r8
   21fa8:	3a400017 	ldw	r9,0(r7)
   21fac:	52800104 	addi	r10,r10,4
   21fb0:	39c00104 	addi	r7,r7,4
   21fb4:	4ad2983a 	sll	r9,r9,r11
   21fb8:	498cb03a 	or	r6,r9,r6
   21fbc:	51bfff15 	stw	r6,-4(r10)
   21fc0:	39bfff17 	ldw	r6,-4(r7)
   21fc4:	314cd83a 	srl	r6,r6,r5
   21fc8:	38bff736 	bltu	r7,r2,21fa8 <__alt_data_end+0xfffe37a8>
   21fcc:	10c7c83a 	sub	r3,r2,r3
   21fd0:	18fffec4 	addi	r3,r3,-5
   21fd4:	1806d0ba 	srli	r3,r3,2
   21fd8:	18c00044 	addi	r3,r3,1
   21fdc:	18c7883a 	add	r3,r3,r3
   21fe0:	18c7883a 	add	r3,r3,r3
   21fe4:	40c7883a 	add	r3,r8,r3
   21fe8:	19800015 	stw	r6,0(r3)
   21fec:	30000126 	beq	r6,zero,21ff4 <rshift+0x98>
   21ff0:	18c00104 	addi	r3,r3,4
   21ff4:	1a05c83a 	sub	r2,r3,r8
   21ff8:	1005d0ba 	srai	r2,r2,2
   21ffc:	00001206 	br	22048 <rshift+0xec>
   22000:	20000415 	stw	zero,16(r4)
   22004:	20000515 	stw	zero,20(r4)
   22008:	f800283a 	ret
   2200c:	18bffc2e 	bgeu	r3,r2,22000 <__alt_data_end+0xfffe3800>
   22010:	180d883a 	mov	r6,r3
   22014:	400b883a 	mov	r5,r8
   22018:	31c00017 	ldw	r7,0(r6)
   2201c:	29400104 	addi	r5,r5,4
   22020:	31800104 	addi	r6,r6,4
   22024:	29ffff15 	stw	r7,-4(r5)
   22028:	30bffb36 	bltu	r6,r2,22018 <__alt_data_end+0xfffe3818>
   2202c:	00c6303a 	nor	r3,zero,r3
   22030:	1885883a 	add	r2,r3,r2
   22034:	1004d0ba 	srli	r2,r2,2
   22038:	10800044 	addi	r2,r2,1
   2203c:	1085883a 	add	r2,r2,r2
   22040:	1085883a 	add	r2,r2,r2
   22044:	1005d0ba 	srai	r2,r2,2
   22048:	20800415 	stw	r2,16(r4)
   2204c:	103fed26 	beq	r2,zero,22004 <__alt_data_end+0xfffe3804>
   22050:	f800283a 	ret
   22054:	4007883a 	mov	r3,r8
   22058:	003fe306 	br	21fe8 <__alt_data_end+0xfffe37e8>

0002205c <__gethex>:
   2205c:	deffea04 	addi	sp,sp,-88
   22060:	d9c00415 	stw	r7,16(sp)
   22064:	dfc01515 	stw	ra,84(sp)
   22068:	dd001015 	stw	r20,64(sp)
   2206c:	dcc00f15 	stw	r19,60(sp)
   22070:	2829883a 	mov	r20,r5
   22074:	dc800e15 	stw	r18,56(sp)
   22078:	d9000215 	stw	r4,8(sp)
   2207c:	d9800115 	stw	r6,4(sp)
   22080:	df001415 	stw	fp,80(sp)
   22084:	ddc01315 	stw	r23,76(sp)
   22088:	dd801215 	stw	r22,72(sp)
   2208c:	dd401115 	stw	r21,68(sp)
   22090:	dc400d15 	stw	r17,52(sp)
   22094:	dc000c15 	stw	r16,48(sp)
   22098:	00191cc0 	call	191cc <_localeconv_r>
   2209c:	14800017 	ldw	r18,0(r2)
   220a0:	9009883a 	mov	r4,r18
   220a4:	00137600 	call	13760 <strlen>
   220a8:	a1c00017 	ldw	r7,0(r20)
   220ac:	1027883a 	mov	r19,r2
   220b0:	9085883a 	add	r2,r18,r2
   220b4:	10bfffc3 	ldbu	r2,-1(r2)
   220b8:	38c00083 	ldbu	r3,2(r7)
   220bc:	d8800305 	stb	r2,12(sp)
   220c0:	00800c04 	movi	r2,48
   220c4:	18815a1e 	bne	r3,r2,22630 <__gethex+0x5d4>
   220c8:	013fff84 	movi	r4,-2
   220cc:	388000c4 	addi	r2,r7,3
   220d0:	21c9c83a 	sub	r4,r4,r7
   220d4:	180b883a 	mov	r5,r3
   220d8:	20b9883a 	add	fp,r4,r2
   220dc:	102f883a 	mov	r23,r2
   220e0:	10800044 	addi	r2,r2,1
   220e4:	10ffffc3 	ldbu	r3,-1(r2)
   220e8:	197ffb26 	beq	r3,r5,220d8 <__alt_data_end+0xfffe38d8>
   220ec:	058000f4 	movhi	r22,3
   220f0:	b5a5ec84 	addi	r22,r22,-26702
   220f4:	b0c7883a 	add	r3,r22,r3
   220f8:	18800003 	ldbu	r2,0(r3)
   220fc:	10008726 	beq	r2,zero,2231c <__gethex+0x2c0>
   22100:	b8800003 	ldbu	r2,0(r23)
   22104:	d8000015 	stw	zero,0(sp)
   22108:	0021883a 	mov	r16,zero
   2210c:	b085883a 	add	r2,r22,r2
   22110:	10800003 	ldbu	r2,0(r2)
   22114:	b823883a 	mov	r17,r23
   22118:	10000526 	beq	r2,zero,22130 <__gethex+0xd4>
   2211c:	8c400044 	addi	r17,r17,1
   22120:	88800003 	ldbu	r2,0(r17)
   22124:	b085883a 	add	r2,r22,r2
   22128:	10800003 	ldbu	r2,0(r2)
   2212c:	103ffb1e 	bne	r2,zero,2211c <__alt_data_end+0xfffe391c>
   22130:	980d883a 	mov	r6,r19
   22134:	900b883a 	mov	r5,r18
   22138:	8809883a 	mov	r4,r17
   2213c:	0022b080 	call	22b08 <strncmp>
   22140:	1000031e 	bne	r2,zero,22150 <__gethex+0xf4>
   22144:	80015c26 	beq	r16,zero,226b8 <__gethex+0x65c>
   22148:	88800003 	ldbu	r2,0(r17)
   2214c:	00000206 	br	22158 <__gethex+0xfc>
   22150:	88800003 	ldbu	r2,0(r17)
   22154:	80012926 	beq	r16,zero,225fc <__gethex+0x5a0>
   22158:	8c21c83a 	sub	r16,r17,r16
   2215c:	8421883a 	add	r16,r16,r16
   22160:	8421883a 	add	r16,r16,r16
   22164:	0421c83a 	sub	r16,zero,r16
   22168:	10803fcc 	andi	r2,r2,255
   2216c:	01001404 	movi	r4,80
   22170:	11008826 	beq	r2,r4,22394 <__gethex+0x338>
   22174:	01001c04 	movi	r4,112
   22178:	11008626 	beq	r2,r4,22394 <__gethex+0x338>
   2217c:	882b883a 	mov	r21,r17
   22180:	d8c00017 	ldw	r3,0(sp)
   22184:	a4400015 	stw	r17,0(r20)
   22188:	1800711e 	bne	r3,zero,22350 <__gethex+0x2f4>
   2218c:	adc5c83a 	sub	r2,r21,r23
   22190:	10bfffc4 	addi	r2,r2,-1
   22194:	00c001c4 	movi	r3,7
   22198:	000b883a 	mov	r5,zero
   2219c:	1880030e 	bge	r3,r2,221ac <__gethex+0x150>
   221a0:	1005d07a 	srai	r2,r2,1
   221a4:	29400044 	addi	r5,r5,1
   221a8:	18bffd16 	blt	r3,r2,221a0 <__alt_data_end+0xfffe39a0>
   221ac:	d9000217 	ldw	r4,8(sp)
   221b0:	00194800 	call	19480 <_Balloc>
   221b4:	10c00504 	addi	r3,r2,20
   221b8:	d8c00015 	stw	r3,0(sp)
   221bc:	1029883a 	mov	r20,r2
   221c0:	bd417c2e 	bgeu	r23,r21,227b4 <__gethex+0x758>
   221c4:	dc400303 	ldbu	r17,12(sp)
   221c8:	03000044 	movi	r12,1
   221cc:	1813883a 	mov	r9,r3
   221d0:	0039883a 	mov	fp,zero
   221d4:	0007883a 	mov	r3,zero
   221d8:	64d9c83a 	sub	r12,r12,r19
   221dc:	02800804 	movi	r10,32
   221e0:	a8bfffc3 	ldbu	r2,-1(r21)
   221e4:	ab7fffc4 	addi	r13,r21,-1
   221e8:	88803026 	beq	r17,r2,222ac <__gethex+0x250>
   221ec:	e2804526 	beq	fp,r10,22304 <__gethex+0x2a8>
   221f0:	e00b883a 	mov	r5,fp
   221f4:	e7000104 	addi	fp,fp,4
   221f8:	a93fffc3 	ldbu	r4,-1(r21)
   221fc:	682b883a 	mov	r21,r13
   22200:	b109883a 	add	r4,r22,r4
   22204:	20800003 	ldbu	r2,0(r4)
   22208:	108003cc 	andi	r2,r2,15
   2220c:	1144983a 	sll	r2,r2,r5
   22210:	1886b03a 	or	r3,r3,r2
   22214:	bd7ff236 	bltu	r23,r21,221e0 <__alt_data_end+0xfffe39e0>
   22218:	d9000017 	ldw	r4,0(sp)
   2221c:	48800104 	addi	r2,r9,4
   22220:	48c00015 	stw	r3,0(r9)
   22224:	1105c83a 	sub	r2,r2,r4
   22228:	1005d0ba 	srai	r2,r2,2
   2222c:	1809883a 	mov	r4,r3
   22230:	a0800415 	stw	r2,16(r20)
   22234:	1022917a 	slli	r17,r2,5
   22238:	001979c0 	call	1979c <__hi0bits>
   2223c:	d8c00117 	ldw	r3,4(sp)
   22240:	8885c83a 	sub	r2,r17,r2
   22244:	1c800017 	ldw	r18,0(r3)
   22248:	9080d016 	blt	r18,r2,2258c <__gethex+0x530>
   2224c:	1480ed16 	blt	r2,r18,22604 <__gethex+0x5a8>
   22250:	0027883a 	mov	r19,zero
   22254:	d8c00117 	ldw	r3,4(sp)
   22258:	18800217 	ldw	r2,8(r3)
   2225c:	14009416 	blt	r2,r16,224b0 <__gethex+0x454>
   22260:	d8c00117 	ldw	r3,4(sp)
   22264:	18800117 	ldw	r2,4(r3)
   22268:	8080b30e 	bge	r16,r2,22538 <__gethex+0x4dc>
   2226c:	1421c83a 	sub	r16,r2,r16
   22270:	8480f616 	blt	r16,r18,2264c <__gethex+0x5f0>
   22274:	18c00317 	ldw	r3,12(r3)
   22278:	01000084 	movi	r4,2
   2227c:	19015226 	beq	r3,r4,227c8 <__gethex+0x76c>
   22280:	010000c4 	movi	r4,3
   22284:	19013726 	beq	r3,r4,22764 <__gethex+0x708>
   22288:	01000044 	movi	r4,1
   2228c:	19015126 	beq	r3,r4,227d4 <__gethex+0x778>
   22290:	d9000217 	ldw	r4,8(sp)
   22294:	a00b883a 	mov	r5,r20
   22298:	00195280 	call	19528 <_Bfree>
   2229c:	d8801617 	ldw	r2,88(sp)
   222a0:	10000015 	stw	zero,0(r2)
   222a4:	00801404 	movi	r2,80
   222a8:	00002b06 	br	22358 <__gethex+0x2fc>
   222ac:	6b1d883a 	add	r14,r13,r12
   222b0:	75ffce36 	bltu	r14,r23,221ec <__alt_data_end+0xfffe39ec>
   222b4:	7009883a 	mov	r4,r14
   222b8:	980d883a 	mov	r6,r19
   222bc:	900b883a 	mov	r5,r18
   222c0:	d8c00715 	stw	r3,28(sp)
   222c4:	da400615 	stw	r9,24(sp)
   222c8:	da800b15 	stw	r10,44(sp)
   222cc:	db000a15 	stw	r12,40(sp)
   222d0:	db400815 	stw	r13,32(sp)
   222d4:	db800915 	stw	r14,36(sp)
   222d8:	0022b080 	call	22b08 <strncmp>
   222dc:	d8c00717 	ldw	r3,28(sp)
   222e0:	da400617 	ldw	r9,24(sp)
   222e4:	da800b17 	ldw	r10,44(sp)
   222e8:	db000a17 	ldw	r12,40(sp)
   222ec:	db400817 	ldw	r13,32(sp)
   222f0:	db800917 	ldw	r14,36(sp)
   222f4:	103fbd1e 	bne	r2,zero,221ec <__alt_data_end+0xfffe39ec>
   222f8:	702b883a 	mov	r21,r14
   222fc:	bd7fb836 	bltu	r23,r21,221e0 <__alt_data_end+0xfffe39e0>
   22300:	003fc506 	br	22218 <__alt_data_end+0xfffe3a18>
   22304:	07000104 	movi	fp,4
   22308:	48c00015 	stw	r3,0(r9)
   2230c:	000b883a 	mov	r5,zero
   22310:	4f13883a 	add	r9,r9,fp
   22314:	0007883a 	mov	r3,zero
   22318:	003fb706 	br	221f8 <__alt_data_end+0xfffe39f8>
   2231c:	980d883a 	mov	r6,r19
   22320:	900b883a 	mov	r5,r18
   22324:	b809883a 	mov	r4,r23
   22328:	0022b080 	call	22b08 <strncmp>
   2232c:	10006c26 	beq	r2,zero,224e0 <__gethex+0x484>
   22330:	b8800003 	ldbu	r2,0(r23)
   22334:	b823883a 	mov	r17,r23
   22338:	10803fcc 	andi	r2,r2,255
   2233c:	01001404 	movi	r4,80
   22340:	11001126 	beq	r2,r4,22388 <__gethex+0x32c>
   22344:	01001c04 	movi	r4,112
   22348:	11000f26 	beq	r2,r4,22388 <__gethex+0x32c>
   2234c:	a4400015 	stw	r17,0(r20)
   22350:	e0008c1e 	bne	fp,zero,22584 <__gethex+0x528>
   22354:	00800184 	movi	r2,6
   22358:	dfc01517 	ldw	ra,84(sp)
   2235c:	df001417 	ldw	fp,80(sp)
   22360:	ddc01317 	ldw	r23,76(sp)
   22364:	dd801217 	ldw	r22,72(sp)
   22368:	dd401117 	ldw	r21,68(sp)
   2236c:	dd001017 	ldw	r20,64(sp)
   22370:	dcc00f17 	ldw	r19,60(sp)
   22374:	dc800e17 	ldw	r18,56(sp)
   22378:	dc400d17 	ldw	r17,52(sp)
   2237c:	dc000c17 	ldw	r16,48(sp)
   22380:	dec01604 	addi	sp,sp,88
   22384:	f800283a 	ret
   22388:	00c00044 	movi	r3,1
   2238c:	0021883a 	mov	r16,zero
   22390:	d8c00015 	stw	r3,0(sp)
   22394:	88800043 	ldbu	r2,1(r17)
   22398:	01400ac4 	movi	r5,43
   2239c:	11003fcc 	andi	r4,r2,255
   223a0:	21407626 	beq	r4,r5,2257c <__gethex+0x520>
   223a4:	01400b44 	movi	r5,45
   223a8:	21404826 	beq	r4,r5,224cc <__gethex+0x470>
   223ac:	8ac00044 	addi	r11,r17,1
   223b0:	d8000515 	stw	zero,20(sp)
   223b4:	10803fcc 	andi	r2,r2,255
   223b8:	b085883a 	add	r2,r22,r2
   223bc:	11000003 	ldbu	r4,0(r2)
   223c0:	05400604 	movi	r21,24
   223c4:	20bfffc4 	addi	r2,r4,-1
   223c8:	10803fcc 	andi	r2,r2,255
   223cc:	a8bf6b36 	bltu	r21,r2,2217c <__alt_data_end+0xfffe397c>
   223d0:	58800043 	ldbu	r2,1(r11)
   223d4:	014000f4 	movhi	r5,3
   223d8:	2965ec84 	addi	r5,r5,-26702
   223dc:	2885883a 	add	r2,r5,r2
   223e0:	12800003 	ldbu	r10,0(r2)
   223e4:	21003fcc 	andi	r4,r4,255
   223e8:	213ffc04 	addi	r4,r4,-16
   223ec:	50bfffc4 	addi	r2,r10,-1
   223f0:	10803fcc 	andi	r2,r2,255
   223f4:	5ac00044 	addi	r11,r11,1
   223f8:	51803fcc 	andi	r6,r10,255
   223fc:	a8801036 	bltu	r21,r2,22440 <__gethex+0x3e4>
   22400:	5ac00044 	addi	r11,r11,1
   22404:	01400284 	movi	r5,10
   22408:	d9800715 	stw	r6,28(sp)
   2240c:	dac00615 	stw	r11,24(sp)
   22410:	002587c0 	call	2587c <__mulsi3>
   22414:	dac00617 	ldw	r11,24(sp)
   22418:	d9800717 	ldw	r6,28(sp)
   2241c:	5a800003 	ldbu	r10,0(r11)
   22420:	1185883a 	add	r2,r2,r6
   22424:	113ffc04 	addi	r4,r2,-16
   22428:	b295883a 	add	r10,r22,r10
   2242c:	51400003 	ldbu	r5,0(r10)
   22430:	2abfffc4 	addi	r10,r5,-1
   22434:	52803fcc 	andi	r10,r10,255
   22438:	29803fcc 	andi	r6,r5,255
   2243c:	aabff02e 	bgeu	r21,r10,22400 <__alt_data_end+0xfffe3c00>
   22440:	d8c00517 	ldw	r3,20(sp)
   22444:	18000126 	beq	r3,zero,2244c <__gethex+0x3f0>
   22448:	0109c83a 	sub	r4,zero,r4
   2244c:	882b883a 	mov	r21,r17
   22450:	8121883a 	add	r16,r16,r4
   22454:	5823883a 	mov	r17,r11
   22458:	003f4906 	br	22180 <__alt_data_end+0xfffe3980>
   2245c:	a0800217 	ldw	r2,8(r20)
   22460:	a880f20e 	bge	r21,r2,2282c <__gethex+0x7d0>
   22464:	a807883a 	mov	r3,r21
   22468:	18800144 	addi	r2,r3,5
   2246c:	1085883a 	add	r2,r2,r2
   22470:	18c00044 	addi	r3,r3,1
   22474:	1085883a 	add	r2,r2,r2
   22478:	a085883a 	add	r2,r20,r2
   2247c:	a0c00415 	stw	r3,16(r20)
   22480:	01000044 	movi	r4,1
   22484:	11000015 	stw	r4,0(r2)
   22488:	00800084 	movi	r2,2
   2248c:	8880da26 	beq	r17,r2,227f8 <__gethex+0x79c>
   22490:	a8c0ae0e 	bge	r21,r3,2274c <__gethex+0x6f0>
   22494:	01400044 	movi	r5,1
   22498:	a009883a 	mov	r4,r20
   2249c:	0021f5c0 	call	21f5c <rshift>
   224a0:	d8c00117 	ldw	r3,4(sp)
   224a4:	84000044 	addi	r16,r16,1
   224a8:	18800217 	ldw	r2,8(r3)
   224ac:	1400a90e 	bge	r2,r16,22754 <__gethex+0x6f8>
   224b0:	d9000217 	ldw	r4,8(sp)
   224b4:	a00b883a 	mov	r5,r20
   224b8:	00195280 	call	19528 <_Bfree>
   224bc:	d9001617 	ldw	r4,88(sp)
   224c0:	008028c4 	movi	r2,163
   224c4:	20000015 	stw	zero,0(r4)
   224c8:	003fa306 	br	22358 <__alt_data_end+0xfffe3b58>
   224cc:	00c00044 	movi	r3,1
   224d0:	d8c00515 	stw	r3,20(sp)
   224d4:	88800083 	ldbu	r2,2(r17)
   224d8:	8ac00084 	addi	r11,r17,2
   224dc:	003fb506 	br	223b4 <__alt_data_end+0xfffe3bb4>
   224e0:	bce3883a 	add	r17,r23,r19
   224e4:	89000003 	ldbu	r4,0(r17)
   224e8:	21403fcc 	andi	r5,r4,255
   224ec:	b145883a 	add	r2,r22,r5
   224f0:	10800003 	ldbu	r2,0(r2)
   224f4:	11803fcc 	andi	r6,r2,255
   224f8:	30005026 	beq	r6,zero,2263c <__gethex+0x5e0>
   224fc:	01000c04 	movi	r4,48
   22500:	882f883a 	mov	r23,r17
   22504:	2900061e 	bne	r5,r4,22520 <__gethex+0x4c4>
   22508:	2809883a 	mov	r4,r5
   2250c:	bdc00044 	addi	r23,r23,1
   22510:	b8800003 	ldbu	r2,0(r23)
   22514:	113ffd26 	beq	r2,r4,2250c <__alt_data_end+0xfffe3d0c>
   22518:	b085883a 	add	r2,r22,r2
   2251c:	10800003 	ldbu	r2,0(r2)
   22520:	10803fcc 	andi	r2,r2,255
   22524:	1007003a 	cmpeq	r3,r2,zero
   22528:	d8c00015 	stw	r3,0(sp)
   2252c:	8821883a 	mov	r16,r17
   22530:	07000044 	movi	fp,1
   22534:	003ef706 	br	22114 <__alt_data_end+0xfffe3914>
   22538:	04400044 	movi	r17,1
   2253c:	98000926 	beq	r19,zero,22564 <__gethex+0x508>
   22540:	d8c00117 	ldw	r3,4(sp)
   22544:	18800317 	ldw	r2,12(r3)
   22548:	00c00084 	movi	r3,2
   2254c:	10c06826 	beq	r2,r3,226f0 <__gethex+0x694>
   22550:	00c000c4 	movi	r3,3
   22554:	10c06a26 	beq	r2,r3,22700 <__gethex+0x6a4>
   22558:	00c00044 	movi	r3,1
   2255c:	10c08d26 	beq	r2,r3,22794 <__gethex+0x738>
   22560:	8c400414 	ori	r17,r17,16
   22564:	d9001617 	ldw	r4,88(sp)
   22568:	d8c00417 	ldw	r3,16(sp)
   2256c:	8805883a 	mov	r2,r17
   22570:	25000015 	stw	r20,0(r4)
   22574:	1c000015 	stw	r16,0(r3)
   22578:	003f7706 	br	22358 <__alt_data_end+0xfffe3b58>
   2257c:	d8000515 	stw	zero,20(sp)
   22580:	003fd406 	br	224d4 <__alt_data_end+0xfffe3cd4>
   22584:	0005883a 	mov	r2,zero
   22588:	003f7306 	br	22358 <__alt_data_end+0xfffe3b58>
   2258c:	14a3c83a 	sub	r17,r2,r18
   22590:	880b883a 	mov	r5,r17
   22594:	a009883a 	mov	r4,r20
   22598:	001a4ac0 	call	1a4ac <__any_on>
   2259c:	10002926 	beq	r2,zero,22644 <__gethex+0x5e8>
   225a0:	897fffc4 	addi	r5,r17,-1
   225a4:	2807d17a 	srai	r3,r5,5
   225a8:	d8800017 	ldw	r2,0(sp)
   225ac:	290007cc 	andi	r4,r5,31
   225b0:	18c7883a 	add	r3,r3,r3
   225b4:	18c7883a 	add	r3,r3,r3
   225b8:	04c00044 	movi	r19,1
   225bc:	10c7883a 	add	r3,r2,r3
   225c0:	9908983a 	sll	r4,r19,r4
   225c4:	18c00017 	ldw	r3,0(r3)
   225c8:	20c6703a 	and	r3,r4,r3
   225cc:	18000626 	beq	r3,zero,225e8 <__gethex+0x58c>
   225d0:	99407b0e 	bge	r19,r5,227c0 <__gethex+0x764>
   225d4:	897fff84 	addi	r5,r17,-2
   225d8:	a009883a 	mov	r4,r20
   225dc:	001a4ac0 	call	1a4ac <__any_on>
   225e0:	10007726 	beq	r2,zero,227c0 <__gethex+0x764>
   225e4:	04c000c4 	movi	r19,3
   225e8:	880b883a 	mov	r5,r17
   225ec:	a009883a 	mov	r4,r20
   225f0:	0021f5c0 	call	21f5c <rshift>
   225f4:	8461883a 	add	r16,r16,r17
   225f8:	003f1606 	br	22254 <__alt_data_end+0xfffe3a54>
   225fc:	0021883a 	mov	r16,zero
   22600:	003ed906 	br	22168 <__alt_data_end+0xfffe3968>
   22604:	d9000217 	ldw	r4,8(sp)
   22608:	90a3c83a 	sub	r17,r18,r2
   2260c:	a00b883a 	mov	r5,r20
   22610:	880d883a 	mov	r6,r17
   22614:	0019cbc0 	call	19cbc <__lshift>
   22618:	10c00504 	addi	r3,r2,20
   2261c:	1029883a 	mov	r20,r2
   22620:	8461c83a 	sub	r16,r16,r17
   22624:	d8c00015 	stw	r3,0(sp)
   22628:	0027883a 	mov	r19,zero
   2262c:	003f0906 	br	22254 <__alt_data_end+0xfffe3a54>
   22630:	3dc00084 	addi	r23,r7,2
   22634:	0039883a 	mov	fp,zero
   22638:	003eac06 	br	220ec <__alt_data_end+0xfffe38ec>
   2263c:	2005883a 	mov	r2,r4
   22640:	003f3d06 	br	22338 <__alt_data_end+0xfffe3b38>
   22644:	0027883a 	mov	r19,zero
   22648:	003fe706 	br	225e8 <__alt_data_end+0xfffe3de8>
   2264c:	847fffc4 	addi	r17,r16,-1
   22650:	9800421e 	bne	r19,zero,2275c <__gethex+0x700>
   22654:	88000426 	beq	r17,zero,22668 <__gethex+0x60c>
   22658:	880b883a 	mov	r5,r17
   2265c:	a009883a 	mov	r4,r20
   22660:	001a4ac0 	call	1a4ac <__any_on>
   22664:	1027883a 	mov	r19,r2
   22668:	8805d17a 	srai	r2,r17,5
   2266c:	d8c00017 	ldw	r3,0(sp)
   22670:	8c4007cc 	andi	r17,r17,31
   22674:	1085883a 	add	r2,r2,r2
   22678:	1085883a 	add	r2,r2,r2
   2267c:	1885883a 	add	r2,r3,r2
   22680:	00c00044 	movi	r3,1
   22684:	1c62983a 	sll	r17,r3,r17
   22688:	10800017 	ldw	r2,0(r2)
   2268c:	8884703a 	and	r2,r17,r2
   22690:	10000126 	beq	r2,zero,22698 <__gethex+0x63c>
   22694:	9cc00094 	ori	r19,r19,2
   22698:	800b883a 	mov	r5,r16
   2269c:	a009883a 	mov	r4,r20
   226a0:	0021f5c0 	call	21f5c <rshift>
   226a4:	d8c00117 	ldw	r3,4(sp)
   226a8:	9425c83a 	sub	r18,r18,r16
   226ac:	04400084 	movi	r17,2
   226b0:	1c000117 	ldw	r16,4(r3)
   226b4:	003fa106 	br	2253c <__alt_data_end+0xfffe3d3c>
   226b8:	8ce1883a 	add	r16,r17,r19
   226bc:	80800003 	ldbu	r2,0(r16)
   226c0:	8023883a 	mov	r17,r16
   226c4:	10c03fcc 	andi	r3,r2,255
   226c8:	b0c7883a 	add	r3,r22,r3
   226cc:	18c00003 	ldbu	r3,0(r3)
   226d0:	183ea026 	beq	r3,zero,22154 <__alt_data_end+0xfffe3954>
   226d4:	8c400044 	addi	r17,r17,1
   226d8:	88800003 	ldbu	r2,0(r17)
   226dc:	11003fcc 	andi	r4,r2,255
   226e0:	b109883a 	add	r4,r22,r4
   226e4:	21000003 	ldbu	r4,0(r4)
   226e8:	203ffa1e 	bne	r4,zero,226d4 <__alt_data_end+0xfffe3ed4>
   226ec:	003e9906 	br	22154 <__alt_data_end+0xfffe3954>
   226f0:	d9001717 	ldw	r4,92(sp)
   226f4:	00800044 	movi	r2,1
   226f8:	1109c83a 	sub	r4,r2,r4
   226fc:	d9001715 	stw	r4,92(sp)
   22700:	d8801717 	ldw	r2,92(sp)
   22704:	103f9626 	beq	r2,zero,22560 <__alt_data_end+0xfffe3d60>
   22708:	a5400417 	ldw	r21,16(r20)
   2270c:	d9800017 	ldw	r6,0(sp)
   22710:	013fffc4 	movi	r4,-1
   22714:	ad67883a 	add	r19,r21,r21
   22718:	9ce7883a 	add	r19,r19,r19
   2271c:	3005883a 	mov	r2,r6
   22720:	34cb883a 	add	r5,r6,r19
   22724:	00000306 	br	22734 <__gethex+0x6d8>
   22728:	10000015 	stw	zero,0(r2)
   2272c:	10800104 	addi	r2,r2,4
   22730:	117f4a2e 	bgeu	r2,r5,2245c <__alt_data_end+0xfffe3c5c>
   22734:	10c00017 	ldw	r3,0(r2)
   22738:	193ffb26 	beq	r3,r4,22728 <__alt_data_end+0xfffe3f28>
   2273c:	18c00044 	addi	r3,r3,1
   22740:	10c00015 	stw	r3,0(r2)
   22744:	00800084 	movi	r2,2
   22748:	88802b26 	beq	r17,r2,227f8 <__gethex+0x79c>
   2274c:	948007cc 	andi	r18,r18,31
   22750:	90002f1e 	bne	r18,zero,22810 <__gethex+0x7b4>
   22754:	04400844 	movi	r17,33
   22758:	003f8206 	br	22564 <__alt_data_end+0xfffe3d64>
   2275c:	04c00044 	movi	r19,1
   22760:	003fc106 	br	22668 <__alt_data_end+0xfffe3e68>
   22764:	d8c01717 	ldw	r3,92(sp)
   22768:	183ec926 	beq	r3,zero,22290 <__alt_data_end+0xfffe3a90>
   2276c:	d8c00417 	ldw	r3,16(sp)
   22770:	d9001617 	ldw	r4,88(sp)
   22774:	18800015 	stw	r2,0(r3)
   22778:	d8c00017 	ldw	r3,0(sp)
   2277c:	00800044 	movi	r2,1
   22780:	a0800415 	stw	r2,16(r20)
   22784:	18800015 	stw	r2,0(r3)
   22788:	25000015 	stw	r20,0(r4)
   2278c:	00801884 	movi	r2,98
   22790:	003ef106 	br	22358 <__alt_data_end+0xfffe3b58>
   22794:	9880008c 	andi	r2,r19,2
   22798:	103f7126 	beq	r2,zero,22560 <__alt_data_end+0xfffe3d60>
   2279c:	d8c00017 	ldw	r3,0(sp)
   227a0:	18800017 	ldw	r2,0(r3)
   227a4:	9884b03a 	or	r2,r19,r2
   227a8:	1080004c 	andi	r2,r2,1
   227ac:	103fd61e 	bne	r2,zero,22708 <__alt_data_end+0xfffe3f08>
   227b0:	003f6b06 	br	22560 <__alt_data_end+0xfffe3d60>
   227b4:	da400017 	ldw	r9,0(sp)
   227b8:	0007883a 	mov	r3,zero
   227bc:	003e9606 	br	22218 <__alt_data_end+0xfffe3a18>
   227c0:	04c00084 	movi	r19,2
   227c4:	003f8806 	br	225e8 <__alt_data_end+0xfffe3de8>
   227c8:	d9001717 	ldw	r4,92(sp)
   227cc:	203fe726 	beq	r4,zero,2276c <__alt_data_end+0xfffe3f6c>
   227d0:	003eaf06 	br	22290 <__alt_data_end+0xfffe3a90>
   227d4:	943eae1e 	bne	r18,r16,22290 <__alt_data_end+0xfffe3a90>
   227d8:	1cbfe40e 	bge	r3,r18,2276c <__alt_data_end+0xfffe3f6c>
   227dc:	917fffc4 	addi	r5,r18,-1
   227e0:	a009883a 	mov	r4,r20
   227e4:	001a4ac0 	call	1a4ac <__any_on>
   227e8:	103ea926 	beq	r2,zero,22290 <__alt_data_end+0xfffe3a90>
   227ec:	d8c00117 	ldw	r3,4(sp)
   227f0:	18800117 	ldw	r2,4(r3)
   227f4:	003fdd06 	br	2276c <__alt_data_end+0xfffe3f6c>
   227f8:	d8c00117 	ldw	r3,4(sp)
   227fc:	18800017 	ldw	r2,0(r3)
   22800:	10bfffc4 	addi	r2,r2,-1
   22804:	90801c26 	beq	r18,r2,22878 <__gethex+0x81c>
   22808:	04400884 	movi	r17,34
   2280c:	003f5506 	br	22564 <__alt_data_end+0xfffe3d64>
   22810:	34c5883a 	add	r2,r6,r19
   22814:	113fff17 	ldw	r4,-4(r2)
   22818:	001979c0 	call	1979c <__hi0bits>
   2281c:	00c00804 	movi	r3,32
   22820:	1ca5c83a 	sub	r18,r3,r18
   22824:	14bfcb0e 	bge	r2,r18,22754 <__alt_data_end+0xfffe3f54>
   22828:	003f1a06 	br	22494 <__alt_data_end+0xfffe3c94>
   2282c:	a1400117 	ldw	r5,4(r20)
   22830:	d9000217 	ldw	r4,8(sp)
   22834:	29400044 	addi	r5,r5,1
   22838:	00194800 	call	19480 <_Balloc>
   2283c:	a1800417 	ldw	r6,16(r20)
   22840:	a1400304 	addi	r5,r20,12
   22844:	11000304 	addi	r4,r2,12
   22848:	31800084 	addi	r6,r6,2
   2284c:	318d883a 	add	r6,r6,r6
   22850:	318d883a 	add	r6,r6,r6
   22854:	102d883a 	mov	r22,r2
   22858:	00127200 	call	12720 <memcpy>
   2285c:	d9000217 	ldw	r4,8(sp)
   22860:	a00b883a 	mov	r5,r20
   22864:	b029883a 	mov	r20,r22
   22868:	00195280 	call	19528 <_Bfree>
   2286c:	b0c00417 	ldw	r3,16(r22)
   22870:	b1800504 	addi	r6,r22,20
   22874:	003efc06 	br	22468 <__alt_data_end+0xfffe3c68>
   22878:	9005d17a 	srai	r2,r18,5
   2287c:	944007cc 	andi	r17,r18,31
   22880:	1085883a 	add	r2,r2,r2
   22884:	1085883a 	add	r2,r2,r2
   22888:	3087883a 	add	r3,r6,r2
   2288c:	00800044 	movi	r2,1
   22890:	1462983a 	sll	r17,r2,r17
   22894:	18800017 	ldw	r2,0(r3)
   22898:	8884703a 	and	r2,r17,r2
   2289c:	1022c03a 	cmpne	r17,r2,zero
   228a0:	00800884 	movi	r2,34
   228a4:	1463c83a 	sub	r17,r2,r17
   228a8:	003f2e06 	br	22564 <__alt_data_end+0xfffe3d64>

000228ac <__hexnan>:
   228ac:	defff904 	addi	sp,sp,-28
   228b0:	dc800215 	stw	r18,8(sp)
   228b4:	2c800017 	ldw	r18,0(r5)
   228b8:	dfc00615 	stw	ra,24(sp)
   228bc:	dd400515 	stw	r21,20(sp)
   228c0:	901fd17a 	srai	r15,r18,5
   228c4:	dd000415 	stw	r20,16(sp)
   228c8:	dcc00315 	stw	r19,12(sp)
   228cc:	7bdf883a 	add	r15,r15,r15
   228d0:	7bdf883a 	add	r15,r15,r15
   228d4:	dc400115 	stw	r17,4(sp)
   228d8:	dc000015 	stw	r16,0(sp)
   228dc:	948007cc 	andi	r18,r18,31
   228e0:	33df883a 	add	r15,r6,r15
   228e4:	90000126 	beq	r18,zero,228ec <__hexnan+0x40>
   228e8:	7bc00104 	addi	r15,r15,4
   228ec:	22000017 	ldw	r8,0(r4)
   228f0:	7affff04 	addi	r11,r15,-4
   228f4:	038000f4 	movhi	r14,3
   228f8:	783fff15 	stw	zero,-4(r15)
   228fc:	581b883a 	mov	r13,r11
   22900:	580b883a 	mov	r5,r11
   22904:	000f883a 	mov	r7,zero
   22908:	003f883a 	mov	ra,zero
   2290c:	0019883a 	mov	r12,zero
   22910:	73a5ec84 	addi	r14,r14,-26702
   22914:	04400204 	movi	r17,8
   22918:	04000804 	movi	r16,32
   2291c:	04c001c4 	movi	r19,7
   22920:	42000044 	addi	r8,r8,1
   22924:	40c00003 	ldbu	r3,0(r8)
   22928:	18001d26 	beq	r3,zero,229a0 <__hexnan+0xf4>
   2292c:	70c5883a 	add	r2,r14,r3
   22930:	10800003 	ldbu	r2,0(r2)
   22934:	12403fcc 	andi	r9,r2,255
   22938:	4800301e 	bne	r9,zero,229fc <__hexnan+0x150>
   2293c:	80c04236 	bltu	r16,r3,22a48 <__hexnan+0x19c>
   22940:	fb3ff70e 	bge	ra,r12,22920 <__alt_data_end+0xfffe4120>
   22944:	2b40112e 	bgeu	r5,r13,2298c <__hexnan+0xe0>
   22948:	99c01016 	blt	r19,r7,2298c <__hexnan+0xe0>
   2294c:	89e9c83a 	sub	r20,r17,r7
   22950:	a529883a 	add	r20,r20,r20
   22954:	2a800017 	ldw	r10,0(r5)
   22958:	a529883a 	add	r20,r20,r20
   2295c:	852bc83a 	sub	r21,r16,r20
   22960:	28c00104 	addi	r3,r5,4
   22964:	2805883a 	mov	r2,r5
   22968:	19c00017 	ldw	r7,0(r3)
   2296c:	10800104 	addi	r2,r2,4
   22970:	18c00104 	addi	r3,r3,4
   22974:	3d52983a 	sll	r9,r7,r21
   22978:	4a92b03a 	or	r9,r9,r10
   2297c:	3d14d83a 	srl	r10,r7,r20
   22980:	127fff15 	stw	r9,-4(r2)
   22984:	1abfff15 	stw	r10,-4(r3)
   22988:	137ff736 	bltu	r2,r13,22968 <__alt_data_end+0xfffe4168>
   2298c:	31402836 	bltu	r6,r5,22a30 <__hexnan+0x184>
   22990:	42000044 	addi	r8,r8,1
   22994:	40c00003 	ldbu	r3,0(r8)
   22998:	01c00204 	movi	r7,8
   2299c:	183fe31e 	bne	r3,zero,2292c <__alt_data_end+0xfffe412c>
   229a0:	60002b26 	beq	r12,zero,22a50 <__hexnan+0x1a4>
   229a4:	2b40022e 	bgeu	r5,r13,229b0 <__hexnan+0x104>
   229a8:	008001c4 	movi	r2,7
   229ac:	11c0430e 	bge	r2,r7,22abc <__hexnan+0x210>
   229b0:	3140312e 	bgeu	r6,r5,22a78 <__hexnan+0x1cc>
   229b4:	3007883a 	mov	r3,r6
   229b8:	29000017 	ldw	r4,0(r5)
   229bc:	18800104 	addi	r2,r3,4
   229c0:	29400104 	addi	r5,r5,4
   229c4:	19000015 	stw	r4,0(r3)
   229c8:	1007883a 	mov	r3,r2
   229cc:	597ffa2e 	bgeu	r11,r5,229b8 <__alt_data_end+0xfffe41b8>
   229d0:	10000015 	stw	zero,0(r2)
   229d4:	10800104 	addi	r2,r2,4
   229d8:	58bffd2e 	bgeu	r11,r2,229d0 <__alt_data_end+0xfffe41d0>
   229dc:	78bfff17 	ldw	r2,-4(r15)
   229e0:	1000041e 	bne	r2,zero,229f4 <__hexnan+0x148>
   229e4:	32c02d26 	beq	r6,r11,22a9c <__hexnan+0x1f0>
   229e8:	5affff04 	addi	r11,r11,-4
   229ec:	58800017 	ldw	r2,0(r11)
   229f0:	103ffc26 	beq	r2,zero,229e4 <__alt_data_end+0xfffe41e4>
   229f4:	00800144 	movi	r2,5
   229f8:	00001606 	br	22a54 <__hexnan+0x1a8>
   229fc:	39c00044 	addi	r7,r7,1
   22a00:	63000044 	addi	r12,r12,1
   22a04:	89c0040e 	bge	r17,r7,22a18 <__hexnan+0x16c>
   22a08:	317fc52e 	bgeu	r6,r5,22920 <__alt_data_end+0xfffe4120>
   22a0c:	283fff15 	stw	zero,-4(r5)
   22a10:	01c00044 	movi	r7,1
   22a14:	297fff04 	addi	r5,r5,-4
   22a18:	28c00017 	ldw	r3,0(r5)
   22a1c:	108003cc 	andi	r2,r2,15
   22a20:	1806913a 	slli	r3,r3,4
   22a24:	1884b03a 	or	r2,r3,r2
   22a28:	28800015 	stw	r2,0(r5)
   22a2c:	003fbc06 	br	22920 <__alt_data_end+0xfffe4120>
   22a30:	2b7fff04 	addi	r13,r5,-4
   22a34:	283fff15 	stw	zero,-4(r5)
   22a38:	603f883a 	mov	ra,r12
   22a3c:	680b883a 	mov	r5,r13
   22a40:	000f883a 	mov	r7,zero
   22a44:	003fb606 	br	22920 <__alt_data_end+0xfffe4120>
   22a48:	00800a44 	movi	r2,41
   22a4c:	18801726 	beq	r3,r2,22aac <__hexnan+0x200>
   22a50:	00800104 	movi	r2,4
   22a54:	dfc00617 	ldw	ra,24(sp)
   22a58:	dd400517 	ldw	r21,20(sp)
   22a5c:	dd000417 	ldw	r20,16(sp)
   22a60:	dcc00317 	ldw	r19,12(sp)
   22a64:	dc800217 	ldw	r18,8(sp)
   22a68:	dc400117 	ldw	r17,4(sp)
   22a6c:	dc000017 	ldw	r16,0(sp)
   22a70:	dec00704 	addi	sp,sp,28
   22a74:	f800283a 	ret
   22a78:	903fd826 	beq	r18,zero,229dc <__alt_data_end+0xfffe41dc>
   22a7c:	00c00804 	movi	r3,32
   22a80:	1ca5c83a 	sub	r18,r3,r18
   22a84:	00ffffc4 	movi	r3,-1
   22a88:	78bfff17 	ldw	r2,-4(r15)
   22a8c:	1c86d83a 	srl	r3,r3,r18
   22a90:	1884703a 	and	r2,r3,r2
   22a94:	78bfff15 	stw	r2,-4(r15)
   22a98:	003fd106 	br	229e0 <__alt_data_end+0xfffe41e0>
   22a9c:	00800044 	movi	r2,1
   22aa0:	58800015 	stw	r2,0(r11)
   22aa4:	00800144 	movi	r2,5
   22aa8:	003fea06 	br	22a54 <__alt_data_end+0xfffe4254>
   22aac:	42000044 	addi	r8,r8,1
   22ab0:	22000015 	stw	r8,0(r4)
   22ab4:	603fbb1e 	bne	r12,zero,229a4 <__alt_data_end+0xfffe41a4>
   22ab8:	003fe506 	br	22a50 <__alt_data_end+0xfffe4250>
   22abc:	02400204 	movi	r9,8
   22ac0:	49d3c83a 	sub	r9,r9,r7
   22ac4:	4a53883a 	add	r9,r9,r9
   22ac8:	2a000017 	ldw	r8,0(r5)
   22acc:	4a53883a 	add	r9,r9,r9
   22ad0:	02800804 	movi	r10,32
   22ad4:	5255c83a 	sub	r10,r10,r9
   22ad8:	28c00104 	addi	r3,r5,4
   22adc:	2805883a 	mov	r2,r5
   22ae0:	19c00017 	ldw	r7,0(r3)
   22ae4:	10800104 	addi	r2,r2,4
   22ae8:	18c00104 	addi	r3,r3,4
   22aec:	3a88983a 	sll	r4,r7,r10
   22af0:	2208b03a 	or	r4,r4,r8
   22af4:	3a50d83a 	srl	r8,r7,r9
   22af8:	113fff15 	stw	r4,-4(r2)
   22afc:	1a3fff15 	stw	r8,-4(r3)
   22b00:	137ff736 	bltu	r2,r13,22ae0 <__alt_data_end+0xfffe42e0>
   22b04:	003faa06 	br	229b0 <__alt_data_end+0xfffe41b0>

00022b08 <strncmp>:
   22b08:	30003126 	beq	r6,zero,22bd0 <strncmp+0xc8>
   22b0c:	2144b03a 	or	r2,r4,r5
   22b10:	108000cc 	andi	r2,r2,3
   22b14:	10001e1e 	bne	r2,zero,22b90 <strncmp+0x88>
   22b18:	024000c4 	movi	r9,3
   22b1c:	49801c2e 	bgeu	r9,r6,22b90 <strncmp+0x88>
   22b20:	20800017 	ldw	r2,0(r4)
   22b24:	28c00017 	ldw	r3,0(r5)
   22b28:	10c0191e 	bne	r2,r3,22b90 <strncmp+0x88>
   22b2c:	31bfff04 	addi	r6,r6,-4
   22b30:	30002726 	beq	r6,zero,22bd0 <strncmp+0xc8>
   22b34:	02ffbff4 	movhi	r11,65279
   22b38:	5affbfc4 	addi	r11,r11,-257
   22b3c:	0086303a 	nor	r3,zero,r2
   22b40:	02a02074 	movhi	r10,32897
   22b44:	12c5883a 	add	r2,r2,r11
   22b48:	52a02004 	addi	r10,r10,-32640
   22b4c:	10c4703a 	and	r2,r2,r3
   22b50:	1284703a 	and	r2,r2,r10
   22b54:	10000b26 	beq	r2,zero,22b84 <strncmp+0x7c>
   22b58:	00001d06 	br	22bd0 <strncmp+0xc8>
   22b5c:	20c00017 	ldw	r3,0(r4)
   22b60:	29c00017 	ldw	r7,0(r5)
   22b64:	1ad1883a 	add	r8,r3,r11
   22b68:	00c4303a 	nor	r2,zero,r3
   22b6c:	4084703a 	and	r2,r8,r2
   22b70:	1284703a 	and	r2,r2,r10
   22b74:	19c0061e 	bne	r3,r7,22b90 <strncmp+0x88>
   22b78:	31bfff04 	addi	r6,r6,-4
   22b7c:	30001426 	beq	r6,zero,22bd0 <strncmp+0xc8>
   22b80:	1000131e 	bne	r2,zero,22bd0 <strncmp+0xc8>
   22b84:	21000104 	addi	r4,r4,4
   22b88:	29400104 	addi	r5,r5,4
   22b8c:	49bff336 	bltu	r9,r6,22b5c <__alt_data_end+0xfffe435c>
   22b90:	28800007 	ldb	r2,0(r5)
   22b94:	20c00007 	ldb	r3,0(r4)
   22b98:	31bfffc4 	addi	r6,r6,-1
   22b9c:	10c0081e 	bne	r2,r3,22bc0 <strncmp+0xb8>
   22ba0:	30000b26 	beq	r6,zero,22bd0 <strncmp+0xc8>
   22ba4:	10000a26 	beq	r2,zero,22bd0 <strncmp+0xc8>
   22ba8:	21000044 	addi	r4,r4,1
   22bac:	29400044 	addi	r5,r5,1
   22bb0:	20800007 	ldb	r2,0(r4)
   22bb4:	28c00007 	ldb	r3,0(r5)
   22bb8:	31bfffc4 	addi	r6,r6,-1
   22bbc:	10fff826 	beq	r2,r3,22ba0 <__alt_data_end+0xfffe43a0>
   22bc0:	20800003 	ldbu	r2,0(r4)
   22bc4:	28c00003 	ldbu	r3,0(r5)
   22bc8:	10c5c83a 	sub	r2,r2,r3
   22bcc:	f800283a 	ret
   22bd0:	0005883a 	mov	r2,zero
   22bd4:	f800283a 	ret

00022bd8 <__ssprint_r>:
   22bd8:	30800217 	ldw	r2,8(r6)
   22bdc:	defff604 	addi	sp,sp,-40
   22be0:	dc800215 	stw	r18,8(sp)
   22be4:	dfc00915 	stw	ra,36(sp)
   22be8:	df000815 	stw	fp,32(sp)
   22bec:	ddc00715 	stw	r23,28(sp)
   22bf0:	dd800615 	stw	r22,24(sp)
   22bf4:	dd400515 	stw	r21,20(sp)
   22bf8:	dd000415 	stw	r20,16(sp)
   22bfc:	dcc00315 	stw	r19,12(sp)
   22c00:	dc400115 	stw	r17,4(sp)
   22c04:	dc000015 	stw	r16,0(sp)
   22c08:	3025883a 	mov	r18,r6
   22c0c:	10005826 	beq	r2,zero,22d70 <__ssprint_r+0x198>
   22c10:	2027883a 	mov	r19,r4
   22c14:	35c00017 	ldw	r23,0(r6)
   22c18:	29000017 	ldw	r4,0(r5)
   22c1c:	28800217 	ldw	r2,8(r5)
   22c20:	2823883a 	mov	r17,r5
   22c24:	0039883a 	mov	fp,zero
   22c28:	0021883a 	mov	r16,zero
   22c2c:	80003926 	beq	r16,zero,22d14 <__ssprint_r+0x13c>
   22c30:	102b883a 	mov	r21,r2
   22c34:	102d883a 	mov	r22,r2
   22c38:	80803a36 	bltu	r16,r2,22d24 <__ssprint_r+0x14c>
   22c3c:	88c0030b 	ldhu	r3,12(r17)
   22c40:	1881200c 	andi	r2,r3,1152
   22c44:	10002626 	beq	r2,zero,22ce0 <__ssprint_r+0x108>
   22c48:	88800517 	ldw	r2,20(r17)
   22c4c:	89400417 	ldw	r5,16(r17)
   22c50:	81800044 	addi	r6,r16,1
   22c54:	108f883a 	add	r7,r2,r2
   22c58:	3885883a 	add	r2,r7,r2
   22c5c:	100ed7fa 	srli	r7,r2,31
   22c60:	216dc83a 	sub	r22,r4,r5
   22c64:	3589883a 	add	r4,r6,r22
   22c68:	3885883a 	add	r2,r7,r2
   22c6c:	102bd07a 	srai	r21,r2,1
   22c70:	a80d883a 	mov	r6,r21
   22c74:	a900022e 	bgeu	r21,r4,22c80 <__ssprint_r+0xa8>
   22c78:	202b883a 	mov	r21,r4
   22c7c:	200d883a 	mov	r6,r4
   22c80:	18c1000c 	andi	r3,r3,1024
   22c84:	18002a26 	beq	r3,zero,22d30 <__ssprint_r+0x158>
   22c88:	300b883a 	mov	r5,r6
   22c8c:	9809883a 	mov	r4,r19
   22c90:	0011e300 	call	11e30 <_malloc_r>
   22c94:	1029883a 	mov	r20,r2
   22c98:	10002c26 	beq	r2,zero,22d4c <__ssprint_r+0x174>
   22c9c:	89400417 	ldw	r5,16(r17)
   22ca0:	b00d883a 	mov	r6,r22
   22ca4:	1009883a 	mov	r4,r2
   22ca8:	00127200 	call	12720 <memcpy>
   22cac:	8880030b 	ldhu	r2,12(r17)
   22cb0:	00fedfc4 	movi	r3,-1153
   22cb4:	10c4703a 	and	r2,r2,r3
   22cb8:	10802014 	ori	r2,r2,128
   22cbc:	8880030d 	sth	r2,12(r17)
   22cc0:	a589883a 	add	r4,r20,r22
   22cc4:	adadc83a 	sub	r22,r21,r22
   22cc8:	8d400515 	stw	r21,20(r17)
   22ccc:	8d800215 	stw	r22,8(r17)
   22cd0:	8d000415 	stw	r20,16(r17)
   22cd4:	89000015 	stw	r4,0(r17)
   22cd8:	802b883a 	mov	r21,r16
   22cdc:	802d883a 	mov	r22,r16
   22ce0:	b00d883a 	mov	r6,r22
   22ce4:	e00b883a 	mov	r5,fp
   22ce8:	00128680 	call	12868 <memmove>
   22cec:	88800217 	ldw	r2,8(r17)
   22cf0:	89000017 	ldw	r4,0(r17)
   22cf4:	90c00217 	ldw	r3,8(r18)
   22cf8:	1545c83a 	sub	r2,r2,r21
   22cfc:	2589883a 	add	r4,r4,r22
   22d00:	88800215 	stw	r2,8(r17)
   22d04:	89000015 	stw	r4,0(r17)
   22d08:	1c21c83a 	sub	r16,r3,r16
   22d0c:	94000215 	stw	r16,8(r18)
   22d10:	80001726 	beq	r16,zero,22d70 <__ssprint_r+0x198>
   22d14:	bf000017 	ldw	fp,0(r23)
   22d18:	bc000117 	ldw	r16,4(r23)
   22d1c:	bdc00204 	addi	r23,r23,8
   22d20:	003fc206 	br	22c2c <__alt_data_end+0xfffe442c>
   22d24:	802b883a 	mov	r21,r16
   22d28:	802d883a 	mov	r22,r16
   22d2c:	003fec06 	br	22ce0 <__alt_data_end+0xfffe44e0>
   22d30:	9809883a 	mov	r4,r19
   22d34:	0012cac0 	call	12cac <_realloc_r>
   22d38:	1029883a 	mov	r20,r2
   22d3c:	103fe01e 	bne	r2,zero,22cc0 <__alt_data_end+0xfffe44c0>
   22d40:	89400417 	ldw	r5,16(r17)
   22d44:	9809883a 	mov	r4,r19
   22d48:	0010e100 	call	10e10 <_free_r>
   22d4c:	88c0030b 	ldhu	r3,12(r17)
   22d50:	00800304 	movi	r2,12
   22d54:	98800015 	stw	r2,0(r19)
   22d58:	18c01014 	ori	r3,r3,64
   22d5c:	88c0030d 	sth	r3,12(r17)
   22d60:	00bfffc4 	movi	r2,-1
   22d64:	90000215 	stw	zero,8(r18)
   22d68:	90000115 	stw	zero,4(r18)
   22d6c:	00000206 	br	22d78 <__ssprint_r+0x1a0>
   22d70:	90000115 	stw	zero,4(r18)
   22d74:	0005883a 	mov	r2,zero
   22d78:	dfc00917 	ldw	ra,36(sp)
   22d7c:	df000817 	ldw	fp,32(sp)
   22d80:	ddc00717 	ldw	r23,28(sp)
   22d84:	dd800617 	ldw	r22,24(sp)
   22d88:	dd400517 	ldw	r21,20(sp)
   22d8c:	dd000417 	ldw	r20,16(sp)
   22d90:	dcc00317 	ldw	r19,12(sp)
   22d94:	dc800217 	ldw	r18,8(sp)
   22d98:	dc400117 	ldw	r17,4(sp)
   22d9c:	dc000017 	ldw	r16,0(sp)
   22da0:	dec00a04 	addi	sp,sp,40
   22da4:	f800283a 	ret

00022da8 <___svfiprintf_internal_r>:
   22da8:	2880030b 	ldhu	r2,12(r5)
   22dac:	deffc804 	addi	sp,sp,-224
   22db0:	dcc03115 	stw	r19,196(sp)
   22db4:	dfc03715 	stw	ra,220(sp)
   22db8:	df003615 	stw	fp,216(sp)
   22dbc:	ddc03515 	stw	r23,212(sp)
   22dc0:	dd803415 	stw	r22,208(sp)
   22dc4:	dd403315 	stw	r21,204(sp)
   22dc8:	dd003215 	stw	r20,200(sp)
   22dcc:	dc803015 	stw	r18,192(sp)
   22dd0:	dc402f15 	stw	r17,188(sp)
   22dd4:	dc002e15 	stw	r16,184(sp)
   22dd8:	d9402315 	stw	r5,140(sp)
   22ddc:	d9002715 	stw	r4,156(sp)
   22de0:	1080200c 	andi	r2,r2,128
   22de4:	d9c02415 	stw	r7,144(sp)
   22de8:	3027883a 	mov	r19,r6
   22dec:	10000226 	beq	r2,zero,22df8 <___svfiprintf_internal_r+0x50>
   22df0:	28800417 	ldw	r2,16(r5)
   22df4:	10046d26 	beq	r2,zero,23fac <___svfiprintf_internal_r+0x1204>
   22df8:	d8801a04 	addi	r2,sp,104
   22dfc:	d8c019c4 	addi	r3,sp,103
   22e00:	058000f4 	movhi	r22,3
   22e04:	10c9c83a 	sub	r4,r2,r3
   22e08:	b5a62c84 	addi	r22,r22,-26446
   22e0c:	d8801e15 	stw	r2,120(sp)
   22e10:	d8c01f15 	stw	r3,124(sp)
   22e14:	dec01a15 	stw	sp,104(sp)
   22e18:	d8001c15 	stw	zero,112(sp)
   22e1c:	d8001b15 	stw	zero,108(sp)
   22e20:	d811883a 	mov	r8,sp
   22e24:	d8002915 	stw	zero,164(sp)
   22e28:	d8002615 	stw	zero,152(sp)
   22e2c:	d9002c15 	stw	r4,176(sp)
   22e30:	98800007 	ldb	r2,0(r19)
   22e34:	10031426 	beq	r2,zero,23a88 <___svfiprintf_internal_r+0xce0>
   22e38:	00c00944 	movi	r3,37
   22e3c:	9825883a 	mov	r18,r19
   22e40:	10c0021e 	bne	r2,r3,22e4c <___svfiprintf_internal_r+0xa4>
   22e44:	00001406 	br	22e98 <___svfiprintf_internal_r+0xf0>
   22e48:	10c00326 	beq	r2,r3,22e58 <___svfiprintf_internal_r+0xb0>
   22e4c:	94800044 	addi	r18,r18,1
   22e50:	90800007 	ldb	r2,0(r18)
   22e54:	103ffc1e 	bne	r2,zero,22e48 <__alt_data_end+0xfffe4648>
   22e58:	94e1c83a 	sub	r16,r18,r19
   22e5c:	80000e26 	beq	r16,zero,22e98 <___svfiprintf_internal_r+0xf0>
   22e60:	d8c01c17 	ldw	r3,112(sp)
   22e64:	d8801b17 	ldw	r2,108(sp)
   22e68:	44c00015 	stw	r19,0(r8)
   22e6c:	1c07883a 	add	r3,r3,r16
   22e70:	10800044 	addi	r2,r2,1
   22e74:	d8c01c15 	stw	r3,112(sp)
   22e78:	44000115 	stw	r16,4(r8)
   22e7c:	d8801b15 	stw	r2,108(sp)
   22e80:	00c001c4 	movi	r3,7
   22e84:	18835c16 	blt	r3,r2,23bf8 <___svfiprintf_internal_r+0xe50>
   22e88:	42000204 	addi	r8,r8,8
   22e8c:	d9402617 	ldw	r5,152(sp)
   22e90:	2c0b883a 	add	r5,r5,r16
   22e94:	d9402615 	stw	r5,152(sp)
   22e98:	90800007 	ldb	r2,0(r18)
   22e9c:	1002fc26 	beq	r2,zero,23a90 <___svfiprintf_internal_r+0xce8>
   22ea0:	0023883a 	mov	r17,zero
   22ea4:	00bfffc4 	movi	r2,-1
   22ea8:	0021883a 	mov	r16,zero
   22eac:	94c00044 	addi	r19,r18,1
   22eb0:	90c00047 	ldb	r3,1(r18)
   22eb4:	dc402105 	stb	r17,132(sp)
   22eb8:	d8001d85 	stb	zero,118(sp)
   22ebc:	002b883a 	mov	r21,zero
   22ec0:	d8802015 	stw	r2,128(sp)
   22ec4:	d8002515 	stw	zero,148(sp)
   22ec8:	04801604 	movi	r18,88
   22ecc:	05000244 	movi	r20,9
   22ed0:	402f883a 	mov	r23,r8
   22ed4:	8023883a 	mov	r17,r16
   22ed8:	9cc00044 	addi	r19,r19,1
   22edc:	18bff804 	addi	r2,r3,-32
   22ee0:	9081fb36 	bltu	r18,r2,236d0 <___svfiprintf_internal_r+0x928>
   22ee4:	100490ba 	slli	r2,r2,2
   22ee8:	010000b4 	movhi	r4,2
   22eec:	210bbf04 	addi	r4,r4,12028
   22ef0:	1105883a 	add	r2,r2,r4
   22ef4:	10800017 	ldw	r2,0(r2)
   22ef8:	1000683a 	jmp	r2
   22efc:	000230fc 	xorhi	zero,zero,2243
   22f00:	000236d0 	cmplti	zero,zero,2267
   22f04:	000236d0 	cmplti	zero,zero,2267
   22f08:	000230f0 	cmpltui	zero,zero,2243
   22f0c:	000236d0 	cmplti	zero,zero,2267
   22f10:	000236d0 	cmplti	zero,zero,2267
   22f14:	000236d0 	cmplti	zero,zero,2267
   22f18:	000236d0 	cmplti	zero,zero,2267
   22f1c:	000236d0 	cmplti	zero,zero,2267
   22f20:	000236d0 	cmplti	zero,zero,2267
   22f24:	00023060 	cmpeqi	zero,zero,2241
   22f28:	0002325c 	xori	zero,zero,2249
   22f2c:	000236d0 	cmplti	zero,zero,2267
   22f30:	00023088 	cmpgei	zero,zero,2242
   22f34:	0002370c 	andi	zero,zero,2268
   22f38:	000236d0 	cmplti	zero,zero,2267
   22f3c:	00023700 	call	2370 <set_addrs_to_default+0x1230>
   22f40:	00023694 	movui	zero,2266
   22f44:	00023694 	movui	zero,2266
   22f48:	00023694 	movui	zero,2266
   22f4c:	00023694 	movui	zero,2266
   22f50:	00023694 	movui	zero,2266
   22f54:	00023694 	movui	zero,2266
   22f58:	00023694 	movui	zero,2266
   22f5c:	00023694 	movui	zero,2266
   22f60:	00023694 	movui	zero,2266
   22f64:	000236d0 	cmplti	zero,zero,2267
   22f68:	000236d0 	cmplti	zero,zero,2267
   22f6c:	000236d0 	cmplti	zero,zero,2267
   22f70:	000236d0 	cmplti	zero,zero,2267
   22f74:	000236d0 	cmplti	zero,zero,2267
   22f78:	000236d0 	cmplti	zero,zero,2267
   22f7c:	000236d0 	cmplti	zero,zero,2267
   22f80:	000236d0 	cmplti	zero,zero,2267
   22f84:	000236d0 	cmplti	zero,zero,2267
   22f88:	000236d0 	cmplti	zero,zero,2267
   22f8c:	00023618 	cmpnei	zero,zero,2264
   22f90:	000236d0 	cmplti	zero,zero,2267
   22f94:	000236d0 	cmplti	zero,zero,2267
   22f98:	000236d0 	cmplti	zero,zero,2267
   22f9c:	000236d0 	cmplti	zero,zero,2267
   22fa0:	000236d0 	cmplti	zero,zero,2267
   22fa4:	000236d0 	cmplti	zero,zero,2267
   22fa8:	000236d0 	cmplti	zero,zero,2267
   22fac:	000236d0 	cmplti	zero,zero,2267
   22fb0:	000236d0 	cmplti	zero,zero,2267
   22fb4:	000236d0 	cmplti	zero,zero,2267
   22fb8:	000237c8 	cmpgei	zero,zero,2271
   22fbc:	000236d0 	cmplti	zero,zero,2267
   22fc0:	000236d0 	cmplti	zero,zero,2267
   22fc4:	000236d0 	cmplti	zero,zero,2267
   22fc8:	000236d0 	cmplti	zero,zero,2267
   22fcc:	000236d0 	cmplti	zero,zero,2267
   22fd0:	00023754 	movui	zero,2269
   22fd4:	000236d0 	cmplti	zero,zero,2267
   22fd8:	000236d0 	cmplti	zero,zero,2267
   22fdc:	00023454 	movui	zero,2257
   22fe0:	000236d0 	cmplti	zero,zero,2267
   22fe4:	000236d0 	cmplti	zero,zero,2267
   22fe8:	000236d0 	cmplti	zero,zero,2267
   22fec:	000236d0 	cmplti	zero,zero,2267
   22ff0:	000236d0 	cmplti	zero,zero,2267
   22ff4:	000236d0 	cmplti	zero,zero,2267
   22ff8:	000236d0 	cmplti	zero,zero,2267
   22ffc:	000236d0 	cmplti	zero,zero,2267
   23000:	000236d0 	cmplti	zero,zero,2267
   23004:	000236d0 	cmplti	zero,zero,2267
   23008:	00023320 	cmpeqi	zero,zero,2252
   2300c:	00023504 	movi	zero,2260
   23010:	000236d0 	cmplti	zero,zero,2267
   23014:	000236d0 	cmplti	zero,zero,2267
   23018:	000236d0 	cmplti	zero,zero,2267
   2301c:	000234f8 	rdprs	zero,zero,2259
   23020:	00023504 	movi	zero,2260
   23024:	000236d0 	cmplti	zero,zero,2267
   23028:	000236d0 	cmplti	zero,zero,2267
   2302c:	000234e4 	muli	zero,zero,2259
   23030:	000236d0 	cmplti	zero,zero,2267
   23034:	000234a4 	muli	zero,zero,2258
   23038:	00023270 	cmpltui	zero,zero,2249
   2303c:	00023094 	movui	zero,2242
   23040:	0002360c 	andi	zero,zero,2264
   23044:	000236d0 	cmplti	zero,zero,2267
   23048:	000235b8 	rdprs	zero,zero,2262
   2304c:	000236d0 	cmplti	zero,zero,2267
   23050:	000231d4 	movui	zero,2247
   23054:	000236d0 	cmplti	zero,zero,2267
   23058:	000236d0 	cmplti	zero,zero,2267
   2305c:	00023120 	cmpeqi	zero,zero,2244
   23060:	d9002417 	ldw	r4,144(sp)
   23064:	d9402417 	ldw	r5,144(sp)
   23068:	21000017 	ldw	r4,0(r4)
   2306c:	28800104 	addi	r2,r5,4
   23070:	d9002515 	stw	r4,148(sp)
   23074:	20032b0e 	bge	r4,zero,23d24 <___svfiprintf_internal_r+0xf7c>
   23078:	d8c02517 	ldw	r3,148(sp)
   2307c:	d8802415 	stw	r2,144(sp)
   23080:	00c7c83a 	sub	r3,zero,r3
   23084:	d8c02515 	stw	r3,148(sp)
   23088:	8c400114 	ori	r17,r17,4
   2308c:	98c00007 	ldb	r3,0(r19)
   23090:	003f9106 	br	22ed8 <__alt_data_end+0xfffe46d8>
   23094:	00800c04 	movi	r2,48
   23098:	d9402417 	ldw	r5,144(sp)
   2309c:	d9002017 	ldw	r4,128(sp)
   230a0:	d8801d05 	stb	r2,116(sp)
   230a4:	00801e04 	movi	r2,120
   230a8:	d8801d45 	stb	r2,117(sp)
   230ac:	d8001d85 	stb	zero,118(sp)
   230b0:	b811883a 	mov	r8,r23
   230b4:	28c00104 	addi	r3,r5,4
   230b8:	2c800017 	ldw	r18,0(r5)
   230bc:	0029883a 	mov	r20,zero
   230c0:	88800094 	ori	r2,r17,2
   230c4:	20036316 	blt	r4,zero,23e54 <___svfiprintf_internal_r+0x10ac>
   230c8:	00bfdfc4 	movi	r2,-129
   230cc:	88a0703a 	and	r16,r17,r2
   230d0:	d8c02415 	stw	r3,144(sp)
   230d4:	84000094 	ori	r16,r16,2
   230d8:	90031c26 	beq	r18,zero,23d4c <___svfiprintf_internal_r+0xfa4>
   230dc:	014000f4 	movhi	r5,3
   230e0:	2964bc04 	addi	r5,r5,-27920
   230e4:	002b883a 	mov	r21,zero
   230e8:	d9402915 	stw	r5,164(sp)
   230ec:	00002906 	br	23194 <___svfiprintf_internal_r+0x3ec>
   230f0:	8c400054 	ori	r17,r17,1
   230f4:	98c00007 	ldb	r3,0(r19)
   230f8:	003f7706 	br	22ed8 <__alt_data_end+0xfffe46d8>
   230fc:	a8803fcc 	andi	r2,r21,255
   23100:	1080201c 	xori	r2,r2,128
   23104:	10bfe004 	addi	r2,r2,-128
   23108:	10032a1e 	bne	r2,zero,23db4 <___svfiprintf_internal_r+0x100c>
   2310c:	00c00044 	movi	r3,1
   23110:	d8c02105 	stb	r3,132(sp)
   23114:	05400804 	movi	r21,32
   23118:	98c00007 	ldb	r3,0(r19)
   2311c:	003f6e06 	br	22ed8 <__alt_data_end+0xfffe46d8>
   23120:	8821883a 	mov	r16,r17
   23124:	dc402103 	ldbu	r17,132(sp)
   23128:	b811883a 	mov	r8,r23
   2312c:	8c403fcc 	andi	r17,r17,255
   23130:	8803f01e 	bne	r17,zero,240f4 <___svfiprintf_internal_r+0x134c>
   23134:	008000f4 	movhi	r2,3
   23138:	10a4bc04 	addi	r2,r2,-27920
   2313c:	d8802915 	stw	r2,164(sp)
   23140:	8080080c 	andi	r2,r16,32
   23144:	1000cd26 	beq	r2,zero,2347c <___svfiprintf_internal_r+0x6d4>
   23148:	d9002417 	ldw	r4,144(sp)
   2314c:	24800017 	ldw	r18,0(r4)
   23150:	25000117 	ldw	r20,4(r4)
   23154:	21000204 	addi	r4,r4,8
   23158:	d9002415 	stw	r4,144(sp)
   2315c:	8080004c 	andi	r2,r16,1
   23160:	1002c726 	beq	r2,zero,23c80 <___svfiprintf_internal_r+0xed8>
   23164:	9504b03a 	or	r2,r18,r20
   23168:	1003061e 	bne	r2,zero,23d84 <___svfiprintf_internal_r+0xfdc>
   2316c:	d9002017 	ldw	r4,128(sp)
   23170:	d8001d85 	stb	zero,118(sp)
   23174:	20033e16 	blt	r4,zero,23e70 <___svfiprintf_internal_r+0x10c8>
   23178:	00bfdfc4 	movi	r2,-129
   2317c:	80a0703a 	and	r16,r16,r2
   23180:	d9402017 	ldw	r5,128(sp)
   23184:	002b883a 	mov	r21,zero
   23188:	28002826 	beq	r5,zero,2322c <___svfiprintf_internal_r+0x484>
   2318c:	0025883a 	mov	r18,zero
   23190:	0029883a 	mov	r20,zero
   23194:	d9002917 	ldw	r4,164(sp)
   23198:	dc401a04 	addi	r17,sp,104
   2319c:	908003cc 	andi	r2,r18,15
   231a0:	a006973a 	slli	r3,r20,28
   231a4:	2085883a 	add	r2,r4,r2
   231a8:	9024d13a 	srli	r18,r18,4
   231ac:	10800003 	ldbu	r2,0(r2)
   231b0:	a028d13a 	srli	r20,r20,4
   231b4:	8c7fffc4 	addi	r17,r17,-1
   231b8:	1ca4b03a 	or	r18,r3,r18
   231bc:	88800005 	stb	r2,0(r17)
   231c0:	9504b03a 	or	r2,r18,r20
   231c4:	103ff51e 	bne	r2,zero,2319c <__alt_data_end+0xfffe499c>
   231c8:	d8801e17 	ldw	r2,120(sp)
   231cc:	1469c83a 	sub	r20,r2,r17
   231d0:	00001906 	br	23238 <___svfiprintf_internal_r+0x490>
   231d4:	8821883a 	mov	r16,r17
   231d8:	dc402103 	ldbu	r17,132(sp)
   231dc:	b811883a 	mov	r8,r23
   231e0:	8c403fcc 	andi	r17,r17,255
   231e4:	8803d01e 	bne	r17,zero,24128 <___svfiprintf_internal_r+0x1380>
   231e8:	8080080c 	andi	r2,r16,32
   231ec:	10016126 	beq	r2,zero,23774 <___svfiprintf_internal_r+0x9cc>
   231f0:	d9002417 	ldw	r4,144(sp)
   231f4:	d9402017 	ldw	r5,128(sp)
   231f8:	d8001d85 	stb	zero,118(sp)
   231fc:	20c00204 	addi	r3,r4,8
   23200:	24800017 	ldw	r18,0(r4)
   23204:	25000117 	ldw	r20,4(r4)
   23208:	28030f16 	blt	r5,zero,23e48 <___svfiprintf_internal_r+0x10a0>
   2320c:	013fdfc4 	movi	r4,-129
   23210:	9504b03a 	or	r2,r18,r20
   23214:	d8c02415 	stw	r3,144(sp)
   23218:	8120703a 	and	r16,r16,r4
   2321c:	002b883a 	mov	r21,zero
   23220:	1000cd1e 	bne	r2,zero,23558 <___svfiprintf_internal_r+0x7b0>
   23224:	d8c02017 	ldw	r3,128(sp)
   23228:	1803141e 	bne	r3,zero,23e7c <___svfiprintf_internal_r+0x10d4>
   2322c:	d8002015 	stw	zero,128(sp)
   23230:	0029883a 	mov	r20,zero
   23234:	dc401a04 	addi	r17,sp,104
   23238:	dc802017 	ldw	r18,128(sp)
   2323c:	9500010e 	bge	r18,r20,23244 <___svfiprintf_internal_r+0x49c>
   23240:	a025883a 	mov	r18,r20
   23244:	ad403fcc 	andi	r21,r21,255
   23248:	ad40201c 	xori	r21,r21,128
   2324c:	ad7fe004 	addi	r21,r21,-128
   23250:	a8003f26 	beq	r21,zero,23350 <___svfiprintf_internal_r+0x5a8>
   23254:	94800044 	addi	r18,r18,1
   23258:	00003d06 	br	23350 <___svfiprintf_internal_r+0x5a8>
   2325c:	00c00044 	movi	r3,1
   23260:	d8c02105 	stb	r3,132(sp)
   23264:	05400ac4 	movi	r21,43
   23268:	98c00007 	ldb	r3,0(r19)
   2326c:	003f1a06 	br	22ed8 <__alt_data_end+0xfffe46d8>
   23270:	8821883a 	mov	r16,r17
   23274:	dc402103 	ldbu	r17,132(sp)
   23278:	b811883a 	mov	r8,r23
   2327c:	8c403fcc 	andi	r17,r17,255
   23280:	8803a71e 	bne	r17,zero,24120 <___svfiprintf_internal_r+0x1378>
   23284:	8080080c 	andi	r2,r16,32
   23288:	10015726 	beq	r2,zero,237e8 <___svfiprintf_internal_r+0xa40>
   2328c:	d8c02417 	ldw	r3,144(sp)
   23290:	d9002017 	ldw	r4,128(sp)
   23294:	d8001d85 	stb	zero,118(sp)
   23298:	18800204 	addi	r2,r3,8
   2329c:	1c800017 	ldw	r18,0(r3)
   232a0:	1d000117 	ldw	r20,4(r3)
   232a4:	2002db16 	blt	r4,zero,23e14 <___svfiprintf_internal_r+0x106c>
   232a8:	013fdfc4 	movi	r4,-129
   232ac:	9506b03a 	or	r3,r18,r20
   232b0:	d8802415 	stw	r2,144(sp)
   232b4:	8120703a 	and	r16,r16,r4
   232b8:	18015826 	beq	r3,zero,2381c <___svfiprintf_internal_r+0xa74>
   232bc:	002b883a 	mov	r21,zero
   232c0:	dc401a04 	addi	r17,sp,104
   232c4:	9006d0fa 	srli	r3,r18,3
   232c8:	a008977a 	slli	r4,r20,29
   232cc:	a028d0fa 	srli	r20,r20,3
   232d0:	948001cc 	andi	r18,r18,7
   232d4:	90800c04 	addi	r2,r18,48
   232d8:	8c7fffc4 	addi	r17,r17,-1
   232dc:	20e4b03a 	or	r18,r4,r3
   232e0:	88800005 	stb	r2,0(r17)
   232e4:	9506b03a 	or	r3,r18,r20
   232e8:	183ff61e 	bne	r3,zero,232c4 <__alt_data_end+0xfffe4ac4>
   232ec:	80c0004c 	andi	r3,r16,1
   232f0:	18028926 	beq	r3,zero,23d18 <___svfiprintf_internal_r+0xf70>
   232f4:	10803fcc 	andi	r2,r2,255
   232f8:	1080201c 	xori	r2,r2,128
   232fc:	10bfe004 	addi	r2,r2,-128
   23300:	00c00c04 	movi	r3,48
   23304:	10ffb026 	beq	r2,r3,231c8 <__alt_data_end+0xfffe49c8>
   23308:	88ffffc5 	stb	r3,-1(r17)
   2330c:	d8c01e17 	ldw	r3,120(sp)
   23310:	88bfffc4 	addi	r2,r17,-1
   23314:	1023883a 	mov	r17,r2
   23318:	18a9c83a 	sub	r20,r3,r2
   2331c:	003fc606 	br	23238 <__alt_data_end+0xfffe4a38>
   23320:	d8c02417 	ldw	r3,144(sp)
   23324:	04800044 	movi	r18,1
   23328:	8821883a 	mov	r16,r17
   2332c:	18800017 	ldw	r2,0(r3)
   23330:	18c00104 	addi	r3,r3,4
   23334:	b811883a 	mov	r8,r23
   23338:	d8001d85 	stb	zero,118(sp)
   2333c:	d8801005 	stb	r2,64(sp)
   23340:	d8c02415 	stw	r3,144(sp)
   23344:	9029883a 	mov	r20,r18
   23348:	dc401004 	addi	r17,sp,64
   2334c:	d8002015 	stw	zero,128(sp)
   23350:	80c0008c 	andi	r3,r16,2
   23354:	d8c02115 	stw	r3,132(sp)
   23358:	18000126 	beq	r3,zero,23360 <___svfiprintf_internal_r+0x5b8>
   2335c:	94800084 	addi	r18,r18,2
   23360:	80c0210c 	andi	r3,r16,132
   23364:	d8c02215 	stw	r3,136(sp)
   23368:	1801321e 	bne	r3,zero,23834 <___svfiprintf_internal_r+0xa8c>
   2336c:	d9002517 	ldw	r4,148(sp)
   23370:	24b9c83a 	sub	fp,r4,r18
   23374:	07012f0e 	bge	zero,fp,23834 <___svfiprintf_internal_r+0xa8c>
   23378:	02400404 	movi	r9,16
   2337c:	d8c01c17 	ldw	r3,112(sp)
   23380:	d8801b17 	ldw	r2,108(sp)
   23384:	4f03250e 	bge	r9,fp,2401c <___svfiprintf_internal_r+0x1274>
   23388:	010000f4 	movhi	r4,3
   2338c:	21263084 	addi	r4,r4,-26430
   23390:	dc002a15 	stw	r16,168(sp)
   23394:	dc402b15 	stw	r17,172(sp)
   23398:	d9002815 	stw	r4,160(sp)
   2339c:	e023883a 	mov	r17,fp
   233a0:	482f883a 	mov	r23,r9
   233a4:	9839883a 	mov	fp,r19
   233a8:	054001c4 	movi	r21,7
   233ac:	9027883a 	mov	r19,r18
   233b0:	dc002717 	ldw	r16,156(sp)
   233b4:	dc802317 	ldw	r18,140(sp)
   233b8:	00000306 	br	233c8 <___svfiprintf_internal_r+0x620>
   233bc:	8c7ffc04 	addi	r17,r17,-16
   233c0:	42000204 	addi	r8,r8,8
   233c4:	bc40130e 	bge	r23,r17,23414 <___svfiprintf_internal_r+0x66c>
   233c8:	014000f4 	movhi	r5,3
   233cc:	18c00404 	addi	r3,r3,16
   233d0:	10800044 	addi	r2,r2,1
   233d4:	29663084 	addi	r5,r5,-26430
   233d8:	41400015 	stw	r5,0(r8)
   233dc:	45c00115 	stw	r23,4(r8)
   233e0:	d8c01c15 	stw	r3,112(sp)
   233e4:	d8801b15 	stw	r2,108(sp)
   233e8:	a8bff40e 	bge	r21,r2,233bc <__alt_data_end+0xfffe4bbc>
   233ec:	d9801a04 	addi	r6,sp,104
   233f0:	900b883a 	mov	r5,r18
   233f4:	8009883a 	mov	r4,r16
   233f8:	0022bd80 	call	22bd8 <__ssprint_r>
   233fc:	1001aa1e 	bne	r2,zero,23aa8 <___svfiprintf_internal_r+0xd00>
   23400:	8c7ffc04 	addi	r17,r17,-16
   23404:	d8c01c17 	ldw	r3,112(sp)
   23408:	d8801b17 	ldw	r2,108(sp)
   2340c:	d811883a 	mov	r8,sp
   23410:	bc7fed16 	blt	r23,r17,233c8 <__alt_data_end+0xfffe4bc8>
   23414:	9825883a 	mov	r18,r19
   23418:	dc002a17 	ldw	r16,168(sp)
   2341c:	e027883a 	mov	r19,fp
   23420:	8839883a 	mov	fp,r17
   23424:	dc402b17 	ldw	r17,172(sp)
   23428:	d9002817 	ldw	r4,160(sp)
   2342c:	e0c7883a 	add	r3,fp,r3
   23430:	10800044 	addi	r2,r2,1
   23434:	41000015 	stw	r4,0(r8)
   23438:	47000115 	stw	fp,4(r8)
   2343c:	d8c01c15 	stw	r3,112(sp)
   23440:	d8801b15 	stw	r2,108(sp)
   23444:	010001c4 	movi	r4,7
   23448:	20821616 	blt	r4,r2,23ca4 <___svfiprintf_internal_r+0xefc>
   2344c:	42000204 	addi	r8,r8,8
   23450:	0000fa06 	br	2383c <___svfiprintf_internal_r+0xa94>
   23454:	8821883a 	mov	r16,r17
   23458:	dc402103 	ldbu	r17,132(sp)
   2345c:	b811883a 	mov	r8,r23
   23460:	8c403fcc 	andi	r17,r17,255
   23464:	8803361e 	bne	r17,zero,24140 <___svfiprintf_internal_r+0x1398>
   23468:	014000f4 	movhi	r5,3
   2346c:	2964b704 	addi	r5,r5,-27940
   23470:	d9402915 	stw	r5,164(sp)
   23474:	8080080c 	andi	r2,r16,32
   23478:	103f331e 	bne	r2,zero,23148 <__alt_data_end+0xfffe4948>
   2347c:	8080040c 	andi	r2,r16,16
   23480:	1002551e 	bne	r2,zero,23dd8 <___svfiprintf_internal_r+0x1030>
   23484:	8080100c 	andi	r2,r16,64
   23488:	1002a626 	beq	r2,zero,23f24 <___svfiprintf_internal_r+0x117c>
   2348c:	d8802417 	ldw	r2,144(sp)
   23490:	0029883a 	mov	r20,zero
   23494:	1480000b 	ldhu	r18,0(r2)
   23498:	10800104 	addi	r2,r2,4
   2349c:	d8802415 	stw	r2,144(sp)
   234a0:	003f2e06 	br	2315c <__alt_data_end+0xfffe495c>
   234a4:	8821883a 	mov	r16,r17
   234a8:	dc402103 	ldbu	r17,132(sp)
   234ac:	b811883a 	mov	r8,r23
   234b0:	8c403fcc 	andi	r17,r17,255
   234b4:	88030b1e 	bne	r17,zero,240e4 <___svfiprintf_internal_r+0x133c>
   234b8:	8080080c 	andi	r2,r16,32
   234bc:	1002271e 	bne	r2,zero,23d5c <___svfiprintf_internal_r+0xfb4>
   234c0:	8080040c 	andi	r2,r16,16
   234c4:	10028e26 	beq	r2,zero,23f00 <___svfiprintf_internal_r+0x1158>
   234c8:	d8c02417 	ldw	r3,144(sp)
   234cc:	d9002617 	ldw	r4,152(sp)
   234d0:	18800017 	ldw	r2,0(r3)
   234d4:	18c00104 	addi	r3,r3,4
   234d8:	d8c02415 	stw	r3,144(sp)
   234dc:	11000015 	stw	r4,0(r2)
   234e0:	003e5306 	br	22e30 <__alt_data_end+0xfffe4630>
   234e4:	98c00007 	ldb	r3,0(r19)
   234e8:	01401b04 	movi	r5,108
   234ec:	19424f26 	beq	r3,r5,23e2c <___svfiprintf_internal_r+0x1084>
   234f0:	8c400414 	ori	r17,r17,16
   234f4:	003e7806 	br	22ed8 <__alt_data_end+0xfffe46d8>
   234f8:	8c401014 	ori	r17,r17,64
   234fc:	98c00007 	ldb	r3,0(r19)
   23500:	003e7506 	br	22ed8 <__alt_data_end+0xfffe46d8>
   23504:	8821883a 	mov	r16,r17
   23508:	dc402103 	ldbu	r17,132(sp)
   2350c:	b811883a 	mov	r8,r23
   23510:	8c403fcc 	andi	r17,r17,255
   23514:	8802fe1e 	bne	r17,zero,24110 <___svfiprintf_internal_r+0x1368>
   23518:	8080080c 	andi	r2,r16,32
   2351c:	10004626 	beq	r2,zero,23638 <___svfiprintf_internal_r+0x890>
   23520:	d9002417 	ldw	r4,144(sp)
   23524:	20800117 	ldw	r2,4(r4)
   23528:	24800017 	ldw	r18,0(r4)
   2352c:	21000204 	addi	r4,r4,8
   23530:	d9002415 	stw	r4,144(sp)
   23534:	1029883a 	mov	r20,r2
   23538:	10004a16 	blt	r2,zero,23664 <___svfiprintf_internal_r+0x8bc>
   2353c:	d9002017 	ldw	r4,128(sp)
   23540:	dd401d83 	ldbu	r21,118(sp)
   23544:	2001eb16 	blt	r4,zero,23cf4 <___svfiprintf_internal_r+0xf4c>
   23548:	00ffdfc4 	movi	r3,-129
   2354c:	9504b03a 	or	r2,r18,r20
   23550:	80e0703a 	and	r16,r16,r3
   23554:	103f3326 	beq	r2,zero,23224 <__alt_data_end+0xfffe4a24>
   23558:	a0009426 	beq	r20,zero,237ac <___svfiprintf_internal_r+0xa04>
   2355c:	dc401a04 	addi	r17,sp,104
   23560:	402f883a 	mov	r23,r8
   23564:	9009883a 	mov	r4,r18
   23568:	a00b883a 	mov	r5,r20
   2356c:	01800284 	movi	r6,10
   23570:	000f883a 	mov	r7,zero
   23574:	00251040 	call	25104 <__umoddi3>
   23578:	10800c04 	addi	r2,r2,48
   2357c:	8c7fffc4 	addi	r17,r17,-1
   23580:	9009883a 	mov	r4,r18
   23584:	a00b883a 	mov	r5,r20
   23588:	88800005 	stb	r2,0(r17)
   2358c:	01800284 	movi	r6,10
   23590:	000f883a 	mov	r7,zero
   23594:	0024b080 	call	24b08 <__udivdi3>
   23598:	1025883a 	mov	r18,r2
   2359c:	10c4b03a 	or	r2,r2,r3
   235a0:	1829883a 	mov	r20,r3
   235a4:	103fef1e 	bne	r2,zero,23564 <__alt_data_end+0xfffe4d64>
   235a8:	d9001e17 	ldw	r4,120(sp)
   235ac:	b811883a 	mov	r8,r23
   235b0:	2469c83a 	sub	r20,r4,r17
   235b4:	003f2006 	br	23238 <__alt_data_end+0xfffe4a38>
   235b8:	d8802417 	ldw	r2,144(sp)
   235bc:	8821883a 	mov	r16,r17
   235c0:	d8001d85 	stb	zero,118(sp)
   235c4:	14400017 	ldw	r17,0(r2)
   235c8:	b811883a 	mov	r8,r23
   235cc:	15c00104 	addi	r23,r2,4
   235d0:	88026c26 	beq	r17,zero,23f84 <___svfiprintf_internal_r+0x11dc>
   235d4:	d8c02017 	ldw	r3,128(sp)
   235d8:	18025f16 	blt	r3,zero,23f58 <___svfiprintf_internal_r+0x11b0>
   235dc:	180d883a 	mov	r6,r3
   235e0:	000b883a 	mov	r5,zero
   235e4:	8809883a 	mov	r4,r17
   235e8:	da002d15 	stw	r8,180(sp)
   235ec:	001263c0 	call	1263c <memchr>
   235f0:	da002d17 	ldw	r8,180(sp)
   235f4:	1002a526 	beq	r2,zero,2408c <___svfiprintf_internal_r+0x12e4>
   235f8:	1469c83a 	sub	r20,r2,r17
   235fc:	dd401d83 	ldbu	r21,118(sp)
   23600:	ddc02415 	stw	r23,144(sp)
   23604:	d8002015 	stw	zero,128(sp)
   23608:	003f0b06 	br	23238 <__alt_data_end+0xfffe4a38>
   2360c:	8c400814 	ori	r17,r17,32
   23610:	98c00007 	ldb	r3,0(r19)
   23614:	003e3006 	br	22ed8 <__alt_data_end+0xfffe46d8>
   23618:	8821883a 	mov	r16,r17
   2361c:	dc402103 	ldbu	r17,132(sp)
   23620:	b811883a 	mov	r8,r23
   23624:	8c403fcc 	andi	r17,r17,255
   23628:	8802b01e 	bne	r17,zero,240ec <___svfiprintf_internal_r+0x1344>
   2362c:	84000414 	ori	r16,r16,16
   23630:	8080080c 	andi	r2,r16,32
   23634:	103fba1e 	bne	r2,zero,23520 <__alt_data_end+0xfffe4d20>
   23638:	8080040c 	andi	r2,r16,16
   2363c:	1001df1e 	bne	r2,zero,23dbc <___svfiprintf_internal_r+0x1014>
   23640:	8080100c 	andi	r2,r16,64
   23644:	10023d26 	beq	r2,zero,23f3c <___svfiprintf_internal_r+0x1194>
   23648:	d8802417 	ldw	r2,144(sp)
   2364c:	1480000f 	ldh	r18,0(r2)
   23650:	10800104 	addi	r2,r2,4
   23654:	d8802415 	stw	r2,144(sp)
   23658:	9029d7fa 	srai	r20,r18,31
   2365c:	a005883a 	mov	r2,r20
   23660:	103fb60e 	bge	r2,zero,2353c <__alt_data_end+0xfffe4d3c>
   23664:	d9402017 	ldw	r5,128(sp)
   23668:	04a5c83a 	sub	r18,zero,r18
   2366c:	05400b44 	movi	r21,45
   23670:	9004c03a 	cmpne	r2,r18,zero
   23674:	0529c83a 	sub	r20,zero,r20
   23678:	dd401d85 	stb	r21,118(sp)
   2367c:	a0a9c83a 	sub	r20,r20,r2
   23680:	28026c16 	blt	r5,zero,24034 <___svfiprintf_internal_r+0x128c>
   23684:	00bfdfc4 	movi	r2,-129
   23688:	80a0703a 	and	r16,r16,r2
   2368c:	a03fb31e 	bne	r20,zero,2355c <__alt_data_end+0xfffe4d5c>
   23690:	00004606 	br	237ac <___svfiprintf_internal_r+0xa04>
   23694:	9839883a 	mov	fp,r19
   23698:	d8002515 	stw	zero,148(sp)
   2369c:	1c3ff404 	addi	r16,r3,-48
   236a0:	0009883a 	mov	r4,zero
   236a4:	01400284 	movi	r5,10
   236a8:	002587c0 	call	2587c <__mulsi3>
   236ac:	e0c00007 	ldb	r3,0(fp)
   236b0:	8089883a 	add	r4,r16,r2
   236b4:	9cc00044 	addi	r19,r19,1
   236b8:	1c3ff404 	addi	r16,r3,-48
   236bc:	9839883a 	mov	fp,r19
   236c0:	a43ff82e 	bgeu	r20,r16,236a4 <__alt_data_end+0xfffe4ea4>
   236c4:	d9002515 	stw	r4,148(sp)
   236c8:	18bff804 	addi	r2,r3,-32
   236cc:	90be052e 	bgeu	r18,r2,22ee4 <__alt_data_end+0xfffe46e4>
   236d0:	8821883a 	mov	r16,r17
   236d4:	dc402103 	ldbu	r17,132(sp)
   236d8:	b811883a 	mov	r8,r23
   236dc:	8c403fcc 	andi	r17,r17,255
   236e0:	88028d1e 	bne	r17,zero,24118 <___svfiprintf_internal_r+0x1370>
   236e4:	1800ea26 	beq	r3,zero,23a90 <___svfiprintf_internal_r+0xce8>
   236e8:	04800044 	movi	r18,1
   236ec:	d8c01005 	stb	r3,64(sp)
   236f0:	d8001d85 	stb	zero,118(sp)
   236f4:	9029883a 	mov	r20,r18
   236f8:	dc401004 	addi	r17,sp,64
   236fc:	003f1306 	br	2334c <__alt_data_end+0xfffe4b4c>
   23700:	8c402014 	ori	r17,r17,128
   23704:	98c00007 	ldb	r3,0(r19)
   23708:	003df306 	br	22ed8 <__alt_data_end+0xfffe46d8>
   2370c:	98c00007 	ldb	r3,0(r19)
   23710:	01000a84 	movi	r4,42
   23714:	9f000044 	addi	fp,r19,1
   23718:	19026326 	beq	r3,r4,240a8 <___svfiprintf_internal_r+0x1300>
   2371c:	1c3ff404 	addi	r16,r3,-48
   23720:	0009883a 	mov	r4,zero
   23724:	a4025636 	bltu	r20,r16,24080 <___svfiprintf_internal_r+0x12d8>
   23728:	01400284 	movi	r5,10
   2372c:	002587c0 	call	2587c <__mulsi3>
   23730:	e0c00007 	ldb	r3,0(fp)
   23734:	1409883a 	add	r4,r2,r16
   23738:	e4c00044 	addi	r19,fp,1
   2373c:	1c3ff404 	addi	r16,r3,-48
   23740:	9839883a 	mov	fp,r19
   23744:	a43ff82e 	bgeu	r20,r16,23728 <__alt_data_end+0xfffe4f28>
   23748:	20020c16 	blt	r4,zero,23f7c <___svfiprintf_internal_r+0x11d4>
   2374c:	d9002015 	stw	r4,128(sp)
   23750:	003de206 	br	22edc <__alt_data_end+0xfffe46dc>
   23754:	8821883a 	mov	r16,r17
   23758:	dc402103 	ldbu	r17,132(sp)
   2375c:	b811883a 	mov	r8,r23
   23760:	8c403fcc 	andi	r17,r17,255
   23764:	8802721e 	bne	r17,zero,24130 <___svfiprintf_internal_r+0x1388>
   23768:	84000414 	ori	r16,r16,16
   2376c:	8080080c 	andi	r2,r16,32
   23770:	103e9f1e 	bne	r2,zero,231f0 <__alt_data_end+0xfffe49f0>
   23774:	8080040c 	andi	r2,r16,16
   23778:	10015326 	beq	r2,zero,23cc8 <___svfiprintf_internal_r+0xf20>
   2377c:	d8c02417 	ldw	r3,144(sp)
   23780:	d9002017 	ldw	r4,128(sp)
   23784:	d8001d85 	stb	zero,118(sp)
   23788:	18800104 	addi	r2,r3,4
   2378c:	1c800017 	ldw	r18,0(r3)
   23790:	0029883a 	mov	r20,zero
   23794:	20015516 	blt	r4,zero,23cec <___svfiprintf_internal_r+0xf44>
   23798:	00ffdfc4 	movi	r3,-129
   2379c:	d8802415 	stw	r2,144(sp)
   237a0:	80e0703a 	and	r16,r16,r3
   237a4:	002b883a 	mov	r21,zero
   237a8:	903e9e26 	beq	r18,zero,23224 <__alt_data_end+0xfffe4a24>
   237ac:	00800244 	movi	r2,9
   237b0:	14bf6a36 	bltu	r2,r18,2355c <__alt_data_end+0xfffe4d5c>
   237b4:	94800c04 	addi	r18,r18,48
   237b8:	dc8019c5 	stb	r18,103(sp)
   237bc:	dd002c17 	ldw	r20,176(sp)
   237c0:	dc4019c4 	addi	r17,sp,103
   237c4:	003e9c06 	br	23238 <__alt_data_end+0xfffe4a38>
   237c8:	8821883a 	mov	r16,r17
   237cc:	dc402103 	ldbu	r17,132(sp)
   237d0:	b811883a 	mov	r8,r23
   237d4:	8c403fcc 	andi	r17,r17,255
   237d8:	8802571e 	bne	r17,zero,24138 <___svfiprintf_internal_r+0x1390>
   237dc:	84000414 	ori	r16,r16,16
   237e0:	8080080c 	andi	r2,r16,32
   237e4:	103ea91e 	bne	r2,zero,2328c <__alt_data_end+0xfffe4a8c>
   237e8:	8080040c 	andi	r2,r16,16
   237ec:	10018026 	beq	r2,zero,23df0 <___svfiprintf_internal_r+0x1048>
   237f0:	d9402417 	ldw	r5,144(sp)
   237f4:	d8c02017 	ldw	r3,128(sp)
   237f8:	d8001d85 	stb	zero,118(sp)
   237fc:	28800104 	addi	r2,r5,4
   23800:	2c800017 	ldw	r18,0(r5)
   23804:	0029883a 	mov	r20,zero
   23808:	18018216 	blt	r3,zero,23e14 <___svfiprintf_internal_r+0x106c>
   2380c:	00ffdfc4 	movi	r3,-129
   23810:	d8802415 	stw	r2,144(sp)
   23814:	80e0703a 	and	r16,r16,r3
   23818:	903ea81e 	bne	r18,zero,232bc <__alt_data_end+0xfffe4abc>
   2381c:	d8802017 	ldw	r2,128(sp)
   23820:	002b883a 	mov	r21,zero
   23824:	1001f226 	beq	r2,zero,23ff0 <___svfiprintf_internal_r+0x1248>
   23828:	0025883a 	mov	r18,zero
   2382c:	0029883a 	mov	r20,zero
   23830:	003ea306 	br	232c0 <__alt_data_end+0xfffe4ac0>
   23834:	d8c01c17 	ldw	r3,112(sp)
   23838:	d8801b17 	ldw	r2,108(sp)
   2383c:	d9001d87 	ldb	r4,118(sp)
   23840:	20000b26 	beq	r4,zero,23870 <___svfiprintf_internal_r+0xac8>
   23844:	d9001d84 	addi	r4,sp,118
   23848:	18c00044 	addi	r3,r3,1
   2384c:	10800044 	addi	r2,r2,1
   23850:	41000015 	stw	r4,0(r8)
   23854:	01000044 	movi	r4,1
   23858:	41000115 	stw	r4,4(r8)
   2385c:	d8c01c15 	stw	r3,112(sp)
   23860:	d8801b15 	stw	r2,108(sp)
   23864:	010001c4 	movi	r4,7
   23868:	2080f316 	blt	r4,r2,23c38 <___svfiprintf_internal_r+0xe90>
   2386c:	42000204 	addi	r8,r8,8
   23870:	d9402117 	ldw	r5,132(sp)
   23874:	28000b26 	beq	r5,zero,238a4 <___svfiprintf_internal_r+0xafc>
   23878:	d9001d04 	addi	r4,sp,116
   2387c:	18c00084 	addi	r3,r3,2
   23880:	10800044 	addi	r2,r2,1
   23884:	41000015 	stw	r4,0(r8)
   23888:	01000084 	movi	r4,2
   2388c:	41000115 	stw	r4,4(r8)
   23890:	d8c01c15 	stw	r3,112(sp)
   23894:	d8801b15 	stw	r2,108(sp)
   23898:	010001c4 	movi	r4,7
   2389c:	2080ef16 	blt	r4,r2,23c5c <___svfiprintf_internal_r+0xeb4>
   238a0:	42000204 	addi	r8,r8,8
   238a4:	d9402217 	ldw	r5,136(sp)
   238a8:	01002004 	movi	r4,128
   238ac:	29008f26 	beq	r5,r4,23aec <___svfiprintf_internal_r+0xd44>
   238b0:	d9002017 	ldw	r4,128(sp)
   238b4:	252fc83a 	sub	r23,r4,r20
   238b8:	05c0310e 	bge	zero,r23,23980 <___svfiprintf_internal_r+0xbd8>
   238bc:	07000404 	movi	fp,16
   238c0:	e5c17d0e 	bge	fp,r23,23eb8 <___svfiprintf_internal_r+0x1110>
   238c4:	010000f4 	movhi	r4,3
   238c8:	21262c84 	addi	r4,r4,-26446
   238cc:	dc002015 	stw	r16,128(sp)
   238d0:	dc402215 	stw	r17,136(sp)
   238d4:	d9002115 	stw	r4,132(sp)
   238d8:	b823883a 	mov	r17,r23
   238dc:	054001c4 	movi	r21,7
   238e0:	982f883a 	mov	r23,r19
   238e4:	dc002717 	ldw	r16,156(sp)
   238e8:	9027883a 	mov	r19,r18
   238ec:	dc802317 	ldw	r18,140(sp)
   238f0:	00000306 	br	23900 <___svfiprintf_internal_r+0xb58>
   238f4:	8c7ffc04 	addi	r17,r17,-16
   238f8:	42000204 	addi	r8,r8,8
   238fc:	e440110e 	bge	fp,r17,23944 <___svfiprintf_internal_r+0xb9c>
   23900:	18c00404 	addi	r3,r3,16
   23904:	10800044 	addi	r2,r2,1
   23908:	45800015 	stw	r22,0(r8)
   2390c:	47000115 	stw	fp,4(r8)
   23910:	d8c01c15 	stw	r3,112(sp)
   23914:	d8801b15 	stw	r2,108(sp)
   23918:	a8bff60e 	bge	r21,r2,238f4 <__alt_data_end+0xfffe50f4>
   2391c:	d9801a04 	addi	r6,sp,104
   23920:	900b883a 	mov	r5,r18
   23924:	8009883a 	mov	r4,r16
   23928:	0022bd80 	call	22bd8 <__ssprint_r>
   2392c:	10005e1e 	bne	r2,zero,23aa8 <___svfiprintf_internal_r+0xd00>
   23930:	8c7ffc04 	addi	r17,r17,-16
   23934:	d8c01c17 	ldw	r3,112(sp)
   23938:	d8801b17 	ldw	r2,108(sp)
   2393c:	d811883a 	mov	r8,sp
   23940:	e47fef16 	blt	fp,r17,23900 <__alt_data_end+0xfffe5100>
   23944:	9825883a 	mov	r18,r19
   23948:	dc002017 	ldw	r16,128(sp)
   2394c:	b827883a 	mov	r19,r23
   23950:	882f883a 	mov	r23,r17
   23954:	dc402217 	ldw	r17,136(sp)
   23958:	d9402117 	ldw	r5,132(sp)
   2395c:	1dc7883a 	add	r3,r3,r23
   23960:	10800044 	addi	r2,r2,1
   23964:	41400015 	stw	r5,0(r8)
   23968:	45c00115 	stw	r23,4(r8)
   2396c:	d8c01c15 	stw	r3,112(sp)
   23970:	d8801b15 	stw	r2,108(sp)
   23974:	010001c4 	movi	r4,7
   23978:	2080a616 	blt	r4,r2,23c14 <___svfiprintf_internal_r+0xe6c>
   2397c:	42000204 	addi	r8,r8,8
   23980:	a0c7883a 	add	r3,r20,r3
   23984:	10800044 	addi	r2,r2,1
   23988:	44400015 	stw	r17,0(r8)
   2398c:	45000115 	stw	r20,4(r8)
   23990:	d8c01c15 	stw	r3,112(sp)
   23994:	d8801b15 	stw	r2,108(sp)
   23998:	010001c4 	movi	r4,7
   2399c:	20808816 	blt	r4,r2,23bc0 <___svfiprintf_internal_r+0xe18>
   239a0:	42000204 	addi	r8,r8,8
   239a4:	8400010c 	andi	r16,r16,4
   239a8:	80002c26 	beq	r16,zero,23a5c <___svfiprintf_internal_r+0xcb4>
   239ac:	d8802517 	ldw	r2,148(sp)
   239b0:	14a1c83a 	sub	r16,r2,r18
   239b4:	0400290e 	bge	zero,r16,23a5c <___svfiprintf_internal_r+0xcb4>
   239b8:	04400404 	movi	r17,16
   239bc:	d8801b17 	ldw	r2,108(sp)
   239c0:	8c01a70e 	bge	r17,r16,24060 <___svfiprintf_internal_r+0x12b8>
   239c4:	014000f4 	movhi	r5,3
   239c8:	29663084 	addi	r5,r5,-26430
   239cc:	d9402815 	stw	r5,160(sp)
   239d0:	050001c4 	movi	r20,7
   239d4:	dd402717 	ldw	r21,156(sp)
   239d8:	ddc02317 	ldw	r23,140(sp)
   239dc:	00000306 	br	239ec <___svfiprintf_internal_r+0xc44>
   239e0:	843ffc04 	addi	r16,r16,-16
   239e4:	42000204 	addi	r8,r8,8
   239e8:	8c00130e 	bge	r17,r16,23a38 <___svfiprintf_internal_r+0xc90>
   239ec:	010000f4 	movhi	r4,3
   239f0:	18c00404 	addi	r3,r3,16
   239f4:	10800044 	addi	r2,r2,1
   239f8:	21263084 	addi	r4,r4,-26430
   239fc:	41000015 	stw	r4,0(r8)
   23a00:	44400115 	stw	r17,4(r8)
   23a04:	d8c01c15 	stw	r3,112(sp)
   23a08:	d8801b15 	stw	r2,108(sp)
   23a0c:	a0bff40e 	bge	r20,r2,239e0 <__alt_data_end+0xfffe51e0>
   23a10:	d9801a04 	addi	r6,sp,104
   23a14:	b80b883a 	mov	r5,r23
   23a18:	a809883a 	mov	r4,r21
   23a1c:	0022bd80 	call	22bd8 <__ssprint_r>
   23a20:	1000211e 	bne	r2,zero,23aa8 <___svfiprintf_internal_r+0xd00>
   23a24:	843ffc04 	addi	r16,r16,-16
   23a28:	d8c01c17 	ldw	r3,112(sp)
   23a2c:	d8801b17 	ldw	r2,108(sp)
   23a30:	d811883a 	mov	r8,sp
   23a34:	8c3fed16 	blt	r17,r16,239ec <__alt_data_end+0xfffe51ec>
   23a38:	d9402817 	ldw	r5,160(sp)
   23a3c:	1c07883a 	add	r3,r3,r16
   23a40:	10800044 	addi	r2,r2,1
   23a44:	41400015 	stw	r5,0(r8)
   23a48:	44000115 	stw	r16,4(r8)
   23a4c:	d8c01c15 	stw	r3,112(sp)
   23a50:	d8801b15 	stw	r2,108(sp)
   23a54:	010001c4 	movi	r4,7
   23a58:	2080b516 	blt	r4,r2,23d30 <___svfiprintf_internal_r+0xf88>
   23a5c:	d8802517 	ldw	r2,148(sp)
   23a60:	1480010e 	bge	r2,r18,23a68 <___svfiprintf_internal_r+0xcc0>
   23a64:	9005883a 	mov	r2,r18
   23a68:	d9002617 	ldw	r4,152(sp)
   23a6c:	2089883a 	add	r4,r4,r2
   23a70:	d9002615 	stw	r4,152(sp)
   23a74:	18005a1e 	bne	r3,zero,23be0 <___svfiprintf_internal_r+0xe38>
   23a78:	98800007 	ldb	r2,0(r19)
   23a7c:	d8001b15 	stw	zero,108(sp)
   23a80:	d811883a 	mov	r8,sp
   23a84:	103cec1e 	bne	r2,zero,22e38 <__alt_data_end+0xfffe4638>
   23a88:	9825883a 	mov	r18,r19
   23a8c:	003d0206 	br	22e98 <__alt_data_end+0xfffe4698>
   23a90:	d8801c17 	ldw	r2,112(sp)
   23a94:	10000426 	beq	r2,zero,23aa8 <___svfiprintf_internal_r+0xd00>
   23a98:	d9402317 	ldw	r5,140(sp)
   23a9c:	d9002717 	ldw	r4,156(sp)
   23aa0:	d9801a04 	addi	r6,sp,104
   23aa4:	0022bd80 	call	22bd8 <__ssprint_r>
   23aa8:	d9402317 	ldw	r5,140(sp)
   23aac:	d8802617 	ldw	r2,152(sp)
   23ab0:	28c0030b 	ldhu	r3,12(r5)
   23ab4:	18c0100c 	andi	r3,r3,64
   23ab8:	18015c1e 	bne	r3,zero,2402c <___svfiprintf_internal_r+0x1284>
   23abc:	dfc03717 	ldw	ra,220(sp)
   23ac0:	df003617 	ldw	fp,216(sp)
   23ac4:	ddc03517 	ldw	r23,212(sp)
   23ac8:	dd803417 	ldw	r22,208(sp)
   23acc:	dd403317 	ldw	r21,204(sp)
   23ad0:	dd003217 	ldw	r20,200(sp)
   23ad4:	dcc03117 	ldw	r19,196(sp)
   23ad8:	dc803017 	ldw	r18,192(sp)
   23adc:	dc402f17 	ldw	r17,188(sp)
   23ae0:	dc002e17 	ldw	r16,184(sp)
   23ae4:	dec03804 	addi	sp,sp,224
   23ae8:	f800283a 	ret
   23aec:	d9002517 	ldw	r4,148(sp)
   23af0:	24afc83a 	sub	r23,r4,r18
   23af4:	05ff6e0e 	bge	zero,r23,238b0 <__alt_data_end+0xfffe50b0>
   23af8:	07000404 	movi	fp,16
   23afc:	e5c15c0e 	bge	fp,r23,24070 <___svfiprintf_internal_r+0x12c8>
   23b00:	010000f4 	movhi	r4,3
   23b04:	21262c84 	addi	r4,r4,-26446
   23b08:	dc002215 	stw	r16,136(sp)
   23b0c:	dc402815 	stw	r17,160(sp)
   23b10:	d9002115 	stw	r4,132(sp)
   23b14:	b823883a 	mov	r17,r23
   23b18:	054001c4 	movi	r21,7
   23b1c:	982f883a 	mov	r23,r19
   23b20:	dc002717 	ldw	r16,156(sp)
   23b24:	9027883a 	mov	r19,r18
   23b28:	dc802317 	ldw	r18,140(sp)
   23b2c:	00000306 	br	23b3c <___svfiprintf_internal_r+0xd94>
   23b30:	8c7ffc04 	addi	r17,r17,-16
   23b34:	42000204 	addi	r8,r8,8
   23b38:	e440110e 	bge	fp,r17,23b80 <___svfiprintf_internal_r+0xdd8>
   23b3c:	18c00404 	addi	r3,r3,16
   23b40:	10800044 	addi	r2,r2,1
   23b44:	45800015 	stw	r22,0(r8)
   23b48:	47000115 	stw	fp,4(r8)
   23b4c:	d8c01c15 	stw	r3,112(sp)
   23b50:	d8801b15 	stw	r2,108(sp)
   23b54:	a8bff60e 	bge	r21,r2,23b30 <__alt_data_end+0xfffe5330>
   23b58:	d9801a04 	addi	r6,sp,104
   23b5c:	900b883a 	mov	r5,r18
   23b60:	8009883a 	mov	r4,r16
   23b64:	0022bd80 	call	22bd8 <__ssprint_r>
   23b68:	103fcf1e 	bne	r2,zero,23aa8 <__alt_data_end+0xfffe52a8>
   23b6c:	8c7ffc04 	addi	r17,r17,-16
   23b70:	d8c01c17 	ldw	r3,112(sp)
   23b74:	d8801b17 	ldw	r2,108(sp)
   23b78:	d811883a 	mov	r8,sp
   23b7c:	e47fef16 	blt	fp,r17,23b3c <__alt_data_end+0xfffe533c>
   23b80:	9825883a 	mov	r18,r19
   23b84:	dc002217 	ldw	r16,136(sp)
   23b88:	b827883a 	mov	r19,r23
   23b8c:	882f883a 	mov	r23,r17
   23b90:	dc402817 	ldw	r17,160(sp)
   23b94:	d9402117 	ldw	r5,132(sp)
   23b98:	1dc7883a 	add	r3,r3,r23
   23b9c:	10800044 	addi	r2,r2,1
   23ba0:	41400015 	stw	r5,0(r8)
   23ba4:	45c00115 	stw	r23,4(r8)
   23ba8:	d8c01c15 	stw	r3,112(sp)
   23bac:	d8801b15 	stw	r2,108(sp)
   23bb0:	010001c4 	movi	r4,7
   23bb4:	2080b716 	blt	r4,r2,23e94 <___svfiprintf_internal_r+0x10ec>
   23bb8:	42000204 	addi	r8,r8,8
   23bbc:	003f3c06 	br	238b0 <__alt_data_end+0xfffe50b0>
   23bc0:	d9402317 	ldw	r5,140(sp)
   23bc4:	d9002717 	ldw	r4,156(sp)
   23bc8:	d9801a04 	addi	r6,sp,104
   23bcc:	0022bd80 	call	22bd8 <__ssprint_r>
   23bd0:	103fb51e 	bne	r2,zero,23aa8 <__alt_data_end+0xfffe52a8>
   23bd4:	d8c01c17 	ldw	r3,112(sp)
   23bd8:	d811883a 	mov	r8,sp
   23bdc:	003f7106 	br	239a4 <__alt_data_end+0xfffe51a4>
   23be0:	d9402317 	ldw	r5,140(sp)
   23be4:	d9002717 	ldw	r4,156(sp)
   23be8:	d9801a04 	addi	r6,sp,104
   23bec:	0022bd80 	call	22bd8 <__ssprint_r>
   23bf0:	103fa126 	beq	r2,zero,23a78 <__alt_data_end+0xfffe5278>
   23bf4:	003fac06 	br	23aa8 <__alt_data_end+0xfffe52a8>
   23bf8:	d9402317 	ldw	r5,140(sp)
   23bfc:	d9002717 	ldw	r4,156(sp)
   23c00:	d9801a04 	addi	r6,sp,104
   23c04:	0022bd80 	call	22bd8 <__ssprint_r>
   23c08:	103fa71e 	bne	r2,zero,23aa8 <__alt_data_end+0xfffe52a8>
   23c0c:	d811883a 	mov	r8,sp
   23c10:	003c9e06 	br	22e8c <__alt_data_end+0xfffe468c>
   23c14:	d9402317 	ldw	r5,140(sp)
   23c18:	d9002717 	ldw	r4,156(sp)
   23c1c:	d9801a04 	addi	r6,sp,104
   23c20:	0022bd80 	call	22bd8 <__ssprint_r>
   23c24:	103fa01e 	bne	r2,zero,23aa8 <__alt_data_end+0xfffe52a8>
   23c28:	d8c01c17 	ldw	r3,112(sp)
   23c2c:	d8801b17 	ldw	r2,108(sp)
   23c30:	d811883a 	mov	r8,sp
   23c34:	003f5206 	br	23980 <__alt_data_end+0xfffe5180>
   23c38:	d9402317 	ldw	r5,140(sp)
   23c3c:	d9002717 	ldw	r4,156(sp)
   23c40:	d9801a04 	addi	r6,sp,104
   23c44:	0022bd80 	call	22bd8 <__ssprint_r>
   23c48:	103f971e 	bne	r2,zero,23aa8 <__alt_data_end+0xfffe52a8>
   23c4c:	d8c01c17 	ldw	r3,112(sp)
   23c50:	d8801b17 	ldw	r2,108(sp)
   23c54:	d811883a 	mov	r8,sp
   23c58:	003f0506 	br	23870 <__alt_data_end+0xfffe5070>
   23c5c:	d9402317 	ldw	r5,140(sp)
   23c60:	d9002717 	ldw	r4,156(sp)
   23c64:	d9801a04 	addi	r6,sp,104
   23c68:	0022bd80 	call	22bd8 <__ssprint_r>
   23c6c:	103f8e1e 	bne	r2,zero,23aa8 <__alt_data_end+0xfffe52a8>
   23c70:	d8c01c17 	ldw	r3,112(sp)
   23c74:	d8801b17 	ldw	r2,108(sp)
   23c78:	d811883a 	mov	r8,sp
   23c7c:	003f0906 	br	238a4 <__alt_data_end+0xfffe50a4>
   23c80:	d9402017 	ldw	r5,128(sp)
   23c84:	d8001d85 	stb	zero,118(sp)
   23c88:	28007716 	blt	r5,zero,23e68 <___svfiprintf_internal_r+0x10c0>
   23c8c:	00ffdfc4 	movi	r3,-129
   23c90:	9504b03a 	or	r2,r18,r20
   23c94:	80e0703a 	and	r16,r16,r3
   23c98:	103d3926 	beq	r2,zero,23180 <__alt_data_end+0xfffe4980>
   23c9c:	002b883a 	mov	r21,zero
   23ca0:	003d3c06 	br	23194 <__alt_data_end+0xfffe4994>
   23ca4:	d9402317 	ldw	r5,140(sp)
   23ca8:	d9002717 	ldw	r4,156(sp)
   23cac:	d9801a04 	addi	r6,sp,104
   23cb0:	0022bd80 	call	22bd8 <__ssprint_r>
   23cb4:	103f7c1e 	bne	r2,zero,23aa8 <__alt_data_end+0xfffe52a8>
   23cb8:	d8c01c17 	ldw	r3,112(sp)
   23cbc:	d8801b17 	ldw	r2,108(sp)
   23cc0:	d811883a 	mov	r8,sp
   23cc4:	003edd06 	br	2383c <__alt_data_end+0xfffe503c>
   23cc8:	8080100c 	andi	r2,r16,64
   23ccc:	d8001d85 	stb	zero,118(sp)
   23cd0:	10008426 	beq	r2,zero,23ee4 <___svfiprintf_internal_r+0x113c>
   23cd4:	d9402417 	ldw	r5,144(sp)
   23cd8:	d8c02017 	ldw	r3,128(sp)
   23cdc:	0029883a 	mov	r20,zero
   23ce0:	28800104 	addi	r2,r5,4
   23ce4:	2c80000b 	ldhu	r18,0(r5)
   23ce8:	183eab0e 	bge	r3,zero,23798 <__alt_data_end+0xfffe4f98>
   23cec:	d8802415 	stw	r2,144(sp)
   23cf0:	002b883a 	mov	r21,zero
   23cf4:	9504b03a 	or	r2,r18,r20
   23cf8:	103e171e 	bne	r2,zero,23558 <__alt_data_end+0xfffe4d58>
   23cfc:	00800044 	movi	r2,1
   23d00:	10803fcc 	andi	r2,r2,255
   23d04:	00c00044 	movi	r3,1
   23d08:	10c05c26 	beq	r2,r3,23e7c <___svfiprintf_internal_r+0x10d4>
   23d0c:	00c00084 	movi	r3,2
   23d10:	10fd1e26 	beq	r2,r3,2318c <__alt_data_end+0xfffe498c>
   23d14:	003ec406 	br	23828 <__alt_data_end+0xfffe5028>
   23d18:	d9401e17 	ldw	r5,120(sp)
   23d1c:	2c69c83a 	sub	r20,r5,r17
   23d20:	003d4506 	br	23238 <__alt_data_end+0xfffe4a38>
   23d24:	d8802415 	stw	r2,144(sp)
   23d28:	98c00007 	ldb	r3,0(r19)
   23d2c:	003c6a06 	br	22ed8 <__alt_data_end+0xfffe46d8>
   23d30:	d9402317 	ldw	r5,140(sp)
   23d34:	d9002717 	ldw	r4,156(sp)
   23d38:	d9801a04 	addi	r6,sp,104
   23d3c:	0022bd80 	call	22bd8 <__ssprint_r>
   23d40:	103f591e 	bne	r2,zero,23aa8 <__alt_data_end+0xfffe52a8>
   23d44:	d8c01c17 	ldw	r3,112(sp)
   23d48:	003f4406 	br	23a5c <__alt_data_end+0xfffe525c>
   23d4c:	014000f4 	movhi	r5,3
   23d50:	2964bc04 	addi	r5,r5,-27920
   23d54:	d9402915 	stw	r5,164(sp)
   23d58:	003d0906 	br	23180 <__alt_data_end+0xfffe4980>
   23d5c:	d8c02417 	ldw	r3,144(sp)
   23d60:	d9002617 	ldw	r4,152(sp)
   23d64:	d9402417 	ldw	r5,144(sp)
   23d68:	18800017 	ldw	r2,0(r3)
   23d6c:	2007d7fa 	srai	r3,r4,31
   23d70:	29400104 	addi	r5,r5,4
   23d74:	d9402415 	stw	r5,144(sp)
   23d78:	11000015 	stw	r4,0(r2)
   23d7c:	10c00115 	stw	r3,4(r2)
   23d80:	003c2b06 	br	22e30 <__alt_data_end+0xfffe4630>
   23d84:	d8c01d45 	stb	r3,117(sp)
   23d88:	d8c02017 	ldw	r3,128(sp)
   23d8c:	00800c04 	movi	r2,48
   23d90:	d8801d05 	stb	r2,116(sp)
   23d94:	d8001d85 	stb	zero,118(sp)
   23d98:	80800094 	ori	r2,r16,2
   23d9c:	1800ac16 	blt	r3,zero,24050 <___svfiprintf_internal_r+0x12a8>
   23da0:	00bfdfc4 	movi	r2,-129
   23da4:	80a0703a 	and	r16,r16,r2
   23da8:	84000094 	ori	r16,r16,2
   23dac:	002b883a 	mov	r21,zero
   23db0:	003cf806 	br	23194 <__alt_data_end+0xfffe4994>
   23db4:	98c00007 	ldb	r3,0(r19)
   23db8:	003c4706 	br	22ed8 <__alt_data_end+0xfffe46d8>
   23dbc:	d9402417 	ldw	r5,144(sp)
   23dc0:	2c800017 	ldw	r18,0(r5)
   23dc4:	29400104 	addi	r5,r5,4
   23dc8:	d9402415 	stw	r5,144(sp)
   23dcc:	9029d7fa 	srai	r20,r18,31
   23dd0:	a005883a 	mov	r2,r20
   23dd4:	003dd806 	br	23538 <__alt_data_end+0xfffe4d38>
   23dd8:	d9402417 	ldw	r5,144(sp)
   23ddc:	0029883a 	mov	r20,zero
   23de0:	2c800017 	ldw	r18,0(r5)
   23de4:	29400104 	addi	r5,r5,4
   23de8:	d9402415 	stw	r5,144(sp)
   23dec:	003cdb06 	br	2315c <__alt_data_end+0xfffe495c>
   23df0:	8080100c 	andi	r2,r16,64
   23df4:	d8001d85 	stb	zero,118(sp)
   23df8:	10003326 	beq	r2,zero,23ec8 <___svfiprintf_internal_r+0x1120>
   23dfc:	d9002417 	ldw	r4,144(sp)
   23e00:	d9402017 	ldw	r5,128(sp)
   23e04:	0029883a 	mov	r20,zero
   23e08:	20800104 	addi	r2,r4,4
   23e0c:	2480000b 	ldhu	r18,0(r4)
   23e10:	283e7e0e 	bge	r5,zero,2380c <__alt_data_end+0xfffe500c>
   23e14:	9506b03a 	or	r3,r18,r20
   23e18:	d8802415 	stw	r2,144(sp)
   23e1c:	183d271e 	bne	r3,zero,232bc <__alt_data_end+0xfffe4abc>
   23e20:	002b883a 	mov	r21,zero
   23e24:	0005883a 	mov	r2,zero
   23e28:	003fb506 	br	23d00 <__alt_data_end+0xfffe5500>
   23e2c:	98c00043 	ldbu	r3,1(r19)
   23e30:	8c400814 	ori	r17,r17,32
   23e34:	9cc00044 	addi	r19,r19,1
   23e38:	18c03fcc 	andi	r3,r3,255
   23e3c:	18c0201c 	xori	r3,r3,128
   23e40:	18ffe004 	addi	r3,r3,-128
   23e44:	003c2406 	br	22ed8 <__alt_data_end+0xfffe46d8>
   23e48:	d8c02415 	stw	r3,144(sp)
   23e4c:	002b883a 	mov	r21,zero
   23e50:	003fa806 	br	23cf4 <__alt_data_end+0xfffe54f4>
   23e54:	010000f4 	movhi	r4,3
   23e58:	2124bc04 	addi	r4,r4,-27920
   23e5c:	d9002915 	stw	r4,164(sp)
   23e60:	d8c02415 	stw	r3,144(sp)
   23e64:	1021883a 	mov	r16,r2
   23e68:	9504b03a 	or	r2,r18,r20
   23e6c:	103f8b1e 	bne	r2,zero,23c9c <__alt_data_end+0xfffe549c>
   23e70:	002b883a 	mov	r21,zero
   23e74:	00800084 	movi	r2,2
   23e78:	003fa106 	br	23d00 <__alt_data_end+0xfffe5500>
   23e7c:	0025883a 	mov	r18,zero
   23e80:	94800c04 	addi	r18,r18,48
   23e84:	dc8019c5 	stb	r18,103(sp)
   23e88:	dd002c17 	ldw	r20,176(sp)
   23e8c:	dc4019c4 	addi	r17,sp,103
   23e90:	003ce906 	br	23238 <__alt_data_end+0xfffe4a38>
   23e94:	d9402317 	ldw	r5,140(sp)
   23e98:	d9002717 	ldw	r4,156(sp)
   23e9c:	d9801a04 	addi	r6,sp,104
   23ea0:	0022bd80 	call	22bd8 <__ssprint_r>
   23ea4:	103f001e 	bne	r2,zero,23aa8 <__alt_data_end+0xfffe52a8>
   23ea8:	d8c01c17 	ldw	r3,112(sp)
   23eac:	d8801b17 	ldw	r2,108(sp)
   23eb0:	d811883a 	mov	r8,sp
   23eb4:	003e7e06 	br	238b0 <__alt_data_end+0xfffe50b0>
   23eb8:	014000f4 	movhi	r5,3
   23ebc:	29662c84 	addi	r5,r5,-26446
   23ec0:	d9402115 	stw	r5,132(sp)
   23ec4:	003ea406 	br	23958 <__alt_data_end+0xfffe5158>
   23ec8:	d8c02417 	ldw	r3,144(sp)
   23ecc:	d9002017 	ldw	r4,128(sp)
   23ed0:	0029883a 	mov	r20,zero
   23ed4:	18800104 	addi	r2,r3,4
   23ed8:	1c800017 	ldw	r18,0(r3)
   23edc:	203e4b0e 	bge	r4,zero,2380c <__alt_data_end+0xfffe500c>
   23ee0:	003fcc06 	br	23e14 <__alt_data_end+0xfffe5614>
   23ee4:	d9002417 	ldw	r4,144(sp)
   23ee8:	d9402017 	ldw	r5,128(sp)
   23eec:	0029883a 	mov	r20,zero
   23ef0:	20800104 	addi	r2,r4,4
   23ef4:	24800017 	ldw	r18,0(r4)
   23ef8:	283e270e 	bge	r5,zero,23798 <__alt_data_end+0xfffe4f98>
   23efc:	003f7b06 	br	23cec <__alt_data_end+0xfffe54ec>
   23f00:	8400100c 	andi	r16,r16,64
   23f04:	80003326 	beq	r16,zero,23fd4 <___svfiprintf_internal_r+0x122c>
   23f08:	d9402417 	ldw	r5,144(sp)
   23f0c:	d8c02617 	ldw	r3,152(sp)
   23f10:	28800017 	ldw	r2,0(r5)
   23f14:	29400104 	addi	r5,r5,4
   23f18:	d9402415 	stw	r5,144(sp)
   23f1c:	10c0000d 	sth	r3,0(r2)
   23f20:	003bc306 	br	22e30 <__alt_data_end+0xfffe4630>
   23f24:	d9002417 	ldw	r4,144(sp)
   23f28:	0029883a 	mov	r20,zero
   23f2c:	24800017 	ldw	r18,0(r4)
   23f30:	21000104 	addi	r4,r4,4
   23f34:	d9002415 	stw	r4,144(sp)
   23f38:	003c8806 	br	2315c <__alt_data_end+0xfffe495c>
   23f3c:	d8c02417 	ldw	r3,144(sp)
   23f40:	1c800017 	ldw	r18,0(r3)
   23f44:	18c00104 	addi	r3,r3,4
   23f48:	d8c02415 	stw	r3,144(sp)
   23f4c:	9029d7fa 	srai	r20,r18,31
   23f50:	a005883a 	mov	r2,r20
   23f54:	003d7806 	br	23538 <__alt_data_end+0xfffe4d38>
   23f58:	8809883a 	mov	r4,r17
   23f5c:	da002d15 	stw	r8,180(sp)
   23f60:	00137600 	call	13760 <strlen>
   23f64:	1029883a 	mov	r20,r2
   23f68:	dd401d83 	ldbu	r21,118(sp)
   23f6c:	ddc02415 	stw	r23,144(sp)
   23f70:	d8002015 	stw	zero,128(sp)
   23f74:	da002d17 	ldw	r8,180(sp)
   23f78:	003caf06 	br	23238 <__alt_data_end+0xfffe4a38>
   23f7c:	013fffc4 	movi	r4,-1
   23f80:	003df206 	br	2374c <__alt_data_end+0xfffe4f4c>
   23f84:	dd002017 	ldw	r20,128(sp)
   23f88:	00800184 	movi	r2,6
   23f8c:	1500012e 	bgeu	r2,r20,23f94 <___svfiprintf_internal_r+0x11ec>
   23f90:	1029883a 	mov	r20,r2
   23f94:	a025883a 	mov	r18,r20
   23f98:	a0004116 	blt	r20,zero,240a0 <___svfiprintf_internal_r+0x12f8>
   23f9c:	044000f4 	movhi	r17,3
   23fa0:	ddc02415 	stw	r23,144(sp)
   23fa4:	8c64c104 	addi	r17,r17,-27900
   23fa8:	003ce806 	br	2334c <__alt_data_end+0xfffe4b4c>
   23fac:	04001004 	movi	r16,64
   23fb0:	800b883a 	mov	r5,r16
   23fb4:	0011e300 	call	11e30 <_malloc_r>
   23fb8:	d8c02317 	ldw	r3,140(sp)
   23fbc:	18800015 	stw	r2,0(r3)
   23fc0:	18800415 	stw	r2,16(r3)
   23fc4:	10004d26 	beq	r2,zero,240fc <___svfiprintf_internal_r+0x1354>
   23fc8:	d9402317 	ldw	r5,140(sp)
   23fcc:	2c000515 	stw	r16,20(r5)
   23fd0:	003b8906 	br	22df8 <__alt_data_end+0xfffe45f8>
   23fd4:	d9002417 	ldw	r4,144(sp)
   23fd8:	d9402617 	ldw	r5,152(sp)
   23fdc:	20800017 	ldw	r2,0(r4)
   23fe0:	21000104 	addi	r4,r4,4
   23fe4:	d9002415 	stw	r4,144(sp)
   23fe8:	11400015 	stw	r5,0(r2)
   23fec:	003b9006 	br	22e30 <__alt_data_end+0xfffe4630>
   23ff0:	8080004c 	andi	r2,r16,1
   23ff4:	002b883a 	mov	r21,zero
   23ff8:	10000526 	beq	r2,zero,24010 <___svfiprintf_internal_r+0x1268>
   23ffc:	00800c04 	movi	r2,48
   24000:	d88019c5 	stb	r2,103(sp)
   24004:	dd002c17 	ldw	r20,176(sp)
   24008:	dc4019c4 	addi	r17,sp,103
   2400c:	003c8a06 	br	23238 <__alt_data_end+0xfffe4a38>
   24010:	0029883a 	mov	r20,zero
   24014:	dc401a04 	addi	r17,sp,104
   24018:	003c8706 	br	23238 <__alt_data_end+0xfffe4a38>
   2401c:	014000f4 	movhi	r5,3
   24020:	29663084 	addi	r5,r5,-26430
   24024:	d9402815 	stw	r5,160(sp)
   24028:	003cff06 	br	23428 <__alt_data_end+0xfffe4c28>
   2402c:	00bfffc4 	movi	r2,-1
   24030:	003ea206 	br	23abc <__alt_data_end+0xfffe52bc>
   24034:	00800044 	movi	r2,1
   24038:	10803fcc 	andi	r2,r2,255
   2403c:	00c00044 	movi	r3,1
   24040:	10fd4526 	beq	r2,r3,23558 <__alt_data_end+0xfffe4d58>
   24044:	00c00084 	movi	r3,2
   24048:	10fc5226 	beq	r2,r3,23194 <__alt_data_end+0xfffe4994>
   2404c:	003c9c06 	br	232c0 <__alt_data_end+0xfffe4ac0>
   24050:	1021883a 	mov	r16,r2
   24054:	002b883a 	mov	r21,zero
   24058:	00800084 	movi	r2,2
   2405c:	003ff606 	br	24038 <__alt_data_end+0xfffe5838>
   24060:	010000f4 	movhi	r4,3
   24064:	21263084 	addi	r4,r4,-26430
   24068:	d9002815 	stw	r4,160(sp)
   2406c:	003e7206 	br	23a38 <__alt_data_end+0xfffe5238>
   24070:	014000f4 	movhi	r5,3
   24074:	29662c84 	addi	r5,r5,-26446
   24078:	d9402115 	stw	r5,132(sp)
   2407c:	003ec506 	br	23b94 <__alt_data_end+0xfffe5394>
   24080:	e027883a 	mov	r19,fp
   24084:	d8002015 	stw	zero,128(sp)
   24088:	003b9406 	br	22edc <__alt_data_end+0xfffe46dc>
   2408c:	dd002017 	ldw	r20,128(sp)
   24090:	dd401d83 	ldbu	r21,118(sp)
   24094:	ddc02415 	stw	r23,144(sp)
   24098:	d8002015 	stw	zero,128(sp)
   2409c:	003c6606 	br	23238 <__alt_data_end+0xfffe4a38>
   240a0:	0025883a 	mov	r18,zero
   240a4:	003fbd06 	br	23f9c <__alt_data_end+0xfffe579c>
   240a8:	d9402417 	ldw	r5,144(sp)
   240ac:	d8c02417 	ldw	r3,144(sp)
   240b0:	29400017 	ldw	r5,0(r5)
   240b4:	19000104 	addi	r4,r3,4
   240b8:	d9002415 	stw	r4,144(sp)
   240bc:	d9402015 	stw	r5,128(sp)
   240c0:	98c00043 	ldbu	r3,1(r19)
   240c4:	e027883a 	mov	r19,fp
   240c8:	283f5b0e 	bge	r5,zero,23e38 <__alt_data_end+0xfffe5638>
   240cc:	18c03fcc 	andi	r3,r3,255
   240d0:	013fffc4 	movi	r4,-1
   240d4:	18c0201c 	xori	r3,r3,128
   240d8:	d9002015 	stw	r4,128(sp)
   240dc:	18ffe004 	addi	r3,r3,-128
   240e0:	003b7d06 	br	22ed8 <__alt_data_end+0xfffe46d8>
   240e4:	dd401d85 	stb	r21,118(sp)
   240e8:	003cf306 	br	234b8 <__alt_data_end+0xfffe4cb8>
   240ec:	dd401d85 	stb	r21,118(sp)
   240f0:	003d4e06 	br	2362c <__alt_data_end+0xfffe4e2c>
   240f4:	dd401d85 	stb	r21,118(sp)
   240f8:	003c0e06 	br	23134 <__alt_data_end+0xfffe4934>
   240fc:	d9002717 	ldw	r4,156(sp)
   24100:	00800304 	movi	r2,12
   24104:	20800015 	stw	r2,0(r4)
   24108:	00bfffc4 	movi	r2,-1
   2410c:	003e6b06 	br	23abc <__alt_data_end+0xfffe52bc>
   24110:	dd401d85 	stb	r21,118(sp)
   24114:	003d0006 	br	23518 <__alt_data_end+0xfffe4d18>
   24118:	dd401d85 	stb	r21,118(sp)
   2411c:	003d7106 	br	236e4 <__alt_data_end+0xfffe4ee4>
   24120:	dd401d85 	stb	r21,118(sp)
   24124:	003c5706 	br	23284 <__alt_data_end+0xfffe4a84>
   24128:	dd401d85 	stb	r21,118(sp)
   2412c:	003c2e06 	br	231e8 <__alt_data_end+0xfffe49e8>
   24130:	dd401d85 	stb	r21,118(sp)
   24134:	003d8c06 	br	23768 <__alt_data_end+0xfffe4f68>
   24138:	dd401d85 	stb	r21,118(sp)
   2413c:	003da706 	br	237dc <__alt_data_end+0xfffe4fdc>
   24140:	dd401d85 	stb	r21,118(sp)
   24144:	003cc806 	br	23468 <__alt_data_end+0xfffe4c68>

00024148 <_wcrtomb_r>:
   24148:	defff604 	addi	sp,sp,-40
   2414c:	008000f4 	movhi	r2,3
   24150:	dc800815 	stw	r18,32(sp)
   24154:	dc400715 	stw	r17,28(sp)
   24158:	dc000615 	stw	r16,24(sp)
   2415c:	10a8a804 	addi	r2,r2,-23904
   24160:	dfc00915 	stw	ra,36(sp)
   24164:	2021883a 	mov	r16,r4
   24168:	3823883a 	mov	r17,r7
   2416c:	14800017 	ldw	r18,0(r2)
   24170:	28001426 	beq	r5,zero,241c4 <_wcrtomb_r+0x7c>
   24174:	d9400415 	stw	r5,16(sp)
   24178:	d9800515 	stw	r6,20(sp)
   2417c:	001919c0 	call	1919c <__locale_charset>
   24180:	d9800517 	ldw	r6,20(sp)
   24184:	d9400417 	ldw	r5,16(sp)
   24188:	100f883a 	mov	r7,r2
   2418c:	dc400015 	stw	r17,0(sp)
   24190:	8009883a 	mov	r4,r16
   24194:	903ee83a 	callr	r18
   24198:	00ffffc4 	movi	r3,-1
   2419c:	10c0031e 	bne	r2,r3,241ac <_wcrtomb_r+0x64>
   241a0:	88000015 	stw	zero,0(r17)
   241a4:	00c02284 	movi	r3,138
   241a8:	80c00015 	stw	r3,0(r16)
   241ac:	dfc00917 	ldw	ra,36(sp)
   241b0:	dc800817 	ldw	r18,32(sp)
   241b4:	dc400717 	ldw	r17,28(sp)
   241b8:	dc000617 	ldw	r16,24(sp)
   241bc:	dec00a04 	addi	sp,sp,40
   241c0:	f800283a 	ret
   241c4:	001919c0 	call	1919c <__locale_charset>
   241c8:	100f883a 	mov	r7,r2
   241cc:	dc400015 	stw	r17,0(sp)
   241d0:	000d883a 	mov	r6,zero
   241d4:	d9400104 	addi	r5,sp,4
   241d8:	8009883a 	mov	r4,r16
   241dc:	903ee83a 	callr	r18
   241e0:	003fed06 	br	24198 <__alt_data_end+0xfffe5998>

000241e4 <wcrtomb>:
   241e4:	defff604 	addi	sp,sp,-40
   241e8:	008000f4 	movhi	r2,3
   241ec:	dc800615 	stw	r18,24(sp)
   241f0:	dc400515 	stw	r17,20(sp)
   241f4:	10a8a204 	addi	r2,r2,-23928
   241f8:	dfc00915 	stw	ra,36(sp)
   241fc:	dd000815 	stw	r20,32(sp)
   24200:	dcc00715 	stw	r19,28(sp)
   24204:	dc000415 	stw	r16,16(sp)
   24208:	3025883a 	mov	r18,r6
   2420c:	14400017 	ldw	r17,0(r2)
   24210:	20001926 	beq	r4,zero,24278 <wcrtomb+0x94>
   24214:	008000f4 	movhi	r2,3
   24218:	10a8a804 	addi	r2,r2,-23904
   2421c:	15000017 	ldw	r20,0(r2)
   24220:	2021883a 	mov	r16,r4
   24224:	2827883a 	mov	r19,r5
   24228:	001919c0 	call	1919c <__locale_charset>
   2422c:	100f883a 	mov	r7,r2
   24230:	dc800015 	stw	r18,0(sp)
   24234:	980d883a 	mov	r6,r19
   24238:	800b883a 	mov	r5,r16
   2423c:	8809883a 	mov	r4,r17
   24240:	a03ee83a 	callr	r20
   24244:	00ffffc4 	movi	r3,-1
   24248:	10c0031e 	bne	r2,r3,24258 <wcrtomb+0x74>
   2424c:	90000015 	stw	zero,0(r18)
   24250:	00c02284 	movi	r3,138
   24254:	88c00015 	stw	r3,0(r17)
   24258:	dfc00917 	ldw	ra,36(sp)
   2425c:	dd000817 	ldw	r20,32(sp)
   24260:	dcc00717 	ldw	r19,28(sp)
   24264:	dc800617 	ldw	r18,24(sp)
   24268:	dc400517 	ldw	r17,20(sp)
   2426c:	dc000417 	ldw	r16,16(sp)
   24270:	dec00a04 	addi	sp,sp,40
   24274:	f800283a 	ret
   24278:	008000f4 	movhi	r2,3
   2427c:	10a8a804 	addi	r2,r2,-23904
   24280:	14000017 	ldw	r16,0(r2)
   24284:	001919c0 	call	1919c <__locale_charset>
   24288:	100f883a 	mov	r7,r2
   2428c:	dc800015 	stw	r18,0(sp)
   24290:	000d883a 	mov	r6,zero
   24294:	d9400104 	addi	r5,sp,4
   24298:	8809883a 	mov	r4,r17
   2429c:	803ee83a 	callr	r16
   242a0:	003fe806 	br	24244 <__alt_data_end+0xfffe5a44>

000242a4 <__ascii_wctomb>:
   242a4:	28000526 	beq	r5,zero,242bc <__ascii_wctomb+0x18>
   242a8:	00803fc4 	movi	r2,255
   242ac:	11800536 	bltu	r2,r6,242c4 <__ascii_wctomb+0x20>
   242b0:	29800005 	stb	r6,0(r5)
   242b4:	00800044 	movi	r2,1
   242b8:	f800283a 	ret
   242bc:	0005883a 	mov	r2,zero
   242c0:	f800283a 	ret
   242c4:	00802284 	movi	r2,138
   242c8:	20800015 	stw	r2,0(r4)
   242cc:	00bfffc4 	movi	r2,-1
   242d0:	f800283a 	ret

000242d4 <_wctomb_r>:
   242d4:	008000f4 	movhi	r2,3
   242d8:	defff904 	addi	sp,sp,-28
   242dc:	10a8a804 	addi	r2,r2,-23904
   242e0:	dfc00615 	stw	ra,24(sp)
   242e4:	dc400515 	stw	r17,20(sp)
   242e8:	dc000415 	stw	r16,16(sp)
   242ec:	3823883a 	mov	r17,r7
   242f0:	14000017 	ldw	r16,0(r2)
   242f4:	d9000115 	stw	r4,4(sp)
   242f8:	d9400215 	stw	r5,8(sp)
   242fc:	d9800315 	stw	r6,12(sp)
   24300:	001919c0 	call	1919c <__locale_charset>
   24304:	d9800317 	ldw	r6,12(sp)
   24308:	d9400217 	ldw	r5,8(sp)
   2430c:	d9000117 	ldw	r4,4(sp)
   24310:	100f883a 	mov	r7,r2
   24314:	dc400015 	stw	r17,0(sp)
   24318:	803ee83a 	callr	r16
   2431c:	dfc00617 	ldw	ra,24(sp)
   24320:	dc400517 	ldw	r17,20(sp)
   24324:	dc000417 	ldw	r16,16(sp)
   24328:	dec00704 	addi	sp,sp,28
   2432c:	f800283a 	ret

00024330 <__muldi3>:
   24330:	defff604 	addi	sp,sp,-40
   24334:	dd800615 	stw	r22,24(sp)
   24338:	dd400515 	stw	r21,20(sp)
   2433c:	dc400115 	stw	r17,4(sp)
   24340:	357fffcc 	andi	r21,r6,65535
   24344:	2022d43a 	srli	r17,r4,16
   24348:	25bfffcc 	andi	r22,r4,65535
   2434c:	dcc00315 	stw	r19,12(sp)
   24350:	dc800215 	stw	r18,8(sp)
   24354:	2027883a 	mov	r19,r4
   24358:	2825883a 	mov	r18,r5
   2435c:	b009883a 	mov	r4,r22
   24360:	a80b883a 	mov	r5,r21
   24364:	dfc00915 	stw	ra,36(sp)
   24368:	df000815 	stw	fp,32(sp)
   2436c:	ddc00715 	stw	r23,28(sp)
   24370:	3839883a 	mov	fp,r7
   24374:	302ed43a 	srli	r23,r6,16
   24378:	dd000415 	stw	r20,16(sp)
   2437c:	dc000015 	stw	r16,0(sp)
   24380:	3029883a 	mov	r20,r6
   24384:	002587c0 	call	2587c <__mulsi3>
   24388:	a80b883a 	mov	r5,r21
   2438c:	8809883a 	mov	r4,r17
   24390:	1021883a 	mov	r16,r2
   24394:	002587c0 	call	2587c <__mulsi3>
   24398:	8809883a 	mov	r4,r17
   2439c:	b80b883a 	mov	r5,r23
   243a0:	102b883a 	mov	r21,r2
   243a4:	002587c0 	call	2587c <__mulsi3>
   243a8:	b80b883a 	mov	r5,r23
   243ac:	b009883a 	mov	r4,r22
   243b0:	1023883a 	mov	r17,r2
   243b4:	002587c0 	call	2587c <__mulsi3>
   243b8:	8006d43a 	srli	r3,r16,16
   243bc:	1545883a 	add	r2,r2,r21
   243c0:	1885883a 	add	r2,r3,r2
   243c4:	1540022e 	bgeu	r2,r21,243d0 <__muldi3+0xa0>
   243c8:	00c00074 	movhi	r3,1
   243cc:	88e3883a 	add	r17,r17,r3
   243d0:	1006d43a 	srli	r3,r2,16
   243d4:	1004943a 	slli	r2,r2,16
   243d8:	e00b883a 	mov	r5,fp
   243dc:	9809883a 	mov	r4,r19
   243e0:	843fffcc 	andi	r16,r16,65535
   243e4:	1c63883a 	add	r17,r3,r17
   243e8:	1421883a 	add	r16,r2,r16
   243ec:	002587c0 	call	2587c <__mulsi3>
   243f0:	900b883a 	mov	r5,r18
   243f4:	a009883a 	mov	r4,r20
   243f8:	1027883a 	mov	r19,r2
   243fc:	002587c0 	call	2587c <__mulsi3>
   24400:	9885883a 	add	r2,r19,r2
   24404:	1447883a 	add	r3,r2,r17
   24408:	8005883a 	mov	r2,r16
   2440c:	dfc00917 	ldw	ra,36(sp)
   24410:	df000817 	ldw	fp,32(sp)
   24414:	ddc00717 	ldw	r23,28(sp)
   24418:	dd800617 	ldw	r22,24(sp)
   2441c:	dd400517 	ldw	r21,20(sp)
   24420:	dd000417 	ldw	r20,16(sp)
   24424:	dcc00317 	ldw	r19,12(sp)
   24428:	dc800217 	ldw	r18,8(sp)
   2442c:	dc400117 	ldw	r17,4(sp)
   24430:	dc000017 	ldw	r16,0(sp)
   24434:	dec00a04 	addi	sp,sp,40
   24438:	f800283a 	ret

0002443c <__fixunsdfsi>:
   2443c:	defffd04 	addi	sp,sp,-12
   24440:	000d883a 	mov	r6,zero
   24444:	01d07834 	movhi	r7,16864
   24448:	dc400115 	stw	r17,4(sp)
   2444c:	dc000015 	stw	r16,0(sp)
   24450:	dfc00215 	stw	ra,8(sp)
   24454:	2023883a 	mov	r17,r4
   24458:	2821883a 	mov	r16,r5
   2445c:	0026da40 	call	26da4 <__gedf2>
   24460:	1000080e 	bge	r2,zero,24484 <__fixunsdfsi+0x48>
   24464:	8809883a 	mov	r4,r17
   24468:	800b883a 	mov	r5,r16
   2446c:	00280dc0 	call	280dc <__fixdfsi>
   24470:	dfc00217 	ldw	ra,8(sp)
   24474:	dc400117 	ldw	r17,4(sp)
   24478:	dc000017 	ldw	r16,0(sp)
   2447c:	dec00304 	addi	sp,sp,12
   24480:	f800283a 	ret
   24484:	000d883a 	mov	r6,zero
   24488:	01d07834 	movhi	r7,16864
   2448c:	8809883a 	mov	r4,r17
   24490:	800b883a 	mov	r5,r16
   24494:	00277e00 	call	277e0 <__subdf3>
   24498:	180b883a 	mov	r5,r3
   2449c:	1009883a 	mov	r4,r2
   244a0:	00280dc0 	call	280dc <__fixdfsi>
   244a4:	00e00034 	movhi	r3,32768
   244a8:	10c5883a 	add	r2,r2,r3
   244ac:	003ff006 	br	24470 <__alt_data_end+0xfffe5c70>

000244b0 <__divdi3>:
   244b0:	defff304 	addi	sp,sp,-52
   244b4:	dfc00c15 	stw	ra,48(sp)
   244b8:	df000b15 	stw	fp,44(sp)
   244bc:	ddc00a15 	stw	r23,40(sp)
   244c0:	dd800915 	stw	r22,36(sp)
   244c4:	dd400815 	stw	r21,32(sp)
   244c8:	dd000715 	stw	r20,28(sp)
   244cc:	dcc00615 	stw	r19,24(sp)
   244d0:	dc800515 	stw	r18,20(sp)
   244d4:	dc400415 	stw	r17,16(sp)
   244d8:	dc000315 	stw	r16,12(sp)
   244dc:	2800be16 	blt	r5,zero,247d8 <__divdi3+0x328>
   244e0:	2027883a 	mov	r19,r4
   244e4:	2821883a 	mov	r16,r5
   244e8:	0023883a 	mov	r17,zero
   244ec:	3800b416 	blt	r7,zero,247c0 <__divdi3+0x310>
   244f0:	302f883a 	mov	r23,r6
   244f4:	9825883a 	mov	r18,r19
   244f8:	802d883a 	mov	r22,r16
   244fc:	3800441e 	bne	r7,zero,24610 <__divdi3+0x160>
   24500:	81806b2e 	bgeu	r16,r6,246b0 <__divdi3+0x200>
   24504:	00bfffd4 	movui	r2,65535
   24508:	1180be2e 	bgeu	r2,r6,24804 <__divdi3+0x354>
   2450c:	00804034 	movhi	r2,256
   24510:	10bfffc4 	addi	r2,r2,-1
   24514:	11816536 	bltu	r2,r6,24aac <__divdi3+0x5fc>
   24518:	00800404 	movi	r2,16
   2451c:	3088d83a 	srl	r4,r6,r2
   24520:	00c000f4 	movhi	r3,3
   24524:	18e63484 	addi	r3,r3,-26414
   24528:	1909883a 	add	r4,r3,r4
   2452c:	20c00003 	ldbu	r3,0(r4)
   24530:	01c00804 	movi	r7,32
   24534:	1885883a 	add	r2,r3,r2
   24538:	388fc83a 	sub	r7,r7,r2
   2453c:	38000526 	beq	r7,zero,24554 <__divdi3+0xa4>
   24540:	81ca983a 	sll	r5,r16,r7
   24544:	9884d83a 	srl	r2,r19,r2
   24548:	31ee983a 	sll	r23,r6,r7
   2454c:	99e4983a 	sll	r18,r19,r7
   24550:	116cb03a 	or	r22,r2,r5
   24554:	b82ad43a 	srli	r21,r23,16
   24558:	b009883a 	mov	r4,r22
   2455c:	bd3fffcc 	andi	r20,r23,65535
   24560:	a80b883a 	mov	r5,r21
   24564:	00258240 	call	25824 <__umodsi3>
   24568:	b009883a 	mov	r4,r22
   2456c:	a80b883a 	mov	r5,r21
   24570:	1027883a 	mov	r19,r2
   24574:	00257c00 	call	257c0 <__udivsi3>
   24578:	100b883a 	mov	r5,r2
   2457c:	a009883a 	mov	r4,r20
   24580:	102d883a 	mov	r22,r2
   24584:	002587c0 	call	2587c <__mulsi3>
   24588:	9826943a 	slli	r19,r19,16
   2458c:	9006d43a 	srli	r3,r18,16
   24590:	1cc6b03a 	or	r3,r3,r19
   24594:	1880052e 	bgeu	r3,r2,245ac <__divdi3+0xfc>
   24598:	1dc7883a 	add	r3,r3,r23
   2459c:	b13fffc4 	addi	r4,r22,-1
   245a0:	1dc00136 	bltu	r3,r23,245a8 <__divdi3+0xf8>
   245a4:	18815236 	bltu	r3,r2,24af0 <__divdi3+0x640>
   245a8:	202d883a 	mov	r22,r4
   245ac:	18a1c83a 	sub	r16,r3,r2
   245b0:	8009883a 	mov	r4,r16
   245b4:	a80b883a 	mov	r5,r21
   245b8:	00258240 	call	25824 <__umodsi3>
   245bc:	1027883a 	mov	r19,r2
   245c0:	8009883a 	mov	r4,r16
   245c4:	a80b883a 	mov	r5,r21
   245c8:	9826943a 	slli	r19,r19,16
   245cc:	00257c00 	call	257c0 <__udivsi3>
   245d0:	100b883a 	mov	r5,r2
   245d4:	a009883a 	mov	r4,r20
   245d8:	94bfffcc 	andi	r18,r18,65535
   245dc:	1021883a 	mov	r16,r2
   245e0:	94e4b03a 	or	r18,r18,r19
   245e4:	002587c0 	call	2587c <__mulsi3>
   245e8:	9080052e 	bgeu	r18,r2,24600 <__divdi3+0x150>
   245ec:	bca5883a 	add	r18,r23,r18
   245f0:	80ffffc4 	addi	r3,r16,-1
   245f4:	95c00136 	bltu	r18,r23,245fc <__divdi3+0x14c>
   245f8:	90813b36 	bltu	r18,r2,24ae8 <__divdi3+0x638>
   245fc:	1821883a 	mov	r16,r3
   24600:	b004943a 	slli	r2,r22,16
   24604:	0029883a 	mov	r20,zero
   24608:	1404b03a 	or	r2,r2,r16
   2460c:	00000306 	br	2461c <__divdi3+0x16c>
   24610:	81c0142e 	bgeu	r16,r7,24664 <__divdi3+0x1b4>
   24614:	0029883a 	mov	r20,zero
   24618:	0005883a 	mov	r2,zero
   2461c:	a007883a 	mov	r3,r20
   24620:	88000426 	beq	r17,zero,24634 <__divdi3+0x184>
   24624:	0085c83a 	sub	r2,zero,r2
   24628:	1008c03a 	cmpne	r4,r2,zero
   2462c:	0507c83a 	sub	r3,zero,r20
   24630:	1907c83a 	sub	r3,r3,r4
   24634:	dfc00c17 	ldw	ra,48(sp)
   24638:	df000b17 	ldw	fp,44(sp)
   2463c:	ddc00a17 	ldw	r23,40(sp)
   24640:	dd800917 	ldw	r22,36(sp)
   24644:	dd400817 	ldw	r21,32(sp)
   24648:	dd000717 	ldw	r20,28(sp)
   2464c:	dcc00617 	ldw	r19,24(sp)
   24650:	dc800517 	ldw	r18,20(sp)
   24654:	dc400417 	ldw	r17,16(sp)
   24658:	dc000317 	ldw	r16,12(sp)
   2465c:	dec00d04 	addi	sp,sp,52
   24660:	f800283a 	ret
   24664:	00bfffd4 	movui	r2,65535
   24668:	11c06a2e 	bgeu	r2,r7,24814 <__divdi3+0x364>
   2466c:	00804034 	movhi	r2,256
   24670:	10bfffc4 	addi	r2,r2,-1
   24674:	11c10b36 	bltu	r2,r7,24aa4 <__divdi3+0x5f4>
   24678:	00800404 	movi	r2,16
   2467c:	3886d83a 	srl	r3,r7,r2
   24680:	010000f4 	movhi	r4,3
   24684:	21263484 	addi	r4,r4,-26414
   24688:	20c7883a 	add	r3,r4,r3
   2468c:	18c00003 	ldbu	r3,0(r3)
   24690:	07000804 	movi	fp,32
   24694:	1885883a 	add	r2,r3,r2
   24698:	e0b9c83a 	sub	fp,fp,r2
   2469c:	e000991e 	bne	fp,zero,24904 <__divdi3+0x454>
   246a0:	3c010436 	bltu	r7,r16,24ab4 <__divdi3+0x604>
   246a4:	9985403a 	cmpgeu	r2,r19,r6
   246a8:	0029883a 	mov	r20,zero
   246ac:	003fdb06 	br	2461c <__alt_data_end+0xfffe5e1c>
   246b0:	3000041e 	bne	r6,zero,246c4 <__divdi3+0x214>
   246b4:	000b883a 	mov	r5,zero
   246b8:	01000044 	movi	r4,1
   246bc:	00257c00 	call	257c0 <__udivsi3>
   246c0:	102f883a 	mov	r23,r2
   246c4:	00bfffd4 	movui	r2,65535
   246c8:	15c04a2e 	bgeu	r2,r23,247f4 <__divdi3+0x344>
   246cc:	00804034 	movhi	r2,256
   246d0:	10bfffc4 	addi	r2,r2,-1
   246d4:	15c0f136 	bltu	r2,r23,24a9c <__divdi3+0x5ec>
   246d8:	00800404 	movi	r2,16
   246dc:	b886d83a 	srl	r3,r23,r2
   246e0:	010000f4 	movhi	r4,3
   246e4:	21263484 	addi	r4,r4,-26414
   246e8:	20c7883a 	add	r3,r4,r3
   246ec:	18c00003 	ldbu	r3,0(r3)
   246f0:	01800804 	movi	r6,32
   246f4:	1885883a 	add	r2,r3,r2
   246f8:	308dc83a 	sub	r6,r6,r2
   246fc:	3000491e 	bne	r6,zero,24824 <__divdi3+0x374>
   24700:	b82cd43a 	srli	r22,r23,16
   24704:	85e1c83a 	sub	r16,r16,r23
   24708:	bd7fffcc 	andi	r21,r23,65535
   2470c:	05000044 	movi	r20,1
   24710:	b00b883a 	mov	r5,r22
   24714:	8009883a 	mov	r4,r16
   24718:	00258240 	call	25824 <__umodsi3>
   2471c:	b00b883a 	mov	r5,r22
   24720:	8009883a 	mov	r4,r16
   24724:	1027883a 	mov	r19,r2
   24728:	00257c00 	call	257c0 <__udivsi3>
   2472c:	a80b883a 	mov	r5,r21
   24730:	1009883a 	mov	r4,r2
   24734:	1039883a 	mov	fp,r2
   24738:	002587c0 	call	2587c <__mulsi3>
   2473c:	9826943a 	slli	r19,r19,16
   24740:	900ed43a 	srli	r7,r18,16
   24744:	3cceb03a 	or	r7,r7,r19
   24748:	3880052e 	bgeu	r7,r2,24760 <__divdi3+0x2b0>
   2474c:	3dcf883a 	add	r7,r7,r23
   24750:	e0ffffc4 	addi	r3,fp,-1
   24754:	3dc00136 	bltu	r7,r23,2475c <__divdi3+0x2ac>
   24758:	3880e836 	bltu	r7,r2,24afc <__divdi3+0x64c>
   2475c:	1839883a 	mov	fp,r3
   24760:	38a1c83a 	sub	r16,r7,r2
   24764:	8009883a 	mov	r4,r16
   24768:	b00b883a 	mov	r5,r22
   2476c:	00258240 	call	25824 <__umodsi3>
   24770:	1027883a 	mov	r19,r2
   24774:	8009883a 	mov	r4,r16
   24778:	b00b883a 	mov	r5,r22
   2477c:	9826943a 	slli	r19,r19,16
   24780:	00257c00 	call	257c0 <__udivsi3>
   24784:	a80b883a 	mov	r5,r21
   24788:	1009883a 	mov	r4,r2
   2478c:	94bfffcc 	andi	r18,r18,65535
   24790:	1021883a 	mov	r16,r2
   24794:	94e4b03a 	or	r18,r18,r19
   24798:	002587c0 	call	2587c <__mulsi3>
   2479c:	9080052e 	bgeu	r18,r2,247b4 <__divdi3+0x304>
   247a0:	bca5883a 	add	r18,r23,r18
   247a4:	80ffffc4 	addi	r3,r16,-1
   247a8:	95c00136 	bltu	r18,r23,247b0 <__divdi3+0x300>
   247ac:	9080cc36 	bltu	r18,r2,24ae0 <__divdi3+0x630>
   247b0:	1821883a 	mov	r16,r3
   247b4:	e004943a 	slli	r2,fp,16
   247b8:	1404b03a 	or	r2,r2,r16
   247bc:	003f9706 	br	2461c <__alt_data_end+0xfffe5e1c>
   247c0:	018dc83a 	sub	r6,zero,r6
   247c4:	3004c03a 	cmpne	r2,r6,zero
   247c8:	01cfc83a 	sub	r7,zero,r7
   247cc:	0462303a 	nor	r17,zero,r17
   247d0:	388fc83a 	sub	r7,r7,r2
   247d4:	003f4606 	br	244f0 <__alt_data_end+0xfffe5cf0>
   247d8:	0105c83a 	sub	r2,zero,r4
   247dc:	1006c03a 	cmpne	r3,r2,zero
   247e0:	014bc83a 	sub	r5,zero,r5
   247e4:	1027883a 	mov	r19,r2
   247e8:	28e1c83a 	sub	r16,r5,r3
   247ec:	047fffc4 	movi	r17,-1
   247f0:	003f3e06 	br	244ec <__alt_data_end+0xfffe5cec>
   247f4:	00803fc4 	movi	r2,255
   247f8:	15c5803a 	cmpltu	r2,r2,r23
   247fc:	100490fa 	slli	r2,r2,3
   24800:	003fb606 	br	246dc <__alt_data_end+0xfffe5edc>
   24804:	00803fc4 	movi	r2,255
   24808:	1185803a 	cmpltu	r2,r2,r6
   2480c:	100490fa 	slli	r2,r2,3
   24810:	003f4206 	br	2451c <__alt_data_end+0xfffe5d1c>
   24814:	00803fc4 	movi	r2,255
   24818:	11c5803a 	cmpltu	r2,r2,r7
   2481c:	100490fa 	slli	r2,r2,3
   24820:	003f9606 	br	2467c <__alt_data_end+0xfffe5e7c>
   24824:	b9ae983a 	sll	r23,r23,r6
   24828:	80a8d83a 	srl	r20,r16,r2
   2482c:	81a0983a 	sll	r16,r16,r6
   24830:	b82cd43a 	srli	r22,r23,16
   24834:	9884d83a 	srl	r2,r19,r2
   24838:	a009883a 	mov	r4,r20
   2483c:	b00b883a 	mov	r5,r22
   24840:	99a4983a 	sll	r18,r19,r6
   24844:	1438b03a 	or	fp,r2,r16
   24848:	00258240 	call	25824 <__umodsi3>
   2484c:	a009883a 	mov	r4,r20
   24850:	b00b883a 	mov	r5,r22
   24854:	1027883a 	mov	r19,r2
   24858:	bd7fffcc 	andi	r21,r23,65535
   2485c:	00257c00 	call	257c0 <__udivsi3>
   24860:	a809883a 	mov	r4,r21
   24864:	100b883a 	mov	r5,r2
   24868:	1029883a 	mov	r20,r2
   2486c:	002587c0 	call	2587c <__mulsi3>
   24870:	9826943a 	slli	r19,r19,16
   24874:	e008d43a 	srli	r4,fp,16
   24878:	24c8b03a 	or	r4,r4,r19
   2487c:	2080062e 	bgeu	r4,r2,24898 <__divdi3+0x3e8>
   24880:	25c9883a 	add	r4,r4,r23
   24884:	a0ffffc4 	addi	r3,r20,-1
   24888:	25c09336 	bltu	r4,r23,24ad8 <__divdi3+0x628>
   2488c:	2080922e 	bgeu	r4,r2,24ad8 <__divdi3+0x628>
   24890:	a53fff84 	addi	r20,r20,-2
   24894:	25c9883a 	add	r4,r4,r23
   24898:	20a1c83a 	sub	r16,r4,r2
   2489c:	b00b883a 	mov	r5,r22
   248a0:	8009883a 	mov	r4,r16
   248a4:	00258240 	call	25824 <__umodsi3>
   248a8:	b00b883a 	mov	r5,r22
   248ac:	8009883a 	mov	r4,r16
   248b0:	1027883a 	mov	r19,r2
   248b4:	00257c00 	call	257c0 <__udivsi3>
   248b8:	a809883a 	mov	r4,r21
   248bc:	100b883a 	mov	r5,r2
   248c0:	9826943a 	slli	r19,r19,16
   248c4:	d8800215 	stw	r2,8(sp)
   248c8:	002587c0 	call	2587c <__mulsi3>
   248cc:	e13fffcc 	andi	r4,fp,65535
   248d0:	24c8b03a 	or	r4,r4,r19
   248d4:	d8c00217 	ldw	r3,8(sp)
   248d8:	2080062e 	bgeu	r4,r2,248f4 <__divdi3+0x444>
   248dc:	25c9883a 	add	r4,r4,r23
   248e0:	197fffc4 	addi	r5,r3,-1
   248e4:	25c07836 	bltu	r4,r23,24ac8 <__divdi3+0x618>
   248e8:	2080772e 	bgeu	r4,r2,24ac8 <__divdi3+0x618>
   248ec:	18ffff84 	addi	r3,r3,-2
   248f0:	25c9883a 	add	r4,r4,r23
   248f4:	a028943a 	slli	r20,r20,16
   248f8:	20a1c83a 	sub	r16,r4,r2
   248fc:	a0e8b03a 	or	r20,r20,r3
   24900:	003f8306 	br	24710 <__alt_data_end+0xfffe5f10>
   24904:	3f0e983a 	sll	r7,r7,fp
   24908:	3086d83a 	srl	r3,r6,r2
   2490c:	80a8d83a 	srl	r20,r16,r2
   24910:	9884d83a 	srl	r2,r19,r2
   24914:	38ecb03a 	or	r22,r7,r3
   24918:	b024d43a 	srli	r18,r22,16
   2491c:	8706983a 	sll	r3,r16,fp
   24920:	370c983a 	sll	r6,r6,fp
   24924:	a009883a 	mov	r4,r20
   24928:	10c4b03a 	or	r2,r2,r3
   2492c:	900b883a 	mov	r5,r18
   24930:	d9800015 	stw	r6,0(sp)
   24934:	d8800115 	stw	r2,4(sp)
   24938:	00258240 	call	25824 <__umodsi3>
   2493c:	900b883a 	mov	r5,r18
   24940:	a009883a 	mov	r4,r20
   24944:	102b883a 	mov	r21,r2
   24948:	b5ffffcc 	andi	r23,r22,65535
   2494c:	00257c00 	call	257c0 <__udivsi3>
   24950:	b809883a 	mov	r4,r23
   24954:	100b883a 	mov	r5,r2
   24958:	1021883a 	mov	r16,r2
   2495c:	002587c0 	call	2587c <__mulsi3>
   24960:	d9000117 	ldw	r4,4(sp)
   24964:	a82a943a 	slli	r21,r21,16
   24968:	2006d43a 	srli	r3,r4,16
   2496c:	1d46b03a 	or	r3,r3,r21
   24970:	1880062e 	bgeu	r3,r2,2498c <__divdi3+0x4dc>
   24974:	1d87883a 	add	r3,r3,r22
   24978:	813fffc4 	addi	r4,r16,-1
   2497c:	1d805436 	bltu	r3,r22,24ad0 <__divdi3+0x620>
   24980:	1880532e 	bgeu	r3,r2,24ad0 <__divdi3+0x620>
   24984:	843fff84 	addi	r16,r16,-2
   24988:	1d87883a 	add	r3,r3,r22
   2498c:	18a9c83a 	sub	r20,r3,r2
   24990:	900b883a 	mov	r5,r18
   24994:	a009883a 	mov	r4,r20
   24998:	00258240 	call	25824 <__umodsi3>
   2499c:	900b883a 	mov	r5,r18
   249a0:	a009883a 	mov	r4,r20
   249a4:	102b883a 	mov	r21,r2
   249a8:	00257c00 	call	257c0 <__udivsi3>
   249ac:	b809883a 	mov	r4,r23
   249b0:	100b883a 	mov	r5,r2
   249b4:	1025883a 	mov	r18,r2
   249b8:	002587c0 	call	2587c <__mulsi3>
   249bc:	d9000117 	ldw	r4,4(sp)
   249c0:	a82a943a 	slli	r21,r21,16
   249c4:	20ffffcc 	andi	r3,r4,65535
   249c8:	1d46b03a 	or	r3,r3,r21
   249cc:	1880062e 	bgeu	r3,r2,249e8 <__divdi3+0x538>
   249d0:	1d87883a 	add	r3,r3,r22
   249d4:	913fffc4 	addi	r4,r18,-1
   249d8:	1d803936 	bltu	r3,r22,24ac0 <__divdi3+0x610>
   249dc:	1880382e 	bgeu	r3,r2,24ac0 <__divdi3+0x610>
   249e0:	94bfff84 	addi	r18,r18,-2
   249e4:	1d87883a 	add	r3,r3,r22
   249e8:	8010943a 	slli	r8,r16,16
   249ec:	d9000017 	ldw	r4,0(sp)
   249f0:	18a1c83a 	sub	r16,r3,r2
   249f4:	44a8b03a 	or	r20,r8,r18
   249f8:	257fffcc 	andi	r21,r4,65535
   249fc:	a024d43a 	srli	r18,r20,16
   24a00:	a5ffffcc 	andi	r23,r20,65535
   24a04:	202cd43a 	srli	r22,r4,16
   24a08:	a80b883a 	mov	r5,r21
   24a0c:	b809883a 	mov	r4,r23
   24a10:	002587c0 	call	2587c <__mulsi3>
   24a14:	a80b883a 	mov	r5,r21
   24a18:	9009883a 	mov	r4,r18
   24a1c:	d8800215 	stw	r2,8(sp)
   24a20:	002587c0 	call	2587c <__mulsi3>
   24a24:	9009883a 	mov	r4,r18
   24a28:	b00b883a 	mov	r5,r22
   24a2c:	102b883a 	mov	r21,r2
   24a30:	002587c0 	call	2587c <__mulsi3>
   24a34:	b00b883a 	mov	r5,r22
   24a38:	b809883a 	mov	r4,r23
   24a3c:	1025883a 	mov	r18,r2
   24a40:	002587c0 	call	2587c <__mulsi3>
   24a44:	d9800217 	ldw	r6,8(sp)
   24a48:	1545883a 	add	r2,r2,r21
   24a4c:	3006d43a 	srli	r3,r6,16
   24a50:	1885883a 	add	r2,r3,r2
   24a54:	1540022e 	bgeu	r2,r21,24a60 <__divdi3+0x5b0>
   24a58:	00c00074 	movhi	r3,1
   24a5c:	90e5883a 	add	r18,r18,r3
   24a60:	1006d43a 	srli	r3,r2,16
   24a64:	1ca5883a 	add	r18,r3,r18
   24a68:	84800936 	bltu	r16,r18,24a90 <__divdi3+0x5e0>
   24a6c:	84800326 	beq	r16,r18,24a7c <__divdi3+0x5cc>
   24a70:	a005883a 	mov	r2,r20
   24a74:	0029883a 	mov	r20,zero
   24a78:	003ee806 	br	2461c <__alt_data_end+0xfffe5e1c>
   24a7c:	1006943a 	slli	r3,r2,16
   24a80:	9f04983a 	sll	r2,r19,fp
   24a84:	31bfffcc 	andi	r6,r6,65535
   24a88:	1987883a 	add	r3,r3,r6
   24a8c:	10fff82e 	bgeu	r2,r3,24a70 <__alt_data_end+0xfffe6270>
   24a90:	a0bfffc4 	addi	r2,r20,-1
   24a94:	0029883a 	mov	r20,zero
   24a98:	003ee006 	br	2461c <__alt_data_end+0xfffe5e1c>
   24a9c:	00800604 	movi	r2,24
   24aa0:	003f0e06 	br	246dc <__alt_data_end+0xfffe5edc>
   24aa4:	00800604 	movi	r2,24
   24aa8:	003ef406 	br	2467c <__alt_data_end+0xfffe5e7c>
   24aac:	00800604 	movi	r2,24
   24ab0:	003e9a06 	br	2451c <__alt_data_end+0xfffe5d1c>
   24ab4:	0029883a 	mov	r20,zero
   24ab8:	00800044 	movi	r2,1
   24abc:	003ed706 	br	2461c <__alt_data_end+0xfffe5e1c>
   24ac0:	2025883a 	mov	r18,r4
   24ac4:	003fc806 	br	249e8 <__alt_data_end+0xfffe61e8>
   24ac8:	2807883a 	mov	r3,r5
   24acc:	003f8906 	br	248f4 <__alt_data_end+0xfffe60f4>
   24ad0:	2021883a 	mov	r16,r4
   24ad4:	003fad06 	br	2498c <__alt_data_end+0xfffe618c>
   24ad8:	1829883a 	mov	r20,r3
   24adc:	003f6e06 	br	24898 <__alt_data_end+0xfffe6098>
   24ae0:	843fff84 	addi	r16,r16,-2
   24ae4:	003f3306 	br	247b4 <__alt_data_end+0xfffe5fb4>
   24ae8:	843fff84 	addi	r16,r16,-2
   24aec:	003ec406 	br	24600 <__alt_data_end+0xfffe5e00>
   24af0:	b5bfff84 	addi	r22,r22,-2
   24af4:	1dc7883a 	add	r3,r3,r23
   24af8:	003eac06 	br	245ac <__alt_data_end+0xfffe5dac>
   24afc:	e73fff84 	addi	fp,fp,-2
   24b00:	3dcf883a 	add	r7,r7,r23
   24b04:	003f1606 	br	24760 <__alt_data_end+0xfffe5f60>

00024b08 <__udivdi3>:
   24b08:	defff404 	addi	sp,sp,-48
   24b0c:	dcc00515 	stw	r19,20(sp)
   24b10:	dc000215 	stw	r16,8(sp)
   24b14:	dfc00b15 	stw	ra,44(sp)
   24b18:	df000a15 	stw	fp,40(sp)
   24b1c:	ddc00915 	stw	r23,36(sp)
   24b20:	dd800815 	stw	r22,32(sp)
   24b24:	dd400715 	stw	r21,28(sp)
   24b28:	dd000615 	stw	r20,24(sp)
   24b2c:	dc800415 	stw	r18,16(sp)
   24b30:	dc400315 	stw	r17,12(sp)
   24b34:	2027883a 	mov	r19,r4
   24b38:	2821883a 	mov	r16,r5
   24b3c:	3800461e 	bne	r7,zero,24c58 <__udivdi3+0x150>
   24b40:	3023883a 	mov	r17,r6
   24b44:	2025883a 	mov	r18,r4
   24b48:	2980572e 	bgeu	r5,r6,24ca8 <__udivdi3+0x1a0>
   24b4c:	00bfffd4 	movui	r2,65535
   24b50:	282d883a 	mov	r22,r5
   24b54:	1180b236 	bltu	r2,r6,24e20 <__udivdi3+0x318>
   24b58:	00803fc4 	movi	r2,255
   24b5c:	1185803a 	cmpltu	r2,r2,r6
   24b60:	100490fa 	slli	r2,r2,3
   24b64:	3086d83a 	srl	r3,r6,r2
   24b68:	010000f4 	movhi	r4,3
   24b6c:	21263484 	addi	r4,r4,-26414
   24b70:	20c7883a 	add	r3,r4,r3
   24b74:	18c00003 	ldbu	r3,0(r3)
   24b78:	1885883a 	add	r2,r3,r2
   24b7c:	00c00804 	movi	r3,32
   24b80:	1887c83a 	sub	r3,r3,r2
   24b84:	18000526 	beq	r3,zero,24b9c <__udivdi3+0x94>
   24b88:	80e0983a 	sll	r16,r16,r3
   24b8c:	9884d83a 	srl	r2,r19,r2
   24b90:	30e2983a 	sll	r17,r6,r3
   24b94:	98e4983a 	sll	r18,r19,r3
   24b98:	142cb03a 	or	r22,r2,r16
   24b9c:	882ad43a 	srli	r21,r17,16
   24ba0:	b009883a 	mov	r4,r22
   24ba4:	8d3fffcc 	andi	r20,r17,65535
   24ba8:	a80b883a 	mov	r5,r21
   24bac:	00258240 	call	25824 <__umodsi3>
   24bb0:	b009883a 	mov	r4,r22
   24bb4:	a80b883a 	mov	r5,r21
   24bb8:	1027883a 	mov	r19,r2
   24bbc:	00257c00 	call	257c0 <__udivsi3>
   24bc0:	100b883a 	mov	r5,r2
   24bc4:	a009883a 	mov	r4,r20
   24bc8:	102d883a 	mov	r22,r2
   24bcc:	002587c0 	call	2587c <__mulsi3>
   24bd0:	9826943a 	slli	r19,r19,16
   24bd4:	9006d43a 	srli	r3,r18,16
   24bd8:	1cc6b03a 	or	r3,r3,r19
   24bdc:	1880052e 	bgeu	r3,r2,24bf4 <__udivdi3+0xec>
   24be0:	1c47883a 	add	r3,r3,r17
   24be4:	b13fffc4 	addi	r4,r22,-1
   24be8:	1c400136 	bltu	r3,r17,24bf0 <__udivdi3+0xe8>
   24bec:	18814236 	bltu	r3,r2,250f8 <__udivdi3+0x5f0>
   24bf0:	202d883a 	mov	r22,r4
   24bf4:	18a1c83a 	sub	r16,r3,r2
   24bf8:	8009883a 	mov	r4,r16
   24bfc:	a80b883a 	mov	r5,r21
   24c00:	00258240 	call	25824 <__umodsi3>
   24c04:	1027883a 	mov	r19,r2
   24c08:	8009883a 	mov	r4,r16
   24c0c:	a80b883a 	mov	r5,r21
   24c10:	9826943a 	slli	r19,r19,16
   24c14:	00257c00 	call	257c0 <__udivsi3>
   24c18:	100b883a 	mov	r5,r2
   24c1c:	a009883a 	mov	r4,r20
   24c20:	94bfffcc 	andi	r18,r18,65535
   24c24:	1021883a 	mov	r16,r2
   24c28:	94e4b03a 	or	r18,r18,r19
   24c2c:	002587c0 	call	2587c <__mulsi3>
   24c30:	9080052e 	bgeu	r18,r2,24c48 <__udivdi3+0x140>
   24c34:	8ca5883a 	add	r18,r17,r18
   24c38:	80ffffc4 	addi	r3,r16,-1
   24c3c:	94410c36 	bltu	r18,r17,25070 <__udivdi3+0x568>
   24c40:	90810b2e 	bgeu	r18,r2,25070 <__udivdi3+0x568>
   24c44:	843fff84 	addi	r16,r16,-2
   24c48:	b004943a 	slli	r2,r22,16
   24c4c:	0007883a 	mov	r3,zero
   24c50:	1404b03a 	or	r2,r2,r16
   24c54:	00005e06 	br	24dd0 <__udivdi3+0x2c8>
   24c58:	29c05b36 	bltu	r5,r7,24dc8 <__udivdi3+0x2c0>
   24c5c:	00bfffd4 	movui	r2,65535
   24c60:	11c0672e 	bgeu	r2,r7,24e00 <__udivdi3+0x2f8>
   24c64:	00804034 	movhi	r2,256
   24c68:	10bfffc4 	addi	r2,r2,-1
   24c6c:	11c10a36 	bltu	r2,r7,25098 <__udivdi3+0x590>
   24c70:	00800404 	movi	r2,16
   24c74:	3886d83a 	srl	r3,r7,r2
   24c78:	010000f4 	movhi	r4,3
   24c7c:	21263484 	addi	r4,r4,-26414
   24c80:	20c7883a 	add	r3,r4,r3
   24c84:	18c00003 	ldbu	r3,0(r3)
   24c88:	05c00804 	movi	r23,32
   24c8c:	1885883a 	add	r2,r3,r2
   24c90:	b8afc83a 	sub	r23,r23,r2
   24c94:	b800671e 	bne	r23,zero,24e34 <__udivdi3+0x32c>
   24c98:	3c010536 	bltu	r7,r16,250b0 <__udivdi3+0x5a8>
   24c9c:	9985403a 	cmpgeu	r2,r19,r6
   24ca0:	0007883a 	mov	r3,zero
   24ca4:	00004a06 	br	24dd0 <__udivdi3+0x2c8>
   24ca8:	3000041e 	bne	r6,zero,24cbc <__udivdi3+0x1b4>
   24cac:	000b883a 	mov	r5,zero
   24cb0:	01000044 	movi	r4,1
   24cb4:	00257c00 	call	257c0 <__udivsi3>
   24cb8:	1023883a 	mov	r17,r2
   24cbc:	00bfffd4 	movui	r2,65535
   24cc0:	1440532e 	bgeu	r2,r17,24e10 <__udivdi3+0x308>
   24cc4:	00804034 	movhi	r2,256
   24cc8:	10bfffc4 	addi	r2,r2,-1
   24ccc:	1440f436 	bltu	r2,r17,250a0 <__udivdi3+0x598>
   24cd0:	00800404 	movi	r2,16
   24cd4:	8886d83a 	srl	r3,r17,r2
   24cd8:	010000f4 	movhi	r4,3
   24cdc:	21263484 	addi	r4,r4,-26414
   24ce0:	20c7883a 	add	r3,r4,r3
   24ce4:	18c00003 	ldbu	r3,0(r3)
   24ce8:	1885883a 	add	r2,r3,r2
   24cec:	00c00804 	movi	r3,32
   24cf0:	1887c83a 	sub	r3,r3,r2
   24cf4:	1800a51e 	bne	r3,zero,24f8c <__udivdi3+0x484>
   24cf8:	882ad43a 	srli	r21,r17,16
   24cfc:	8461c83a 	sub	r16,r16,r17
   24d00:	8d3fffcc 	andi	r20,r17,65535
   24d04:	00c00044 	movi	r3,1
   24d08:	a80b883a 	mov	r5,r21
   24d0c:	8009883a 	mov	r4,r16
   24d10:	d8c00115 	stw	r3,4(sp)
   24d14:	00258240 	call	25824 <__umodsi3>
   24d18:	a80b883a 	mov	r5,r21
   24d1c:	8009883a 	mov	r4,r16
   24d20:	1027883a 	mov	r19,r2
   24d24:	00257c00 	call	257c0 <__udivsi3>
   24d28:	a00b883a 	mov	r5,r20
   24d2c:	1009883a 	mov	r4,r2
   24d30:	102d883a 	mov	r22,r2
   24d34:	002587c0 	call	2587c <__mulsi3>
   24d38:	9826943a 	slli	r19,r19,16
   24d3c:	900ed43a 	srli	r7,r18,16
   24d40:	d8c00117 	ldw	r3,4(sp)
   24d44:	3cceb03a 	or	r7,r7,r19
   24d48:	3880052e 	bgeu	r7,r2,24d60 <__udivdi3+0x258>
   24d4c:	3c4f883a 	add	r7,r7,r17
   24d50:	b13fffc4 	addi	r4,r22,-1
   24d54:	3c400136 	bltu	r7,r17,24d5c <__udivdi3+0x254>
   24d58:	3880e436 	bltu	r7,r2,250ec <__udivdi3+0x5e4>
   24d5c:	202d883a 	mov	r22,r4
   24d60:	38a1c83a 	sub	r16,r7,r2
   24d64:	8009883a 	mov	r4,r16
   24d68:	a80b883a 	mov	r5,r21
   24d6c:	d8c00115 	stw	r3,4(sp)
   24d70:	00258240 	call	25824 <__umodsi3>
   24d74:	1027883a 	mov	r19,r2
   24d78:	8009883a 	mov	r4,r16
   24d7c:	a80b883a 	mov	r5,r21
   24d80:	9826943a 	slli	r19,r19,16
   24d84:	00257c00 	call	257c0 <__udivsi3>
   24d88:	a00b883a 	mov	r5,r20
   24d8c:	1009883a 	mov	r4,r2
   24d90:	94bfffcc 	andi	r18,r18,65535
   24d94:	1021883a 	mov	r16,r2
   24d98:	94e4b03a 	or	r18,r18,r19
   24d9c:	002587c0 	call	2587c <__mulsi3>
   24da0:	d8c00117 	ldw	r3,4(sp)
   24da4:	9080052e 	bgeu	r18,r2,24dbc <__udivdi3+0x2b4>
   24da8:	8ca5883a 	add	r18,r17,r18
   24dac:	813fffc4 	addi	r4,r16,-1
   24db0:	9440ad36 	bltu	r18,r17,25068 <__udivdi3+0x560>
   24db4:	9080ac2e 	bgeu	r18,r2,25068 <__udivdi3+0x560>
   24db8:	843fff84 	addi	r16,r16,-2
   24dbc:	b004943a 	slli	r2,r22,16
   24dc0:	1404b03a 	or	r2,r2,r16
   24dc4:	00000206 	br	24dd0 <__udivdi3+0x2c8>
   24dc8:	0007883a 	mov	r3,zero
   24dcc:	0005883a 	mov	r2,zero
   24dd0:	dfc00b17 	ldw	ra,44(sp)
   24dd4:	df000a17 	ldw	fp,40(sp)
   24dd8:	ddc00917 	ldw	r23,36(sp)
   24ddc:	dd800817 	ldw	r22,32(sp)
   24de0:	dd400717 	ldw	r21,28(sp)
   24de4:	dd000617 	ldw	r20,24(sp)
   24de8:	dcc00517 	ldw	r19,20(sp)
   24dec:	dc800417 	ldw	r18,16(sp)
   24df0:	dc400317 	ldw	r17,12(sp)
   24df4:	dc000217 	ldw	r16,8(sp)
   24df8:	dec00c04 	addi	sp,sp,48
   24dfc:	f800283a 	ret
   24e00:	00803fc4 	movi	r2,255
   24e04:	11c5803a 	cmpltu	r2,r2,r7
   24e08:	100490fa 	slli	r2,r2,3
   24e0c:	003f9906 	br	24c74 <__alt_data_end+0xfffe6474>
   24e10:	00803fc4 	movi	r2,255
   24e14:	1445803a 	cmpltu	r2,r2,r17
   24e18:	100490fa 	slli	r2,r2,3
   24e1c:	003fad06 	br	24cd4 <__alt_data_end+0xfffe64d4>
   24e20:	00804034 	movhi	r2,256
   24e24:	10bfffc4 	addi	r2,r2,-1
   24e28:	11809f36 	bltu	r2,r6,250a8 <__udivdi3+0x5a0>
   24e2c:	00800404 	movi	r2,16
   24e30:	003f4c06 	br	24b64 <__alt_data_end+0xfffe6364>
   24e34:	3dce983a 	sll	r7,r7,r23
   24e38:	30b8d83a 	srl	fp,r6,r2
   24e3c:	80a2d83a 	srl	r17,r16,r2
   24e40:	35cc983a 	sll	r6,r6,r23
   24e44:	3f38b03a 	or	fp,r7,fp
   24e48:	e024d43a 	srli	r18,fp,16
   24e4c:	9884d83a 	srl	r2,r19,r2
   24e50:	85e0983a 	sll	r16,r16,r23
   24e54:	8809883a 	mov	r4,r17
   24e58:	900b883a 	mov	r5,r18
   24e5c:	d9800015 	stw	r6,0(sp)
   24e60:	1420b03a 	or	r16,r2,r16
   24e64:	00258240 	call	25824 <__umodsi3>
   24e68:	900b883a 	mov	r5,r18
   24e6c:	8809883a 	mov	r4,r17
   24e70:	1029883a 	mov	r20,r2
   24e74:	e5bfffcc 	andi	r22,fp,65535
   24e78:	00257c00 	call	257c0 <__udivsi3>
   24e7c:	100b883a 	mov	r5,r2
   24e80:	b009883a 	mov	r4,r22
   24e84:	102b883a 	mov	r21,r2
   24e88:	002587c0 	call	2587c <__mulsi3>
   24e8c:	a028943a 	slli	r20,r20,16
   24e90:	8006d43a 	srli	r3,r16,16
   24e94:	1d06b03a 	or	r3,r3,r20
   24e98:	1880042e 	bgeu	r3,r2,24eac <__udivdi3+0x3a4>
   24e9c:	1f07883a 	add	r3,r3,fp
   24ea0:	a93fffc4 	addi	r4,r21,-1
   24ea4:	1f00892e 	bgeu	r3,fp,250cc <__udivdi3+0x5c4>
   24ea8:	202b883a 	mov	r21,r4
   24eac:	18a3c83a 	sub	r17,r3,r2
   24eb0:	8809883a 	mov	r4,r17
   24eb4:	900b883a 	mov	r5,r18
   24eb8:	00258240 	call	25824 <__umodsi3>
   24ebc:	1029883a 	mov	r20,r2
   24ec0:	8809883a 	mov	r4,r17
   24ec4:	900b883a 	mov	r5,r18
   24ec8:	a028943a 	slli	r20,r20,16
   24ecc:	00257c00 	call	257c0 <__udivsi3>
   24ed0:	100b883a 	mov	r5,r2
   24ed4:	b009883a 	mov	r4,r22
   24ed8:	843fffcc 	andi	r16,r16,65535
   24edc:	1023883a 	mov	r17,r2
   24ee0:	8520b03a 	or	r16,r16,r20
   24ee4:	002587c0 	call	2587c <__mulsi3>
   24ee8:	8080042e 	bgeu	r16,r2,24efc <__udivdi3+0x3f4>
   24eec:	8721883a 	add	r16,r16,fp
   24ef0:	88ffffc4 	addi	r3,r17,-1
   24ef4:	8700712e 	bgeu	r16,fp,250bc <__udivdi3+0x5b4>
   24ef8:	1823883a 	mov	r17,r3
   24efc:	a80e943a 	slli	r7,r21,16
   24f00:	d8c00017 	ldw	r3,0(sp)
   24f04:	80a1c83a 	sub	r16,r16,r2
   24f08:	3c64b03a 	or	r18,r7,r17
   24f0c:	1d3fffcc 	andi	r20,r3,65535
   24f10:	9022d43a 	srli	r17,r18,16
   24f14:	95bfffcc 	andi	r22,r18,65535
   24f18:	a00b883a 	mov	r5,r20
   24f1c:	b009883a 	mov	r4,r22
   24f20:	182ad43a 	srli	r21,r3,16
   24f24:	002587c0 	call	2587c <__mulsi3>
   24f28:	a00b883a 	mov	r5,r20
   24f2c:	8809883a 	mov	r4,r17
   24f30:	1039883a 	mov	fp,r2
   24f34:	002587c0 	call	2587c <__mulsi3>
   24f38:	8809883a 	mov	r4,r17
   24f3c:	a80b883a 	mov	r5,r21
   24f40:	1029883a 	mov	r20,r2
   24f44:	002587c0 	call	2587c <__mulsi3>
   24f48:	a80b883a 	mov	r5,r21
   24f4c:	b009883a 	mov	r4,r22
   24f50:	1023883a 	mov	r17,r2
   24f54:	002587c0 	call	2587c <__mulsi3>
   24f58:	e006d43a 	srli	r3,fp,16
   24f5c:	1505883a 	add	r2,r2,r20
   24f60:	1887883a 	add	r3,r3,r2
   24f64:	1d00022e 	bgeu	r3,r20,24f70 <__udivdi3+0x468>
   24f68:	00800074 	movhi	r2,1
   24f6c:	88a3883a 	add	r17,r17,r2
   24f70:	1804d43a 	srli	r2,r3,16
   24f74:	1463883a 	add	r17,r2,r17
   24f78:	84404436 	bltu	r16,r17,2508c <__udivdi3+0x584>
   24f7c:	84403e26 	beq	r16,r17,25078 <__udivdi3+0x570>
   24f80:	9005883a 	mov	r2,r18
   24f84:	0007883a 	mov	r3,zero
   24f88:	003f9106 	br	24dd0 <__alt_data_end+0xfffe65d0>
   24f8c:	88e2983a 	sll	r17,r17,r3
   24f90:	80aed83a 	srl	r23,r16,r2
   24f94:	80e0983a 	sll	r16,r16,r3
   24f98:	882ad43a 	srli	r21,r17,16
   24f9c:	9884d83a 	srl	r2,r19,r2
   24fa0:	b809883a 	mov	r4,r23
   24fa4:	a80b883a 	mov	r5,r21
   24fa8:	98e4983a 	sll	r18,r19,r3
   24fac:	142cb03a 	or	r22,r2,r16
   24fb0:	00258240 	call	25824 <__umodsi3>
   24fb4:	b809883a 	mov	r4,r23
   24fb8:	a80b883a 	mov	r5,r21
   24fbc:	1027883a 	mov	r19,r2
   24fc0:	8d3fffcc 	andi	r20,r17,65535
   24fc4:	00257c00 	call	257c0 <__udivsi3>
   24fc8:	a009883a 	mov	r4,r20
   24fcc:	100b883a 	mov	r5,r2
   24fd0:	102f883a 	mov	r23,r2
   24fd4:	002587c0 	call	2587c <__mulsi3>
   24fd8:	9826943a 	slli	r19,r19,16
   24fdc:	b008d43a 	srli	r4,r22,16
   24fe0:	24c8b03a 	or	r4,r4,r19
   24fe4:	2080062e 	bgeu	r4,r2,25000 <__udivdi3+0x4f8>
   24fe8:	2449883a 	add	r4,r4,r17
   24fec:	b8ffffc4 	addi	r3,r23,-1
   24ff0:	24403c36 	bltu	r4,r17,250e4 <__udivdi3+0x5dc>
   24ff4:	20803b2e 	bgeu	r4,r2,250e4 <__udivdi3+0x5dc>
   24ff8:	bdffff84 	addi	r23,r23,-2
   24ffc:	2449883a 	add	r4,r4,r17
   25000:	20a1c83a 	sub	r16,r4,r2
   25004:	a80b883a 	mov	r5,r21
   25008:	8009883a 	mov	r4,r16
   2500c:	00258240 	call	25824 <__umodsi3>
   25010:	a80b883a 	mov	r5,r21
   25014:	8009883a 	mov	r4,r16
   25018:	1027883a 	mov	r19,r2
   2501c:	00257c00 	call	257c0 <__udivsi3>
   25020:	a009883a 	mov	r4,r20
   25024:	100b883a 	mov	r5,r2
   25028:	9826943a 	slli	r19,r19,16
   2502c:	1039883a 	mov	fp,r2
   25030:	002587c0 	call	2587c <__mulsi3>
   25034:	b13fffcc 	andi	r4,r22,65535
   25038:	24c8b03a 	or	r4,r4,r19
   2503c:	2080062e 	bgeu	r4,r2,25058 <__udivdi3+0x550>
   25040:	2449883a 	add	r4,r4,r17
   25044:	e0ffffc4 	addi	r3,fp,-1
   25048:	24402436 	bltu	r4,r17,250dc <__udivdi3+0x5d4>
   2504c:	2080232e 	bgeu	r4,r2,250dc <__udivdi3+0x5d4>
   25050:	e73fff84 	addi	fp,fp,-2
   25054:	2449883a 	add	r4,r4,r17
   25058:	b82e943a 	slli	r23,r23,16
   2505c:	20a1c83a 	sub	r16,r4,r2
   25060:	bf06b03a 	or	r3,r23,fp
   25064:	003f2806 	br	24d08 <__alt_data_end+0xfffe6508>
   25068:	2021883a 	mov	r16,r4
   2506c:	003f5306 	br	24dbc <__alt_data_end+0xfffe65bc>
   25070:	1821883a 	mov	r16,r3
   25074:	003ef406 	br	24c48 <__alt_data_end+0xfffe6448>
   25078:	1806943a 	slli	r3,r3,16
   2507c:	9de6983a 	sll	r19,r19,r23
   25080:	e73fffcc 	andi	fp,fp,65535
   25084:	1f07883a 	add	r3,r3,fp
   25088:	98ffbd2e 	bgeu	r19,r3,24f80 <__alt_data_end+0xfffe6780>
   2508c:	90bfffc4 	addi	r2,r18,-1
   25090:	0007883a 	mov	r3,zero
   25094:	003f4e06 	br	24dd0 <__alt_data_end+0xfffe65d0>
   25098:	00800604 	movi	r2,24
   2509c:	003ef506 	br	24c74 <__alt_data_end+0xfffe6474>
   250a0:	00800604 	movi	r2,24
   250a4:	003f0b06 	br	24cd4 <__alt_data_end+0xfffe64d4>
   250a8:	00800604 	movi	r2,24
   250ac:	003ead06 	br	24b64 <__alt_data_end+0xfffe6364>
   250b0:	0007883a 	mov	r3,zero
   250b4:	00800044 	movi	r2,1
   250b8:	003f4506 	br	24dd0 <__alt_data_end+0xfffe65d0>
   250bc:	80bf8e2e 	bgeu	r16,r2,24ef8 <__alt_data_end+0xfffe66f8>
   250c0:	8c7fff84 	addi	r17,r17,-2
   250c4:	8721883a 	add	r16,r16,fp
   250c8:	003f8c06 	br	24efc <__alt_data_end+0xfffe66fc>
   250cc:	18bf762e 	bgeu	r3,r2,24ea8 <__alt_data_end+0xfffe66a8>
   250d0:	ad7fff84 	addi	r21,r21,-2
   250d4:	1f07883a 	add	r3,r3,fp
   250d8:	003f7406 	br	24eac <__alt_data_end+0xfffe66ac>
   250dc:	1839883a 	mov	fp,r3
   250e0:	003fdd06 	br	25058 <__alt_data_end+0xfffe6858>
   250e4:	182f883a 	mov	r23,r3
   250e8:	003fc506 	br	25000 <__alt_data_end+0xfffe6800>
   250ec:	b5bfff84 	addi	r22,r22,-2
   250f0:	3c4f883a 	add	r7,r7,r17
   250f4:	003f1a06 	br	24d60 <__alt_data_end+0xfffe6560>
   250f8:	b5bfff84 	addi	r22,r22,-2
   250fc:	1c47883a 	add	r3,r3,r17
   25100:	003ebc06 	br	24bf4 <__alt_data_end+0xfffe63f4>

00025104 <__umoddi3>:
   25104:	defff304 	addi	sp,sp,-52
   25108:	df000b15 	stw	fp,44(sp)
   2510c:	dc400415 	stw	r17,16(sp)
   25110:	dc000315 	stw	r16,12(sp)
   25114:	dfc00c15 	stw	ra,48(sp)
   25118:	ddc00a15 	stw	r23,40(sp)
   2511c:	dd800915 	stw	r22,36(sp)
   25120:	dd400815 	stw	r21,32(sp)
   25124:	dd000715 	stw	r20,28(sp)
   25128:	dcc00615 	stw	r19,24(sp)
   2512c:	dc800515 	stw	r18,20(sp)
   25130:	2021883a 	mov	r16,r4
   25134:	2823883a 	mov	r17,r5
   25138:	2839883a 	mov	fp,r5
   2513c:	3800401e 	bne	r7,zero,25240 <__umoddi3+0x13c>
   25140:	3027883a 	mov	r19,r6
   25144:	2029883a 	mov	r20,r4
   25148:	2980552e 	bgeu	r5,r6,252a0 <__umoddi3+0x19c>
   2514c:	00bfffd4 	movui	r2,65535
   25150:	1180a236 	bltu	r2,r6,253dc <__umoddi3+0x2d8>
   25154:	01003fc4 	movi	r4,255
   25158:	2189803a 	cmpltu	r4,r4,r6
   2515c:	200890fa 	slli	r4,r4,3
   25160:	3104d83a 	srl	r2,r6,r4
   25164:	00c000f4 	movhi	r3,3
   25168:	18e63484 	addi	r3,r3,-26414
   2516c:	1885883a 	add	r2,r3,r2
   25170:	10c00003 	ldbu	r3,0(r2)
   25174:	00800804 	movi	r2,32
   25178:	1909883a 	add	r4,r3,r4
   2517c:	1125c83a 	sub	r18,r2,r4
   25180:	90000526 	beq	r18,zero,25198 <__umoddi3+0x94>
   25184:	8ca2983a 	sll	r17,r17,r18
   25188:	8108d83a 	srl	r4,r16,r4
   2518c:	34a6983a 	sll	r19,r6,r18
   25190:	84a8983a 	sll	r20,r16,r18
   25194:	2478b03a 	or	fp,r4,r17
   25198:	982cd43a 	srli	r22,r19,16
   2519c:	e009883a 	mov	r4,fp
   251a0:	9dffffcc 	andi	r23,r19,65535
   251a4:	b00b883a 	mov	r5,r22
   251a8:	00258240 	call	25824 <__umodsi3>
   251ac:	b00b883a 	mov	r5,r22
   251b0:	e009883a 	mov	r4,fp
   251b4:	102b883a 	mov	r21,r2
   251b8:	00257c00 	call	257c0 <__udivsi3>
   251bc:	100b883a 	mov	r5,r2
   251c0:	b809883a 	mov	r4,r23
   251c4:	002587c0 	call	2587c <__mulsi3>
   251c8:	a82a943a 	slli	r21,r21,16
   251cc:	a006d43a 	srli	r3,r20,16
   251d0:	1d46b03a 	or	r3,r3,r21
   251d4:	1880032e 	bgeu	r3,r2,251e4 <__umoddi3+0xe0>
   251d8:	1cc7883a 	add	r3,r3,r19
   251dc:	1cc00136 	bltu	r3,r19,251e4 <__umoddi3+0xe0>
   251e0:	18813136 	bltu	r3,r2,256a8 <__umoddi3+0x5a4>
   251e4:	18a1c83a 	sub	r16,r3,r2
   251e8:	b00b883a 	mov	r5,r22
   251ec:	8009883a 	mov	r4,r16
   251f0:	00258240 	call	25824 <__umodsi3>
   251f4:	b00b883a 	mov	r5,r22
   251f8:	8009883a 	mov	r4,r16
   251fc:	1023883a 	mov	r17,r2
   25200:	00257c00 	call	257c0 <__udivsi3>
   25204:	100b883a 	mov	r5,r2
   25208:	b809883a 	mov	r4,r23
   2520c:	8822943a 	slli	r17,r17,16
   25210:	002587c0 	call	2587c <__mulsi3>
   25214:	a0ffffcc 	andi	r3,r20,65535
   25218:	1c46b03a 	or	r3,r3,r17
   2521c:	1880042e 	bgeu	r3,r2,25230 <__umoddi3+0x12c>
   25220:	1cc7883a 	add	r3,r3,r19
   25224:	1cc00236 	bltu	r3,r19,25230 <__umoddi3+0x12c>
   25228:	1880012e 	bgeu	r3,r2,25230 <__umoddi3+0x12c>
   2522c:	1cc7883a 	add	r3,r3,r19
   25230:	1885c83a 	sub	r2,r3,r2
   25234:	1484d83a 	srl	r2,r2,r18
   25238:	0007883a 	mov	r3,zero
   2523c:	00005306 	br	2538c <__umoddi3+0x288>
   25240:	29c05036 	bltu	r5,r7,25384 <__umoddi3+0x280>
   25244:	00bfffd4 	movui	r2,65535
   25248:	11c05c2e 	bgeu	r2,r7,253bc <__umoddi3+0x2b8>
   2524c:	00804034 	movhi	r2,256
   25250:	10bfffc4 	addi	r2,r2,-1
   25254:	11c10636 	bltu	r2,r7,25670 <__umoddi3+0x56c>
   25258:	01000404 	movi	r4,16
   2525c:	3904d83a 	srl	r2,r7,r4
   25260:	00c000f4 	movhi	r3,3
   25264:	18e63484 	addi	r3,r3,-26414
   25268:	1885883a 	add	r2,r3,r2
   2526c:	14c00003 	ldbu	r19,0(r2)
   25270:	00c00804 	movi	r3,32
   25274:	9927883a 	add	r19,r19,r4
   25278:	1ce9c83a 	sub	r20,r3,r19
   2527c:	a0005c1e 	bne	r20,zero,253f0 <__umoddi3+0x2ec>
   25280:	3c400136 	bltu	r7,r17,25288 <__umoddi3+0x184>
   25284:	81810a36 	bltu	r16,r6,256b0 <__umoddi3+0x5ac>
   25288:	8185c83a 	sub	r2,r16,r6
   2528c:	89e3c83a 	sub	r17,r17,r7
   25290:	8089803a 	cmpltu	r4,r16,r2
   25294:	8939c83a 	sub	fp,r17,r4
   25298:	e007883a 	mov	r3,fp
   2529c:	00003b06 	br	2538c <__umoddi3+0x288>
   252a0:	3000041e 	bne	r6,zero,252b4 <__umoddi3+0x1b0>
   252a4:	000b883a 	mov	r5,zero
   252a8:	01000044 	movi	r4,1
   252ac:	00257c00 	call	257c0 <__udivsi3>
   252b0:	1027883a 	mov	r19,r2
   252b4:	00bfffd4 	movui	r2,65535
   252b8:	14c0442e 	bgeu	r2,r19,253cc <__umoddi3+0x2c8>
   252bc:	00804034 	movhi	r2,256
   252c0:	10bfffc4 	addi	r2,r2,-1
   252c4:	14c0ec36 	bltu	r2,r19,25678 <__umoddi3+0x574>
   252c8:	00800404 	movi	r2,16
   252cc:	9886d83a 	srl	r3,r19,r2
   252d0:	010000f4 	movhi	r4,3
   252d4:	21263484 	addi	r4,r4,-26414
   252d8:	20c7883a 	add	r3,r4,r3
   252dc:	18c00003 	ldbu	r3,0(r3)
   252e0:	1887883a 	add	r3,r3,r2
   252e4:	00800804 	movi	r2,32
   252e8:	10e5c83a 	sub	r18,r2,r3
   252ec:	9000ab1e 	bne	r18,zero,2559c <__umoddi3+0x498>
   252f0:	982cd43a 	srli	r22,r19,16
   252f4:	8ce3c83a 	sub	r17,r17,r19
   252f8:	9dffffcc 	andi	r23,r19,65535
   252fc:	b00b883a 	mov	r5,r22
   25300:	8809883a 	mov	r4,r17
   25304:	00258240 	call	25824 <__umodsi3>
   25308:	b00b883a 	mov	r5,r22
   2530c:	8809883a 	mov	r4,r17
   25310:	102b883a 	mov	r21,r2
   25314:	00257c00 	call	257c0 <__udivsi3>
   25318:	b80b883a 	mov	r5,r23
   2531c:	1009883a 	mov	r4,r2
   25320:	002587c0 	call	2587c <__mulsi3>
   25324:	a82a943a 	slli	r21,r21,16
   25328:	a006d43a 	srli	r3,r20,16
   2532c:	1d46b03a 	or	r3,r3,r21
   25330:	1880042e 	bgeu	r3,r2,25344 <__umoddi3+0x240>
   25334:	1cc7883a 	add	r3,r3,r19
   25338:	1cc00236 	bltu	r3,r19,25344 <__umoddi3+0x240>
   2533c:	1880012e 	bgeu	r3,r2,25344 <__umoddi3+0x240>
   25340:	1cc7883a 	add	r3,r3,r19
   25344:	18a1c83a 	sub	r16,r3,r2
   25348:	b00b883a 	mov	r5,r22
   2534c:	8009883a 	mov	r4,r16
   25350:	00258240 	call	25824 <__umodsi3>
   25354:	1023883a 	mov	r17,r2
   25358:	b00b883a 	mov	r5,r22
   2535c:	8009883a 	mov	r4,r16
   25360:	00257c00 	call	257c0 <__udivsi3>
   25364:	8822943a 	slli	r17,r17,16
   25368:	b80b883a 	mov	r5,r23
   2536c:	1009883a 	mov	r4,r2
   25370:	002587c0 	call	2587c <__mulsi3>
   25374:	a53fffcc 	andi	r20,r20,65535
   25378:	a446b03a 	or	r3,r20,r17
   2537c:	18bfac2e 	bgeu	r3,r2,25230 <__alt_data_end+0xfffe6a30>
   25380:	003fa706 	br	25220 <__alt_data_end+0xfffe6a20>
   25384:	2005883a 	mov	r2,r4
   25388:	2807883a 	mov	r3,r5
   2538c:	dfc00c17 	ldw	ra,48(sp)
   25390:	df000b17 	ldw	fp,44(sp)
   25394:	ddc00a17 	ldw	r23,40(sp)
   25398:	dd800917 	ldw	r22,36(sp)
   2539c:	dd400817 	ldw	r21,32(sp)
   253a0:	dd000717 	ldw	r20,28(sp)
   253a4:	dcc00617 	ldw	r19,24(sp)
   253a8:	dc800517 	ldw	r18,20(sp)
   253ac:	dc400417 	ldw	r17,16(sp)
   253b0:	dc000317 	ldw	r16,12(sp)
   253b4:	dec00d04 	addi	sp,sp,52
   253b8:	f800283a 	ret
   253bc:	04c03fc4 	movi	r19,255
   253c0:	99c9803a 	cmpltu	r4,r19,r7
   253c4:	200890fa 	slli	r4,r4,3
   253c8:	003fa406 	br	2525c <__alt_data_end+0xfffe6a5c>
   253cc:	00803fc4 	movi	r2,255
   253d0:	14c5803a 	cmpltu	r2,r2,r19
   253d4:	100490fa 	slli	r2,r2,3
   253d8:	003fbc06 	br	252cc <__alt_data_end+0xfffe6acc>
   253dc:	00804034 	movhi	r2,256
   253e0:	10bfffc4 	addi	r2,r2,-1
   253e4:	1180a636 	bltu	r2,r6,25680 <__umoddi3+0x57c>
   253e8:	01000404 	movi	r4,16
   253ec:	003f5c06 	br	25160 <__alt_data_end+0xfffe6960>
   253f0:	3d0e983a 	sll	r7,r7,r20
   253f4:	34ead83a 	srl	r21,r6,r19
   253f8:	8cc6d83a 	srl	r3,r17,r19
   253fc:	8d10983a 	sll	r8,r17,r20
   25400:	3d6ab03a 	or	r21,r7,r21
   25404:	a82cd43a 	srli	r22,r21,16
   25408:	84e2d83a 	srl	r17,r16,r19
   2540c:	1809883a 	mov	r4,r3
   25410:	b00b883a 	mov	r5,r22
   25414:	8a22b03a 	or	r17,r17,r8
   25418:	3524983a 	sll	r18,r6,r20
   2541c:	dc400015 	stw	r17,0(sp)
   25420:	d8c00115 	stw	r3,4(sp)
   25424:	00258240 	call	25824 <__umodsi3>
   25428:	d8c00117 	ldw	r3,4(sp)
   2542c:	b00b883a 	mov	r5,r22
   25430:	1039883a 	mov	fp,r2
   25434:	1809883a 	mov	r4,r3
   25438:	00257c00 	call	257c0 <__udivsi3>
   2543c:	adffffcc 	andi	r23,r21,65535
   25440:	100b883a 	mov	r5,r2
   25444:	b809883a 	mov	r4,r23
   25448:	1023883a 	mov	r17,r2
   2544c:	002587c0 	call	2587c <__mulsi3>
   25450:	d9400017 	ldw	r5,0(sp)
   25454:	e008943a 	slli	r4,fp,16
   25458:	8520983a 	sll	r16,r16,r20
   2545c:	2806d43a 	srli	r3,r5,16
   25460:	1906b03a 	or	r3,r3,r4
   25464:	1880042e 	bgeu	r3,r2,25478 <__umoddi3+0x374>
   25468:	1d47883a 	add	r3,r3,r21
   2546c:	893fffc4 	addi	r4,r17,-1
   25470:	1d40892e 	bgeu	r3,r21,25698 <__umoddi3+0x594>
   25474:	2023883a 	mov	r17,r4
   25478:	18b9c83a 	sub	fp,r3,r2
   2547c:	b00b883a 	mov	r5,r22
   25480:	e009883a 	mov	r4,fp
   25484:	00258240 	call	25824 <__umodsi3>
   25488:	b00b883a 	mov	r5,r22
   2548c:	e009883a 	mov	r4,fp
   25490:	d8800215 	stw	r2,8(sp)
   25494:	00257c00 	call	257c0 <__udivsi3>
   25498:	100b883a 	mov	r5,r2
   2549c:	b809883a 	mov	r4,r23
   254a0:	102d883a 	mov	r22,r2
   254a4:	002587c0 	call	2587c <__mulsi3>
   254a8:	d9800217 	ldw	r6,8(sp)
   254ac:	d8c00017 	ldw	r3,0(sp)
   254b0:	300c943a 	slli	r6,r6,16
   254b4:	1a3fffcc 	andi	r8,r3,65535
   254b8:	4190b03a 	or	r8,r8,r6
   254bc:	4080042e 	bgeu	r8,r2,254d0 <__umoddi3+0x3cc>
   254c0:	4551883a 	add	r8,r8,r21
   254c4:	b0ffffc4 	addi	r3,r22,-1
   254c8:	45406f2e 	bgeu	r8,r21,25688 <__umoddi3+0x584>
   254cc:	182d883a 	mov	r22,r3
   254d0:	880e943a 	slli	r7,r17,16
   254d4:	9006d43a 	srli	r3,r18,16
   254d8:	91bfffcc 	andi	r6,r18,65535
   254dc:	3dacb03a 	or	r22,r7,r22
   254e0:	b02ed43a 	srli	r23,r22,16
   254e4:	b5bfffcc 	andi	r22,r22,65535
   254e8:	300b883a 	mov	r5,r6
   254ec:	b009883a 	mov	r4,r22
   254f0:	40a3c83a 	sub	r17,r8,r2
   254f4:	d8c00115 	stw	r3,4(sp)
   254f8:	d9800215 	stw	r6,8(sp)
   254fc:	002587c0 	call	2587c <__mulsi3>
   25500:	d9800217 	ldw	r6,8(sp)
   25504:	b809883a 	mov	r4,r23
   25508:	1039883a 	mov	fp,r2
   2550c:	300b883a 	mov	r5,r6
   25510:	002587c0 	call	2587c <__mulsi3>
   25514:	d8c00117 	ldw	r3,4(sp)
   25518:	b809883a 	mov	r4,r23
   2551c:	d8800215 	stw	r2,8(sp)
   25520:	180b883a 	mov	r5,r3
   25524:	002587c0 	call	2587c <__mulsi3>
   25528:	d8c00117 	ldw	r3,4(sp)
   2552c:	b009883a 	mov	r4,r22
   25530:	102f883a 	mov	r23,r2
   25534:	180b883a 	mov	r5,r3
   25538:	002587c0 	call	2587c <__mulsi3>
   2553c:	d9800217 	ldw	r6,8(sp)
   25540:	e006d43a 	srli	r3,fp,16
   25544:	1185883a 	add	r2,r2,r6
   25548:	1885883a 	add	r2,r3,r2
   2554c:	1180022e 	bgeu	r2,r6,25558 <__umoddi3+0x454>
   25550:	00c00074 	movhi	r3,1
   25554:	b8ef883a 	add	r23,r23,r3
   25558:	1006d43a 	srli	r3,r2,16
   2555c:	1004943a 	slli	r2,r2,16
   25560:	e73fffcc 	andi	fp,fp,65535
   25564:	1dc7883a 	add	r3,r3,r23
   25568:	1739883a 	add	fp,r2,fp
   2556c:	88c03a36 	bltu	r17,r3,25658 <__umoddi3+0x554>
   25570:	88c05126 	beq	r17,r3,256b8 <__umoddi3+0x5b4>
   25574:	88c9c83a 	sub	r4,r17,r3
   25578:	e00f883a 	mov	r7,fp
   2557c:	81cfc83a 	sub	r7,r16,r7
   25580:	81c7803a 	cmpltu	r3,r16,r7
   25584:	20c7c83a 	sub	r3,r4,r3
   25588:	1cc4983a 	sll	r2,r3,r19
   2558c:	3d0ed83a 	srl	r7,r7,r20
   25590:	1d06d83a 	srl	r3,r3,r20
   25594:	11c4b03a 	or	r2,r2,r7
   25598:	003f7c06 	br	2538c <__alt_data_end+0xfffe6b8c>
   2559c:	9ca6983a 	sll	r19,r19,r18
   255a0:	88f8d83a 	srl	fp,r17,r3
   255a4:	80c4d83a 	srl	r2,r16,r3
   255a8:	982cd43a 	srli	r22,r19,16
   255ac:	8ca2983a 	sll	r17,r17,r18
   255b0:	e009883a 	mov	r4,fp
   255b4:	b00b883a 	mov	r5,r22
   255b8:	146ab03a 	or	r21,r2,r17
   255bc:	00258240 	call	25824 <__umodsi3>
   255c0:	b00b883a 	mov	r5,r22
   255c4:	e009883a 	mov	r4,fp
   255c8:	1029883a 	mov	r20,r2
   255cc:	9dffffcc 	andi	r23,r19,65535
   255d0:	00257c00 	call	257c0 <__udivsi3>
   255d4:	b809883a 	mov	r4,r23
   255d8:	100b883a 	mov	r5,r2
   255dc:	002587c0 	call	2587c <__mulsi3>
   255e0:	a008943a 	slli	r4,r20,16
   255e4:	a806d43a 	srli	r3,r21,16
   255e8:	84a8983a 	sll	r20,r16,r18
   255ec:	1906b03a 	or	r3,r3,r4
   255f0:	1880042e 	bgeu	r3,r2,25604 <__umoddi3+0x500>
   255f4:	1cc7883a 	add	r3,r3,r19
   255f8:	1cc00236 	bltu	r3,r19,25604 <__umoddi3+0x500>
   255fc:	1880012e 	bgeu	r3,r2,25604 <__umoddi3+0x500>
   25600:	1cc7883a 	add	r3,r3,r19
   25604:	18a3c83a 	sub	r17,r3,r2
   25608:	b00b883a 	mov	r5,r22
   2560c:	8809883a 	mov	r4,r17
   25610:	00258240 	call	25824 <__umodsi3>
   25614:	b00b883a 	mov	r5,r22
   25618:	8809883a 	mov	r4,r17
   2561c:	1021883a 	mov	r16,r2
   25620:	00257c00 	call	257c0 <__udivsi3>
   25624:	100b883a 	mov	r5,r2
   25628:	b809883a 	mov	r4,r23
   2562c:	8020943a 	slli	r16,r16,16
   25630:	002587c0 	call	2587c <__mulsi3>
   25634:	a8ffffcc 	andi	r3,r21,65535
   25638:	1c06b03a 	or	r3,r3,r16
   2563c:	1880042e 	bgeu	r3,r2,25650 <__umoddi3+0x54c>
   25640:	1cc7883a 	add	r3,r3,r19
   25644:	1cc00236 	bltu	r3,r19,25650 <__umoddi3+0x54c>
   25648:	1880012e 	bgeu	r3,r2,25650 <__umoddi3+0x54c>
   2564c:	1cc7883a 	add	r3,r3,r19
   25650:	18a3c83a 	sub	r17,r3,r2
   25654:	003f2906 	br	252fc <__alt_data_end+0xfffe6afc>
   25658:	e48fc83a 	sub	r7,fp,r18
   2565c:	1d49c83a 	sub	r4,r3,r21
   25660:	e1f9803a 	cmpltu	fp,fp,r7
   25664:	2739c83a 	sub	fp,r4,fp
   25668:	8f09c83a 	sub	r4,r17,fp
   2566c:	003fc306 	br	2557c <__alt_data_end+0xfffe6d7c>
   25670:	01000604 	movi	r4,24
   25674:	003ef906 	br	2525c <__alt_data_end+0xfffe6a5c>
   25678:	00800604 	movi	r2,24
   2567c:	003f1306 	br	252cc <__alt_data_end+0xfffe6acc>
   25680:	01000604 	movi	r4,24
   25684:	003eb606 	br	25160 <__alt_data_end+0xfffe6960>
   25688:	40bf902e 	bgeu	r8,r2,254cc <__alt_data_end+0xfffe6ccc>
   2568c:	b5bfff84 	addi	r22,r22,-2
   25690:	4551883a 	add	r8,r8,r21
   25694:	003f8e06 	br	254d0 <__alt_data_end+0xfffe6cd0>
   25698:	18bf762e 	bgeu	r3,r2,25474 <__alt_data_end+0xfffe6c74>
   2569c:	8c7fff84 	addi	r17,r17,-2
   256a0:	1d47883a 	add	r3,r3,r21
   256a4:	003f7406 	br	25478 <__alt_data_end+0xfffe6c78>
   256a8:	1cc7883a 	add	r3,r3,r19
   256ac:	003ecd06 	br	251e4 <__alt_data_end+0xfffe69e4>
   256b0:	8005883a 	mov	r2,r16
   256b4:	003ef806 	br	25298 <__alt_data_end+0xfffe6a98>
   256b8:	873fe736 	bltu	r16,fp,25658 <__alt_data_end+0xfffe6e58>
   256bc:	e00f883a 	mov	r7,fp
   256c0:	0009883a 	mov	r4,zero
   256c4:	003fad06 	br	2557c <__alt_data_end+0xfffe6d7c>

000256c8 <__divsi3>:
   256c8:	20001b16 	blt	r4,zero,25738 <__divsi3+0x70>
   256cc:	000f883a 	mov	r7,zero
   256d0:	28001616 	blt	r5,zero,2572c <__divsi3+0x64>
   256d4:	200d883a 	mov	r6,r4
   256d8:	29001a2e 	bgeu	r5,r4,25744 <__divsi3+0x7c>
   256dc:	00800804 	movi	r2,32
   256e0:	00c00044 	movi	r3,1
   256e4:	00000106 	br	256ec <__divsi3+0x24>
   256e8:	10000d26 	beq	r2,zero,25720 <__divsi3+0x58>
   256ec:	294b883a 	add	r5,r5,r5
   256f0:	10bfffc4 	addi	r2,r2,-1
   256f4:	18c7883a 	add	r3,r3,r3
   256f8:	293ffb36 	bltu	r5,r4,256e8 <__alt_data_end+0xfffe6ee8>
   256fc:	0005883a 	mov	r2,zero
   25700:	18000726 	beq	r3,zero,25720 <__divsi3+0x58>
   25704:	0005883a 	mov	r2,zero
   25708:	31400236 	bltu	r6,r5,25714 <__divsi3+0x4c>
   2570c:	314dc83a 	sub	r6,r6,r5
   25710:	10c4b03a 	or	r2,r2,r3
   25714:	1806d07a 	srli	r3,r3,1
   25718:	280ad07a 	srli	r5,r5,1
   2571c:	183ffa1e 	bne	r3,zero,25708 <__alt_data_end+0xfffe6f08>
   25720:	38000126 	beq	r7,zero,25728 <__divsi3+0x60>
   25724:	0085c83a 	sub	r2,zero,r2
   25728:	f800283a 	ret
   2572c:	014bc83a 	sub	r5,zero,r5
   25730:	39c0005c 	xori	r7,r7,1
   25734:	003fe706 	br	256d4 <__alt_data_end+0xfffe6ed4>
   25738:	0109c83a 	sub	r4,zero,r4
   2573c:	01c00044 	movi	r7,1
   25740:	003fe306 	br	256d0 <__alt_data_end+0xfffe6ed0>
   25744:	00c00044 	movi	r3,1
   25748:	003fee06 	br	25704 <__alt_data_end+0xfffe6f04>

0002574c <__modsi3>:
   2574c:	20001716 	blt	r4,zero,257ac <__modsi3+0x60>
   25750:	000f883a 	mov	r7,zero
   25754:	2005883a 	mov	r2,r4
   25758:	28001216 	blt	r5,zero,257a4 <__modsi3+0x58>
   2575c:	2900162e 	bgeu	r5,r4,257b8 <__modsi3+0x6c>
   25760:	01800804 	movi	r6,32
   25764:	00c00044 	movi	r3,1
   25768:	00000106 	br	25770 <__modsi3+0x24>
   2576c:	30000a26 	beq	r6,zero,25798 <__modsi3+0x4c>
   25770:	294b883a 	add	r5,r5,r5
   25774:	31bfffc4 	addi	r6,r6,-1
   25778:	18c7883a 	add	r3,r3,r3
   2577c:	293ffb36 	bltu	r5,r4,2576c <__alt_data_end+0xfffe6f6c>
   25780:	18000526 	beq	r3,zero,25798 <__modsi3+0x4c>
   25784:	1806d07a 	srli	r3,r3,1
   25788:	11400136 	bltu	r2,r5,25790 <__modsi3+0x44>
   2578c:	1145c83a 	sub	r2,r2,r5
   25790:	280ad07a 	srli	r5,r5,1
   25794:	183ffb1e 	bne	r3,zero,25784 <__alt_data_end+0xfffe6f84>
   25798:	38000126 	beq	r7,zero,257a0 <__modsi3+0x54>
   2579c:	0085c83a 	sub	r2,zero,r2
   257a0:	f800283a 	ret
   257a4:	014bc83a 	sub	r5,zero,r5
   257a8:	003fec06 	br	2575c <__alt_data_end+0xfffe6f5c>
   257ac:	0109c83a 	sub	r4,zero,r4
   257b0:	01c00044 	movi	r7,1
   257b4:	003fe706 	br	25754 <__alt_data_end+0xfffe6f54>
   257b8:	00c00044 	movi	r3,1
   257bc:	003ff106 	br	25784 <__alt_data_end+0xfffe6f84>

000257c0 <__udivsi3>:
   257c0:	200d883a 	mov	r6,r4
   257c4:	2900152e 	bgeu	r5,r4,2581c <__udivsi3+0x5c>
   257c8:	28001416 	blt	r5,zero,2581c <__udivsi3+0x5c>
   257cc:	00800804 	movi	r2,32
   257d0:	00c00044 	movi	r3,1
   257d4:	00000206 	br	257e0 <__udivsi3+0x20>
   257d8:	10000e26 	beq	r2,zero,25814 <__udivsi3+0x54>
   257dc:	28000516 	blt	r5,zero,257f4 <__udivsi3+0x34>
   257e0:	294b883a 	add	r5,r5,r5
   257e4:	10bfffc4 	addi	r2,r2,-1
   257e8:	18c7883a 	add	r3,r3,r3
   257ec:	293ffa36 	bltu	r5,r4,257d8 <__alt_data_end+0xfffe6fd8>
   257f0:	18000826 	beq	r3,zero,25814 <__udivsi3+0x54>
   257f4:	0005883a 	mov	r2,zero
   257f8:	31400236 	bltu	r6,r5,25804 <__udivsi3+0x44>
   257fc:	314dc83a 	sub	r6,r6,r5
   25800:	10c4b03a 	or	r2,r2,r3
   25804:	1806d07a 	srli	r3,r3,1
   25808:	280ad07a 	srli	r5,r5,1
   2580c:	183ffa1e 	bne	r3,zero,257f8 <__alt_data_end+0xfffe6ff8>
   25810:	f800283a 	ret
   25814:	0005883a 	mov	r2,zero
   25818:	f800283a 	ret
   2581c:	00c00044 	movi	r3,1
   25820:	003ff406 	br	257f4 <__alt_data_end+0xfffe6ff4>

00025824 <__umodsi3>:
   25824:	2005883a 	mov	r2,r4
   25828:	2900122e 	bgeu	r5,r4,25874 <__umodsi3+0x50>
   2582c:	28001116 	blt	r5,zero,25874 <__umodsi3+0x50>
   25830:	01800804 	movi	r6,32
   25834:	00c00044 	movi	r3,1
   25838:	00000206 	br	25844 <__umodsi3+0x20>
   2583c:	30000c26 	beq	r6,zero,25870 <__umodsi3+0x4c>
   25840:	28000516 	blt	r5,zero,25858 <__umodsi3+0x34>
   25844:	294b883a 	add	r5,r5,r5
   25848:	31bfffc4 	addi	r6,r6,-1
   2584c:	18c7883a 	add	r3,r3,r3
   25850:	293ffa36 	bltu	r5,r4,2583c <__alt_data_end+0xfffe703c>
   25854:	18000626 	beq	r3,zero,25870 <__umodsi3+0x4c>
   25858:	1806d07a 	srli	r3,r3,1
   2585c:	11400136 	bltu	r2,r5,25864 <__umodsi3+0x40>
   25860:	1145c83a 	sub	r2,r2,r5
   25864:	280ad07a 	srli	r5,r5,1
   25868:	183ffb1e 	bne	r3,zero,25858 <__alt_data_end+0xfffe7058>
   2586c:	f800283a 	ret
   25870:	f800283a 	ret
   25874:	00c00044 	movi	r3,1
   25878:	003ff706 	br	25858 <__alt_data_end+0xfffe7058>

0002587c <__mulsi3>:
   2587c:	0005883a 	mov	r2,zero
   25880:	20000726 	beq	r4,zero,258a0 <__mulsi3+0x24>
   25884:	20c0004c 	andi	r3,r4,1
   25888:	2008d07a 	srli	r4,r4,1
   2588c:	18000126 	beq	r3,zero,25894 <__mulsi3+0x18>
   25890:	1145883a 	add	r2,r2,r5
   25894:	294b883a 	add	r5,r5,r5
   25898:	203ffa1e 	bne	r4,zero,25884 <__alt_data_end+0xfffe7084>
   2589c:	f800283a 	ret
   258a0:	f800283a 	ret

000258a4 <__eqsf2>:
   258a4:	2006d5fa 	srli	r3,r4,23
   258a8:	280cd5fa 	srli	r6,r5,23
   258ac:	01c02034 	movhi	r7,128
   258b0:	39ffffc4 	addi	r7,r7,-1
   258b4:	18c03fcc 	andi	r3,r3,255
   258b8:	02003fc4 	movi	r8,255
   258bc:	3904703a 	and	r2,r7,r4
   258c0:	31803fcc 	andi	r6,r6,255
   258c4:	394e703a 	and	r7,r7,r5
   258c8:	2008d7fa 	srli	r4,r4,31
   258cc:	280ad7fa 	srli	r5,r5,31
   258d0:	1a000d26 	beq	r3,r8,25908 <__eqsf2+0x64>
   258d4:	02003fc4 	movi	r8,255
   258d8:	32000826 	beq	r6,r8,258fc <__eqsf2+0x58>
   258dc:	19800226 	beq	r3,r6,258e8 <__eqsf2+0x44>
   258e0:	00800044 	movi	r2,1
   258e4:	f800283a 	ret
   258e8:	11fffd1e 	bne	r2,r7,258e0 <__alt_data_end+0xfffe70e0>
   258ec:	21400926 	beq	r4,r5,25914 <__eqsf2+0x70>
   258f0:	183ffb1e 	bne	r3,zero,258e0 <__alt_data_end+0xfffe70e0>
   258f4:	1004c03a 	cmpne	r2,r2,zero
   258f8:	f800283a 	ret
   258fc:	383ff726 	beq	r7,zero,258dc <__alt_data_end+0xfffe70dc>
   25900:	00800044 	movi	r2,1
   25904:	f800283a 	ret
   25908:	103ff226 	beq	r2,zero,258d4 <__alt_data_end+0xfffe70d4>
   2590c:	00800044 	movi	r2,1
   25910:	f800283a 	ret
   25914:	0005883a 	mov	r2,zero
   25918:	f800283a 	ret

0002591c <__gesf2>:
   2591c:	2004d5fa 	srli	r2,r4,23
   25920:	2806d5fa 	srli	r3,r5,23
   25924:	01802034 	movhi	r6,128
   25928:	31bfffc4 	addi	r6,r6,-1
   2592c:	10803fcc 	andi	r2,r2,255
   25930:	01c03fc4 	movi	r7,255
   25934:	3110703a 	and	r8,r6,r4
   25938:	18c03fcc 	andi	r3,r3,255
   2593c:	314c703a 	and	r6,r6,r5
   25940:	2008d7fa 	srli	r4,r4,31
   25944:	280ad7fa 	srli	r5,r5,31
   25948:	11c01926 	beq	r2,r7,259b0 <__gesf2+0x94>
   2594c:	01c03fc4 	movi	r7,255
   25950:	19c00f26 	beq	r3,r7,25990 <__gesf2+0x74>
   25954:	1000061e 	bne	r2,zero,25970 <__gesf2+0x54>
   25958:	400f003a 	cmpeq	r7,r8,zero
   2595c:	1800071e 	bne	r3,zero,2597c <__gesf2+0x60>
   25960:	3000061e 	bne	r6,zero,2597c <__gesf2+0x60>
   25964:	0005883a 	mov	r2,zero
   25968:	40000e1e 	bne	r8,zero,259a4 <__gesf2+0x88>
   2596c:	f800283a 	ret
   25970:	18000a1e 	bne	r3,zero,2599c <__gesf2+0x80>
   25974:	30000b26 	beq	r6,zero,259a4 <__gesf2+0x88>
   25978:	000f883a 	mov	r7,zero
   2597c:	29403fcc 	andi	r5,r5,255
   25980:	38000726 	beq	r7,zero,259a0 <__gesf2+0x84>
   25984:	28000826 	beq	r5,zero,259a8 <__gesf2+0x8c>
   25988:	00800044 	movi	r2,1
   2598c:	f800283a 	ret
   25990:	303ff026 	beq	r6,zero,25954 <__alt_data_end+0xfffe7154>
   25994:	00bfff84 	movi	r2,-2
   25998:	f800283a 	ret
   2599c:	29403fcc 	andi	r5,r5,255
   259a0:	21400526 	beq	r4,r5,259b8 <__gesf2+0x9c>
   259a4:	203ff826 	beq	r4,zero,25988 <__alt_data_end+0xfffe7188>
   259a8:	00bfffc4 	movi	r2,-1
   259ac:	f800283a 	ret
   259b0:	403fe626 	beq	r8,zero,2594c <__alt_data_end+0xfffe714c>
   259b4:	003ff706 	br	25994 <__alt_data_end+0xfffe7194>
   259b8:	18bffa16 	blt	r3,r2,259a4 <__alt_data_end+0xfffe71a4>
   259bc:	10c00216 	blt	r2,r3,259c8 <__gesf2+0xac>
   259c0:	323ff836 	bltu	r6,r8,259a4 <__alt_data_end+0xfffe71a4>
   259c4:	4180022e 	bgeu	r8,r6,259d0 <__gesf2+0xb4>
   259c8:	203fef1e 	bne	r4,zero,25988 <__alt_data_end+0xfffe7188>
   259cc:	003ff606 	br	259a8 <__alt_data_end+0xfffe71a8>
   259d0:	0005883a 	mov	r2,zero
   259d4:	f800283a 	ret

000259d8 <__lesf2>:
   259d8:	2004d5fa 	srli	r2,r4,23
   259dc:	280cd5fa 	srli	r6,r5,23
   259e0:	00c02034 	movhi	r3,128
   259e4:	18ffffc4 	addi	r3,r3,-1
   259e8:	10803fcc 	andi	r2,r2,255
   259ec:	01c03fc4 	movi	r7,255
   259f0:	1910703a 	and	r8,r3,r4
   259f4:	31803fcc 	andi	r6,r6,255
   259f8:	1946703a 	and	r3,r3,r5
   259fc:	2008d7fa 	srli	r4,r4,31
   25a00:	280ad7fa 	srli	r5,r5,31
   25a04:	11c01b26 	beq	r2,r7,25a74 <__lesf2+0x9c>
   25a08:	01c03fc4 	movi	r7,255
   25a0c:	31c01126 	beq	r6,r7,25a54 <__lesf2+0x7c>
   25a10:	1000071e 	bne	r2,zero,25a30 <__lesf2+0x58>
   25a14:	400f003a 	cmpeq	r7,r8,zero
   25a18:	21003fcc 	andi	r4,r4,255
   25a1c:	3000081e 	bne	r6,zero,25a40 <__lesf2+0x68>
   25a20:	1800071e 	bne	r3,zero,25a40 <__lesf2+0x68>
   25a24:	0005883a 	mov	r2,zero
   25a28:	40000f1e 	bne	r8,zero,25a68 <__lesf2+0x90>
   25a2c:	f800283a 	ret
   25a30:	21003fcc 	andi	r4,r4,255
   25a34:	30000a1e 	bne	r6,zero,25a60 <__lesf2+0x88>
   25a38:	18000b26 	beq	r3,zero,25a68 <__lesf2+0x90>
   25a3c:	000f883a 	mov	r7,zero
   25a40:	29403fcc 	andi	r5,r5,255
   25a44:	38000726 	beq	r7,zero,25a64 <__lesf2+0x8c>
   25a48:	28000826 	beq	r5,zero,25a6c <__lesf2+0x94>
   25a4c:	00800044 	movi	r2,1
   25a50:	f800283a 	ret
   25a54:	183fee26 	beq	r3,zero,25a10 <__alt_data_end+0xfffe7210>
   25a58:	00800084 	movi	r2,2
   25a5c:	f800283a 	ret
   25a60:	29403fcc 	andi	r5,r5,255
   25a64:	21400626 	beq	r4,r5,25a80 <__lesf2+0xa8>
   25a68:	203ff826 	beq	r4,zero,25a4c <__alt_data_end+0xfffe724c>
   25a6c:	00bfffc4 	movi	r2,-1
   25a70:	f800283a 	ret
   25a74:	403fe426 	beq	r8,zero,25a08 <__alt_data_end+0xfffe7208>
   25a78:	00800084 	movi	r2,2
   25a7c:	f800283a 	ret
   25a80:	30bff916 	blt	r6,r2,25a68 <__alt_data_end+0xfffe7268>
   25a84:	11800216 	blt	r2,r6,25a90 <__lesf2+0xb8>
   25a88:	1a3ff736 	bltu	r3,r8,25a68 <__alt_data_end+0xfffe7268>
   25a8c:	40c0022e 	bgeu	r8,r3,25a98 <__lesf2+0xc0>
   25a90:	203fee1e 	bne	r4,zero,25a4c <__alt_data_end+0xfffe724c>
   25a94:	003ff506 	br	25a6c <__alt_data_end+0xfffe726c>
   25a98:	0005883a 	mov	r2,zero
   25a9c:	f800283a 	ret

00025aa0 <__adddf3>:
   25aa0:	02c00434 	movhi	r11,16
   25aa4:	5affffc4 	addi	r11,r11,-1
   25aa8:	2806d7fa 	srli	r3,r5,31
   25aac:	2ad4703a 	and	r10,r5,r11
   25ab0:	3ad2703a 	and	r9,r7,r11
   25ab4:	3804d53a 	srli	r2,r7,20
   25ab8:	3018d77a 	srli	r12,r6,29
   25abc:	280ad53a 	srli	r5,r5,20
   25ac0:	501490fa 	slli	r10,r10,3
   25ac4:	2010d77a 	srli	r8,r4,29
   25ac8:	481290fa 	slli	r9,r9,3
   25acc:	380ed7fa 	srli	r7,r7,31
   25ad0:	defffb04 	addi	sp,sp,-20
   25ad4:	dc800215 	stw	r18,8(sp)
   25ad8:	dc400115 	stw	r17,4(sp)
   25adc:	dc000015 	stw	r16,0(sp)
   25ae0:	dfc00415 	stw	ra,16(sp)
   25ae4:	dcc00315 	stw	r19,12(sp)
   25ae8:	1c803fcc 	andi	r18,r3,255
   25aec:	2c01ffcc 	andi	r16,r5,2047
   25af0:	5210b03a 	or	r8,r10,r8
   25af4:	202290fa 	slli	r17,r4,3
   25af8:	1081ffcc 	andi	r2,r2,2047
   25afc:	4b12b03a 	or	r9,r9,r12
   25b00:	300c90fa 	slli	r6,r6,3
   25b04:	91c07526 	beq	r18,r7,25cdc <__adddf3+0x23c>
   25b08:	8087c83a 	sub	r3,r16,r2
   25b0c:	00c0ab0e 	bge	zero,r3,25dbc <__adddf3+0x31c>
   25b10:	10002a1e 	bne	r2,zero,25bbc <__adddf3+0x11c>
   25b14:	4984b03a 	or	r2,r9,r6
   25b18:	1000961e 	bne	r2,zero,25d74 <__adddf3+0x2d4>
   25b1c:	888001cc 	andi	r2,r17,7
   25b20:	10000726 	beq	r2,zero,25b40 <__adddf3+0xa0>
   25b24:	888003cc 	andi	r2,r17,15
   25b28:	00c00104 	movi	r3,4
   25b2c:	10c00426 	beq	r2,r3,25b40 <__adddf3+0xa0>
   25b30:	88c7883a 	add	r3,r17,r3
   25b34:	1c63803a 	cmpltu	r17,r3,r17
   25b38:	4451883a 	add	r8,r8,r17
   25b3c:	1823883a 	mov	r17,r3
   25b40:	4080202c 	andhi	r2,r8,128
   25b44:	10005926 	beq	r2,zero,25cac <__adddf3+0x20c>
   25b48:	84000044 	addi	r16,r16,1
   25b4c:	0081ffc4 	movi	r2,2047
   25b50:	8080ba26 	beq	r16,r2,25e3c <__adddf3+0x39c>
   25b54:	00bfe034 	movhi	r2,65408
   25b58:	10bfffc4 	addi	r2,r2,-1
   25b5c:	4090703a 	and	r8,r8,r2
   25b60:	4004977a 	slli	r2,r8,29
   25b64:	4010927a 	slli	r8,r8,9
   25b68:	8822d0fa 	srli	r17,r17,3
   25b6c:	8401ffcc 	andi	r16,r16,2047
   25b70:	4010d33a 	srli	r8,r8,12
   25b74:	9007883a 	mov	r3,r18
   25b78:	1444b03a 	or	r2,r2,r17
   25b7c:	8401ffcc 	andi	r16,r16,2047
   25b80:	8020953a 	slli	r16,r16,20
   25b84:	18c03fcc 	andi	r3,r3,255
   25b88:	01000434 	movhi	r4,16
   25b8c:	213fffc4 	addi	r4,r4,-1
   25b90:	180697fa 	slli	r3,r3,31
   25b94:	4110703a 	and	r8,r8,r4
   25b98:	4410b03a 	or	r8,r8,r16
   25b9c:	40c6b03a 	or	r3,r8,r3
   25ba0:	dfc00417 	ldw	ra,16(sp)
   25ba4:	dcc00317 	ldw	r19,12(sp)
   25ba8:	dc800217 	ldw	r18,8(sp)
   25bac:	dc400117 	ldw	r17,4(sp)
   25bb0:	dc000017 	ldw	r16,0(sp)
   25bb4:	dec00504 	addi	sp,sp,20
   25bb8:	f800283a 	ret
   25bbc:	0081ffc4 	movi	r2,2047
   25bc0:	80bfd626 	beq	r16,r2,25b1c <__alt_data_end+0xfffe731c>
   25bc4:	4a402034 	orhi	r9,r9,128
   25bc8:	00800e04 	movi	r2,56
   25bcc:	10c09f16 	blt	r2,r3,25e4c <__adddf3+0x3ac>
   25bd0:	008007c4 	movi	r2,31
   25bd4:	10c0c216 	blt	r2,r3,25ee0 <__adddf3+0x440>
   25bd8:	00800804 	movi	r2,32
   25bdc:	10c5c83a 	sub	r2,r2,r3
   25be0:	488a983a 	sll	r5,r9,r2
   25be4:	30c8d83a 	srl	r4,r6,r3
   25be8:	3084983a 	sll	r2,r6,r2
   25bec:	48c6d83a 	srl	r3,r9,r3
   25bf0:	290cb03a 	or	r6,r5,r4
   25bf4:	1004c03a 	cmpne	r2,r2,zero
   25bf8:	308cb03a 	or	r6,r6,r2
   25bfc:	898dc83a 	sub	r6,r17,r6
   25c00:	89a3803a 	cmpltu	r17,r17,r6
   25c04:	40d1c83a 	sub	r8,r8,r3
   25c08:	4451c83a 	sub	r8,r8,r17
   25c0c:	3023883a 	mov	r17,r6
   25c10:	4080202c 	andhi	r2,r8,128
   25c14:	10002326 	beq	r2,zero,25ca4 <__adddf3+0x204>
   25c18:	04c02034 	movhi	r19,128
   25c1c:	9cffffc4 	addi	r19,r19,-1
   25c20:	44e6703a 	and	r19,r8,r19
   25c24:	98007626 	beq	r19,zero,25e00 <__adddf3+0x360>
   25c28:	9809883a 	mov	r4,r19
   25c2c:	00284880 	call	28488 <__clzsi2>
   25c30:	10fffe04 	addi	r3,r2,-8
   25c34:	010007c4 	movi	r4,31
   25c38:	20c07716 	blt	r4,r3,25e18 <__adddf3+0x378>
   25c3c:	00800804 	movi	r2,32
   25c40:	10c5c83a 	sub	r2,r2,r3
   25c44:	8884d83a 	srl	r2,r17,r2
   25c48:	98d0983a 	sll	r8,r19,r3
   25c4c:	88e2983a 	sll	r17,r17,r3
   25c50:	1204b03a 	or	r2,r2,r8
   25c54:	1c007416 	blt	r3,r16,25e28 <__adddf3+0x388>
   25c58:	1c21c83a 	sub	r16,r3,r16
   25c5c:	82000044 	addi	r8,r16,1
   25c60:	00c007c4 	movi	r3,31
   25c64:	1a009116 	blt	r3,r8,25eac <__adddf3+0x40c>
   25c68:	00c00804 	movi	r3,32
   25c6c:	1a07c83a 	sub	r3,r3,r8
   25c70:	8a08d83a 	srl	r4,r17,r8
   25c74:	88e2983a 	sll	r17,r17,r3
   25c78:	10c6983a 	sll	r3,r2,r3
   25c7c:	1210d83a 	srl	r8,r2,r8
   25c80:	8804c03a 	cmpne	r2,r17,zero
   25c84:	1906b03a 	or	r3,r3,r4
   25c88:	18a2b03a 	or	r17,r3,r2
   25c8c:	0021883a 	mov	r16,zero
   25c90:	003fa206 	br	25b1c <__alt_data_end+0xfffe731c>
   25c94:	1890b03a 	or	r8,r3,r2
   25c98:	40017d26 	beq	r8,zero,26290 <__adddf3+0x7f0>
   25c9c:	1011883a 	mov	r8,r2
   25ca0:	1823883a 	mov	r17,r3
   25ca4:	888001cc 	andi	r2,r17,7
   25ca8:	103f9e1e 	bne	r2,zero,25b24 <__alt_data_end+0xfffe7324>
   25cac:	4004977a 	slli	r2,r8,29
   25cb0:	8822d0fa 	srli	r17,r17,3
   25cb4:	4010d0fa 	srli	r8,r8,3
   25cb8:	9007883a 	mov	r3,r18
   25cbc:	1444b03a 	or	r2,r2,r17
   25cc0:	0101ffc4 	movi	r4,2047
   25cc4:	81002426 	beq	r16,r4,25d58 <__adddf3+0x2b8>
   25cc8:	8120703a 	and	r16,r16,r4
   25ccc:	01000434 	movhi	r4,16
   25cd0:	213fffc4 	addi	r4,r4,-1
   25cd4:	4110703a 	and	r8,r8,r4
   25cd8:	003fa806 	br	25b7c <__alt_data_end+0xfffe737c>
   25cdc:	8089c83a 	sub	r4,r16,r2
   25ce0:	01005e0e 	bge	zero,r4,25e5c <__adddf3+0x3bc>
   25ce4:	10002b26 	beq	r2,zero,25d94 <__adddf3+0x2f4>
   25ce8:	0081ffc4 	movi	r2,2047
   25cec:	80bf8b26 	beq	r16,r2,25b1c <__alt_data_end+0xfffe731c>
   25cf0:	4a402034 	orhi	r9,r9,128
   25cf4:	00800e04 	movi	r2,56
   25cf8:	1100a40e 	bge	r2,r4,25f8c <__adddf3+0x4ec>
   25cfc:	498cb03a 	or	r6,r9,r6
   25d00:	300ac03a 	cmpne	r5,r6,zero
   25d04:	0013883a 	mov	r9,zero
   25d08:	2c4b883a 	add	r5,r5,r17
   25d0c:	2c63803a 	cmpltu	r17,r5,r17
   25d10:	4a11883a 	add	r8,r9,r8
   25d14:	8a11883a 	add	r8,r17,r8
   25d18:	2823883a 	mov	r17,r5
   25d1c:	4080202c 	andhi	r2,r8,128
   25d20:	103fe026 	beq	r2,zero,25ca4 <__alt_data_end+0xfffe74a4>
   25d24:	84000044 	addi	r16,r16,1
   25d28:	0081ffc4 	movi	r2,2047
   25d2c:	8080d226 	beq	r16,r2,26078 <__adddf3+0x5d8>
   25d30:	00bfe034 	movhi	r2,65408
   25d34:	10bfffc4 	addi	r2,r2,-1
   25d38:	4090703a 	and	r8,r8,r2
   25d3c:	880ad07a 	srli	r5,r17,1
   25d40:	400897fa 	slli	r4,r8,31
   25d44:	88c0004c 	andi	r3,r17,1
   25d48:	28e2b03a 	or	r17,r5,r3
   25d4c:	4010d07a 	srli	r8,r8,1
   25d50:	2462b03a 	or	r17,r4,r17
   25d54:	003f7106 	br	25b1c <__alt_data_end+0xfffe731c>
   25d58:	4088b03a 	or	r4,r8,r2
   25d5c:	20014526 	beq	r4,zero,26274 <__adddf3+0x7d4>
   25d60:	01000434 	movhi	r4,16
   25d64:	42000234 	orhi	r8,r8,8
   25d68:	213fffc4 	addi	r4,r4,-1
   25d6c:	4110703a 	and	r8,r8,r4
   25d70:	003f8206 	br	25b7c <__alt_data_end+0xfffe737c>
   25d74:	18ffffc4 	addi	r3,r3,-1
   25d78:	1800491e 	bne	r3,zero,25ea0 <__adddf3+0x400>
   25d7c:	898bc83a 	sub	r5,r17,r6
   25d80:	8963803a 	cmpltu	r17,r17,r5
   25d84:	4251c83a 	sub	r8,r8,r9
   25d88:	4451c83a 	sub	r8,r8,r17
   25d8c:	2823883a 	mov	r17,r5
   25d90:	003f9f06 	br	25c10 <__alt_data_end+0xfffe7410>
   25d94:	4984b03a 	or	r2,r9,r6
   25d98:	103f6026 	beq	r2,zero,25b1c <__alt_data_end+0xfffe731c>
   25d9c:	213fffc4 	addi	r4,r4,-1
   25da0:	2000931e 	bne	r4,zero,25ff0 <__adddf3+0x550>
   25da4:	898d883a 	add	r6,r17,r6
   25da8:	3463803a 	cmpltu	r17,r6,r17
   25dac:	4251883a 	add	r8,r8,r9
   25db0:	8a11883a 	add	r8,r17,r8
   25db4:	3023883a 	mov	r17,r6
   25db8:	003fd806 	br	25d1c <__alt_data_end+0xfffe751c>
   25dbc:	1800541e 	bne	r3,zero,25f10 <__adddf3+0x470>
   25dc0:	80800044 	addi	r2,r16,1
   25dc4:	1081ffcc 	andi	r2,r2,2047
   25dc8:	00c00044 	movi	r3,1
   25dcc:	1880a00e 	bge	r3,r2,26050 <__adddf3+0x5b0>
   25dd0:	8989c83a 	sub	r4,r17,r6
   25dd4:	8905803a 	cmpltu	r2,r17,r4
   25dd8:	4267c83a 	sub	r19,r8,r9
   25ddc:	98a7c83a 	sub	r19,r19,r2
   25de0:	9880202c 	andhi	r2,r19,128
   25de4:	10006326 	beq	r2,zero,25f74 <__adddf3+0x4d4>
   25de8:	3463c83a 	sub	r17,r6,r17
   25dec:	4a07c83a 	sub	r3,r9,r8
   25df0:	344d803a 	cmpltu	r6,r6,r17
   25df4:	19a7c83a 	sub	r19,r3,r6
   25df8:	3825883a 	mov	r18,r7
   25dfc:	983f8a1e 	bne	r19,zero,25c28 <__alt_data_end+0xfffe7428>
   25e00:	8809883a 	mov	r4,r17
   25e04:	00284880 	call	28488 <__clzsi2>
   25e08:	10800804 	addi	r2,r2,32
   25e0c:	10fffe04 	addi	r3,r2,-8
   25e10:	010007c4 	movi	r4,31
   25e14:	20ff890e 	bge	r4,r3,25c3c <__alt_data_end+0xfffe743c>
   25e18:	10bff604 	addi	r2,r2,-40
   25e1c:	8884983a 	sll	r2,r17,r2
   25e20:	0023883a 	mov	r17,zero
   25e24:	1c3f8c0e 	bge	r3,r16,25c58 <__alt_data_end+0xfffe7458>
   25e28:	023fe034 	movhi	r8,65408
   25e2c:	423fffc4 	addi	r8,r8,-1
   25e30:	80e1c83a 	sub	r16,r16,r3
   25e34:	1210703a 	and	r8,r2,r8
   25e38:	003f3806 	br	25b1c <__alt_data_end+0xfffe731c>
   25e3c:	9007883a 	mov	r3,r18
   25e40:	0011883a 	mov	r8,zero
   25e44:	0005883a 	mov	r2,zero
   25e48:	003f4c06 	br	25b7c <__alt_data_end+0xfffe737c>
   25e4c:	498cb03a 	or	r6,r9,r6
   25e50:	300cc03a 	cmpne	r6,r6,zero
   25e54:	0007883a 	mov	r3,zero
   25e58:	003f6806 	br	25bfc <__alt_data_end+0xfffe73fc>
   25e5c:	20009c1e 	bne	r4,zero,260d0 <__adddf3+0x630>
   25e60:	80800044 	addi	r2,r16,1
   25e64:	1141ffcc 	andi	r5,r2,2047
   25e68:	01000044 	movi	r4,1
   25e6c:	2140670e 	bge	r4,r5,2600c <__adddf3+0x56c>
   25e70:	0101ffc4 	movi	r4,2047
   25e74:	11007f26 	beq	r2,r4,26074 <__adddf3+0x5d4>
   25e78:	898d883a 	add	r6,r17,r6
   25e7c:	4247883a 	add	r3,r8,r9
   25e80:	3451803a 	cmpltu	r8,r6,r17
   25e84:	40d1883a 	add	r8,r8,r3
   25e88:	402297fa 	slli	r17,r8,31
   25e8c:	300cd07a 	srli	r6,r6,1
   25e90:	4010d07a 	srli	r8,r8,1
   25e94:	1021883a 	mov	r16,r2
   25e98:	89a2b03a 	or	r17,r17,r6
   25e9c:	003f1f06 	br	25b1c <__alt_data_end+0xfffe731c>
   25ea0:	0081ffc4 	movi	r2,2047
   25ea4:	80bf481e 	bne	r16,r2,25bc8 <__alt_data_end+0xfffe73c8>
   25ea8:	003f1c06 	br	25b1c <__alt_data_end+0xfffe731c>
   25eac:	843ff844 	addi	r16,r16,-31
   25eb0:	01000804 	movi	r4,32
   25eb4:	1406d83a 	srl	r3,r2,r16
   25eb8:	41005026 	beq	r8,r4,25ffc <__adddf3+0x55c>
   25ebc:	01001004 	movi	r4,64
   25ec0:	2211c83a 	sub	r8,r4,r8
   25ec4:	1204983a 	sll	r2,r2,r8
   25ec8:	88a2b03a 	or	r17,r17,r2
   25ecc:	8822c03a 	cmpne	r17,r17,zero
   25ed0:	1c62b03a 	or	r17,r3,r17
   25ed4:	0011883a 	mov	r8,zero
   25ed8:	0021883a 	mov	r16,zero
   25edc:	003f7106 	br	25ca4 <__alt_data_end+0xfffe74a4>
   25ee0:	193ff804 	addi	r4,r3,-32
   25ee4:	00800804 	movi	r2,32
   25ee8:	4908d83a 	srl	r4,r9,r4
   25eec:	18804526 	beq	r3,r2,26004 <__adddf3+0x564>
   25ef0:	00801004 	movi	r2,64
   25ef4:	10c5c83a 	sub	r2,r2,r3
   25ef8:	4886983a 	sll	r3,r9,r2
   25efc:	198cb03a 	or	r6,r3,r6
   25f00:	300cc03a 	cmpne	r6,r6,zero
   25f04:	218cb03a 	or	r6,r4,r6
   25f08:	0007883a 	mov	r3,zero
   25f0c:	003f3b06 	br	25bfc <__alt_data_end+0xfffe73fc>
   25f10:	80002a26 	beq	r16,zero,25fbc <__adddf3+0x51c>
   25f14:	0101ffc4 	movi	r4,2047
   25f18:	11006826 	beq	r2,r4,260bc <__adddf3+0x61c>
   25f1c:	00c7c83a 	sub	r3,zero,r3
   25f20:	42002034 	orhi	r8,r8,128
   25f24:	01000e04 	movi	r4,56
   25f28:	20c07c16 	blt	r4,r3,2611c <__adddf3+0x67c>
   25f2c:	010007c4 	movi	r4,31
   25f30:	20c0da16 	blt	r4,r3,2629c <__adddf3+0x7fc>
   25f34:	01000804 	movi	r4,32
   25f38:	20c9c83a 	sub	r4,r4,r3
   25f3c:	4114983a 	sll	r10,r8,r4
   25f40:	88cad83a 	srl	r5,r17,r3
   25f44:	8908983a 	sll	r4,r17,r4
   25f48:	40c6d83a 	srl	r3,r8,r3
   25f4c:	5162b03a 	or	r17,r10,r5
   25f50:	2008c03a 	cmpne	r4,r4,zero
   25f54:	8922b03a 	or	r17,r17,r4
   25f58:	3463c83a 	sub	r17,r6,r17
   25f5c:	48c7c83a 	sub	r3,r9,r3
   25f60:	344d803a 	cmpltu	r6,r6,r17
   25f64:	1991c83a 	sub	r8,r3,r6
   25f68:	1021883a 	mov	r16,r2
   25f6c:	3825883a 	mov	r18,r7
   25f70:	003f2706 	br	25c10 <__alt_data_end+0xfffe7410>
   25f74:	24d0b03a 	or	r8,r4,r19
   25f78:	40001b1e 	bne	r8,zero,25fe8 <__adddf3+0x548>
   25f7c:	0005883a 	mov	r2,zero
   25f80:	0007883a 	mov	r3,zero
   25f84:	0021883a 	mov	r16,zero
   25f88:	003f4d06 	br	25cc0 <__alt_data_end+0xfffe74c0>
   25f8c:	008007c4 	movi	r2,31
   25f90:	11003c16 	blt	r2,r4,26084 <__adddf3+0x5e4>
   25f94:	00800804 	movi	r2,32
   25f98:	1105c83a 	sub	r2,r2,r4
   25f9c:	488e983a 	sll	r7,r9,r2
   25fa0:	310ad83a 	srl	r5,r6,r4
   25fa4:	3084983a 	sll	r2,r6,r2
   25fa8:	4912d83a 	srl	r9,r9,r4
   25fac:	394ab03a 	or	r5,r7,r5
   25fb0:	1004c03a 	cmpne	r2,r2,zero
   25fb4:	288ab03a 	or	r5,r5,r2
   25fb8:	003f5306 	br	25d08 <__alt_data_end+0xfffe7508>
   25fbc:	4448b03a 	or	r4,r8,r17
   25fc0:	20003e26 	beq	r4,zero,260bc <__adddf3+0x61c>
   25fc4:	00c6303a 	nor	r3,zero,r3
   25fc8:	18003a1e 	bne	r3,zero,260b4 <__adddf3+0x614>
   25fcc:	3463c83a 	sub	r17,r6,r17
   25fd0:	4a07c83a 	sub	r3,r9,r8
   25fd4:	344d803a 	cmpltu	r6,r6,r17
   25fd8:	1991c83a 	sub	r8,r3,r6
   25fdc:	1021883a 	mov	r16,r2
   25fe0:	3825883a 	mov	r18,r7
   25fe4:	003f0a06 	br	25c10 <__alt_data_end+0xfffe7410>
   25fe8:	2023883a 	mov	r17,r4
   25fec:	003f0d06 	br	25c24 <__alt_data_end+0xfffe7424>
   25ff0:	0081ffc4 	movi	r2,2047
   25ff4:	80bf3f1e 	bne	r16,r2,25cf4 <__alt_data_end+0xfffe74f4>
   25ff8:	003ec806 	br	25b1c <__alt_data_end+0xfffe731c>
   25ffc:	0005883a 	mov	r2,zero
   26000:	003fb106 	br	25ec8 <__alt_data_end+0xfffe76c8>
   26004:	0007883a 	mov	r3,zero
   26008:	003fbc06 	br	25efc <__alt_data_end+0xfffe76fc>
   2600c:	4444b03a 	or	r2,r8,r17
   26010:	8000871e 	bne	r16,zero,26230 <__adddf3+0x790>
   26014:	1000ba26 	beq	r2,zero,26300 <__adddf3+0x860>
   26018:	4984b03a 	or	r2,r9,r6
   2601c:	103ebf26 	beq	r2,zero,25b1c <__alt_data_end+0xfffe731c>
   26020:	8985883a 	add	r2,r17,r6
   26024:	4247883a 	add	r3,r8,r9
   26028:	1451803a 	cmpltu	r8,r2,r17
   2602c:	40d1883a 	add	r8,r8,r3
   26030:	40c0202c 	andhi	r3,r8,128
   26034:	1023883a 	mov	r17,r2
   26038:	183f1a26 	beq	r3,zero,25ca4 <__alt_data_end+0xfffe74a4>
   2603c:	00bfe034 	movhi	r2,65408
   26040:	10bfffc4 	addi	r2,r2,-1
   26044:	2021883a 	mov	r16,r4
   26048:	4090703a 	and	r8,r8,r2
   2604c:	003eb306 	br	25b1c <__alt_data_end+0xfffe731c>
   26050:	4444b03a 	or	r2,r8,r17
   26054:	8000291e 	bne	r16,zero,260fc <__adddf3+0x65c>
   26058:	10004b1e 	bne	r2,zero,26188 <__adddf3+0x6e8>
   2605c:	4990b03a 	or	r8,r9,r6
   26060:	40008b26 	beq	r8,zero,26290 <__adddf3+0x7f0>
   26064:	4811883a 	mov	r8,r9
   26068:	3023883a 	mov	r17,r6
   2606c:	3825883a 	mov	r18,r7
   26070:	003eaa06 	br	25b1c <__alt_data_end+0xfffe731c>
   26074:	1021883a 	mov	r16,r2
   26078:	0011883a 	mov	r8,zero
   2607c:	0005883a 	mov	r2,zero
   26080:	003f0f06 	br	25cc0 <__alt_data_end+0xfffe74c0>
   26084:	217ff804 	addi	r5,r4,-32
   26088:	00800804 	movi	r2,32
   2608c:	494ad83a 	srl	r5,r9,r5
   26090:	20807d26 	beq	r4,r2,26288 <__adddf3+0x7e8>
   26094:	00801004 	movi	r2,64
   26098:	1109c83a 	sub	r4,r2,r4
   2609c:	4912983a 	sll	r9,r9,r4
   260a0:	498cb03a 	or	r6,r9,r6
   260a4:	300cc03a 	cmpne	r6,r6,zero
   260a8:	298ab03a 	or	r5,r5,r6
   260ac:	0013883a 	mov	r9,zero
   260b0:	003f1506 	br	25d08 <__alt_data_end+0xfffe7508>
   260b4:	0101ffc4 	movi	r4,2047
   260b8:	113f9a1e 	bne	r2,r4,25f24 <__alt_data_end+0xfffe7724>
   260bc:	4811883a 	mov	r8,r9
   260c0:	3023883a 	mov	r17,r6
   260c4:	1021883a 	mov	r16,r2
   260c8:	3825883a 	mov	r18,r7
   260cc:	003e9306 	br	25b1c <__alt_data_end+0xfffe731c>
   260d0:	8000161e 	bne	r16,zero,2612c <__adddf3+0x68c>
   260d4:	444ab03a 	or	r5,r8,r17
   260d8:	28005126 	beq	r5,zero,26220 <__adddf3+0x780>
   260dc:	0108303a 	nor	r4,zero,r4
   260e0:	20004d1e 	bne	r4,zero,26218 <__adddf3+0x778>
   260e4:	89a3883a 	add	r17,r17,r6
   260e8:	4253883a 	add	r9,r8,r9
   260ec:	898d803a 	cmpltu	r6,r17,r6
   260f0:	3251883a 	add	r8,r6,r9
   260f4:	1021883a 	mov	r16,r2
   260f8:	003f0806 	br	25d1c <__alt_data_end+0xfffe751c>
   260fc:	1000301e 	bne	r2,zero,261c0 <__adddf3+0x720>
   26100:	4984b03a 	or	r2,r9,r6
   26104:	10007126 	beq	r2,zero,262cc <__adddf3+0x82c>
   26108:	4811883a 	mov	r8,r9
   2610c:	3023883a 	mov	r17,r6
   26110:	3825883a 	mov	r18,r7
   26114:	0401ffc4 	movi	r16,2047
   26118:	003e8006 	br	25b1c <__alt_data_end+0xfffe731c>
   2611c:	4462b03a 	or	r17,r8,r17
   26120:	8822c03a 	cmpne	r17,r17,zero
   26124:	0007883a 	mov	r3,zero
   26128:	003f8b06 	br	25f58 <__alt_data_end+0xfffe7758>
   2612c:	0141ffc4 	movi	r5,2047
   26130:	11403b26 	beq	r2,r5,26220 <__adddf3+0x780>
   26134:	0109c83a 	sub	r4,zero,r4
   26138:	42002034 	orhi	r8,r8,128
   2613c:	01400e04 	movi	r5,56
   26140:	29006716 	blt	r5,r4,262e0 <__adddf3+0x840>
   26144:	014007c4 	movi	r5,31
   26148:	29007016 	blt	r5,r4,2630c <__adddf3+0x86c>
   2614c:	01400804 	movi	r5,32
   26150:	290bc83a 	sub	r5,r5,r4
   26154:	4154983a 	sll	r10,r8,r5
   26158:	890ed83a 	srl	r7,r17,r4
   2615c:	894a983a 	sll	r5,r17,r5
   26160:	4108d83a 	srl	r4,r8,r4
   26164:	51e2b03a 	or	r17,r10,r7
   26168:	280ac03a 	cmpne	r5,r5,zero
   2616c:	8962b03a 	or	r17,r17,r5
   26170:	89a3883a 	add	r17,r17,r6
   26174:	2253883a 	add	r9,r4,r9
   26178:	898d803a 	cmpltu	r6,r17,r6
   2617c:	3251883a 	add	r8,r6,r9
   26180:	1021883a 	mov	r16,r2
   26184:	003ee506 	br	25d1c <__alt_data_end+0xfffe751c>
   26188:	4984b03a 	or	r2,r9,r6
   2618c:	103e6326 	beq	r2,zero,25b1c <__alt_data_end+0xfffe731c>
   26190:	8987c83a 	sub	r3,r17,r6
   26194:	88c9803a 	cmpltu	r4,r17,r3
   26198:	4245c83a 	sub	r2,r8,r9
   2619c:	1105c83a 	sub	r2,r2,r4
   261a0:	1100202c 	andhi	r4,r2,128
   261a4:	203ebb26 	beq	r4,zero,25c94 <__alt_data_end+0xfffe7494>
   261a8:	3463c83a 	sub	r17,r6,r17
   261ac:	4a07c83a 	sub	r3,r9,r8
   261b0:	344d803a 	cmpltu	r6,r6,r17
   261b4:	1991c83a 	sub	r8,r3,r6
   261b8:	3825883a 	mov	r18,r7
   261bc:	003e5706 	br	25b1c <__alt_data_end+0xfffe731c>
   261c0:	4984b03a 	or	r2,r9,r6
   261c4:	10002e26 	beq	r2,zero,26280 <__adddf3+0x7e0>
   261c8:	4004d0fa 	srli	r2,r8,3
   261cc:	8822d0fa 	srli	r17,r17,3
   261d0:	4010977a 	slli	r8,r8,29
   261d4:	10c0022c 	andhi	r3,r2,8
   261d8:	4462b03a 	or	r17,r8,r17
   261dc:	18000826 	beq	r3,zero,26200 <__adddf3+0x760>
   261e0:	4808d0fa 	srli	r4,r9,3
   261e4:	20c0022c 	andhi	r3,r4,8
   261e8:	1800051e 	bne	r3,zero,26200 <__adddf3+0x760>
   261ec:	300cd0fa 	srli	r6,r6,3
   261f0:	4806977a 	slli	r3,r9,29
   261f4:	2005883a 	mov	r2,r4
   261f8:	3825883a 	mov	r18,r7
   261fc:	19a2b03a 	or	r17,r3,r6
   26200:	8810d77a 	srli	r8,r17,29
   26204:	100490fa 	slli	r2,r2,3
   26208:	882290fa 	slli	r17,r17,3
   2620c:	0401ffc4 	movi	r16,2047
   26210:	4090b03a 	or	r8,r8,r2
   26214:	003e4106 	br	25b1c <__alt_data_end+0xfffe731c>
   26218:	0141ffc4 	movi	r5,2047
   2621c:	117fc71e 	bne	r2,r5,2613c <__alt_data_end+0xfffe793c>
   26220:	4811883a 	mov	r8,r9
   26224:	3023883a 	mov	r17,r6
   26228:	1021883a 	mov	r16,r2
   2622c:	003e3b06 	br	25b1c <__alt_data_end+0xfffe731c>
   26230:	10002f26 	beq	r2,zero,262f0 <__adddf3+0x850>
   26234:	4984b03a 	or	r2,r9,r6
   26238:	10001126 	beq	r2,zero,26280 <__adddf3+0x7e0>
   2623c:	4004d0fa 	srli	r2,r8,3
   26240:	8822d0fa 	srli	r17,r17,3
   26244:	4010977a 	slli	r8,r8,29
   26248:	10c0022c 	andhi	r3,r2,8
   2624c:	4462b03a 	or	r17,r8,r17
   26250:	183feb26 	beq	r3,zero,26200 <__alt_data_end+0xfffe7a00>
   26254:	4808d0fa 	srli	r4,r9,3
   26258:	20c0022c 	andhi	r3,r4,8
   2625c:	183fe81e 	bne	r3,zero,26200 <__alt_data_end+0xfffe7a00>
   26260:	300cd0fa 	srli	r6,r6,3
   26264:	4806977a 	slli	r3,r9,29
   26268:	2005883a 	mov	r2,r4
   2626c:	19a2b03a 	or	r17,r3,r6
   26270:	003fe306 	br	26200 <__alt_data_end+0xfffe7a00>
   26274:	0011883a 	mov	r8,zero
   26278:	0005883a 	mov	r2,zero
   2627c:	003e3f06 	br	25b7c <__alt_data_end+0xfffe737c>
   26280:	0401ffc4 	movi	r16,2047
   26284:	003e2506 	br	25b1c <__alt_data_end+0xfffe731c>
   26288:	0013883a 	mov	r9,zero
   2628c:	003f8406 	br	260a0 <__alt_data_end+0xfffe78a0>
   26290:	0005883a 	mov	r2,zero
   26294:	0007883a 	mov	r3,zero
   26298:	003e8906 	br	25cc0 <__alt_data_end+0xfffe74c0>
   2629c:	197ff804 	addi	r5,r3,-32
   262a0:	01000804 	movi	r4,32
   262a4:	414ad83a 	srl	r5,r8,r5
   262a8:	19002426 	beq	r3,r4,2633c <__adddf3+0x89c>
   262ac:	01001004 	movi	r4,64
   262b0:	20c7c83a 	sub	r3,r4,r3
   262b4:	40c6983a 	sll	r3,r8,r3
   262b8:	1c46b03a 	or	r3,r3,r17
   262bc:	1806c03a 	cmpne	r3,r3,zero
   262c0:	28e2b03a 	or	r17,r5,r3
   262c4:	0007883a 	mov	r3,zero
   262c8:	003f2306 	br	25f58 <__alt_data_end+0xfffe7758>
   262cc:	0007883a 	mov	r3,zero
   262d0:	5811883a 	mov	r8,r11
   262d4:	00bfffc4 	movi	r2,-1
   262d8:	0401ffc4 	movi	r16,2047
   262dc:	003e7806 	br	25cc0 <__alt_data_end+0xfffe74c0>
   262e0:	4462b03a 	or	r17,r8,r17
   262e4:	8822c03a 	cmpne	r17,r17,zero
   262e8:	0009883a 	mov	r4,zero
   262ec:	003fa006 	br	26170 <__alt_data_end+0xfffe7970>
   262f0:	4811883a 	mov	r8,r9
   262f4:	3023883a 	mov	r17,r6
   262f8:	0401ffc4 	movi	r16,2047
   262fc:	003e0706 	br	25b1c <__alt_data_end+0xfffe731c>
   26300:	4811883a 	mov	r8,r9
   26304:	3023883a 	mov	r17,r6
   26308:	003e0406 	br	25b1c <__alt_data_end+0xfffe731c>
   2630c:	21fff804 	addi	r7,r4,-32
   26310:	01400804 	movi	r5,32
   26314:	41ced83a 	srl	r7,r8,r7
   26318:	21400a26 	beq	r4,r5,26344 <__adddf3+0x8a4>
   2631c:	01401004 	movi	r5,64
   26320:	2909c83a 	sub	r4,r5,r4
   26324:	4108983a 	sll	r4,r8,r4
   26328:	2448b03a 	or	r4,r4,r17
   2632c:	2008c03a 	cmpne	r4,r4,zero
   26330:	3922b03a 	or	r17,r7,r4
   26334:	0009883a 	mov	r4,zero
   26338:	003f8d06 	br	26170 <__alt_data_end+0xfffe7970>
   2633c:	0007883a 	mov	r3,zero
   26340:	003fdd06 	br	262b8 <__alt_data_end+0xfffe7ab8>
   26344:	0009883a 	mov	r4,zero
   26348:	003ff706 	br	26328 <__alt_data_end+0xfffe7b28>

0002634c <__divdf3>:
   2634c:	defff004 	addi	sp,sp,-64
   26350:	dc800815 	stw	r18,32(sp)
   26354:	2824d53a 	srli	r18,r5,20
   26358:	dd800c15 	stw	r22,48(sp)
   2635c:	282cd7fa 	srli	r22,r5,31
   26360:	dc000615 	stw	r16,24(sp)
   26364:	04000434 	movhi	r16,16
   26368:	843fffc4 	addi	r16,r16,-1
   2636c:	dfc00f15 	stw	ra,60(sp)
   26370:	df000e15 	stw	fp,56(sp)
   26374:	ddc00d15 	stw	r23,52(sp)
   26378:	dd400b15 	stw	r21,44(sp)
   2637c:	dd000a15 	stw	r20,40(sp)
   26380:	dcc00915 	stw	r19,36(sp)
   26384:	dc400715 	stw	r17,28(sp)
   26388:	9481ffcc 	andi	r18,r18,2047
   2638c:	2c20703a 	and	r16,r5,r16
   26390:	b2003fcc 	andi	r8,r22,255
   26394:	90006126 	beq	r18,zero,2651c <__divdf3+0x1d0>
   26398:	0081ffc4 	movi	r2,2047
   2639c:	202b883a 	mov	r21,r4
   263a0:	90803726 	beq	r18,r2,26480 <__divdf3+0x134>
   263a4:	80800434 	orhi	r2,r16,16
   263a8:	100490fa 	slli	r2,r2,3
   263ac:	2020d77a 	srli	r16,r4,29
   263b0:	202a90fa 	slli	r21,r4,3
   263b4:	94bf0044 	addi	r18,r18,-1023
   263b8:	80a0b03a 	or	r16,r16,r2
   263bc:	0013883a 	mov	r9,zero
   263c0:	000b883a 	mov	r5,zero
   263c4:	3806d53a 	srli	r3,r7,20
   263c8:	382ed7fa 	srli	r23,r7,31
   263cc:	04400434 	movhi	r17,16
   263d0:	8c7fffc4 	addi	r17,r17,-1
   263d4:	18c1ffcc 	andi	r3,r3,2047
   263d8:	3029883a 	mov	r20,r6
   263dc:	3c62703a 	and	r17,r7,r17
   263e0:	bf003fcc 	andi	fp,r23,255
   263e4:	18006e26 	beq	r3,zero,265a0 <__divdf3+0x254>
   263e8:	0081ffc4 	movi	r2,2047
   263ec:	18806626 	beq	r3,r2,26588 <__divdf3+0x23c>
   263f0:	88800434 	orhi	r2,r17,16
   263f4:	100490fa 	slli	r2,r2,3
   263f8:	3022d77a 	srli	r17,r6,29
   263fc:	302890fa 	slli	r20,r6,3
   26400:	18ff0044 	addi	r3,r3,-1023
   26404:	88a2b03a 	or	r17,r17,r2
   26408:	000f883a 	mov	r7,zero
   2640c:	b5e6f03a 	xor	r19,r22,r23
   26410:	3a4cb03a 	or	r6,r7,r9
   26414:	008003c4 	movi	r2,15
   26418:	9809883a 	mov	r4,r19
   2641c:	90c7c83a 	sub	r3,r18,r3
   26420:	9cc03fcc 	andi	r19,r19,255
   26424:	11809636 	bltu	r2,r6,26680 <__divdf3+0x334>
   26428:	300c90ba 	slli	r6,r6,2
   2642c:	008000b4 	movhi	r2,2
   26430:	10991004 	addi	r2,r2,25664
   26434:	308d883a 	add	r6,r6,r2
   26438:	30800017 	ldw	r2,0(r6)
   2643c:	1000683a 	jmp	r2
   26440:	00026680 	call	2668 <set_addrs_to_default+0x1528>
   26444:	000264b8 	rdprs	zero,zero,2450
   26448:	00026670 	cmpltui	zero,zero,2457
   2644c:	000264ac 	andhi	zero,zero,2450
   26450:	00026670 	cmpltui	zero,zero,2457
   26454:	00026644 	movi	zero,2457
   26458:	00026670 	cmpltui	zero,zero,2457
   2645c:	000264ac 	andhi	zero,zero,2450
   26460:	000264b8 	rdprs	zero,zero,2450
   26464:	000264b8 	rdprs	zero,zero,2450
   26468:	00026644 	movi	zero,2457
   2646c:	000264ac 	andhi	zero,zero,2450
   26470:	0002649c 	xori	zero,zero,2450
   26474:	0002649c 	xori	zero,zero,2450
   26478:	0002649c 	xori	zero,zero,2450
   2647c:	00026a08 	cmpgei	zero,zero,2472
   26480:	2404b03a 	or	r2,r4,r16
   26484:	10006c1e 	bne	r2,zero,26638 <__divdf3+0x2ec>
   26488:	02400204 	movi	r9,8
   2648c:	0021883a 	mov	r16,zero
   26490:	002b883a 	mov	r21,zero
   26494:	01400084 	movi	r5,2
   26498:	003fca06 	br	263c4 <__alt_data_end+0xfffe7bc4>
   2649c:	8023883a 	mov	r17,r16
   264a0:	a829883a 	mov	r20,r21
   264a4:	4039883a 	mov	fp,r8
   264a8:	280f883a 	mov	r7,r5
   264ac:	00800084 	movi	r2,2
   264b0:	3881601e 	bne	r7,r2,26a34 <__divdf3+0x6e8>
   264b4:	e027883a 	mov	r19,fp
   264b8:	9900004c 	andi	r4,r19,1
   264bc:	0081ffc4 	movi	r2,2047
   264c0:	0021883a 	mov	r16,zero
   264c4:	002b883a 	mov	r21,zero
   264c8:	1004953a 	slli	r2,r2,20
   264cc:	20c03fcc 	andi	r3,r4,255
   264d0:	01400434 	movhi	r5,16
   264d4:	297fffc4 	addi	r5,r5,-1
   264d8:	180697fa 	slli	r3,r3,31
   264dc:	8160703a 	and	r16,r16,r5
   264e0:	80a0b03a 	or	r16,r16,r2
   264e4:	80c6b03a 	or	r3,r16,r3
   264e8:	a805883a 	mov	r2,r21
   264ec:	dfc00f17 	ldw	ra,60(sp)
   264f0:	df000e17 	ldw	fp,56(sp)
   264f4:	ddc00d17 	ldw	r23,52(sp)
   264f8:	dd800c17 	ldw	r22,48(sp)
   264fc:	dd400b17 	ldw	r21,44(sp)
   26500:	dd000a17 	ldw	r20,40(sp)
   26504:	dcc00917 	ldw	r19,36(sp)
   26508:	dc800817 	ldw	r18,32(sp)
   2650c:	dc400717 	ldw	r17,28(sp)
   26510:	dc000617 	ldw	r16,24(sp)
   26514:	dec01004 	addi	sp,sp,64
   26518:	f800283a 	ret
   2651c:	2404b03a 	or	r2,r4,r16
   26520:	2023883a 	mov	r17,r4
   26524:	10003f26 	beq	r2,zero,26624 <__divdf3+0x2d8>
   26528:	80015e26 	beq	r16,zero,26aa4 <__divdf3+0x758>
   2652c:	8009883a 	mov	r4,r16
   26530:	d9800215 	stw	r6,8(sp)
   26534:	d9c00515 	stw	r7,20(sp)
   26538:	da000415 	stw	r8,16(sp)
   2653c:	00284880 	call	28488 <__clzsi2>
   26540:	d9800217 	ldw	r6,8(sp)
   26544:	d9c00517 	ldw	r7,20(sp)
   26548:	da000417 	ldw	r8,16(sp)
   2654c:	113ffd44 	addi	r4,r2,-11
   26550:	00c00704 	movi	r3,28
   26554:	19014f16 	blt	r3,r4,26a94 <__divdf3+0x748>
   26558:	00c00744 	movi	r3,29
   2655c:	157ffe04 	addi	r21,r2,-8
   26560:	1907c83a 	sub	r3,r3,r4
   26564:	8560983a 	sll	r16,r16,r21
   26568:	88c6d83a 	srl	r3,r17,r3
   2656c:	8d6a983a 	sll	r21,r17,r21
   26570:	1c20b03a 	or	r16,r3,r16
   26574:	1080fcc4 	addi	r2,r2,1011
   26578:	00a5c83a 	sub	r18,zero,r2
   2657c:	0013883a 	mov	r9,zero
   26580:	000b883a 	mov	r5,zero
   26584:	003f8f06 	br	263c4 <__alt_data_end+0xfffe7bc4>
   26588:	3444b03a 	or	r2,r6,r17
   2658c:	1000231e 	bne	r2,zero,2661c <__divdf3+0x2d0>
   26590:	0023883a 	mov	r17,zero
   26594:	0029883a 	mov	r20,zero
   26598:	01c00084 	movi	r7,2
   2659c:	003f9b06 	br	2640c <__alt_data_end+0xfffe7c0c>
   265a0:	3444b03a 	or	r2,r6,r17
   265a4:	10001926 	beq	r2,zero,2660c <__divdf3+0x2c0>
   265a8:	88014b26 	beq	r17,zero,26ad8 <__divdf3+0x78c>
   265ac:	8809883a 	mov	r4,r17
   265b0:	d9400115 	stw	r5,4(sp)
   265b4:	d9800215 	stw	r6,8(sp)
   265b8:	da000415 	stw	r8,16(sp)
   265bc:	da400315 	stw	r9,12(sp)
   265c0:	00284880 	call	28488 <__clzsi2>
   265c4:	d9400117 	ldw	r5,4(sp)
   265c8:	d9800217 	ldw	r6,8(sp)
   265cc:	da000417 	ldw	r8,16(sp)
   265d0:	da400317 	ldw	r9,12(sp)
   265d4:	113ffd44 	addi	r4,r2,-11
   265d8:	00c00704 	movi	r3,28
   265dc:	19013a16 	blt	r3,r4,26ac8 <__divdf3+0x77c>
   265e0:	00c00744 	movi	r3,29
   265e4:	153ffe04 	addi	r20,r2,-8
   265e8:	1907c83a 	sub	r3,r3,r4
   265ec:	8d22983a 	sll	r17,r17,r20
   265f0:	30c6d83a 	srl	r3,r6,r3
   265f4:	3528983a 	sll	r20,r6,r20
   265f8:	1c62b03a 	or	r17,r3,r17
   265fc:	1080fcc4 	addi	r2,r2,1011
   26600:	0087c83a 	sub	r3,zero,r2
   26604:	000f883a 	mov	r7,zero
   26608:	003f8006 	br	2640c <__alt_data_end+0xfffe7c0c>
   2660c:	0023883a 	mov	r17,zero
   26610:	0029883a 	mov	r20,zero
   26614:	01c00044 	movi	r7,1
   26618:	003f7c06 	br	2640c <__alt_data_end+0xfffe7c0c>
   2661c:	01c000c4 	movi	r7,3
   26620:	003f7a06 	br	2640c <__alt_data_end+0xfffe7c0c>
   26624:	02400104 	movi	r9,4
   26628:	0021883a 	mov	r16,zero
   2662c:	002b883a 	mov	r21,zero
   26630:	01400044 	movi	r5,1
   26634:	003f6306 	br	263c4 <__alt_data_end+0xfffe7bc4>
   26638:	02400304 	movi	r9,12
   2663c:	014000c4 	movi	r5,3
   26640:	003f6006 	br	263c4 <__alt_data_end+0xfffe7bc4>
   26644:	04000434 	movhi	r16,16
   26648:	0009883a 	mov	r4,zero
   2664c:	843fffc4 	addi	r16,r16,-1
   26650:	057fffc4 	movi	r21,-1
   26654:	0081ffc4 	movi	r2,2047
   26658:	003f9b06 	br	264c8 <__alt_data_end+0xfffe7cc8>
   2665c:	00c00044 	movi	r3,1
   26660:	1887c83a 	sub	r3,r3,r2
   26664:	01000e04 	movi	r4,56
   26668:	20c1530e 	bge	r4,r3,26bb8 <__divdf3+0x86c>
   2666c:	9900004c 	andi	r4,r19,1
   26670:	0005883a 	mov	r2,zero
   26674:	0021883a 	mov	r16,zero
   26678:	002b883a 	mov	r21,zero
   2667c:	003f9206 	br	264c8 <__alt_data_end+0xfffe7cc8>
   26680:	8c012e36 	bltu	r17,r16,26b3c <__divdf3+0x7f0>
   26684:	84412c26 	beq	r16,r17,26b38 <__divdf3+0x7ec>
   26688:	a82f883a 	mov	r23,r21
   2668c:	18ffffc4 	addi	r3,r3,-1
   26690:	002b883a 	mov	r21,zero
   26694:	a004d63a 	srli	r2,r20,24
   26698:	8822923a 	slli	r17,r17,8
   2669c:	a028923a 	slli	r20,r20,8
   266a0:	8009883a 	mov	r4,r16
   266a4:	88acb03a 	or	r22,r17,r2
   266a8:	dd000015 	stw	r20,0(sp)
   266ac:	b028d43a 	srli	r20,r22,16
   266b0:	d8c00215 	stw	r3,8(sp)
   266b4:	b4bfffcc 	andi	r18,r22,65535
   266b8:	a00b883a 	mov	r5,r20
   266bc:	00257c00 	call	257c0 <__udivsi3>
   266c0:	100b883a 	mov	r5,r2
   266c4:	9009883a 	mov	r4,r18
   266c8:	1023883a 	mov	r17,r2
   266cc:	002587c0 	call	2587c <__mulsi3>
   266d0:	8009883a 	mov	r4,r16
   266d4:	a00b883a 	mov	r5,r20
   266d8:	1039883a 	mov	fp,r2
   266dc:	00258240 	call	25824 <__umodsi3>
   266e0:	1004943a 	slli	r2,r2,16
   266e4:	b808d43a 	srli	r4,r23,16
   266e8:	d8c00217 	ldw	r3,8(sp)
   266ec:	2084b03a 	or	r2,r4,r2
   266f0:	1700062e 	bgeu	r2,fp,2670c <__divdf3+0x3c0>
   266f4:	1585883a 	add	r2,r2,r22
   266f8:	893fffc4 	addi	r4,r17,-1
   266fc:	15811d36 	bltu	r2,r22,26b74 <__divdf3+0x828>
   26700:	17011c2e 	bgeu	r2,fp,26b74 <__divdf3+0x828>
   26704:	8c7fff84 	addi	r17,r17,-2
   26708:	1585883a 	add	r2,r2,r22
   2670c:	1739c83a 	sub	fp,r2,fp
   26710:	a00b883a 	mov	r5,r20
   26714:	e009883a 	mov	r4,fp
   26718:	d8c00215 	stw	r3,8(sp)
   2671c:	00257c00 	call	257c0 <__udivsi3>
   26720:	100b883a 	mov	r5,r2
   26724:	9009883a 	mov	r4,r18
   26728:	1021883a 	mov	r16,r2
   2672c:	002587c0 	call	2587c <__mulsi3>
   26730:	a00b883a 	mov	r5,r20
   26734:	e009883a 	mov	r4,fp
   26738:	d8800415 	stw	r2,16(sp)
   2673c:	00258240 	call	25824 <__umodsi3>
   26740:	1004943a 	slli	r2,r2,16
   26744:	da000417 	ldw	r8,16(sp)
   26748:	bdffffcc 	andi	r23,r23,65535
   2674c:	b884b03a 	or	r2,r23,r2
   26750:	d8c00217 	ldw	r3,8(sp)
   26754:	1200062e 	bgeu	r2,r8,26770 <__divdf3+0x424>
   26758:	1585883a 	add	r2,r2,r22
   2675c:	813fffc4 	addi	r4,r16,-1
   26760:	15810236 	bltu	r2,r22,26b6c <__divdf3+0x820>
   26764:	1201012e 	bgeu	r2,r8,26b6c <__divdf3+0x820>
   26768:	843fff84 	addi	r16,r16,-2
   2676c:	1585883a 	add	r2,r2,r22
   26770:	8822943a 	slli	r17,r17,16
   26774:	d9800017 	ldw	r6,0(sp)
   26778:	1211c83a 	sub	r8,r2,r8
   2677c:	8c22b03a 	or	r17,r17,r16
   26780:	373fffcc 	andi	fp,r6,65535
   26784:	8abfffcc 	andi	r10,r17,65535
   26788:	8820d43a 	srli	r16,r17,16
   2678c:	5009883a 	mov	r4,r10
   26790:	e00b883a 	mov	r5,fp
   26794:	302ed43a 	srli	r23,r6,16
   26798:	d8c00215 	stw	r3,8(sp)
   2679c:	da000415 	stw	r8,16(sp)
   267a0:	da800115 	stw	r10,4(sp)
   267a4:	002587c0 	call	2587c <__mulsi3>
   267a8:	800b883a 	mov	r5,r16
   267ac:	e009883a 	mov	r4,fp
   267b0:	d8800515 	stw	r2,20(sp)
   267b4:	002587c0 	call	2587c <__mulsi3>
   267b8:	8009883a 	mov	r4,r16
   267bc:	b80b883a 	mov	r5,r23
   267c0:	d8800315 	stw	r2,12(sp)
   267c4:	002587c0 	call	2587c <__mulsi3>
   267c8:	da800117 	ldw	r10,4(sp)
   267cc:	b80b883a 	mov	r5,r23
   267d0:	1021883a 	mov	r16,r2
   267d4:	5009883a 	mov	r4,r10
   267d8:	002587c0 	call	2587c <__mulsi3>
   267dc:	d9c00517 	ldw	r7,20(sp)
   267e0:	da400317 	ldw	r9,12(sp)
   267e4:	d8c00217 	ldw	r3,8(sp)
   267e8:	3808d43a 	srli	r4,r7,16
   267ec:	1245883a 	add	r2,r2,r9
   267f0:	da000417 	ldw	r8,16(sp)
   267f4:	2085883a 	add	r2,r4,r2
   267f8:	1240022e 	bgeu	r2,r9,26804 <__divdf3+0x4b8>
   267fc:	01000074 	movhi	r4,1
   26800:	8121883a 	add	r16,r16,r4
   26804:	1008d43a 	srli	r4,r2,16
   26808:	1004943a 	slli	r2,r2,16
   2680c:	39ffffcc 	andi	r7,r7,65535
   26810:	2409883a 	add	r4,r4,r16
   26814:	11c5883a 	add	r2,r2,r7
   26818:	4100bb36 	bltu	r8,r4,26b08 <__divdf3+0x7bc>
   2681c:	4100d726 	beq	r8,r4,26b7c <__divdf3+0x830>
   26820:	4109c83a 	sub	r4,r8,r4
   26824:	a8a1c83a 	sub	r16,r21,r2
   26828:	ac2b803a 	cmpltu	r21,r21,r16
   2682c:	256bc83a 	sub	r21,r4,r21
   26830:	b540d926 	beq	r22,r21,26b98 <__divdf3+0x84c>
   26834:	a00b883a 	mov	r5,r20
   26838:	a809883a 	mov	r4,r21
   2683c:	d8c00215 	stw	r3,8(sp)
   26840:	00257c00 	call	257c0 <__udivsi3>
   26844:	100b883a 	mov	r5,r2
   26848:	9009883a 	mov	r4,r18
   2684c:	d8800515 	stw	r2,20(sp)
   26850:	002587c0 	call	2587c <__mulsi3>
   26854:	a809883a 	mov	r4,r21
   26858:	a00b883a 	mov	r5,r20
   2685c:	d8800415 	stw	r2,16(sp)
   26860:	00258240 	call	25824 <__umodsi3>
   26864:	1004943a 	slli	r2,r2,16
   26868:	8008d43a 	srli	r4,r16,16
   2686c:	da000417 	ldw	r8,16(sp)
   26870:	d8c00217 	ldw	r3,8(sp)
   26874:	2084b03a 	or	r2,r4,r2
   26878:	d9c00517 	ldw	r7,20(sp)
   2687c:	1200062e 	bgeu	r2,r8,26898 <__divdf3+0x54c>
   26880:	1585883a 	add	r2,r2,r22
   26884:	393fffc4 	addi	r4,r7,-1
   26888:	1580c536 	bltu	r2,r22,26ba0 <__divdf3+0x854>
   2688c:	1200c42e 	bgeu	r2,r8,26ba0 <__divdf3+0x854>
   26890:	39ffff84 	addi	r7,r7,-2
   26894:	1585883a 	add	r2,r2,r22
   26898:	122bc83a 	sub	r21,r2,r8
   2689c:	a00b883a 	mov	r5,r20
   268a0:	a809883a 	mov	r4,r21
   268a4:	d8c00215 	stw	r3,8(sp)
   268a8:	d9c00515 	stw	r7,20(sp)
   268ac:	00257c00 	call	257c0 <__udivsi3>
   268b0:	9009883a 	mov	r4,r18
   268b4:	100b883a 	mov	r5,r2
   268b8:	d8800415 	stw	r2,16(sp)
   268bc:	002587c0 	call	2587c <__mulsi3>
   268c0:	a809883a 	mov	r4,r21
   268c4:	a00b883a 	mov	r5,r20
   268c8:	1025883a 	mov	r18,r2
   268cc:	00258240 	call	25824 <__umodsi3>
   268d0:	1004943a 	slli	r2,r2,16
   268d4:	813fffcc 	andi	r4,r16,65535
   268d8:	d8c00217 	ldw	r3,8(sp)
   268dc:	20a0b03a 	or	r16,r4,r2
   268e0:	d9c00517 	ldw	r7,20(sp)
   268e4:	da000417 	ldw	r8,16(sp)
   268e8:	8480062e 	bgeu	r16,r18,26904 <__divdf3+0x5b8>
   268ec:	85a1883a 	add	r16,r16,r22
   268f0:	40bfffc4 	addi	r2,r8,-1
   268f4:	8580ac36 	bltu	r16,r22,26ba8 <__divdf3+0x85c>
   268f8:	8480ab2e 	bgeu	r16,r18,26ba8 <__divdf3+0x85c>
   268fc:	423fff84 	addi	r8,r8,-2
   26900:	85a1883a 	add	r16,r16,r22
   26904:	3804943a 	slli	r2,r7,16
   26908:	84a1c83a 	sub	r16,r16,r18
   2690c:	e009883a 	mov	r4,fp
   26910:	1228b03a 	or	r20,r2,r8
   26914:	a1ffffcc 	andi	r7,r20,65535
   26918:	a024d43a 	srli	r18,r20,16
   2691c:	380b883a 	mov	r5,r7
   26920:	d8c00215 	stw	r3,8(sp)
   26924:	d9c00515 	stw	r7,20(sp)
   26928:	002587c0 	call	2587c <__mulsi3>
   2692c:	900b883a 	mov	r5,r18
   26930:	e009883a 	mov	r4,fp
   26934:	102b883a 	mov	r21,r2
   26938:	002587c0 	call	2587c <__mulsi3>
   2693c:	900b883a 	mov	r5,r18
   26940:	b809883a 	mov	r4,r23
   26944:	1039883a 	mov	fp,r2
   26948:	002587c0 	call	2587c <__mulsi3>
   2694c:	d9c00517 	ldw	r7,20(sp)
   26950:	b80b883a 	mov	r5,r23
   26954:	1025883a 	mov	r18,r2
   26958:	3809883a 	mov	r4,r7
   2695c:	002587c0 	call	2587c <__mulsi3>
   26960:	a808d43a 	srli	r4,r21,16
   26964:	1705883a 	add	r2,r2,fp
   26968:	d8c00217 	ldw	r3,8(sp)
   2696c:	2085883a 	add	r2,r4,r2
   26970:	1700022e 	bgeu	r2,fp,2697c <__divdf3+0x630>
   26974:	01000074 	movhi	r4,1
   26978:	9125883a 	add	r18,r18,r4
   2697c:	1008d43a 	srli	r4,r2,16
   26980:	1004943a 	slli	r2,r2,16
   26984:	ad7fffcc 	andi	r21,r21,65535
   26988:	2489883a 	add	r4,r4,r18
   2698c:	1545883a 	add	r2,r2,r21
   26990:	81003836 	bltu	r16,r4,26a74 <__divdf3+0x728>
   26994:	81003626 	beq	r16,r4,26a70 <__divdf3+0x724>
   26998:	a5000054 	ori	r20,r20,1
   2699c:	1880ffc4 	addi	r2,r3,1023
   269a0:	00bf2e0e 	bge	zero,r2,2665c <__alt_data_end+0xfffe7e5c>
   269a4:	a10001cc 	andi	r4,r20,7
   269a8:	20000726 	beq	r4,zero,269c8 <__divdf3+0x67c>
   269ac:	a10003cc 	andi	r4,r20,15
   269b0:	01400104 	movi	r5,4
   269b4:	21400426 	beq	r4,r5,269c8 <__divdf3+0x67c>
   269b8:	a149883a 	add	r4,r20,r5
   269bc:	2529803a 	cmpltu	r20,r4,r20
   269c0:	8d23883a 	add	r17,r17,r20
   269c4:	2029883a 	mov	r20,r4
   269c8:	8900402c 	andhi	r4,r17,256
   269cc:	20000426 	beq	r4,zero,269e0 <__divdf3+0x694>
   269d0:	18810004 	addi	r2,r3,1024
   269d4:	00ffc034 	movhi	r3,65280
   269d8:	18ffffc4 	addi	r3,r3,-1
   269dc:	88e2703a 	and	r17,r17,r3
   269e0:	00c1ff84 	movi	r3,2046
   269e4:	18beb416 	blt	r3,r2,264b8 <__alt_data_end+0xfffe7cb8>
   269e8:	a028d0fa 	srli	r20,r20,3
   269ec:	882a977a 	slli	r21,r17,29
   269f0:	8820927a 	slli	r16,r17,9
   269f4:	1081ffcc 	andi	r2,r2,2047
   269f8:	ad2ab03a 	or	r21,r21,r20
   269fc:	8020d33a 	srli	r16,r16,12
   26a00:	9900004c 	andi	r4,r19,1
   26a04:	003eb006 	br	264c8 <__alt_data_end+0xfffe7cc8>
   26a08:	8080022c 	andhi	r2,r16,8
   26a0c:	10001226 	beq	r2,zero,26a58 <__divdf3+0x70c>
   26a10:	8880022c 	andhi	r2,r17,8
   26a14:	1000101e 	bne	r2,zero,26a58 <__divdf3+0x70c>
   26a18:	00800434 	movhi	r2,16
   26a1c:	8c000234 	orhi	r16,r17,8
   26a20:	10bfffc4 	addi	r2,r2,-1
   26a24:	b809883a 	mov	r4,r23
   26a28:	80a0703a 	and	r16,r16,r2
   26a2c:	a02b883a 	mov	r21,r20
   26a30:	003f0806 	br	26654 <__alt_data_end+0xfffe7e54>
   26a34:	008000c4 	movi	r2,3
   26a38:	3880b126 	beq	r7,r2,26d00 <__divdf3+0x9b4>
   26a3c:	00800044 	movi	r2,1
   26a40:	38805b1e 	bne	r7,r2,26bb0 <__divdf3+0x864>
   26a44:	e009883a 	mov	r4,fp
   26a48:	0005883a 	mov	r2,zero
   26a4c:	0021883a 	mov	r16,zero
   26a50:	002b883a 	mov	r21,zero
   26a54:	003e9c06 	br	264c8 <__alt_data_end+0xfffe7cc8>
   26a58:	00800434 	movhi	r2,16
   26a5c:	84000234 	orhi	r16,r16,8
   26a60:	10bfffc4 	addi	r2,r2,-1
   26a64:	b009883a 	mov	r4,r22
   26a68:	80a0703a 	and	r16,r16,r2
   26a6c:	003ef906 	br	26654 <__alt_data_end+0xfffe7e54>
   26a70:	103fca26 	beq	r2,zero,2699c <__alt_data_end+0xfffe819c>
   26a74:	b421883a 	add	r16,r22,r16
   26a78:	a17fffc4 	addi	r5,r20,-1
   26a7c:	8580422e 	bgeu	r16,r22,26b88 <__divdf3+0x83c>
   26a80:	2829883a 	mov	r20,r5
   26a84:	813fc41e 	bne	r16,r4,26998 <__alt_data_end+0xfffe8198>
   26a88:	d9800017 	ldw	r6,0(sp)
   26a8c:	30bfc21e 	bne	r6,r2,26998 <__alt_data_end+0xfffe8198>
   26a90:	003fc206 	br	2699c <__alt_data_end+0xfffe819c>
   26a94:	143ff604 	addi	r16,r2,-40
   26a98:	8c20983a 	sll	r16,r17,r16
   26a9c:	002b883a 	mov	r21,zero
   26aa0:	003eb406 	br	26574 <__alt_data_end+0xfffe7d74>
   26aa4:	d9800215 	stw	r6,8(sp)
   26aa8:	d9c00515 	stw	r7,20(sp)
   26aac:	da000415 	stw	r8,16(sp)
   26ab0:	00284880 	call	28488 <__clzsi2>
   26ab4:	10800804 	addi	r2,r2,32
   26ab8:	da000417 	ldw	r8,16(sp)
   26abc:	d9c00517 	ldw	r7,20(sp)
   26ac0:	d9800217 	ldw	r6,8(sp)
   26ac4:	003ea106 	br	2654c <__alt_data_end+0xfffe7d4c>
   26ac8:	147ff604 	addi	r17,r2,-40
   26acc:	3462983a 	sll	r17,r6,r17
   26ad0:	0029883a 	mov	r20,zero
   26ad4:	003ec906 	br	265fc <__alt_data_end+0xfffe7dfc>
   26ad8:	3009883a 	mov	r4,r6
   26adc:	d9400115 	stw	r5,4(sp)
   26ae0:	d9800215 	stw	r6,8(sp)
   26ae4:	da000415 	stw	r8,16(sp)
   26ae8:	da400315 	stw	r9,12(sp)
   26aec:	00284880 	call	28488 <__clzsi2>
   26af0:	10800804 	addi	r2,r2,32
   26af4:	da400317 	ldw	r9,12(sp)
   26af8:	da000417 	ldw	r8,16(sp)
   26afc:	d9800217 	ldw	r6,8(sp)
   26b00:	d9400117 	ldw	r5,4(sp)
   26b04:	003eb306 	br	265d4 <__alt_data_end+0xfffe7dd4>
   26b08:	d9800017 	ldw	r6,0(sp)
   26b0c:	a9ab883a 	add	r21,r21,r6
   26b10:	a98b803a 	cmpltu	r5,r21,r6
   26b14:	2d8b883a 	add	r5,r5,r22
   26b18:	2a11883a 	add	r8,r5,r8
   26b1c:	897fffc4 	addi	r5,r17,-1
   26b20:	b2000c2e 	bgeu	r22,r8,26b54 <__divdf3+0x808>
   26b24:	41003f36 	bltu	r8,r4,26c24 <__divdf3+0x8d8>
   26b28:	22006c26 	beq	r4,r8,26cdc <__divdf3+0x990>
   26b2c:	4109c83a 	sub	r4,r8,r4
   26b30:	2823883a 	mov	r17,r5
   26b34:	003f3b06 	br	26824 <__alt_data_end+0xfffe8024>
   26b38:	ad3ed336 	bltu	r21,r20,26688 <__alt_data_end+0xfffe7e88>
   26b3c:	a804d07a 	srli	r2,r21,1
   26b40:	802e97fa 	slli	r23,r16,31
   26b44:	a82a97fa 	slli	r21,r21,31
   26b48:	8020d07a 	srli	r16,r16,1
   26b4c:	b8aeb03a 	or	r23,r23,r2
   26b50:	003ed006 	br	26694 <__alt_data_end+0xfffe7e94>
   26b54:	b23ff51e 	bne	r22,r8,26b2c <__alt_data_end+0xfffe832c>
   26b58:	d9800017 	ldw	r6,0(sp)
   26b5c:	a9bff12e 	bgeu	r21,r6,26b24 <__alt_data_end+0xfffe8324>
   26b60:	b109c83a 	sub	r4,r22,r4
   26b64:	2823883a 	mov	r17,r5
   26b68:	003f2e06 	br	26824 <__alt_data_end+0xfffe8024>
   26b6c:	2021883a 	mov	r16,r4
   26b70:	003eff06 	br	26770 <__alt_data_end+0xfffe7f70>
   26b74:	2023883a 	mov	r17,r4
   26b78:	003ee406 	br	2670c <__alt_data_end+0xfffe7f0c>
   26b7c:	a8bfe236 	bltu	r21,r2,26b08 <__alt_data_end+0xfffe8308>
   26b80:	0009883a 	mov	r4,zero
   26b84:	003f2706 	br	26824 <__alt_data_end+0xfffe8024>
   26b88:	81002d36 	bltu	r16,r4,26c40 <__divdf3+0x8f4>
   26b8c:	24005626 	beq	r4,r16,26ce8 <__divdf3+0x99c>
   26b90:	2829883a 	mov	r20,r5
   26b94:	003f8006 	br	26998 <__alt_data_end+0xfffe8198>
   26b98:	053fffc4 	movi	r20,-1
   26b9c:	003f7f06 	br	2699c <__alt_data_end+0xfffe819c>
   26ba0:	200f883a 	mov	r7,r4
   26ba4:	003f3c06 	br	26898 <__alt_data_end+0xfffe8098>
   26ba8:	1011883a 	mov	r8,r2
   26bac:	003f5506 	br	26904 <__alt_data_end+0xfffe8104>
   26bb0:	e027883a 	mov	r19,fp
   26bb4:	003f7906 	br	2699c <__alt_data_end+0xfffe819c>
   26bb8:	010007c4 	movi	r4,31
   26bbc:	20c02816 	blt	r4,r3,26c60 <__divdf3+0x914>
   26bc0:	00800804 	movi	r2,32
   26bc4:	10c5c83a 	sub	r2,r2,r3
   26bc8:	888a983a 	sll	r5,r17,r2
   26bcc:	a0c8d83a 	srl	r4,r20,r3
   26bd0:	a084983a 	sll	r2,r20,r2
   26bd4:	88e2d83a 	srl	r17,r17,r3
   26bd8:	2906b03a 	or	r3,r5,r4
   26bdc:	1004c03a 	cmpne	r2,r2,zero
   26be0:	1886b03a 	or	r3,r3,r2
   26be4:	188001cc 	andi	r2,r3,7
   26be8:	10000726 	beq	r2,zero,26c08 <__divdf3+0x8bc>
   26bec:	188003cc 	andi	r2,r3,15
   26bf0:	01000104 	movi	r4,4
   26bf4:	11000426 	beq	r2,r4,26c08 <__divdf3+0x8bc>
   26bf8:	1805883a 	mov	r2,r3
   26bfc:	10c00104 	addi	r3,r2,4
   26c00:	1885803a 	cmpltu	r2,r3,r2
   26c04:	88a3883a 	add	r17,r17,r2
   26c08:	8880202c 	andhi	r2,r17,128
   26c0c:	10002926 	beq	r2,zero,26cb4 <__divdf3+0x968>
   26c10:	9900004c 	andi	r4,r19,1
   26c14:	00800044 	movi	r2,1
   26c18:	0021883a 	mov	r16,zero
   26c1c:	002b883a 	mov	r21,zero
   26c20:	003e2906 	br	264c8 <__alt_data_end+0xfffe7cc8>
   26c24:	d9800017 	ldw	r6,0(sp)
   26c28:	8c7fff84 	addi	r17,r17,-2
   26c2c:	a9ab883a 	add	r21,r21,r6
   26c30:	a98b803a 	cmpltu	r5,r21,r6
   26c34:	2d8b883a 	add	r5,r5,r22
   26c38:	2a11883a 	add	r8,r5,r8
   26c3c:	003ef806 	br	26820 <__alt_data_end+0xfffe8020>
   26c40:	d9800017 	ldw	r6,0(sp)
   26c44:	318f883a 	add	r7,r6,r6
   26c48:	398b803a 	cmpltu	r5,r7,r6
   26c4c:	2d8d883a 	add	r6,r5,r22
   26c50:	81a1883a 	add	r16,r16,r6
   26c54:	a17fff84 	addi	r5,r20,-2
   26c58:	d9c00015 	stw	r7,0(sp)
   26c5c:	003f8806 	br	26a80 <__alt_data_end+0xfffe8280>
   26c60:	013ff844 	movi	r4,-31
   26c64:	2085c83a 	sub	r2,r4,r2
   26c68:	8888d83a 	srl	r4,r17,r2
   26c6c:	00800804 	movi	r2,32
   26c70:	18802126 	beq	r3,r2,26cf8 <__divdf3+0x9ac>
   26c74:	04001004 	movi	r16,64
   26c78:	80c7c83a 	sub	r3,r16,r3
   26c7c:	88e0983a 	sll	r16,r17,r3
   26c80:	8504b03a 	or	r2,r16,r20
   26c84:	1004c03a 	cmpne	r2,r2,zero
   26c88:	2084b03a 	or	r2,r4,r2
   26c8c:	144001cc 	andi	r17,r2,7
   26c90:	88000d1e 	bne	r17,zero,26cc8 <__divdf3+0x97c>
   26c94:	0021883a 	mov	r16,zero
   26c98:	102ad0fa 	srli	r21,r2,3
   26c9c:	9900004c 	andi	r4,r19,1
   26ca0:	0005883a 	mov	r2,zero
   26ca4:	ac6ab03a 	or	r21,r21,r17
   26ca8:	003e0706 	br	264c8 <__alt_data_end+0xfffe7cc8>
   26cac:	1007883a 	mov	r3,r2
   26cb0:	0023883a 	mov	r17,zero
   26cb4:	8820927a 	slli	r16,r17,9
   26cb8:	1805883a 	mov	r2,r3
   26cbc:	8822977a 	slli	r17,r17,29
   26cc0:	8020d33a 	srli	r16,r16,12
   26cc4:	003ff406 	br	26c98 <__alt_data_end+0xfffe8498>
   26cc8:	10c003cc 	andi	r3,r2,15
   26ccc:	01000104 	movi	r4,4
   26cd0:	193ff626 	beq	r3,r4,26cac <__alt_data_end+0xfffe84ac>
   26cd4:	0023883a 	mov	r17,zero
   26cd8:	003fc806 	br	26bfc <__alt_data_end+0xfffe83fc>
   26cdc:	a8bfd136 	bltu	r21,r2,26c24 <__alt_data_end+0xfffe8424>
   26ce0:	2823883a 	mov	r17,r5
   26ce4:	003fa606 	br	26b80 <__alt_data_end+0xfffe8380>
   26ce8:	d9800017 	ldw	r6,0(sp)
   26cec:	30bfd436 	bltu	r6,r2,26c40 <__alt_data_end+0xfffe8440>
   26cf0:	2829883a 	mov	r20,r5
   26cf4:	003f6406 	br	26a88 <__alt_data_end+0xfffe8288>
   26cf8:	0021883a 	mov	r16,zero
   26cfc:	003fe006 	br	26c80 <__alt_data_end+0xfffe8480>
   26d00:	00800434 	movhi	r2,16
   26d04:	8c000234 	orhi	r16,r17,8
   26d08:	10bfffc4 	addi	r2,r2,-1
   26d0c:	e009883a 	mov	r4,fp
   26d10:	80a0703a 	and	r16,r16,r2
   26d14:	a02b883a 	mov	r21,r20
   26d18:	003e4e06 	br	26654 <__alt_data_end+0xfffe7e54>

00026d1c <__eqdf2>:
   26d1c:	2804d53a 	srli	r2,r5,20
   26d20:	3806d53a 	srli	r3,r7,20
   26d24:	02000434 	movhi	r8,16
   26d28:	423fffc4 	addi	r8,r8,-1
   26d2c:	1081ffcc 	andi	r2,r2,2047
   26d30:	0281ffc4 	movi	r10,2047
   26d34:	2a12703a 	and	r9,r5,r8
   26d38:	18c1ffcc 	andi	r3,r3,2047
   26d3c:	3a10703a 	and	r8,r7,r8
   26d40:	280ad7fa 	srli	r5,r5,31
   26d44:	380ed7fa 	srli	r7,r7,31
   26d48:	12801026 	beq	r2,r10,26d8c <__eqdf2+0x70>
   26d4c:	0281ffc4 	movi	r10,2047
   26d50:	1a800a26 	beq	r3,r10,26d7c <__eqdf2+0x60>
   26d54:	10c00226 	beq	r2,r3,26d60 <__eqdf2+0x44>
   26d58:	00800044 	movi	r2,1
   26d5c:	f800283a 	ret
   26d60:	4a3ffd1e 	bne	r9,r8,26d58 <__alt_data_end+0xfffe8558>
   26d64:	21bffc1e 	bne	r4,r6,26d58 <__alt_data_end+0xfffe8558>
   26d68:	29c00c26 	beq	r5,r7,26d9c <__eqdf2+0x80>
   26d6c:	103ffa1e 	bne	r2,zero,26d58 <__alt_data_end+0xfffe8558>
   26d70:	2244b03a 	or	r2,r4,r9
   26d74:	1004c03a 	cmpne	r2,r2,zero
   26d78:	f800283a 	ret
   26d7c:	3214b03a 	or	r10,r6,r8
   26d80:	503ff426 	beq	r10,zero,26d54 <__alt_data_end+0xfffe8554>
   26d84:	00800044 	movi	r2,1
   26d88:	f800283a 	ret
   26d8c:	2254b03a 	or	r10,r4,r9
   26d90:	503fee26 	beq	r10,zero,26d4c <__alt_data_end+0xfffe854c>
   26d94:	00800044 	movi	r2,1
   26d98:	f800283a 	ret
   26d9c:	0005883a 	mov	r2,zero
   26da0:	f800283a 	ret

00026da4 <__gedf2>:
   26da4:	2804d53a 	srli	r2,r5,20
   26da8:	3806d53a 	srli	r3,r7,20
   26dac:	02000434 	movhi	r8,16
   26db0:	423fffc4 	addi	r8,r8,-1
   26db4:	1081ffcc 	andi	r2,r2,2047
   26db8:	0241ffc4 	movi	r9,2047
   26dbc:	2a14703a 	and	r10,r5,r8
   26dc0:	18c1ffcc 	andi	r3,r3,2047
   26dc4:	3a10703a 	and	r8,r7,r8
   26dc8:	280ad7fa 	srli	r5,r5,31
   26dcc:	380ed7fa 	srli	r7,r7,31
   26dd0:	12401d26 	beq	r2,r9,26e48 <__gedf2+0xa4>
   26dd4:	0241ffc4 	movi	r9,2047
   26dd8:	1a401226 	beq	r3,r9,26e24 <__gedf2+0x80>
   26ddc:	1000081e 	bne	r2,zero,26e00 <__gedf2+0x5c>
   26de0:	2296b03a 	or	r11,r4,r10
   26de4:	5813003a 	cmpeq	r9,r11,zero
   26de8:	1800091e 	bne	r3,zero,26e10 <__gedf2+0x6c>
   26dec:	3218b03a 	or	r12,r6,r8
   26df0:	6000071e 	bne	r12,zero,26e10 <__gedf2+0x6c>
   26df4:	0005883a 	mov	r2,zero
   26df8:	5800101e 	bne	r11,zero,26e3c <__gedf2+0x98>
   26dfc:	f800283a 	ret
   26e00:	18000c1e 	bne	r3,zero,26e34 <__gedf2+0x90>
   26e04:	3212b03a 	or	r9,r6,r8
   26e08:	48000c26 	beq	r9,zero,26e3c <__gedf2+0x98>
   26e0c:	0013883a 	mov	r9,zero
   26e10:	39c03fcc 	andi	r7,r7,255
   26e14:	48000826 	beq	r9,zero,26e38 <__gedf2+0x94>
   26e18:	38000926 	beq	r7,zero,26e40 <__gedf2+0x9c>
   26e1c:	00800044 	movi	r2,1
   26e20:	f800283a 	ret
   26e24:	3212b03a 	or	r9,r6,r8
   26e28:	483fec26 	beq	r9,zero,26ddc <__alt_data_end+0xfffe85dc>
   26e2c:	00bfff84 	movi	r2,-2
   26e30:	f800283a 	ret
   26e34:	39c03fcc 	andi	r7,r7,255
   26e38:	29c00626 	beq	r5,r7,26e54 <__gedf2+0xb0>
   26e3c:	283ff726 	beq	r5,zero,26e1c <__alt_data_end+0xfffe861c>
   26e40:	00bfffc4 	movi	r2,-1
   26e44:	f800283a 	ret
   26e48:	2292b03a 	or	r9,r4,r10
   26e4c:	483fe126 	beq	r9,zero,26dd4 <__alt_data_end+0xfffe85d4>
   26e50:	003ff606 	br	26e2c <__alt_data_end+0xfffe862c>
   26e54:	18bff916 	blt	r3,r2,26e3c <__alt_data_end+0xfffe863c>
   26e58:	10c00316 	blt	r2,r3,26e68 <__gedf2+0xc4>
   26e5c:	42bff736 	bltu	r8,r10,26e3c <__alt_data_end+0xfffe863c>
   26e60:	52000326 	beq	r10,r8,26e70 <__gedf2+0xcc>
   26e64:	5200042e 	bgeu	r10,r8,26e78 <__gedf2+0xd4>
   26e68:	283fec1e 	bne	r5,zero,26e1c <__alt_data_end+0xfffe861c>
   26e6c:	003ff406 	br	26e40 <__alt_data_end+0xfffe8640>
   26e70:	313ff236 	bltu	r6,r4,26e3c <__alt_data_end+0xfffe863c>
   26e74:	21bffc36 	bltu	r4,r6,26e68 <__alt_data_end+0xfffe8668>
   26e78:	0005883a 	mov	r2,zero
   26e7c:	f800283a 	ret

00026e80 <__ledf2>:
   26e80:	2804d53a 	srli	r2,r5,20
   26e84:	3810d53a 	srli	r8,r7,20
   26e88:	00c00434 	movhi	r3,16
   26e8c:	18ffffc4 	addi	r3,r3,-1
   26e90:	1081ffcc 	andi	r2,r2,2047
   26e94:	0241ffc4 	movi	r9,2047
   26e98:	28d4703a 	and	r10,r5,r3
   26e9c:	4201ffcc 	andi	r8,r8,2047
   26ea0:	38c6703a 	and	r3,r7,r3
   26ea4:	280ad7fa 	srli	r5,r5,31
   26ea8:	380ed7fa 	srli	r7,r7,31
   26eac:	12401f26 	beq	r2,r9,26f2c <__ledf2+0xac>
   26eb0:	0241ffc4 	movi	r9,2047
   26eb4:	42401426 	beq	r8,r9,26f08 <__ledf2+0x88>
   26eb8:	1000091e 	bne	r2,zero,26ee0 <__ledf2+0x60>
   26ebc:	2296b03a 	or	r11,r4,r10
   26ec0:	5813003a 	cmpeq	r9,r11,zero
   26ec4:	29403fcc 	andi	r5,r5,255
   26ec8:	40000a1e 	bne	r8,zero,26ef4 <__ledf2+0x74>
   26ecc:	30d8b03a 	or	r12,r6,r3
   26ed0:	6000081e 	bne	r12,zero,26ef4 <__ledf2+0x74>
   26ed4:	0005883a 	mov	r2,zero
   26ed8:	5800111e 	bne	r11,zero,26f20 <__ledf2+0xa0>
   26edc:	f800283a 	ret
   26ee0:	29403fcc 	andi	r5,r5,255
   26ee4:	40000c1e 	bne	r8,zero,26f18 <__ledf2+0x98>
   26ee8:	30d2b03a 	or	r9,r6,r3
   26eec:	48000c26 	beq	r9,zero,26f20 <__ledf2+0xa0>
   26ef0:	0013883a 	mov	r9,zero
   26ef4:	39c03fcc 	andi	r7,r7,255
   26ef8:	48000826 	beq	r9,zero,26f1c <__ledf2+0x9c>
   26efc:	38001126 	beq	r7,zero,26f44 <__ledf2+0xc4>
   26f00:	00800044 	movi	r2,1
   26f04:	f800283a 	ret
   26f08:	30d2b03a 	or	r9,r6,r3
   26f0c:	483fea26 	beq	r9,zero,26eb8 <__alt_data_end+0xfffe86b8>
   26f10:	00800084 	movi	r2,2
   26f14:	f800283a 	ret
   26f18:	39c03fcc 	andi	r7,r7,255
   26f1c:	39400726 	beq	r7,r5,26f3c <__ledf2+0xbc>
   26f20:	2800081e 	bne	r5,zero,26f44 <__ledf2+0xc4>
   26f24:	00800044 	movi	r2,1
   26f28:	f800283a 	ret
   26f2c:	2292b03a 	or	r9,r4,r10
   26f30:	483fdf26 	beq	r9,zero,26eb0 <__alt_data_end+0xfffe86b0>
   26f34:	00800084 	movi	r2,2
   26f38:	f800283a 	ret
   26f3c:	4080030e 	bge	r8,r2,26f4c <__ledf2+0xcc>
   26f40:	383fef26 	beq	r7,zero,26f00 <__alt_data_end+0xfffe8700>
   26f44:	00bfffc4 	movi	r2,-1
   26f48:	f800283a 	ret
   26f4c:	123feb16 	blt	r2,r8,26efc <__alt_data_end+0xfffe86fc>
   26f50:	1abff336 	bltu	r3,r10,26f20 <__alt_data_end+0xfffe8720>
   26f54:	50c00326 	beq	r10,r3,26f64 <__ledf2+0xe4>
   26f58:	50c0042e 	bgeu	r10,r3,26f6c <__ledf2+0xec>
   26f5c:	283fe81e 	bne	r5,zero,26f00 <__alt_data_end+0xfffe8700>
   26f60:	003ff806 	br	26f44 <__alt_data_end+0xfffe8744>
   26f64:	313fee36 	bltu	r6,r4,26f20 <__alt_data_end+0xfffe8720>
   26f68:	21bffc36 	bltu	r4,r6,26f5c <__alt_data_end+0xfffe875c>
   26f6c:	0005883a 	mov	r2,zero
   26f70:	f800283a 	ret

00026f74 <__muldf3>:
   26f74:	deffee04 	addi	sp,sp,-72
   26f78:	dd000c15 	stw	r20,48(sp)
   26f7c:	2828d53a 	srli	r20,r5,20
   26f80:	ddc00f15 	stw	r23,60(sp)
   26f84:	282ed7fa 	srli	r23,r5,31
   26f88:	dc000815 	stw	r16,32(sp)
   26f8c:	04000434 	movhi	r16,16
   26f90:	dcc00b15 	stw	r19,44(sp)
   26f94:	843fffc4 	addi	r16,r16,-1
   26f98:	dfc01115 	stw	ra,68(sp)
   26f9c:	df001015 	stw	fp,64(sp)
   26fa0:	dd800e15 	stw	r22,56(sp)
   26fa4:	dd400d15 	stw	r21,52(sp)
   26fa8:	dc800a15 	stw	r18,40(sp)
   26fac:	dc400915 	stw	r17,36(sp)
   26fb0:	a501ffcc 	andi	r20,r20,2047
   26fb4:	2c20703a 	and	r16,r5,r16
   26fb8:	b827883a 	mov	r19,r23
   26fbc:	ba403fcc 	andi	r9,r23,255
   26fc0:	a0006026 	beq	r20,zero,27144 <__muldf3+0x1d0>
   26fc4:	0081ffc4 	movi	r2,2047
   26fc8:	202d883a 	mov	r22,r4
   26fcc:	a0803626 	beq	r20,r2,270a8 <__muldf3+0x134>
   26fd0:	84000434 	orhi	r16,r16,16
   26fd4:	200ad77a 	srli	r5,r4,29
   26fd8:	800490fa 	slli	r2,r16,3
   26fdc:	202c90fa 	slli	r22,r4,3
   26fe0:	a53f0044 	addi	r20,r20,-1023
   26fe4:	28a0b03a 	or	r16,r5,r2
   26fe8:	002b883a 	mov	r21,zero
   26fec:	000b883a 	mov	r5,zero
   26ff0:	3804d53a 	srli	r2,r7,20
   26ff4:	3838d7fa 	srli	fp,r7,31
   26ff8:	04400434 	movhi	r17,16
   26ffc:	8c7fffc4 	addi	r17,r17,-1
   27000:	1081ffcc 	andi	r2,r2,2047
   27004:	3025883a 	mov	r18,r6
   27008:	3c62703a 	and	r17,r7,r17
   2700c:	e2803fcc 	andi	r10,fp,255
   27010:	10006d26 	beq	r2,zero,271c8 <__muldf3+0x254>
   27014:	00c1ffc4 	movi	r3,2047
   27018:	10c06526 	beq	r2,r3,271b0 <__muldf3+0x23c>
   2701c:	8c400434 	orhi	r17,r17,16
   27020:	300ed77a 	srli	r7,r6,29
   27024:	880690fa 	slli	r3,r17,3
   27028:	302490fa 	slli	r18,r6,3
   2702c:	10bf0044 	addi	r2,r2,-1023
   27030:	38e2b03a 	or	r17,r7,r3
   27034:	000f883a 	mov	r7,zero
   27038:	a087883a 	add	r3,r20,r2
   2703c:	010003c4 	movi	r4,15
   27040:	3d44b03a 	or	r2,r7,r21
   27044:	e5ccf03a 	xor	r6,fp,r23
   27048:	1a000044 	addi	r8,r3,1
   2704c:	20809b36 	bltu	r4,r2,272bc <__muldf3+0x348>
   27050:	100490ba 	slli	r2,r2,2
   27054:	010000b4 	movhi	r4,2
   27058:	211c1a04 	addi	r4,r4,28776
   2705c:	1105883a 	add	r2,r2,r4
   27060:	10800017 	ldw	r2,0(r2)
   27064:	1000683a 	jmp	r2
   27068:	000272bc 	xorhi	zero,zero,2506
   2706c:	000270c8 	cmpgei	zero,zero,2499
   27070:	000270c8 	cmpgei	zero,zero,2499
   27074:	000270c4 	movi	zero,2499
   27078:	00027298 	cmpnei	zero,zero,2506
   2707c:	00027298 	cmpnei	zero,zero,2506
   27080:	00027280 	call	2728 <set_addrs_to_default+0x15e8>
   27084:	000270c4 	movi	zero,2499
   27088:	00027298 	cmpnei	zero,zero,2506
   2708c:	00027280 	call	2728 <set_addrs_to_default+0x15e8>
   27090:	00027298 	cmpnei	zero,zero,2506
   27094:	000270c4 	movi	zero,2499
   27098:	000272a8 	cmpgeui	zero,zero,2506
   2709c:	000272a8 	cmpgeui	zero,zero,2506
   270a0:	000272a8 	cmpgeui	zero,zero,2506
   270a4:	00027608 	cmpgei	zero,zero,2520
   270a8:	2404b03a 	or	r2,r4,r16
   270ac:	1000711e 	bne	r2,zero,27274 <__muldf3+0x300>
   270b0:	05400204 	movi	r21,8
   270b4:	0021883a 	mov	r16,zero
   270b8:	002d883a 	mov	r22,zero
   270bc:	01400084 	movi	r5,2
   270c0:	003fcb06 	br	26ff0 <__alt_data_end+0xfffe87f0>
   270c4:	500d883a 	mov	r6,r10
   270c8:	00800084 	movi	r2,2
   270cc:	38805926 	beq	r7,r2,27234 <__muldf3+0x2c0>
   270d0:	008000c4 	movi	r2,3
   270d4:	3881bb26 	beq	r7,r2,277c4 <__muldf3+0x850>
   270d8:	00800044 	movi	r2,1
   270dc:	3881961e 	bne	r7,r2,27738 <__muldf3+0x7c4>
   270e0:	3027883a 	mov	r19,r6
   270e4:	0005883a 	mov	r2,zero
   270e8:	0021883a 	mov	r16,zero
   270ec:	002d883a 	mov	r22,zero
   270f0:	1004953a 	slli	r2,r2,20
   270f4:	98c03fcc 	andi	r3,r19,255
   270f8:	04400434 	movhi	r17,16
   270fc:	8c7fffc4 	addi	r17,r17,-1
   27100:	180697fa 	slli	r3,r3,31
   27104:	8460703a 	and	r16,r16,r17
   27108:	80a0b03a 	or	r16,r16,r2
   2710c:	80c6b03a 	or	r3,r16,r3
   27110:	b005883a 	mov	r2,r22
   27114:	dfc01117 	ldw	ra,68(sp)
   27118:	df001017 	ldw	fp,64(sp)
   2711c:	ddc00f17 	ldw	r23,60(sp)
   27120:	dd800e17 	ldw	r22,56(sp)
   27124:	dd400d17 	ldw	r21,52(sp)
   27128:	dd000c17 	ldw	r20,48(sp)
   2712c:	dcc00b17 	ldw	r19,44(sp)
   27130:	dc800a17 	ldw	r18,40(sp)
   27134:	dc400917 	ldw	r17,36(sp)
   27138:	dc000817 	ldw	r16,32(sp)
   2713c:	dec01204 	addi	sp,sp,72
   27140:	f800283a 	ret
   27144:	2404b03a 	or	r2,r4,r16
   27148:	202b883a 	mov	r21,r4
   2714c:	10004426 	beq	r2,zero,27260 <__muldf3+0x2ec>
   27150:	80015126 	beq	r16,zero,27698 <__muldf3+0x724>
   27154:	8009883a 	mov	r4,r16
   27158:	d9800715 	stw	r6,28(sp)
   2715c:	d9c00215 	stw	r7,8(sp)
   27160:	da400415 	stw	r9,16(sp)
   27164:	00284880 	call	28488 <__clzsi2>
   27168:	d9800717 	ldw	r6,28(sp)
   2716c:	d9c00217 	ldw	r7,8(sp)
   27170:	da400417 	ldw	r9,16(sp)
   27174:	113ffd44 	addi	r4,r2,-11
   27178:	00c00704 	movi	r3,28
   2717c:	19014216 	blt	r3,r4,27688 <__muldf3+0x714>
   27180:	00c00744 	movi	r3,29
   27184:	15bffe04 	addi	r22,r2,-8
   27188:	1907c83a 	sub	r3,r3,r4
   2718c:	85a0983a 	sll	r16,r16,r22
   27190:	a8c6d83a 	srl	r3,r21,r3
   27194:	adac983a 	sll	r22,r21,r22
   27198:	1c20b03a 	or	r16,r3,r16
   2719c:	1080fcc4 	addi	r2,r2,1011
   271a0:	00a9c83a 	sub	r20,zero,r2
   271a4:	002b883a 	mov	r21,zero
   271a8:	000b883a 	mov	r5,zero
   271ac:	003f9006 	br	26ff0 <__alt_data_end+0xfffe87f0>
   271b0:	3446b03a 	or	r3,r6,r17
   271b4:	1800281e 	bne	r3,zero,27258 <__muldf3+0x2e4>
   271b8:	0023883a 	mov	r17,zero
   271bc:	0025883a 	mov	r18,zero
   271c0:	01c00084 	movi	r7,2
   271c4:	003f9c06 	br	27038 <__alt_data_end+0xfffe8838>
   271c8:	3446b03a 	or	r3,r6,r17
   271cc:	18001e26 	beq	r3,zero,27248 <__muldf3+0x2d4>
   271d0:	88012126 	beq	r17,zero,27658 <__muldf3+0x6e4>
   271d4:	8809883a 	mov	r4,r17
   271d8:	d9400215 	stw	r5,8(sp)
   271dc:	d9800715 	stw	r6,28(sp)
   271e0:	da400415 	stw	r9,16(sp)
   271e4:	da800315 	stw	r10,12(sp)
   271e8:	00284880 	call	28488 <__clzsi2>
   271ec:	d9400217 	ldw	r5,8(sp)
   271f0:	d9800717 	ldw	r6,28(sp)
   271f4:	da400417 	ldw	r9,16(sp)
   271f8:	da800317 	ldw	r10,12(sp)
   271fc:	113ffd44 	addi	r4,r2,-11
   27200:	00c00704 	movi	r3,28
   27204:	19011016 	blt	r3,r4,27648 <__muldf3+0x6d4>
   27208:	00c00744 	movi	r3,29
   2720c:	14bffe04 	addi	r18,r2,-8
   27210:	1907c83a 	sub	r3,r3,r4
   27214:	8ca2983a 	sll	r17,r17,r18
   27218:	30c6d83a 	srl	r3,r6,r3
   2721c:	34a4983a 	sll	r18,r6,r18
   27220:	1c62b03a 	or	r17,r3,r17
   27224:	1080fcc4 	addi	r2,r2,1011
   27228:	0085c83a 	sub	r2,zero,r2
   2722c:	000f883a 	mov	r7,zero
   27230:	003f8106 	br	27038 <__alt_data_end+0xfffe8838>
   27234:	3027883a 	mov	r19,r6
   27238:	0081ffc4 	movi	r2,2047
   2723c:	0021883a 	mov	r16,zero
   27240:	002d883a 	mov	r22,zero
   27244:	003faa06 	br	270f0 <__alt_data_end+0xfffe88f0>
   27248:	0023883a 	mov	r17,zero
   2724c:	0025883a 	mov	r18,zero
   27250:	01c00044 	movi	r7,1
   27254:	003f7806 	br	27038 <__alt_data_end+0xfffe8838>
   27258:	01c000c4 	movi	r7,3
   2725c:	003f7606 	br	27038 <__alt_data_end+0xfffe8838>
   27260:	05400104 	movi	r21,4
   27264:	0021883a 	mov	r16,zero
   27268:	002d883a 	mov	r22,zero
   2726c:	01400044 	movi	r5,1
   27270:	003f5f06 	br	26ff0 <__alt_data_end+0xfffe87f0>
   27274:	05400304 	movi	r21,12
   27278:	014000c4 	movi	r5,3
   2727c:	003f5c06 	br	26ff0 <__alt_data_end+0xfffe87f0>
   27280:	04000434 	movhi	r16,16
   27284:	0027883a 	mov	r19,zero
   27288:	843fffc4 	addi	r16,r16,-1
   2728c:	05bfffc4 	movi	r22,-1
   27290:	0081ffc4 	movi	r2,2047
   27294:	003f9606 	br	270f0 <__alt_data_end+0xfffe88f0>
   27298:	8023883a 	mov	r17,r16
   2729c:	b025883a 	mov	r18,r22
   272a0:	280f883a 	mov	r7,r5
   272a4:	003f8806 	br	270c8 <__alt_data_end+0xfffe88c8>
   272a8:	8023883a 	mov	r17,r16
   272ac:	b025883a 	mov	r18,r22
   272b0:	480d883a 	mov	r6,r9
   272b4:	280f883a 	mov	r7,r5
   272b8:	003f8306 	br	270c8 <__alt_data_end+0xfffe88c8>
   272bc:	b026d43a 	srli	r19,r22,16
   272c0:	902ed43a 	srli	r23,r18,16
   272c4:	b5bfffcc 	andi	r22,r22,65535
   272c8:	94bfffcc 	andi	r18,r18,65535
   272cc:	b00b883a 	mov	r5,r22
   272d0:	9009883a 	mov	r4,r18
   272d4:	d8c00515 	stw	r3,20(sp)
   272d8:	d9800715 	stw	r6,28(sp)
   272dc:	da000615 	stw	r8,24(sp)
   272e0:	002587c0 	call	2587c <__mulsi3>
   272e4:	980b883a 	mov	r5,r19
   272e8:	9009883a 	mov	r4,r18
   272ec:	1029883a 	mov	r20,r2
   272f0:	002587c0 	call	2587c <__mulsi3>
   272f4:	b80b883a 	mov	r5,r23
   272f8:	9809883a 	mov	r4,r19
   272fc:	102b883a 	mov	r21,r2
   27300:	002587c0 	call	2587c <__mulsi3>
   27304:	b809883a 	mov	r4,r23
   27308:	b00b883a 	mov	r5,r22
   2730c:	1039883a 	mov	fp,r2
   27310:	002587c0 	call	2587c <__mulsi3>
   27314:	a008d43a 	srli	r4,r20,16
   27318:	1545883a 	add	r2,r2,r21
   2731c:	d8c00517 	ldw	r3,20(sp)
   27320:	2085883a 	add	r2,r4,r2
   27324:	d9800717 	ldw	r6,28(sp)
   27328:	da000617 	ldw	r8,24(sp)
   2732c:	1540022e 	bgeu	r2,r21,27338 <__muldf3+0x3c4>
   27330:	01000074 	movhi	r4,1
   27334:	e139883a 	add	fp,fp,r4
   27338:	100e943a 	slli	r7,r2,16
   2733c:	1004d43a 	srli	r2,r2,16
   27340:	882ad43a 	srli	r21,r17,16
   27344:	a53fffcc 	andi	r20,r20,65535
   27348:	8c7fffcc 	andi	r17,r17,65535
   2734c:	3d29883a 	add	r20,r7,r20
   27350:	b00b883a 	mov	r5,r22
   27354:	8809883a 	mov	r4,r17
   27358:	d8c00515 	stw	r3,20(sp)
   2735c:	d9800715 	stw	r6,28(sp)
   27360:	da000615 	stw	r8,24(sp)
   27364:	dd000115 	stw	r20,4(sp)
   27368:	d8800015 	stw	r2,0(sp)
   2736c:	002587c0 	call	2587c <__mulsi3>
   27370:	980b883a 	mov	r5,r19
   27374:	8809883a 	mov	r4,r17
   27378:	d8800215 	stw	r2,8(sp)
   2737c:	002587c0 	call	2587c <__mulsi3>
   27380:	9809883a 	mov	r4,r19
   27384:	a80b883a 	mov	r5,r21
   27388:	1029883a 	mov	r20,r2
   2738c:	002587c0 	call	2587c <__mulsi3>
   27390:	b00b883a 	mov	r5,r22
   27394:	a809883a 	mov	r4,r21
   27398:	d8800415 	stw	r2,16(sp)
   2739c:	002587c0 	call	2587c <__mulsi3>
   273a0:	d9c00217 	ldw	r7,8(sp)
   273a4:	1505883a 	add	r2,r2,r20
   273a8:	d8c00517 	ldw	r3,20(sp)
   273ac:	3826d43a 	srli	r19,r7,16
   273b0:	d9800717 	ldw	r6,28(sp)
   273b4:	da000617 	ldw	r8,24(sp)
   273b8:	9885883a 	add	r2,r19,r2
   273bc:	da400417 	ldw	r9,16(sp)
   273c0:	1500022e 	bgeu	r2,r20,273cc <__muldf3+0x458>
   273c4:	01000074 	movhi	r4,1
   273c8:	4913883a 	add	r9,r9,r4
   273cc:	1028d43a 	srli	r20,r2,16
   273d0:	1004943a 	slli	r2,r2,16
   273d4:	802cd43a 	srli	r22,r16,16
   273d8:	843fffcc 	andi	r16,r16,65535
   273dc:	3cffffcc 	andi	r19,r7,65535
   273e0:	9009883a 	mov	r4,r18
   273e4:	800b883a 	mov	r5,r16
   273e8:	a269883a 	add	r20,r20,r9
   273ec:	d8c00515 	stw	r3,20(sp)
   273f0:	d9800715 	stw	r6,28(sp)
   273f4:	da000615 	stw	r8,24(sp)
   273f8:	14e7883a 	add	r19,r2,r19
   273fc:	002587c0 	call	2587c <__mulsi3>
   27400:	9009883a 	mov	r4,r18
   27404:	b00b883a 	mov	r5,r22
   27408:	d8800315 	stw	r2,12(sp)
   2740c:	002587c0 	call	2587c <__mulsi3>
   27410:	b809883a 	mov	r4,r23
   27414:	b00b883a 	mov	r5,r22
   27418:	d8800215 	stw	r2,8(sp)
   2741c:	002587c0 	call	2587c <__mulsi3>
   27420:	b80b883a 	mov	r5,r23
   27424:	8009883a 	mov	r4,r16
   27428:	d8800415 	stw	r2,16(sp)
   2742c:	002587c0 	call	2587c <__mulsi3>
   27430:	da800317 	ldw	r10,12(sp)
   27434:	d9c00217 	ldw	r7,8(sp)
   27438:	d9000017 	ldw	r4,0(sp)
   2743c:	502ed43a 	srli	r23,r10,16
   27440:	11c5883a 	add	r2,r2,r7
   27444:	24e5883a 	add	r18,r4,r19
   27448:	b885883a 	add	r2,r23,r2
   2744c:	d8c00517 	ldw	r3,20(sp)
   27450:	d9800717 	ldw	r6,28(sp)
   27454:	da000617 	ldw	r8,24(sp)
   27458:	da400417 	ldw	r9,16(sp)
   2745c:	11c0022e 	bgeu	r2,r7,27468 <__muldf3+0x4f4>
   27460:	01000074 	movhi	r4,1
   27464:	4913883a 	add	r9,r9,r4
   27468:	100ed43a 	srli	r7,r2,16
   2746c:	1004943a 	slli	r2,r2,16
   27470:	55ffffcc 	andi	r23,r10,65535
   27474:	3a53883a 	add	r9,r7,r9
   27478:	8809883a 	mov	r4,r17
   2747c:	800b883a 	mov	r5,r16
   27480:	d8c00515 	stw	r3,20(sp)
   27484:	d9800715 	stw	r6,28(sp)
   27488:	da000615 	stw	r8,24(sp)
   2748c:	da400415 	stw	r9,16(sp)
   27490:	15ef883a 	add	r23,r2,r23
   27494:	002587c0 	call	2587c <__mulsi3>
   27498:	8809883a 	mov	r4,r17
   2749c:	b00b883a 	mov	r5,r22
   274a0:	d8800215 	stw	r2,8(sp)
   274a4:	002587c0 	call	2587c <__mulsi3>
   274a8:	b00b883a 	mov	r5,r22
   274ac:	a809883a 	mov	r4,r21
   274b0:	d8800315 	stw	r2,12(sp)
   274b4:	002587c0 	call	2587c <__mulsi3>
   274b8:	8009883a 	mov	r4,r16
   274bc:	a80b883a 	mov	r5,r21
   274c0:	1023883a 	mov	r17,r2
   274c4:	002587c0 	call	2587c <__mulsi3>
   274c8:	d9c00217 	ldw	r7,8(sp)
   274cc:	da800317 	ldw	r10,12(sp)
   274d0:	d8c00517 	ldw	r3,20(sp)
   274d4:	3808d43a 	srli	r4,r7,16
   274d8:	1285883a 	add	r2,r2,r10
   274dc:	d9800717 	ldw	r6,28(sp)
   274e0:	2085883a 	add	r2,r4,r2
   274e4:	da000617 	ldw	r8,24(sp)
   274e8:	da400417 	ldw	r9,16(sp)
   274ec:	1280022e 	bgeu	r2,r10,274f8 <__muldf3+0x584>
   274f0:	01000074 	movhi	r4,1
   274f4:	8923883a 	add	r17,r17,r4
   274f8:	1008943a 	slli	r4,r2,16
   274fc:	39ffffcc 	andi	r7,r7,65535
   27500:	e4b9883a 	add	fp,fp,r18
   27504:	21cf883a 	add	r7,r4,r7
   27508:	e4e7803a 	cmpltu	r19,fp,r19
   2750c:	3d0f883a 	add	r7,r7,r20
   27510:	bf39883a 	add	fp,r23,fp
   27514:	99c9883a 	add	r4,r19,r7
   27518:	e5ef803a 	cmpltu	r23,fp,r23
   2751c:	490b883a 	add	r5,r9,r4
   27520:	1004d43a 	srli	r2,r2,16
   27524:	b965883a 	add	r18,r23,r5
   27528:	24c9803a 	cmpltu	r4,r4,r19
   2752c:	3d29803a 	cmpltu	r20,r7,r20
   27530:	a128b03a 	or	r20,r20,r4
   27534:	95ef803a 	cmpltu	r23,r18,r23
   27538:	2a53803a 	cmpltu	r9,r5,r9
   2753c:	a0a9883a 	add	r20,r20,r2
   27540:	4deeb03a 	or	r23,r9,r23
   27544:	a5ef883a 	add	r23,r20,r23
   27548:	bc63883a 	add	r17,r23,r17
   2754c:	e004927a 	slli	r2,fp,9
   27550:	d9000117 	ldw	r4,4(sp)
   27554:	882e927a 	slli	r23,r17,9
   27558:	9022d5fa 	srli	r17,r18,23
   2755c:	e038d5fa 	srli	fp,fp,23
   27560:	1104b03a 	or	r2,r2,r4
   27564:	9024927a 	slli	r18,r18,9
   27568:	1004c03a 	cmpne	r2,r2,zero
   2756c:	bc62b03a 	or	r17,r23,r17
   27570:	1738b03a 	or	fp,r2,fp
   27574:	8880402c 	andhi	r2,r17,256
   27578:	e4a4b03a 	or	r18,fp,r18
   2757c:	10000726 	beq	r2,zero,2759c <__muldf3+0x628>
   27580:	9006d07a 	srli	r3,r18,1
   27584:	880497fa 	slli	r2,r17,31
   27588:	9480004c 	andi	r18,r18,1
   2758c:	8822d07a 	srli	r17,r17,1
   27590:	1ca4b03a 	or	r18,r3,r18
   27594:	14a4b03a 	or	r18,r2,r18
   27598:	4007883a 	mov	r3,r8
   2759c:	1880ffc4 	addi	r2,r3,1023
   275a0:	0080460e 	bge	zero,r2,276bc <__muldf3+0x748>
   275a4:	910001cc 	andi	r4,r18,7
   275a8:	20000726 	beq	r4,zero,275c8 <__muldf3+0x654>
   275ac:	910003cc 	andi	r4,r18,15
   275b0:	01400104 	movi	r5,4
   275b4:	21400426 	beq	r4,r5,275c8 <__muldf3+0x654>
   275b8:	9149883a 	add	r4,r18,r5
   275bc:	24a5803a 	cmpltu	r18,r4,r18
   275c0:	8ca3883a 	add	r17,r17,r18
   275c4:	2025883a 	mov	r18,r4
   275c8:	8900402c 	andhi	r4,r17,256
   275cc:	20000426 	beq	r4,zero,275e0 <__muldf3+0x66c>
   275d0:	18810004 	addi	r2,r3,1024
   275d4:	00ffc034 	movhi	r3,65280
   275d8:	18ffffc4 	addi	r3,r3,-1
   275dc:	88e2703a 	and	r17,r17,r3
   275e0:	00c1ff84 	movi	r3,2046
   275e4:	18bf1316 	blt	r3,r2,27234 <__alt_data_end+0xfffe8a34>
   275e8:	882c977a 	slli	r22,r17,29
   275ec:	9024d0fa 	srli	r18,r18,3
   275f0:	8822927a 	slli	r17,r17,9
   275f4:	1081ffcc 	andi	r2,r2,2047
   275f8:	b4acb03a 	or	r22,r22,r18
   275fc:	8820d33a 	srli	r16,r17,12
   27600:	3027883a 	mov	r19,r6
   27604:	003eba06 	br	270f0 <__alt_data_end+0xfffe88f0>
   27608:	8080022c 	andhi	r2,r16,8
   2760c:	10000926 	beq	r2,zero,27634 <__muldf3+0x6c0>
   27610:	8880022c 	andhi	r2,r17,8
   27614:	1000071e 	bne	r2,zero,27634 <__muldf3+0x6c0>
   27618:	00800434 	movhi	r2,16
   2761c:	8c000234 	orhi	r16,r17,8
   27620:	10bfffc4 	addi	r2,r2,-1
   27624:	e027883a 	mov	r19,fp
   27628:	80a0703a 	and	r16,r16,r2
   2762c:	902d883a 	mov	r22,r18
   27630:	003f1706 	br	27290 <__alt_data_end+0xfffe8a90>
   27634:	00800434 	movhi	r2,16
   27638:	84000234 	orhi	r16,r16,8
   2763c:	10bfffc4 	addi	r2,r2,-1
   27640:	80a0703a 	and	r16,r16,r2
   27644:	003f1206 	br	27290 <__alt_data_end+0xfffe8a90>
   27648:	147ff604 	addi	r17,r2,-40
   2764c:	3462983a 	sll	r17,r6,r17
   27650:	0025883a 	mov	r18,zero
   27654:	003ef306 	br	27224 <__alt_data_end+0xfffe8a24>
   27658:	3009883a 	mov	r4,r6
   2765c:	d9400215 	stw	r5,8(sp)
   27660:	d9800715 	stw	r6,28(sp)
   27664:	da400415 	stw	r9,16(sp)
   27668:	da800315 	stw	r10,12(sp)
   2766c:	00284880 	call	28488 <__clzsi2>
   27670:	10800804 	addi	r2,r2,32
   27674:	da800317 	ldw	r10,12(sp)
   27678:	da400417 	ldw	r9,16(sp)
   2767c:	d9800717 	ldw	r6,28(sp)
   27680:	d9400217 	ldw	r5,8(sp)
   27684:	003edd06 	br	271fc <__alt_data_end+0xfffe89fc>
   27688:	143ff604 	addi	r16,r2,-40
   2768c:	ac20983a 	sll	r16,r21,r16
   27690:	002d883a 	mov	r22,zero
   27694:	003ec106 	br	2719c <__alt_data_end+0xfffe899c>
   27698:	d9800715 	stw	r6,28(sp)
   2769c:	d9c00215 	stw	r7,8(sp)
   276a0:	da400415 	stw	r9,16(sp)
   276a4:	00284880 	call	28488 <__clzsi2>
   276a8:	10800804 	addi	r2,r2,32
   276ac:	da400417 	ldw	r9,16(sp)
   276b0:	d9c00217 	ldw	r7,8(sp)
   276b4:	d9800717 	ldw	r6,28(sp)
   276b8:	003eae06 	br	27174 <__alt_data_end+0xfffe8974>
   276bc:	00c00044 	movi	r3,1
   276c0:	1887c83a 	sub	r3,r3,r2
   276c4:	01000e04 	movi	r4,56
   276c8:	20fe8516 	blt	r4,r3,270e0 <__alt_data_end+0xfffe88e0>
   276cc:	010007c4 	movi	r4,31
   276d0:	20c01b16 	blt	r4,r3,27740 <__muldf3+0x7cc>
   276d4:	00800804 	movi	r2,32
   276d8:	10c5c83a 	sub	r2,r2,r3
   276dc:	888a983a 	sll	r5,r17,r2
   276e0:	90c8d83a 	srl	r4,r18,r3
   276e4:	9084983a 	sll	r2,r18,r2
   276e8:	88e2d83a 	srl	r17,r17,r3
   276ec:	2906b03a 	or	r3,r5,r4
   276f0:	1004c03a 	cmpne	r2,r2,zero
   276f4:	1886b03a 	or	r3,r3,r2
   276f8:	188001cc 	andi	r2,r3,7
   276fc:	10000726 	beq	r2,zero,2771c <__muldf3+0x7a8>
   27700:	188003cc 	andi	r2,r3,15
   27704:	01000104 	movi	r4,4
   27708:	11000426 	beq	r2,r4,2771c <__muldf3+0x7a8>
   2770c:	1805883a 	mov	r2,r3
   27710:	10c00104 	addi	r3,r2,4
   27714:	1885803a 	cmpltu	r2,r3,r2
   27718:	88a3883a 	add	r17,r17,r2
   2771c:	8880202c 	andhi	r2,r17,128
   27720:	10001c26 	beq	r2,zero,27794 <__muldf3+0x820>
   27724:	3027883a 	mov	r19,r6
   27728:	00800044 	movi	r2,1
   2772c:	0021883a 	mov	r16,zero
   27730:	002d883a 	mov	r22,zero
   27734:	003e6e06 	br	270f0 <__alt_data_end+0xfffe88f0>
   27738:	4007883a 	mov	r3,r8
   2773c:	003f9706 	br	2759c <__alt_data_end+0xfffe8d9c>
   27740:	017ff844 	movi	r5,-31
   27744:	2885c83a 	sub	r2,r5,r2
   27748:	888ad83a 	srl	r5,r17,r2
   2774c:	00800804 	movi	r2,32
   27750:	18801a26 	beq	r3,r2,277bc <__muldf3+0x848>
   27754:	01001004 	movi	r4,64
   27758:	20c7c83a 	sub	r3,r4,r3
   2775c:	88e2983a 	sll	r17,r17,r3
   27760:	8ca4b03a 	or	r18,r17,r18
   27764:	9004c03a 	cmpne	r2,r18,zero
   27768:	2884b03a 	or	r2,r5,r2
   2776c:	144001cc 	andi	r17,r2,7
   27770:	88000d1e 	bne	r17,zero,277a8 <__muldf3+0x834>
   27774:	0021883a 	mov	r16,zero
   27778:	102cd0fa 	srli	r22,r2,3
   2777c:	3027883a 	mov	r19,r6
   27780:	0005883a 	mov	r2,zero
   27784:	b46cb03a 	or	r22,r22,r17
   27788:	003e5906 	br	270f0 <__alt_data_end+0xfffe88f0>
   2778c:	1007883a 	mov	r3,r2
   27790:	0023883a 	mov	r17,zero
   27794:	8820927a 	slli	r16,r17,9
   27798:	1805883a 	mov	r2,r3
   2779c:	8822977a 	slli	r17,r17,29
   277a0:	8020d33a 	srli	r16,r16,12
   277a4:	003ff406 	br	27778 <__alt_data_end+0xfffe8f78>
   277a8:	10c003cc 	andi	r3,r2,15
   277ac:	01000104 	movi	r4,4
   277b0:	193ff626 	beq	r3,r4,2778c <__alt_data_end+0xfffe8f8c>
   277b4:	0023883a 	mov	r17,zero
   277b8:	003fd506 	br	27710 <__alt_data_end+0xfffe8f10>
   277bc:	0023883a 	mov	r17,zero
   277c0:	003fe706 	br	27760 <__alt_data_end+0xfffe8f60>
   277c4:	00800434 	movhi	r2,16
   277c8:	8c000234 	orhi	r16,r17,8
   277cc:	10bfffc4 	addi	r2,r2,-1
   277d0:	3027883a 	mov	r19,r6
   277d4:	80a0703a 	and	r16,r16,r2
   277d8:	902d883a 	mov	r22,r18
   277dc:	003eac06 	br	27290 <__alt_data_end+0xfffe8a90>

000277e0 <__subdf3>:
   277e0:	02000434 	movhi	r8,16
   277e4:	423fffc4 	addi	r8,r8,-1
   277e8:	defffb04 	addi	sp,sp,-20
   277ec:	2a14703a 	and	r10,r5,r8
   277f0:	3812d53a 	srli	r9,r7,20
   277f4:	3a10703a 	and	r8,r7,r8
   277f8:	2006d77a 	srli	r3,r4,29
   277fc:	3004d77a 	srli	r2,r6,29
   27800:	dc000015 	stw	r16,0(sp)
   27804:	501490fa 	slli	r10,r10,3
   27808:	2820d53a 	srli	r16,r5,20
   2780c:	401090fa 	slli	r8,r8,3
   27810:	dc800215 	stw	r18,8(sp)
   27814:	dc400115 	stw	r17,4(sp)
   27818:	dfc00415 	stw	ra,16(sp)
   2781c:	202290fa 	slli	r17,r4,3
   27820:	dcc00315 	stw	r19,12(sp)
   27824:	4a41ffcc 	andi	r9,r9,2047
   27828:	0101ffc4 	movi	r4,2047
   2782c:	2824d7fa 	srli	r18,r5,31
   27830:	8401ffcc 	andi	r16,r16,2047
   27834:	50c6b03a 	or	r3,r10,r3
   27838:	380ed7fa 	srli	r7,r7,31
   2783c:	408ab03a 	or	r5,r8,r2
   27840:	300c90fa 	slli	r6,r6,3
   27844:	49009626 	beq	r9,r4,27aa0 <__subdf3+0x2c0>
   27848:	39c0005c 	xori	r7,r7,1
   2784c:	8245c83a 	sub	r2,r16,r9
   27850:	3c807426 	beq	r7,r18,27a24 <__subdf3+0x244>
   27854:	0080af0e 	bge	zero,r2,27b14 <__subdf3+0x334>
   27858:	48002a1e 	bne	r9,zero,27904 <__subdf3+0x124>
   2785c:	2988b03a 	or	r4,r5,r6
   27860:	20009a1e 	bne	r4,zero,27acc <__subdf3+0x2ec>
   27864:	888001cc 	andi	r2,r17,7
   27868:	10000726 	beq	r2,zero,27888 <__subdf3+0xa8>
   2786c:	888003cc 	andi	r2,r17,15
   27870:	01000104 	movi	r4,4
   27874:	11000426 	beq	r2,r4,27888 <__subdf3+0xa8>
   27878:	890b883a 	add	r5,r17,r4
   2787c:	2c63803a 	cmpltu	r17,r5,r17
   27880:	1c47883a 	add	r3,r3,r17
   27884:	2823883a 	mov	r17,r5
   27888:	1880202c 	andhi	r2,r3,128
   2788c:	10005926 	beq	r2,zero,279f4 <__subdf3+0x214>
   27890:	84000044 	addi	r16,r16,1
   27894:	0081ffc4 	movi	r2,2047
   27898:	8080be26 	beq	r16,r2,27b94 <__subdf3+0x3b4>
   2789c:	017fe034 	movhi	r5,65408
   278a0:	297fffc4 	addi	r5,r5,-1
   278a4:	1946703a 	and	r3,r3,r5
   278a8:	1804977a 	slli	r2,r3,29
   278ac:	1806927a 	slli	r3,r3,9
   278b0:	8822d0fa 	srli	r17,r17,3
   278b4:	8401ffcc 	andi	r16,r16,2047
   278b8:	180ad33a 	srli	r5,r3,12
   278bc:	9100004c 	andi	r4,r18,1
   278c0:	1444b03a 	or	r2,r2,r17
   278c4:	80c1ffcc 	andi	r3,r16,2047
   278c8:	1820953a 	slli	r16,r3,20
   278cc:	20c03fcc 	andi	r3,r4,255
   278d0:	180897fa 	slli	r4,r3,31
   278d4:	00c00434 	movhi	r3,16
   278d8:	18ffffc4 	addi	r3,r3,-1
   278dc:	28c6703a 	and	r3,r5,r3
   278e0:	1c06b03a 	or	r3,r3,r16
   278e4:	1906b03a 	or	r3,r3,r4
   278e8:	dfc00417 	ldw	ra,16(sp)
   278ec:	dcc00317 	ldw	r19,12(sp)
   278f0:	dc800217 	ldw	r18,8(sp)
   278f4:	dc400117 	ldw	r17,4(sp)
   278f8:	dc000017 	ldw	r16,0(sp)
   278fc:	dec00504 	addi	sp,sp,20
   27900:	f800283a 	ret
   27904:	0101ffc4 	movi	r4,2047
   27908:	813fd626 	beq	r16,r4,27864 <__alt_data_end+0xfffe9064>
   2790c:	29402034 	orhi	r5,r5,128
   27910:	01000e04 	movi	r4,56
   27914:	2080a316 	blt	r4,r2,27ba4 <__subdf3+0x3c4>
   27918:	010007c4 	movi	r4,31
   2791c:	2080c616 	blt	r4,r2,27c38 <__subdf3+0x458>
   27920:	01000804 	movi	r4,32
   27924:	2089c83a 	sub	r4,r4,r2
   27928:	2910983a 	sll	r8,r5,r4
   2792c:	308ed83a 	srl	r7,r6,r2
   27930:	3108983a 	sll	r4,r6,r4
   27934:	2884d83a 	srl	r2,r5,r2
   27938:	41ccb03a 	or	r6,r8,r7
   2793c:	2008c03a 	cmpne	r4,r4,zero
   27940:	310cb03a 	or	r6,r6,r4
   27944:	898dc83a 	sub	r6,r17,r6
   27948:	89a3803a 	cmpltu	r17,r17,r6
   2794c:	1887c83a 	sub	r3,r3,r2
   27950:	1c47c83a 	sub	r3,r3,r17
   27954:	3023883a 	mov	r17,r6
   27958:	1880202c 	andhi	r2,r3,128
   2795c:	10002326 	beq	r2,zero,279ec <__subdf3+0x20c>
   27960:	04c02034 	movhi	r19,128
   27964:	9cffffc4 	addi	r19,r19,-1
   27968:	1ce6703a 	and	r19,r3,r19
   2796c:	98007a26 	beq	r19,zero,27b58 <__subdf3+0x378>
   27970:	9809883a 	mov	r4,r19
   27974:	00284880 	call	28488 <__clzsi2>
   27978:	113ffe04 	addi	r4,r2,-8
   2797c:	00c007c4 	movi	r3,31
   27980:	19007b16 	blt	r3,r4,27b70 <__subdf3+0x390>
   27984:	00800804 	movi	r2,32
   27988:	1105c83a 	sub	r2,r2,r4
   2798c:	8884d83a 	srl	r2,r17,r2
   27990:	9906983a 	sll	r3,r19,r4
   27994:	8922983a 	sll	r17,r17,r4
   27998:	10c4b03a 	or	r2,r2,r3
   2799c:	24007816 	blt	r4,r16,27b80 <__subdf3+0x3a0>
   279a0:	2421c83a 	sub	r16,r4,r16
   279a4:	80c00044 	addi	r3,r16,1
   279a8:	010007c4 	movi	r4,31
   279ac:	20c09516 	blt	r4,r3,27c04 <__subdf3+0x424>
   279b0:	01400804 	movi	r5,32
   279b4:	28cbc83a 	sub	r5,r5,r3
   279b8:	88c8d83a 	srl	r4,r17,r3
   279bc:	8962983a 	sll	r17,r17,r5
   279c0:	114a983a 	sll	r5,r2,r5
   279c4:	10c6d83a 	srl	r3,r2,r3
   279c8:	8804c03a 	cmpne	r2,r17,zero
   279cc:	290ab03a 	or	r5,r5,r4
   279d0:	28a2b03a 	or	r17,r5,r2
   279d4:	0021883a 	mov	r16,zero
   279d8:	003fa206 	br	27864 <__alt_data_end+0xfffe9064>
   279dc:	2090b03a 	or	r8,r4,r2
   279e0:	40018e26 	beq	r8,zero,2801c <__subdf3+0x83c>
   279e4:	1007883a 	mov	r3,r2
   279e8:	2023883a 	mov	r17,r4
   279ec:	888001cc 	andi	r2,r17,7
   279f0:	103f9e1e 	bne	r2,zero,2786c <__alt_data_end+0xfffe906c>
   279f4:	1804977a 	slli	r2,r3,29
   279f8:	8822d0fa 	srli	r17,r17,3
   279fc:	1810d0fa 	srli	r8,r3,3
   27a00:	9100004c 	andi	r4,r18,1
   27a04:	1444b03a 	or	r2,r2,r17
   27a08:	00c1ffc4 	movi	r3,2047
   27a0c:	80c02826 	beq	r16,r3,27ab0 <__subdf3+0x2d0>
   27a10:	01400434 	movhi	r5,16
   27a14:	297fffc4 	addi	r5,r5,-1
   27a18:	80e0703a 	and	r16,r16,r3
   27a1c:	414a703a 	and	r5,r8,r5
   27a20:	003fa806 	br	278c4 <__alt_data_end+0xfffe90c4>
   27a24:	0080630e 	bge	zero,r2,27bb4 <__subdf3+0x3d4>
   27a28:	48003026 	beq	r9,zero,27aec <__subdf3+0x30c>
   27a2c:	0101ffc4 	movi	r4,2047
   27a30:	813f8c26 	beq	r16,r4,27864 <__alt_data_end+0xfffe9064>
   27a34:	29402034 	orhi	r5,r5,128
   27a38:	01000e04 	movi	r4,56
   27a3c:	2080a90e 	bge	r4,r2,27ce4 <__subdf3+0x504>
   27a40:	298cb03a 	or	r6,r5,r6
   27a44:	3012c03a 	cmpne	r9,r6,zero
   27a48:	0005883a 	mov	r2,zero
   27a4c:	4c53883a 	add	r9,r9,r17
   27a50:	4c63803a 	cmpltu	r17,r9,r17
   27a54:	10c7883a 	add	r3,r2,r3
   27a58:	88c7883a 	add	r3,r17,r3
   27a5c:	4823883a 	mov	r17,r9
   27a60:	1880202c 	andhi	r2,r3,128
   27a64:	1000d026 	beq	r2,zero,27da8 <__subdf3+0x5c8>
   27a68:	84000044 	addi	r16,r16,1
   27a6c:	0081ffc4 	movi	r2,2047
   27a70:	8080fe26 	beq	r16,r2,27e6c <__subdf3+0x68c>
   27a74:	00bfe034 	movhi	r2,65408
   27a78:	10bfffc4 	addi	r2,r2,-1
   27a7c:	1886703a 	and	r3,r3,r2
   27a80:	880ad07a 	srli	r5,r17,1
   27a84:	180497fa 	slli	r2,r3,31
   27a88:	8900004c 	andi	r4,r17,1
   27a8c:	2922b03a 	or	r17,r5,r4
   27a90:	1806d07a 	srli	r3,r3,1
   27a94:	1462b03a 	or	r17,r2,r17
   27a98:	3825883a 	mov	r18,r7
   27a9c:	003f7106 	br	27864 <__alt_data_end+0xfffe9064>
   27aa0:	2984b03a 	or	r2,r5,r6
   27aa4:	103f6826 	beq	r2,zero,27848 <__alt_data_end+0xfffe9048>
   27aa8:	39c03fcc 	andi	r7,r7,255
   27aac:	003f6706 	br	2784c <__alt_data_end+0xfffe904c>
   27ab0:	4086b03a 	or	r3,r8,r2
   27ab4:	18015226 	beq	r3,zero,28000 <__subdf3+0x820>
   27ab8:	00c00434 	movhi	r3,16
   27abc:	41400234 	orhi	r5,r8,8
   27ac0:	18ffffc4 	addi	r3,r3,-1
   27ac4:	28ca703a 	and	r5,r5,r3
   27ac8:	003f7e06 	br	278c4 <__alt_data_end+0xfffe90c4>
   27acc:	10bfffc4 	addi	r2,r2,-1
   27ad0:	1000491e 	bne	r2,zero,27bf8 <__subdf3+0x418>
   27ad4:	898fc83a 	sub	r7,r17,r6
   27ad8:	89e3803a 	cmpltu	r17,r17,r7
   27adc:	1947c83a 	sub	r3,r3,r5
   27ae0:	1c47c83a 	sub	r3,r3,r17
   27ae4:	3823883a 	mov	r17,r7
   27ae8:	003f9b06 	br	27958 <__alt_data_end+0xfffe9158>
   27aec:	2988b03a 	or	r4,r5,r6
   27af0:	203f5c26 	beq	r4,zero,27864 <__alt_data_end+0xfffe9064>
   27af4:	10bfffc4 	addi	r2,r2,-1
   27af8:	1000931e 	bne	r2,zero,27d48 <__subdf3+0x568>
   27afc:	898d883a 	add	r6,r17,r6
   27b00:	3463803a 	cmpltu	r17,r6,r17
   27b04:	1947883a 	add	r3,r3,r5
   27b08:	88c7883a 	add	r3,r17,r3
   27b0c:	3023883a 	mov	r17,r6
   27b10:	003fd306 	br	27a60 <__alt_data_end+0xfffe9260>
   27b14:	1000541e 	bne	r2,zero,27c68 <__subdf3+0x488>
   27b18:	80800044 	addi	r2,r16,1
   27b1c:	1081ffcc 	andi	r2,r2,2047
   27b20:	01000044 	movi	r4,1
   27b24:	2080a20e 	bge	r4,r2,27db0 <__subdf3+0x5d0>
   27b28:	8989c83a 	sub	r4,r17,r6
   27b2c:	8905803a 	cmpltu	r2,r17,r4
   27b30:	1967c83a 	sub	r19,r3,r5
   27b34:	98a7c83a 	sub	r19,r19,r2
   27b38:	9880202c 	andhi	r2,r19,128
   27b3c:	10006326 	beq	r2,zero,27ccc <__subdf3+0x4ec>
   27b40:	3463c83a 	sub	r17,r6,r17
   27b44:	28c7c83a 	sub	r3,r5,r3
   27b48:	344d803a 	cmpltu	r6,r6,r17
   27b4c:	19a7c83a 	sub	r19,r3,r6
   27b50:	3825883a 	mov	r18,r7
   27b54:	983f861e 	bne	r19,zero,27970 <__alt_data_end+0xfffe9170>
   27b58:	8809883a 	mov	r4,r17
   27b5c:	00284880 	call	28488 <__clzsi2>
   27b60:	10800804 	addi	r2,r2,32
   27b64:	113ffe04 	addi	r4,r2,-8
   27b68:	00c007c4 	movi	r3,31
   27b6c:	193f850e 	bge	r3,r4,27984 <__alt_data_end+0xfffe9184>
   27b70:	10bff604 	addi	r2,r2,-40
   27b74:	8884983a 	sll	r2,r17,r2
   27b78:	0023883a 	mov	r17,zero
   27b7c:	243f880e 	bge	r4,r16,279a0 <__alt_data_end+0xfffe91a0>
   27b80:	00ffe034 	movhi	r3,65408
   27b84:	18ffffc4 	addi	r3,r3,-1
   27b88:	8121c83a 	sub	r16,r16,r4
   27b8c:	10c6703a 	and	r3,r2,r3
   27b90:	003f3406 	br	27864 <__alt_data_end+0xfffe9064>
   27b94:	9100004c 	andi	r4,r18,1
   27b98:	000b883a 	mov	r5,zero
   27b9c:	0005883a 	mov	r2,zero
   27ba0:	003f4806 	br	278c4 <__alt_data_end+0xfffe90c4>
   27ba4:	298cb03a 	or	r6,r5,r6
   27ba8:	300cc03a 	cmpne	r6,r6,zero
   27bac:	0005883a 	mov	r2,zero
   27bb0:	003f6406 	br	27944 <__alt_data_end+0xfffe9144>
   27bb4:	10009a1e 	bne	r2,zero,27e20 <__subdf3+0x640>
   27bb8:	82400044 	addi	r9,r16,1
   27bbc:	4881ffcc 	andi	r2,r9,2047
   27bc0:	02800044 	movi	r10,1
   27bc4:	5080670e 	bge	r10,r2,27d64 <__subdf3+0x584>
   27bc8:	0081ffc4 	movi	r2,2047
   27bcc:	4880af26 	beq	r9,r2,27e8c <__subdf3+0x6ac>
   27bd0:	898d883a 	add	r6,r17,r6
   27bd4:	1945883a 	add	r2,r3,r5
   27bd8:	3447803a 	cmpltu	r3,r6,r17
   27bdc:	1887883a 	add	r3,r3,r2
   27be0:	182297fa 	slli	r17,r3,31
   27be4:	300cd07a 	srli	r6,r6,1
   27be8:	1806d07a 	srli	r3,r3,1
   27bec:	4821883a 	mov	r16,r9
   27bf0:	89a2b03a 	or	r17,r17,r6
   27bf4:	003f1b06 	br	27864 <__alt_data_end+0xfffe9064>
   27bf8:	0101ffc4 	movi	r4,2047
   27bfc:	813f441e 	bne	r16,r4,27910 <__alt_data_end+0xfffe9110>
   27c00:	003f1806 	br	27864 <__alt_data_end+0xfffe9064>
   27c04:	843ff844 	addi	r16,r16,-31
   27c08:	01400804 	movi	r5,32
   27c0c:	1408d83a 	srl	r4,r2,r16
   27c10:	19405026 	beq	r3,r5,27d54 <__subdf3+0x574>
   27c14:	01401004 	movi	r5,64
   27c18:	28c7c83a 	sub	r3,r5,r3
   27c1c:	10c4983a 	sll	r2,r2,r3
   27c20:	88a2b03a 	or	r17,r17,r2
   27c24:	8822c03a 	cmpne	r17,r17,zero
   27c28:	2462b03a 	or	r17,r4,r17
   27c2c:	0007883a 	mov	r3,zero
   27c30:	0021883a 	mov	r16,zero
   27c34:	003f6d06 	br	279ec <__alt_data_end+0xfffe91ec>
   27c38:	11fff804 	addi	r7,r2,-32
   27c3c:	01000804 	movi	r4,32
   27c40:	29ced83a 	srl	r7,r5,r7
   27c44:	11004526 	beq	r2,r4,27d5c <__subdf3+0x57c>
   27c48:	01001004 	movi	r4,64
   27c4c:	2089c83a 	sub	r4,r4,r2
   27c50:	2904983a 	sll	r2,r5,r4
   27c54:	118cb03a 	or	r6,r2,r6
   27c58:	300cc03a 	cmpne	r6,r6,zero
   27c5c:	398cb03a 	or	r6,r7,r6
   27c60:	0005883a 	mov	r2,zero
   27c64:	003f3706 	br	27944 <__alt_data_end+0xfffe9144>
   27c68:	80002a26 	beq	r16,zero,27d14 <__subdf3+0x534>
   27c6c:	0101ffc4 	movi	r4,2047
   27c70:	49006626 	beq	r9,r4,27e0c <__subdf3+0x62c>
   27c74:	0085c83a 	sub	r2,zero,r2
   27c78:	18c02034 	orhi	r3,r3,128
   27c7c:	01000e04 	movi	r4,56
   27c80:	20807e16 	blt	r4,r2,27e7c <__subdf3+0x69c>
   27c84:	010007c4 	movi	r4,31
   27c88:	2080e716 	blt	r4,r2,28028 <__subdf3+0x848>
   27c8c:	01000804 	movi	r4,32
   27c90:	2089c83a 	sub	r4,r4,r2
   27c94:	1914983a 	sll	r10,r3,r4
   27c98:	8890d83a 	srl	r8,r17,r2
   27c9c:	8908983a 	sll	r4,r17,r4
   27ca0:	1884d83a 	srl	r2,r3,r2
   27ca4:	5222b03a 	or	r17,r10,r8
   27ca8:	2006c03a 	cmpne	r3,r4,zero
   27cac:	88e2b03a 	or	r17,r17,r3
   27cb0:	3463c83a 	sub	r17,r6,r17
   27cb4:	2885c83a 	sub	r2,r5,r2
   27cb8:	344d803a 	cmpltu	r6,r6,r17
   27cbc:	1187c83a 	sub	r3,r2,r6
   27cc0:	4821883a 	mov	r16,r9
   27cc4:	3825883a 	mov	r18,r7
   27cc8:	003f2306 	br	27958 <__alt_data_end+0xfffe9158>
   27ccc:	24d0b03a 	or	r8,r4,r19
   27cd0:	40001b1e 	bne	r8,zero,27d40 <__subdf3+0x560>
   27cd4:	0005883a 	mov	r2,zero
   27cd8:	0009883a 	mov	r4,zero
   27cdc:	0021883a 	mov	r16,zero
   27ce0:	003f4906 	br	27a08 <__alt_data_end+0xfffe9208>
   27ce4:	010007c4 	movi	r4,31
   27ce8:	20803a16 	blt	r4,r2,27dd4 <__subdf3+0x5f4>
   27cec:	01000804 	movi	r4,32
   27cf0:	2089c83a 	sub	r4,r4,r2
   27cf4:	2912983a 	sll	r9,r5,r4
   27cf8:	3090d83a 	srl	r8,r6,r2
   27cfc:	3108983a 	sll	r4,r6,r4
   27d00:	2884d83a 	srl	r2,r5,r2
   27d04:	4a12b03a 	or	r9,r9,r8
   27d08:	2008c03a 	cmpne	r4,r4,zero
   27d0c:	4912b03a 	or	r9,r9,r4
   27d10:	003f4e06 	br	27a4c <__alt_data_end+0xfffe924c>
   27d14:	1c48b03a 	or	r4,r3,r17
   27d18:	20003c26 	beq	r4,zero,27e0c <__subdf3+0x62c>
   27d1c:	0084303a 	nor	r2,zero,r2
   27d20:	1000381e 	bne	r2,zero,27e04 <__subdf3+0x624>
   27d24:	3463c83a 	sub	r17,r6,r17
   27d28:	28c5c83a 	sub	r2,r5,r3
   27d2c:	344d803a 	cmpltu	r6,r6,r17
   27d30:	1187c83a 	sub	r3,r2,r6
   27d34:	4821883a 	mov	r16,r9
   27d38:	3825883a 	mov	r18,r7
   27d3c:	003f0606 	br	27958 <__alt_data_end+0xfffe9158>
   27d40:	2023883a 	mov	r17,r4
   27d44:	003f0906 	br	2796c <__alt_data_end+0xfffe916c>
   27d48:	0101ffc4 	movi	r4,2047
   27d4c:	813f3a1e 	bne	r16,r4,27a38 <__alt_data_end+0xfffe9238>
   27d50:	003ec406 	br	27864 <__alt_data_end+0xfffe9064>
   27d54:	0005883a 	mov	r2,zero
   27d58:	003fb106 	br	27c20 <__alt_data_end+0xfffe9420>
   27d5c:	0005883a 	mov	r2,zero
   27d60:	003fbc06 	br	27c54 <__alt_data_end+0xfffe9454>
   27d64:	1c44b03a 	or	r2,r3,r17
   27d68:	80008e1e 	bne	r16,zero,27fa4 <__subdf3+0x7c4>
   27d6c:	1000c826 	beq	r2,zero,28090 <__subdf3+0x8b0>
   27d70:	2984b03a 	or	r2,r5,r6
   27d74:	103ebb26 	beq	r2,zero,27864 <__alt_data_end+0xfffe9064>
   27d78:	8989883a 	add	r4,r17,r6
   27d7c:	1945883a 	add	r2,r3,r5
   27d80:	2447803a 	cmpltu	r3,r4,r17
   27d84:	1887883a 	add	r3,r3,r2
   27d88:	1880202c 	andhi	r2,r3,128
   27d8c:	2023883a 	mov	r17,r4
   27d90:	103f1626 	beq	r2,zero,279ec <__alt_data_end+0xfffe91ec>
   27d94:	00bfe034 	movhi	r2,65408
   27d98:	10bfffc4 	addi	r2,r2,-1
   27d9c:	5021883a 	mov	r16,r10
   27da0:	1886703a 	and	r3,r3,r2
   27da4:	003eaf06 	br	27864 <__alt_data_end+0xfffe9064>
   27da8:	3825883a 	mov	r18,r7
   27dac:	003f0f06 	br	279ec <__alt_data_end+0xfffe91ec>
   27db0:	1c44b03a 	or	r2,r3,r17
   27db4:	8000251e 	bne	r16,zero,27e4c <__subdf3+0x66c>
   27db8:	1000661e 	bne	r2,zero,27f54 <__subdf3+0x774>
   27dbc:	2990b03a 	or	r8,r5,r6
   27dc0:	40009626 	beq	r8,zero,2801c <__subdf3+0x83c>
   27dc4:	2807883a 	mov	r3,r5
   27dc8:	3023883a 	mov	r17,r6
   27dcc:	3825883a 	mov	r18,r7
   27dd0:	003ea406 	br	27864 <__alt_data_end+0xfffe9064>
   27dd4:	127ff804 	addi	r9,r2,-32
   27dd8:	01000804 	movi	r4,32
   27ddc:	2a52d83a 	srl	r9,r5,r9
   27de0:	11008c26 	beq	r2,r4,28014 <__subdf3+0x834>
   27de4:	01001004 	movi	r4,64
   27de8:	2085c83a 	sub	r2,r4,r2
   27dec:	2884983a 	sll	r2,r5,r2
   27df0:	118cb03a 	or	r6,r2,r6
   27df4:	300cc03a 	cmpne	r6,r6,zero
   27df8:	4992b03a 	or	r9,r9,r6
   27dfc:	0005883a 	mov	r2,zero
   27e00:	003f1206 	br	27a4c <__alt_data_end+0xfffe924c>
   27e04:	0101ffc4 	movi	r4,2047
   27e08:	493f9c1e 	bne	r9,r4,27c7c <__alt_data_end+0xfffe947c>
   27e0c:	2807883a 	mov	r3,r5
   27e10:	3023883a 	mov	r17,r6
   27e14:	4821883a 	mov	r16,r9
   27e18:	3825883a 	mov	r18,r7
   27e1c:	003e9106 	br	27864 <__alt_data_end+0xfffe9064>
   27e20:	80001f1e 	bne	r16,zero,27ea0 <__subdf3+0x6c0>
   27e24:	1c48b03a 	or	r4,r3,r17
   27e28:	20005a26 	beq	r4,zero,27f94 <__subdf3+0x7b4>
   27e2c:	0084303a 	nor	r2,zero,r2
   27e30:	1000561e 	bne	r2,zero,27f8c <__subdf3+0x7ac>
   27e34:	89a3883a 	add	r17,r17,r6
   27e38:	1945883a 	add	r2,r3,r5
   27e3c:	898d803a 	cmpltu	r6,r17,r6
   27e40:	3087883a 	add	r3,r6,r2
   27e44:	4821883a 	mov	r16,r9
   27e48:	003f0506 	br	27a60 <__alt_data_end+0xfffe9260>
   27e4c:	10002b1e 	bne	r2,zero,27efc <__subdf3+0x71c>
   27e50:	2984b03a 	or	r2,r5,r6
   27e54:	10008026 	beq	r2,zero,28058 <__subdf3+0x878>
   27e58:	2807883a 	mov	r3,r5
   27e5c:	3023883a 	mov	r17,r6
   27e60:	3825883a 	mov	r18,r7
   27e64:	0401ffc4 	movi	r16,2047
   27e68:	003e7e06 	br	27864 <__alt_data_end+0xfffe9064>
   27e6c:	3809883a 	mov	r4,r7
   27e70:	0011883a 	mov	r8,zero
   27e74:	0005883a 	mov	r2,zero
   27e78:	003ee306 	br	27a08 <__alt_data_end+0xfffe9208>
   27e7c:	1c62b03a 	or	r17,r3,r17
   27e80:	8822c03a 	cmpne	r17,r17,zero
   27e84:	0005883a 	mov	r2,zero
   27e88:	003f8906 	br	27cb0 <__alt_data_end+0xfffe94b0>
   27e8c:	3809883a 	mov	r4,r7
   27e90:	4821883a 	mov	r16,r9
   27e94:	0011883a 	mov	r8,zero
   27e98:	0005883a 	mov	r2,zero
   27e9c:	003eda06 	br	27a08 <__alt_data_end+0xfffe9208>
   27ea0:	0101ffc4 	movi	r4,2047
   27ea4:	49003b26 	beq	r9,r4,27f94 <__subdf3+0x7b4>
   27ea8:	0085c83a 	sub	r2,zero,r2
   27eac:	18c02034 	orhi	r3,r3,128
   27eb0:	01000e04 	movi	r4,56
   27eb4:	20806e16 	blt	r4,r2,28070 <__subdf3+0x890>
   27eb8:	010007c4 	movi	r4,31
   27ebc:	20807716 	blt	r4,r2,2809c <__subdf3+0x8bc>
   27ec0:	01000804 	movi	r4,32
   27ec4:	2089c83a 	sub	r4,r4,r2
   27ec8:	1914983a 	sll	r10,r3,r4
   27ecc:	8890d83a 	srl	r8,r17,r2
   27ed0:	8908983a 	sll	r4,r17,r4
   27ed4:	1884d83a 	srl	r2,r3,r2
   27ed8:	5222b03a 	or	r17,r10,r8
   27edc:	2006c03a 	cmpne	r3,r4,zero
   27ee0:	88e2b03a 	or	r17,r17,r3
   27ee4:	89a3883a 	add	r17,r17,r6
   27ee8:	1145883a 	add	r2,r2,r5
   27eec:	898d803a 	cmpltu	r6,r17,r6
   27ef0:	3087883a 	add	r3,r6,r2
   27ef4:	4821883a 	mov	r16,r9
   27ef8:	003ed906 	br	27a60 <__alt_data_end+0xfffe9260>
   27efc:	2984b03a 	or	r2,r5,r6
   27f00:	10004226 	beq	r2,zero,2800c <__subdf3+0x82c>
   27f04:	1808d0fa 	srli	r4,r3,3
   27f08:	8822d0fa 	srli	r17,r17,3
   27f0c:	1806977a 	slli	r3,r3,29
   27f10:	2080022c 	andhi	r2,r4,8
   27f14:	1c62b03a 	or	r17,r3,r17
   27f18:	10000826 	beq	r2,zero,27f3c <__subdf3+0x75c>
   27f1c:	2812d0fa 	srli	r9,r5,3
   27f20:	4880022c 	andhi	r2,r9,8
   27f24:	1000051e 	bne	r2,zero,27f3c <__subdf3+0x75c>
   27f28:	300cd0fa 	srli	r6,r6,3
   27f2c:	2804977a 	slli	r2,r5,29
   27f30:	4809883a 	mov	r4,r9
   27f34:	3825883a 	mov	r18,r7
   27f38:	11a2b03a 	or	r17,r2,r6
   27f3c:	8806d77a 	srli	r3,r17,29
   27f40:	200890fa 	slli	r4,r4,3
   27f44:	882290fa 	slli	r17,r17,3
   27f48:	0401ffc4 	movi	r16,2047
   27f4c:	1906b03a 	or	r3,r3,r4
   27f50:	003e4406 	br	27864 <__alt_data_end+0xfffe9064>
   27f54:	2984b03a 	or	r2,r5,r6
   27f58:	103e4226 	beq	r2,zero,27864 <__alt_data_end+0xfffe9064>
   27f5c:	8989c83a 	sub	r4,r17,r6
   27f60:	8911803a 	cmpltu	r8,r17,r4
   27f64:	1945c83a 	sub	r2,r3,r5
   27f68:	1205c83a 	sub	r2,r2,r8
   27f6c:	1200202c 	andhi	r8,r2,128
   27f70:	403e9a26 	beq	r8,zero,279dc <__alt_data_end+0xfffe91dc>
   27f74:	3463c83a 	sub	r17,r6,r17
   27f78:	28c5c83a 	sub	r2,r5,r3
   27f7c:	344d803a 	cmpltu	r6,r6,r17
   27f80:	1187c83a 	sub	r3,r2,r6
   27f84:	3825883a 	mov	r18,r7
   27f88:	003e3606 	br	27864 <__alt_data_end+0xfffe9064>
   27f8c:	0101ffc4 	movi	r4,2047
   27f90:	493fc71e 	bne	r9,r4,27eb0 <__alt_data_end+0xfffe96b0>
   27f94:	2807883a 	mov	r3,r5
   27f98:	3023883a 	mov	r17,r6
   27f9c:	4821883a 	mov	r16,r9
   27fa0:	003e3006 	br	27864 <__alt_data_end+0xfffe9064>
   27fa4:	10003626 	beq	r2,zero,28080 <__subdf3+0x8a0>
   27fa8:	2984b03a 	or	r2,r5,r6
   27fac:	10001726 	beq	r2,zero,2800c <__subdf3+0x82c>
   27fb0:	1808d0fa 	srli	r4,r3,3
   27fb4:	8822d0fa 	srli	r17,r17,3
   27fb8:	1806977a 	slli	r3,r3,29
   27fbc:	2080022c 	andhi	r2,r4,8
   27fc0:	1c62b03a 	or	r17,r3,r17
   27fc4:	10000726 	beq	r2,zero,27fe4 <__subdf3+0x804>
   27fc8:	2812d0fa 	srli	r9,r5,3
   27fcc:	4880022c 	andhi	r2,r9,8
   27fd0:	1000041e 	bne	r2,zero,27fe4 <__subdf3+0x804>
   27fd4:	300cd0fa 	srli	r6,r6,3
   27fd8:	2804977a 	slli	r2,r5,29
   27fdc:	4809883a 	mov	r4,r9
   27fe0:	11a2b03a 	or	r17,r2,r6
   27fe4:	8806d77a 	srli	r3,r17,29
   27fe8:	200890fa 	slli	r4,r4,3
   27fec:	882290fa 	slli	r17,r17,3
   27ff0:	3825883a 	mov	r18,r7
   27ff4:	1906b03a 	or	r3,r3,r4
   27ff8:	0401ffc4 	movi	r16,2047
   27ffc:	003e1906 	br	27864 <__alt_data_end+0xfffe9064>
   28000:	000b883a 	mov	r5,zero
   28004:	0005883a 	mov	r2,zero
   28008:	003e2e06 	br	278c4 <__alt_data_end+0xfffe90c4>
   2800c:	0401ffc4 	movi	r16,2047
   28010:	003e1406 	br	27864 <__alt_data_end+0xfffe9064>
   28014:	0005883a 	mov	r2,zero
   28018:	003f7506 	br	27df0 <__alt_data_end+0xfffe95f0>
   2801c:	0005883a 	mov	r2,zero
   28020:	0009883a 	mov	r4,zero
   28024:	003e7806 	br	27a08 <__alt_data_end+0xfffe9208>
   28028:	123ff804 	addi	r8,r2,-32
   2802c:	01000804 	movi	r4,32
   28030:	1a10d83a 	srl	r8,r3,r8
   28034:	11002526 	beq	r2,r4,280cc <__subdf3+0x8ec>
   28038:	01001004 	movi	r4,64
   2803c:	2085c83a 	sub	r2,r4,r2
   28040:	1884983a 	sll	r2,r3,r2
   28044:	1444b03a 	or	r2,r2,r17
   28048:	1004c03a 	cmpne	r2,r2,zero
   2804c:	40a2b03a 	or	r17,r8,r2
   28050:	0005883a 	mov	r2,zero
   28054:	003f1606 	br	27cb0 <__alt_data_end+0xfffe94b0>
   28058:	02000434 	movhi	r8,16
   2805c:	0009883a 	mov	r4,zero
   28060:	423fffc4 	addi	r8,r8,-1
   28064:	00bfffc4 	movi	r2,-1
   28068:	0401ffc4 	movi	r16,2047
   2806c:	003e6606 	br	27a08 <__alt_data_end+0xfffe9208>
   28070:	1c62b03a 	or	r17,r3,r17
   28074:	8822c03a 	cmpne	r17,r17,zero
   28078:	0005883a 	mov	r2,zero
   2807c:	003f9906 	br	27ee4 <__alt_data_end+0xfffe96e4>
   28080:	2807883a 	mov	r3,r5
   28084:	3023883a 	mov	r17,r6
   28088:	0401ffc4 	movi	r16,2047
   2808c:	003df506 	br	27864 <__alt_data_end+0xfffe9064>
   28090:	2807883a 	mov	r3,r5
   28094:	3023883a 	mov	r17,r6
   28098:	003df206 	br	27864 <__alt_data_end+0xfffe9064>
   2809c:	123ff804 	addi	r8,r2,-32
   280a0:	01000804 	movi	r4,32
   280a4:	1a10d83a 	srl	r8,r3,r8
   280a8:	11000a26 	beq	r2,r4,280d4 <__subdf3+0x8f4>
   280ac:	01001004 	movi	r4,64
   280b0:	2085c83a 	sub	r2,r4,r2
   280b4:	1884983a 	sll	r2,r3,r2
   280b8:	1444b03a 	or	r2,r2,r17
   280bc:	1004c03a 	cmpne	r2,r2,zero
   280c0:	40a2b03a 	or	r17,r8,r2
   280c4:	0005883a 	mov	r2,zero
   280c8:	003f8606 	br	27ee4 <__alt_data_end+0xfffe96e4>
   280cc:	0005883a 	mov	r2,zero
   280d0:	003fdc06 	br	28044 <__alt_data_end+0xfffe9844>
   280d4:	0005883a 	mov	r2,zero
   280d8:	003ff706 	br	280b8 <__alt_data_end+0xfffe98b8>

000280dc <__fixdfsi>:
   280dc:	280cd53a 	srli	r6,r5,20
   280e0:	00c00434 	movhi	r3,16
   280e4:	18ffffc4 	addi	r3,r3,-1
   280e8:	3181ffcc 	andi	r6,r6,2047
   280ec:	01c0ff84 	movi	r7,1022
   280f0:	28c6703a 	and	r3,r5,r3
   280f4:	280ad7fa 	srli	r5,r5,31
   280f8:	3980120e 	bge	r7,r6,28144 <__fixdfsi+0x68>
   280fc:	00810744 	movi	r2,1053
   28100:	11800c16 	blt	r2,r6,28134 <__fixdfsi+0x58>
   28104:	00810cc4 	movi	r2,1075
   28108:	1185c83a 	sub	r2,r2,r6
   2810c:	01c007c4 	movi	r7,31
   28110:	18c00434 	orhi	r3,r3,16
   28114:	38800d16 	blt	r7,r2,2814c <__fixdfsi+0x70>
   28118:	31befb44 	addi	r6,r6,-1043
   2811c:	2084d83a 	srl	r2,r4,r2
   28120:	1986983a 	sll	r3,r3,r6
   28124:	1884b03a 	or	r2,r3,r2
   28128:	28000726 	beq	r5,zero,28148 <__fixdfsi+0x6c>
   2812c:	0085c83a 	sub	r2,zero,r2
   28130:	f800283a 	ret
   28134:	00a00034 	movhi	r2,32768
   28138:	10bfffc4 	addi	r2,r2,-1
   2813c:	2885883a 	add	r2,r5,r2
   28140:	f800283a 	ret
   28144:	0005883a 	mov	r2,zero
   28148:	f800283a 	ret
   2814c:	008104c4 	movi	r2,1043
   28150:	1185c83a 	sub	r2,r2,r6
   28154:	1884d83a 	srl	r2,r3,r2
   28158:	003ff306 	br	28128 <__alt_data_end+0xfffe9928>

0002815c <__floatsidf>:
   2815c:	defffd04 	addi	sp,sp,-12
   28160:	dfc00215 	stw	ra,8(sp)
   28164:	dc400115 	stw	r17,4(sp)
   28168:	dc000015 	stw	r16,0(sp)
   2816c:	20002b26 	beq	r4,zero,2821c <__floatsidf+0xc0>
   28170:	2023883a 	mov	r17,r4
   28174:	2020d7fa 	srli	r16,r4,31
   28178:	20002d16 	blt	r4,zero,28230 <__floatsidf+0xd4>
   2817c:	8809883a 	mov	r4,r17
   28180:	00284880 	call	28488 <__clzsi2>
   28184:	01410784 	movi	r5,1054
   28188:	288bc83a 	sub	r5,r5,r2
   2818c:	01010cc4 	movi	r4,1075
   28190:	2149c83a 	sub	r4,r4,r5
   28194:	00c007c4 	movi	r3,31
   28198:	1900160e 	bge	r3,r4,281f4 <__floatsidf+0x98>
   2819c:	00c104c4 	movi	r3,1043
   281a0:	1947c83a 	sub	r3,r3,r5
   281a4:	88c6983a 	sll	r3,r17,r3
   281a8:	00800434 	movhi	r2,16
   281ac:	10bfffc4 	addi	r2,r2,-1
   281b0:	1886703a 	and	r3,r3,r2
   281b4:	2941ffcc 	andi	r5,r5,2047
   281b8:	800d883a 	mov	r6,r16
   281bc:	0005883a 	mov	r2,zero
   281c0:	280a953a 	slli	r5,r5,20
   281c4:	31803fcc 	andi	r6,r6,255
   281c8:	01000434 	movhi	r4,16
   281cc:	300c97fa 	slli	r6,r6,31
   281d0:	213fffc4 	addi	r4,r4,-1
   281d4:	1906703a 	and	r3,r3,r4
   281d8:	1946b03a 	or	r3,r3,r5
   281dc:	1986b03a 	or	r3,r3,r6
   281e0:	dfc00217 	ldw	ra,8(sp)
   281e4:	dc400117 	ldw	r17,4(sp)
   281e8:	dc000017 	ldw	r16,0(sp)
   281ec:	dec00304 	addi	sp,sp,12
   281f0:	f800283a 	ret
   281f4:	00c002c4 	movi	r3,11
   281f8:	1887c83a 	sub	r3,r3,r2
   281fc:	88c6d83a 	srl	r3,r17,r3
   28200:	8904983a 	sll	r2,r17,r4
   28204:	01000434 	movhi	r4,16
   28208:	213fffc4 	addi	r4,r4,-1
   2820c:	2941ffcc 	andi	r5,r5,2047
   28210:	1906703a 	and	r3,r3,r4
   28214:	800d883a 	mov	r6,r16
   28218:	003fe906 	br	281c0 <__alt_data_end+0xfffe99c0>
   2821c:	000d883a 	mov	r6,zero
   28220:	000b883a 	mov	r5,zero
   28224:	0007883a 	mov	r3,zero
   28228:	0005883a 	mov	r2,zero
   2822c:	003fe406 	br	281c0 <__alt_data_end+0xfffe99c0>
   28230:	0123c83a 	sub	r17,zero,r4
   28234:	003fd106 	br	2817c <__alt_data_end+0xfffe997c>

00028238 <__floatunsidf>:
   28238:	defffe04 	addi	sp,sp,-8
   2823c:	dc000015 	stw	r16,0(sp)
   28240:	dfc00115 	stw	ra,4(sp)
   28244:	2021883a 	mov	r16,r4
   28248:	20002226 	beq	r4,zero,282d4 <__floatunsidf+0x9c>
   2824c:	00284880 	call	28488 <__clzsi2>
   28250:	01010784 	movi	r4,1054
   28254:	2089c83a 	sub	r4,r4,r2
   28258:	01810cc4 	movi	r6,1075
   2825c:	310dc83a 	sub	r6,r6,r4
   28260:	00c007c4 	movi	r3,31
   28264:	1980120e 	bge	r3,r6,282b0 <__floatunsidf+0x78>
   28268:	00c104c4 	movi	r3,1043
   2826c:	1907c83a 	sub	r3,r3,r4
   28270:	80ca983a 	sll	r5,r16,r3
   28274:	00800434 	movhi	r2,16
   28278:	10bfffc4 	addi	r2,r2,-1
   2827c:	2101ffcc 	andi	r4,r4,2047
   28280:	0021883a 	mov	r16,zero
   28284:	288a703a 	and	r5,r5,r2
   28288:	2008953a 	slli	r4,r4,20
   2828c:	00c00434 	movhi	r3,16
   28290:	18ffffc4 	addi	r3,r3,-1
   28294:	28c6703a 	and	r3,r5,r3
   28298:	8005883a 	mov	r2,r16
   2829c:	1906b03a 	or	r3,r3,r4
   282a0:	dfc00117 	ldw	ra,4(sp)
   282a4:	dc000017 	ldw	r16,0(sp)
   282a8:	dec00204 	addi	sp,sp,8
   282ac:	f800283a 	ret
   282b0:	00c002c4 	movi	r3,11
   282b4:	188bc83a 	sub	r5,r3,r2
   282b8:	814ad83a 	srl	r5,r16,r5
   282bc:	00c00434 	movhi	r3,16
   282c0:	18ffffc4 	addi	r3,r3,-1
   282c4:	81a0983a 	sll	r16,r16,r6
   282c8:	2101ffcc 	andi	r4,r4,2047
   282cc:	28ca703a 	and	r5,r5,r3
   282d0:	003fed06 	br	28288 <__alt_data_end+0xfffe9a88>
   282d4:	0009883a 	mov	r4,zero
   282d8:	000b883a 	mov	r5,zero
   282dc:	003fea06 	br	28288 <__alt_data_end+0xfffe9a88>

000282e0 <__truncdfsf2>:
   282e0:	2810d53a 	srli	r8,r5,20
   282e4:	01c00434 	movhi	r7,16
   282e8:	39ffffc4 	addi	r7,r7,-1
   282ec:	29ce703a 	and	r7,r5,r7
   282f0:	4201ffcc 	andi	r8,r8,2047
   282f4:	380e90fa 	slli	r7,r7,3
   282f8:	200cd77a 	srli	r6,r4,29
   282fc:	42400044 	addi	r9,r8,1
   28300:	4a41ffcc 	andi	r9,r9,2047
   28304:	00c00044 	movi	r3,1
   28308:	280ad7fa 	srli	r5,r5,31
   2830c:	31ceb03a 	or	r7,r6,r7
   28310:	200490fa 	slli	r2,r4,3
   28314:	1a40230e 	bge	r3,r9,283a4 <__truncdfsf2+0xc4>
   28318:	40ff2004 	addi	r3,r8,-896
   2831c:	01803f84 	movi	r6,254
   28320:	30c01516 	blt	r6,r3,28378 <__truncdfsf2+0x98>
   28324:	00c0380e 	bge	zero,r3,28408 <__truncdfsf2+0x128>
   28328:	200c91ba 	slli	r6,r4,6
   2832c:	380e90fa 	slli	r7,r7,3
   28330:	1004d77a 	srli	r2,r2,29
   28334:	300cc03a 	cmpne	r6,r6,zero
   28338:	31ccb03a 	or	r6,r6,r7
   2833c:	308cb03a 	or	r6,r6,r2
   28340:	308001cc 	andi	r2,r6,7
   28344:	10000426 	beq	r2,zero,28358 <__truncdfsf2+0x78>
   28348:	308003cc 	andi	r2,r6,15
   2834c:	01000104 	movi	r4,4
   28350:	11000126 	beq	r2,r4,28358 <__truncdfsf2+0x78>
   28354:	31800104 	addi	r6,r6,4
   28358:	3081002c 	andhi	r2,r6,1024
   2835c:	10001626 	beq	r2,zero,283b8 <__truncdfsf2+0xd8>
   28360:	18c00044 	addi	r3,r3,1
   28364:	00803fc4 	movi	r2,255
   28368:	18800326 	beq	r3,r2,28378 <__truncdfsf2+0x98>
   2836c:	300c91ba 	slli	r6,r6,6
   28370:	300cd27a 	srli	r6,r6,9
   28374:	00000206 	br	28380 <__truncdfsf2+0xa0>
   28378:	00ffffc4 	movi	r3,-1
   2837c:	000d883a 	mov	r6,zero
   28380:	18c03fcc 	andi	r3,r3,255
   28384:	180895fa 	slli	r4,r3,23
   28388:	00c02034 	movhi	r3,128
   2838c:	280a97fa 	slli	r5,r5,31
   28390:	18ffffc4 	addi	r3,r3,-1
   28394:	30c6703a 	and	r3,r6,r3
   28398:	1906b03a 	or	r3,r3,r4
   2839c:	1944b03a 	or	r2,r3,r5
   283a0:	f800283a 	ret
   283a4:	40000b1e 	bne	r8,zero,283d4 <__truncdfsf2+0xf4>
   283a8:	388cb03a 	or	r6,r7,r2
   283ac:	0007883a 	mov	r3,zero
   283b0:	30000426 	beq	r6,zero,283c4 <__truncdfsf2+0xe4>
   283b4:	01800144 	movi	r6,5
   283b8:	00803fc4 	movi	r2,255
   283bc:	300cd0fa 	srli	r6,r6,3
   283c0:	18800a26 	beq	r3,r2,283ec <__truncdfsf2+0x10c>
   283c4:	00802034 	movhi	r2,128
   283c8:	10bfffc4 	addi	r2,r2,-1
   283cc:	308c703a 	and	r6,r6,r2
   283d0:	003feb06 	br	28380 <__alt_data_end+0xfffe9b80>
   283d4:	3888b03a 	or	r4,r7,r2
   283d8:	203fe726 	beq	r4,zero,28378 <__alt_data_end+0xfffe9b78>
   283dc:	380c90fa 	slli	r6,r7,3
   283e0:	00c03fc4 	movi	r3,255
   283e4:	31808034 	orhi	r6,r6,512
   283e8:	003fd506 	br	28340 <__alt_data_end+0xfffe9b40>
   283ec:	303fe226 	beq	r6,zero,28378 <__alt_data_end+0xfffe9b78>
   283f0:	00802034 	movhi	r2,128
   283f4:	31801034 	orhi	r6,r6,64
   283f8:	10bfffc4 	addi	r2,r2,-1
   283fc:	00ffffc4 	movi	r3,-1
   28400:	308c703a 	and	r6,r6,r2
   28404:	003fde06 	br	28380 <__alt_data_end+0xfffe9b80>
   28408:	013ffa44 	movi	r4,-23
   2840c:	19000e16 	blt	r3,r4,28448 <__truncdfsf2+0x168>
   28410:	01000784 	movi	r4,30
   28414:	20c9c83a 	sub	r4,r4,r3
   28418:	018007c4 	movi	r6,31
   2841c:	39c02034 	orhi	r7,r7,128
   28420:	31000b16 	blt	r6,r4,28450 <__truncdfsf2+0x170>
   28424:	423f2084 	addi	r8,r8,-894
   28428:	120c983a 	sll	r6,r2,r8
   2842c:	3a0e983a 	sll	r7,r7,r8
   28430:	1104d83a 	srl	r2,r2,r4
   28434:	300cc03a 	cmpne	r6,r6,zero
   28438:	31ceb03a 	or	r7,r6,r7
   2843c:	388cb03a 	or	r6,r7,r2
   28440:	0007883a 	mov	r3,zero
   28444:	003fbe06 	br	28340 <__alt_data_end+0xfffe9b40>
   28448:	0007883a 	mov	r3,zero
   2844c:	003fd906 	br	283b4 <__alt_data_end+0xfffe9bb4>
   28450:	01bfff84 	movi	r6,-2
   28454:	30cdc83a 	sub	r6,r6,r3
   28458:	00c00804 	movi	r3,32
   2845c:	398cd83a 	srl	r6,r7,r6
   28460:	20c00726 	beq	r4,r3,28480 <__truncdfsf2+0x1a0>
   28464:	423f2884 	addi	r8,r8,-862
   28468:	3a0e983a 	sll	r7,r7,r8
   2846c:	3884b03a 	or	r2,r7,r2
   28470:	1004c03a 	cmpne	r2,r2,zero
   28474:	118cb03a 	or	r6,r2,r6
   28478:	0007883a 	mov	r3,zero
   2847c:	003fb006 	br	28340 <__alt_data_end+0xfffe9b40>
   28480:	000f883a 	mov	r7,zero
   28484:	003ff906 	br	2846c <__alt_data_end+0xfffe9c6c>

00028488 <__clzsi2>:
   28488:	00bfffd4 	movui	r2,65535
   2848c:	11000536 	bltu	r2,r4,284a4 <__clzsi2+0x1c>
   28490:	00803fc4 	movi	r2,255
   28494:	11000f36 	bltu	r2,r4,284d4 <__clzsi2+0x4c>
   28498:	00800804 	movi	r2,32
   2849c:	0007883a 	mov	r3,zero
   284a0:	00000506 	br	284b8 <__clzsi2+0x30>
   284a4:	00804034 	movhi	r2,256
   284a8:	10bfffc4 	addi	r2,r2,-1
   284ac:	11000c2e 	bgeu	r2,r4,284e0 <__clzsi2+0x58>
   284b0:	00800204 	movi	r2,8
   284b4:	00c00604 	movi	r3,24
   284b8:	20c8d83a 	srl	r4,r4,r3
   284bc:	00c000f4 	movhi	r3,3
   284c0:	18e63484 	addi	r3,r3,-26414
   284c4:	1909883a 	add	r4,r3,r4
   284c8:	20c00003 	ldbu	r3,0(r4)
   284cc:	10c5c83a 	sub	r2,r2,r3
   284d0:	f800283a 	ret
   284d4:	00800604 	movi	r2,24
   284d8:	00c00204 	movi	r3,8
   284dc:	003ff606 	br	284b8 <__alt_data_end+0xfffe9cb8>
   284e0:	00800404 	movi	r2,16
   284e4:	1007883a 	mov	r3,r2
   284e8:	003ff306 	br	284b8 <__alt_data_end+0xfffe9cb8>

000284ec <close>:

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   284ec:	d0a00b17 	ldw	r2,-32724(gp)
   284f0:	10000926 	beq	r2,zero,28518 <close+0x2c>
#include "os/alt_syscall.h"

#ifdef ALT_USE_DIRECT_DRIVERS

int ALT_CLOSE (int fildes)
{
   284f4:	deffff04 	addi	sp,sp,-4
   284f8:	dfc00015 	stw	ra,0(sp)
   284fc:	103ee83a 	callr	r2
  
  ALT_STUB_WARNING(close);
  
  /* Indicate an error */
  
  ALT_ERRNO = ENOSYS;
   28500:	00c01604 	movi	r3,88
   28504:	10c00015 	stw	r3,0(r2)
  return -1;
}
   28508:	00bfffc4 	movi	r2,-1
   2850c:	dfc00017 	ldw	ra,0(sp)
   28510:	dec00104 	addi	sp,sp,4
   28514:	f800283a 	ret
   28518:	d0a24f04 	addi	r2,gp,-30404
  
  ALT_STUB_WARNING(close);
  
  /* Indicate an error */
  
  ALT_ERRNO = ENOSYS;
   2851c:	00c01604 	movi	r3,88
   28520:	10c00015 	stw	r3,0(r2)
  return -1;
}
   28524:	00bfffc4 	movi	r2,-1
   28528:	f800283a 	ret

0002852c <fstat>:
 * Provide minimal version that just describes all file descriptors 
 * as character devices for provided stdio devices.
 */
int ALT_FSTAT (int file, struct stat *st)
{
    switch (file) {
   2852c:	00800084 	movi	r2,2
   28530:	11000436 	bltu	r2,r4,28544 <fstat+0x18>
    case 1: /* stdout file descriptor */
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
#endif /* ALT_STDERR_PRESENT */
        st->st_mode = _IFCHR;
   28534:	00880004 	movi	r2,8192
   28538:	28800115 	stw	r2,4(r5)
        return 0;
   2853c:	0005883a 	mov	r2,zero
   28540:	f800283a 	ret
    default:
        return -1;
   28544:	00bfffc4 	movi	r2,-1

#if !defined(ALT_STDIN_PRESENT) && !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(fstat);
#endif
}
   28548:	f800283a 	ret

0002854c <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
   2854c:	defffb04 	addi	sp,sp,-20
   28550:	dc800215 	stw	r18,8(sp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   28554:	d4a25f17 	ldw	r18,-30340(gp)
   28558:	dcc00315 	stw	r19,12(sp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   2855c:	d4e25e17 	ldw	r19,-30344(gp)
   28560:	dfc00415 	stw	ra,16(sp)
   28564:	dc400115 	stw	r17,4(sp)
   28568:	dc000015 	stw	r16,0(sp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
   2856c:	90003a26 	beq	r18,zero,28658 <gettimeofday+0x10c>
   28570:	2021883a 	mov	r16,r4
   28574:	2823883a 	mov	r17,r5
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
   28578:	9809883a 	mov	r4,r19
   2857c:	900b883a 	mov	r5,r18
   28580:	00257c00 	call	257c0 <__udivsi3>
   28584:	d0e25617 	ldw	r3,-30376(gp)
    ptimeval->tv_usec = alt_resettime.tv_usec +
   28588:	010003f4 	movhi	r4,15
   2858c:	900b883a 	mov	r5,r18
   * updated.
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
   28590:	1885883a 	add	r2,r3,r2
    ptimeval->tv_usec = alt_resettime.tv_usec +
   28594:	21109004 	addi	r4,r4,16960
   * updated.
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
   28598:	80800015 	stw	r2,0(r16)
    ptimeval->tv_usec = alt_resettime.tv_usec +
   2859c:	00257c00 	call	257c0 <__udivsi3>
   285a0:	980d883a 	mov	r6,r19
   285a4:	000f883a 	mov	r7,zero
   285a8:	1009883a 	mov	r4,r2
   285ac:	000b883a 	mov	r5,zero
   285b0:	00243300 	call	24330 <__muldi3>
   285b4:	018003f4 	movhi	r6,15
   285b8:	1009883a 	mov	r4,r2
   285bc:	31909004 	addi	r6,r6,16960
   285c0:	000f883a 	mov	r7,zero
   285c4:	180b883a 	mov	r5,r3
   285c8:	00251040 	call	25104 <__umoddi3>
   285cc:	d0e25717 	ldw	r3,-30372(gp)
          break;
      }
      else
      {
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
   285d0:	010003f4 	movhi	r4,15
   285d4:	21109004 	addi	r4,r4,16960
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
   285d8:	1885883a 	add	r2,r3,r2
   285dc:	80800115 	stw	r2,4(r16)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
   285e0:	80800117 	ldw	r2,4(r16)
   285e4:	10000a0e 	bge	r2,zero,28610 <gettimeofday+0xc4>
      if (ptimeval->tv_sec <= 0)
   285e8:	80c00017 	ldw	r3,0(r16)
   285ec:	00c00316 	blt	zero,r3,285fc <gettimeofday+0xb0>
      {
          ptimeval->tv_sec = 0;
   285f0:	80000015 	stw	zero,0(r16)
          ptimeval->tv_usec = 0;
   285f4:	80000115 	stw	zero,4(r16)
   285f8:	00001106 	br	28640 <gettimeofday+0xf4>
          break;
      }
      else
      {
          ptimeval->tv_sec--;
   285fc:	18ffffc4 	addi	r3,r3,-1
          ptimeval->tv_usec += ALT_US;
   28600:	1105883a 	add	r2,r2,r4
          ptimeval->tv_usec = 0;
          break;
      }
      else
      {
          ptimeval->tv_sec--;
   28604:	80c00015 	stw	r3,0(r16)
          ptimeval->tv_usec += ALT_US;
   28608:	80800115 	stw	r2,4(r16)
   2860c:	003ff406 	br	285e0 <__alt_data_end+0xfffe9de0>
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
   28610:	010003f4 	movhi	r4,15
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
   28614:	017ffc74 	movhi	r5,65521
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
   28618:	21108fc4 	addi	r4,r4,16959
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
   2861c:	296f7004 	addi	r5,r5,-16960
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
   28620:	80800117 	ldw	r2,4(r16)
   28624:	2080060e 	bge	r4,r2,28640 <gettimeofday+0xf4>
      ptimeval->tv_sec++;
   28628:	80c00017 	ldw	r3,0(r16)
      ptimeval->tv_usec -= ALT_US;
   2862c:	1145883a 	add	r2,r2,r5
   28630:	80800115 	stw	r2,4(r16)
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
      ptimeval->tv_sec++;
   28634:	18c00044 	addi	r3,r3,1
   28638:	80c00015 	stw	r3,0(r16)
   2863c:	003ff806 	br	28620 <__alt_data_end+0xfffe9e20>
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
   28640:	88000726 	beq	r17,zero,28660 <gettimeofday+0x114>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
   28644:	d0a25817 	ldw	r2,-30368(gp)
   28648:	88800015 	stw	r2,0(r17)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
   2864c:	d0a25917 	ldw	r2,-30364(gp)
   28650:	88800115 	stw	r2,4(r17)
   28654:	00000206 	br	28660 <gettimeofday+0x114>
    }

    return 0;
  }

  return -ENOTSUP;
   28658:	00bfde84 	movi	r2,-134
   2865c:	00000106 	br	28664 <gettimeofday+0x118>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
    }

    return 0;
   28660:	0005883a 	mov	r2,zero
  }

  return -ENOTSUP;
}
   28664:	dfc00417 	ldw	ra,16(sp)
   28668:	dcc00317 	ldw	r19,12(sp)
   2866c:	dc800217 	ldw	r18,8(sp)
   28670:	dc400117 	ldw	r17,4(sp)
   28674:	dc000017 	ldw	r16,0(sp)
   28678:	dec00504 	addi	sp,sp,20
   2867c:	f800283a 	ret

00028680 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   28680:	002870c1 	jmpi	2870c <alt_iic_isr_register>

00028684 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   28684:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   28688:	00bfff84 	movi	r2,-2
   2868c:	2084703a 	and	r2,r4,r2
   28690:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   28694:	00c00044 	movi	r3,1
   28698:	d0a25a17 	ldw	r2,-30360(gp)
   2869c:	194a983a 	sll	r5,r3,r5
   286a0:	288ab03a 	or	r5,r5,r2
   286a4:	d1625a15 	stw	r5,-30360(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   286a8:	d0a25a17 	ldw	r2,-30360(gp)
   286ac:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   286b0:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
   286b4:	0005883a 	mov	r2,zero
   286b8:	f800283a 	ret

000286bc <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   286bc:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   286c0:	00bfff84 	movi	r2,-2
   286c4:	2084703a 	and	r2,r4,r2
   286c8:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   286cc:	00ffff84 	movi	r3,-2
   286d0:	d0a25a17 	ldw	r2,-30360(gp)
   286d4:	194a183a 	rol	r5,r3,r5
   286d8:	288a703a 	and	r5,r5,r2
   286dc:	d1625a15 	stw	r5,-30360(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   286e0:	d0a25a17 	ldw	r2,-30360(gp)
   286e4:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   286e8:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
   286ec:	0005883a 	mov	r2,zero
   286f0:	f800283a 	ret

000286f4 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   286f4:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
   286f8:	00800044 	movi	r2,1
   286fc:	1144983a 	sll	r2,r2,r5
   28700:	10c4703a 	and	r2,r2,r3
}
   28704:	1004c03a 	cmpne	r2,r2,zero
   28708:	f800283a 	ret

0002870c <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
   2870c:	00c007c4 	movi	r3,31
   28710:	19401616 	blt	r3,r5,2876c <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   28714:	defffe04 	addi	sp,sp,-8
   28718:	dfc00115 	stw	ra,4(sp)
   2871c:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   28720:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   28724:	00ffff84 	movi	r3,-2
   28728:	80c6703a 	and	r3,r16,r3
   2872c:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
   28730:	280490fa 	slli	r2,r5,3
   28734:	00c000f4 	movhi	r3,3
   28738:	18ef7f04 	addi	r3,r3,-16900
   2873c:	1885883a 	add	r2,r3,r2
   28740:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
   28744:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   28748:	30000226 	beq	r6,zero,28754 <alt_iic_isr_register+0x48>
   2874c:	00286840 	call	28684 <alt_ic_irq_enable>
   28750:	00000106 	br	28758 <alt_iic_isr_register+0x4c>
   28754:	00286bc0 	call	286bc <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   28758:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
   2875c:	dfc00117 	ldw	ra,4(sp)
   28760:	dc000017 	ldw	r16,0(sp)
   28764:	dec00204 	addi	sp,sp,8
   28768:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
   2876c:	00bffa84 	movi	r2,-22
   28770:	f800283a 	ret

00028774 <isatty>:

#if !defined(ALT_STDIN_PRESENT) && !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(isatty);
#endif
}
   28774:	00800084 	movi	r2,2
   28778:	1105403a 	cmpgeu	r2,r2,r4
   2877c:	f800283a 	ret

00028780 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   28780:	deffff04 	addi	sp,sp,-4
   28784:	010000f4 	movhi	r4,3
   28788:	014000f4 	movhi	r5,3
   2878c:	dfc00015 	stw	ra,0(sp)
   28790:	21267504 	addi	r4,r4,-26156
   28794:	2968b004 	addi	r5,r5,-23872

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   28798:	2140061e 	bne	r4,r5,287b4 <alt_load+0x34>
   2879c:	01000034 	movhi	r4,0
   287a0:	01400034 	movhi	r5,0
   287a4:	21000804 	addi	r4,r4,32
   287a8:	29400804 	addi	r5,r5,32
   287ac:	2140121e 	bne	r4,r5,287f8 <alt_load+0x78>
   287b0:	00000b06 	br	287e0 <alt_load+0x60>
   287b4:	00c000f4 	movhi	r3,3
   287b8:	18e8b004 	addi	r3,r3,-23872
   287bc:	1907c83a 	sub	r3,r3,r4
   287c0:	0005883a 	mov	r2,zero
  {
    while( to != end )
   287c4:	10fff526 	beq	r2,r3,2879c <__alt_data_end+0xfffe9f9c>
    {
      *to++ = *from++;
   287c8:	114f883a 	add	r7,r2,r5
   287cc:	39c00017 	ldw	r7,0(r7)
   287d0:	110d883a 	add	r6,r2,r4
   287d4:	10800104 	addi	r2,r2,4
   287d8:	31c00015 	stw	r7,0(r6)
   287dc:	003ff906 	br	287c4 <__alt_data_end+0xfffe9fc4>
   287e0:	010000f4 	movhi	r4,3
   287e4:	014000f4 	movhi	r5,3
   287e8:	21230e04 	addi	r4,r4,-29640
   287ec:	29630e04 	addi	r5,r5,-29640

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   287f0:	2140101e 	bne	r4,r5,28834 <alt_load+0xb4>
   287f4:	00000b06 	br	28824 <alt_load+0xa4>
   287f8:	00c00034 	movhi	r3,0
   287fc:	18c06004 	addi	r3,r3,384
   28800:	1907c83a 	sub	r3,r3,r4
   28804:	0005883a 	mov	r2,zero
  {
    while( to != end )
   28808:	10fff526 	beq	r2,r3,287e0 <__alt_data_end+0xfffe9fe0>
    {
      *to++ = *from++;
   2880c:	114f883a 	add	r7,r2,r5
   28810:	39c00017 	ldw	r7,0(r7)
   28814:	110d883a 	add	r6,r2,r4
   28818:	10800104 	addi	r2,r2,4
   2881c:	31c00015 	stw	r7,0(r6)
   28820:	003ff906 	br	28808 <__alt_data_end+0xfffea008>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   28824:	0028bb40 	call	28bb4 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   28828:	dfc00017 	ldw	ra,0(sp)
   2882c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   28830:	0028bb81 	jmpi	28bb8 <alt_icache_flush_all>
   28834:	00c000f4 	movhi	r3,3
   28838:	18e67504 	addi	r3,r3,-26156
   2883c:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   28840:	0005883a 	mov	r2,zero
  {
    while( to != end )
   28844:	18bff726 	beq	r3,r2,28824 <__alt_data_end+0xfffea024>
    {
      *to++ = *from++;
   28848:	114f883a 	add	r7,r2,r5
   2884c:	39c00017 	ldw	r7,0(r7)
   28850:	110d883a 	add	r6,r2,r4
   28854:	10800104 	addi	r2,r2,4
   28858:	31c00015 	stw	r7,0(r6)
   2885c:	003ff906 	br	28844 <__alt_data_end+0xfffea044>

00028860 <lseek>:
   28860:	d0a00b17 	ldw	r2,-32724(gp)
   28864:	10000926 	beq	r2,zero,2888c <lseek+0x2c>
#include "os/alt_syscall.h"

#ifdef ALT_USE_DIRECT_DRIVERS

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   28868:	deffff04 	addi	sp,sp,-4
   2886c:	dfc00015 	stw	ra,0(sp)
   28870:	103ee83a 	callr	r2
  
  ALT_STUB_WARNING(lseek);
  
  /* Indicate an error */
  
  ALT_ERRNO = ENOSYS;
   28874:	00c01604 	movi	r3,88
   28878:	10c00015 	stw	r3,0(r2)
  return -1;
}
   2887c:	00bfffc4 	movi	r2,-1
   28880:	dfc00017 	ldw	ra,0(sp)
   28884:	dec00104 	addi	sp,sp,4
   28888:	f800283a 	ret
   2888c:	d0a24f04 	addi	r2,gp,-30404
  
  ALT_STUB_WARNING(lseek);
  
  /* Indicate an error */
  
  ALT_ERRNO = ENOSYS;
   28890:	00c01604 	movi	r3,88
   28894:	10c00015 	stw	r3,0(r2)
  return -1;
}
   28898:	00bfffc4 	movi	r2,-1
   2889c:	f800283a 	ret

000288a0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   288a0:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   288a4:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   288a8:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   288ac:	0028b000 	call	28b00 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   288b0:	0028b200 	call	28b20 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   288b4:	d1a25b17 	ldw	r6,-30356(gp)
   288b8:	d1625c17 	ldw	r5,-30352(gp)
   288bc:	d1225d17 	ldw	r4,-30348(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   288c0:	dfc00017 	ldw	ra,0(sp)
   288c4:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   288c8:	000094c1 	jmpi	94c <main>

000288cc <__malloc_lock>:
   288cc:	f800283a 	ret

000288d0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   288d0:	f800283a 	ret

000288d4 <open>:
   288d4:	d0a00b17 	ldw	r2,-32724(gp)
   288d8:	10000926 	beq	r2,zero,28900 <open+0x2c>
#include "os/alt_syscall.h"

#ifdef ALT_USE_DIRECT_DRIVERS

int ALT_OPEN (const char* file, int flags, int mode)
{
   288dc:	deffff04 	addi	sp,sp,-4
   288e0:	dfc00015 	stw	ra,0(sp)
   288e4:	103ee83a 	callr	r2
  
  ALT_STUB_WARNING(open);
  
  /* Indicate an error */
  
  ALT_ERRNO = ENOSYS;
   288e8:	00c01604 	movi	r3,88
   288ec:	10c00015 	stw	r3,0(r2)
  return -1;
}
   288f0:	00bfffc4 	movi	r2,-1
   288f4:	dfc00017 	ldw	ra,0(sp)
   288f8:	dec00104 	addi	sp,sp,4
   288fc:	f800283a 	ret
   28900:	d0a24f04 	addi	r2,gp,-30404
  
  ALT_STUB_WARNING(open);
  
  /* Indicate an error */
  
  ALT_ERRNO = ENOSYS;
   28904:	00c01604 	movi	r3,88
   28908:	10c00015 	stw	r3,0(r2)
  return -1;
}
   2890c:	00bfffc4 	movi	r2,-1
   28910:	f800283a 	ret

00028914 <read>:
#if !defined(ALT_STDIN_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(read);
#endif

    switch (file) {
   28914:	2000041e 	bne	r4,zero,28928 <read+0x14>
#ifdef ALT_STDIN_PRESENT
    case 0: /* stdin file descriptor */
        return ALT_DRIVER_READ(ALT_STDIN_DEV, ptr, len, 0);
   28918:	010000f4 	movhi	r4,3
   2891c:	000f883a 	mov	r7,zero
   28920:	2128af04 	addi	r4,r4,-23876
   28924:	0028b241 	jmpi	28b24 <altera_avalon_jtag_uart_read>
   28928:	d0a00b17 	ldw	r2,-32724(gp)
   2892c:	10000926 	beq	r2,zero,28954 <read+0x40>
/*
 * Provide minimal version that just reads from the stdin device when provided.
 */

int ALT_READ (int file, void *ptr, size_t len)
{
   28930:	deffff04 	addi	sp,sp,-4
   28934:	dfc00015 	stw	ra,0(sp)
   28938:	103ee83a 	callr	r2
#ifdef ALT_STDIN_PRESENT
    case 0: /* stdin file descriptor */
        return ALT_DRIVER_READ(ALT_STDIN_DEV, ptr, len, 0);
#endif /* ALT_STDIN_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   2893c:	00c01444 	movi	r3,81
   28940:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   28944:	00bfffc4 	movi	r2,-1
   28948:	dfc00017 	ldw	ra,0(sp)
   2894c:	dec00104 	addi	sp,sp,4
   28950:	f800283a 	ret
   28954:	d0a24f04 	addi	r2,gp,-30404
#ifdef ALT_STDIN_PRESENT
    case 0: /* stdin file descriptor */
        return ALT_DRIVER_READ(ALT_STDIN_DEV, ptr, len, 0);
#endif /* ALT_STDIN_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   28958:	00c01444 	movi	r3,81
   2895c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   28960:	00bfffc4 	movi	r2,-1
   28964:	f800283a 	ret

00028968 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   28968:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2896c:	00bfff84 	movi	r2,-2
   28970:	2884703a 	and	r2,r5,r2
   28974:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   28978:	d0a00d17 	ldw	r2,-32716(gp)
   2897c:	00ffff04 	movi	r3,-4
   28980:	108000c4 	addi	r2,r2,3
   28984:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   28988:	00c00134 	movhi	r3,4
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   2898c:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   28990:	1109883a 	add	r4,r2,r4
   28994:	18fa0004 	addi	r3,r3,-6144
   28998:	1900032e 	bgeu	r3,r4,289a8 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2899c:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   289a0:	00bfffc4 	movi	r2,-1
   289a4:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
   289a8:	d1200d15 	stw	r4,-32716(gp)
   289ac:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
   289b0:	f800283a 	ret

000289b4 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   289b4:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   289b8:	00bfff84 	movi	r2,-2
   289bc:	1884703a 	and	r2,r3,r2
   289c0:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   289c4:	21400117 	ldw	r5,4(r4)
   289c8:	20800017 	ldw	r2,0(r4)
   289cc:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
   289d0:	21400117 	ldw	r5,4(r4)
   289d4:	28800015 	stw	r2,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   289d8:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
   289dc:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   289e0:	1801703a 	wrctl	status,r3
   289e4:	f800283a 	ret

000289e8 <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   289e8:	d0a25e17 	ldw	r2,-30344(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   289ec:	defffb04 	addi	sp,sp,-20
   289f0:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   289f4:	d4200e17 	ldw	r16,-32712(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   289f8:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   289fc:	dc800215 	stw	r18,8(sp)
   28a00:	dc400115 	stw	r17,4(sp)
   28a04:	dfc00415 	stw	ra,16(sp)
   28a08:	dcc00315 	stw	r19,12(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   28a0c:	d0a25e15 	stw	r2,-30344(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   28a10:	d4600e04 	addi	r17,gp,-32712
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
   28a14:	04800044 	movi	r18,1

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   28a18:	84401a26 	beq	r16,r17,28a84 <alt_tick+0x9c>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   28a1c:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
   28a20:	84c00017 	ldw	r19,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   28a24:	10000326 	beq	r2,zero,28a34 <alt_tick+0x4c>
   28a28:	d0a25e17 	ldw	r2,-30344(gp)
   28a2c:	1000011e 	bne	r2,zero,28a34 <alt_tick+0x4c>
    {
      alarm->rollover = 0;
   28a30:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   28a34:	d0e25e17 	ldw	r3,-30344(gp)
   28a38:	80800217 	ldw	r2,8(r16)
   28a3c:	18800f36 	bltu	r3,r2,28a7c <alt_tick+0x94>
   28a40:	80800403 	ldbu	r2,16(r16)
   28a44:	10000d1e 	bne	r2,zero,28a7c <alt_tick+0x94>
    {
      next_callback = alarm->callback (alarm->context);
   28a48:	80800317 	ldw	r2,12(r16)
   28a4c:	81000517 	ldw	r4,20(r16)
   28a50:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   28a54:	1000031e 	bne	r2,zero,28a64 <alt_tick+0x7c>
      {
        alt_alarm_stop (alarm);
   28a58:	8009883a 	mov	r4,r16
   28a5c:	00289b40 	call	289b4 <alt_alarm_stop>
   28a60:	00000606 	br	28a7c <alt_tick+0x94>
      }
      else
      {
        alarm->time += next_callback;
   28a64:	80c00217 	ldw	r3,8(r16)
   28a68:	10c5883a 	add	r2,r2,r3
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   28a6c:	d0e25e17 	ldw	r3,-30344(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
   28a70:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   28a74:	10c0012e 	bgeu	r2,r3,28a7c <alt_tick+0x94>
        {
          alarm->rollover = 1;
   28a78:	84800405 	stb	r18,16(r16)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   28a7c:	9821883a 	mov	r16,r19
   28a80:	003fe506 	br	28a18 <__alt_data_end+0xfffea218>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   28a84:	dfc00417 	ldw	ra,16(sp)
   28a88:	dcc00317 	ldw	r19,12(sp)
   28a8c:	dc800217 	ldw	r18,8(sp)
   28a90:	dc400117 	ldw	r17,4(sp)
   28a94:	dc000017 	ldw	r16,0(sp)
   28a98:	dec00504 	addi	sp,sp,20
   28a9c:	f800283a 	ret

00028aa0 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   28aa0:	00800044 	movi	r2,1
   28aa4:	20800226 	beq	r4,r2,28ab0 <write+0x10>
   28aa8:	00800084 	movi	r2,2
   28aac:	2080041e 	bne	r4,r2,28ac0 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   28ab0:	010000f4 	movhi	r4,3
   28ab4:	000f883a 	mov	r7,zero
   28ab8:	2128af04 	addi	r4,r4,-23876
   28abc:	0028b801 	jmpi	28b80 <altera_avalon_jtag_uart_write>
   28ac0:	d0a00b17 	ldw	r2,-32724(gp)
   28ac4:	10000926 	beq	r2,zero,28aec <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   28ac8:	deffff04 	addi	sp,sp,-4
   28acc:	dfc00015 	stw	ra,0(sp)
   28ad0:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   28ad4:	00c01444 	movi	r3,81
   28ad8:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   28adc:	00bfffc4 	movi	r2,-1
   28ae0:	dfc00017 	ldw	ra,0(sp)
   28ae4:	dec00104 	addi	sp,sp,4
   28ae8:	f800283a 	ret
   28aec:	d0a24f04 	addi	r2,gp,-30404
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   28af0:	00c01444 	movi	r3,81
   28af4:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   28af8:	00bfffc4 	movi	r2,-1
   28afc:	f800283a 	ret

00028b00 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   28b00:	deffff04 	addi	sp,sp,-4
   28b04:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   28b08:	0028c300 	call	28c30 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   28b0c:	00800044 	movi	r2,1
   28b10:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   28b14:	dfc00017 	ldw	ra,0(sp)
   28b18:	dec00104 	addi	sp,sp,4
   28b1c:	f800283a 	ret

00028b20 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   28b20:	f800283a 	ret

00028b24 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
   28b24:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
   28b28:	298d883a 	add	r6,r5,r6

  while (ptr < end)
   28b2c:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
   28b30:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   28b34:	11800b2e 	bgeu	r2,r6,28b64 <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   28b38:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   28b3c:	1a60000c 	andi	r9,r3,32768
   28b40:	48000326 	beq	r9,zero,28b50 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   28b44:	10c00005 	stb	r3,0(r2)
   28b48:	10800044 	addi	r2,r2,1
   28b4c:	003ff906 	br	28b34 <__alt_data_end+0xfffea334>
    else if (ptr != buffer)
   28b50:	11400226 	beq	r2,r5,28b5c <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
   28b54:	1145c83a 	sub	r2,r2,r5
   28b58:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
   28b5c:	403ff526 	beq	r8,zero,28b34 <__alt_data_end+0xfffea334>
   28b60:	00000106 	br	28b68 <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
   28b64:	117ffb1e 	bne	r2,r5,28b54 <__alt_data_end+0xfffea354>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
   28b68:	39d0000c 	andi	r7,r7,16384
   28b6c:	3800021e 	bne	r7,zero,28b78 <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
   28b70:	00bffec4 	movi	r2,-5
   28b74:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
   28b78:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
   28b7c:	f800283a 	ret

00028b80 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   28b80:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   28b84:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   28b88:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   28b8c:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   28b90:	2980072e 	bgeu	r5,r6,28bb0 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   28b94:	38c00037 	ldwio	r3,0(r7)
   28b98:	18ffffec 	andhi	r3,r3,65535
   28b9c:	183ffc26 	beq	r3,zero,28b90 <__alt_data_end+0xfffea390>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   28ba0:	28c00007 	ldb	r3,0(r5)
   28ba4:	20c00035 	stwio	r3,0(r4)
   28ba8:	29400044 	addi	r5,r5,1
   28bac:	003ff806 	br	28b90 <__alt_data_end+0xfffea390>

  return count;
}
   28bb0:	f800283a 	ret

00028bb4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   28bb4:	f800283a 	ret

00028bb8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   28bb8:	f800283a 	ret

00028bbc <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   28bbc:	213ffe84 	addi	r4,r4,-6
   28bc0:	008003c4 	movi	r2,15
   28bc4:	11001636 	bltu	r2,r4,28c20 <alt_exception_cause_generated_bad_addr+0x64>
   28bc8:	200890ba 	slli	r4,r4,2
   28bcc:	008000f4 	movhi	r2,3
   28bd0:	10a2f804 	addi	r2,r2,-29728
   28bd4:	2089883a 	add	r4,r4,r2
   28bd8:	20800017 	ldw	r2,0(r4)
   28bdc:	1000683a 	jmp	r2
   28be0:	00028c28 	cmpgeui	zero,zero,2608
   28be4:	00028c28 	cmpgeui	zero,zero,2608
   28be8:	00028c20 	cmpeqi	zero,zero,2608
   28bec:	00028c20 	cmpeqi	zero,zero,2608
   28bf0:	00028c20 	cmpeqi	zero,zero,2608
   28bf4:	00028c28 	cmpgeui	zero,zero,2608
   28bf8:	00028c20 	cmpeqi	zero,zero,2608
   28bfc:	00028c20 	cmpeqi	zero,zero,2608
   28c00:	00028c28 	cmpgeui	zero,zero,2608
   28c04:	00028c28 	cmpgeui	zero,zero,2608
   28c08:	00028c20 	cmpeqi	zero,zero,2608
   28c0c:	00028c28 	cmpgeui	zero,zero,2608
   28c10:	00028c20 	cmpeqi	zero,zero,2608
   28c14:	00028c20 	cmpeqi	zero,zero,2608
   28c18:	00028c20 	cmpeqi	zero,zero,2608
   28c1c:	00028c28 	cmpgeui	zero,zero,2608
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   28c20:	0005883a 	mov	r2,zero
   28c24:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   28c28:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
   28c2c:	f800283a 	ret

00028c30 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   28c30:	000170fa 	wrctl	ienable,zero
   28c34:	f800283a 	ret
