
MasterSoC_3pAIP_v2.elf:     file format elf32-littlenios2
MasterSoC_3pAIP_v2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000180

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00002954 memsz 0x00002954 flags r-x
    LOAD off    0x00003974 vaddr 0x00002974 paddr 0x00002a6c align 2**12
         filesz 0x000000f8 memsz 0x000000f8 flags rw-
    LOAD off    0x00003b64 vaddr 0x00002b64 paddr 0x00002b64 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000025ec  00000180  00000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000208  0000276c  0000276c  0000376c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f8  00002974  00002a6c  00003974  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  00002b64  00002b64  00003b64  2**2
                  ALLOC, SMALL_DATA
  6 .mem_program  00000000  00002c84  00002c84  00003a6c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00003a6c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000004f8  00000000  00000000  00003a90  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000072ca  00000000  00000000  00003f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000025e0  00000000  00000000  0000b252  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000029fc  00000000  00000000  0000d832  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000b44  00000000  00000000  00010230  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001de4  00000000  00000000  00010d74  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000498f  00000000  00000000  00012b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000174e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000005c0  00000000  00000000  000174f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00019599  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0001959c  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000195a8  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000195a9  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000195aa  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000195b5  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000195c0  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000001a  00000000  00000000  000195cb  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000004f  00000000  00000000  000195e5  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0006bb40  00000000  00000000  00019634  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000180 l    d  .text	00000000 .text
0000276c l    d  .rodata	00000000 .rodata
00002974 l    d  .rwdata	00000000 .rwdata
00002b64 l    d  .bss	00000000 .bss
00002c84 l    d  .mem_program	00000000 .mem_program
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../MasterSoC_3pAIP_v2_bsp//obj/HAL/src/crt0.o
000001b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 ID00001001_dummy.c
00000000 l    df *ABS*	00000000 ID00004003_masterSOC.c
00000000 l    df *ABS*	00000000 aip.c
000004b4 l     F .text	00000028 aip_aipRead
000004dc l     F .text	00000028 aip_aipWrite
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 spi.c
00000000 l    df *ABS*	00000000 platform.c
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00001d6c l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00002974 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00002b80 g     O .bss	00000004 alt_instruction_exception_handler
00002604 g     F .text	0000002c alt_main
00000c7c g     F .text	0000002c mdelay
00000b7c g     F .text	0000003c spi_write_API
00001cbc g     F .text	00000080 _puts_r
00002b84 g     O .bss	00000100 alt_irq
00002a6c g       *ABS*	00000000 __flash_rwdata_start
00001c70 g     F .text	0000004c printf
00000640 g     F .text	0000008c aip_enableINT
00000894 g     F .text	00000020 start_isr
00002764 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000e10 g     F .text	00000058 find_first_bit
00002b6c g     O .bss	00000004 errno
00002b78 g     O .bss	00000004 alt_argv
0000aa54 g       *ABS*	00000000 _gp
000008b4 g     F .text	00000050 int_setup
000005f0 g     F .text	00000028 aip_getID
00000a7c g     F .text	000000a8 spi_write_then_read
00000348 g     F .text	0000001c ID00001001_getStatus
00001d3c g     F .text	00000014 puts
000026f0 g     F .text	00000074 alt_exception_cause_generated_bad_addr
0000045c g     F .text	0000001c ID00004003_getStatus
0000031c g     F .text	0000002c ID00001001_readData
00001c34 g     F .text	0000003c _printf_r
00001b30 g     F .text	00000064 .hidden __udivsi3
00000b24 g     F .text	00000008 spi_init
00000ca8 g     F .text	00000008 msleep_interruptible
00000bb8 g     F .text	00000080 spidev_interface_transact
000002d4 g     F .text	0000001c ID00001001_startIP
00000cb8 g     F .text	00000040 int_sqrt
00000404 g     F .text	0000002c ID00004003_writeData
00001474 g     F .text	000005c4 .hidden __umoddi3
00002a54 g     O .rwdata	00000004 _global_impure_ptr
00002c84 g       *ABS*	00000000 __bss_end
000024bc g     F .text	00000068 alt_iic_isr_register
00000e78 g     F .text	000005fc .hidden __udivdi3
00000e68 g     F .text	00000008 ERR_PTR
000024a4 g     F .text	00000018 alt_ic_irq_enabled
00000570 g     F .text	0000006c aip_writeConfReg
000002f0 g     F .text	0000002c ID00001001_writeData
00002b70 g     O .bss	00000004 alt_irq_active
0000075c g     F .text	00000030 aip_clearINT
000000fc g     F .exceptions	00000060 alt_irq_handler
00000000 g       *ABS*	00000000 __alt_mem_mem_program
000026e8 g     F .text	00000004 alt_dcache_flush_all
00002a6c g       *ABS*	00000000 __ram_rwdata_end
00002630 g     F .text	00000060 write
00002974 g       *ABS*	00000000 __ram_rodata_end
00002a64 g     O .rwdata	00000004 jtag_uart_0
00001b94 g     F .text	00000058 .hidden __umodsi3
00000c48 g     F .text	00000004 gpio_data
00002c84 g       *ABS*	00000000 end
0000015c g     F .exceptions	00000024 alt_instruction_exception_entry
0003e800 g       *ABS*	00000000 __alt_stack_pointer
000026b4 g     F .text	00000034 altera_avalon_jtag_uart_write
00000904 g     F .text	00000048 start_setup
00001dd8 g     F .text	0000052c ___vfprintf_internal_r
00000180 g     F .text	0000003c _start
00000cf8 g     F .text	00000098 ilog2
000026b0 g     F .text	00000004 alt_sys_init
000009e0 g     F .text	0000009c spi_read
00000c4c g     F .text	00000004 gpio_set_value
00001bec g     F .text	00000028 .hidden __mulsi3
00002974 g       *ABS*	00000000 __ram_rwdata_start
0000276c g       *ABS*	00000000 __ram_rodata_start
00000c50 g     F .text	0000002c udelay
000005dc g     F .text	00000004 aip_writeMem
00002c84 g       *ABS*	00000000 __alt_stack_base
00002b64 g     O .bss	00000004 start_state
000003e8 g     F .text	0000001c ID00004003_startIP
00002b68 g     O .bss	00000004 edge_val
00000d90 g     F .text	00000080 do_div
00002320 g     F .text	000000b8 __sfvwrite_small_dev
00002b64 g       *ABS*	00000000 __bss_start
00001c14 g     F .text	00000020 memset
0000094c g     F .text	00000094 main
00002b74 g     O .bss	00000004 alt_envp
00000b2c g     F .text	00000050 spi_read_API
00002a60 g     O .rwdata	00000004 uart_0
00000808 g     F .text	0000008c int_isr
000001bc g     F .text	00000074 ID00001001_init
00002a68 g     O .rwdata	00000004 alt_errno
00001a38 g     F .text	00000084 .hidden __divsi3
00000cb0 g     F .text	00000008 clk_prepare_enable
0000276c g       *ABS*	00000000 __flash_rodata_start
00002690 g     F .text	00000020 alt_irq_init
00000364 g     F .text	0000003c ID00001001_waitDone
00000280 g     F .text	00000054 ID00001001_disableDelay
00002873 g     O .rodata	00000100 .hidden __clz_tab
00000430 g     F .text	0000002c ID00004003_readData
000023d8 g     F .text	00000058 _write_r
000006cc g     F .text	00000090 aip_disableINT
00002a58 g     O .rwdata	00000004 _impure_ptr
00002b7c g     O .bss	00000004 alt_argc
00000020 g       .exceptions	00000000 alt_irq_entry
00000230 g     F .text	00000050 ID00001001_enableDelay
000003a0 g     F .text	00000018 ID00001001_waitirq
00000020 g       *ABS*	00000000 __ram_exceptions_start
000003b8 g     F .text	00000030 ID00004003_init
00000504 g     F .text	0000006c aip_readMem
00002430 g     F .text	00000004 alt_ic_isr_register
00002a6c g       *ABS*	00000000 _edata
00002c84 g       *ABS*	00000000 _end
00000180 g       *ABS*	00000000 __ram_exceptions_end
0000246c g     F .text	00000038 alt_ic_irq_disable
00000c3c g     F .text	00000004 gpio_direction
00001abc g     F .text	00000074 .hidden __modsi3
0003e800 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000000c g       .entry	00000000 _exit
00001d50 g     F .text	0000001c strlen
000007cc g     F .text	0000003c aip_getNotifications
0000078c g     F .text	00000040 aip_getINT
00000e70 g     F .text	00000008 zmalloc
000026ec g     F .text	00000004 alt_icache_flush_all
00002a5c g     O .rwdata	00000004 alt_priority_mask
00000c38 g     F .text	00000004 gpio_init
000005e0 g     F .text	00000010 aip_start
00002434 g     F .text	00000038 alt_ic_irq_enable
00002304 g     F .text	0000001c __vfprintf_internal
00002524 g     F .text	000000e0 alt_load
00000618 g     F .text	00000028 aip_getStatus
00000478 g     F .text	0000003c ID00004003_waitDone
00000c40 g     F .text	00000008 gpio_is_valid



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08406014 	ori	at,at,384
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	000015c0 	call	15c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defffe04 	addi	sp,sp,-8
 100:	dfc00115 	stw	ra,4(sp)
 104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 10c:	04000034 	movhi	r16,0
 110:	840ae104 	addi	r16,r16,11140

  active = alt_irq_pending ();

  do
  {
    i = 0;
 114:	0005883a 	mov	r2,zero
    mask = 1;
 118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	20ca703a 	and	r5,r4,r3
 120:	28000b26 	beq	r5,zero,150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 124:	100490fa 	slli	r2,r2,3
 128:	8085883a 	add	r2,r16,r2
 12c:	10c00017 	ldw	r3,0(r2)
 130:	11000117 	ldw	r4,4(r2)
 134:	183ee83a 	callr	r3
 138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 13c:	203ff51e 	bne	r4,zero,114 <__alt_data_end+0xfffc1914>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 140:	dfc00117 	ldw	ra,4(sp)
 144:	dc000017 	ldw	r16,0(sp)
 148:	dec00204 	addi	sp,sp,8
 14c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 150:	18c7883a 	add	r3,r3,r3
      i++;
 154:	10800044 	addi	r2,r2,1

    } while (1);
 158:	003ff006 	br	11c <__alt_data_end+0xfffc191c>

0000015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 15c:	d0a04b17 	ldw	r2,-32468(gp)
 160:	10000426 	beq	r2,zero,174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 164:	200b883a 	mov	r5,r4
 168:	000d883a 	mov	r6,zero
 16c:	013fffc4 	movi	r4,-1
 170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
 178:	0005883a 	mov	r2,zero
 17c:	f800283a 	ret

Disassembly of section .text:

00000180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     180:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
     184:	defa0014 	ori	sp,sp,59392
    movhi gp, %hi(_gp)
     188:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     18c:	d6aa9514 	ori	gp,gp,43604
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     190:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     194:	108ad914 	ori	r2,r2,11108

    movhi r3, %hi(__bss_end)
     198:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     19c:	18cb2114 	ori	r3,r3,11396

    beq r2, r3, 1f
     1a0:	10c00326 	beq	r2,r3,1b0 <_start+0x30>

0:
    stw zero, (r2)
     1a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1ac:	10fffd36 	bltu	r2,r3,1a4 <__alt_data_end+0xfffc19a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1b0:	00025240 	call	2524 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1b4:	00026040 	call	2604 <alt_main>

000001b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1b8:	003fff06 	br	1b8 <__alt_data_end+0xfffc19b8>

000001bc <ID00001001_init>:

static int32_t ID00001001_clearStatus(uint32_t port);


int32_t ID00001001_init(uint32_t port)
{
     1bc:	defffb04 	addi	sp,sp,-20
    uint32_t id;

    //aip_init(port, ID00001001_csv, ID00001001_CONFIG_AMOUNT);

    aip_getID(port, &id);
     1c0:	d80b883a 	mov	r5,sp

static int32_t ID00001001_clearStatus(uint32_t port);


int32_t ID00001001_init(uint32_t port)
{
     1c4:	dfc00415 	stw	ra,16(sp)
     1c8:	dc800315 	stw	r18,12(sp)
     1cc:	dc400215 	stw	r17,8(sp)
     1d0:	dc000115 	stw	r16,4(sp)
     1d4:	2023883a 	mov	r17,r4
    uint32_t id;

    //aip_init(port, ID00001001_csv, ID00001001_CONFIG_AMOUNT);

    aip_getID(port, &id);
     1d8:	00005f00 	call	5f0 <aip_getID>
    printf("ID:%x\n",id);
     1dc:	d9400017 	ldw	r5,0(sp)
     1e0:	01000034 	movhi	r4,0
     1e4:	2109db04 	addi	r4,r4,10092
     1e8:	0001c700 	call	1c70 <printf>
    return 0;
}

static int32_t ID00001001_clearStatus(uint32_t port)
{
    for(uint32_t i = 0; i < ID00001001_STATUS_BITS; i++)
     1ec:	0021883a 	mov	r16,zero
     1f0:	04800204 	movi	r18,8
    {
        aip_disableINT(port, i);
     1f4:	800b883a 	mov	r5,r16
     1f8:	8809883a 	mov	r4,r17
     1fc:	00006cc0 	call	6cc <aip_disableINT>
        
        aip_clearINT(port, i);
     200:	800b883a 	mov	r5,r16
     204:	8809883a 	mov	r4,r17
    return 0;
}

static int32_t ID00001001_clearStatus(uint32_t port)
{
    for(uint32_t i = 0; i < ID00001001_STATUS_BITS; i++)
     208:	84000044 	addi	r16,r16,1
    {
        aip_disableINT(port, i);
        
        aip_clearINT(port, i);
     20c:	000075c0 	call	75c <aip_clearINT>
    return 0;
}

static int32_t ID00001001_clearStatus(uint32_t port)
{
    for(uint32_t i = 0; i < ID00001001_STATUS_BITS; i++)
     210:	84bff81e 	bne	r16,r18,1f4 <__alt_data_end+0xfffc19f4>
    aip_getID(port, &id);
    printf("ID:%x\n",id);
    ID00001001_clearStatus(port);

    return 0;
}
     214:	0005883a 	mov	r2,zero
     218:	dfc00417 	ldw	ra,16(sp)
     21c:	dc800317 	ldw	r18,12(sp)
     220:	dc400217 	ldw	r17,8(sp)
     224:	dc000117 	ldw	r16,4(sp)
     228:	dec00504 	addi	sp,sp,20
     22c:	f800283a 	ret

00000230 <ID00001001_enableDelay>:

int32_t ID00001001_enableDelay(uint32_t port, uint32_t msec)
{
    uint32_t delay = 0;

    delay = (msec << 1) | 1;
     230:	294b883a 	add	r5,r5,r5

    return 0;
}

int32_t ID00001001_enableDelay(uint32_t port, uint32_t msec)
{
     234:	defffc04 	addi	sp,sp,-16
    uint32_t delay = 0;

    delay = (msec << 1) | 1;
     238:	29400054 	ori	r5,r5,1
     23c:	d9400115 	stw	r5,4(sp)

    aip_writeConfReg(port, CDELAY, &delay, 1, 0);
     240:	01c00044 	movi	r7,1
     244:	d9800104 	addi	r6,sp,4
     248:	d8000015 	stw	zero,0(sp)
     24c:	01400104 	movi	r5,4

    return 0;
}

int32_t ID00001001_enableDelay(uint32_t port, uint32_t msec)
{
     250:	dfc00315 	stw	ra,12(sp)
     254:	dc000215 	stw	r16,8(sp)
     258:	2021883a 	mov	r16,r4
    uint32_t delay = 0;

    delay = (msec << 1) | 1;

    aip_writeConfReg(port, CDELAY, &delay, 1, 0);
     25c:	00005700 	call	570 <aip_writeConfReg>

    aip_enableINT(port, ID00001001_STATUS_BIT_DONE);
     260:	000b883a 	mov	r5,zero
     264:	8009883a 	mov	r4,r16
     268:	00006400 	call	640 <aip_enableINT>

    return 0;
}
     26c:	0005883a 	mov	r2,zero
     270:	dfc00317 	ldw	ra,12(sp)
     274:	dc000217 	ldw	r16,8(sp)
     278:	dec00404 	addi	sp,sp,16
     27c:	f800283a 	ret

00000280 <ID00001001_disableDelay>:

int32_t ID00001001_disableDelay(uint32_t port)
{
     280:	defffc04 	addi	sp,sp,-16
    uint32_t delay = 0;

    aip_writeConfReg(port, CDELAY, &delay, 1, 0);
     284:	01c00044 	movi	r7,1
     288:	d9800104 	addi	r6,sp,4
     28c:	d8000015 	stw	zero,0(sp)
     290:	01400104 	movi	r5,4

    return 0;
}

int32_t ID00001001_disableDelay(uint32_t port)
{
     294:	dfc00315 	stw	ra,12(sp)
     298:	dc000215 	stw	r16,8(sp)
    uint32_t delay = 0;
     29c:	d8000115 	stw	zero,4(sp)

    return 0;
}

int32_t ID00001001_disableDelay(uint32_t port)
{
     2a0:	2021883a 	mov	r16,r4
    uint32_t delay = 0;

    aip_writeConfReg(port, CDELAY, &delay, 1, 0);
     2a4:	00005700 	call	570 <aip_writeConfReg>

    aip_disableINT(port, 0);
     2a8:	8009883a 	mov	r4,r16
     2ac:	000b883a 	mov	r5,zero
     2b0:	00006cc0 	call	6cc <aip_disableINT>
        
    aip_clearINT(port, 0);
     2b4:	000b883a 	mov	r5,zero
     2b8:	8009883a 	mov	r4,r16
     2bc:	000075c0 	call	75c <aip_clearINT>

    return 0;
}
     2c0:	0005883a 	mov	r2,zero
     2c4:	dfc00317 	ldw	ra,12(sp)
     2c8:	dc000217 	ldw	r16,8(sp)
     2cc:	dec00404 	addi	sp,sp,16
     2d0:	f800283a 	ret

000002d4 <ID00001001_startIP>:

int32_t ID00001001_startIP(uint32_t port)
{
     2d4:	deffff04 	addi	sp,sp,-4
     2d8:	dfc00015 	stw	ra,0(sp)
    aip_start(port);
     2dc:	00005e00 	call	5e0 <aip_start>

    return 0;
}
     2e0:	0005883a 	mov	r2,zero
     2e4:	dfc00017 	ldw	ra,0(sp)
     2e8:	dec00104 	addi	sp,sp,4
     2ec:	f800283a 	ret

000002f0 <ID00001001_writeData>:

int32_t ID00001001_writeData(uint32_t port, uint32_t *data, uint32_t size, uint32_t offset)
{
     2f0:	defffe04 	addi	sp,sp,-8
    aip_writeMem(port, MDATAIN, data, size, offset);
     2f4:	d9c00015 	stw	r7,0(sp)
     2f8:	31ffffcc 	andi	r7,r6,65535
     2fc:	280d883a 	mov	r6,r5
     300:	000b883a 	mov	r5,zero

    return 0;
}

int32_t ID00001001_writeData(uint32_t port, uint32_t *data, uint32_t size, uint32_t offset)
{
     304:	dfc00115 	stw	ra,4(sp)
    aip_writeMem(port, MDATAIN, data, size, offset);
     308:	00005dc0 	call	5dc <aip_writeMem>

    return 0;
}
     30c:	0005883a 	mov	r2,zero
     310:	dfc00117 	ldw	ra,4(sp)
     314:	dec00204 	addi	sp,sp,8
     318:	f800283a 	ret

0000031c <ID00001001_readData>:

int32_t ID00001001_readData(uint32_t port, uint32_t *data, uint32_t size, uint32_t offset)
{
     31c:	defffe04 	addi	sp,sp,-8
    aip_readMem(port, MDATAOUT, data, size, offset);
     320:	d9c00015 	stw	r7,0(sp)
     324:	31ffffcc 	andi	r7,r6,65535
     328:	280d883a 	mov	r6,r5
     32c:	01400084 	movi	r5,2

    return 0;
}

int32_t ID00001001_readData(uint32_t port, uint32_t *data, uint32_t size, uint32_t offset)
{
     330:	dfc00115 	stw	ra,4(sp)
    aip_readMem(port, MDATAOUT, data, size, offset);
     334:	00005040 	call	504 <aip_readMem>

    return 0;
}
     338:	0005883a 	mov	r2,zero
     33c:	dfc00117 	ldw	ra,4(sp)
     340:	dec00204 	addi	sp,sp,8
     344:	f800283a 	ret

00000348 <ID00001001_getStatus>:

int32_t ID00001001_getStatus(uint32_t port, uint32_t *status)
{
     348:	deffff04 	addi	sp,sp,-4
     34c:	dfc00015 	stw	ra,0(sp)
    aip_getStatus(port, status);
     350:	00006180 	call	618 <aip_getStatus>

    return 0;
}
     354:	0005883a 	mov	r2,zero
     358:	dfc00017 	ldw	ra,0(sp)
     35c:	dec00104 	addi	sp,sp,4
     360:	f800283a 	ret

00000364 <ID00001001_waitDone>:

int32_t ID00001001_waitDone(uint32_t port)
{
     364:	defffd04 	addi	sp,sp,-12
     368:	dc000115 	stw	r16,4(sp)
     36c:	dfc00215 	stw	ra,8(sp)
     370:	2021883a 	mov	r16,r4
    uint32_t statusINT = 0;
     374:	d8000015 	stw	zero,0(sp)

    do
    {
        aip_getINT(port, &statusINT);
     378:	d80b883a 	mov	r5,sp
     37c:	8009883a 	mov	r4,r16
     380:	000078c0 	call	78c <aip_getINT>
    } while (!(statusINT && 0x1));
     384:	d8800017 	ldw	r2,0(sp)
     388:	103ffb26 	beq	r2,zero,378 <__alt_data_end+0xfffc1b78>

    return 0;
}
     38c:	0005883a 	mov	r2,zero
     390:	dfc00217 	ldw	ra,8(sp)
     394:	dc000117 	ldw	r16,4(sp)
     398:	dec00304 	addi	sp,sp,12
     39c:	f800283a 	ret

000003a0 <ID00001001_waitirq>:
{
    uint32_t statusINT = 0;

    do
    {
        asm("nop");
     3a0:	0001883a 	nop

    } while (!start_state);
     3a4:	d0a04417 	ldw	r2,-32496(gp)
     3a8:	103ffd26 	beq	r2,zero,3a0 <__alt_data_end+0xfffc1ba0>
    start_state = 0;
     3ac:	d0204415 	stw	zero,-32496(gp)
    return 0;
}
     3b0:	0005883a 	mov	r2,zero
     3b4:	f800283a 	ret

000003b8 <ID00004003_init>:

static int32_t ID00004003_clearStatus(uint32_t port);


int32_t ID00004003_init(uint32_t port)
{
     3b8:	defffe04 	addi	sp,sp,-8
    uint32_t id;

    //aip_init(port, ID00004003_csv, ID00004003_CONFIG_AMOUNT);

    aip_getID(port, &id);
     3bc:	d80b883a 	mov	r5,sp

static int32_t ID00004003_clearStatus(uint32_t port);


int32_t ID00004003_init(uint32_t port)
{
     3c0:	dfc00115 	stw	ra,4(sp)
    uint32_t id;

    //aip_init(port, ID00004003_csv, ID00004003_CONFIG_AMOUNT);

    aip_getID(port, &id);
     3c4:	00005f00 	call	5f0 <aip_getID>
    printf("The ID is: %x \n", id );
     3c8:	d9400017 	ldw	r5,0(sp)
     3cc:	01000034 	movhi	r4,0
     3d0:	2109dd04 	addi	r4,r4,10100
     3d4:	0001c700 	call	1c70 <printf>
    //ID00004003_clearStatus(port);

    return 0;
}
     3d8:	0005883a 	mov	r2,zero
     3dc:	dfc00117 	ldw	ra,4(sp)
     3e0:	dec00204 	addi	sp,sp,8
     3e4:	f800283a 	ret

000003e8 <ID00004003_startIP>:

int32_t ID00004003_startIP(uint32_t port)
{
     3e8:	deffff04 	addi	sp,sp,-4
     3ec:	dfc00015 	stw	ra,0(sp)
    aip_start(port);
     3f0:	00005e00 	call	5e0 <aip_start>

    return 0;
}
     3f4:	0005883a 	mov	r2,zero
     3f8:	dfc00017 	ldw	ra,0(sp)
     3fc:	dec00104 	addi	sp,sp,4
     400:	f800283a 	ret

00000404 <ID00004003_writeData>:

int32_t ID00004003_writeData(uint32_t port, uint32_t *data, uint32_t size, uint32_t offset)
{
     404:	defffe04 	addi	sp,sp,-8
    aip_writeMem(port, MDATAOUT, data, size, offset);
     408:	d9c00015 	stw	r7,0(sp)
     40c:	31ffffcc 	andi	r7,r6,65535
     410:	280d883a 	mov	r6,r5
     414:	01400084 	movi	r5,2

    return 0;
}

int32_t ID00004003_writeData(uint32_t port, uint32_t *data, uint32_t size, uint32_t offset)
{
     418:	dfc00115 	stw	ra,4(sp)
    aip_writeMem(port, MDATAOUT, data, size, offset);
     41c:	00005dc0 	call	5dc <aip_writeMem>

    return 0;
}
     420:	0005883a 	mov	r2,zero
     424:	dfc00117 	ldw	ra,4(sp)
     428:	dec00204 	addi	sp,sp,8
     42c:	f800283a 	ret

00000430 <ID00004003_readData>:

int32_t ID00004003_readData(uint32_t port, uint32_t *data, uint32_t size, uint32_t offset)
{
     430:	defffe04 	addi	sp,sp,-8
    aip_readMem(port, MDATAIN, data, size, offset);
     434:	d9c00015 	stw	r7,0(sp)
     438:	31ffffcc 	andi	r7,r6,65535
     43c:	280d883a 	mov	r6,r5
     440:	000b883a 	mov	r5,zero

    return 0;
}

int32_t ID00004003_readData(uint32_t port, uint32_t *data, uint32_t size, uint32_t offset)
{
     444:	dfc00115 	stw	ra,4(sp)
    aip_readMem(port, MDATAIN, data, size, offset);
     448:	00005040 	call	504 <aip_readMem>

    return 0;
}
     44c:	0005883a 	mov	r2,zero
     450:	dfc00117 	ldw	ra,4(sp)
     454:	dec00204 	addi	sp,sp,8
     458:	f800283a 	ret

0000045c <ID00004003_getStatus>:

int32_t ID00004003_getStatus(uint32_t port, uint32_t *status)
{
     45c:	deffff04 	addi	sp,sp,-4
     460:	dfc00015 	stw	ra,0(sp)
    aip_getStatus(port, status);
     464:	00006180 	call	618 <aip_getStatus>

    return 0;
}
     468:	0005883a 	mov	r2,zero
     46c:	dfc00017 	ldw	ra,0(sp)
     470:	dec00104 	addi	sp,sp,4
     474:	f800283a 	ret

00000478 <ID00004003_waitDone>:

int32_t ID00004003_waitDone(uint32_t port)
{
     478:	defffd04 	addi	sp,sp,-12
     47c:	dc000115 	stw	r16,4(sp)
     480:	dfc00215 	stw	ra,8(sp)
     484:	2021883a 	mov	r16,r4
    uint32_t statusINT = 0;
     488:	d8000015 	stw	zero,0(sp)

    do
    {
        aip_getINT(port, &statusINT);
     48c:	d80b883a 	mov	r5,sp
     490:	8009883a 	mov	r4,r16
     494:	000078c0 	call	78c <aip_getINT>
    } while (!(statusINT && 0x1));
     498:	d8800017 	ldw	r2,0(sp)
     49c:	103ffb26 	beq	r2,zero,48c <__alt_data_end+0xfffc1c8c>

    return 0;
}
     4a0:	0005883a 	mov	r2,zero
     4a4:	dfc00217 	ldw	ra,8(sp)
     4a8:	dc000117 	ldw	r16,4(sp)
     4ac:	dec00304 	addi	sp,sp,12
     4b0:	f800283a 	ret

000004b4 <aip_aipRead>:
static uint8_t aip_aipRead (void *aipBaseAddr, uint32_t config, uint32_t *data, uint32_t size )
{

    volatile uint32_t *reg32 = (volatile uint32_t *)aipBaseAddr;

    reg32[AIP_CONFIG] = config;
     4b4:	21400815 	stw	r5,32(r4)

    for (uint32_t i = 0; i < size; i++)
     4b8:	0005883a 	mov	r2,zero
     4bc:	11c00526 	beq	r2,r7,4d4 <aip_aipRead+0x20>
	{
		data[i] = reg32[AIP_DATAOUT];
     4c0:	20c00017 	ldw	r3,0(r4)

    volatile uint32_t *reg32 = (volatile uint32_t *)aipBaseAddr;

    reg32[AIP_CONFIG] = config;

    for (uint32_t i = 0; i < size; i++)
     4c4:	10800044 	addi	r2,r2,1
     4c8:	31800104 	addi	r6,r6,4
	{
		data[i] = reg32[AIP_DATAOUT];
     4cc:	30ffff15 	stw	r3,-4(r6)
     4d0:	003ffa06 	br	4bc <__alt_data_end+0xfffc1cbc>
	}

	return 0 ;
};
     4d4:	0005883a 	mov	r2,zero
     4d8:	f800283a 	ret

000004dc <aip_aipWrite>:
static uint8_t aip_aipWrite (void *aipBaseAddr, uint32_t config, uint32_t *data, uint32_t size)
{

    volatile uint32_t *reg32 = (volatile uint32_t *)aipBaseAddr;

    reg32[AIP_CONFIG] = config;
     4dc:	21400815 	stw	r5,32(r4)

    for (uint32_t i = 0; i < size; i++) {
     4e0:	0005883a 	mov	r2,zero
     4e4:	11c00526 	beq	r2,r7,4fc <aip_aipWrite+0x20>
        reg32[AIP_DATAIN] = data[i];
     4e8:	30c00017 	ldw	r3,0(r6)

    volatile uint32_t *reg32 = (volatile uint32_t *)aipBaseAddr;

    reg32[AIP_CONFIG] = config;

    for (uint32_t i = 0; i < size; i++) {
     4ec:	10800044 	addi	r2,r2,1
     4f0:	31800104 	addi	r6,r6,4
        reg32[AIP_DATAIN] = data[i];
     4f4:	20c00415 	stw	r3,16(r4)
     4f8:	003ffa06 	br	4e4 <__alt_data_end+0xfffc1ce4>
    }

	return 0 ;
};
     4fc:	0005883a 	mov	r2,zero
     500:	f800283a 	ret

00000504 <aip_readMem>:

    return 0;
}
*/
int8_t aip_readMem (void *aipBaseAddr, uint8_t configMem, uint32_t* dataRead, uint16_t amountData, uint32_t offset)
{
     504:	defffb04 	addi	sp,sp,-20
     508:	dcc00315 	stw	r19,12(sp)
     50c:	dc000015 	stw	r16,0(sp)
     510:	3827883a 	mov	r19,r7
    /* set addrs */
    aip_aipWrite((void *)aipBaseAddr, configMem+1, &offset, 1);
     514:	2c003fcc 	andi	r16,r5,255
     518:	01c00044 	movi	r7,1
     51c:	81cb883a 	add	r5,r16,r7

    return 0;
}
*/
int8_t aip_readMem (void *aipBaseAddr, uint8_t configMem, uint32_t* dataRead, uint16_t amountData, uint32_t offset)
{
     520:	dc800215 	stw	r18,8(sp)
     524:	3025883a 	mov	r18,r6
    /* set addrs */
    aip_aipWrite((void *)aipBaseAddr, configMem+1, &offset, 1);
     528:	d9800504 	addi	r6,sp,20

    return 0;
}
*/
int8_t aip_readMem (void *aipBaseAddr, uint8_t configMem, uint32_t* dataRead, uint16_t amountData, uint32_t offset)
{
     52c:	dfc00415 	stw	ra,16(sp)
     530:	dc400115 	stw	r17,4(sp)
     534:	2023883a 	mov	r17,r4
    /* set addrs */
    aip_aipWrite((void *)aipBaseAddr, configMem+1, &offset, 1);
     538:	00004dc0 	call	4dc <aip_aipWrite>

    /* write data */
    aip_aipRead((void *)aipBaseAddr, configMem, dataRead, amountData);
     53c:	99ffffcc 	andi	r7,r19,65535
     540:	900d883a 	mov	r6,r18
     544:	800b883a 	mov	r5,r16
     548:	8809883a 	mov	r4,r17
     54c:	00004b40 	call	4b4 <aip_aipRead>

    return 0;
}
     550:	0005883a 	mov	r2,zero
     554:	dfc00417 	ldw	ra,16(sp)
     558:	dcc00317 	ldw	r19,12(sp)
     55c:	dc800217 	ldw	r18,8(sp)
     560:	dc400117 	ldw	r17,4(sp)
     564:	dc000017 	ldw	r16,0(sp)
     568:	dec00504 	addi	sp,sp,20
     56c:	f800283a 	ret

00000570 <aip_writeConfReg>:

    return 0;
}

int8_t aip_writeConfReg (void *aipBaseAddr, uint8_t configConfReg, uint32_t* dataWrite, uint16_t amountData, uint32_t offset)
{
     570:	defffb04 	addi	sp,sp,-20
     574:	dcc00315 	stw	r19,12(sp)
     578:	dc000015 	stw	r16,0(sp)
     57c:	3827883a 	mov	r19,r7
    /* set addrs */
    aip_aipWrite((void *)aipBaseAddr, configConfReg+1, &offset, 1);
     580:	2c003fcc 	andi	r16,r5,255
     584:	01c00044 	movi	r7,1
     588:	81cb883a 	add	r5,r16,r7

    return 0;
}

int8_t aip_writeConfReg (void *aipBaseAddr, uint8_t configConfReg, uint32_t* dataWrite, uint16_t amountData, uint32_t offset)
{
     58c:	dc800215 	stw	r18,8(sp)
     590:	3025883a 	mov	r18,r6
    /* set addrs */
    aip_aipWrite((void *)aipBaseAddr, configConfReg+1, &offset, 1);
     594:	d9800504 	addi	r6,sp,20

    return 0;
}

int8_t aip_writeConfReg (void *aipBaseAddr, uint8_t configConfReg, uint32_t* dataWrite, uint16_t amountData, uint32_t offset)
{
     598:	dfc00415 	stw	ra,16(sp)
     59c:	dc400115 	stw	r17,4(sp)
     5a0:	2023883a 	mov	r17,r4
    /* set addrs */
    aip_aipWrite((void *)aipBaseAddr, configConfReg+1, &offset, 1);
     5a4:	00004dc0 	call	4dc <aip_aipWrite>

    /* write data */
    aip_aipWrite((void *)aipBaseAddr, configConfReg, dataWrite, amountData);
     5a8:	99ffffcc 	andi	r7,r19,65535
     5ac:	900d883a 	mov	r6,r18
     5b0:	800b883a 	mov	r5,r16
     5b4:	8809883a 	mov	r4,r17
     5b8:	00004dc0 	call	4dc <aip_aipWrite>

    return 0;
}
     5bc:	0005883a 	mov	r2,zero
     5c0:	dfc00417 	ldw	ra,16(sp)
     5c4:	dcc00317 	ldw	r19,12(sp)
     5c8:	dc800217 	ldw	r18,8(sp)
     5cc:	dc400117 	ldw	r17,4(sp)
     5d0:	dc000017 	ldw	r16,0(sp)
     5d4:	dec00504 	addi	sp,sp,20
     5d8:	f800283a 	ret

000005dc <aip_writeMem>:
     5dc:	00005701 	jmpi	570 <aip_writeConfReg>

000005e0 <aip_start>:

static uint8_t aip_aipStart (void *aipBaseAddr)
{
    volatile uint32_t *reg32 = (volatile uint32_t *)aipBaseAddr;

    reg32[AIP_START] = 0x1;
     5e0:	00800044 	movi	r2,1
     5e4:	20800c15 	stw	r2,48(r4)
int8_t aip_start (void *aipBaseAddr)
{
    aip_aipStart((void *)aipBaseAddr);

    return 0;
}
     5e8:	0005883a 	mov	r2,zero
     5ec:	f800283a 	ret

000005f0 <aip_getID>:

int8_t aip_getID (void *aipBaseAddr, uint32_t *id)
{
     5f0:	deffff04 	addi	sp,sp,-4
    aip_aipRead((void *)aipBaseAddr, AIP_IPID, id, 1);
     5f4:	280d883a 	mov	r6,r5
     5f8:	01c00044 	movi	r7,1
     5fc:	014007c4 	movi	r5,31

    return 0;
}

int8_t aip_getID (void *aipBaseAddr, uint32_t *id)
{
     600:	dfc00015 	stw	ra,0(sp)
    aip_aipRead((void *)aipBaseAddr, AIP_IPID, id, 1);
     604:	00004b40 	call	4b4 <aip_aipRead>

    return 0;
}
     608:	0005883a 	mov	r2,zero
     60c:	dfc00017 	ldw	ra,0(sp)
     610:	dec00104 	addi	sp,sp,4
     614:	f800283a 	ret

00000618 <aip_getStatus>:

int8_t aip_getStatus (void *aipBaseAddr, uint32_t* status)
{
     618:	deffff04 	addi	sp,sp,-4
    aip_aipRead((void *)aipBaseAddr, AIP_STATUS, status, 1);
     61c:	280d883a 	mov	r6,r5
     620:	01c00044 	movi	r7,1
     624:	01400784 	movi	r5,30

    return 0;
}

int8_t aip_getStatus (void *aipBaseAddr, uint32_t* status)
{
     628:	dfc00015 	stw	ra,0(sp)
    aip_aipRead((void *)aipBaseAddr, AIP_STATUS, status, 1);
     62c:	00004b40 	call	4b4 <aip_aipRead>

    return 0;
}
     630:	0005883a 	mov	r2,zero
     634:	dfc00017 	ldw	ra,0(sp)
     638:	dec00104 	addi	sp,sp,4
     63c:	f800283a 	ret

00000640 <aip_enableINT>:

int8_t aip_enableINT (void *aipBaseAddr, uint8_t idxInt)
{
     640:	defffa04 	addi	sp,sp,-24
     644:	dc800315 	stw	r18,12(sp)
     648:	dc400215 	stw	r17,8(sp)
    uint32_t status = 0;

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     64c:	04800784 	movi	r18,30
     650:	04400044 	movi	r17,1

    return 0;
}

int8_t aip_enableINT (void *aipBaseAddr, uint8_t idxInt)
{
     654:	dc000115 	stw	r16,4(sp)
    uint32_t status = 0;

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     658:	880f883a 	mov	r7,r17
     65c:	d80d883a 	mov	r6,sp

    return 0;
}

int8_t aip_enableINT (void *aipBaseAddr, uint8_t idxInt)
{
     660:	2821883a 	mov	r16,r5
    uint32_t status = 0;

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     664:	900b883a 	mov	r5,r18

    return 0;
}

int8_t aip_enableINT (void *aipBaseAddr, uint8_t idxInt)
{
     668:	dfc00515 	stw	ra,20(sp)
     66c:	dcc00415 	stw	r19,16(sp)
    uint32_t status = 0;
     670:	d8000015 	stw	zero,0(sp)

    return 0;
}

int8_t aip_enableINT (void *aipBaseAddr, uint8_t idxInt)
{
     674:	2027883a 	mov	r19,r4

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);

    status &= AIP_STATUS_MASK_MASK;

    status |= (1 << (idxInt+AIP_STATUS_SHIFT_MASK));
     678:	84003fcc 	andi	r16,r16,255

int8_t aip_enableINT (void *aipBaseAddr, uint8_t idxInt)
{
    uint32_t status = 0;

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     67c:	00004b40 	call	4b4 <aip_aipRead>

    status &= AIP_STATUS_MASK_MASK;

    status |= (1 << (idxInt+AIP_STATUS_SHIFT_MASK));
     680:	d8800017 	ldw	r2,0(sp)
     684:	84000404 	addi	r16,r16,16
     688:	8c20983a 	sll	r16,r17,r16
     68c:	10803fec 	andhi	r2,r2,255

    aip_aipWrite((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     690:	880f883a 	mov	r7,r17

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);

    status &= AIP_STATUS_MASK_MASK;

    status |= (1 << (idxInt+AIP_STATUS_SHIFT_MASK));
     694:	1420b03a 	or	r16,r2,r16

    aip_aipWrite((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     698:	d80d883a 	mov	r6,sp
     69c:	900b883a 	mov	r5,r18
     6a0:	9809883a 	mov	r4,r19

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);

    status &= AIP_STATUS_MASK_MASK;

    status |= (1 << (idxInt+AIP_STATUS_SHIFT_MASK));
     6a4:	dc000015 	stw	r16,0(sp)

    aip_aipWrite((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     6a8:	00004dc0 	call	4dc <aip_aipWrite>

    return 0;
}
     6ac:	0005883a 	mov	r2,zero
     6b0:	dfc00517 	ldw	ra,20(sp)
     6b4:	dcc00417 	ldw	r19,16(sp)
     6b8:	dc800317 	ldw	r18,12(sp)
     6bc:	dc400217 	ldw	r17,8(sp)
     6c0:	dc000117 	ldw	r16,4(sp)
     6c4:	dec00604 	addi	sp,sp,24
     6c8:	f800283a 	ret

000006cc <aip_disableINT>:

int8_t aip_disableINT (void *aipBaseAddr, uint8_t idxInt)
{
     6cc:	defffa04 	addi	sp,sp,-24
     6d0:	dc800315 	stw	r18,12(sp)
     6d4:	dc400215 	stw	r17,8(sp)
     6d8:	dc000115 	stw	r16,4(sp)
    uint32_t status = 0;

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     6dc:	04400044 	movi	r17,1
     6e0:	04800784 	movi	r18,30

    return 0;
}

int8_t aip_disableINT (void *aipBaseAddr, uint8_t idxInt)
{
     6e4:	2821883a 	mov	r16,r5
    uint32_t status = 0;

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     6e8:	880f883a 	mov	r7,r17
     6ec:	d80d883a 	mov	r6,sp
     6f0:	900b883a 	mov	r5,r18

    status &= AIP_STATUS_MASK_MASK;

    status &= ~(uint32_t)(1 << (idxInt+AIP_STATUS_SHIFT_MASK));
     6f4:	84003fcc 	andi	r16,r16,255

    return 0;
}

int8_t aip_disableINT (void *aipBaseAddr, uint8_t idxInt)
{
     6f8:	dfc00515 	stw	ra,20(sp)
     6fc:	dcc00415 	stw	r19,16(sp)
    uint32_t status = 0;
     700:	d8000015 	stw	zero,0(sp)

    return 0;
}

int8_t aip_disableINT (void *aipBaseAddr, uint8_t idxInt)
{
     704:	2027883a 	mov	r19,r4

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);

    status &= AIP_STATUS_MASK_MASK;

    status &= ~(uint32_t)(1 << (idxInt+AIP_STATUS_SHIFT_MASK));
     708:	84000404 	addi	r16,r16,16

int8_t aip_disableINT (void *aipBaseAddr, uint8_t idxInt)
{
    uint32_t status = 0;

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     70c:	00004b40 	call	4b4 <aip_aipRead>

    status &= AIP_STATUS_MASK_MASK;

    status &= ~(uint32_t)(1 << (idxInt+AIP_STATUS_SHIFT_MASK));
     710:	d8800017 	ldw	r2,0(sp)
     714:	8c20983a 	sll	r16,r17,r16

    aip_aipWrite((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     718:	880f883a 	mov	r7,r17

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);

    status &= AIP_STATUS_MASK_MASK;

    status &= ~(uint32_t)(1 << (idxInt+AIP_STATUS_SHIFT_MASK));
     71c:	10803fec 	andhi	r2,r2,255
     720:	0420303a 	nor	r16,zero,r16
     724:	80a0703a 	and	r16,r16,r2

    aip_aipWrite((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     728:	d80d883a 	mov	r6,sp
     72c:	900b883a 	mov	r5,r18
     730:	9809883a 	mov	r4,r19

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);

    status &= AIP_STATUS_MASK_MASK;

    status &= ~(uint32_t)(1 << (idxInt+AIP_STATUS_SHIFT_MASK));
     734:	dc000015 	stw	r16,0(sp)

    aip_aipWrite((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     738:	00004dc0 	call	4dc <aip_aipWrite>

    return 0;
}
     73c:	0005883a 	mov	r2,zero
     740:	dfc00517 	ldw	ra,20(sp)
     744:	dcc00417 	ldw	r19,16(sp)
     748:	dc800317 	ldw	r18,12(sp)
     74c:	dc400217 	ldw	r17,8(sp)
     750:	dc000117 	ldw	r16,4(sp)
     754:	dec00604 	addi	sp,sp,24
     758:	f800283a 	ret

0000075c <aip_clearINT>:
    aip_aipWrite((void *)aipBaseAddr, AIP_STATUS, &status, 1);

    return 0;
}*/
int8_t aip_clearINT (void *aipBaseAddr, uint8_t idxInt)
{
     75c:	defffe04 	addi	sp,sp,-8

    //aip_aipRead(aipBaseAddr, AIP_STATUS, &status, 1);

    //status = (status & (AIP_STATUS_MASK_NU | AIP_STATUS_MASK_MASK | AIP_STATUS_MASK_NOTIFICATION)) | (uint32_t)(1 << idxInt);

    status = ((0xffffffff));
     760:	00bfffc4 	movi	r2,-1

    aip_aipWrite(aipBaseAddr, AIP_STATUS, &status, 1);
     764:	01c00044 	movi	r7,1
     768:	d80d883a 	mov	r6,sp
     76c:	01400784 	movi	r5,30
    aip_aipWrite((void *)aipBaseAddr, AIP_STATUS, &status, 1);

    return 0;
}*/
int8_t aip_clearINT (void *aipBaseAddr, uint8_t idxInt)
{
     770:	dfc00115 	stw	ra,4(sp)

    //aip_aipRead(aipBaseAddr, AIP_STATUS, &status, 1);

    //status = (status & (AIP_STATUS_MASK_NU | AIP_STATUS_MASK_MASK | AIP_STATUS_MASK_NOTIFICATION)) | (uint32_t)(1 << idxInt);

    status = ((0xffffffff));
     774:	d8800015 	stw	r2,0(sp)

    aip_aipWrite(aipBaseAddr, AIP_STATUS, &status, 1);
     778:	00004dc0 	call	4dc <aip_aipWrite>

    return 0;
}
     77c:	0005883a 	mov	r2,zero
     780:	dfc00117 	ldw	ra,4(sp)
     784:	dec00204 	addi	sp,sp,8
     788:	f800283a 	ret

0000078c <aip_getINT>:
int8_t aip_getINT (void *aipBaseAddr, uint8_t* intVector)
{
     78c:	defffd04 	addi	sp,sp,-12
     790:	dc000115 	stw	r16,4(sp)
    uint32_t status = 0;

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     794:	01c00044 	movi	r7,1
    aip_aipWrite(aipBaseAddr, AIP_STATUS, &status, 1);

    return 0;
}
int8_t aip_getINT (void *aipBaseAddr, uint8_t* intVector)
{
     798:	2821883a 	mov	r16,r5
    uint32_t status = 0;

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     79c:	d80d883a 	mov	r6,sp
     7a0:	01400784 	movi	r5,30
    aip_aipWrite(aipBaseAddr, AIP_STATUS, &status, 1);

    return 0;
}
int8_t aip_getINT (void *aipBaseAddr, uint8_t* intVector)
{
     7a4:	dfc00215 	stw	ra,8(sp)
    uint32_t status = 0;
     7a8:	d8000015 	stw	zero,0(sp)

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     7ac:	00004b40 	call	4b4 <aip_aipRead>

    *intVector = (uint8_t)(status & AIP_STATUS_MASK_INT);
     7b0:	d8800017 	ldw	r2,0(sp)
     7b4:	80800005 	stb	r2,0(r16)

    return 0;
}
     7b8:	0005883a 	mov	r2,zero
     7bc:	dfc00217 	ldw	ra,8(sp)
     7c0:	dc000117 	ldw	r16,4(sp)
     7c4:	dec00304 	addi	sp,sp,12
     7c8:	f800283a 	ret

000007cc <aip_getNotifications>:

int8_t aip_getNotifications(void *aipBaseAddr, uint8_t* notificationsVector)
{
     7cc:	defffd04 	addi	sp,sp,-12
     7d0:	dc000115 	stw	r16,4(sp)
    uint32_t status = 0;

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     7d4:	01c00044 	movi	r7,1

    return 0;
}

int8_t aip_getNotifications(void *aipBaseAddr, uint8_t* notificationsVector)
{
     7d8:	2821883a 	mov	r16,r5
    uint32_t status = 0;

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     7dc:	d80d883a 	mov	r6,sp
     7e0:	01400784 	movi	r5,30

    return 0;
}

int8_t aip_getNotifications(void *aipBaseAddr, uint8_t* notificationsVector)
{
     7e4:	dfc00215 	stw	ra,8(sp)
    uint32_t status = 0;
     7e8:	d8000015 	stw	zero,0(sp)

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     7ec:	00004b40 	call	4b4 <aip_aipRead>

    *notificationsVector = (uint8_t)((status & AIP_STATUS_MASK_NOTIFICATION) >> AIP_STATUS_SHIFT_NOTIFICATION);

    return 0;
}
     7f0:	0005883a 	mov	r2,zero
{
    uint32_t status = 0;

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);

    *notificationsVector = (uint8_t)((status & AIP_STATUS_MASK_NOTIFICATION) >> AIP_STATUS_SHIFT_NOTIFICATION);
     7f4:	80000005 	stb	zero,0(r16)

    return 0;
}
     7f8:	dfc00217 	ldw	ra,8(sp)
     7fc:	dc000117 	ldw	r16,4(sp)
     800:	dec00304 	addi	sp,sp,12
     804:	f800283a 	ret

00000808 <int_isr>:
        (void *) INT_IP_S0_BASE,
        0x00);

}

void int_isr(void * context) {
     808:	defffa04 	addi	sp,sp,-24
     80c:	dcc00315 	stw	r19,12(sp)
    alt_u32 base = (alt_u32)context;

    alt_u32 edge_status = IORD_ALTERA_AVALON_PIO_EDGE_CAP(base);
     810:	24c00304 	addi	r19,r4,12
        (void *) INT_IP_S0_BASE,
        0x00);

}

void int_isr(void * context) {
     814:	dfc00515 	stw	ra,20(sp)
     818:	dd000415 	stw	r20,16(sp)
     81c:	dc800215 	stw	r18,8(sp)
     820:	dc400115 	stw	r17,4(sp)
     824:	dc000015 	stw	r16,0(sp)
    alt_u32 base = (alt_u32)context;

    alt_u32 edge_status = IORD_ALTERA_AVALON_PIO_EDGE_CAP(base);
     828:	9c800037 	ldwio	r18,0(r19)

    if(edge_status) {
     82c:	90001126 	beq	r18,zero,874 <int_isr+0x6c>
        start_state = 1;

        printf("Start DETECTED!\n");
     830:	01000034 	movhi	r4,0
    alt_u32 base = (alt_u32)context;

    alt_u32 edge_status = IORD_ALTERA_AVALON_PIO_EDGE_CAP(base);

    if(edge_status) {
        start_state = 1;
     834:	04400044 	movi	r17,1

        printf("Start DETECTED!\n");
     838:	2109e104 	addi	r4,r4,10116
    alt_u32 base = (alt_u32)context;

    alt_u32 edge_status = IORD_ALTERA_AVALON_PIO_EDGE_CAP(base);

    if(edge_status) {
        start_state = 1;
     83c:	d4604415 	stw	r17,-32496(gp)

        printf("Start DETECTED!\n");

        for(int i = 0; i < 32; i++) {
     840:	0021883a 	mov	r16,zero
    alt_u32 edge_status = IORD_ALTERA_AVALON_PIO_EDGE_CAP(base);

    if(edge_status) {
        start_state = 1;

        printf("Start DETECTED!\n");
     844:	0001d3c0 	call	1d3c <puts>

        for(int i = 0; i < 32; i++) {
     848:	05000804 	movi	r20,32
            if(edge_status & (1 << i)) {
     84c:	8c04983a 	sll	r2,r17,r16
     850:	1484703a 	and	r2,r2,r18
     854:	10000426 	beq	r2,zero,868 <int_isr+0x60>
                printf("Line %d activated!\n", i);
     858:	01000034 	movhi	r4,0
     85c:	800b883a 	mov	r5,r16
     860:	2109e504 	addi	r4,r4,10132
     864:	0001c700 	call	1c70 <printf>
    if(edge_status) {
        start_state = 1;

        printf("Start DETECTED!\n");

        for(int i = 0; i < 32; i++) {
     868:	84000044 	addi	r16,r16,1
     86c:	853ff71e 	bne	r16,r20,84c <__alt_data_end+0xfffc204c>
            if(edge_status & (1 << i)) {
                printf("Line %d activated!\n", i);
            }
        }
        IOWR_ALTERA_AVALON_PIO_EDGE_CAP(base, edge_status);
     870:	9c800035 	stwio	r18,0(r19)
    }
}
     874:	dfc00517 	ldw	ra,20(sp)
     878:	dd000417 	ldw	r20,16(sp)
     87c:	dcc00317 	ldw	r19,12(sp)
     880:	dc800217 	ldw	r18,8(sp)
     884:	dc400117 	ldw	r17,4(sp)
     888:	dc000017 	ldw	r16,0(sp)
     88c:	dec00604 	addi	sp,sp,24
     890:	f800283a 	ret

00000894 <start_isr>:
void start_isr(void * context){

		volatile int * edge_ptr;
		edge_ptr = (volatile int *) context;

		*edge_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(START_UP_BASE);
     894:	00800134 	movhi	r2,4
     898:	10982b04 	addi	r2,r2,24748
     89c:	10c00037 	ldwio	r3,0(r2)
     8a0:	20c00015 	stw	r3,0(r4)

		IOWR_ALTERA_AVALON_PIO_EDGE_CAP(START_UP_BASE, 0);
     8a4:	10000035 	stwio	zero,0(r2)

#ifdef 	PRINTF
		printf("------------start DETECTED ------------ \n");
#endif
		start_state=1;
     8a8:	00800044 	movi	r2,1
     8ac:	d0a04415 	stw	r2,-32496(gp)
     8b0:	f800283a 	ret

000008b4 <int_setup>:

    return 0;
}


void int_setup(void) {
     8b4:	defffe04 	addi	sp,sp,-8
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(INT_IP_S0_BASE, 0x07);
     8b8:	00800134 	movhi	r2,4

    return 0;
}


void int_setup(void) {
     8bc:	dfc00115 	stw	ra,4(sp)
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(INT_IP_S0_BASE, 0x07);
     8c0:	10982604 	addi	r2,r2,24728
     8c4:	00c001c4 	movi	r3,7
     8c8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(INT_IP_S0_BASE, 0x00);
     8cc:	00800134 	movhi	r2,4
     8d0:	10982704 	addi	r2,r2,24732
     8d4:	10000035 	stwio	zero,0(r2)

    alt_ic_isr_register(
     8d8:	01c00134 	movhi	r7,4
     8dc:	01800034 	movhi	r6,0
     8e0:	d8000015 	stw	zero,0(sp)
     8e4:	39d82404 	addi	r7,r7,24720
     8e8:	31820204 	addi	r6,r6,2056
     8ec:	014000c4 	movi	r5,3
     8f0:	0009883a 	mov	r4,zero
     8f4:	00024300 	call	2430 <alt_ic_isr_register>
        INT_IP_S0_IRQ,
		int_isr,
        (void *) INT_IP_S0_BASE,
        0x00);

}
     8f8:	dfc00117 	ldw	ra,4(sp)
     8fc:	dec00204 	addi	sp,sp,8
     900:	f800283a 	ret

00000904 <start_setup>:
    }
}



void start_setup(void){
     904:	defffe04 	addi	sp,sp,-8

		IOWR_ALTERA_AVALON_PIO_IRQ_MASK(START_UP_BASE, 0x01);
     908:	00800134 	movhi	r2,4
    }
}



void start_setup(void){
     90c:	dfc00115 	stw	ra,4(sp)

		IOWR_ALTERA_AVALON_PIO_IRQ_MASK(START_UP_BASE, 0x01);
     910:	01400044 	movi	r5,1
     914:	10982a04 	addi	r2,r2,24744
     918:	11400035 	stwio	r5,0(r2)
		IOWR_ALTERA_AVALON_PIO_EDGE_CAP(START_UP_BASE, 0x00);
     91c:	00800134 	movhi	r2,4
     920:	10982b04 	addi	r2,r2,24748
     924:	10000035 	stwio	zero,0(r2)
		void * edge_val_ptr;
		edge_val_ptr = (void *) &edge_val;

		alt_ic_isr_register(
     928:	01800034 	movhi	r6,0
     92c:	d8000015 	stw	zero,0(sp)
     930:	d1e04504 	addi	r7,gp,-32492
     934:	31822504 	addi	r6,r6,2196
     938:	0009883a 	mov	r4,zero
     93c:	00024300 	call	2430 <alt_ic_isr_register>
				START_UP_IRQ_INTERRUPT_CONTROLLER_ID,
				START_UP_IRQ,
				start_isr,
				edge_val_ptr,
				0x00);
}
     940:	dfc00117 	ldw	ra,4(sp)
     944:	dec00204 	addi	sp,sp,8
     948:	f800283a 	ret

0000094c <main>:
void int_setup();
void start_setup();


int main(void)
{
     94c:	defffb04 	addi	sp,sp,-20
     950:	dfc00415 	stw	ra,16(sp)

	start_state = 0;
     954:	d0204415 	stw	zero,-32496(gp)

    uint32_t data[4];



    int_setup();
     958:	00008b40 	call	8b4 <int_setup>
    start_setup();
     95c:	00009040 	call	904 <start_setup>
        printf("Data[%i]: %x ", i, dataFlits[i]);
    }
    printf("\n");*/


    printf("Waiting to start\n");
     960:	01000034 	movhi	r4,0
     964:	2109ea04 	addi	r4,r4,10152
     968:	0001d3c0 	call	1d3c <puts>
	while(1){
		if(start_state != 0){
     96c:	d0a04417 	ldw	r2,-32496(gp)
     970:	103ffe26 	beq	r2,zero,96c <__alt_data_end+0xfffc216c>




				ID00004003_readData(AIP_UP_0_BASE, data, 4,0);
     974:	01000134 	movhi	r4,4
     978:	000f883a 	mov	r7,zero
     97c:	01800104 	movi	r6,4
     980:	d80b883a 	mov	r5,sp
     984:	21170004 	addi	r4,r4,23552
     988:	00004300 	call	430 <ID00004003_readData>

				printf("\n The opcode in memory[0]: %lx\n", data[0]);
     98c:	d9400017 	ldw	r5,0(sp)
     990:	01000034 	movhi	r4,0
     994:	2109ef04 	addi	r4,r4,10172
     998:	0001c700 	call	1c70 <printf>
				printf("\n The data in memory[1]: %lx\n", data[1]);
     99c:	d9400117 	ldw	r5,4(sp)
     9a0:	01000034 	movhi	r4,0
     9a4:	2109f704 	addi	r4,r4,10204
     9a8:	0001c700 	call	1c70 <printf>
				printf("\n The data in memory[2]: %lx\n", data[2]);
     9ac:	d9400217 	ldw	r5,8(sp)
     9b0:	01000034 	movhi	r4,0
     9b4:	2109ff04 	addi	r4,r4,10236
     9b8:	0001c700 	call	1c70 <printf>

				spidev_interface_transact(0xABCD1234, 0);
     9bc:	012af374 	movhi	r4,43981
     9c0:	000b883a 	mov	r5,zero
     9c4:	21048d04 	addi	r4,r4,4660
     9c8:	0000bb80 	call	bb8 <spidev_interface_transact>
				spidev_interface_transact(0xA1A10000, 1);
     9cc:	01400044 	movi	r5,1
     9d0:	01286874 	movhi	r4,41377
     9d4:	0000bb80 	call	bb8 <spidev_interface_transact>


		   start_state = 0;
     9d8:	d0204415 	stw	zero,-32496(gp)
     9dc:	003fe306 	br	96c <__alt_data_end+0xfffc216c>

000009e0 <spi_read>:

int32_t spi_read(uint8_t *data, uint8_t bytes_number) {
	uint32_t cnt = 0;

	/* Enable Slave Select mask. */
	IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(SPI_0_BASE, 1);
     9e0:	00800134 	movhi	r2,4
     9e4:	10981504 	addi	r2,r2,24660
     9e8:	00c00044 	movi	r3,1
     9ec:	10c00035 	stwio	r3,0(r2)
	/* Set the SSO bit (force chip select). */
	IOWR_ALTERA_AVALON_SPI_CONTROL(SPI_0_BASE,ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
     9f0:	00c00134 	movhi	r3,4
     9f4:	18d81304 	addi	r3,r3,24652
     9f8:	00810004 	movi	r2,1024
     9fc:	18800035 	stwio	r2,0(r3)
	/* Discard any stale data, in case previous communication was interrupted. */
	IORD_ALTERA_AVALON_SPI_RXDATA(SPI_0_BASE);
     a00:	01800134 	movhi	r6,4
     a04:	31981004 	addi	r6,r6,24640
     a08:	30800037 	ldwio	r2,0(r6)
     a0c:	02000134 	movhi	r8,4
		/* Wait until txdata register is empty. */
		while ((IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE)
				& ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0)
			;
		/* Write data to txdata register. */
		IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_0_BASE, data[cnt]);
     a10:	02800134 	movhi	r10,4
	/* Set the SSO bit (force chip select). */
	IOWR_ALTERA_AVALON_SPI_CONTROL(SPI_0_BASE,ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
	/* Discard any stale data, in case previous communication was interrupted. */
	IORD_ALTERA_AVALON_SPI_RXDATA(SPI_0_BASE);

	while (cnt < bytes_number) {
     a14:	2005883a 	mov	r2,r4
     a18:	29403fcc 	andi	r5,r5,255
     a1c:	42181204 	addi	r8,r8,24648
		/* Wait until txdata register is empty. */
		while ((IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE)
				& ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0)
			;
		/* Write data to txdata register. */
		IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_0_BASE, data[cnt]);
     a20:	52981104 	addi	r10,r10,24644
     a24:	02400134 	movhi	r9,4
	/* Set the SSO bit (force chip select). */
	IOWR_ALTERA_AVALON_SPI_CONTROL(SPI_0_BASE,ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
	/* Discard any stale data, in case previous communication was interrupted. */
	IORD_ALTERA_AVALON_SPI_RXDATA(SPI_0_BASE);

	while (cnt < bytes_number) {
     a28:	110fc83a 	sub	r7,r2,r4
     a2c:	4a581204 	addi	r9,r9,24648
     a30:	39400c2e 	bgeu	r7,r5,a64 <spi_read+0x84>
		/* Wait until txdata register is empty. */
		while ((IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE)
     a34:	41c00037 	ldwio	r7,0(r8)
     a38:	39c0100c 	andi	r7,r7,64
     a3c:	383ffd26 	beq	r7,zero,a34 <__alt_data_end+0xfffc2234>
				& ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0)
			;
		/* Write data to txdata register. */
		IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_0_BASE, data[cnt]);
     a40:	11c00003 	ldbu	r7,0(r2)
     a44:	51c00035 	stwio	r7,0(r10)
		/* Wait until rxdata register is full. */
		while ((IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE)
     a48:	41c00037 	ldwio	r7,0(r8)
     a4c:	39c0200c 	andi	r7,r7,128
     a50:	383ffd26 	beq	r7,zero,a48 <__alt_data_end+0xfffc2248>
				& ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0)
			;
		/* Read data from rxdata register. */
		data[cnt] = IORD_ALTERA_AVALON_SPI_RXDATA(SPI_0_BASE);
     a54:	31c00037 	ldwio	r7,0(r6)
     a58:	11c00005 	stb	r7,0(r2)
     a5c:	10800044 	addi	r2,r2,1
     a60:	003ff006 	br	a24 <__alt_data_end+0xfffc2224>
		cnt++;
	}

	/* Wait until the interface has finished transmitting. */
	while ((IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE)
     a64:	48800037 	ldwio	r2,0(r9)
     a68:	1080080c 	andi	r2,r2,32
     a6c:	103ffd26 	beq	r2,zero,a64 <__alt_data_end+0xfffc2264>
			& ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0)
		;
	/* Clear the SSO bit (release chip select). */
	IOWR_ALTERA_AVALON_SPI_CONTROL(SPI_0_BASE, 0);
     a70:	18000035 	stwio	zero,0(r3)

	return 0;
}
     a74:	0005883a 	mov	r2,zero
     a78:	f800283a 	ret

00000a7c <spi_write_then_read>:



int spi_write_then_read(struct spi_device *spi, const unsigned char *txbuf,
		unsigned n_tx, unsigned char *rxbuf, unsigned n_rx) {
     a7c:	defff704 	addi	sp,sp,-36
     a80:	dc400615 	stw	r17,24(sp)
     a84:	dc000515 	stw	r16,20(sp)
     a88:	2823883a 	mov	r17,r5
     a8c:	3021883a 	mov	r16,r6
	uint8_t buffer[20] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     a90:	000b883a 	mov	r5,zero
     a94:	01800504 	movi	r6,20
     a98:	d809883a 	mov	r4,sp
}



int spi_write_then_read(struct spi_device *spi, const unsigned char *txbuf,
		unsigned n_tx, unsigned char *rxbuf, unsigned n_rx) {
     a9c:	dc800715 	stw	r18,28(sp)
     aa0:	dfc00815 	stw	ra,32(sp)
     aa4:	3825883a 	mov	r18,r7
	uint8_t buffer[20] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     aa8:	0001c140 	call	1c14 <memset>
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	uint8_t byte;

	for (byte = 0; byte < n_tx; byte++) {
     aac:	0007883a 	mov	r3,zero
     ab0:	18803fcc 	andi	r2,r3,255
     ab4:	1400062e 	bgeu	r2,r16,ad0 <spi_write_then_read+0x54>
		buffer[byte] = (unsigned char) txbuf[byte];
     ab8:	d889883a 	add	r4,sp,r2
     abc:	8885883a 	add	r2,r17,r2
     ac0:	10800003 	ldbu	r2,0(r2)
		unsigned n_tx, unsigned char *rxbuf, unsigned n_rx) {
	uint8_t buffer[20] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	uint8_t byte;

	for (byte = 0; byte < n_tx; byte++) {
     ac4:	18c00044 	addi	r3,r3,1
		buffer[byte] = (unsigned char) txbuf[byte];
     ac8:	20800005 	stb	r2,0(r4)
     acc:	003ff806 	br	ab0 <__alt_data_end+0xfffc22b0>
	}
	spi_read(buffer, n_tx + n_rx);
     ad0:	d8800917 	ldw	r2,36(sp)
     ad4:	8023883a 	mov	r17,r16
     ad8:	d809883a 	mov	r4,sp
     adc:	80a1883a 	add	r16,r16,r2
     ae0:	81403fcc 	andi	r5,r16,255
     ae4:	00009e00 	call	9e0 <spi_read>
	for (byte = n_tx; byte < n_tx + n_rx; byte++) {
     ae8:	88803fcc 	andi	r2,r17,255
     aec:	1400062e 	bgeu	r2,r16,b08 <spi_write_then_read+0x8c>
	//	rxbuf[byte - n_tx] = buffer[byte];
		rxbuf[byte] = buffer[byte];
     af0:	9087883a 	add	r3,r18,r2
     af4:	d885883a 	add	r2,sp,r2
     af8:	10800003 	ldbu	r2,0(r2)

	for (byte = 0; byte < n_tx; byte++) {
		buffer[byte] = (unsigned char) txbuf[byte];
	}
	spi_read(buffer, n_tx + n_rx);
	for (byte = n_tx; byte < n_tx + n_rx; byte++) {
     afc:	8c400044 	addi	r17,r17,1
	//	rxbuf[byte - n_tx] = buffer[byte];
		rxbuf[byte] = buffer[byte];
     b00:	18800005 	stb	r2,0(r3)
     b04:	003ff806 	br	ae8 <__alt_data_end+0xfffc22e8>
	}
	

	return 0;
}
     b08:	0005883a 	mov	r2,zero
     b0c:	dfc00817 	ldw	ra,32(sp)
     b10:	dc800717 	ldw	r18,28(sp)
     b14:	dc400617 	ldw	r17,24(sp)
     b18:	dc000517 	ldw	r16,20(sp)
     b1c:	dec00904 	addi	sp,sp,36
     b20:	f800283a 	ret

00000b24 <spi_init>:
    spiConfig.ssSetup = 2;
    spiConfig.ssHold = 2;
    spiConfig.ssDisable = 2;
	spi_configure (SPI0_BASE, &spiConfig);*/
	return 0;
}
     b24:	0005883a 	mov	r2,zero
     b28:	f800283a 	ret

00000b2c <spi_read_API>:
/***************************************************************************//**
 * @brief spi_read_API
*******************************************************************************/
int32_t spi_read_API(uint8_t *data,
				 uint8_t bytes_number)
{
     b2c:	defffd04 	addi	sp,sp,-12
     b30:	dfc00215 	stw	ra,8(sp)
	{
		spi_select_device(SPI0_BASE, 0);
		*rx = spi_rxdat(SPI0_BASE);
		spi_deselect_device(SPI0_BASE, 0);
	}*/
    unsigned char tx[2] = {rx[0], rx[1]};
     b34:	20800003 	ldbu	r2,0(r4)
    spi_write_then_read(NULL, tx, 2, rx, bytes_number);
     b38:	29403fcc 	andi	r5,r5,255
     b3c:	200f883a 	mov	r7,r4
	{
		spi_select_device(SPI0_BASE, 0);
		*rx = spi_rxdat(SPI0_BASE);
		spi_deselect_device(SPI0_BASE, 0);
	}*/
    unsigned char tx[2] = {rx[0], rx[1]};
     b40:	d8800105 	stb	r2,4(sp)
     b44:	20800043 	ldbu	r2,1(r4)
    spi_write_then_read(NULL, tx, 2, rx, bytes_number);
     b48:	01800084 	movi	r6,2
     b4c:	d9400015 	stw	r5,0(sp)
     b50:	0009883a 	mov	r4,zero
     b54:	d9400104 	addi	r5,sp,4
	{
		spi_select_device(SPI0_BASE, 0);
		*rx = spi_rxdat(SPI0_BASE);
		spi_deselect_device(SPI0_BASE, 0);
	}*/
    unsigned char tx[2] = {rx[0], rx[1]};
     b58:	d8800145 	stb	r2,5(sp)
    spi_write_then_read(NULL, tx, 2, rx, bytes_number);
     b5c:	0000a7c0 	call	a7c <spi_write_then_read>

    printf("Hola, estas en la funcion de spi_read_API\n");
     b60:	01000034 	movhi	r4,0
     b64:	210a0704 	addi	r4,r4,10268
     b68:	0001d3c0 	call	1d3c <puts>
	return 0;
}
     b6c:	0005883a 	mov	r2,zero
     b70:	dfc00217 	ldw	ra,8(sp)
     b74:	dec00304 	addi	sp,sp,12
     b78:	f800283a 	ret

00000b7c <spi_write_API>:

int spi_write_API(const unsigned char *txbuf, unsigned n_tx)
{
     b7c:	defffe04 	addi	sp,sp,-8
		usleep(10);
		spi_select_device(SPI0_BASE, 0);
		spi_txbyte(SPI0_BASE, *tx);
		spi_deselect_device(SPI0_BASE, 0);
	}*/
    spi_write_then_read(NULL, tx, n_tx, NULL, 0);
     b80:	280d883a 	mov	r6,r5
     b84:	000f883a 	mov	r7,zero
     b88:	200b883a 	mov	r5,r4
     b8c:	d8000015 	stw	zero,0(sp)
     b90:	0009883a 	mov	r4,zero
    printf("Hola, estas en la funcion de spi_read_API\n");
	return 0;
}

int spi_write_API(const unsigned char *txbuf, unsigned n_tx)
{
     b94:	dfc00115 	stw	ra,4(sp)
		usleep(10);
		spi_select_device(SPI0_BASE, 0);
		spi_txbyte(SPI0_BASE, *tx);
		spi_deselect_device(SPI0_BASE, 0);
	}*/
    spi_write_then_read(NULL, tx, n_tx, NULL, 0);
     b98:	0000a7c0 	call	a7c <spi_write_then_read>

	printf("Hola, estas en la funcion de spi_write_API\n");
     b9c:	01000034 	movhi	r4,0
     ba0:	210a1204 	addi	r4,r4,10312
     ba4:	0001d3c0 	call	1d3c <puts>
	return 0;
}
     ba8:	0005883a 	mov	r2,zero
     bac:	dfc00117 	ldw	ra,4(sp)
     bb0:	dec00204 	addi	sp,sp,8
     bb4:	f800283a 	ret

00000bb8 <spidev_interface_transact>:
{
	for(uint32_t idx = 0;idx < (usleep * MICRO_DELAY_FACTOR); idx++) asm volatile("");
}

uint32_t spidev_interface_transact(const uint32_t data, const bool readback)
{
     bb8:	2006d63a 	srli	r3,r4,24
     bbc:	2004d43a 	srli	r2,r4,16
     bc0:	defffe04 	addi	sp,sp,-8
     bc4:	dfc00115 	stw	ra,4(sp)
	
	unsigned char txbuf[4];
    unsigned char rxbuf[4];
	if(readback) // read
     bc8:	29403fcc 	andi	r5,r5,255
	{	
		rxbuf[0] = (data >> 24) & 0xFF; 
     bcc:	d8c00005 	stb	r3,0(sp)
		rxbuf[1] = (data >> 16) & 0xFF;
     bd0:	d8800045 	stb	r2,1(sp)
uint32_t spidev_interface_transact(const uint32_t data, const bool readback)
{
	
	unsigned char txbuf[4];
    unsigned char rxbuf[4];
	if(readback) // read
     bd4:	28000e26 	beq	r5,zero,c10 <spidev_interface_transact+0x58>
	{	
		rxbuf[0] = (data >> 24) & 0xFF; 
		rxbuf[1] = (data >> 16) & 0xFF;
	
		spi_read_API(rxbuf,2);
     bd8:	01400084 	movi	r5,2
     bdc:	d809883a 	mov	r4,sp
     be0:	0000b2c0 	call	b2c <spi_read_API>
		return \
        (((uint32_t)rxbuf[0]) << 24) |
     be4:	d8800003 	ldbu	r2,0(sp)
     be8:	1006963a 	slli	r3,r2,24
     bec:	d8800043 	ldbu	r2,1(sp)
     bf0:	1004943a 	slli	r2,r2,16
     bf4:	1884b03a 	or	r2,r3,r2
     bf8:	d8c000c3 	ldbu	r3,3(sp)
     bfc:	10c4b03a 	or	r2,r2,r3
     c00:	d8c00083 	ldbu	r3,2(sp)
     c04:	1806923a 	slli	r3,r3,8
     c08:	10c4b03a 	or	r2,r2,r3
     c0c:	00000706 	br	c2c <spidev_interface_transact+0x74>
        (((uint32_t)rxbuf[3]) << 0);
	}else // write
	{
		txbuf[0] = (data >> 24);
		txbuf[1] = (data >> 16);
		txbuf[2] = (data >> 8);
     c10:	2004d23a 	srli	r2,r4,8
		txbuf[3] = (data >> 0);
     c14:	d90000c5 	stb	r4,3(sp)
		spi_write_API(txbuf,4);
     c18:	01400104 	movi	r5,4
     c1c:	d809883a 	mov	r4,sp
        (((uint32_t)rxbuf[3]) << 0);
	}else // write
	{
		txbuf[0] = (data >> 24);
		txbuf[1] = (data >> 16);
		txbuf[2] = (data >> 8);
     c20:	d8800085 	stb	r2,2(sp)
		txbuf[3] = (data >> 0);
		spi_write_API(txbuf,4);
     c24:	0000b7c0 	call	b7c <spi_write_API>
	}
	
    return 0;
     c28:	0005883a 	mov	r2,zero
}
     c2c:	dfc00117 	ldw	ra,4(sp)
     c30:	dec00204 	addi	sp,sp,8
     c34:	f800283a 	ret

00000c38 <gpio_init>:
*/
/***************************************************************************//**
 * @brief gpio_init
*******************************************************************************/
void gpio_init(uint32_t device_id)
{
     c38:	f800283a 	ret

00000c3c <gpio_direction>:

/***************************************************************************//**
 * @brief gpio_direction
*******************************************************************************/
void gpio_direction(uint8_t pin, uint8_t direction)
{/*
     c3c:	f800283a 	ret

00000c40 <gpio_is_valid>:

/***************************************************************************//**
 * @brief gpio_is_valid
*******************************************************************************/
bool gpio_is_valid(int number)
{
     c40:	20800810 	cmplti	r2,r4,32
	else
	{
		return false;
	}
	return 0;
}
     c44:	f800283a 	ret

00000c48 <gpio_data>:

/***************************************************************************//**
 * @brief gpio_data
*******************************************************************************/
void gpio_data(uint8_t pin, uint8_t* data)
{
     c48:	f800283a 	ret

00000c4c <gpio_set_value>:

/***************************************************************************//**
 * @brief gpio_set_value
*******************************************************************************/
void gpio_set_value(unsigned gpio, int value)
{/*
     c4c:	f800283a 	ret

00000c50 <udelay>:

/***************************************************************************//**
 * @brief udelay
*******************************************************************************/
void udelay(unsigned long usecs)
{
     c50:	deffff04 	addi	sp,sp,-4
	for(uint32_t idx = 0;idx < (usecs * MICRO_DELAY_FACTOR); idx++) asm volatile("");
     c54:	01400144 	movi	r5,5

/***************************************************************************//**
 * @brief udelay
*******************************************************************************/
void udelay(unsigned long usecs)
{
     c58:	dfc00015 	stw	ra,0(sp)
	for(uint32_t idx = 0;idx < (usecs * MICRO_DELAY_FACTOR); idx++) asm volatile("");
     c5c:	0001bec0 	call	1bec <__mulsi3>
     c60:	0007883a 	mov	r3,zero
     c64:	18800226 	beq	r3,r2,c70 <udelay+0x20>
     c68:	18c00044 	addi	r3,r3,1
     c6c:	003ffd06 	br	c64 <__alt_data_end+0xfffc2464>
}
     c70:	dfc00017 	ldw	ra,0(sp)
     c74:	dec00104 	addi	sp,sp,4
     c78:	f800283a 	ret

00000c7c <mdelay>:

/***************************************************************************//**
 * @brief mdelay
*******************************************************************************/
void mdelay(unsigned long msecs)
{
     c7c:	deffff04 	addi	sp,sp,-4
	for(uint32_t idx = 0;idx < (msecs * MILLI_DELAY_FACTOR) ;idx++) asm volatile("");
     c80:	0144e204 	movi	r5,5000

/***************************************************************************//**
 * @brief mdelay
*******************************************************************************/
void mdelay(unsigned long msecs)
{
     c84:	dfc00015 	stw	ra,0(sp)
	for(uint32_t idx = 0;idx < (msecs * MILLI_DELAY_FACTOR) ;idx++) asm volatile("");
     c88:	0001bec0 	call	1bec <__mulsi3>
     c8c:	0007883a 	mov	r3,zero
     c90:	18800226 	beq	r3,r2,c9c <mdelay+0x20>
     c94:	18c00044 	addi	r3,r3,1
     c98:	003ffd06 	br	c90 <__alt_data_end+0xfffc2490>
}
     c9c:	dfc00017 	ldw	ra,0(sp)
     ca0:	dec00104 	addi	sp,sp,4
     ca4:	f800283a 	ret

00000ca8 <msleep_interruptible>:
*******************************************************************************/
unsigned long msleep_interruptible(unsigned int msecs)
{

	return 0;
}
     ca8:	0005883a 	mov	r2,zero
     cac:	f800283a 	ret

00000cb0 <clk_prepare_enable>:
	if (clk) {
		// Unused variable - fix compiler warning
	}

	return 0;
}
     cb0:	0005883a 	mov	r2,zero
     cb4:	f800283a 	ret

00000cb8 <int_sqrt>:
*******************************************************************************/
uint32_t int_sqrt(uint32_t x)
{
	uint32_t b, m, y = 0;

	if (x <= 1)
     cb8:	00800044 	movi	r2,1
     cbc:	11000c2e 	bgeu	r2,r4,cf0 <int_sqrt+0x38>
     cc0:	01400404 	movi	r5,16
     cc4:	0005883a 	mov	r2,zero
     cc8:	00d00034 	movhi	r3,16384
		return x;

	m = 1UL << (BITS_PER_LONG - 2);
	while (m != 0) {
		b = y + m;
     ccc:	10cd883a 	add	r6,r2,r3
		y >>= 1;
     cd0:	1004d07a 	srli	r2,r2,1

		if (x >= b) {
     cd4:	21800236 	bltu	r4,r6,ce0 <int_sqrt+0x28>
			x -= b;
     cd8:	2189c83a 	sub	r4,r4,r6
			y += m;
     cdc:	10c5883a 	add	r2,r2,r3
     ce0:	297fffc4 	addi	r5,r5,-1
		}
		m >>= 2;
     ce4:	1806d0ba 	srli	r3,r3,2

	if (x <= 1)
		return x;

	m = 1UL << (BITS_PER_LONG - 2);
	while (m != 0) {
     ce8:	283ff81e 	bne	r5,zero,ccc <__alt_data_end+0xfffc24cc>
     cec:	f800283a 	ret
     cf0:	2005883a 	mov	r2,r4
		}
		m >>= 2;
	}

	return y;
}
     cf4:	f800283a 	ret

00000cf8 <ilog2>:
/***************************************************************************//**
 * @brief ilog2
*******************************************************************************/
int32_t ilog2(int32_t x)
{
	int32_t A = !(!(x >> 16));
     cf8:	2007d43a 	srai	r3,r4,16
	int32_t count = 0;
	int32_t x_copy = x;

	count = count + (A << 4);

	x_copy = (((~A + 1) & (x >> 16)) + (~(~A + 1) & x));
     cfc:	1804c03a 	cmpne	r2,r3,zero
     d00:	117fffc4 	addi	r5,r2,-1
     d04:	2908703a 	and	r4,r5,r4
     d08:	190b883a 	add	r5,r3,r4

	A = !(!(x_copy >> 8));
     d0c:	2811d23a 	srai	r8,r5,8
	count = count + (A << 3);
     d10:	100c913a 	slli	r6,r2,4

	count = count + (A << 4);

	x_copy = (((~A + 1) & (x >> 16)) + (~(~A + 1) & x));

	A = !(!(x_copy >> 8));
     d14:	400ec03a 	cmpne	r7,r8,zero
	count = count + (A << 3);
     d18:	380490fa 	slli	r2,r7,3
	x_copy = (((~A + 1) & (x_copy >> 8)) + (~(~A + 1) & x_copy));
     d1c:	393fffc4 	addi	r4,r7,-1
     d20:	01cfc83a 	sub	r7,zero,r7
     d24:	3a0e703a 	and	r7,r7,r8
     d28:	214a703a 	and	r5,r4,r5
     d2c:	3949883a 	add	r4,r7,r5

	A = !(!(x_copy >> 4));
     d30:	200fd13a 	srai	r7,r4,4
	count = count + (A << 4);

	x_copy = (((~A + 1) & (x >> 16)) + (~(~A + 1) & x));

	A = !(!(x_copy >> 8));
	count = count + (A << 3);
     d34:	308d883a 	add	r6,r6,r2
	x_copy = (((~A + 1) & (x_copy >> 8)) + (~(~A + 1) & x_copy));

	A = !(!(x_copy >> 4));
     d38:	380ac03a 	cmpne	r5,r7,zero
	count = count + (A << 2);
	x_copy = (((~A + 1) & (x_copy >> 4)) + (~(~A + 1) & x_copy));
     d3c:	28ffffc4 	addi	r3,r5,-1
	A = !(!(x_copy >> 8));
	count = count + (A << 3);
	x_copy = (((~A + 1) & (x_copy >> 8)) + (~(~A + 1) & x_copy));

	A = !(!(x_copy >> 4));
	count = count + (A << 2);
     d40:	2945883a 	add	r2,r5,r5
	x_copy = (((~A + 1) & (x_copy >> 4)) + (~(~A + 1) & x_copy));
     d44:	014bc83a 	sub	r5,zero,r5
     d48:	29ca703a 	and	r5,r5,r7
     d4c:	1908703a 	and	r4,r3,r4
     d50:	2907883a 	add	r3,r5,r4
	A = !(!(x_copy >> 8));
	count = count + (A << 3);
	x_copy = (((~A + 1) & (x_copy >> 8)) + (~(~A + 1) & x_copy));

	A = !(!(x_copy >> 4));
	count = count + (A << 2);
     d54:	1085883a 	add	r2,r2,r2
     d58:	1185883a 	add	r2,r2,r6
	x_copy = (((~A + 1) & (x_copy >> 4)) + (~(~A + 1) & x_copy));

	A = !(!(x_copy >> 2));
     d5c:	180dd0ba 	srai	r6,r3,2
     d60:	300ac03a 	cmpne	r5,r6,zero
	count = count + (A << 1);
     d64:	2949883a 	add	r4,r5,r5
     d68:	2085883a 	add	r2,r4,r2
	x_copy = (((~A + 1) & (x_copy >> 2)) + (~(~A + 1) & x_copy));
     d6c:	293fffc4 	addi	r4,r5,-1

	A = !(!(x_copy >> 1));
     d70:	014bc83a 	sub	r5,zero,r5
	count = count + (A << 2);
	x_copy = (((~A + 1) & (x_copy >> 4)) + (~(~A + 1) & x_copy));

	A = !(!(x_copy >> 2));
	count = count + (A << 1);
	x_copy = (((~A + 1) & (x_copy >> 2)) + (~(~A + 1) & x_copy));
     d74:	20c8703a 	and	r4,r4,r3

	A = !(!(x_copy >> 1));
     d78:	2986703a 	and	r3,r5,r6
     d7c:	1907883a 	add	r3,r3,r4
     d80:	1807d07a 	srai	r3,r3,1
	count = count + A;

	return count;
     d84:	1806c03a 	cmpne	r3,r3,zero
}
     d88:	1885883a 	add	r2,r3,r2
     d8c:	f800283a 	ret

00000d90 <do_div>:

/***************************************************************************//**
 * @brief do_div
*******************************************************************************/
uint64_t do_div(uint64_t* n, uint64_t base)
{
     d90:	defffa04 	addi	sp,sp,-24
     d94:	dc800215 	stw	r18,8(sp)
     d98:	dc400115 	stw	r17,4(sp)
	uint64_t mod = 0;

	mod = *n % base;
     d9c:	24800017 	ldw	r18,0(r4)
     da0:	24400117 	ldw	r17,4(r4)

/***************************************************************************//**
 * @brief do_div
*******************************************************************************/
uint64_t do_div(uint64_t* n, uint64_t base)
{
     da4:	dcc00315 	stw	r19,12(sp)
     da8:	3027883a 	mov	r19,r6
     dac:	dd000415 	stw	r20,16(sp)
     db0:	dc000015 	stw	r16,0(sp)
     db4:	2829883a 	mov	r20,r5
     db8:	2021883a 	mov	r16,r4
	uint64_t mod = 0;

	mod = *n % base;
	*n = *n / base;
     dbc:	280d883a 	mov	r6,r5
     dc0:	980f883a 	mov	r7,r19
     dc4:	9009883a 	mov	r4,r18
     dc8:	880b883a 	mov	r5,r17

/***************************************************************************//**
 * @brief do_div
*******************************************************************************/
uint64_t do_div(uint64_t* n, uint64_t base)
{
     dcc:	dfc00515 	stw	ra,20(sp)
	uint64_t mod = 0;

	mod = *n % base;
	*n = *n / base;
     dd0:	0000e780 	call	e78 <__udivdi3>
     dd4:	80800015 	stw	r2,0(r16)
     dd8:	80c00115 	stw	r3,4(r16)

	return mod;
     ddc:	a00d883a 	mov	r6,r20
     de0:	980f883a 	mov	r7,r19
     de4:	9009883a 	mov	r4,r18
     de8:	880b883a 	mov	r5,r17
     dec:	00014740 	call	1474 <__umoddi3>
}
     df0:	dfc00517 	ldw	ra,20(sp)
     df4:	dd000417 	ldw	r20,16(sp)
     df8:	dcc00317 	ldw	r19,12(sp)
     dfc:	dc800217 	ldw	r18,8(sp)
     e00:	dc400117 	ldw	r17,4(sp)
     e04:	dc000017 	ldw	r16,0(sp)
     e08:	dec00604 	addi	sp,sp,24
     e0c:	f800283a 	ret

00000e10 <find_first_bit>:
*******************************************************************************/
uint32_t find_first_bit(uint32_t word)
{
	int32_t num = 0;

	if ((word & 0xffff) == 0) {
     e10:	20bfffcc 	andi	r2,r4,65535
     e14:	1000031e 	bne	r2,zero,e24 <find_first_bit+0x14>
			num += 16;
			word >>= 16;
     e18:	2008d43a 	srli	r4,r4,16
uint32_t find_first_bit(uint32_t word)
{
	int32_t num = 0;

	if ((word & 0xffff) == 0) {
			num += 16;
     e1c:	00800404 	movi	r2,16
     e20:	00000106 	br	e28 <find_first_bit+0x18>
/***************************************************************************//**
 * @brief find_first_bit
*******************************************************************************/
uint32_t find_first_bit(uint32_t word)
{
	int32_t num = 0;
     e24:	0005883a 	mov	r2,zero

	if ((word & 0xffff) == 0) {
			num += 16;
			word >>= 16;
	}
	if ((word & 0xff) == 0) {
     e28:	20c03fcc 	andi	r3,r4,255
     e2c:	1800021e 	bne	r3,zero,e38 <find_first_bit+0x28>
			num += 8;
			word >>= 8;
     e30:	2008d23a 	srli	r4,r4,8
	if ((word & 0xffff) == 0) {
			num += 16;
			word >>= 16;
	}
	if ((word & 0xff) == 0) {
			num += 8;
     e34:	10800204 	addi	r2,r2,8
			word >>= 8;
	}
	if ((word & 0xf) == 0) {
     e38:	20c003cc 	andi	r3,r4,15
     e3c:	1800021e 	bne	r3,zero,e48 <find_first_bit+0x38>
			num += 4;
			word >>= 4;
     e40:	2008d13a 	srli	r4,r4,4
	if ((word & 0xff) == 0) {
			num += 8;
			word >>= 8;
	}
	if ((word & 0xf) == 0) {
			num += 4;
     e44:	10800104 	addi	r2,r2,4
			word >>= 4;
	}
	if ((word & 0x3) == 0) {
     e48:	20c000cc 	andi	r3,r4,3
     e4c:	1800021e 	bne	r3,zero,e58 <find_first_bit+0x48>
			num += 2;
			word >>= 2;
     e50:	2008d0ba 	srli	r4,r4,2
	if ((word & 0xf) == 0) {
			num += 4;
			word >>= 4;
	}
	if ((word & 0x3) == 0) {
			num += 2;
     e54:	10800084 	addi	r2,r2,2
			word >>= 2;
	}
	if ((word & 0x1) == 0)
     e58:	2100004c 	andi	r4,r4,1
     e5c:	2000011e 	bne	r4,zero,e64 <find_first_bit+0x54>
			num += 1;
     e60:	10800044 	addi	r2,r2,1
	return num;
}
     e64:	f800283a 	ret

00000e68 <ERR_PTR>:
 * @brief ERR_PTR
*******************************************************************************/
void * ERR_PTR(long error)
{
	return (void *) error;
}
     e68:	2005883a 	mov	r2,r4
     e6c:	f800283a 	ret

00000e70 <zmalloc>:
	//if (ptr)
	//	memset(ptr, 0, size);
	//mdelay(1);

	return NULL;
}
     e70:	0005883a 	mov	r2,zero
     e74:	f800283a 	ret

00000e78 <__udivdi3>:
     e78:	defff404 	addi	sp,sp,-48
     e7c:	dcc00515 	stw	r19,20(sp)
     e80:	dc000215 	stw	r16,8(sp)
     e84:	dfc00b15 	stw	ra,44(sp)
     e88:	df000a15 	stw	fp,40(sp)
     e8c:	ddc00915 	stw	r23,36(sp)
     e90:	dd800815 	stw	r22,32(sp)
     e94:	dd400715 	stw	r21,28(sp)
     e98:	dd000615 	stw	r20,24(sp)
     e9c:	dc800415 	stw	r18,16(sp)
     ea0:	dc400315 	stw	r17,12(sp)
     ea4:	2027883a 	mov	r19,r4
     ea8:	2821883a 	mov	r16,r5
     eac:	3800461e 	bne	r7,zero,fc8 <__udivdi3+0x150>
     eb0:	3023883a 	mov	r17,r6
     eb4:	2025883a 	mov	r18,r4
     eb8:	2980572e 	bgeu	r5,r6,1018 <__udivdi3+0x1a0>
     ebc:	00bfffd4 	movui	r2,65535
     ec0:	282d883a 	mov	r22,r5
     ec4:	1180b236 	bltu	r2,r6,1190 <__udivdi3+0x318>
     ec8:	00803fc4 	movi	r2,255
     ecc:	1185803a 	cmpltu	r2,r2,r6
     ed0:	100490fa 	slli	r2,r2,3
     ed4:	3086d83a 	srl	r3,r6,r2
     ed8:	01000034 	movhi	r4,0
     edc:	210a1cc4 	addi	r4,r4,10355
     ee0:	20c7883a 	add	r3,r4,r3
     ee4:	18c00003 	ldbu	r3,0(r3)
     ee8:	1885883a 	add	r2,r3,r2
     eec:	00c00804 	movi	r3,32
     ef0:	1887c83a 	sub	r3,r3,r2
     ef4:	18000526 	beq	r3,zero,f0c <__udivdi3+0x94>
     ef8:	80e0983a 	sll	r16,r16,r3
     efc:	9884d83a 	srl	r2,r19,r2
     f00:	30e2983a 	sll	r17,r6,r3
     f04:	98e4983a 	sll	r18,r19,r3
     f08:	142cb03a 	or	r22,r2,r16
     f0c:	882ad43a 	srli	r21,r17,16
     f10:	b009883a 	mov	r4,r22
     f14:	8d3fffcc 	andi	r20,r17,65535
     f18:	a80b883a 	mov	r5,r21
     f1c:	0001b940 	call	1b94 <__umodsi3>
     f20:	b009883a 	mov	r4,r22
     f24:	a80b883a 	mov	r5,r21
     f28:	1027883a 	mov	r19,r2
     f2c:	0001b300 	call	1b30 <__udivsi3>
     f30:	100b883a 	mov	r5,r2
     f34:	a009883a 	mov	r4,r20
     f38:	102d883a 	mov	r22,r2
     f3c:	0001bec0 	call	1bec <__mulsi3>
     f40:	9826943a 	slli	r19,r19,16
     f44:	9006d43a 	srli	r3,r18,16
     f48:	1cc6b03a 	or	r3,r3,r19
     f4c:	1880052e 	bgeu	r3,r2,f64 <__udivdi3+0xec>
     f50:	1c47883a 	add	r3,r3,r17
     f54:	b13fffc4 	addi	r4,r22,-1
     f58:	1c400136 	bltu	r3,r17,f60 <__udivdi3+0xe8>
     f5c:	18814236 	bltu	r3,r2,1468 <__udivdi3+0x5f0>
     f60:	202d883a 	mov	r22,r4
     f64:	18a1c83a 	sub	r16,r3,r2
     f68:	8009883a 	mov	r4,r16
     f6c:	a80b883a 	mov	r5,r21
     f70:	0001b940 	call	1b94 <__umodsi3>
     f74:	1027883a 	mov	r19,r2
     f78:	8009883a 	mov	r4,r16
     f7c:	a80b883a 	mov	r5,r21
     f80:	9826943a 	slli	r19,r19,16
     f84:	0001b300 	call	1b30 <__udivsi3>
     f88:	100b883a 	mov	r5,r2
     f8c:	a009883a 	mov	r4,r20
     f90:	94bfffcc 	andi	r18,r18,65535
     f94:	1021883a 	mov	r16,r2
     f98:	94e4b03a 	or	r18,r18,r19
     f9c:	0001bec0 	call	1bec <__mulsi3>
     fa0:	9080052e 	bgeu	r18,r2,fb8 <__udivdi3+0x140>
     fa4:	8ca5883a 	add	r18,r17,r18
     fa8:	80ffffc4 	addi	r3,r16,-1
     fac:	94410c36 	bltu	r18,r17,13e0 <__udivdi3+0x568>
     fb0:	90810b2e 	bgeu	r18,r2,13e0 <__udivdi3+0x568>
     fb4:	843fff84 	addi	r16,r16,-2
     fb8:	b004943a 	slli	r2,r22,16
     fbc:	0007883a 	mov	r3,zero
     fc0:	1404b03a 	or	r2,r2,r16
     fc4:	00005e06 	br	1140 <__udivdi3+0x2c8>
     fc8:	29c05b36 	bltu	r5,r7,1138 <__udivdi3+0x2c0>
     fcc:	00bfffd4 	movui	r2,65535
     fd0:	11c0672e 	bgeu	r2,r7,1170 <__udivdi3+0x2f8>
     fd4:	00804034 	movhi	r2,256
     fd8:	10bfffc4 	addi	r2,r2,-1
     fdc:	11c10a36 	bltu	r2,r7,1408 <__udivdi3+0x590>
     fe0:	00800404 	movi	r2,16
     fe4:	3886d83a 	srl	r3,r7,r2
     fe8:	01000034 	movhi	r4,0
     fec:	210a1cc4 	addi	r4,r4,10355
     ff0:	20c7883a 	add	r3,r4,r3
     ff4:	18c00003 	ldbu	r3,0(r3)
     ff8:	05c00804 	movi	r23,32
     ffc:	1885883a 	add	r2,r3,r2
    1000:	b8afc83a 	sub	r23,r23,r2
    1004:	b800671e 	bne	r23,zero,11a4 <__udivdi3+0x32c>
    1008:	3c010536 	bltu	r7,r16,1420 <__udivdi3+0x5a8>
    100c:	9985403a 	cmpgeu	r2,r19,r6
    1010:	0007883a 	mov	r3,zero
    1014:	00004a06 	br	1140 <__udivdi3+0x2c8>
    1018:	3000041e 	bne	r6,zero,102c <__udivdi3+0x1b4>
    101c:	000b883a 	mov	r5,zero
    1020:	01000044 	movi	r4,1
    1024:	0001b300 	call	1b30 <__udivsi3>
    1028:	1023883a 	mov	r17,r2
    102c:	00bfffd4 	movui	r2,65535
    1030:	1440532e 	bgeu	r2,r17,1180 <__udivdi3+0x308>
    1034:	00804034 	movhi	r2,256
    1038:	10bfffc4 	addi	r2,r2,-1
    103c:	1440f436 	bltu	r2,r17,1410 <__udivdi3+0x598>
    1040:	00800404 	movi	r2,16
    1044:	8886d83a 	srl	r3,r17,r2
    1048:	01000034 	movhi	r4,0
    104c:	210a1cc4 	addi	r4,r4,10355
    1050:	20c7883a 	add	r3,r4,r3
    1054:	18c00003 	ldbu	r3,0(r3)
    1058:	1885883a 	add	r2,r3,r2
    105c:	00c00804 	movi	r3,32
    1060:	1887c83a 	sub	r3,r3,r2
    1064:	1800a51e 	bne	r3,zero,12fc <__udivdi3+0x484>
    1068:	882ad43a 	srli	r21,r17,16
    106c:	8461c83a 	sub	r16,r16,r17
    1070:	8d3fffcc 	andi	r20,r17,65535
    1074:	00c00044 	movi	r3,1
    1078:	a80b883a 	mov	r5,r21
    107c:	8009883a 	mov	r4,r16
    1080:	d8c00115 	stw	r3,4(sp)
    1084:	0001b940 	call	1b94 <__umodsi3>
    1088:	a80b883a 	mov	r5,r21
    108c:	8009883a 	mov	r4,r16
    1090:	1027883a 	mov	r19,r2
    1094:	0001b300 	call	1b30 <__udivsi3>
    1098:	a00b883a 	mov	r5,r20
    109c:	1009883a 	mov	r4,r2
    10a0:	102d883a 	mov	r22,r2
    10a4:	0001bec0 	call	1bec <__mulsi3>
    10a8:	9826943a 	slli	r19,r19,16
    10ac:	900ed43a 	srli	r7,r18,16
    10b0:	d8c00117 	ldw	r3,4(sp)
    10b4:	3cceb03a 	or	r7,r7,r19
    10b8:	3880052e 	bgeu	r7,r2,10d0 <__udivdi3+0x258>
    10bc:	3c4f883a 	add	r7,r7,r17
    10c0:	b13fffc4 	addi	r4,r22,-1
    10c4:	3c400136 	bltu	r7,r17,10cc <__udivdi3+0x254>
    10c8:	3880e436 	bltu	r7,r2,145c <__udivdi3+0x5e4>
    10cc:	202d883a 	mov	r22,r4
    10d0:	38a1c83a 	sub	r16,r7,r2
    10d4:	8009883a 	mov	r4,r16
    10d8:	a80b883a 	mov	r5,r21
    10dc:	d8c00115 	stw	r3,4(sp)
    10e0:	0001b940 	call	1b94 <__umodsi3>
    10e4:	1027883a 	mov	r19,r2
    10e8:	8009883a 	mov	r4,r16
    10ec:	a80b883a 	mov	r5,r21
    10f0:	9826943a 	slli	r19,r19,16
    10f4:	0001b300 	call	1b30 <__udivsi3>
    10f8:	a00b883a 	mov	r5,r20
    10fc:	1009883a 	mov	r4,r2
    1100:	94bfffcc 	andi	r18,r18,65535
    1104:	1021883a 	mov	r16,r2
    1108:	94e4b03a 	or	r18,r18,r19
    110c:	0001bec0 	call	1bec <__mulsi3>
    1110:	d8c00117 	ldw	r3,4(sp)
    1114:	9080052e 	bgeu	r18,r2,112c <__udivdi3+0x2b4>
    1118:	8ca5883a 	add	r18,r17,r18
    111c:	813fffc4 	addi	r4,r16,-1
    1120:	9440ad36 	bltu	r18,r17,13d8 <__udivdi3+0x560>
    1124:	9080ac2e 	bgeu	r18,r2,13d8 <__udivdi3+0x560>
    1128:	843fff84 	addi	r16,r16,-2
    112c:	b004943a 	slli	r2,r22,16
    1130:	1404b03a 	or	r2,r2,r16
    1134:	00000206 	br	1140 <__udivdi3+0x2c8>
    1138:	0007883a 	mov	r3,zero
    113c:	0005883a 	mov	r2,zero
    1140:	dfc00b17 	ldw	ra,44(sp)
    1144:	df000a17 	ldw	fp,40(sp)
    1148:	ddc00917 	ldw	r23,36(sp)
    114c:	dd800817 	ldw	r22,32(sp)
    1150:	dd400717 	ldw	r21,28(sp)
    1154:	dd000617 	ldw	r20,24(sp)
    1158:	dcc00517 	ldw	r19,20(sp)
    115c:	dc800417 	ldw	r18,16(sp)
    1160:	dc400317 	ldw	r17,12(sp)
    1164:	dc000217 	ldw	r16,8(sp)
    1168:	dec00c04 	addi	sp,sp,48
    116c:	f800283a 	ret
    1170:	00803fc4 	movi	r2,255
    1174:	11c5803a 	cmpltu	r2,r2,r7
    1178:	100490fa 	slli	r2,r2,3
    117c:	003f9906 	br	fe4 <__alt_data_end+0xfffc27e4>
    1180:	00803fc4 	movi	r2,255
    1184:	1445803a 	cmpltu	r2,r2,r17
    1188:	100490fa 	slli	r2,r2,3
    118c:	003fad06 	br	1044 <__alt_data_end+0xfffc2844>
    1190:	00804034 	movhi	r2,256
    1194:	10bfffc4 	addi	r2,r2,-1
    1198:	11809f36 	bltu	r2,r6,1418 <__udivdi3+0x5a0>
    119c:	00800404 	movi	r2,16
    11a0:	003f4c06 	br	ed4 <__alt_data_end+0xfffc26d4>
    11a4:	3dce983a 	sll	r7,r7,r23
    11a8:	30b8d83a 	srl	fp,r6,r2
    11ac:	80a2d83a 	srl	r17,r16,r2
    11b0:	35cc983a 	sll	r6,r6,r23
    11b4:	3f38b03a 	or	fp,r7,fp
    11b8:	e024d43a 	srli	r18,fp,16
    11bc:	9884d83a 	srl	r2,r19,r2
    11c0:	85e0983a 	sll	r16,r16,r23
    11c4:	8809883a 	mov	r4,r17
    11c8:	900b883a 	mov	r5,r18
    11cc:	d9800015 	stw	r6,0(sp)
    11d0:	1420b03a 	or	r16,r2,r16
    11d4:	0001b940 	call	1b94 <__umodsi3>
    11d8:	900b883a 	mov	r5,r18
    11dc:	8809883a 	mov	r4,r17
    11e0:	1029883a 	mov	r20,r2
    11e4:	e5bfffcc 	andi	r22,fp,65535
    11e8:	0001b300 	call	1b30 <__udivsi3>
    11ec:	100b883a 	mov	r5,r2
    11f0:	b009883a 	mov	r4,r22
    11f4:	102b883a 	mov	r21,r2
    11f8:	0001bec0 	call	1bec <__mulsi3>
    11fc:	a028943a 	slli	r20,r20,16
    1200:	8006d43a 	srli	r3,r16,16
    1204:	1d06b03a 	or	r3,r3,r20
    1208:	1880042e 	bgeu	r3,r2,121c <__udivdi3+0x3a4>
    120c:	1f07883a 	add	r3,r3,fp
    1210:	a93fffc4 	addi	r4,r21,-1
    1214:	1f00892e 	bgeu	r3,fp,143c <__udivdi3+0x5c4>
    1218:	202b883a 	mov	r21,r4
    121c:	18a3c83a 	sub	r17,r3,r2
    1220:	8809883a 	mov	r4,r17
    1224:	900b883a 	mov	r5,r18
    1228:	0001b940 	call	1b94 <__umodsi3>
    122c:	1029883a 	mov	r20,r2
    1230:	8809883a 	mov	r4,r17
    1234:	900b883a 	mov	r5,r18
    1238:	a028943a 	slli	r20,r20,16
    123c:	0001b300 	call	1b30 <__udivsi3>
    1240:	100b883a 	mov	r5,r2
    1244:	b009883a 	mov	r4,r22
    1248:	843fffcc 	andi	r16,r16,65535
    124c:	1023883a 	mov	r17,r2
    1250:	8520b03a 	or	r16,r16,r20
    1254:	0001bec0 	call	1bec <__mulsi3>
    1258:	8080042e 	bgeu	r16,r2,126c <__udivdi3+0x3f4>
    125c:	8721883a 	add	r16,r16,fp
    1260:	88ffffc4 	addi	r3,r17,-1
    1264:	8700712e 	bgeu	r16,fp,142c <__udivdi3+0x5b4>
    1268:	1823883a 	mov	r17,r3
    126c:	a80e943a 	slli	r7,r21,16
    1270:	d8c00017 	ldw	r3,0(sp)
    1274:	80a1c83a 	sub	r16,r16,r2
    1278:	3c64b03a 	or	r18,r7,r17
    127c:	1d3fffcc 	andi	r20,r3,65535
    1280:	9022d43a 	srli	r17,r18,16
    1284:	95bfffcc 	andi	r22,r18,65535
    1288:	a00b883a 	mov	r5,r20
    128c:	b009883a 	mov	r4,r22
    1290:	182ad43a 	srli	r21,r3,16
    1294:	0001bec0 	call	1bec <__mulsi3>
    1298:	a00b883a 	mov	r5,r20
    129c:	8809883a 	mov	r4,r17
    12a0:	1039883a 	mov	fp,r2
    12a4:	0001bec0 	call	1bec <__mulsi3>
    12a8:	8809883a 	mov	r4,r17
    12ac:	a80b883a 	mov	r5,r21
    12b0:	1029883a 	mov	r20,r2
    12b4:	0001bec0 	call	1bec <__mulsi3>
    12b8:	a80b883a 	mov	r5,r21
    12bc:	b009883a 	mov	r4,r22
    12c0:	1023883a 	mov	r17,r2
    12c4:	0001bec0 	call	1bec <__mulsi3>
    12c8:	e006d43a 	srli	r3,fp,16
    12cc:	1505883a 	add	r2,r2,r20
    12d0:	1887883a 	add	r3,r3,r2
    12d4:	1d00022e 	bgeu	r3,r20,12e0 <__udivdi3+0x468>
    12d8:	00800074 	movhi	r2,1
    12dc:	88a3883a 	add	r17,r17,r2
    12e0:	1804d43a 	srli	r2,r3,16
    12e4:	1463883a 	add	r17,r2,r17
    12e8:	84404436 	bltu	r16,r17,13fc <__udivdi3+0x584>
    12ec:	84403e26 	beq	r16,r17,13e8 <__udivdi3+0x570>
    12f0:	9005883a 	mov	r2,r18
    12f4:	0007883a 	mov	r3,zero
    12f8:	003f9106 	br	1140 <__alt_data_end+0xfffc2940>
    12fc:	88e2983a 	sll	r17,r17,r3
    1300:	80aed83a 	srl	r23,r16,r2
    1304:	80e0983a 	sll	r16,r16,r3
    1308:	882ad43a 	srli	r21,r17,16
    130c:	9884d83a 	srl	r2,r19,r2
    1310:	b809883a 	mov	r4,r23
    1314:	a80b883a 	mov	r5,r21
    1318:	98e4983a 	sll	r18,r19,r3
    131c:	142cb03a 	or	r22,r2,r16
    1320:	0001b940 	call	1b94 <__umodsi3>
    1324:	b809883a 	mov	r4,r23
    1328:	a80b883a 	mov	r5,r21
    132c:	1027883a 	mov	r19,r2
    1330:	8d3fffcc 	andi	r20,r17,65535
    1334:	0001b300 	call	1b30 <__udivsi3>
    1338:	a009883a 	mov	r4,r20
    133c:	100b883a 	mov	r5,r2
    1340:	102f883a 	mov	r23,r2
    1344:	0001bec0 	call	1bec <__mulsi3>
    1348:	9826943a 	slli	r19,r19,16
    134c:	b008d43a 	srli	r4,r22,16
    1350:	24c8b03a 	or	r4,r4,r19
    1354:	2080062e 	bgeu	r4,r2,1370 <__udivdi3+0x4f8>
    1358:	2449883a 	add	r4,r4,r17
    135c:	b8ffffc4 	addi	r3,r23,-1
    1360:	24403c36 	bltu	r4,r17,1454 <__udivdi3+0x5dc>
    1364:	20803b2e 	bgeu	r4,r2,1454 <__udivdi3+0x5dc>
    1368:	bdffff84 	addi	r23,r23,-2
    136c:	2449883a 	add	r4,r4,r17
    1370:	20a1c83a 	sub	r16,r4,r2
    1374:	a80b883a 	mov	r5,r21
    1378:	8009883a 	mov	r4,r16
    137c:	0001b940 	call	1b94 <__umodsi3>
    1380:	a80b883a 	mov	r5,r21
    1384:	8009883a 	mov	r4,r16
    1388:	1027883a 	mov	r19,r2
    138c:	0001b300 	call	1b30 <__udivsi3>
    1390:	a009883a 	mov	r4,r20
    1394:	100b883a 	mov	r5,r2
    1398:	9826943a 	slli	r19,r19,16
    139c:	1039883a 	mov	fp,r2
    13a0:	0001bec0 	call	1bec <__mulsi3>
    13a4:	b13fffcc 	andi	r4,r22,65535
    13a8:	24c8b03a 	or	r4,r4,r19
    13ac:	2080062e 	bgeu	r4,r2,13c8 <__udivdi3+0x550>
    13b0:	2449883a 	add	r4,r4,r17
    13b4:	e0ffffc4 	addi	r3,fp,-1
    13b8:	24402436 	bltu	r4,r17,144c <__udivdi3+0x5d4>
    13bc:	2080232e 	bgeu	r4,r2,144c <__udivdi3+0x5d4>
    13c0:	e73fff84 	addi	fp,fp,-2
    13c4:	2449883a 	add	r4,r4,r17
    13c8:	b82e943a 	slli	r23,r23,16
    13cc:	20a1c83a 	sub	r16,r4,r2
    13d0:	bf06b03a 	or	r3,r23,fp
    13d4:	003f2806 	br	1078 <__alt_data_end+0xfffc2878>
    13d8:	2021883a 	mov	r16,r4
    13dc:	003f5306 	br	112c <__alt_data_end+0xfffc292c>
    13e0:	1821883a 	mov	r16,r3
    13e4:	003ef406 	br	fb8 <__alt_data_end+0xfffc27b8>
    13e8:	1806943a 	slli	r3,r3,16
    13ec:	9de6983a 	sll	r19,r19,r23
    13f0:	e73fffcc 	andi	fp,fp,65535
    13f4:	1f07883a 	add	r3,r3,fp
    13f8:	98ffbd2e 	bgeu	r19,r3,12f0 <__alt_data_end+0xfffc2af0>
    13fc:	90bfffc4 	addi	r2,r18,-1
    1400:	0007883a 	mov	r3,zero
    1404:	003f4e06 	br	1140 <__alt_data_end+0xfffc2940>
    1408:	00800604 	movi	r2,24
    140c:	003ef506 	br	fe4 <__alt_data_end+0xfffc27e4>
    1410:	00800604 	movi	r2,24
    1414:	003f0b06 	br	1044 <__alt_data_end+0xfffc2844>
    1418:	00800604 	movi	r2,24
    141c:	003ead06 	br	ed4 <__alt_data_end+0xfffc26d4>
    1420:	0007883a 	mov	r3,zero
    1424:	00800044 	movi	r2,1
    1428:	003f4506 	br	1140 <__alt_data_end+0xfffc2940>
    142c:	80bf8e2e 	bgeu	r16,r2,1268 <__alt_data_end+0xfffc2a68>
    1430:	8c7fff84 	addi	r17,r17,-2
    1434:	8721883a 	add	r16,r16,fp
    1438:	003f8c06 	br	126c <__alt_data_end+0xfffc2a6c>
    143c:	18bf762e 	bgeu	r3,r2,1218 <__alt_data_end+0xfffc2a18>
    1440:	ad7fff84 	addi	r21,r21,-2
    1444:	1f07883a 	add	r3,r3,fp
    1448:	003f7406 	br	121c <__alt_data_end+0xfffc2a1c>
    144c:	1839883a 	mov	fp,r3
    1450:	003fdd06 	br	13c8 <__alt_data_end+0xfffc2bc8>
    1454:	182f883a 	mov	r23,r3
    1458:	003fc506 	br	1370 <__alt_data_end+0xfffc2b70>
    145c:	b5bfff84 	addi	r22,r22,-2
    1460:	3c4f883a 	add	r7,r7,r17
    1464:	003f1a06 	br	10d0 <__alt_data_end+0xfffc28d0>
    1468:	b5bfff84 	addi	r22,r22,-2
    146c:	1c47883a 	add	r3,r3,r17
    1470:	003ebc06 	br	f64 <__alt_data_end+0xfffc2764>

00001474 <__umoddi3>:
    1474:	defff304 	addi	sp,sp,-52
    1478:	df000b15 	stw	fp,44(sp)
    147c:	dc400415 	stw	r17,16(sp)
    1480:	dc000315 	stw	r16,12(sp)
    1484:	dfc00c15 	stw	ra,48(sp)
    1488:	ddc00a15 	stw	r23,40(sp)
    148c:	dd800915 	stw	r22,36(sp)
    1490:	dd400815 	stw	r21,32(sp)
    1494:	dd000715 	stw	r20,28(sp)
    1498:	dcc00615 	stw	r19,24(sp)
    149c:	dc800515 	stw	r18,20(sp)
    14a0:	2021883a 	mov	r16,r4
    14a4:	2823883a 	mov	r17,r5
    14a8:	2839883a 	mov	fp,r5
    14ac:	3800401e 	bne	r7,zero,15b0 <__umoddi3+0x13c>
    14b0:	3027883a 	mov	r19,r6
    14b4:	2029883a 	mov	r20,r4
    14b8:	2980552e 	bgeu	r5,r6,1610 <__umoddi3+0x19c>
    14bc:	00bfffd4 	movui	r2,65535
    14c0:	1180a236 	bltu	r2,r6,174c <__umoddi3+0x2d8>
    14c4:	01003fc4 	movi	r4,255
    14c8:	2189803a 	cmpltu	r4,r4,r6
    14cc:	200890fa 	slli	r4,r4,3
    14d0:	3104d83a 	srl	r2,r6,r4
    14d4:	00c00034 	movhi	r3,0
    14d8:	18ca1cc4 	addi	r3,r3,10355
    14dc:	1885883a 	add	r2,r3,r2
    14e0:	10c00003 	ldbu	r3,0(r2)
    14e4:	00800804 	movi	r2,32
    14e8:	1909883a 	add	r4,r3,r4
    14ec:	1125c83a 	sub	r18,r2,r4
    14f0:	90000526 	beq	r18,zero,1508 <__umoddi3+0x94>
    14f4:	8ca2983a 	sll	r17,r17,r18
    14f8:	8108d83a 	srl	r4,r16,r4
    14fc:	34a6983a 	sll	r19,r6,r18
    1500:	84a8983a 	sll	r20,r16,r18
    1504:	2478b03a 	or	fp,r4,r17
    1508:	982cd43a 	srli	r22,r19,16
    150c:	e009883a 	mov	r4,fp
    1510:	9dffffcc 	andi	r23,r19,65535
    1514:	b00b883a 	mov	r5,r22
    1518:	0001b940 	call	1b94 <__umodsi3>
    151c:	b00b883a 	mov	r5,r22
    1520:	e009883a 	mov	r4,fp
    1524:	102b883a 	mov	r21,r2
    1528:	0001b300 	call	1b30 <__udivsi3>
    152c:	100b883a 	mov	r5,r2
    1530:	b809883a 	mov	r4,r23
    1534:	0001bec0 	call	1bec <__mulsi3>
    1538:	a82a943a 	slli	r21,r21,16
    153c:	a006d43a 	srli	r3,r20,16
    1540:	1d46b03a 	or	r3,r3,r21
    1544:	1880032e 	bgeu	r3,r2,1554 <__umoddi3+0xe0>
    1548:	1cc7883a 	add	r3,r3,r19
    154c:	1cc00136 	bltu	r3,r19,1554 <__umoddi3+0xe0>
    1550:	18813136 	bltu	r3,r2,1a18 <__umoddi3+0x5a4>
    1554:	18a1c83a 	sub	r16,r3,r2
    1558:	b00b883a 	mov	r5,r22
    155c:	8009883a 	mov	r4,r16
    1560:	0001b940 	call	1b94 <__umodsi3>
    1564:	b00b883a 	mov	r5,r22
    1568:	8009883a 	mov	r4,r16
    156c:	1023883a 	mov	r17,r2
    1570:	0001b300 	call	1b30 <__udivsi3>
    1574:	100b883a 	mov	r5,r2
    1578:	b809883a 	mov	r4,r23
    157c:	8822943a 	slli	r17,r17,16
    1580:	0001bec0 	call	1bec <__mulsi3>
    1584:	a0ffffcc 	andi	r3,r20,65535
    1588:	1c46b03a 	or	r3,r3,r17
    158c:	1880042e 	bgeu	r3,r2,15a0 <__umoddi3+0x12c>
    1590:	1cc7883a 	add	r3,r3,r19
    1594:	1cc00236 	bltu	r3,r19,15a0 <__umoddi3+0x12c>
    1598:	1880012e 	bgeu	r3,r2,15a0 <__umoddi3+0x12c>
    159c:	1cc7883a 	add	r3,r3,r19
    15a0:	1885c83a 	sub	r2,r3,r2
    15a4:	1484d83a 	srl	r2,r2,r18
    15a8:	0007883a 	mov	r3,zero
    15ac:	00005306 	br	16fc <__umoddi3+0x288>
    15b0:	29c05036 	bltu	r5,r7,16f4 <__umoddi3+0x280>
    15b4:	00bfffd4 	movui	r2,65535
    15b8:	11c05c2e 	bgeu	r2,r7,172c <__umoddi3+0x2b8>
    15bc:	00804034 	movhi	r2,256
    15c0:	10bfffc4 	addi	r2,r2,-1
    15c4:	11c10636 	bltu	r2,r7,19e0 <__umoddi3+0x56c>
    15c8:	01000404 	movi	r4,16
    15cc:	3904d83a 	srl	r2,r7,r4
    15d0:	00c00034 	movhi	r3,0
    15d4:	18ca1cc4 	addi	r3,r3,10355
    15d8:	1885883a 	add	r2,r3,r2
    15dc:	14c00003 	ldbu	r19,0(r2)
    15e0:	00c00804 	movi	r3,32
    15e4:	9927883a 	add	r19,r19,r4
    15e8:	1ce9c83a 	sub	r20,r3,r19
    15ec:	a0005c1e 	bne	r20,zero,1760 <__umoddi3+0x2ec>
    15f0:	3c400136 	bltu	r7,r17,15f8 <__umoddi3+0x184>
    15f4:	81810a36 	bltu	r16,r6,1a20 <__umoddi3+0x5ac>
    15f8:	8185c83a 	sub	r2,r16,r6
    15fc:	89e3c83a 	sub	r17,r17,r7
    1600:	8089803a 	cmpltu	r4,r16,r2
    1604:	8939c83a 	sub	fp,r17,r4
    1608:	e007883a 	mov	r3,fp
    160c:	00003b06 	br	16fc <__umoddi3+0x288>
    1610:	3000041e 	bne	r6,zero,1624 <__umoddi3+0x1b0>
    1614:	000b883a 	mov	r5,zero
    1618:	01000044 	movi	r4,1
    161c:	0001b300 	call	1b30 <__udivsi3>
    1620:	1027883a 	mov	r19,r2
    1624:	00bfffd4 	movui	r2,65535
    1628:	14c0442e 	bgeu	r2,r19,173c <__umoddi3+0x2c8>
    162c:	00804034 	movhi	r2,256
    1630:	10bfffc4 	addi	r2,r2,-1
    1634:	14c0ec36 	bltu	r2,r19,19e8 <__umoddi3+0x574>
    1638:	00800404 	movi	r2,16
    163c:	9886d83a 	srl	r3,r19,r2
    1640:	01000034 	movhi	r4,0
    1644:	210a1cc4 	addi	r4,r4,10355
    1648:	20c7883a 	add	r3,r4,r3
    164c:	18c00003 	ldbu	r3,0(r3)
    1650:	1887883a 	add	r3,r3,r2
    1654:	00800804 	movi	r2,32
    1658:	10e5c83a 	sub	r18,r2,r3
    165c:	9000ab1e 	bne	r18,zero,190c <__umoddi3+0x498>
    1660:	982cd43a 	srli	r22,r19,16
    1664:	8ce3c83a 	sub	r17,r17,r19
    1668:	9dffffcc 	andi	r23,r19,65535
    166c:	b00b883a 	mov	r5,r22
    1670:	8809883a 	mov	r4,r17
    1674:	0001b940 	call	1b94 <__umodsi3>
    1678:	b00b883a 	mov	r5,r22
    167c:	8809883a 	mov	r4,r17
    1680:	102b883a 	mov	r21,r2
    1684:	0001b300 	call	1b30 <__udivsi3>
    1688:	b80b883a 	mov	r5,r23
    168c:	1009883a 	mov	r4,r2
    1690:	0001bec0 	call	1bec <__mulsi3>
    1694:	a82a943a 	slli	r21,r21,16
    1698:	a006d43a 	srli	r3,r20,16
    169c:	1d46b03a 	or	r3,r3,r21
    16a0:	1880042e 	bgeu	r3,r2,16b4 <__umoddi3+0x240>
    16a4:	1cc7883a 	add	r3,r3,r19
    16a8:	1cc00236 	bltu	r3,r19,16b4 <__umoddi3+0x240>
    16ac:	1880012e 	bgeu	r3,r2,16b4 <__umoddi3+0x240>
    16b0:	1cc7883a 	add	r3,r3,r19
    16b4:	18a1c83a 	sub	r16,r3,r2
    16b8:	b00b883a 	mov	r5,r22
    16bc:	8009883a 	mov	r4,r16
    16c0:	0001b940 	call	1b94 <__umodsi3>
    16c4:	1023883a 	mov	r17,r2
    16c8:	b00b883a 	mov	r5,r22
    16cc:	8009883a 	mov	r4,r16
    16d0:	0001b300 	call	1b30 <__udivsi3>
    16d4:	8822943a 	slli	r17,r17,16
    16d8:	b80b883a 	mov	r5,r23
    16dc:	1009883a 	mov	r4,r2
    16e0:	0001bec0 	call	1bec <__mulsi3>
    16e4:	a53fffcc 	andi	r20,r20,65535
    16e8:	a446b03a 	or	r3,r20,r17
    16ec:	18bfac2e 	bgeu	r3,r2,15a0 <__alt_data_end+0xfffc2da0>
    16f0:	003fa706 	br	1590 <__alt_data_end+0xfffc2d90>
    16f4:	2005883a 	mov	r2,r4
    16f8:	2807883a 	mov	r3,r5
    16fc:	dfc00c17 	ldw	ra,48(sp)
    1700:	df000b17 	ldw	fp,44(sp)
    1704:	ddc00a17 	ldw	r23,40(sp)
    1708:	dd800917 	ldw	r22,36(sp)
    170c:	dd400817 	ldw	r21,32(sp)
    1710:	dd000717 	ldw	r20,28(sp)
    1714:	dcc00617 	ldw	r19,24(sp)
    1718:	dc800517 	ldw	r18,20(sp)
    171c:	dc400417 	ldw	r17,16(sp)
    1720:	dc000317 	ldw	r16,12(sp)
    1724:	dec00d04 	addi	sp,sp,52
    1728:	f800283a 	ret
    172c:	04c03fc4 	movi	r19,255
    1730:	99c9803a 	cmpltu	r4,r19,r7
    1734:	200890fa 	slli	r4,r4,3
    1738:	003fa406 	br	15cc <__alt_data_end+0xfffc2dcc>
    173c:	00803fc4 	movi	r2,255
    1740:	14c5803a 	cmpltu	r2,r2,r19
    1744:	100490fa 	slli	r2,r2,3
    1748:	003fbc06 	br	163c <__alt_data_end+0xfffc2e3c>
    174c:	00804034 	movhi	r2,256
    1750:	10bfffc4 	addi	r2,r2,-1
    1754:	1180a636 	bltu	r2,r6,19f0 <__umoddi3+0x57c>
    1758:	01000404 	movi	r4,16
    175c:	003f5c06 	br	14d0 <__alt_data_end+0xfffc2cd0>
    1760:	3d0e983a 	sll	r7,r7,r20
    1764:	34ead83a 	srl	r21,r6,r19
    1768:	8cc6d83a 	srl	r3,r17,r19
    176c:	8d10983a 	sll	r8,r17,r20
    1770:	3d6ab03a 	or	r21,r7,r21
    1774:	a82cd43a 	srli	r22,r21,16
    1778:	84e2d83a 	srl	r17,r16,r19
    177c:	1809883a 	mov	r4,r3
    1780:	b00b883a 	mov	r5,r22
    1784:	8a22b03a 	or	r17,r17,r8
    1788:	3524983a 	sll	r18,r6,r20
    178c:	dc400015 	stw	r17,0(sp)
    1790:	d8c00115 	stw	r3,4(sp)
    1794:	0001b940 	call	1b94 <__umodsi3>
    1798:	d8c00117 	ldw	r3,4(sp)
    179c:	b00b883a 	mov	r5,r22
    17a0:	1039883a 	mov	fp,r2
    17a4:	1809883a 	mov	r4,r3
    17a8:	0001b300 	call	1b30 <__udivsi3>
    17ac:	adffffcc 	andi	r23,r21,65535
    17b0:	100b883a 	mov	r5,r2
    17b4:	b809883a 	mov	r4,r23
    17b8:	1023883a 	mov	r17,r2
    17bc:	0001bec0 	call	1bec <__mulsi3>
    17c0:	d9400017 	ldw	r5,0(sp)
    17c4:	e008943a 	slli	r4,fp,16
    17c8:	8520983a 	sll	r16,r16,r20
    17cc:	2806d43a 	srli	r3,r5,16
    17d0:	1906b03a 	or	r3,r3,r4
    17d4:	1880042e 	bgeu	r3,r2,17e8 <__umoddi3+0x374>
    17d8:	1d47883a 	add	r3,r3,r21
    17dc:	893fffc4 	addi	r4,r17,-1
    17e0:	1d40892e 	bgeu	r3,r21,1a08 <__umoddi3+0x594>
    17e4:	2023883a 	mov	r17,r4
    17e8:	18b9c83a 	sub	fp,r3,r2
    17ec:	b00b883a 	mov	r5,r22
    17f0:	e009883a 	mov	r4,fp
    17f4:	0001b940 	call	1b94 <__umodsi3>
    17f8:	b00b883a 	mov	r5,r22
    17fc:	e009883a 	mov	r4,fp
    1800:	d8800215 	stw	r2,8(sp)
    1804:	0001b300 	call	1b30 <__udivsi3>
    1808:	100b883a 	mov	r5,r2
    180c:	b809883a 	mov	r4,r23
    1810:	102d883a 	mov	r22,r2
    1814:	0001bec0 	call	1bec <__mulsi3>
    1818:	d9800217 	ldw	r6,8(sp)
    181c:	d8c00017 	ldw	r3,0(sp)
    1820:	300c943a 	slli	r6,r6,16
    1824:	1a3fffcc 	andi	r8,r3,65535
    1828:	4190b03a 	or	r8,r8,r6
    182c:	4080042e 	bgeu	r8,r2,1840 <__umoddi3+0x3cc>
    1830:	4551883a 	add	r8,r8,r21
    1834:	b0ffffc4 	addi	r3,r22,-1
    1838:	45406f2e 	bgeu	r8,r21,19f8 <__umoddi3+0x584>
    183c:	182d883a 	mov	r22,r3
    1840:	880e943a 	slli	r7,r17,16
    1844:	9006d43a 	srli	r3,r18,16
    1848:	91bfffcc 	andi	r6,r18,65535
    184c:	3dacb03a 	or	r22,r7,r22
    1850:	b02ed43a 	srli	r23,r22,16
    1854:	b5bfffcc 	andi	r22,r22,65535
    1858:	300b883a 	mov	r5,r6
    185c:	b009883a 	mov	r4,r22
    1860:	40a3c83a 	sub	r17,r8,r2
    1864:	d8c00115 	stw	r3,4(sp)
    1868:	d9800215 	stw	r6,8(sp)
    186c:	0001bec0 	call	1bec <__mulsi3>
    1870:	d9800217 	ldw	r6,8(sp)
    1874:	b809883a 	mov	r4,r23
    1878:	1039883a 	mov	fp,r2
    187c:	300b883a 	mov	r5,r6
    1880:	0001bec0 	call	1bec <__mulsi3>
    1884:	d8c00117 	ldw	r3,4(sp)
    1888:	b809883a 	mov	r4,r23
    188c:	d8800215 	stw	r2,8(sp)
    1890:	180b883a 	mov	r5,r3
    1894:	0001bec0 	call	1bec <__mulsi3>
    1898:	d8c00117 	ldw	r3,4(sp)
    189c:	b009883a 	mov	r4,r22
    18a0:	102f883a 	mov	r23,r2
    18a4:	180b883a 	mov	r5,r3
    18a8:	0001bec0 	call	1bec <__mulsi3>
    18ac:	d9800217 	ldw	r6,8(sp)
    18b0:	e006d43a 	srli	r3,fp,16
    18b4:	1185883a 	add	r2,r2,r6
    18b8:	1885883a 	add	r2,r3,r2
    18bc:	1180022e 	bgeu	r2,r6,18c8 <__umoddi3+0x454>
    18c0:	00c00074 	movhi	r3,1
    18c4:	b8ef883a 	add	r23,r23,r3
    18c8:	1006d43a 	srli	r3,r2,16
    18cc:	1004943a 	slli	r2,r2,16
    18d0:	e73fffcc 	andi	fp,fp,65535
    18d4:	1dc7883a 	add	r3,r3,r23
    18d8:	1739883a 	add	fp,r2,fp
    18dc:	88c03a36 	bltu	r17,r3,19c8 <__umoddi3+0x554>
    18e0:	88c05126 	beq	r17,r3,1a28 <__umoddi3+0x5b4>
    18e4:	88c9c83a 	sub	r4,r17,r3
    18e8:	e00f883a 	mov	r7,fp
    18ec:	81cfc83a 	sub	r7,r16,r7
    18f0:	81c7803a 	cmpltu	r3,r16,r7
    18f4:	20c7c83a 	sub	r3,r4,r3
    18f8:	1cc4983a 	sll	r2,r3,r19
    18fc:	3d0ed83a 	srl	r7,r7,r20
    1900:	1d06d83a 	srl	r3,r3,r20
    1904:	11c4b03a 	or	r2,r2,r7
    1908:	003f7c06 	br	16fc <__alt_data_end+0xfffc2efc>
    190c:	9ca6983a 	sll	r19,r19,r18
    1910:	88f8d83a 	srl	fp,r17,r3
    1914:	80c4d83a 	srl	r2,r16,r3
    1918:	982cd43a 	srli	r22,r19,16
    191c:	8ca2983a 	sll	r17,r17,r18
    1920:	e009883a 	mov	r4,fp
    1924:	b00b883a 	mov	r5,r22
    1928:	146ab03a 	or	r21,r2,r17
    192c:	0001b940 	call	1b94 <__umodsi3>
    1930:	b00b883a 	mov	r5,r22
    1934:	e009883a 	mov	r4,fp
    1938:	1029883a 	mov	r20,r2
    193c:	9dffffcc 	andi	r23,r19,65535
    1940:	0001b300 	call	1b30 <__udivsi3>
    1944:	b809883a 	mov	r4,r23
    1948:	100b883a 	mov	r5,r2
    194c:	0001bec0 	call	1bec <__mulsi3>
    1950:	a008943a 	slli	r4,r20,16
    1954:	a806d43a 	srli	r3,r21,16
    1958:	84a8983a 	sll	r20,r16,r18
    195c:	1906b03a 	or	r3,r3,r4
    1960:	1880042e 	bgeu	r3,r2,1974 <__umoddi3+0x500>
    1964:	1cc7883a 	add	r3,r3,r19
    1968:	1cc00236 	bltu	r3,r19,1974 <__umoddi3+0x500>
    196c:	1880012e 	bgeu	r3,r2,1974 <__umoddi3+0x500>
    1970:	1cc7883a 	add	r3,r3,r19
    1974:	18a3c83a 	sub	r17,r3,r2
    1978:	b00b883a 	mov	r5,r22
    197c:	8809883a 	mov	r4,r17
    1980:	0001b940 	call	1b94 <__umodsi3>
    1984:	b00b883a 	mov	r5,r22
    1988:	8809883a 	mov	r4,r17
    198c:	1021883a 	mov	r16,r2
    1990:	0001b300 	call	1b30 <__udivsi3>
    1994:	100b883a 	mov	r5,r2
    1998:	b809883a 	mov	r4,r23
    199c:	8020943a 	slli	r16,r16,16
    19a0:	0001bec0 	call	1bec <__mulsi3>
    19a4:	a8ffffcc 	andi	r3,r21,65535
    19a8:	1c06b03a 	or	r3,r3,r16
    19ac:	1880042e 	bgeu	r3,r2,19c0 <__umoddi3+0x54c>
    19b0:	1cc7883a 	add	r3,r3,r19
    19b4:	1cc00236 	bltu	r3,r19,19c0 <__umoddi3+0x54c>
    19b8:	1880012e 	bgeu	r3,r2,19c0 <__umoddi3+0x54c>
    19bc:	1cc7883a 	add	r3,r3,r19
    19c0:	18a3c83a 	sub	r17,r3,r2
    19c4:	003f2906 	br	166c <__alt_data_end+0xfffc2e6c>
    19c8:	e48fc83a 	sub	r7,fp,r18
    19cc:	1d49c83a 	sub	r4,r3,r21
    19d0:	e1f9803a 	cmpltu	fp,fp,r7
    19d4:	2739c83a 	sub	fp,r4,fp
    19d8:	8f09c83a 	sub	r4,r17,fp
    19dc:	003fc306 	br	18ec <__alt_data_end+0xfffc30ec>
    19e0:	01000604 	movi	r4,24
    19e4:	003ef906 	br	15cc <__alt_data_end+0xfffc2dcc>
    19e8:	00800604 	movi	r2,24
    19ec:	003f1306 	br	163c <__alt_data_end+0xfffc2e3c>
    19f0:	01000604 	movi	r4,24
    19f4:	003eb606 	br	14d0 <__alt_data_end+0xfffc2cd0>
    19f8:	40bf902e 	bgeu	r8,r2,183c <__alt_data_end+0xfffc303c>
    19fc:	b5bfff84 	addi	r22,r22,-2
    1a00:	4551883a 	add	r8,r8,r21
    1a04:	003f8e06 	br	1840 <__alt_data_end+0xfffc3040>
    1a08:	18bf762e 	bgeu	r3,r2,17e4 <__alt_data_end+0xfffc2fe4>
    1a0c:	8c7fff84 	addi	r17,r17,-2
    1a10:	1d47883a 	add	r3,r3,r21
    1a14:	003f7406 	br	17e8 <__alt_data_end+0xfffc2fe8>
    1a18:	1cc7883a 	add	r3,r3,r19
    1a1c:	003ecd06 	br	1554 <__alt_data_end+0xfffc2d54>
    1a20:	8005883a 	mov	r2,r16
    1a24:	003ef806 	br	1608 <__alt_data_end+0xfffc2e08>
    1a28:	873fe736 	bltu	r16,fp,19c8 <__alt_data_end+0xfffc31c8>
    1a2c:	e00f883a 	mov	r7,fp
    1a30:	0009883a 	mov	r4,zero
    1a34:	003fad06 	br	18ec <__alt_data_end+0xfffc30ec>

00001a38 <__divsi3>:
    1a38:	20001b16 	blt	r4,zero,1aa8 <__divsi3+0x70>
    1a3c:	000f883a 	mov	r7,zero
    1a40:	28001616 	blt	r5,zero,1a9c <__divsi3+0x64>
    1a44:	200d883a 	mov	r6,r4
    1a48:	29001a2e 	bgeu	r5,r4,1ab4 <__divsi3+0x7c>
    1a4c:	00800804 	movi	r2,32
    1a50:	00c00044 	movi	r3,1
    1a54:	00000106 	br	1a5c <__divsi3+0x24>
    1a58:	10000d26 	beq	r2,zero,1a90 <__divsi3+0x58>
    1a5c:	294b883a 	add	r5,r5,r5
    1a60:	10bfffc4 	addi	r2,r2,-1
    1a64:	18c7883a 	add	r3,r3,r3
    1a68:	293ffb36 	bltu	r5,r4,1a58 <__alt_data_end+0xfffc3258>
    1a6c:	0005883a 	mov	r2,zero
    1a70:	18000726 	beq	r3,zero,1a90 <__divsi3+0x58>
    1a74:	0005883a 	mov	r2,zero
    1a78:	31400236 	bltu	r6,r5,1a84 <__divsi3+0x4c>
    1a7c:	314dc83a 	sub	r6,r6,r5
    1a80:	10c4b03a 	or	r2,r2,r3
    1a84:	1806d07a 	srli	r3,r3,1
    1a88:	280ad07a 	srli	r5,r5,1
    1a8c:	183ffa1e 	bne	r3,zero,1a78 <__alt_data_end+0xfffc3278>
    1a90:	38000126 	beq	r7,zero,1a98 <__divsi3+0x60>
    1a94:	0085c83a 	sub	r2,zero,r2
    1a98:	f800283a 	ret
    1a9c:	014bc83a 	sub	r5,zero,r5
    1aa0:	39c0005c 	xori	r7,r7,1
    1aa4:	003fe706 	br	1a44 <__alt_data_end+0xfffc3244>
    1aa8:	0109c83a 	sub	r4,zero,r4
    1aac:	01c00044 	movi	r7,1
    1ab0:	003fe306 	br	1a40 <__alt_data_end+0xfffc3240>
    1ab4:	00c00044 	movi	r3,1
    1ab8:	003fee06 	br	1a74 <__alt_data_end+0xfffc3274>

00001abc <__modsi3>:
    1abc:	20001716 	blt	r4,zero,1b1c <__modsi3+0x60>
    1ac0:	000f883a 	mov	r7,zero
    1ac4:	2005883a 	mov	r2,r4
    1ac8:	28001216 	blt	r5,zero,1b14 <__modsi3+0x58>
    1acc:	2900162e 	bgeu	r5,r4,1b28 <__modsi3+0x6c>
    1ad0:	01800804 	movi	r6,32
    1ad4:	00c00044 	movi	r3,1
    1ad8:	00000106 	br	1ae0 <__modsi3+0x24>
    1adc:	30000a26 	beq	r6,zero,1b08 <__modsi3+0x4c>
    1ae0:	294b883a 	add	r5,r5,r5
    1ae4:	31bfffc4 	addi	r6,r6,-1
    1ae8:	18c7883a 	add	r3,r3,r3
    1aec:	293ffb36 	bltu	r5,r4,1adc <__alt_data_end+0xfffc32dc>
    1af0:	18000526 	beq	r3,zero,1b08 <__modsi3+0x4c>
    1af4:	1806d07a 	srli	r3,r3,1
    1af8:	11400136 	bltu	r2,r5,1b00 <__modsi3+0x44>
    1afc:	1145c83a 	sub	r2,r2,r5
    1b00:	280ad07a 	srli	r5,r5,1
    1b04:	183ffb1e 	bne	r3,zero,1af4 <__alt_data_end+0xfffc32f4>
    1b08:	38000126 	beq	r7,zero,1b10 <__modsi3+0x54>
    1b0c:	0085c83a 	sub	r2,zero,r2
    1b10:	f800283a 	ret
    1b14:	014bc83a 	sub	r5,zero,r5
    1b18:	003fec06 	br	1acc <__alt_data_end+0xfffc32cc>
    1b1c:	0109c83a 	sub	r4,zero,r4
    1b20:	01c00044 	movi	r7,1
    1b24:	003fe706 	br	1ac4 <__alt_data_end+0xfffc32c4>
    1b28:	00c00044 	movi	r3,1
    1b2c:	003ff106 	br	1af4 <__alt_data_end+0xfffc32f4>

00001b30 <__udivsi3>:
    1b30:	200d883a 	mov	r6,r4
    1b34:	2900152e 	bgeu	r5,r4,1b8c <__udivsi3+0x5c>
    1b38:	28001416 	blt	r5,zero,1b8c <__udivsi3+0x5c>
    1b3c:	00800804 	movi	r2,32
    1b40:	00c00044 	movi	r3,1
    1b44:	00000206 	br	1b50 <__udivsi3+0x20>
    1b48:	10000e26 	beq	r2,zero,1b84 <__udivsi3+0x54>
    1b4c:	28000516 	blt	r5,zero,1b64 <__udivsi3+0x34>
    1b50:	294b883a 	add	r5,r5,r5
    1b54:	10bfffc4 	addi	r2,r2,-1
    1b58:	18c7883a 	add	r3,r3,r3
    1b5c:	293ffa36 	bltu	r5,r4,1b48 <__alt_data_end+0xfffc3348>
    1b60:	18000826 	beq	r3,zero,1b84 <__udivsi3+0x54>
    1b64:	0005883a 	mov	r2,zero
    1b68:	31400236 	bltu	r6,r5,1b74 <__udivsi3+0x44>
    1b6c:	314dc83a 	sub	r6,r6,r5
    1b70:	10c4b03a 	or	r2,r2,r3
    1b74:	1806d07a 	srli	r3,r3,1
    1b78:	280ad07a 	srli	r5,r5,1
    1b7c:	183ffa1e 	bne	r3,zero,1b68 <__alt_data_end+0xfffc3368>
    1b80:	f800283a 	ret
    1b84:	0005883a 	mov	r2,zero
    1b88:	f800283a 	ret
    1b8c:	00c00044 	movi	r3,1
    1b90:	003ff406 	br	1b64 <__alt_data_end+0xfffc3364>

00001b94 <__umodsi3>:
    1b94:	2005883a 	mov	r2,r4
    1b98:	2900122e 	bgeu	r5,r4,1be4 <__umodsi3+0x50>
    1b9c:	28001116 	blt	r5,zero,1be4 <__umodsi3+0x50>
    1ba0:	01800804 	movi	r6,32
    1ba4:	00c00044 	movi	r3,1
    1ba8:	00000206 	br	1bb4 <__umodsi3+0x20>
    1bac:	30000c26 	beq	r6,zero,1be0 <__umodsi3+0x4c>
    1bb0:	28000516 	blt	r5,zero,1bc8 <__umodsi3+0x34>
    1bb4:	294b883a 	add	r5,r5,r5
    1bb8:	31bfffc4 	addi	r6,r6,-1
    1bbc:	18c7883a 	add	r3,r3,r3
    1bc0:	293ffa36 	bltu	r5,r4,1bac <__alt_data_end+0xfffc33ac>
    1bc4:	18000626 	beq	r3,zero,1be0 <__umodsi3+0x4c>
    1bc8:	1806d07a 	srli	r3,r3,1
    1bcc:	11400136 	bltu	r2,r5,1bd4 <__umodsi3+0x40>
    1bd0:	1145c83a 	sub	r2,r2,r5
    1bd4:	280ad07a 	srli	r5,r5,1
    1bd8:	183ffb1e 	bne	r3,zero,1bc8 <__alt_data_end+0xfffc33c8>
    1bdc:	f800283a 	ret
    1be0:	f800283a 	ret
    1be4:	00c00044 	movi	r3,1
    1be8:	003ff706 	br	1bc8 <__alt_data_end+0xfffc33c8>

00001bec <__mulsi3>:
    1bec:	0005883a 	mov	r2,zero
    1bf0:	20000726 	beq	r4,zero,1c10 <__mulsi3+0x24>
    1bf4:	20c0004c 	andi	r3,r4,1
    1bf8:	2008d07a 	srli	r4,r4,1
    1bfc:	18000126 	beq	r3,zero,1c04 <__mulsi3+0x18>
    1c00:	1145883a 	add	r2,r2,r5
    1c04:	294b883a 	add	r5,r5,r5
    1c08:	203ffa1e 	bne	r4,zero,1bf4 <__alt_data_end+0xfffc33f4>
    1c0c:	f800283a 	ret
    1c10:	f800283a 	ret

00001c14 <memset>:
    1c14:	2005883a 	mov	r2,r4
    1c18:	2007883a 	mov	r3,r4
    1c1c:	218d883a 	add	r6,r4,r6
    1c20:	19800326 	beq	r3,r6,1c30 <memset+0x1c>
    1c24:	19400005 	stb	r5,0(r3)
    1c28:	18c00044 	addi	r3,r3,1
    1c2c:	003ffc06 	br	1c20 <__alt_data_end+0xfffc3420>
    1c30:	f800283a 	ret

00001c34 <_printf_r>:
    1c34:	defffd04 	addi	sp,sp,-12
    1c38:	dfc00015 	stw	ra,0(sp)
    1c3c:	d9800115 	stw	r6,4(sp)
    1c40:	d9c00215 	stw	r7,8(sp)
    1c44:	20c00217 	ldw	r3,8(r4)
    1c48:	01800034 	movhi	r6,0
    1c4c:	3188c804 	addi	r6,r6,8992
    1c50:	19800115 	stw	r6,4(r3)
    1c54:	280d883a 	mov	r6,r5
    1c58:	21400217 	ldw	r5,8(r4)
    1c5c:	d9c00104 	addi	r7,sp,4
    1c60:	0001dd80 	call	1dd8 <___vfprintf_internal_r>
    1c64:	dfc00017 	ldw	ra,0(sp)
    1c68:	dec00304 	addi	sp,sp,12
    1c6c:	f800283a 	ret

00001c70 <printf>:
    1c70:	defffc04 	addi	sp,sp,-16
    1c74:	dfc00015 	stw	ra,0(sp)
    1c78:	d9400115 	stw	r5,4(sp)
    1c7c:	d9800215 	stw	r6,8(sp)
    1c80:	d9c00315 	stw	r7,12(sp)
    1c84:	00800034 	movhi	r2,0
    1c88:	108a9604 	addi	r2,r2,10840
    1c8c:	10800017 	ldw	r2,0(r2)
    1c90:	01400034 	movhi	r5,0
    1c94:	2948c804 	addi	r5,r5,8992
    1c98:	10c00217 	ldw	r3,8(r2)
    1c9c:	d9800104 	addi	r6,sp,4
    1ca0:	19400115 	stw	r5,4(r3)
    1ca4:	200b883a 	mov	r5,r4
    1ca8:	11000217 	ldw	r4,8(r2)
    1cac:	00023040 	call	2304 <__vfprintf_internal>
    1cb0:	dfc00017 	ldw	ra,0(sp)
    1cb4:	dec00404 	addi	sp,sp,16
    1cb8:	f800283a 	ret

00001cbc <_puts_r>:
    1cbc:	defffd04 	addi	sp,sp,-12
    1cc0:	dc000015 	stw	r16,0(sp)
    1cc4:	2021883a 	mov	r16,r4
    1cc8:	2809883a 	mov	r4,r5
    1ccc:	dfc00215 	stw	ra,8(sp)
    1cd0:	dc400115 	stw	r17,4(sp)
    1cd4:	2823883a 	mov	r17,r5
    1cd8:	0001d500 	call	1d50 <strlen>
    1cdc:	81400217 	ldw	r5,8(r16)
    1ce0:	01000034 	movhi	r4,0
    1ce4:	2108c804 	addi	r4,r4,8992
    1ce8:	29000115 	stw	r4,4(r5)
    1cec:	100f883a 	mov	r7,r2
    1cf0:	880d883a 	mov	r6,r17
    1cf4:	8009883a 	mov	r4,r16
    1cf8:	00023200 	call	2320 <__sfvwrite_small_dev>
    1cfc:	00ffffc4 	movi	r3,-1
    1d00:	10c00926 	beq	r2,r3,1d28 <_puts_r+0x6c>
    1d04:	81400217 	ldw	r5,8(r16)
    1d08:	01800034 	movhi	r6,0
    1d0c:	01c00044 	movi	r7,1
    1d10:	28800117 	ldw	r2,4(r5)
    1d14:	3189fe04 	addi	r6,r6,10232
    1d18:	8009883a 	mov	r4,r16
    1d1c:	103ee83a 	callr	r2
    1d20:	10bfffe0 	cmpeqi	r2,r2,-1
    1d24:	0085c83a 	sub	r2,zero,r2
    1d28:	dfc00217 	ldw	ra,8(sp)
    1d2c:	dc400117 	ldw	r17,4(sp)
    1d30:	dc000017 	ldw	r16,0(sp)
    1d34:	dec00304 	addi	sp,sp,12
    1d38:	f800283a 	ret

00001d3c <puts>:
    1d3c:	00800034 	movhi	r2,0
    1d40:	108a9604 	addi	r2,r2,10840
    1d44:	200b883a 	mov	r5,r4
    1d48:	11000017 	ldw	r4,0(r2)
    1d4c:	0001cbc1 	jmpi	1cbc <_puts_r>

00001d50 <strlen>:
    1d50:	2005883a 	mov	r2,r4
    1d54:	10c00007 	ldb	r3,0(r2)
    1d58:	18000226 	beq	r3,zero,1d64 <strlen+0x14>
    1d5c:	10800044 	addi	r2,r2,1
    1d60:	003ffc06 	br	1d54 <__alt_data_end+0xfffc3554>
    1d64:	1105c83a 	sub	r2,r2,r4
    1d68:	f800283a 	ret

00001d6c <print_repeat>:
    1d6c:	defffb04 	addi	sp,sp,-20
    1d70:	dc800315 	stw	r18,12(sp)
    1d74:	dc400215 	stw	r17,8(sp)
    1d78:	dc000115 	stw	r16,4(sp)
    1d7c:	dfc00415 	stw	ra,16(sp)
    1d80:	2025883a 	mov	r18,r4
    1d84:	2823883a 	mov	r17,r5
    1d88:	d9800005 	stb	r6,0(sp)
    1d8c:	3821883a 	mov	r16,r7
    1d90:	04000a0e 	bge	zero,r16,1dbc <print_repeat+0x50>
    1d94:	88800117 	ldw	r2,4(r17)
    1d98:	01c00044 	movi	r7,1
    1d9c:	d80d883a 	mov	r6,sp
    1da0:	880b883a 	mov	r5,r17
    1da4:	9009883a 	mov	r4,r18
    1da8:	103ee83a 	callr	r2
    1dac:	843fffc4 	addi	r16,r16,-1
    1db0:	103ff726 	beq	r2,zero,1d90 <__alt_data_end+0xfffc3590>
    1db4:	00bfffc4 	movi	r2,-1
    1db8:	00000106 	br	1dc0 <print_repeat+0x54>
    1dbc:	0005883a 	mov	r2,zero
    1dc0:	dfc00417 	ldw	ra,16(sp)
    1dc4:	dc800317 	ldw	r18,12(sp)
    1dc8:	dc400217 	ldw	r17,8(sp)
    1dcc:	dc000117 	ldw	r16,4(sp)
    1dd0:	dec00504 	addi	sp,sp,20
    1dd4:	f800283a 	ret

00001dd8 <___vfprintf_internal_r>:
    1dd8:	deffe504 	addi	sp,sp,-108
    1ddc:	d8c00804 	addi	r3,sp,32
    1de0:	ddc01815 	stw	r23,96(sp)
    1de4:	dd801715 	stw	r22,92(sp)
    1de8:	dd401615 	stw	r21,88(sp)
    1dec:	dd001515 	stw	r20,84(sp)
    1df0:	dcc01415 	stw	r19,80(sp)
    1df4:	dc801315 	stw	r18,76(sp)
    1df8:	dc401215 	stw	r17,72(sp)
    1dfc:	dc001115 	stw	r16,68(sp)
    1e00:	dfc01a15 	stw	ra,104(sp)
    1e04:	df001915 	stw	fp,100(sp)
    1e08:	2029883a 	mov	r20,r4
    1e0c:	2823883a 	mov	r17,r5
    1e10:	382d883a 	mov	r22,r7
    1e14:	d9800f15 	stw	r6,60(sp)
    1e18:	0021883a 	mov	r16,zero
    1e1c:	d8000e15 	stw	zero,56(sp)
    1e20:	d8000a15 	stw	zero,40(sp)
    1e24:	002b883a 	mov	r21,zero
    1e28:	0027883a 	mov	r19,zero
    1e2c:	0025883a 	mov	r18,zero
    1e30:	d8000c15 	stw	zero,48(sp)
    1e34:	d8000b15 	stw	zero,44(sp)
    1e38:	002f883a 	mov	r23,zero
    1e3c:	d8c00915 	stw	r3,36(sp)
    1e40:	d8c00f17 	ldw	r3,60(sp)
    1e44:	19000003 	ldbu	r4,0(r3)
    1e48:	20803fcc 	andi	r2,r4,255
    1e4c:	1080201c 	xori	r2,r2,128
    1e50:	10bfe004 	addi	r2,r2,-128
    1e54:	10011e26 	beq	r2,zero,22d0 <___vfprintf_internal_r+0x4f8>
    1e58:	00c00044 	movi	r3,1
    1e5c:	b8c01426 	beq	r23,r3,1eb0 <___vfprintf_internal_r+0xd8>
    1e60:	1dc00216 	blt	r3,r23,1e6c <___vfprintf_internal_r+0x94>
    1e64:	b8000626 	beq	r23,zero,1e80 <___vfprintf_internal_r+0xa8>
    1e68:	00011506 	br	22c0 <___vfprintf_internal_r+0x4e8>
    1e6c:	01400084 	movi	r5,2
    1e70:	b9401d26 	beq	r23,r5,1ee8 <___vfprintf_internal_r+0x110>
    1e74:	014000c4 	movi	r5,3
    1e78:	b9402b26 	beq	r23,r5,1f28 <___vfprintf_internal_r+0x150>
    1e7c:	00011006 	br	22c0 <___vfprintf_internal_r+0x4e8>
    1e80:	01400944 	movi	r5,37
    1e84:	1140fc26 	beq	r2,r5,2278 <___vfprintf_internal_r+0x4a0>
    1e88:	88800117 	ldw	r2,4(r17)
    1e8c:	d9000005 	stb	r4,0(sp)
    1e90:	01c00044 	movi	r7,1
    1e94:	d80d883a 	mov	r6,sp
    1e98:	880b883a 	mov	r5,r17
    1e9c:	a009883a 	mov	r4,r20
    1ea0:	103ee83a 	callr	r2
    1ea4:	1000d81e 	bne	r2,zero,2208 <___vfprintf_internal_r+0x430>
    1ea8:	84000044 	addi	r16,r16,1
    1eac:	00010406 	br	22c0 <___vfprintf_internal_r+0x4e8>
    1eb0:	01400c04 	movi	r5,48
    1eb4:	1140fa26 	beq	r2,r5,22a0 <___vfprintf_internal_r+0x4c8>
    1eb8:	01400944 	movi	r5,37
    1ebc:	11400a1e 	bne	r2,r5,1ee8 <___vfprintf_internal_r+0x110>
    1ec0:	d8800005 	stb	r2,0(sp)
    1ec4:	88800117 	ldw	r2,4(r17)
    1ec8:	b80f883a 	mov	r7,r23
    1ecc:	d80d883a 	mov	r6,sp
    1ed0:	880b883a 	mov	r5,r17
    1ed4:	a009883a 	mov	r4,r20
    1ed8:	103ee83a 	callr	r2
    1edc:	1000ca1e 	bne	r2,zero,2208 <___vfprintf_internal_r+0x430>
    1ee0:	84000044 	addi	r16,r16,1
    1ee4:	0000f506 	br	22bc <___vfprintf_internal_r+0x4e4>
    1ee8:	25fff404 	addi	r23,r4,-48
    1eec:	bdc03fcc 	andi	r23,r23,255
    1ef0:	00c00244 	movi	r3,9
    1ef4:	1dc00936 	bltu	r3,r23,1f1c <___vfprintf_internal_r+0x144>
    1ef8:	00bfffc4 	movi	r2,-1
    1efc:	90800426 	beq	r18,r2,1f10 <___vfprintf_internal_r+0x138>
    1f00:	01400284 	movi	r5,10
    1f04:	9009883a 	mov	r4,r18
    1f08:	0001bec0 	call	1bec <__mulsi3>
    1f0c:	00000106 	br	1f14 <___vfprintf_internal_r+0x13c>
    1f10:	0005883a 	mov	r2,zero
    1f14:	b8a5883a 	add	r18,r23,r2
    1f18:	0000e206 	br	22a4 <___vfprintf_internal_r+0x4cc>
    1f1c:	01400b84 	movi	r5,46
    1f20:	1140e426 	beq	r2,r5,22b4 <___vfprintf_internal_r+0x4dc>
    1f24:	05c00084 	movi	r23,2
    1f28:	213ff404 	addi	r4,r4,-48
    1f2c:	27003fcc 	andi	fp,r4,255
    1f30:	00c00244 	movi	r3,9
    1f34:	1f000936 	bltu	r3,fp,1f5c <___vfprintf_internal_r+0x184>
    1f38:	00bfffc4 	movi	r2,-1
    1f3c:	98800426 	beq	r19,r2,1f50 <___vfprintf_internal_r+0x178>
    1f40:	01400284 	movi	r5,10
    1f44:	9809883a 	mov	r4,r19
    1f48:	0001bec0 	call	1bec <__mulsi3>
    1f4c:	00000106 	br	1f54 <___vfprintf_internal_r+0x17c>
    1f50:	0005883a 	mov	r2,zero
    1f54:	e0a7883a 	add	r19,fp,r2
    1f58:	0000d906 	br	22c0 <___vfprintf_internal_r+0x4e8>
    1f5c:	00c01b04 	movi	r3,108
    1f60:	10c0d226 	beq	r2,r3,22ac <___vfprintf_internal_r+0x4d4>
    1f64:	013fffc4 	movi	r4,-1
    1f68:	99000226 	beq	r19,r4,1f74 <___vfprintf_internal_r+0x19c>
    1f6c:	d8000b15 	stw	zero,44(sp)
    1f70:	00000106 	br	1f78 <___vfprintf_internal_r+0x1a0>
    1f74:	04c00044 	movi	r19,1
    1f78:	01001a44 	movi	r4,105
    1f7c:	11001626 	beq	r2,r4,1fd8 <___vfprintf_internal_r+0x200>
    1f80:	20800916 	blt	r4,r2,1fa8 <___vfprintf_internal_r+0x1d0>
    1f84:	010018c4 	movi	r4,99
    1f88:	11008826 	beq	r2,r4,21ac <___vfprintf_internal_r+0x3d4>
    1f8c:	01001904 	movi	r4,100
    1f90:	11001126 	beq	r2,r4,1fd8 <___vfprintf_internal_r+0x200>
    1f94:	01001604 	movi	r4,88
    1f98:	1100c81e 	bne	r2,r4,22bc <___vfprintf_internal_r+0x4e4>
    1f9c:	00c00044 	movi	r3,1
    1fa0:	d8c00e15 	stw	r3,56(sp)
    1fa4:	00001506 	br	1ffc <___vfprintf_internal_r+0x224>
    1fa8:	01001cc4 	movi	r4,115
    1fac:	11009826 	beq	r2,r4,2210 <___vfprintf_internal_r+0x438>
    1fb0:	20800416 	blt	r4,r2,1fc4 <___vfprintf_internal_r+0x1ec>
    1fb4:	01001bc4 	movi	r4,111
    1fb8:	1100c01e 	bne	r2,r4,22bc <___vfprintf_internal_r+0x4e4>
    1fbc:	05400204 	movi	r21,8
    1fc0:	00000f06 	br	2000 <___vfprintf_internal_r+0x228>
    1fc4:	01001d44 	movi	r4,117
    1fc8:	11000d26 	beq	r2,r4,2000 <___vfprintf_internal_r+0x228>
    1fcc:	01001e04 	movi	r4,120
    1fd0:	11000a26 	beq	r2,r4,1ffc <___vfprintf_internal_r+0x224>
    1fd4:	0000b906 	br	22bc <___vfprintf_internal_r+0x4e4>
    1fd8:	d8c00a17 	ldw	r3,40(sp)
    1fdc:	b7000104 	addi	fp,r22,4
    1fe0:	18000726 	beq	r3,zero,2000 <___vfprintf_internal_r+0x228>
    1fe4:	df000d15 	stw	fp,52(sp)
    1fe8:	b5c00017 	ldw	r23,0(r22)
    1fec:	b800080e 	bge	r23,zero,2010 <___vfprintf_internal_r+0x238>
    1ff0:	05efc83a 	sub	r23,zero,r23
    1ff4:	02400044 	movi	r9,1
    1ff8:	00000606 	br	2014 <___vfprintf_internal_r+0x23c>
    1ffc:	05400404 	movi	r21,16
    2000:	b0c00104 	addi	r3,r22,4
    2004:	d8c00d15 	stw	r3,52(sp)
    2008:	b5c00017 	ldw	r23,0(r22)
    200c:	d8000a15 	stw	zero,40(sp)
    2010:	0013883a 	mov	r9,zero
    2014:	d839883a 	mov	fp,sp
    2018:	b8001726 	beq	r23,zero,2078 <___vfprintf_internal_r+0x2a0>
    201c:	a80b883a 	mov	r5,r21
    2020:	b809883a 	mov	r4,r23
    2024:	da401015 	stw	r9,64(sp)
    2028:	0001b300 	call	1b30 <__udivsi3>
    202c:	a80b883a 	mov	r5,r21
    2030:	1009883a 	mov	r4,r2
    2034:	102d883a 	mov	r22,r2
    2038:	0001bec0 	call	1bec <__mulsi3>
    203c:	b885c83a 	sub	r2,r23,r2
    2040:	00c00244 	movi	r3,9
    2044:	da401017 	ldw	r9,64(sp)
    2048:	18800216 	blt	r3,r2,2054 <___vfprintf_internal_r+0x27c>
    204c:	10800c04 	addi	r2,r2,48
    2050:	00000506 	br	2068 <___vfprintf_internal_r+0x290>
    2054:	d8c00e17 	ldw	r3,56(sp)
    2058:	18000226 	beq	r3,zero,2064 <___vfprintf_internal_r+0x28c>
    205c:	10800dc4 	addi	r2,r2,55
    2060:	00000106 	br	2068 <___vfprintf_internal_r+0x290>
    2064:	108015c4 	addi	r2,r2,87
    2068:	e0800005 	stb	r2,0(fp)
    206c:	b02f883a 	mov	r23,r22
    2070:	e7000044 	addi	fp,fp,1
    2074:	003fe806 	br	2018 <__alt_data_end+0xfffc3818>
    2078:	e6efc83a 	sub	r23,fp,sp
    207c:	9dc5c83a 	sub	r2,r19,r23
    2080:	0080090e 	bge	zero,r2,20a8 <___vfprintf_internal_r+0x2d0>
    2084:	e085883a 	add	r2,fp,r2
    2088:	01400c04 	movi	r5,48
    208c:	d8c00917 	ldw	r3,36(sp)
    2090:	e009883a 	mov	r4,fp
    2094:	e0c0032e 	bgeu	fp,r3,20a4 <___vfprintf_internal_r+0x2cc>
    2098:	e7000044 	addi	fp,fp,1
    209c:	21400005 	stb	r5,0(r4)
    20a0:	e0bffa1e 	bne	fp,r2,208c <__alt_data_end+0xfffc388c>
    20a4:	e6efc83a 	sub	r23,fp,sp
    20a8:	d8c00b17 	ldw	r3,44(sp)
    20ac:	4dd1883a 	add	r8,r9,r23
    20b0:	922dc83a 	sub	r22,r18,r8
    20b4:	18001626 	beq	r3,zero,2110 <___vfprintf_internal_r+0x338>
    20b8:	48000a26 	beq	r9,zero,20e4 <___vfprintf_internal_r+0x30c>
    20bc:	00800b44 	movi	r2,45
    20c0:	d8800805 	stb	r2,32(sp)
    20c4:	88800117 	ldw	r2,4(r17)
    20c8:	01c00044 	movi	r7,1
    20cc:	d9800804 	addi	r6,sp,32
    20d0:	880b883a 	mov	r5,r17
    20d4:	a009883a 	mov	r4,r20
    20d8:	103ee83a 	callr	r2
    20dc:	10004a1e 	bne	r2,zero,2208 <___vfprintf_internal_r+0x430>
    20e0:	84000044 	addi	r16,r16,1
    20e4:	0580070e 	bge	zero,r22,2104 <___vfprintf_internal_r+0x32c>
    20e8:	b00f883a 	mov	r7,r22
    20ec:	01800c04 	movi	r6,48
    20f0:	880b883a 	mov	r5,r17
    20f4:	a009883a 	mov	r4,r20
    20f8:	0001d6c0 	call	1d6c <print_repeat>
    20fc:	1000421e 	bne	r2,zero,2208 <___vfprintf_internal_r+0x430>
    2100:	85a1883a 	add	r16,r16,r22
    2104:	e02d883a 	mov	r22,fp
    2108:	bf2fc83a 	sub	r23,r23,fp
    210c:	00002006 	br	2190 <___vfprintf_internal_r+0x3b8>
    2110:	0580090e 	bge	zero,r22,2138 <___vfprintf_internal_r+0x360>
    2114:	b00f883a 	mov	r7,r22
    2118:	01800804 	movi	r6,32
    211c:	880b883a 	mov	r5,r17
    2120:	a009883a 	mov	r4,r20
    2124:	da401015 	stw	r9,64(sp)
    2128:	0001d6c0 	call	1d6c <print_repeat>
    212c:	da401017 	ldw	r9,64(sp)
    2130:	1000351e 	bne	r2,zero,2208 <___vfprintf_internal_r+0x430>
    2134:	85a1883a 	add	r16,r16,r22
    2138:	483ff226 	beq	r9,zero,2104 <__alt_data_end+0xfffc3904>
    213c:	00800b44 	movi	r2,45
    2140:	d8800805 	stb	r2,32(sp)
    2144:	88800117 	ldw	r2,4(r17)
    2148:	01c00044 	movi	r7,1
    214c:	d9800804 	addi	r6,sp,32
    2150:	880b883a 	mov	r5,r17
    2154:	a009883a 	mov	r4,r20
    2158:	103ee83a 	callr	r2
    215c:	10002a1e 	bne	r2,zero,2208 <___vfprintf_internal_r+0x430>
    2160:	84000044 	addi	r16,r16,1
    2164:	003fe706 	br	2104 <__alt_data_end+0xfffc3904>
    2168:	b5bfffc4 	addi	r22,r22,-1
    216c:	b0800003 	ldbu	r2,0(r22)
    2170:	01c00044 	movi	r7,1
    2174:	d9800804 	addi	r6,sp,32
    2178:	d8800805 	stb	r2,32(sp)
    217c:	88800117 	ldw	r2,4(r17)
    2180:	880b883a 	mov	r5,r17
    2184:	a009883a 	mov	r4,r20
    2188:	103ee83a 	callr	r2
    218c:	10001e1e 	bne	r2,zero,2208 <___vfprintf_internal_r+0x430>
    2190:	8585c83a 	sub	r2,r16,r22
    2194:	b5c9883a 	add	r4,r22,r23
    2198:	e085883a 	add	r2,fp,r2
    219c:	013ff216 	blt	zero,r4,2168 <__alt_data_end+0xfffc3968>
    21a0:	1021883a 	mov	r16,r2
    21a4:	dd800d17 	ldw	r22,52(sp)
    21a8:	00004406 	br	22bc <___vfprintf_internal_r+0x4e4>
    21ac:	00800044 	movi	r2,1
    21b0:	1480080e 	bge	r2,r18,21d4 <___vfprintf_internal_r+0x3fc>
    21b4:	95ffffc4 	addi	r23,r18,-1
    21b8:	b80f883a 	mov	r7,r23
    21bc:	01800804 	movi	r6,32
    21c0:	880b883a 	mov	r5,r17
    21c4:	a009883a 	mov	r4,r20
    21c8:	0001d6c0 	call	1d6c <print_repeat>
    21cc:	10000e1e 	bne	r2,zero,2208 <___vfprintf_internal_r+0x430>
    21d0:	85e1883a 	add	r16,r16,r23
    21d4:	b0800017 	ldw	r2,0(r22)
    21d8:	01c00044 	movi	r7,1
    21dc:	d80d883a 	mov	r6,sp
    21e0:	d8800005 	stb	r2,0(sp)
    21e4:	88800117 	ldw	r2,4(r17)
    21e8:	880b883a 	mov	r5,r17
    21ec:	a009883a 	mov	r4,r20
    21f0:	b5c00104 	addi	r23,r22,4
    21f4:	103ee83a 	callr	r2
    21f8:	1000031e 	bne	r2,zero,2208 <___vfprintf_internal_r+0x430>
    21fc:	84000044 	addi	r16,r16,1
    2200:	b82d883a 	mov	r22,r23
    2204:	00002d06 	br	22bc <___vfprintf_internal_r+0x4e4>
    2208:	00bfffc4 	movi	r2,-1
    220c:	00003106 	br	22d4 <___vfprintf_internal_r+0x4fc>
    2210:	b5c00017 	ldw	r23,0(r22)
    2214:	b7000104 	addi	fp,r22,4
    2218:	b809883a 	mov	r4,r23
    221c:	0001d500 	call	1d50 <strlen>
    2220:	9091c83a 	sub	r8,r18,r2
    2224:	102d883a 	mov	r22,r2
    2228:	0200090e 	bge	zero,r8,2250 <___vfprintf_internal_r+0x478>
    222c:	400f883a 	mov	r7,r8
    2230:	01800804 	movi	r6,32
    2234:	880b883a 	mov	r5,r17
    2238:	a009883a 	mov	r4,r20
    223c:	da001015 	stw	r8,64(sp)
    2240:	0001d6c0 	call	1d6c <print_repeat>
    2244:	da001017 	ldw	r8,64(sp)
    2248:	103fef1e 	bne	r2,zero,2208 <__alt_data_end+0xfffc3a08>
    224c:	8221883a 	add	r16,r16,r8
    2250:	88800117 	ldw	r2,4(r17)
    2254:	b00f883a 	mov	r7,r22
    2258:	b80d883a 	mov	r6,r23
    225c:	880b883a 	mov	r5,r17
    2260:	a009883a 	mov	r4,r20
    2264:	103ee83a 	callr	r2
    2268:	103fe71e 	bne	r2,zero,2208 <__alt_data_end+0xfffc3a08>
    226c:	85a1883a 	add	r16,r16,r22
    2270:	e02d883a 	mov	r22,fp
    2274:	00001106 	br	22bc <___vfprintf_internal_r+0x4e4>
    2278:	00c00044 	movi	r3,1
    227c:	04ffffc4 	movi	r19,-1
    2280:	d8000e15 	stw	zero,56(sp)
    2284:	d8c00a15 	stw	r3,40(sp)
    2288:	05400284 	movi	r21,10
    228c:	9825883a 	mov	r18,r19
    2290:	d8000c15 	stw	zero,48(sp)
    2294:	d8000b15 	stw	zero,44(sp)
    2298:	182f883a 	mov	r23,r3
    229c:	00000806 	br	22c0 <___vfprintf_internal_r+0x4e8>
    22a0:	ddc00b15 	stw	r23,44(sp)
    22a4:	05c00084 	movi	r23,2
    22a8:	00000506 	br	22c0 <___vfprintf_internal_r+0x4e8>
    22ac:	00c00044 	movi	r3,1
    22b0:	d8c00c15 	stw	r3,48(sp)
    22b4:	05c000c4 	movi	r23,3
    22b8:	00000106 	br	22c0 <___vfprintf_internal_r+0x4e8>
    22bc:	002f883a 	mov	r23,zero
    22c0:	d8c00f17 	ldw	r3,60(sp)
    22c4:	18c00044 	addi	r3,r3,1
    22c8:	d8c00f15 	stw	r3,60(sp)
    22cc:	003edc06 	br	1e40 <__alt_data_end+0xfffc3640>
    22d0:	8005883a 	mov	r2,r16
    22d4:	dfc01a17 	ldw	ra,104(sp)
    22d8:	df001917 	ldw	fp,100(sp)
    22dc:	ddc01817 	ldw	r23,96(sp)
    22e0:	dd801717 	ldw	r22,92(sp)
    22e4:	dd401617 	ldw	r21,88(sp)
    22e8:	dd001517 	ldw	r20,84(sp)
    22ec:	dcc01417 	ldw	r19,80(sp)
    22f0:	dc801317 	ldw	r18,76(sp)
    22f4:	dc401217 	ldw	r17,72(sp)
    22f8:	dc001117 	ldw	r16,68(sp)
    22fc:	dec01b04 	addi	sp,sp,108
    2300:	f800283a 	ret

00002304 <__vfprintf_internal>:
    2304:	00800034 	movhi	r2,0
    2308:	108a9604 	addi	r2,r2,10840
    230c:	300f883a 	mov	r7,r6
    2310:	280d883a 	mov	r6,r5
    2314:	200b883a 	mov	r5,r4
    2318:	11000017 	ldw	r4,0(r2)
    231c:	0001dd81 	jmpi	1dd8 <___vfprintf_internal_r>

00002320 <__sfvwrite_small_dev>:
    2320:	2880000b 	ldhu	r2,0(r5)
    2324:	1080020c 	andi	r2,r2,8
    2328:	10002126 	beq	r2,zero,23b0 <__sfvwrite_small_dev+0x90>
    232c:	2880008f 	ldh	r2,2(r5)
    2330:	defffa04 	addi	sp,sp,-24
    2334:	dc000015 	stw	r16,0(sp)
    2338:	dfc00515 	stw	ra,20(sp)
    233c:	dd000415 	stw	r20,16(sp)
    2340:	dcc00315 	stw	r19,12(sp)
    2344:	dc800215 	stw	r18,8(sp)
    2348:	dc400115 	stw	r17,4(sp)
    234c:	2821883a 	mov	r16,r5
    2350:	10001216 	blt	r2,zero,239c <__sfvwrite_small_dev+0x7c>
    2354:	2027883a 	mov	r19,r4
    2358:	3025883a 	mov	r18,r6
    235c:	3823883a 	mov	r17,r7
    2360:	05010004 	movi	r20,1024
    2364:	04400b0e 	bge	zero,r17,2394 <__sfvwrite_small_dev+0x74>
    2368:	880f883a 	mov	r7,r17
    236c:	a440010e 	bge	r20,r17,2374 <__sfvwrite_small_dev+0x54>
    2370:	01c10004 	movi	r7,1024
    2374:	8140008f 	ldh	r5,2(r16)
    2378:	900d883a 	mov	r6,r18
    237c:	9809883a 	mov	r4,r19
    2380:	00023d80 	call	23d8 <_write_r>
    2384:	0080050e 	bge	zero,r2,239c <__sfvwrite_small_dev+0x7c>
    2388:	88a3c83a 	sub	r17,r17,r2
    238c:	90a5883a 	add	r18,r18,r2
    2390:	003ff406 	br	2364 <__alt_data_end+0xfffc3b64>
    2394:	0005883a 	mov	r2,zero
    2398:	00000706 	br	23b8 <__sfvwrite_small_dev+0x98>
    239c:	8080000b 	ldhu	r2,0(r16)
    23a0:	10801014 	ori	r2,r2,64
    23a4:	8080000d 	sth	r2,0(r16)
    23a8:	00bfffc4 	movi	r2,-1
    23ac:	00000206 	br	23b8 <__sfvwrite_small_dev+0x98>
    23b0:	00bfffc4 	movi	r2,-1
    23b4:	f800283a 	ret
    23b8:	dfc00517 	ldw	ra,20(sp)
    23bc:	dd000417 	ldw	r20,16(sp)
    23c0:	dcc00317 	ldw	r19,12(sp)
    23c4:	dc800217 	ldw	r18,8(sp)
    23c8:	dc400117 	ldw	r17,4(sp)
    23cc:	dc000017 	ldw	r16,0(sp)
    23d0:	dec00604 	addi	sp,sp,24
    23d4:	f800283a 	ret

000023d8 <_write_r>:
    23d8:	defffd04 	addi	sp,sp,-12
    23dc:	dc000015 	stw	r16,0(sp)
    23e0:	04000034 	movhi	r16,0
    23e4:	dc400115 	stw	r17,4(sp)
    23e8:	840adb04 	addi	r16,r16,11116
    23ec:	2023883a 	mov	r17,r4
    23f0:	2809883a 	mov	r4,r5
    23f4:	300b883a 	mov	r5,r6
    23f8:	380d883a 	mov	r6,r7
    23fc:	dfc00215 	stw	ra,8(sp)
    2400:	80000015 	stw	zero,0(r16)
    2404:	00026300 	call	2630 <write>
    2408:	00ffffc4 	movi	r3,-1
    240c:	10c0031e 	bne	r2,r3,241c <_write_r+0x44>
    2410:	80c00017 	ldw	r3,0(r16)
    2414:	18000126 	beq	r3,zero,241c <_write_r+0x44>
    2418:	88c00015 	stw	r3,0(r17)
    241c:	dfc00217 	ldw	ra,8(sp)
    2420:	dc400117 	ldw	r17,4(sp)
    2424:	dc000017 	ldw	r16,0(sp)
    2428:	dec00304 	addi	sp,sp,12
    242c:	f800283a 	ret

00002430 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    2430:	00024bc1 	jmpi	24bc <alt_iic_isr_register>

00002434 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2434:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2438:	00bfff84 	movi	r2,-2
    243c:	2084703a 	and	r2,r4,r2
    2440:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    2444:	00c00044 	movi	r3,1
    2448:	d0a04717 	ldw	r2,-32484(gp)
    244c:	194a983a 	sll	r5,r3,r5
    2450:	288ab03a 	or	r5,r5,r2
    2454:	d1604715 	stw	r5,-32484(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2458:	d0a04717 	ldw	r2,-32484(gp)
    245c:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2460:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    2464:	0005883a 	mov	r2,zero
    2468:	f800283a 	ret

0000246c <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    246c:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2470:	00bfff84 	movi	r2,-2
    2474:	2084703a 	and	r2,r4,r2
    2478:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    247c:	00ffff84 	movi	r3,-2
    2480:	d0a04717 	ldw	r2,-32484(gp)
    2484:	194a183a 	rol	r5,r3,r5
    2488:	288a703a 	and	r5,r5,r2
    248c:	d1604715 	stw	r5,-32484(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2490:	d0a04717 	ldw	r2,-32484(gp)
    2494:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2498:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    249c:	0005883a 	mov	r2,zero
    24a0:	f800283a 	ret

000024a4 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    24a4:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
    24a8:	00800044 	movi	r2,1
    24ac:	1144983a 	sll	r2,r2,r5
    24b0:	10c4703a 	and	r2,r2,r3
}
    24b4:	1004c03a 	cmpne	r2,r2,zero
    24b8:	f800283a 	ret

000024bc <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    24bc:	00c007c4 	movi	r3,31
    24c0:	19401616 	blt	r3,r5,251c <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    24c4:	defffe04 	addi	sp,sp,-8
    24c8:	dfc00115 	stw	ra,4(sp)
    24cc:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    24d0:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    24d4:	00ffff84 	movi	r3,-2
    24d8:	80c6703a 	and	r3,r16,r3
    24dc:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    24e0:	280490fa 	slli	r2,r5,3
    24e4:	00c00034 	movhi	r3,0
    24e8:	18cae104 	addi	r3,r3,11140
    24ec:	1885883a 	add	r2,r3,r2
    24f0:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
    24f4:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    24f8:	30000226 	beq	r6,zero,2504 <alt_iic_isr_register+0x48>
    24fc:	00024340 	call	2434 <alt_ic_irq_enable>
    2500:	00000106 	br	2508 <alt_iic_isr_register+0x4c>
    2504:	000246c0 	call	246c <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2508:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    250c:	dfc00117 	ldw	ra,4(sp)
    2510:	dc000017 	ldw	r16,0(sp)
    2514:	dec00204 	addi	sp,sp,8
    2518:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
    251c:	00bffa84 	movi	r2,-22
    2520:	f800283a 	ret

00002524 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    2524:	deffff04 	addi	sp,sp,-4
    2528:	01000034 	movhi	r4,0
    252c:	01400034 	movhi	r5,0
    2530:	dfc00015 	stw	ra,0(sp)
    2534:	210a5d04 	addi	r4,r4,10612
    2538:	294a9b04 	addi	r5,r5,10860

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    253c:	2140061e 	bne	r4,r5,2558 <alt_load+0x34>
    2540:	01000034 	movhi	r4,0
    2544:	01400034 	movhi	r5,0
    2548:	21000804 	addi	r4,r4,32
    254c:	29400804 	addi	r5,r5,32
    2550:	2140121e 	bne	r4,r5,259c <alt_load+0x78>
    2554:	00000b06 	br	2584 <alt_load+0x60>
    2558:	00c00034 	movhi	r3,0
    255c:	18ca9b04 	addi	r3,r3,10860
    2560:	1907c83a 	sub	r3,r3,r4
    2564:	0005883a 	mov	r2,zero
  {
    while( to != end )
    2568:	10fff526 	beq	r2,r3,2540 <__alt_data_end+0xfffc3d40>
    {
      *to++ = *from++;
    256c:	114f883a 	add	r7,r2,r5
    2570:	39c00017 	ldw	r7,0(r7)
    2574:	110d883a 	add	r6,r2,r4
    2578:	10800104 	addi	r2,r2,4
    257c:	31c00015 	stw	r7,0(r6)
    2580:	003ff906 	br	2568 <__alt_data_end+0xfffc3d68>
    2584:	01000034 	movhi	r4,0
    2588:	01400034 	movhi	r5,0
    258c:	2109db04 	addi	r4,r4,10092
    2590:	2949db04 	addi	r5,r5,10092

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    2594:	2140101e 	bne	r4,r5,25d8 <alt_load+0xb4>
    2598:	00000b06 	br	25c8 <alt_load+0xa4>
    259c:	00c00034 	movhi	r3,0
    25a0:	18c06004 	addi	r3,r3,384
    25a4:	1907c83a 	sub	r3,r3,r4
    25a8:	0005883a 	mov	r2,zero
  {
    while( to != end )
    25ac:	10fff526 	beq	r2,r3,2584 <__alt_data_end+0xfffc3d84>
    {
      *to++ = *from++;
    25b0:	114f883a 	add	r7,r2,r5
    25b4:	39c00017 	ldw	r7,0(r7)
    25b8:	110d883a 	add	r6,r2,r4
    25bc:	10800104 	addi	r2,r2,4
    25c0:	31c00015 	stw	r7,0(r6)
    25c4:	003ff906 	br	25ac <__alt_data_end+0xfffc3dac>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    25c8:	00026e80 	call	26e8 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    25cc:	dfc00017 	ldw	ra,0(sp)
    25d0:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    25d4:	00026ec1 	jmpi	26ec <alt_icache_flush_all>
    25d8:	00c00034 	movhi	r3,0
    25dc:	18ca5d04 	addi	r3,r3,10612
    25e0:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    25e4:	0005883a 	mov	r2,zero
  {
    while( to != end )
    25e8:	18bff726 	beq	r3,r2,25c8 <__alt_data_end+0xfffc3dc8>
    {
      *to++ = *from++;
    25ec:	114f883a 	add	r7,r2,r5
    25f0:	39c00017 	ldw	r7,0(r7)
    25f4:	110d883a 	add	r6,r2,r4
    25f8:	10800104 	addi	r2,r2,4
    25fc:	31c00015 	stw	r7,0(r6)
    2600:	003ff906 	br	25e8 <__alt_data_end+0xfffc3de8>

00002604 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2604:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    2608:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    260c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    2610:	00026900 	call	2690 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    2614:	00026b00 	call	26b0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    2618:	d1a04817 	ldw	r6,-32480(gp)
    261c:	d1604917 	ldw	r5,-32476(gp)
    2620:	d1204a17 	ldw	r4,-32472(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    2624:	dfc00017 	ldw	ra,0(sp)
    2628:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    262c:	000094c1 	jmpi	94c <main>

00002630 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    2630:	00800044 	movi	r2,1
    2634:	20800226 	beq	r4,r2,2640 <write+0x10>
    2638:	00800084 	movi	r2,2
    263c:	2080041e 	bne	r4,r2,2650 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    2640:	01000034 	movhi	r4,0
    2644:	000f883a 	mov	r7,zero
    2648:	210a9904 	addi	r4,r4,10852
    264c:	00026b41 	jmpi	26b4 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    2650:	d0a00517 	ldw	r2,-32748(gp)
    2654:	10000926 	beq	r2,zero,267c <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    2658:	deffff04 	addi	sp,sp,-4
    265c:	dfc00015 	stw	ra,0(sp)
    2660:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    2664:	00c01444 	movi	r3,81
    2668:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    266c:	00bfffc4 	movi	r2,-1
    2670:	dfc00017 	ldw	ra,0(sp)
    2674:	dec00104 	addi	sp,sp,4
    2678:	f800283a 	ret
    267c:	d0a04604 	addi	r2,gp,-32488
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    2680:	00c01444 	movi	r3,81
    2684:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    2688:	00bfffc4 	movi	r2,-1
    268c:	f800283a 	ret

00002690 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    2690:	deffff04 	addi	sp,sp,-4
    2694:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    2698:	00027640 	call	2764 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    269c:	00800044 	movi	r2,1
    26a0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    26a4:	dfc00017 	ldw	ra,0(sp)
    26a8:	dec00104 	addi	sp,sp,4
    26ac:	f800283a 	ret

000026b0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    26b0:	f800283a 	ret

000026b4 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    26b4:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    26b8:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    26bc:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    26c0:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    26c4:	2980072e 	bgeu	r5,r6,26e4 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    26c8:	38c00037 	ldwio	r3,0(r7)
    26cc:	18ffffec 	andhi	r3,r3,65535
    26d0:	183ffc26 	beq	r3,zero,26c4 <__alt_data_end+0xfffc3ec4>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    26d4:	28c00007 	ldb	r3,0(r5)
    26d8:	20c00035 	stwio	r3,0(r4)
    26dc:	29400044 	addi	r5,r5,1
    26e0:	003ff806 	br	26c4 <__alt_data_end+0xfffc3ec4>

  return count;
}
    26e4:	f800283a 	ret

000026e8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    26e8:	f800283a 	ret

000026ec <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    26ec:	f800283a 	ret

000026f0 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    26f0:	213ffe84 	addi	r4,r4,-6
    26f4:	008003c4 	movi	r2,15
    26f8:	11001636 	bltu	r2,r4,2754 <alt_exception_cause_generated_bad_addr+0x64>
    26fc:	200890ba 	slli	r4,r4,2
    2700:	00800034 	movhi	r2,0
    2704:	1089c504 	addi	r2,r2,10004
    2708:	2089883a 	add	r4,r4,r2
    270c:	20800017 	ldw	r2,0(r4)
    2710:	1000683a 	jmp	r2
    2714:	0000275c 	xori	zero,zero,157
    2718:	0000275c 	xori	zero,zero,157
    271c:	00002754 	movui	zero,157
    2720:	00002754 	movui	zero,157
    2724:	00002754 	movui	zero,157
    2728:	0000275c 	xori	zero,zero,157
    272c:	00002754 	movui	zero,157
    2730:	00002754 	movui	zero,157
    2734:	0000275c 	xori	zero,zero,157
    2738:	0000275c 	xori	zero,zero,157
    273c:	00002754 	movui	zero,157
    2740:	0000275c 	xori	zero,zero,157
    2744:	00002754 	movui	zero,157
    2748:	00002754 	movui	zero,157
    274c:	00002754 	movui	zero,157
    2750:	0000275c 	xori	zero,zero,157
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    2754:	0005883a 	mov	r2,zero
    2758:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    275c:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
    2760:	f800283a 	ret

00002764 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    2764:	000170fa 	wrctl	ienable,zero
    2768:	f800283a 	ret
