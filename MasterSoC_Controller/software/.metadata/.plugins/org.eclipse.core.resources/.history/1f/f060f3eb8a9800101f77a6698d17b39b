#include <stdio.h>
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "sys/alt_irq.h"
#include <unistd.h>
#include "aip.h"




volatile int edge_val = 0;
volatile int start_state=0;
void start_isr(void * context);
void start_setup();


#include "ID00001001_dummy.h"


#define DUMMY_0 AIP_0_BASE
#define DUMMY_1 AIP_1_BASE
#define DUMMY_2 AIP_2_BASE
#define DUMMY_MEM_SIZE 8


int main(void)
{
	start_state = 0;
    uint32_t dataFlit = 0;
    uint32_t dataFlits[DUMMY_MEM_SIZE];

    start_setup();
    ID00001001_init(DUMMY_0);
    ID00001001_init(DUMMY_1);
    ID00001001_init(DUMMY_2);
  
    ID00001001_getStatus(DUMMY_0, &dataFlit);

    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
    {
        dataFlits[i] = 1<<i;
    }

    ID00001001_writeData(DUMMY_0, dataFlits, DUMMY_MEM_SIZE, 0);


    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
    {
        dataFlits[i] = i;
    }

    ID00001001_writeData(DUMMY_1, dataFlits, DUMMY_MEM_SIZE, 0);


    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
    {
        dataFlits[i] = 7-i;
    }

    ID00001001_writeData(DUMMY_2, dataFlits, DUMMY_MEM_SIZE, 0);

    ID00001001_enableDelay(DUMMY_0, 10000);

    ID00001001_startIP(DUMMY_0);

    ID00001001_getStatus(DUMMY_0, &dataFlit);

    ID00001001_waitirq(DUMMY_0);

    ID00001001_getStatus(DUMMY_0, &dataFlit);

    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
    {
        dataFlits[i] = 0;
    }
    ID00001001_readData(DUMMY_0, dataFlits, DUMMY_MEM_SIZE, 0);
    
    printf("Data in Dummy 0:\n");

    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
    {
        printf("Data[%i]: %x ", i, dataFlits[i]);
    }

    ID00001001_enableDelay(DUMMY_1, 10000);

    ID00001001_startIP(DUMMY_1);

    ID00001001_getStatus(DUMMY_1, &dataFlit);

    ID00001001_waitirq(DUMMY_1);

   // ID00001001_waitDone(DUMMY_1);

    ID00001001_getStatus(DUMMY_1, &dataFlit);

    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
    {
        dataFlits[i] = 0;
    }
    ID00001001_readData(DUMMY_1, dataFlits, DUMMY_MEM_SIZE, 0);
  
    printf("\n");
    printf("Data in Dummy 1:\n");

    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
    {
        printf("Data[%i]: %x ", i, dataFlits[i]);
    }

    ID00001001_enableDelay(DUMMY_2, 10000);

    ID00001001_startIP(DUMMY_2);

    ID00001001_getStatus(DUMMY_2, &dataFlit);

    ID00001001_waitDone(DUMMY_2);

    ID00001001_getStatus(DUMMY_2, &dataFlit);

    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
    {
        dataFlits[i] = 0;
    }
    ID00001001_readData(DUMMY_2, dataFlits, DUMMY_MEM_SIZE, 0);
    printf("\n");
    printf("Data in Dummy 2:\n");

    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
    {
        printf("Data[%i]: %x ", i, dataFlits[i]);
    }

    while (1)
    {
        asm("nop");
    }

    return 0;
}


void start_setup(void) {
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(INT_IP_S0_BASE, 0x07);
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(INT_IP_S0_BASE, 0x00);

    alt_ic_isr_register(
        INT_IP_S0_IRQ_INTERRUPT_CONTROLLER_ID,
        INT_IP_S0_IRQ,
        start_isr,
        (void *) INT_IP_S0_BASE,
        0x00);


}

void start_isr(void * context) {
    // Limpia el edge capture del PIO correspondiente
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP((alt_u32)context, 0);

    // Marca el estado
    start_state = 1;

    printf("Start DETECTED\n");
}

/*
void start_setup(void){

		IOWR_ALTERA_AVALON_PIO_IRQ_MASK(INT_IP_S0_BASE, 0x01);
		IOWR_ALTERA_AVALON_PIO_EDGE_CAP(INT_IP_S0_BASE, 0x00);
		// Cast the global variable to the required ISR
		void * edge_val_ptr;
		edge_val_ptr = (void *) &edge_val;
		// Register the interrupt
		alt_ic_isr_register(
				INT_IP_S0_IRQ_INTERRUPT_CONTROLLER_ID,
				INT_IP_S0_IRQ,
				start_isr,
				edge_val_ptr,
				0x00);
}


void start_isr(void * context){

		// expect the context passed to be a pointer
		// to the variable to hold the edge capture information
		// create a pointer variable to hold the context
		volatile int * edge_ptr;
		edge_ptr = (volatile int *) context;
		// Read the edge capture register and assign the
		// value to the ptr variable
		*edge_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(INT_IP_S0_BASE);
		// Clear the edge capture register
		IOWR_ALTERA_AVALON_PIO_EDGE_CAP(INT_IP_S0_BASE, 0);

#ifdef 	PRINTF
		printf("------------start DETECTED ------------ \n");
#endif
		printf("------------start DETECTED ------------ \n");

		start_state=1;
}
*/
/*
void start_setup(void){

		IOWR_ALTERA_AVALON_PIO_IRQ_MASK(START_UP_BASE, 0x01);
		IOWR_ALTERA_AVALON_PIO_EDGE_CAP(START_UP_BASE, 0x00);
		// Cast the global variable to the required ISR
		void * edge_val_ptr;
		edge_val_ptr = (void *) &edge_val;
		// Register the interrupt
		alt_ic_isr_register(
				START_UP_IRQ_INTERRUPT_CONTROLLER_ID,
				START_UP_IRQ,
				start_isr,
				edge_val_ptr,
				0x00);
}


void start_isr(void * context){

		// expect the context passed to be a pointer
		// to the variable to hold the edge capture information
		// create a pointer variable to hold the context
		volatile int * edge_ptr;
		edge_ptr = (volatile int *) context;
		// Read the edge capture register and assign the
		// value to the ptr variable
		*edge_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(START_UP_BASE);
		// Clear the edge capture register
		IOWR_ALTERA_AVALON_PIO_EDGE_CAP(START_UP_BASE, 0);

#ifdef 	PRINTF
		printf("------------start DETECTED ------------ \n");
#endif
		start_state=1;
}
*/
