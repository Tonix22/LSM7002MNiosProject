
MasterSoC_3pAIP_v1.elf:     file format elf32-littlenios2
MasterSoC_3pAIP_v1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000180

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00001d28 memsz 0x00001d28 flags r-x
    LOAD off    0x00002d48 vaddr 0x00001d48 paddr 0x00001e40 align 2**12
         filesz 0x000000f8 memsz 0x000000f8 flags rw-
    LOAD off    0x00002f38 vaddr 0x00001f38 paddr 0x00001f38 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001ae0  00000180  00000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000e8  00001c60  00001c60  00002c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f8  00001d48  00001e40  00002d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  00001f38  00001f38  00002f38  2**2
                  ALLOC, SMALL_DATA
  6 .mem_program  00000000  00002058  00002058  00002e40  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00002e40  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000004b0  00000000  00000000  00002e68  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00006d87  00000000  00000000  00003318  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002368  00000000  00000000  0000a09f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000028b9  00000000  00000000  0000c407  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000974  00000000  00000000  0000ecc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001b78  00000000  00000000  0000f634  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000025c7  00000000  00000000  000111ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00013774  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000388  00000000  00000000  00013788  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000153ad  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000153b0  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000153bc  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000153bd  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000153be  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000153c9  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000153d4  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000001a  00000000  00000000  000153df  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000004e  00000000  00000000  000153f9  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0006816a  00000000  00000000  00015447  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000180 l    d  .text	00000000 .text
00001c60 l    d  .rodata	00000000 .rodata
00001d48 l    d  .rwdata	00000000 .rwdata
00001f38 l    d  .bss	00000000 .bss
00002058 l    d  .mem_program	00000000 .mem_program
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../MasterSoC_3pAIP_v1_bsp//obj/HAL/src/crt0.o
000001b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 ID00001001_dummy.c
00000000 l    df *ABS*	00000000 ID00004003_masterSOC.c
00000000 l    df *ABS*	00000000 aip.c
000004b4 l     F .text	00000028 aip_aipRead
000004dc l     F .text	00000028 aip_aipWrite
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 spi.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000fd8 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00001d48 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00001f54 g     O .bss	00000004 alt_instruction_exception_handler
00000f0c g     F .text	0000001c putchar
00001af8 g     F .text	0000002c alt_main
00000f28 g     F .text	00000080 _puts_r
00001f58 g     O .bss	00000100 alt_irq
00001e40 g       *ABS*	00000000 __flash_rwdata_start
00000eb8 g     F .text	0000004c printf
00000640 g     F .text	0000008c aip_enableINT
00000894 g     F .text	00000020 start_isr
00001c58 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00001f40 g     O .bss	00000004 errno
00001f4c g     O .bss	00000004 alt_argv
00009e28 g       *ABS*	00000000 _gp
000008b4 g     F .text	00000050 int_setup
000005f0 g     F .text	00000028 aip_getID
00000f04 g     F .text	00000008 _putchar_r
00000da8 g     F .text	000000b4 spi_write_then_read
00000348 g     F .text	0000001c ID00001001_getStatus
00000fa8 g     F .text	00000014 puts
00001be4 g     F .text	00000074 alt_exception_cause_generated_bad_addr
0000045c g     F .text	0000001c ID00004003_getStatus
0000031c g     F .text	0000002c ID00001001_readData
00000e7c g     F .text	0000003c _printf_r
00001840 g     F .text	00000064 .hidden __udivsi3
000002d4 g     F .text	0000001c ID00001001_startIP
00000404 g     F .text	0000002c ID00004003_writeData
00001e28 g     O .rwdata	00000004 _global_impure_ptr
00002058 g       *ABS*	00000000 __bss_end
000019b0 g     F .text	00000068 alt_iic_isr_register
00001998 g     F .text	00000018 alt_ic_irq_enabled
00000570 g     F .text	0000006c aip_writeConfReg
000002f0 g     F .text	0000002c ID00001001_writeData
00001f44 g     O .bss	00000004 alt_irq_active
0000075c g     F .text	00000030 aip_clearINT
000000fc g     F .exceptions	00000060 alt_irq_handler
00000000 g       *ABS*	00000000 __alt_mem_mem_program
00001bdc g     F .text	00000004 alt_dcache_flush_all
00001e40 g       *ABS*	00000000 __ram_rwdata_end
00001b24 g     F .text	00000060 write
00001698 g     F .text	00000058 _putc_r
00001d48 g       *ABS*	00000000 __ram_rodata_end
00001e38 g     O .rwdata	00000004 jtag_uart_0
000018a4 g     F .text	00000058 .hidden __umodsi3
00002058 g       *ABS*	00000000 end
0000015c g     F .exceptions	00000024 alt_instruction_exception_entry
0003e800 g       *ABS*	00000000 __alt_stack_pointer
00001ba8 g     F .text	00000034 altera_avalon_jtag_uart_write
00000904 g     F .text	00000048 start_setup
00001044 g     F .text	0000052c ___vfprintf_internal_r
00000180 g     F .text	0000003c _start
00001ba4 g     F .text	00000004 alt_sys_init
00000d0c g     F .text	0000009c spi_read
000018fc g     F .text	00000028 .hidden __mulsi3
00001d48 g       *ABS*	00000000 __ram_rwdata_start
00001c60 g       *ABS*	00000000 __ram_rodata_start
000005dc g     F .text	00000004 aip_writeMem
00002058 g       *ABS*	00000000 __alt_stack_base
00001f38 g     O .bss	00000004 start_state
000003e8 g     F .text	0000001c ID00004003_startIP
00001f3c g     O .bss	00000004 edge_val
0000158c g     F .text	000000b8 __sfvwrite_small_dev
00001f38 g       *ABS*	00000000 __bss_start
00000e5c g     F .text	00000020 memset
0000094c g     F .text	000003c0 main
00001f48 g     O .bss	00000004 alt_envp
00001e34 g     O .rwdata	00000004 uart_0
00000808 g     F .text	0000008c int_isr
000001bc g     F .text	00000074 ID00001001_init
00001e3c g     O .rwdata	00000004 alt_errno
00001644 g     F .text	00000054 putc
00001748 g     F .text	00000084 .hidden __divsi3
00001c60 g       *ABS*	00000000 __flash_rodata_start
00001b84 g     F .text	00000020 alt_irq_init
00000364 g     F .text	0000003c ID00001001_waitDone
00000280 g     F .text	00000054 ID00001001_disableDelay
00000430 g     F .text	0000002c ID00004003_readData
000016f0 g     F .text	00000058 _write_r
000006cc g     F .text	00000090 aip_disableINT
00001e2c g     O .rwdata	00000004 _impure_ptr
00001f50 g     O .bss	00000004 alt_argc
00000020 g       .exceptions	00000000 alt_irq_entry
00000230 g     F .text	00000050 ID00001001_enableDelay
000003a0 g     F .text	00000018 ID00001001_waitirq
00000020 g       *ABS*	00000000 __ram_exceptions_start
000003b8 g     F .text	00000030 ID00004003_init
00000504 g     F .text	0000006c aip_readMem
00001924 g     F .text	00000004 alt_ic_isr_register
00001e40 g       *ABS*	00000000 _edata
00002058 g       *ABS*	00000000 _end
00000180 g       *ABS*	00000000 __ram_exceptions_end
00001960 g     F .text	00000038 alt_ic_irq_disable
000017cc g     F .text	00000074 .hidden __modsi3
0003e800 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000000c g       .entry	00000000 _exit
00000fbc g     F .text	0000001c strlen
000007cc g     F .text	0000003c aip_getNotifications
0000078c g     F .text	00000040 aip_getINT
00001be0 g     F .text	00000004 alt_icache_flush_all
00001e30 g     O .rwdata	00000004 alt_priority_mask
000005e0 g     F .text	00000010 aip_start
00001928 g     F .text	00000038 alt_ic_irq_enable
00001570 g     F .text	0000001c __vfprintf_internal
00001a18 g     F .text	000000e0 alt_load
00000618 g     F .text	00000028 aip_getStatus
00000478 g     F .text	0000003c ID00004003_waitDone



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08406014 	ori	at,at,384
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	000015c0 	call	15c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defffe04 	addi	sp,sp,-8
 100:	dfc00115 	stw	ra,4(sp)
 104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 10c:	04000034 	movhi	r16,0
 110:	8407d604 	addi	r16,r16,8024

  active = alt_irq_pending ();

  do
  {
    i = 0;
 114:	0005883a 	mov	r2,zero
    mask = 1;
 118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	20ca703a 	and	r5,r4,r3
 120:	28000b26 	beq	r5,zero,150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 124:	100490fa 	slli	r2,r2,3
 128:	8085883a 	add	r2,r16,r2
 12c:	10c00017 	ldw	r3,0(r2)
 130:	11000117 	ldw	r4,4(r2)
 134:	183ee83a 	callr	r3
 138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 13c:	203ff51e 	bne	r4,zero,114 <__alt_data_end+0xfffc1914>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 140:	dfc00117 	ldw	ra,4(sp)
 144:	dc000017 	ldw	r16,0(sp)
 148:	dec00204 	addi	sp,sp,8
 14c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 150:	18c7883a 	add	r3,r3,r3
      i++;
 154:	10800044 	addi	r2,r2,1

    } while (1);
 158:	003ff006 	br	11c <__alt_data_end+0xfffc191c>

0000015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 15c:	d0a04b17 	ldw	r2,-32468(gp)
 160:	10000426 	beq	r2,zero,174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 164:	200b883a 	mov	r5,r4
 168:	000d883a 	mov	r6,zero
 16c:	013fffc4 	movi	r4,-1
 170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
 178:	0005883a 	mov	r2,zero
 17c:	f800283a 	ret

Disassembly of section .text:

00000180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     180:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
     184:	defa0014 	ori	sp,sp,59392
    movhi gp, %hi(_gp)
     188:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     18c:	d6a78a14 	ori	gp,gp,40488
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     190:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     194:	1087ce14 	ori	r2,r2,7992

    movhi r3, %hi(__bss_end)
     198:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     19c:	18c81614 	ori	r3,r3,8280

    beq r2, r3, 1f
     1a0:	10c00326 	beq	r2,r3,1b0 <_start+0x30>

0:
    stw zero, (r2)
     1a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1ac:	10fffd36 	bltu	r2,r3,1a4 <__alt_data_end+0xfffc19a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1b0:	0001a180 	call	1a18 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1b4:	0001af80 	call	1af8 <alt_main>

000001b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1b8:	003fff06 	br	1b8 <__alt_data_end+0xfffc19b8>

000001bc <ID00001001_init>:

static int32_t ID00001001_clearStatus(uint32_t port);


int32_t ID00001001_init(uint32_t port)
{
     1bc:	defffb04 	addi	sp,sp,-20
    uint32_t id;

    //aip_init(port, ID00001001_csv, ID00001001_CONFIG_AMOUNT);

    aip_getID(port, &id);
     1c0:	d80b883a 	mov	r5,sp

static int32_t ID00001001_clearStatus(uint32_t port);


int32_t ID00001001_init(uint32_t port)
{
     1c4:	dfc00415 	stw	ra,16(sp)
     1c8:	dc800315 	stw	r18,12(sp)
     1cc:	dc400215 	stw	r17,8(sp)
     1d0:	dc000115 	stw	r16,4(sp)
     1d4:	2023883a 	mov	r17,r4
    uint32_t id;

    //aip_init(port, ID00001001_csv, ID00001001_CONFIG_AMOUNT);

    aip_getID(port, &id);
     1d8:	00005f00 	call	5f0 <aip_getID>
    printf("ID:%x\n",id);
     1dc:	d9400017 	ldw	r5,0(sp)
     1e0:	01000034 	movhi	r4,0
     1e4:	21071804 	addi	r4,r4,7264
     1e8:	0000eb80 	call	eb8 <printf>
    return 0;
}

static int32_t ID00001001_clearStatus(uint32_t port)
{
    for(uint32_t i = 0; i < ID00001001_STATUS_BITS; i++)
     1ec:	0021883a 	mov	r16,zero
     1f0:	04800204 	movi	r18,8
    {
        aip_disableINT(port, i);
     1f4:	800b883a 	mov	r5,r16
     1f8:	8809883a 	mov	r4,r17
     1fc:	00006cc0 	call	6cc <aip_disableINT>
        
        aip_clearINT(port, i);
     200:	800b883a 	mov	r5,r16
     204:	8809883a 	mov	r4,r17
    return 0;
}

static int32_t ID00001001_clearStatus(uint32_t port)
{
    for(uint32_t i = 0; i < ID00001001_STATUS_BITS; i++)
     208:	84000044 	addi	r16,r16,1
    {
        aip_disableINT(port, i);
        
        aip_clearINT(port, i);
     20c:	000075c0 	call	75c <aip_clearINT>
    return 0;
}

static int32_t ID00001001_clearStatus(uint32_t port)
{
    for(uint32_t i = 0; i < ID00001001_STATUS_BITS; i++)
     210:	84bff81e 	bne	r16,r18,1f4 <__alt_data_end+0xfffc19f4>
    aip_getID(port, &id);
    printf("ID:%x\n",id);
    ID00001001_clearStatus(port);

    return 0;
}
     214:	0005883a 	mov	r2,zero
     218:	dfc00417 	ldw	ra,16(sp)
     21c:	dc800317 	ldw	r18,12(sp)
     220:	dc400217 	ldw	r17,8(sp)
     224:	dc000117 	ldw	r16,4(sp)
     228:	dec00504 	addi	sp,sp,20
     22c:	f800283a 	ret

00000230 <ID00001001_enableDelay>:

int32_t ID00001001_enableDelay(uint32_t port, uint32_t msec)
{
    uint32_t delay = 0;

    delay = (msec << 1) | 1;
     230:	294b883a 	add	r5,r5,r5

    return 0;
}

int32_t ID00001001_enableDelay(uint32_t port, uint32_t msec)
{
     234:	defffc04 	addi	sp,sp,-16
    uint32_t delay = 0;

    delay = (msec << 1) | 1;
     238:	29400054 	ori	r5,r5,1
     23c:	d9400115 	stw	r5,4(sp)

    aip_writeConfReg(port, CDELAY, &delay, 1, 0);
     240:	01c00044 	movi	r7,1
     244:	d9800104 	addi	r6,sp,4
     248:	d8000015 	stw	zero,0(sp)
     24c:	01400104 	movi	r5,4

    return 0;
}

int32_t ID00001001_enableDelay(uint32_t port, uint32_t msec)
{
     250:	dfc00315 	stw	ra,12(sp)
     254:	dc000215 	stw	r16,8(sp)
     258:	2021883a 	mov	r16,r4
    uint32_t delay = 0;

    delay = (msec << 1) | 1;

    aip_writeConfReg(port, CDELAY, &delay, 1, 0);
     25c:	00005700 	call	570 <aip_writeConfReg>

    aip_enableINT(port, ID00001001_STATUS_BIT_DONE);
     260:	000b883a 	mov	r5,zero
     264:	8009883a 	mov	r4,r16
     268:	00006400 	call	640 <aip_enableINT>

    return 0;
}
     26c:	0005883a 	mov	r2,zero
     270:	dfc00317 	ldw	ra,12(sp)
     274:	dc000217 	ldw	r16,8(sp)
     278:	dec00404 	addi	sp,sp,16
     27c:	f800283a 	ret

00000280 <ID00001001_disableDelay>:

int32_t ID00001001_disableDelay(uint32_t port)
{
     280:	defffc04 	addi	sp,sp,-16
    uint32_t delay = 0;

    aip_writeConfReg(port, CDELAY, &delay, 1, 0);
     284:	01c00044 	movi	r7,1
     288:	d9800104 	addi	r6,sp,4
     28c:	d8000015 	stw	zero,0(sp)
     290:	01400104 	movi	r5,4

    return 0;
}

int32_t ID00001001_disableDelay(uint32_t port)
{
     294:	dfc00315 	stw	ra,12(sp)
     298:	dc000215 	stw	r16,8(sp)
    uint32_t delay = 0;
     29c:	d8000115 	stw	zero,4(sp)

    return 0;
}

int32_t ID00001001_disableDelay(uint32_t port)
{
     2a0:	2021883a 	mov	r16,r4
    uint32_t delay = 0;

    aip_writeConfReg(port, CDELAY, &delay, 1, 0);
     2a4:	00005700 	call	570 <aip_writeConfReg>

    aip_disableINT(port, 0);
     2a8:	8009883a 	mov	r4,r16
     2ac:	000b883a 	mov	r5,zero
     2b0:	00006cc0 	call	6cc <aip_disableINT>
        
    aip_clearINT(port, 0);
     2b4:	000b883a 	mov	r5,zero
     2b8:	8009883a 	mov	r4,r16
     2bc:	000075c0 	call	75c <aip_clearINT>

    return 0;
}
     2c0:	0005883a 	mov	r2,zero
     2c4:	dfc00317 	ldw	ra,12(sp)
     2c8:	dc000217 	ldw	r16,8(sp)
     2cc:	dec00404 	addi	sp,sp,16
     2d0:	f800283a 	ret

000002d4 <ID00001001_startIP>:

int32_t ID00001001_startIP(uint32_t port)
{
     2d4:	deffff04 	addi	sp,sp,-4
     2d8:	dfc00015 	stw	ra,0(sp)
    aip_start(port);
     2dc:	00005e00 	call	5e0 <aip_start>

    return 0;
}
     2e0:	0005883a 	mov	r2,zero
     2e4:	dfc00017 	ldw	ra,0(sp)
     2e8:	dec00104 	addi	sp,sp,4
     2ec:	f800283a 	ret

000002f0 <ID00001001_writeData>:

int32_t ID00001001_writeData(uint32_t port, uint32_t *data, uint32_t size, uint32_t offset)
{
     2f0:	defffe04 	addi	sp,sp,-8
    aip_writeMem(port, MDATAIN, data, size, offset);
     2f4:	d9c00015 	stw	r7,0(sp)
     2f8:	31ffffcc 	andi	r7,r6,65535
     2fc:	280d883a 	mov	r6,r5
     300:	000b883a 	mov	r5,zero

    return 0;
}

int32_t ID00001001_writeData(uint32_t port, uint32_t *data, uint32_t size, uint32_t offset)
{
     304:	dfc00115 	stw	ra,4(sp)
    aip_writeMem(port, MDATAIN, data, size, offset);
     308:	00005dc0 	call	5dc <aip_writeMem>

    return 0;
}
     30c:	0005883a 	mov	r2,zero
     310:	dfc00117 	ldw	ra,4(sp)
     314:	dec00204 	addi	sp,sp,8
     318:	f800283a 	ret

0000031c <ID00001001_readData>:

int32_t ID00001001_readData(uint32_t port, uint32_t *data, uint32_t size, uint32_t offset)
{
     31c:	defffe04 	addi	sp,sp,-8
    aip_readMem(port, MDATAOUT, data, size, offset);
     320:	d9c00015 	stw	r7,0(sp)
     324:	31ffffcc 	andi	r7,r6,65535
     328:	280d883a 	mov	r6,r5
     32c:	01400084 	movi	r5,2

    return 0;
}

int32_t ID00001001_readData(uint32_t port, uint32_t *data, uint32_t size, uint32_t offset)
{
     330:	dfc00115 	stw	ra,4(sp)
    aip_readMem(port, MDATAOUT, data, size, offset);
     334:	00005040 	call	504 <aip_readMem>

    return 0;
}
     338:	0005883a 	mov	r2,zero
     33c:	dfc00117 	ldw	ra,4(sp)
     340:	dec00204 	addi	sp,sp,8
     344:	f800283a 	ret

00000348 <ID00001001_getStatus>:

int32_t ID00001001_getStatus(uint32_t port, uint32_t *status)
{
     348:	deffff04 	addi	sp,sp,-4
     34c:	dfc00015 	stw	ra,0(sp)
    aip_getStatus(port, status);
     350:	00006180 	call	618 <aip_getStatus>

    return 0;
}
     354:	0005883a 	mov	r2,zero
     358:	dfc00017 	ldw	ra,0(sp)
     35c:	dec00104 	addi	sp,sp,4
     360:	f800283a 	ret

00000364 <ID00001001_waitDone>:

int32_t ID00001001_waitDone(uint32_t port)
{
     364:	defffd04 	addi	sp,sp,-12
     368:	dc000115 	stw	r16,4(sp)
     36c:	dfc00215 	stw	ra,8(sp)
     370:	2021883a 	mov	r16,r4
    uint32_t statusINT = 0;
     374:	d8000015 	stw	zero,0(sp)

    do
    {
        aip_getINT(port, &statusINT);
     378:	d80b883a 	mov	r5,sp
     37c:	8009883a 	mov	r4,r16
     380:	000078c0 	call	78c <aip_getINT>
    } while (!(statusINT && 0x1));
     384:	d8800017 	ldw	r2,0(sp)
     388:	103ffb26 	beq	r2,zero,378 <__alt_data_end+0xfffc1b78>

    return 0;
}
     38c:	0005883a 	mov	r2,zero
     390:	dfc00217 	ldw	ra,8(sp)
     394:	dc000117 	ldw	r16,4(sp)
     398:	dec00304 	addi	sp,sp,12
     39c:	f800283a 	ret

000003a0 <ID00001001_waitirq>:
{
    uint32_t statusINT = 0;

    do
    {
        asm("nop");
     3a0:	0001883a 	nop

    } while (!start_state);
     3a4:	d0a04417 	ldw	r2,-32496(gp)
     3a8:	103ffd26 	beq	r2,zero,3a0 <__alt_data_end+0xfffc1ba0>
    start_state = 0;
     3ac:	d0204415 	stw	zero,-32496(gp)
    return 0;
}
     3b0:	0005883a 	mov	r2,zero
     3b4:	f800283a 	ret

000003b8 <ID00004003_init>:

static int32_t ID00004003_clearStatus(uint32_t port);


int32_t ID00004003_init(uint32_t port)
{
     3b8:	defffe04 	addi	sp,sp,-8
    uint32_t id;

    //aip_init(port, ID00004003_csv, ID00004003_CONFIG_AMOUNT);

    aip_getID(port, &id);
     3bc:	d80b883a 	mov	r5,sp

static int32_t ID00004003_clearStatus(uint32_t port);


int32_t ID00004003_init(uint32_t port)
{
     3c0:	dfc00115 	stw	ra,4(sp)
    uint32_t id;

    //aip_init(port, ID00004003_csv, ID00004003_CONFIG_AMOUNT);

    aip_getID(port, &id);
     3c4:	00005f00 	call	5f0 <aip_getID>
    printf("The ID is: %x \n", id );
     3c8:	d9400017 	ldw	r5,0(sp)
     3cc:	01000034 	movhi	r4,0
     3d0:	21071a04 	addi	r4,r4,7272
     3d4:	0000eb80 	call	eb8 <printf>
    //ID00004003_clearStatus(port);

    return 0;
}
     3d8:	0005883a 	mov	r2,zero
     3dc:	dfc00117 	ldw	ra,4(sp)
     3e0:	dec00204 	addi	sp,sp,8
     3e4:	f800283a 	ret

000003e8 <ID00004003_startIP>:

int32_t ID00004003_startIP(uint32_t port)
{
     3e8:	deffff04 	addi	sp,sp,-4
     3ec:	dfc00015 	stw	ra,0(sp)
    aip_start(port);
     3f0:	00005e00 	call	5e0 <aip_start>

    return 0;
}
     3f4:	0005883a 	mov	r2,zero
     3f8:	dfc00017 	ldw	ra,0(sp)
     3fc:	dec00104 	addi	sp,sp,4
     400:	f800283a 	ret

00000404 <ID00004003_writeData>:

int32_t ID00004003_writeData(uint32_t port, uint32_t *data, uint32_t size, uint32_t offset)
{
     404:	defffe04 	addi	sp,sp,-8
    aip_writeMem(port, MDATAOUT, data, size, offset);
     408:	d9c00015 	stw	r7,0(sp)
     40c:	31ffffcc 	andi	r7,r6,65535
     410:	280d883a 	mov	r6,r5
     414:	01400084 	movi	r5,2

    return 0;
}

int32_t ID00004003_writeData(uint32_t port, uint32_t *data, uint32_t size, uint32_t offset)
{
     418:	dfc00115 	stw	ra,4(sp)
    aip_writeMem(port, MDATAOUT, data, size, offset);
     41c:	00005dc0 	call	5dc <aip_writeMem>

    return 0;
}
     420:	0005883a 	mov	r2,zero
     424:	dfc00117 	ldw	ra,4(sp)
     428:	dec00204 	addi	sp,sp,8
     42c:	f800283a 	ret

00000430 <ID00004003_readData>:

int32_t ID00004003_readData(uint32_t port, uint32_t *data, uint32_t size, uint32_t offset)
{
     430:	defffe04 	addi	sp,sp,-8
    aip_readMem(port, MDATAIN, data, size, offset);
     434:	d9c00015 	stw	r7,0(sp)
     438:	31ffffcc 	andi	r7,r6,65535
     43c:	280d883a 	mov	r6,r5
     440:	000b883a 	mov	r5,zero

    return 0;
}

int32_t ID00004003_readData(uint32_t port, uint32_t *data, uint32_t size, uint32_t offset)
{
     444:	dfc00115 	stw	ra,4(sp)
    aip_readMem(port, MDATAIN, data, size, offset);
     448:	00005040 	call	504 <aip_readMem>

    return 0;
}
     44c:	0005883a 	mov	r2,zero
     450:	dfc00117 	ldw	ra,4(sp)
     454:	dec00204 	addi	sp,sp,8
     458:	f800283a 	ret

0000045c <ID00004003_getStatus>:

int32_t ID00004003_getStatus(uint32_t port, uint32_t *status)
{
     45c:	deffff04 	addi	sp,sp,-4
     460:	dfc00015 	stw	ra,0(sp)
    aip_getStatus(port, status);
     464:	00006180 	call	618 <aip_getStatus>

    return 0;
}
     468:	0005883a 	mov	r2,zero
     46c:	dfc00017 	ldw	ra,0(sp)
     470:	dec00104 	addi	sp,sp,4
     474:	f800283a 	ret

00000478 <ID00004003_waitDone>:

int32_t ID00004003_waitDone(uint32_t port)
{
     478:	defffd04 	addi	sp,sp,-12
     47c:	dc000115 	stw	r16,4(sp)
     480:	dfc00215 	stw	ra,8(sp)
     484:	2021883a 	mov	r16,r4
    uint32_t statusINT = 0;
     488:	d8000015 	stw	zero,0(sp)

    do
    {
        aip_getINT(port, &statusINT);
     48c:	d80b883a 	mov	r5,sp
     490:	8009883a 	mov	r4,r16
     494:	000078c0 	call	78c <aip_getINT>
    } while (!(statusINT && 0x1));
     498:	d8800017 	ldw	r2,0(sp)
     49c:	103ffb26 	beq	r2,zero,48c <__alt_data_end+0xfffc1c8c>

    return 0;
}
     4a0:	0005883a 	mov	r2,zero
     4a4:	dfc00217 	ldw	ra,8(sp)
     4a8:	dc000117 	ldw	r16,4(sp)
     4ac:	dec00304 	addi	sp,sp,12
     4b0:	f800283a 	ret

000004b4 <aip_aipRead>:
static uint8_t aip_aipRead (void *aipBaseAddr, uint32_t config, uint32_t *data, uint32_t size )
{

    volatile uint32_t *reg32 = (volatile uint32_t *)aipBaseAddr;

    reg32[AIP_CONFIG] = config;
     4b4:	21400815 	stw	r5,32(r4)

    for (uint32_t i = 0; i < size; i++)
     4b8:	0005883a 	mov	r2,zero
     4bc:	11c00526 	beq	r2,r7,4d4 <aip_aipRead+0x20>
	{
		data[i] = reg32[AIP_DATAOUT];
     4c0:	20c00017 	ldw	r3,0(r4)

    volatile uint32_t *reg32 = (volatile uint32_t *)aipBaseAddr;

    reg32[AIP_CONFIG] = config;

    for (uint32_t i = 0; i < size; i++)
     4c4:	10800044 	addi	r2,r2,1
     4c8:	31800104 	addi	r6,r6,4
	{
		data[i] = reg32[AIP_DATAOUT];
     4cc:	30ffff15 	stw	r3,-4(r6)
     4d0:	003ffa06 	br	4bc <__alt_data_end+0xfffc1cbc>
	}

	return 0 ;
};
     4d4:	0005883a 	mov	r2,zero
     4d8:	f800283a 	ret

000004dc <aip_aipWrite>:
static uint8_t aip_aipWrite (void *aipBaseAddr, uint32_t config, uint32_t *data, uint32_t size)
{

    volatile uint32_t *reg32 = (volatile uint32_t *)aipBaseAddr;

    reg32[AIP_CONFIG] = config;
     4dc:	21400815 	stw	r5,32(r4)

    for (uint32_t i = 0; i < size; i++) {
     4e0:	0005883a 	mov	r2,zero
     4e4:	11c00526 	beq	r2,r7,4fc <aip_aipWrite+0x20>
        reg32[AIP_DATAIN] = data[i];
     4e8:	30c00017 	ldw	r3,0(r6)

    volatile uint32_t *reg32 = (volatile uint32_t *)aipBaseAddr;

    reg32[AIP_CONFIG] = config;

    for (uint32_t i = 0; i < size; i++) {
     4ec:	10800044 	addi	r2,r2,1
     4f0:	31800104 	addi	r6,r6,4
        reg32[AIP_DATAIN] = data[i];
     4f4:	20c00415 	stw	r3,16(r4)
     4f8:	003ffa06 	br	4e4 <__alt_data_end+0xfffc1ce4>
    }

	return 0 ;
};
     4fc:	0005883a 	mov	r2,zero
     500:	f800283a 	ret

00000504 <aip_readMem>:

    return 0;
}
*/
int8_t aip_readMem (void *aipBaseAddr, uint8_t configMem, uint32_t* dataRead, uint16_t amountData, uint32_t offset)
{
     504:	defffb04 	addi	sp,sp,-20
     508:	dcc00315 	stw	r19,12(sp)
     50c:	dc000015 	stw	r16,0(sp)
     510:	3827883a 	mov	r19,r7
    /* set addrs */
    aip_aipWrite((void *)aipBaseAddr, configMem+1, &offset, 1);
     514:	2c003fcc 	andi	r16,r5,255
     518:	01c00044 	movi	r7,1
     51c:	81cb883a 	add	r5,r16,r7

    return 0;
}
*/
int8_t aip_readMem (void *aipBaseAddr, uint8_t configMem, uint32_t* dataRead, uint16_t amountData, uint32_t offset)
{
     520:	dc800215 	stw	r18,8(sp)
     524:	3025883a 	mov	r18,r6
    /* set addrs */
    aip_aipWrite((void *)aipBaseAddr, configMem+1, &offset, 1);
     528:	d9800504 	addi	r6,sp,20

    return 0;
}
*/
int8_t aip_readMem (void *aipBaseAddr, uint8_t configMem, uint32_t* dataRead, uint16_t amountData, uint32_t offset)
{
     52c:	dfc00415 	stw	ra,16(sp)
     530:	dc400115 	stw	r17,4(sp)
     534:	2023883a 	mov	r17,r4
    /* set addrs */
    aip_aipWrite((void *)aipBaseAddr, configMem+1, &offset, 1);
     538:	00004dc0 	call	4dc <aip_aipWrite>

    /* write data */
    aip_aipRead((void *)aipBaseAddr, configMem, dataRead, amountData);
     53c:	99ffffcc 	andi	r7,r19,65535
     540:	900d883a 	mov	r6,r18
     544:	800b883a 	mov	r5,r16
     548:	8809883a 	mov	r4,r17
     54c:	00004b40 	call	4b4 <aip_aipRead>

    return 0;
}
     550:	0005883a 	mov	r2,zero
     554:	dfc00417 	ldw	ra,16(sp)
     558:	dcc00317 	ldw	r19,12(sp)
     55c:	dc800217 	ldw	r18,8(sp)
     560:	dc400117 	ldw	r17,4(sp)
     564:	dc000017 	ldw	r16,0(sp)
     568:	dec00504 	addi	sp,sp,20
     56c:	f800283a 	ret

00000570 <aip_writeConfReg>:

    return 0;
}

int8_t aip_writeConfReg (void *aipBaseAddr, uint8_t configConfReg, uint32_t* dataWrite, uint16_t amountData, uint32_t offset)
{
     570:	defffb04 	addi	sp,sp,-20
     574:	dcc00315 	stw	r19,12(sp)
     578:	dc000015 	stw	r16,0(sp)
     57c:	3827883a 	mov	r19,r7
    /* set addrs */
    aip_aipWrite((void *)aipBaseAddr, configConfReg+1, &offset, 1);
     580:	2c003fcc 	andi	r16,r5,255
     584:	01c00044 	movi	r7,1
     588:	81cb883a 	add	r5,r16,r7

    return 0;
}

int8_t aip_writeConfReg (void *aipBaseAddr, uint8_t configConfReg, uint32_t* dataWrite, uint16_t amountData, uint32_t offset)
{
     58c:	dc800215 	stw	r18,8(sp)
     590:	3025883a 	mov	r18,r6
    /* set addrs */
    aip_aipWrite((void *)aipBaseAddr, configConfReg+1, &offset, 1);
     594:	d9800504 	addi	r6,sp,20

    return 0;
}

int8_t aip_writeConfReg (void *aipBaseAddr, uint8_t configConfReg, uint32_t* dataWrite, uint16_t amountData, uint32_t offset)
{
     598:	dfc00415 	stw	ra,16(sp)
     59c:	dc400115 	stw	r17,4(sp)
     5a0:	2023883a 	mov	r17,r4
    /* set addrs */
    aip_aipWrite((void *)aipBaseAddr, configConfReg+1, &offset, 1);
     5a4:	00004dc0 	call	4dc <aip_aipWrite>

    /* write data */
    aip_aipWrite((void *)aipBaseAddr, configConfReg, dataWrite, amountData);
     5a8:	99ffffcc 	andi	r7,r19,65535
     5ac:	900d883a 	mov	r6,r18
     5b0:	800b883a 	mov	r5,r16
     5b4:	8809883a 	mov	r4,r17
     5b8:	00004dc0 	call	4dc <aip_aipWrite>

    return 0;
}
     5bc:	0005883a 	mov	r2,zero
     5c0:	dfc00417 	ldw	ra,16(sp)
     5c4:	dcc00317 	ldw	r19,12(sp)
     5c8:	dc800217 	ldw	r18,8(sp)
     5cc:	dc400117 	ldw	r17,4(sp)
     5d0:	dc000017 	ldw	r16,0(sp)
     5d4:	dec00504 	addi	sp,sp,20
     5d8:	f800283a 	ret

000005dc <aip_writeMem>:
     5dc:	00005701 	jmpi	570 <aip_writeConfReg>

000005e0 <aip_start>:

static uint8_t aip_aipStart (void *aipBaseAddr)
{
    volatile uint32_t *reg32 = (volatile uint32_t *)aipBaseAddr;

    reg32[AIP_START] = 0x1;
     5e0:	00800044 	movi	r2,1
     5e4:	20800c15 	stw	r2,48(r4)
int8_t aip_start (void *aipBaseAddr)
{
    aip_aipStart((void *)aipBaseAddr);

    return 0;
}
     5e8:	0005883a 	mov	r2,zero
     5ec:	f800283a 	ret

000005f0 <aip_getID>:

int8_t aip_getID (void *aipBaseAddr, uint32_t *id)
{
     5f0:	deffff04 	addi	sp,sp,-4
    aip_aipRead((void *)aipBaseAddr, AIP_IPID, id, 1);
     5f4:	280d883a 	mov	r6,r5
     5f8:	01c00044 	movi	r7,1
     5fc:	014007c4 	movi	r5,31

    return 0;
}

int8_t aip_getID (void *aipBaseAddr, uint32_t *id)
{
     600:	dfc00015 	stw	ra,0(sp)
    aip_aipRead((void *)aipBaseAddr, AIP_IPID, id, 1);
     604:	00004b40 	call	4b4 <aip_aipRead>

    return 0;
}
     608:	0005883a 	mov	r2,zero
     60c:	dfc00017 	ldw	ra,0(sp)
     610:	dec00104 	addi	sp,sp,4
     614:	f800283a 	ret

00000618 <aip_getStatus>:

int8_t aip_getStatus (void *aipBaseAddr, uint32_t* status)
{
     618:	deffff04 	addi	sp,sp,-4
    aip_aipRead((void *)aipBaseAddr, AIP_STATUS, status, 1);
     61c:	280d883a 	mov	r6,r5
     620:	01c00044 	movi	r7,1
     624:	01400784 	movi	r5,30

    return 0;
}

int8_t aip_getStatus (void *aipBaseAddr, uint32_t* status)
{
     628:	dfc00015 	stw	ra,0(sp)
    aip_aipRead((void *)aipBaseAddr, AIP_STATUS, status, 1);
     62c:	00004b40 	call	4b4 <aip_aipRead>

    return 0;
}
     630:	0005883a 	mov	r2,zero
     634:	dfc00017 	ldw	ra,0(sp)
     638:	dec00104 	addi	sp,sp,4
     63c:	f800283a 	ret

00000640 <aip_enableINT>:

int8_t aip_enableINT (void *aipBaseAddr, uint8_t idxInt)
{
     640:	defffa04 	addi	sp,sp,-24
     644:	dc800315 	stw	r18,12(sp)
     648:	dc400215 	stw	r17,8(sp)
    uint32_t status = 0;

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     64c:	04800784 	movi	r18,30
     650:	04400044 	movi	r17,1

    return 0;
}

int8_t aip_enableINT (void *aipBaseAddr, uint8_t idxInt)
{
     654:	dc000115 	stw	r16,4(sp)
    uint32_t status = 0;

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     658:	880f883a 	mov	r7,r17
     65c:	d80d883a 	mov	r6,sp

    return 0;
}

int8_t aip_enableINT (void *aipBaseAddr, uint8_t idxInt)
{
     660:	2821883a 	mov	r16,r5
    uint32_t status = 0;

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     664:	900b883a 	mov	r5,r18

    return 0;
}

int8_t aip_enableINT (void *aipBaseAddr, uint8_t idxInt)
{
     668:	dfc00515 	stw	ra,20(sp)
     66c:	dcc00415 	stw	r19,16(sp)
    uint32_t status = 0;
     670:	d8000015 	stw	zero,0(sp)

    return 0;
}

int8_t aip_enableINT (void *aipBaseAddr, uint8_t idxInt)
{
     674:	2027883a 	mov	r19,r4

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);

    status &= AIP_STATUS_MASK_MASK;

    status |= (1 << (idxInt+AIP_STATUS_SHIFT_MASK));
     678:	84003fcc 	andi	r16,r16,255

int8_t aip_enableINT (void *aipBaseAddr, uint8_t idxInt)
{
    uint32_t status = 0;

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     67c:	00004b40 	call	4b4 <aip_aipRead>

    status &= AIP_STATUS_MASK_MASK;

    status |= (1 << (idxInt+AIP_STATUS_SHIFT_MASK));
     680:	d8800017 	ldw	r2,0(sp)
     684:	84000404 	addi	r16,r16,16
     688:	8c20983a 	sll	r16,r17,r16
     68c:	10803fec 	andhi	r2,r2,255

    aip_aipWrite((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     690:	880f883a 	mov	r7,r17

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);

    status &= AIP_STATUS_MASK_MASK;

    status |= (1 << (idxInt+AIP_STATUS_SHIFT_MASK));
     694:	1420b03a 	or	r16,r2,r16

    aip_aipWrite((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     698:	d80d883a 	mov	r6,sp
     69c:	900b883a 	mov	r5,r18
     6a0:	9809883a 	mov	r4,r19

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);

    status &= AIP_STATUS_MASK_MASK;

    status |= (1 << (idxInt+AIP_STATUS_SHIFT_MASK));
     6a4:	dc000015 	stw	r16,0(sp)

    aip_aipWrite((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     6a8:	00004dc0 	call	4dc <aip_aipWrite>

    return 0;
}
     6ac:	0005883a 	mov	r2,zero
     6b0:	dfc00517 	ldw	ra,20(sp)
     6b4:	dcc00417 	ldw	r19,16(sp)
     6b8:	dc800317 	ldw	r18,12(sp)
     6bc:	dc400217 	ldw	r17,8(sp)
     6c0:	dc000117 	ldw	r16,4(sp)
     6c4:	dec00604 	addi	sp,sp,24
     6c8:	f800283a 	ret

000006cc <aip_disableINT>:

int8_t aip_disableINT (void *aipBaseAddr, uint8_t idxInt)
{
     6cc:	defffa04 	addi	sp,sp,-24
     6d0:	dc800315 	stw	r18,12(sp)
     6d4:	dc400215 	stw	r17,8(sp)
     6d8:	dc000115 	stw	r16,4(sp)
    uint32_t status = 0;

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     6dc:	04400044 	movi	r17,1
     6e0:	04800784 	movi	r18,30

    return 0;
}

int8_t aip_disableINT (void *aipBaseAddr, uint8_t idxInt)
{
     6e4:	2821883a 	mov	r16,r5
    uint32_t status = 0;

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     6e8:	880f883a 	mov	r7,r17
     6ec:	d80d883a 	mov	r6,sp
     6f0:	900b883a 	mov	r5,r18

    status &= AIP_STATUS_MASK_MASK;

    status &= ~(uint32_t)(1 << (idxInt+AIP_STATUS_SHIFT_MASK));
     6f4:	84003fcc 	andi	r16,r16,255

    return 0;
}

int8_t aip_disableINT (void *aipBaseAddr, uint8_t idxInt)
{
     6f8:	dfc00515 	stw	ra,20(sp)
     6fc:	dcc00415 	stw	r19,16(sp)
    uint32_t status = 0;
     700:	d8000015 	stw	zero,0(sp)

    return 0;
}

int8_t aip_disableINT (void *aipBaseAddr, uint8_t idxInt)
{
     704:	2027883a 	mov	r19,r4

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);

    status &= AIP_STATUS_MASK_MASK;

    status &= ~(uint32_t)(1 << (idxInt+AIP_STATUS_SHIFT_MASK));
     708:	84000404 	addi	r16,r16,16

int8_t aip_disableINT (void *aipBaseAddr, uint8_t idxInt)
{
    uint32_t status = 0;

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     70c:	00004b40 	call	4b4 <aip_aipRead>

    status &= AIP_STATUS_MASK_MASK;

    status &= ~(uint32_t)(1 << (idxInt+AIP_STATUS_SHIFT_MASK));
     710:	d8800017 	ldw	r2,0(sp)
     714:	8c20983a 	sll	r16,r17,r16

    aip_aipWrite((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     718:	880f883a 	mov	r7,r17

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);

    status &= AIP_STATUS_MASK_MASK;

    status &= ~(uint32_t)(1 << (idxInt+AIP_STATUS_SHIFT_MASK));
     71c:	10803fec 	andhi	r2,r2,255
     720:	0420303a 	nor	r16,zero,r16
     724:	80a0703a 	and	r16,r16,r2

    aip_aipWrite((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     728:	d80d883a 	mov	r6,sp
     72c:	900b883a 	mov	r5,r18
     730:	9809883a 	mov	r4,r19

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);

    status &= AIP_STATUS_MASK_MASK;

    status &= ~(uint32_t)(1 << (idxInt+AIP_STATUS_SHIFT_MASK));
     734:	dc000015 	stw	r16,0(sp)

    aip_aipWrite((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     738:	00004dc0 	call	4dc <aip_aipWrite>

    return 0;
}
     73c:	0005883a 	mov	r2,zero
     740:	dfc00517 	ldw	ra,20(sp)
     744:	dcc00417 	ldw	r19,16(sp)
     748:	dc800317 	ldw	r18,12(sp)
     74c:	dc400217 	ldw	r17,8(sp)
     750:	dc000117 	ldw	r16,4(sp)
     754:	dec00604 	addi	sp,sp,24
     758:	f800283a 	ret

0000075c <aip_clearINT>:
    aip_aipWrite((void *)aipBaseAddr, AIP_STATUS, &status, 1);

    return 0;
}*/
int8_t aip_clearINT (void *aipBaseAddr, uint8_t idxInt)
{
     75c:	defffe04 	addi	sp,sp,-8

    //aip_aipRead(aipBaseAddr, AIP_STATUS, &status, 1);

    //status = (status & (AIP_STATUS_MASK_NU | AIP_STATUS_MASK_MASK | AIP_STATUS_MASK_NOTIFICATION)) | (uint32_t)(1 << idxInt);

    status = ((0xffffffff));
     760:	00bfffc4 	movi	r2,-1

    aip_aipWrite(aipBaseAddr, AIP_STATUS, &status, 1);
     764:	01c00044 	movi	r7,1
     768:	d80d883a 	mov	r6,sp
     76c:	01400784 	movi	r5,30
    aip_aipWrite((void *)aipBaseAddr, AIP_STATUS, &status, 1);

    return 0;
}*/
int8_t aip_clearINT (void *aipBaseAddr, uint8_t idxInt)
{
     770:	dfc00115 	stw	ra,4(sp)

    //aip_aipRead(aipBaseAddr, AIP_STATUS, &status, 1);

    //status = (status & (AIP_STATUS_MASK_NU | AIP_STATUS_MASK_MASK | AIP_STATUS_MASK_NOTIFICATION)) | (uint32_t)(1 << idxInt);

    status = ((0xffffffff));
     774:	d8800015 	stw	r2,0(sp)

    aip_aipWrite(aipBaseAddr, AIP_STATUS, &status, 1);
     778:	00004dc0 	call	4dc <aip_aipWrite>

    return 0;
}
     77c:	0005883a 	mov	r2,zero
     780:	dfc00117 	ldw	ra,4(sp)
     784:	dec00204 	addi	sp,sp,8
     788:	f800283a 	ret

0000078c <aip_getINT>:
int8_t aip_getINT (void *aipBaseAddr, uint8_t* intVector)
{
     78c:	defffd04 	addi	sp,sp,-12
     790:	dc000115 	stw	r16,4(sp)
    uint32_t status = 0;

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     794:	01c00044 	movi	r7,1
    aip_aipWrite(aipBaseAddr, AIP_STATUS, &status, 1);

    return 0;
}
int8_t aip_getINT (void *aipBaseAddr, uint8_t* intVector)
{
     798:	2821883a 	mov	r16,r5
    uint32_t status = 0;

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     79c:	d80d883a 	mov	r6,sp
     7a0:	01400784 	movi	r5,30
    aip_aipWrite(aipBaseAddr, AIP_STATUS, &status, 1);

    return 0;
}
int8_t aip_getINT (void *aipBaseAddr, uint8_t* intVector)
{
     7a4:	dfc00215 	stw	ra,8(sp)
    uint32_t status = 0;
     7a8:	d8000015 	stw	zero,0(sp)

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     7ac:	00004b40 	call	4b4 <aip_aipRead>

    *intVector = (uint8_t)(status & AIP_STATUS_MASK_INT);
     7b0:	d8800017 	ldw	r2,0(sp)
     7b4:	80800005 	stb	r2,0(r16)

    return 0;
}
     7b8:	0005883a 	mov	r2,zero
     7bc:	dfc00217 	ldw	ra,8(sp)
     7c0:	dc000117 	ldw	r16,4(sp)
     7c4:	dec00304 	addi	sp,sp,12
     7c8:	f800283a 	ret

000007cc <aip_getNotifications>:

int8_t aip_getNotifications(void *aipBaseAddr, uint8_t* notificationsVector)
{
     7cc:	defffd04 	addi	sp,sp,-12
     7d0:	dc000115 	stw	r16,4(sp)
    uint32_t status = 0;

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     7d4:	01c00044 	movi	r7,1

    return 0;
}

int8_t aip_getNotifications(void *aipBaseAddr, uint8_t* notificationsVector)
{
     7d8:	2821883a 	mov	r16,r5
    uint32_t status = 0;

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     7dc:	d80d883a 	mov	r6,sp
     7e0:	01400784 	movi	r5,30

    return 0;
}

int8_t aip_getNotifications(void *aipBaseAddr, uint8_t* notificationsVector)
{
     7e4:	dfc00215 	stw	ra,8(sp)
    uint32_t status = 0;
     7e8:	d8000015 	stw	zero,0(sp)

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);
     7ec:	00004b40 	call	4b4 <aip_aipRead>

    *notificationsVector = (uint8_t)((status & AIP_STATUS_MASK_NOTIFICATION) >> AIP_STATUS_SHIFT_NOTIFICATION);

    return 0;
}
     7f0:	0005883a 	mov	r2,zero
{
    uint32_t status = 0;

    aip_aipRead ((void *)aipBaseAddr, AIP_STATUS, &status, 1);

    *notificationsVector = (uint8_t)((status & AIP_STATUS_MASK_NOTIFICATION) >> AIP_STATUS_SHIFT_NOTIFICATION);
     7f4:	80000005 	stb	zero,0(r16)

    return 0;
}
     7f8:	dfc00217 	ldw	ra,8(sp)
     7fc:	dc000117 	ldw	r16,4(sp)
     800:	dec00304 	addi	sp,sp,12
     804:	f800283a 	ret

00000808 <int_isr>:
        (void *) INT_IP_S0_BASE,
        0x00);

}

void int_isr(void * context) {
     808:	defffa04 	addi	sp,sp,-24
     80c:	dcc00315 	stw	r19,12(sp)
    alt_u32 base = (alt_u32)context;

    alt_u32 edge_status = IORD_ALTERA_AVALON_PIO_EDGE_CAP(base);
     810:	24c00304 	addi	r19,r4,12
        (void *) INT_IP_S0_BASE,
        0x00);

}

void int_isr(void * context) {
     814:	dfc00515 	stw	ra,20(sp)
     818:	dd000415 	stw	r20,16(sp)
     81c:	dc800215 	stw	r18,8(sp)
     820:	dc400115 	stw	r17,4(sp)
     824:	dc000015 	stw	r16,0(sp)
    alt_u32 base = (alt_u32)context;

    alt_u32 edge_status = IORD_ALTERA_AVALON_PIO_EDGE_CAP(base);
     828:	9c800037 	ldwio	r18,0(r19)

    if(edge_status) {
     82c:	90001126 	beq	r18,zero,874 <int_isr+0x6c>
        start_state = 1;

        printf("Start DETECTED!\n");
     830:	01000034 	movhi	r4,0
    alt_u32 base = (alt_u32)context;

    alt_u32 edge_status = IORD_ALTERA_AVALON_PIO_EDGE_CAP(base);

    if(edge_status) {
        start_state = 1;
     834:	04400044 	movi	r17,1

        printf("Start DETECTED!\n");
     838:	21071e04 	addi	r4,r4,7288
    alt_u32 base = (alt_u32)context;

    alt_u32 edge_status = IORD_ALTERA_AVALON_PIO_EDGE_CAP(base);

    if(edge_status) {
        start_state = 1;
     83c:	d4604415 	stw	r17,-32496(gp)

        printf("Start DETECTED!\n");

        for(int i = 0; i < 32; i++) {
     840:	0021883a 	mov	r16,zero
    alt_u32 edge_status = IORD_ALTERA_AVALON_PIO_EDGE_CAP(base);

    if(edge_status) {
        start_state = 1;

        printf("Start DETECTED!\n");
     844:	0000fa80 	call	fa8 <puts>

        for(int i = 0; i < 32; i++) {
     848:	05000804 	movi	r20,32
            if(edge_status & (1 << i)) {
     84c:	8c04983a 	sll	r2,r17,r16
     850:	1484703a 	and	r2,r2,r18
     854:	10000426 	beq	r2,zero,868 <int_isr+0x60>
                printf("Line %d activated!\n", i);
     858:	01000034 	movhi	r4,0
     85c:	800b883a 	mov	r5,r16
     860:	21072204 	addi	r4,r4,7304
     864:	0000eb80 	call	eb8 <printf>
    if(edge_status) {
        start_state = 1;

        printf("Start DETECTED!\n");

        for(int i = 0; i < 32; i++) {
     868:	84000044 	addi	r16,r16,1
     86c:	853ff71e 	bne	r16,r20,84c <__alt_data_end+0xfffc204c>
            if(edge_status & (1 << i)) {
                printf("Line %d activated!\n", i);
            }
        }
        IOWR_ALTERA_AVALON_PIO_EDGE_CAP(base, edge_status);
     870:	9c800035 	stwio	r18,0(r19)
    }
}
     874:	dfc00517 	ldw	ra,20(sp)
     878:	dd000417 	ldw	r20,16(sp)
     87c:	dcc00317 	ldw	r19,12(sp)
     880:	dc800217 	ldw	r18,8(sp)
     884:	dc400117 	ldw	r17,4(sp)
     888:	dc000017 	ldw	r16,0(sp)
     88c:	dec00604 	addi	sp,sp,24
     890:	f800283a 	ret

00000894 <start_isr>:
void start_isr(void * context){

		volatile int * edge_ptr;
		edge_ptr = (volatile int *) context;

		*edge_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(START_UP_BASE);
     894:	00800134 	movhi	r2,4
     898:	10982b04 	addi	r2,r2,24748
     89c:	10c00037 	ldwio	r3,0(r2)
     8a0:	20c00015 	stw	r3,0(r4)

		IOWR_ALTERA_AVALON_PIO_EDGE_CAP(START_UP_BASE, 0);
     8a4:	10000035 	stwio	zero,0(r2)

#ifdef 	PRINTF
		printf("------------start DETECTED ------------ \n");
#endif
		start_state=1;
     8a8:	00800044 	movi	r2,1
     8ac:	d0a04415 	stw	r2,-32496(gp)
     8b0:	f800283a 	ret

000008b4 <int_setup>:

    return 0;
}


void int_setup(void) {
     8b4:	defffe04 	addi	sp,sp,-8
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(INT_IP_S0_BASE, 0x07);
     8b8:	00800134 	movhi	r2,4

    return 0;
}


void int_setup(void) {
     8bc:	dfc00115 	stw	ra,4(sp)
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(INT_IP_S0_BASE, 0x07);
     8c0:	10982604 	addi	r2,r2,24728
     8c4:	00c001c4 	movi	r3,7
     8c8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(INT_IP_S0_BASE, 0x00);
     8cc:	00800134 	movhi	r2,4
     8d0:	10982704 	addi	r2,r2,24732
     8d4:	10000035 	stwio	zero,0(r2)

    alt_ic_isr_register(
     8d8:	01c00134 	movhi	r7,4
     8dc:	01800034 	movhi	r6,0
     8e0:	d8000015 	stw	zero,0(sp)
     8e4:	39d82404 	addi	r7,r7,24720
     8e8:	31820204 	addi	r6,r6,2056
     8ec:	014000c4 	movi	r5,3
     8f0:	0009883a 	mov	r4,zero
     8f4:	00019240 	call	1924 <alt_ic_isr_register>
        INT_IP_S0_IRQ,
		int_isr,
        (void *) INT_IP_S0_BASE,
        0x00);

}
     8f8:	dfc00117 	ldw	ra,4(sp)
     8fc:	dec00204 	addi	sp,sp,8
     900:	f800283a 	ret

00000904 <start_setup>:
    }
}



void start_setup(void){
     904:	defffe04 	addi	sp,sp,-8

		IOWR_ALTERA_AVALON_PIO_IRQ_MASK(START_UP_BASE, 0x01);
     908:	00800134 	movhi	r2,4
    }
}



void start_setup(void){
     90c:	dfc00115 	stw	ra,4(sp)

		IOWR_ALTERA_AVALON_PIO_IRQ_MASK(START_UP_BASE, 0x01);
     910:	01400044 	movi	r5,1
     914:	10982a04 	addi	r2,r2,24744
     918:	11400035 	stwio	r5,0(r2)
		IOWR_ALTERA_AVALON_PIO_EDGE_CAP(START_UP_BASE, 0x00);
     91c:	00800134 	movhi	r2,4
     920:	10982b04 	addi	r2,r2,24748
     924:	10000035 	stwio	zero,0(r2)
		void * edge_val_ptr;
		edge_val_ptr = (void *) &edge_val;

		alt_ic_isr_register(
     928:	01800034 	movhi	r6,0
     92c:	d8000015 	stw	zero,0(sp)
     930:	d1e04504 	addi	r7,gp,-32492
     934:	31822504 	addi	r6,r6,2196
     938:	0009883a 	mov	r4,zero
     93c:	00019240 	call	1924 <alt_ic_isr_register>
				START_UP_IRQ_INTERRUPT_CONTROLLER_ID,
				START_UP_IRQ,
				start_isr,
				edge_val_ptr,
				0x00);
}
     940:	dfc00117 	ldw	ra,4(sp)
     944:	dec00204 	addi	sp,sp,8
     948:	f800283a 	ret

0000094c <main>:
void int_setup();
void start_setup();


int main(void)
{
     94c:	defff004 	addi	sp,sp,-64
     950:	dfc00f15 	stw	ra,60(sp)
     954:	dc400e15 	stw	r17,56(sp)
     958:	dc000d15 	stw	r16,52(sp)

	start_state = 0;
     95c:	d0204415 	stw	zero,-32496(gp)
    uint32_t dataFlit = 0;
     960:	d8000c15 	stw	zero,48(sp)

    uint32_t data[4];



    int_setup();
     964:	00008b40 	call	8b4 <int_setup>
    start_setup();
     968:	00009040 	call	904 <start_setup>

    ID00001001_init(DUMMY_0);
     96c:	01000134 	movhi	r4,4
     970:	21140004 	addi	r4,r4,20480
     974:	00001bc0 	call	1bc <ID00001001_init>
    ID00001001_init(DUMMY_1);
     978:	01000134 	movhi	r4,4
     97c:	21160004 	addi	r4,r4,22528
     980:	00001bc0 	call	1bc <ID00001001_init>
    ID00001001_init(DUMMY_2);
     984:	01000134 	movhi	r4,4
     988:	21150004 	addi	r4,r4,21504
     98c:	00001bc0 	call	1bc <ID00001001_init>
  
    ID00001001_getStatus(DUMMY_0, &dataFlit);
     990:	01000134 	movhi	r4,4
     994:	d9400c04 	addi	r5,sp,48
     998:	21140004 	addi	r4,r4,20480
     99c:	00003480 	call	348 <ID00001001_getStatus>

    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
    {
        dataFlits[i] = 1<<i;
     9a0:	00800044 	movi	r2,1
     9a4:	d8800015 	stw	r2,0(sp)
     9a8:	00800084 	movi	r2,2
     9ac:	d8800115 	stw	r2,4(sp)
     9b0:	00800104 	movi	r2,4
     9b4:	d8800215 	stw	r2,8(sp)
     9b8:	00800404 	movi	r2,16
     9bc:	d8800415 	stw	r2,16(sp)
     9c0:	00800804 	movi	r2,32
     9c4:	04400204 	movi	r17,8
     9c8:	d8800515 	stw	r2,20(sp)
    }

    ID00001001_writeData(DUMMY_0, dataFlits, DUMMY_MEM_SIZE, 0);
     9cc:	01000134 	movhi	r4,4
  
    ID00001001_getStatus(DUMMY_0, &dataFlit);

    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
    {
        dataFlits[i] = 1<<i;
     9d0:	00801004 	movi	r2,64
     9d4:	d8800615 	stw	r2,24(sp)
    }

    ID00001001_writeData(DUMMY_0, dataFlits, DUMMY_MEM_SIZE, 0);
     9d8:	000f883a 	mov	r7,zero
  
    ID00001001_getStatus(DUMMY_0, &dataFlit);

    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
    {
        dataFlits[i] = 1<<i;
     9dc:	00802004 	movi	r2,128
    }

    ID00001001_writeData(DUMMY_0, dataFlits, DUMMY_MEM_SIZE, 0);
     9e0:	880d883a 	mov	r6,r17
     9e4:	d80b883a 	mov	r5,sp
     9e8:	21140004 	addi	r4,r4,20480
  
    ID00001001_getStatus(DUMMY_0, &dataFlit);

    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
    {
        dataFlits[i] = 1<<i;
     9ec:	dc400315 	stw	r17,12(sp)
     9f0:	d8800715 	stw	r2,28(sp)
    }

    ID00001001_writeData(DUMMY_0, dataFlits, DUMMY_MEM_SIZE, 0);


    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
     9f4:	0021883a 	mov	r16,zero
    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
    {
        dataFlits[i] = 1<<i;
    }

    ID00001001_writeData(DUMMY_0, dataFlits, DUMMY_MEM_SIZE, 0);
     9f8:	00002f00 	call	2f0 <ID00001001_writeData>


    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
    {
        dataFlits[i] = i;
     9fc:	8405883a 	add	r2,r16,r16
     a00:	1085883a 	add	r2,r2,r2
     a04:	d885883a 	add	r2,sp,r2
     a08:	14000015 	stw	r16,0(r2)
    }

    ID00001001_writeData(DUMMY_0, dataFlits, DUMMY_MEM_SIZE, 0);


    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
     a0c:	84000044 	addi	r16,r16,1
     a10:	847ffa1e 	bne	r16,r17,9fc <__alt_data_end+0xfffc21fc>
    {
        dataFlits[i] = i;
    }

    ID00001001_writeData(DUMMY_1, dataFlits, DUMMY_MEM_SIZE, 0);
     a14:	01000134 	movhi	r4,4
     a18:	000f883a 	mov	r7,zero
     a1c:	800d883a 	mov	r6,r16
     a20:	d80b883a 	mov	r5,sp
     a24:	21160004 	addi	r4,r4,22528
     a28:	00002f00 	call	2f0 <ID00001001_writeData>


    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
    {
        dataFlits[i] = 7-i;
     a2c:	008001c4 	movi	r2,7
     a30:	d8800015 	stw	r2,0(sp)
     a34:	00800184 	movi	r2,6
     a38:	d8800115 	stw	r2,4(sp)
     a3c:	00800144 	movi	r2,5
     a40:	d8800215 	stw	r2,8(sp)
     a44:	00800104 	movi	r2,4
     a48:	d8800315 	stw	r2,12(sp)
     a4c:	008000c4 	movi	r2,3
     a50:	d8800415 	stw	r2,16(sp)
    }

    ID00001001_writeData(DUMMY_2, dataFlits, DUMMY_MEM_SIZE, 0);
     a54:	01000134 	movhi	r4,4
    ID00001001_writeData(DUMMY_1, dataFlits, DUMMY_MEM_SIZE, 0);


    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
    {
        dataFlits[i] = 7-i;
     a58:	00800084 	movi	r2,2
    }

    ID00001001_writeData(DUMMY_2, dataFlits, DUMMY_MEM_SIZE, 0);
     a5c:	000f883a 	mov	r7,zero
     a60:	800d883a 	mov	r6,r16
    ID00001001_writeData(DUMMY_1, dataFlits, DUMMY_MEM_SIZE, 0);


    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
    {
        dataFlits[i] = 7-i;
     a64:	d8800515 	stw	r2,20(sp)
    }

    ID00001001_writeData(DUMMY_2, dataFlits, DUMMY_MEM_SIZE, 0);
     a68:	d80b883a 	mov	r5,sp
    ID00001001_writeData(DUMMY_1, dataFlits, DUMMY_MEM_SIZE, 0);


    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
    {
        dataFlits[i] = 7-i;
     a6c:	00800044 	movi	r2,1
    }

    ID00001001_writeData(DUMMY_2, dataFlits, DUMMY_MEM_SIZE, 0);
     a70:	21150004 	addi	r4,r4,21504
    ID00001001_writeData(DUMMY_1, dataFlits, DUMMY_MEM_SIZE, 0);


    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
    {
        dataFlits[i] = 7-i;
     a74:	d8800615 	stw	r2,24(sp)
     a78:	d8000715 	stw	zero,28(sp)
    }

    ID00001001_writeData(DUMMY_2, dataFlits, DUMMY_MEM_SIZE, 0);
     a7c:	00002f00 	call	2f0 <ID00001001_writeData>

    ID00001001_enableDelay(DUMMY_0, 10000);
     a80:	01000134 	movhi	r4,4
     a84:	0149c404 	movi	r5,10000
     a88:	21140004 	addi	r4,r4,20480
     a8c:	00002300 	call	230 <ID00001001_enableDelay>

    ID00001001_startIP(DUMMY_0);
     a90:	01000134 	movhi	r4,4
     a94:	21140004 	addi	r4,r4,20480
     a98:	00002d40 	call	2d4 <ID00001001_startIP>

    ID00001001_getStatus(DUMMY_0, &dataFlit);
     a9c:	01000134 	movhi	r4,4
     aa0:	d9400c04 	addi	r5,sp,48
     aa4:	21140004 	addi	r4,r4,20480
     aa8:	00003480 	call	348 <ID00001001_getStatus>

    ID00001001_waitirq(DUMMY_0);
     aac:	01000134 	movhi	r4,4
     ab0:	21140004 	addi	r4,r4,20480
     ab4:	00003a00 	call	3a0 <ID00001001_waitirq>

    ID00001001_getStatus(DUMMY_0, &dataFlit);
     ab8:	01000134 	movhi	r4,4
     abc:	d9400c04 	addi	r5,sp,48
     ac0:	21140004 	addi	r4,r4,20480
     ac4:	00003480 	call	348 <ID00001001_getStatus>
     ac8:	0005883a 	mov	r2,zero

    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
     acc:	00c00804 	movi	r3,32
    {
        dataFlits[i] = 0;
     ad0:	d889883a 	add	r4,sp,r2
     ad4:	20000015 	stw	zero,0(r4)
     ad8:	10800104 	addi	r2,r2,4

    ID00001001_waitirq(DUMMY_0);

    ID00001001_getStatus(DUMMY_0, &dataFlit);

    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
     adc:	10fffc1e 	bne	r2,r3,ad0 <__alt_data_end+0xfffc22d0>
    {
        dataFlits[i] = 0;
    }
    ID00001001_readData(DUMMY_0, dataFlits, DUMMY_MEM_SIZE, 0);
     ae0:	01000134 	movhi	r4,4
     ae4:	000f883a 	mov	r7,zero
     ae8:	01800204 	movi	r6,8
     aec:	d80b883a 	mov	r5,sp
     af0:	21140004 	addi	r4,r4,20480
     af4:	000031c0 	call	31c <ID00001001_readData>
    
    printf("Data in Dummy 0:\n");
     af8:	01000034 	movhi	r4,0
     afc:	21072704 	addi	r4,r4,7324
     b00:	0000fa80 	call	fa8 <puts>

    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
     b04:	0021883a 	mov	r16,zero
     b08:	04400204 	movi	r17,8
    {
        printf("Data[%i]: %x ", i, dataFlits[i]);
     b0c:	8405883a 	add	r2,r16,r16
     b10:	1085883a 	add	r2,r2,r2
     b14:	d885883a 	add	r2,sp,r2
     b18:	11800017 	ldw	r6,0(r2)
     b1c:	01000034 	movhi	r4,0
     b20:	800b883a 	mov	r5,r16
     b24:	21072c04 	addi	r4,r4,7344
    }
    ID00001001_readData(DUMMY_0, dataFlits, DUMMY_MEM_SIZE, 0);
    
    printf("Data in Dummy 0:\n");

    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
     b28:	84000044 	addi	r16,r16,1
    {
        printf("Data[%i]: %x ", i, dataFlits[i]);
     b2c:	0000eb80 	call	eb8 <printf>
    }
    ID00001001_readData(DUMMY_0, dataFlits, DUMMY_MEM_SIZE, 0);
    
    printf("Data in Dummy 0:\n");

    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
     b30:	847ff61e 	bne	r16,r17,b0c <__alt_data_end+0xfffc230c>
    {
        printf("Data[%i]: %x ", i, dataFlits[i]);
    }
    printf("\n");
     b34:	01000284 	movi	r4,10
     b38:	0000f0c0 	call	f0c <putchar>

    ID00001001_enableDelay(DUMMY_1, 10000);
     b3c:	01000134 	movhi	r4,4
     b40:	0149c404 	movi	r5,10000
     b44:	21160004 	addi	r4,r4,22528
     b48:	00002300 	call	230 <ID00001001_enableDelay>

    ID00001001_startIP(DUMMY_1);
     b4c:	01000134 	movhi	r4,4
     b50:	21160004 	addi	r4,r4,22528
     b54:	00002d40 	call	2d4 <ID00001001_startIP>

    ID00001001_getStatus(DUMMY_1, &dataFlit);
     b58:	01000134 	movhi	r4,4
     b5c:	d9400c04 	addi	r5,sp,48
     b60:	21160004 	addi	r4,r4,22528
     b64:	00003480 	call	348 <ID00001001_getStatus>

    ID00001001_waitirq(DUMMY_1);
     b68:	01000134 	movhi	r4,4
     b6c:	21160004 	addi	r4,r4,22528
     b70:	00003a00 	call	3a0 <ID00001001_waitirq>

   // ID00001001_waitDone(DUMMY_1);

    ID00001001_getStatus(DUMMY_1, &dataFlit);
     b74:	01000134 	movhi	r4,4
     b78:	d9400c04 	addi	r5,sp,48
     b7c:	21160004 	addi	r4,r4,22528
     b80:	00003480 	call	348 <ID00001001_getStatus>
     b84:	0005883a 	mov	r2,zero

    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
     b88:	00c00804 	movi	r3,32
    {
        dataFlits[i] = 0;
     b8c:	d889883a 	add	r4,sp,r2
     b90:	20000015 	stw	zero,0(r4)
     b94:	10800104 	addi	r2,r2,4

   // ID00001001_waitDone(DUMMY_1);

    ID00001001_getStatus(DUMMY_1, &dataFlit);

    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
     b98:	10fffc1e 	bne	r2,r3,b8c <__alt_data_end+0xfffc238c>
    {
        dataFlits[i] = 0;
    }
    ID00001001_readData(DUMMY_1, dataFlits, DUMMY_MEM_SIZE, 0);
     b9c:	01000134 	movhi	r4,4
     ba0:	000f883a 	mov	r7,zero
     ba4:	01800204 	movi	r6,8
     ba8:	d80b883a 	mov	r5,sp
     bac:	21160004 	addi	r4,r4,22528
     bb0:	000031c0 	call	31c <ID00001001_readData>
  
    printf("Data in Dummy 1:\n");
     bb4:	01000034 	movhi	r4,0
     bb8:	21073004 	addi	r4,r4,7360
     bbc:	0000fa80 	call	fa8 <puts>

    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
     bc0:	0021883a 	mov	r16,zero
     bc4:	04400204 	movi	r17,8
    {
        printf("Data[%i]: %x ", i, dataFlits[i]);
     bc8:	8405883a 	add	r2,r16,r16
     bcc:	1085883a 	add	r2,r2,r2
     bd0:	d885883a 	add	r2,sp,r2
     bd4:	11800017 	ldw	r6,0(r2)
     bd8:	01000034 	movhi	r4,0
     bdc:	800b883a 	mov	r5,r16
     be0:	21072c04 	addi	r4,r4,7344
    }
    ID00001001_readData(DUMMY_1, dataFlits, DUMMY_MEM_SIZE, 0);
  
    printf("Data in Dummy 1:\n");

    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
     be4:	84000044 	addi	r16,r16,1
    {
        printf("Data[%i]: %x ", i, dataFlits[i]);
     be8:	0000eb80 	call	eb8 <printf>
    }
    ID00001001_readData(DUMMY_1, dataFlits, DUMMY_MEM_SIZE, 0);
  
    printf("Data in Dummy 1:\n");

    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
     bec:	847ff61e 	bne	r16,r17,bc8 <__alt_data_end+0xfffc23c8>
    {
        printf("Data[%i]: %x ", i, dataFlits[i]);
    }
    printf("\n");
     bf0:	01000284 	movi	r4,10
     bf4:	0000f0c0 	call	f0c <putchar>

    ID00001001_enableDelay(DUMMY_2, 10000);
     bf8:	01000134 	movhi	r4,4
     bfc:	0149c404 	movi	r5,10000
     c00:	21150004 	addi	r4,r4,21504
     c04:	00002300 	call	230 <ID00001001_enableDelay>

    ID00001001_startIP(DUMMY_2);
     c08:	01000134 	movhi	r4,4
     c0c:	21150004 	addi	r4,r4,21504
     c10:	00002d40 	call	2d4 <ID00001001_startIP>

    ID00001001_getStatus(DUMMY_2, &dataFlit);
     c14:	01000134 	movhi	r4,4
     c18:	d9400c04 	addi	r5,sp,48
     c1c:	21150004 	addi	r4,r4,21504
     c20:	00003480 	call	348 <ID00001001_getStatus>

    ID00001001_waitDone(DUMMY_2);
     c24:	01000134 	movhi	r4,4
     c28:	21150004 	addi	r4,r4,21504
     c2c:	00003640 	call	364 <ID00001001_waitDone>

    ID00001001_getStatus(DUMMY_2, &dataFlit);
     c30:	01000134 	movhi	r4,4
     c34:	d9400c04 	addi	r5,sp,48
     c38:	21150004 	addi	r4,r4,21504
     c3c:	00003480 	call	348 <ID00001001_getStatus>
     c40:	0005883a 	mov	r2,zero

    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
     c44:	00c00804 	movi	r3,32
    {
        dataFlits[i] = 0;
     c48:	d889883a 	add	r4,sp,r2
     c4c:	20000015 	stw	zero,0(r4)
     c50:	10800104 	addi	r2,r2,4

    ID00001001_waitDone(DUMMY_2);

    ID00001001_getStatus(DUMMY_2, &dataFlit);

    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
     c54:	10fffc1e 	bne	r2,r3,c48 <__alt_data_end+0xfffc2448>
    {
        dataFlits[i] = 0;
    }
    ID00001001_readData(DUMMY_2, dataFlits, DUMMY_MEM_SIZE, 0);
     c58:	01000134 	movhi	r4,4
     c5c:	000f883a 	mov	r7,zero
     c60:	01800204 	movi	r6,8
     c64:	d80b883a 	mov	r5,sp
     c68:	21150004 	addi	r4,r4,21504
     c6c:	000031c0 	call	31c <ID00001001_readData>
    printf("Data in Dummy 2:\n");
     c70:	01000034 	movhi	r4,0
     c74:	21073504 	addi	r4,r4,7380
     c78:	0000fa80 	call	fa8 <puts>

    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
     c7c:	0021883a 	mov	r16,zero
     c80:	04400204 	movi	r17,8
    {
        printf("Data[%i]: %x ", i, dataFlits[i]);
     c84:	8405883a 	add	r2,r16,r16
     c88:	1085883a 	add	r2,r2,r2
     c8c:	d885883a 	add	r2,sp,r2
     c90:	11800017 	ldw	r6,0(r2)
     c94:	01000034 	movhi	r4,0
     c98:	800b883a 	mov	r5,r16
     c9c:	21072c04 	addi	r4,r4,7344
        dataFlits[i] = 0;
    }
    ID00001001_readData(DUMMY_2, dataFlits, DUMMY_MEM_SIZE, 0);
    printf("Data in Dummy 2:\n");

    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
     ca0:	84000044 	addi	r16,r16,1
    {
        printf("Data[%i]: %x ", i, dataFlits[i]);
     ca4:	0000eb80 	call	eb8 <printf>
        dataFlits[i] = 0;
    }
    ID00001001_readData(DUMMY_2, dataFlits, DUMMY_MEM_SIZE, 0);
    printf("Data in Dummy 2:\n");

    for (uint32_t i = 0; i < DUMMY_MEM_SIZE; i++)
     ca8:	847ff61e 	bne	r16,r17,c84 <__alt_data_end+0xfffc2484>
    {
        printf("Data[%i]: %x ", i, dataFlits[i]);
    }
    printf("\n");
     cac:	01000284 	movi	r4,10
     cb0:	0000f0c0 	call	f0c <putchar>



        while(1){
    		if(start_state != 0){
     cb4:	d0a04417 	ldw	r2,-32496(gp)
     cb8:	103ffe26 	beq	r2,zero,cb4 <__alt_data_end+0xfffc24b4>




    			    ID00004003_readData(AIP_UP_0_BASE, data, 4,0);
     cbc:	01000134 	movhi	r4,4
     cc0:	000f883a 	mov	r7,zero
     cc4:	01800104 	movi	r6,4
     cc8:	d9400804 	addi	r5,sp,32
     ccc:	21170004 	addi	r4,r4,23552
     cd0:	00004300 	call	430 <ID00004003_readData>

           			printf("\n The opcode in memory[0]: %lx\n", data[0]);
     cd4:	d9400817 	ldw	r5,32(sp)
     cd8:	01000034 	movhi	r4,0
     cdc:	21073a04 	addi	r4,r4,7400
     ce0:	0000eb80 	call	eb8 <printf>
           			printf("\n The data in memory[1]: %lx\n", data[1]);
     ce4:	d9400917 	ldw	r5,36(sp)
     ce8:	01000034 	movhi	r4,0
     cec:	21074204 	addi	r4,r4,7432
     cf0:	0000eb80 	call	eb8 <printf>
           			printf("\n The data in memory[2]: %lx\n", data[2]);
     cf4:	d9400a17 	ldw	r5,40(sp)
     cf8:	01000034 	movhi	r4,0
     cfc:	21074a04 	addi	r4,r4,7464
     d00:	0000eb80 	call	eb8 <printf>


    		   start_state = 0;
     d04:	d0204415 	stw	zero,-32496(gp)
     d08:	003fea06 	br	cb4 <__alt_data_end+0xfffc24b4>

00000d0c <spi_read>:

int32_t spi_read(uint8_t *data, uint8_t bytes_number) {
	uint32_t cnt = 0;

	/* Enable Slave Select mask. */
	IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(SPI_0_BASE, 1);
     d0c:	00800134 	movhi	r2,4
     d10:	10981504 	addi	r2,r2,24660
     d14:	00c00044 	movi	r3,1
     d18:	10c00035 	stwio	r3,0(r2)
	/* Set the SSO bit (force chip select). */
	IOWR_ALTERA_AVALON_SPI_CONTROL(SPI_0_BASE,ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
     d1c:	00c00134 	movhi	r3,4
     d20:	18d81304 	addi	r3,r3,24652
     d24:	00810004 	movi	r2,1024
     d28:	18800035 	stwio	r2,0(r3)
	/* Discard any stale data, in case previous communication was interrupted. */
	IORD_ALTERA_AVALON_SPI_RXDATA(SPI_0_BASE);
     d2c:	01800134 	movhi	r6,4
     d30:	31981004 	addi	r6,r6,24640
     d34:	30800037 	ldwio	r2,0(r6)
     d38:	02000134 	movhi	r8,4
		/* Wait until txdata register is empty. */
		while ((IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE)
				& ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0)
			;
		/* Write data to txdata register. */
		IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_0_BASE, data[cnt]);
     d3c:	02800134 	movhi	r10,4
	/* Set the SSO bit (force chip select). */
	IOWR_ALTERA_AVALON_SPI_CONTROL(SPI_0_BASE,ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
	/* Discard any stale data, in case previous communication was interrupted. */
	IORD_ALTERA_AVALON_SPI_RXDATA(SPI_0_BASE);

	while (cnt < bytes_number) {
     d40:	2005883a 	mov	r2,r4
     d44:	29403fcc 	andi	r5,r5,255
     d48:	42181204 	addi	r8,r8,24648
		/* Wait until txdata register is empty. */
		while ((IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE)
				& ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0)
			;
		/* Write data to txdata register. */
		IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_0_BASE, data[cnt]);
     d4c:	52981104 	addi	r10,r10,24644
     d50:	02400134 	movhi	r9,4
	/* Set the SSO bit (force chip select). */
	IOWR_ALTERA_AVALON_SPI_CONTROL(SPI_0_BASE,ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
	/* Discard any stale data, in case previous communication was interrupted. */
	IORD_ALTERA_AVALON_SPI_RXDATA(SPI_0_BASE);

	while (cnt < bytes_number) {
     d54:	110fc83a 	sub	r7,r2,r4
     d58:	4a581204 	addi	r9,r9,24648
     d5c:	39400c2e 	bgeu	r7,r5,d90 <spi_read+0x84>
		/* Wait until txdata register is empty. */
		while ((IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE)
     d60:	41c00037 	ldwio	r7,0(r8)
     d64:	39c0100c 	andi	r7,r7,64
     d68:	383ffd26 	beq	r7,zero,d60 <__alt_data_end+0xfffc2560>
				& ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0)
			;
		/* Write data to txdata register. */
		IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_0_BASE, data[cnt]);
     d6c:	11c00003 	ldbu	r7,0(r2)
     d70:	51c00035 	stwio	r7,0(r10)
		/* Wait until rxdata register is full. */
		while ((IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE)
     d74:	41c00037 	ldwio	r7,0(r8)
     d78:	39c0200c 	andi	r7,r7,128
     d7c:	383ffd26 	beq	r7,zero,d74 <__alt_data_end+0xfffc2574>
				& ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0)
			;
		/* Read data from rxdata register. */
		data[cnt] = IORD_ALTERA_AVALON_SPI_RXDATA(SPI_0_BASE);
     d80:	31c00037 	ldwio	r7,0(r6)
     d84:	11c00005 	stb	r7,0(r2)
     d88:	10800044 	addi	r2,r2,1
     d8c:	003ff006 	br	d50 <__alt_data_end+0xfffc2550>
		cnt++;
	}

	/* Wait until the interface has finished transmitting. */
	while ((IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE)
     d90:	48800037 	ldwio	r2,0(r9)
     d94:	1080080c 	andi	r2,r2,32
     d98:	103ffd26 	beq	r2,zero,d90 <__alt_data_end+0xfffc2590>
			& ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0)
		;
	/* Clear the SSO bit (release chip select). */
	IOWR_ALTERA_AVALON_SPI_CONTROL(SPI_0_BASE, 0);
     d9c:	18000035 	stwio	zero,0(r3)

	return 0;
}
     da0:	0005883a 	mov	r2,zero
     da4:	f800283a 	ret

00000da8 <spi_write_then_read>:



int spi_write_then_read(struct spi_device *spi, const unsigned char *txbuf,
		unsigned n_tx, unsigned char *rxbuf, unsigned n_rx) {
     da8:	defff604 	addi	sp,sp,-40
     dac:	dc400615 	stw	r17,24(sp)
     db0:	dc000515 	stw	r16,20(sp)
     db4:	3023883a 	mov	r17,r6
     db8:	2821883a 	mov	r16,r5
	uint8_t buffer[20] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     dbc:	01800504 	movi	r6,20
     dc0:	000b883a 	mov	r5,zero
     dc4:	d809883a 	mov	r4,sp
}



int spi_write_then_read(struct spi_device *spi, const unsigned char *txbuf,
		unsigned n_tx, unsigned char *rxbuf, unsigned n_rx) {
     dc8:	dcc00815 	stw	r19,32(sp)
     dcc:	dfc00915 	stw	ra,36(sp)
     dd0:	dc800715 	stw	r18,28(sp)
     dd4:	3827883a 	mov	r19,r7
	uint8_t buffer[20] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     dd8:	0000e5c0 	call	e5c <memset>
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	uint8_t byte;

	for (byte = 0; byte < n_tx; byte++) {
     ddc:	0007883a 	mov	r3,zero
     de0:	18803fcc 	andi	r2,r3,255
     de4:	1440062e 	bgeu	r2,r17,e00 <spi_write_then_read+0x58>
		buffer[byte] = (unsigned char) txbuf[byte];
     de8:	d889883a 	add	r4,sp,r2
     dec:	8085883a 	add	r2,r16,r2
     df0:	10800003 	ldbu	r2,0(r2)
		unsigned n_tx, unsigned char *rxbuf, unsigned n_rx) {
	uint8_t buffer[20] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	uint8_t byte;

	for (byte = 0; byte < n_tx; byte++) {
     df4:	18c00044 	addi	r3,r3,1
		buffer[byte] = (unsigned char) txbuf[byte];
     df8:	20800005 	stb	r2,0(r4)
     dfc:	003ff806 	br	de0 <__alt_data_end+0xfffc25e0>
	}
	spi_read(buffer, n_tx + n_rx);
     e00:	dc000a17 	ldw	r16,40(sp)
     e04:	d809883a 	mov	r4,sp
     e08:	8825883a 	mov	r18,r17
     e0c:	8c21883a 	add	r16,r17,r16
     e10:	81403fcc 	andi	r5,r16,255
     e14:	0000d0c0 	call	d0c <spi_read>
	for (byte = n_tx; byte < n_tx + n_rx; byte++) {
     e18:	90803fcc 	andi	r2,r18,255
     e1c:	1400072e 	bgeu	r2,r16,e3c <spi_write_then_read+0x94>
		rxbuf[byte - n_tx] = buffer[byte];
     e20:	1447c83a 	sub	r3,r2,r17
     e24:	d885883a 	add	r2,sp,r2
     e28:	10800003 	ldbu	r2,0(r2)
     e2c:	98c7883a 	add	r3,r19,r3

	for (byte = 0; byte < n_tx; byte++) {
		buffer[byte] = (unsigned char) txbuf[byte];
	}
	spi_read(buffer, n_tx + n_rx);
	for (byte = n_tx; byte < n_tx + n_rx; byte++) {
     e30:	94800044 	addi	r18,r18,1
		rxbuf[byte - n_tx] = buffer[byte];
     e34:	18800005 	stb	r2,0(r3)
     e38:	003ff706 	br	e18 <__alt_data_end+0xfffc2618>
	}

	return 0;
}
     e3c:	0005883a 	mov	r2,zero
     e40:	dfc00917 	ldw	ra,36(sp)
     e44:	dcc00817 	ldw	r19,32(sp)
     e48:	dc800717 	ldw	r18,28(sp)
     e4c:	dc400617 	ldw	r17,24(sp)
     e50:	dc000517 	ldw	r16,20(sp)
     e54:	dec00a04 	addi	sp,sp,40
     e58:	f800283a 	ret

00000e5c <memset>:
     e5c:	2005883a 	mov	r2,r4
     e60:	2007883a 	mov	r3,r4
     e64:	218d883a 	add	r6,r4,r6
     e68:	19800326 	beq	r3,r6,e78 <memset+0x1c>
     e6c:	19400005 	stb	r5,0(r3)
     e70:	18c00044 	addi	r3,r3,1
     e74:	003ffc06 	br	e68 <__alt_data_end+0xfffc2668>
     e78:	f800283a 	ret

00000e7c <_printf_r>:
     e7c:	defffd04 	addi	sp,sp,-12
     e80:	dfc00015 	stw	ra,0(sp)
     e84:	d9800115 	stw	r6,4(sp)
     e88:	d9c00215 	stw	r7,8(sp)
     e8c:	20c00217 	ldw	r3,8(r4)
     e90:	01800034 	movhi	r6,0
     e94:	31856304 	addi	r6,r6,5516
     e98:	19800115 	stw	r6,4(r3)
     e9c:	280d883a 	mov	r6,r5
     ea0:	21400217 	ldw	r5,8(r4)
     ea4:	d9c00104 	addi	r7,sp,4
     ea8:	00010440 	call	1044 <___vfprintf_internal_r>
     eac:	dfc00017 	ldw	ra,0(sp)
     eb0:	dec00304 	addi	sp,sp,12
     eb4:	f800283a 	ret

00000eb8 <printf>:
     eb8:	defffc04 	addi	sp,sp,-16
     ebc:	dfc00015 	stw	ra,0(sp)
     ec0:	d9400115 	stw	r5,4(sp)
     ec4:	d9800215 	stw	r6,8(sp)
     ec8:	d9c00315 	stw	r7,12(sp)
     ecc:	00800034 	movhi	r2,0
     ed0:	10878b04 	addi	r2,r2,7724
     ed4:	10800017 	ldw	r2,0(r2)
     ed8:	01400034 	movhi	r5,0
     edc:	29456304 	addi	r5,r5,5516
     ee0:	10c00217 	ldw	r3,8(r2)
     ee4:	d9800104 	addi	r6,sp,4
     ee8:	19400115 	stw	r5,4(r3)
     eec:	200b883a 	mov	r5,r4
     ef0:	11000217 	ldw	r4,8(r2)
     ef4:	00015700 	call	1570 <__vfprintf_internal>
     ef8:	dfc00017 	ldw	ra,0(sp)
     efc:	dec00404 	addi	sp,sp,16
     f00:	f800283a 	ret

00000f04 <_putchar_r>:
     f04:	21800217 	ldw	r6,8(r4)
     f08:	00016981 	jmpi	1698 <_putc_r>

00000f0c <putchar>:
     f0c:	00800034 	movhi	r2,0
     f10:	10878b04 	addi	r2,r2,7724
     f14:	10800017 	ldw	r2,0(r2)
     f18:	200b883a 	mov	r5,r4
     f1c:	11800217 	ldw	r6,8(r2)
     f20:	1009883a 	mov	r4,r2
     f24:	00016981 	jmpi	1698 <_putc_r>

00000f28 <_puts_r>:
     f28:	defffd04 	addi	sp,sp,-12
     f2c:	dc000015 	stw	r16,0(sp)
     f30:	2021883a 	mov	r16,r4
     f34:	2809883a 	mov	r4,r5
     f38:	dfc00215 	stw	ra,8(sp)
     f3c:	dc400115 	stw	r17,4(sp)
     f40:	2823883a 	mov	r17,r5
     f44:	0000fbc0 	call	fbc <strlen>
     f48:	81400217 	ldw	r5,8(r16)
     f4c:	01000034 	movhi	r4,0
     f50:	21056304 	addi	r4,r4,5516
     f54:	29000115 	stw	r4,4(r5)
     f58:	100f883a 	mov	r7,r2
     f5c:	880d883a 	mov	r6,r17
     f60:	8009883a 	mov	r4,r16
     f64:	000158c0 	call	158c <__sfvwrite_small_dev>
     f68:	00ffffc4 	movi	r3,-1
     f6c:	10c00926 	beq	r2,r3,f94 <_puts_r+0x6c>
     f70:	81400217 	ldw	r5,8(r16)
     f74:	01800034 	movhi	r6,0
     f78:	01c00044 	movi	r7,1
     f7c:	28800117 	ldw	r2,4(r5)
     f80:	31874904 	addi	r6,r6,7460
     f84:	8009883a 	mov	r4,r16
     f88:	103ee83a 	callr	r2
     f8c:	10bfffe0 	cmpeqi	r2,r2,-1
     f90:	0085c83a 	sub	r2,zero,r2
     f94:	dfc00217 	ldw	ra,8(sp)
     f98:	dc400117 	ldw	r17,4(sp)
     f9c:	dc000017 	ldw	r16,0(sp)
     fa0:	dec00304 	addi	sp,sp,12
     fa4:	f800283a 	ret

00000fa8 <puts>:
     fa8:	00800034 	movhi	r2,0
     fac:	10878b04 	addi	r2,r2,7724
     fb0:	200b883a 	mov	r5,r4
     fb4:	11000017 	ldw	r4,0(r2)
     fb8:	0000f281 	jmpi	f28 <_puts_r>

00000fbc <strlen>:
     fbc:	2005883a 	mov	r2,r4
     fc0:	10c00007 	ldb	r3,0(r2)
     fc4:	18000226 	beq	r3,zero,fd0 <strlen+0x14>
     fc8:	10800044 	addi	r2,r2,1
     fcc:	003ffc06 	br	fc0 <__alt_data_end+0xfffc27c0>
     fd0:	1105c83a 	sub	r2,r2,r4
     fd4:	f800283a 	ret

00000fd8 <print_repeat>:
     fd8:	defffb04 	addi	sp,sp,-20
     fdc:	dc800315 	stw	r18,12(sp)
     fe0:	dc400215 	stw	r17,8(sp)
     fe4:	dc000115 	stw	r16,4(sp)
     fe8:	dfc00415 	stw	ra,16(sp)
     fec:	2025883a 	mov	r18,r4
     ff0:	2823883a 	mov	r17,r5
     ff4:	d9800005 	stb	r6,0(sp)
     ff8:	3821883a 	mov	r16,r7
     ffc:	04000a0e 	bge	zero,r16,1028 <print_repeat+0x50>
    1000:	88800117 	ldw	r2,4(r17)
    1004:	01c00044 	movi	r7,1
    1008:	d80d883a 	mov	r6,sp
    100c:	880b883a 	mov	r5,r17
    1010:	9009883a 	mov	r4,r18
    1014:	103ee83a 	callr	r2
    1018:	843fffc4 	addi	r16,r16,-1
    101c:	103ff726 	beq	r2,zero,ffc <__alt_data_end+0xfffc27fc>
    1020:	00bfffc4 	movi	r2,-1
    1024:	00000106 	br	102c <print_repeat+0x54>
    1028:	0005883a 	mov	r2,zero
    102c:	dfc00417 	ldw	ra,16(sp)
    1030:	dc800317 	ldw	r18,12(sp)
    1034:	dc400217 	ldw	r17,8(sp)
    1038:	dc000117 	ldw	r16,4(sp)
    103c:	dec00504 	addi	sp,sp,20
    1040:	f800283a 	ret

00001044 <___vfprintf_internal_r>:
    1044:	deffe504 	addi	sp,sp,-108
    1048:	d8c00804 	addi	r3,sp,32
    104c:	ddc01815 	stw	r23,96(sp)
    1050:	dd801715 	stw	r22,92(sp)
    1054:	dd401615 	stw	r21,88(sp)
    1058:	dd001515 	stw	r20,84(sp)
    105c:	dcc01415 	stw	r19,80(sp)
    1060:	dc801315 	stw	r18,76(sp)
    1064:	dc401215 	stw	r17,72(sp)
    1068:	dc001115 	stw	r16,68(sp)
    106c:	dfc01a15 	stw	ra,104(sp)
    1070:	df001915 	stw	fp,100(sp)
    1074:	2029883a 	mov	r20,r4
    1078:	2823883a 	mov	r17,r5
    107c:	382d883a 	mov	r22,r7
    1080:	d9800f15 	stw	r6,60(sp)
    1084:	0021883a 	mov	r16,zero
    1088:	d8000e15 	stw	zero,56(sp)
    108c:	d8000a15 	stw	zero,40(sp)
    1090:	002b883a 	mov	r21,zero
    1094:	0027883a 	mov	r19,zero
    1098:	0025883a 	mov	r18,zero
    109c:	d8000c15 	stw	zero,48(sp)
    10a0:	d8000b15 	stw	zero,44(sp)
    10a4:	002f883a 	mov	r23,zero
    10a8:	d8c00915 	stw	r3,36(sp)
    10ac:	d8c00f17 	ldw	r3,60(sp)
    10b0:	19000003 	ldbu	r4,0(r3)
    10b4:	20803fcc 	andi	r2,r4,255
    10b8:	1080201c 	xori	r2,r2,128
    10bc:	10bfe004 	addi	r2,r2,-128
    10c0:	10011e26 	beq	r2,zero,153c <___vfprintf_internal_r+0x4f8>
    10c4:	00c00044 	movi	r3,1
    10c8:	b8c01426 	beq	r23,r3,111c <___vfprintf_internal_r+0xd8>
    10cc:	1dc00216 	blt	r3,r23,10d8 <___vfprintf_internal_r+0x94>
    10d0:	b8000626 	beq	r23,zero,10ec <___vfprintf_internal_r+0xa8>
    10d4:	00011506 	br	152c <___vfprintf_internal_r+0x4e8>
    10d8:	01400084 	movi	r5,2
    10dc:	b9401d26 	beq	r23,r5,1154 <___vfprintf_internal_r+0x110>
    10e0:	014000c4 	movi	r5,3
    10e4:	b9402b26 	beq	r23,r5,1194 <___vfprintf_internal_r+0x150>
    10e8:	00011006 	br	152c <___vfprintf_internal_r+0x4e8>
    10ec:	01400944 	movi	r5,37
    10f0:	1140fc26 	beq	r2,r5,14e4 <___vfprintf_internal_r+0x4a0>
    10f4:	88800117 	ldw	r2,4(r17)
    10f8:	d9000005 	stb	r4,0(sp)
    10fc:	01c00044 	movi	r7,1
    1100:	d80d883a 	mov	r6,sp
    1104:	880b883a 	mov	r5,r17
    1108:	a009883a 	mov	r4,r20
    110c:	103ee83a 	callr	r2
    1110:	1000d81e 	bne	r2,zero,1474 <___vfprintf_internal_r+0x430>
    1114:	84000044 	addi	r16,r16,1
    1118:	00010406 	br	152c <___vfprintf_internal_r+0x4e8>
    111c:	01400c04 	movi	r5,48
    1120:	1140fa26 	beq	r2,r5,150c <___vfprintf_internal_r+0x4c8>
    1124:	01400944 	movi	r5,37
    1128:	11400a1e 	bne	r2,r5,1154 <___vfprintf_internal_r+0x110>
    112c:	d8800005 	stb	r2,0(sp)
    1130:	88800117 	ldw	r2,4(r17)
    1134:	b80f883a 	mov	r7,r23
    1138:	d80d883a 	mov	r6,sp
    113c:	880b883a 	mov	r5,r17
    1140:	a009883a 	mov	r4,r20
    1144:	103ee83a 	callr	r2
    1148:	1000ca1e 	bne	r2,zero,1474 <___vfprintf_internal_r+0x430>
    114c:	84000044 	addi	r16,r16,1
    1150:	0000f506 	br	1528 <___vfprintf_internal_r+0x4e4>
    1154:	25fff404 	addi	r23,r4,-48
    1158:	bdc03fcc 	andi	r23,r23,255
    115c:	00c00244 	movi	r3,9
    1160:	1dc00936 	bltu	r3,r23,1188 <___vfprintf_internal_r+0x144>
    1164:	00bfffc4 	movi	r2,-1
    1168:	90800426 	beq	r18,r2,117c <___vfprintf_internal_r+0x138>
    116c:	01400284 	movi	r5,10
    1170:	9009883a 	mov	r4,r18
    1174:	00018fc0 	call	18fc <__mulsi3>
    1178:	00000106 	br	1180 <___vfprintf_internal_r+0x13c>
    117c:	0005883a 	mov	r2,zero
    1180:	b8a5883a 	add	r18,r23,r2
    1184:	0000e206 	br	1510 <___vfprintf_internal_r+0x4cc>
    1188:	01400b84 	movi	r5,46
    118c:	1140e426 	beq	r2,r5,1520 <___vfprintf_internal_r+0x4dc>
    1190:	05c00084 	movi	r23,2
    1194:	213ff404 	addi	r4,r4,-48
    1198:	27003fcc 	andi	fp,r4,255
    119c:	00c00244 	movi	r3,9
    11a0:	1f000936 	bltu	r3,fp,11c8 <___vfprintf_internal_r+0x184>
    11a4:	00bfffc4 	movi	r2,-1
    11a8:	98800426 	beq	r19,r2,11bc <___vfprintf_internal_r+0x178>
    11ac:	01400284 	movi	r5,10
    11b0:	9809883a 	mov	r4,r19
    11b4:	00018fc0 	call	18fc <__mulsi3>
    11b8:	00000106 	br	11c0 <___vfprintf_internal_r+0x17c>
    11bc:	0005883a 	mov	r2,zero
    11c0:	e0a7883a 	add	r19,fp,r2
    11c4:	0000d906 	br	152c <___vfprintf_internal_r+0x4e8>
    11c8:	00c01b04 	movi	r3,108
    11cc:	10c0d226 	beq	r2,r3,1518 <___vfprintf_internal_r+0x4d4>
    11d0:	013fffc4 	movi	r4,-1
    11d4:	99000226 	beq	r19,r4,11e0 <___vfprintf_internal_r+0x19c>
    11d8:	d8000b15 	stw	zero,44(sp)
    11dc:	00000106 	br	11e4 <___vfprintf_internal_r+0x1a0>
    11e0:	04c00044 	movi	r19,1
    11e4:	01001a44 	movi	r4,105
    11e8:	11001626 	beq	r2,r4,1244 <___vfprintf_internal_r+0x200>
    11ec:	20800916 	blt	r4,r2,1214 <___vfprintf_internal_r+0x1d0>
    11f0:	010018c4 	movi	r4,99
    11f4:	11008826 	beq	r2,r4,1418 <___vfprintf_internal_r+0x3d4>
    11f8:	01001904 	movi	r4,100
    11fc:	11001126 	beq	r2,r4,1244 <___vfprintf_internal_r+0x200>
    1200:	01001604 	movi	r4,88
    1204:	1100c81e 	bne	r2,r4,1528 <___vfprintf_internal_r+0x4e4>
    1208:	00c00044 	movi	r3,1
    120c:	d8c00e15 	stw	r3,56(sp)
    1210:	00001506 	br	1268 <___vfprintf_internal_r+0x224>
    1214:	01001cc4 	movi	r4,115
    1218:	11009826 	beq	r2,r4,147c <___vfprintf_internal_r+0x438>
    121c:	20800416 	blt	r4,r2,1230 <___vfprintf_internal_r+0x1ec>
    1220:	01001bc4 	movi	r4,111
    1224:	1100c01e 	bne	r2,r4,1528 <___vfprintf_internal_r+0x4e4>
    1228:	05400204 	movi	r21,8
    122c:	00000f06 	br	126c <___vfprintf_internal_r+0x228>
    1230:	01001d44 	movi	r4,117
    1234:	11000d26 	beq	r2,r4,126c <___vfprintf_internal_r+0x228>
    1238:	01001e04 	movi	r4,120
    123c:	11000a26 	beq	r2,r4,1268 <___vfprintf_internal_r+0x224>
    1240:	0000b906 	br	1528 <___vfprintf_internal_r+0x4e4>
    1244:	d8c00a17 	ldw	r3,40(sp)
    1248:	b7000104 	addi	fp,r22,4
    124c:	18000726 	beq	r3,zero,126c <___vfprintf_internal_r+0x228>
    1250:	df000d15 	stw	fp,52(sp)
    1254:	b5c00017 	ldw	r23,0(r22)
    1258:	b800080e 	bge	r23,zero,127c <___vfprintf_internal_r+0x238>
    125c:	05efc83a 	sub	r23,zero,r23
    1260:	02400044 	movi	r9,1
    1264:	00000606 	br	1280 <___vfprintf_internal_r+0x23c>
    1268:	05400404 	movi	r21,16
    126c:	b0c00104 	addi	r3,r22,4
    1270:	d8c00d15 	stw	r3,52(sp)
    1274:	b5c00017 	ldw	r23,0(r22)
    1278:	d8000a15 	stw	zero,40(sp)
    127c:	0013883a 	mov	r9,zero
    1280:	d839883a 	mov	fp,sp
    1284:	b8001726 	beq	r23,zero,12e4 <___vfprintf_internal_r+0x2a0>
    1288:	a80b883a 	mov	r5,r21
    128c:	b809883a 	mov	r4,r23
    1290:	da401015 	stw	r9,64(sp)
    1294:	00018400 	call	1840 <__udivsi3>
    1298:	a80b883a 	mov	r5,r21
    129c:	1009883a 	mov	r4,r2
    12a0:	102d883a 	mov	r22,r2
    12a4:	00018fc0 	call	18fc <__mulsi3>
    12a8:	b885c83a 	sub	r2,r23,r2
    12ac:	00c00244 	movi	r3,9
    12b0:	da401017 	ldw	r9,64(sp)
    12b4:	18800216 	blt	r3,r2,12c0 <___vfprintf_internal_r+0x27c>
    12b8:	10800c04 	addi	r2,r2,48
    12bc:	00000506 	br	12d4 <___vfprintf_internal_r+0x290>
    12c0:	d8c00e17 	ldw	r3,56(sp)
    12c4:	18000226 	beq	r3,zero,12d0 <___vfprintf_internal_r+0x28c>
    12c8:	10800dc4 	addi	r2,r2,55
    12cc:	00000106 	br	12d4 <___vfprintf_internal_r+0x290>
    12d0:	108015c4 	addi	r2,r2,87
    12d4:	e0800005 	stb	r2,0(fp)
    12d8:	b02f883a 	mov	r23,r22
    12dc:	e7000044 	addi	fp,fp,1
    12e0:	003fe806 	br	1284 <__alt_data_end+0xfffc2a84>
    12e4:	e6efc83a 	sub	r23,fp,sp
    12e8:	9dc5c83a 	sub	r2,r19,r23
    12ec:	0080090e 	bge	zero,r2,1314 <___vfprintf_internal_r+0x2d0>
    12f0:	e085883a 	add	r2,fp,r2
    12f4:	01400c04 	movi	r5,48
    12f8:	d8c00917 	ldw	r3,36(sp)
    12fc:	e009883a 	mov	r4,fp
    1300:	e0c0032e 	bgeu	fp,r3,1310 <___vfprintf_internal_r+0x2cc>
    1304:	e7000044 	addi	fp,fp,1
    1308:	21400005 	stb	r5,0(r4)
    130c:	e0bffa1e 	bne	fp,r2,12f8 <__alt_data_end+0xfffc2af8>
    1310:	e6efc83a 	sub	r23,fp,sp
    1314:	d8c00b17 	ldw	r3,44(sp)
    1318:	4dd1883a 	add	r8,r9,r23
    131c:	922dc83a 	sub	r22,r18,r8
    1320:	18001626 	beq	r3,zero,137c <___vfprintf_internal_r+0x338>
    1324:	48000a26 	beq	r9,zero,1350 <___vfprintf_internal_r+0x30c>
    1328:	00800b44 	movi	r2,45
    132c:	d8800805 	stb	r2,32(sp)
    1330:	88800117 	ldw	r2,4(r17)
    1334:	01c00044 	movi	r7,1
    1338:	d9800804 	addi	r6,sp,32
    133c:	880b883a 	mov	r5,r17
    1340:	a009883a 	mov	r4,r20
    1344:	103ee83a 	callr	r2
    1348:	10004a1e 	bne	r2,zero,1474 <___vfprintf_internal_r+0x430>
    134c:	84000044 	addi	r16,r16,1
    1350:	0580070e 	bge	zero,r22,1370 <___vfprintf_internal_r+0x32c>
    1354:	b00f883a 	mov	r7,r22
    1358:	01800c04 	movi	r6,48
    135c:	880b883a 	mov	r5,r17
    1360:	a009883a 	mov	r4,r20
    1364:	0000fd80 	call	fd8 <print_repeat>
    1368:	1000421e 	bne	r2,zero,1474 <___vfprintf_internal_r+0x430>
    136c:	85a1883a 	add	r16,r16,r22
    1370:	e02d883a 	mov	r22,fp
    1374:	bf2fc83a 	sub	r23,r23,fp
    1378:	00002006 	br	13fc <___vfprintf_internal_r+0x3b8>
    137c:	0580090e 	bge	zero,r22,13a4 <___vfprintf_internal_r+0x360>
    1380:	b00f883a 	mov	r7,r22
    1384:	01800804 	movi	r6,32
    1388:	880b883a 	mov	r5,r17
    138c:	a009883a 	mov	r4,r20
    1390:	da401015 	stw	r9,64(sp)
    1394:	0000fd80 	call	fd8 <print_repeat>
    1398:	da401017 	ldw	r9,64(sp)
    139c:	1000351e 	bne	r2,zero,1474 <___vfprintf_internal_r+0x430>
    13a0:	85a1883a 	add	r16,r16,r22
    13a4:	483ff226 	beq	r9,zero,1370 <__alt_data_end+0xfffc2b70>
    13a8:	00800b44 	movi	r2,45
    13ac:	d8800805 	stb	r2,32(sp)
    13b0:	88800117 	ldw	r2,4(r17)
    13b4:	01c00044 	movi	r7,1
    13b8:	d9800804 	addi	r6,sp,32
    13bc:	880b883a 	mov	r5,r17
    13c0:	a009883a 	mov	r4,r20
    13c4:	103ee83a 	callr	r2
    13c8:	10002a1e 	bne	r2,zero,1474 <___vfprintf_internal_r+0x430>
    13cc:	84000044 	addi	r16,r16,1
    13d0:	003fe706 	br	1370 <__alt_data_end+0xfffc2b70>
    13d4:	b5bfffc4 	addi	r22,r22,-1
    13d8:	b0800003 	ldbu	r2,0(r22)
    13dc:	01c00044 	movi	r7,1
    13e0:	d9800804 	addi	r6,sp,32
    13e4:	d8800805 	stb	r2,32(sp)
    13e8:	88800117 	ldw	r2,4(r17)
    13ec:	880b883a 	mov	r5,r17
    13f0:	a009883a 	mov	r4,r20
    13f4:	103ee83a 	callr	r2
    13f8:	10001e1e 	bne	r2,zero,1474 <___vfprintf_internal_r+0x430>
    13fc:	8585c83a 	sub	r2,r16,r22
    1400:	b5c9883a 	add	r4,r22,r23
    1404:	e085883a 	add	r2,fp,r2
    1408:	013ff216 	blt	zero,r4,13d4 <__alt_data_end+0xfffc2bd4>
    140c:	1021883a 	mov	r16,r2
    1410:	dd800d17 	ldw	r22,52(sp)
    1414:	00004406 	br	1528 <___vfprintf_internal_r+0x4e4>
    1418:	00800044 	movi	r2,1
    141c:	1480080e 	bge	r2,r18,1440 <___vfprintf_internal_r+0x3fc>
    1420:	95ffffc4 	addi	r23,r18,-1
    1424:	b80f883a 	mov	r7,r23
    1428:	01800804 	movi	r6,32
    142c:	880b883a 	mov	r5,r17
    1430:	a009883a 	mov	r4,r20
    1434:	0000fd80 	call	fd8 <print_repeat>
    1438:	10000e1e 	bne	r2,zero,1474 <___vfprintf_internal_r+0x430>
    143c:	85e1883a 	add	r16,r16,r23
    1440:	b0800017 	ldw	r2,0(r22)
    1444:	01c00044 	movi	r7,1
    1448:	d80d883a 	mov	r6,sp
    144c:	d8800005 	stb	r2,0(sp)
    1450:	88800117 	ldw	r2,4(r17)
    1454:	880b883a 	mov	r5,r17
    1458:	a009883a 	mov	r4,r20
    145c:	b5c00104 	addi	r23,r22,4
    1460:	103ee83a 	callr	r2
    1464:	1000031e 	bne	r2,zero,1474 <___vfprintf_internal_r+0x430>
    1468:	84000044 	addi	r16,r16,1
    146c:	b82d883a 	mov	r22,r23
    1470:	00002d06 	br	1528 <___vfprintf_internal_r+0x4e4>
    1474:	00bfffc4 	movi	r2,-1
    1478:	00003106 	br	1540 <___vfprintf_internal_r+0x4fc>
    147c:	b5c00017 	ldw	r23,0(r22)
    1480:	b7000104 	addi	fp,r22,4
    1484:	b809883a 	mov	r4,r23
    1488:	0000fbc0 	call	fbc <strlen>
    148c:	9091c83a 	sub	r8,r18,r2
    1490:	102d883a 	mov	r22,r2
    1494:	0200090e 	bge	zero,r8,14bc <___vfprintf_internal_r+0x478>
    1498:	400f883a 	mov	r7,r8
    149c:	01800804 	movi	r6,32
    14a0:	880b883a 	mov	r5,r17
    14a4:	a009883a 	mov	r4,r20
    14a8:	da001015 	stw	r8,64(sp)
    14ac:	0000fd80 	call	fd8 <print_repeat>
    14b0:	da001017 	ldw	r8,64(sp)
    14b4:	103fef1e 	bne	r2,zero,1474 <__alt_data_end+0xfffc2c74>
    14b8:	8221883a 	add	r16,r16,r8
    14bc:	88800117 	ldw	r2,4(r17)
    14c0:	b00f883a 	mov	r7,r22
    14c4:	b80d883a 	mov	r6,r23
    14c8:	880b883a 	mov	r5,r17
    14cc:	a009883a 	mov	r4,r20
    14d0:	103ee83a 	callr	r2
    14d4:	103fe71e 	bne	r2,zero,1474 <__alt_data_end+0xfffc2c74>
    14d8:	85a1883a 	add	r16,r16,r22
    14dc:	e02d883a 	mov	r22,fp
    14e0:	00001106 	br	1528 <___vfprintf_internal_r+0x4e4>
    14e4:	00c00044 	movi	r3,1
    14e8:	04ffffc4 	movi	r19,-1
    14ec:	d8000e15 	stw	zero,56(sp)
    14f0:	d8c00a15 	stw	r3,40(sp)
    14f4:	05400284 	movi	r21,10
    14f8:	9825883a 	mov	r18,r19
    14fc:	d8000c15 	stw	zero,48(sp)
    1500:	d8000b15 	stw	zero,44(sp)
    1504:	182f883a 	mov	r23,r3
    1508:	00000806 	br	152c <___vfprintf_internal_r+0x4e8>
    150c:	ddc00b15 	stw	r23,44(sp)
    1510:	05c00084 	movi	r23,2
    1514:	00000506 	br	152c <___vfprintf_internal_r+0x4e8>
    1518:	00c00044 	movi	r3,1
    151c:	d8c00c15 	stw	r3,48(sp)
    1520:	05c000c4 	movi	r23,3
    1524:	00000106 	br	152c <___vfprintf_internal_r+0x4e8>
    1528:	002f883a 	mov	r23,zero
    152c:	d8c00f17 	ldw	r3,60(sp)
    1530:	18c00044 	addi	r3,r3,1
    1534:	d8c00f15 	stw	r3,60(sp)
    1538:	003edc06 	br	10ac <__alt_data_end+0xfffc28ac>
    153c:	8005883a 	mov	r2,r16
    1540:	dfc01a17 	ldw	ra,104(sp)
    1544:	df001917 	ldw	fp,100(sp)
    1548:	ddc01817 	ldw	r23,96(sp)
    154c:	dd801717 	ldw	r22,92(sp)
    1550:	dd401617 	ldw	r21,88(sp)
    1554:	dd001517 	ldw	r20,84(sp)
    1558:	dcc01417 	ldw	r19,80(sp)
    155c:	dc801317 	ldw	r18,76(sp)
    1560:	dc401217 	ldw	r17,72(sp)
    1564:	dc001117 	ldw	r16,68(sp)
    1568:	dec01b04 	addi	sp,sp,108
    156c:	f800283a 	ret

00001570 <__vfprintf_internal>:
    1570:	00800034 	movhi	r2,0
    1574:	10878b04 	addi	r2,r2,7724
    1578:	300f883a 	mov	r7,r6
    157c:	280d883a 	mov	r6,r5
    1580:	200b883a 	mov	r5,r4
    1584:	11000017 	ldw	r4,0(r2)
    1588:	00010441 	jmpi	1044 <___vfprintf_internal_r>

0000158c <__sfvwrite_small_dev>:
    158c:	2880000b 	ldhu	r2,0(r5)
    1590:	1080020c 	andi	r2,r2,8
    1594:	10002126 	beq	r2,zero,161c <__sfvwrite_small_dev+0x90>
    1598:	2880008f 	ldh	r2,2(r5)
    159c:	defffa04 	addi	sp,sp,-24
    15a0:	dc000015 	stw	r16,0(sp)
    15a4:	dfc00515 	stw	ra,20(sp)
    15a8:	dd000415 	stw	r20,16(sp)
    15ac:	dcc00315 	stw	r19,12(sp)
    15b0:	dc800215 	stw	r18,8(sp)
    15b4:	dc400115 	stw	r17,4(sp)
    15b8:	2821883a 	mov	r16,r5
    15bc:	10001216 	blt	r2,zero,1608 <__sfvwrite_small_dev+0x7c>
    15c0:	2027883a 	mov	r19,r4
    15c4:	3025883a 	mov	r18,r6
    15c8:	3823883a 	mov	r17,r7
    15cc:	05010004 	movi	r20,1024
    15d0:	04400b0e 	bge	zero,r17,1600 <__sfvwrite_small_dev+0x74>
    15d4:	880f883a 	mov	r7,r17
    15d8:	a440010e 	bge	r20,r17,15e0 <__sfvwrite_small_dev+0x54>
    15dc:	01c10004 	movi	r7,1024
    15e0:	8140008f 	ldh	r5,2(r16)
    15e4:	900d883a 	mov	r6,r18
    15e8:	9809883a 	mov	r4,r19
    15ec:	00016f00 	call	16f0 <_write_r>
    15f0:	0080050e 	bge	zero,r2,1608 <__sfvwrite_small_dev+0x7c>
    15f4:	88a3c83a 	sub	r17,r17,r2
    15f8:	90a5883a 	add	r18,r18,r2
    15fc:	003ff406 	br	15d0 <__alt_data_end+0xfffc2dd0>
    1600:	0005883a 	mov	r2,zero
    1604:	00000706 	br	1624 <__sfvwrite_small_dev+0x98>
    1608:	8080000b 	ldhu	r2,0(r16)
    160c:	10801014 	ori	r2,r2,64
    1610:	8080000d 	sth	r2,0(r16)
    1614:	00bfffc4 	movi	r2,-1
    1618:	00000206 	br	1624 <__sfvwrite_small_dev+0x98>
    161c:	00bfffc4 	movi	r2,-1
    1620:	f800283a 	ret
    1624:	dfc00517 	ldw	ra,20(sp)
    1628:	dd000417 	ldw	r20,16(sp)
    162c:	dcc00317 	ldw	r19,12(sp)
    1630:	dc800217 	ldw	r18,8(sp)
    1634:	dc400117 	ldw	r17,4(sp)
    1638:	dc000017 	ldw	r16,0(sp)
    163c:	dec00604 	addi	sp,sp,24
    1640:	f800283a 	ret

00001644 <putc>:
    1644:	defffd04 	addi	sp,sp,-12
    1648:	00800034 	movhi	r2,0
    164c:	dc000115 	stw	r16,4(sp)
    1650:	dfc00215 	stw	ra,8(sp)
    1654:	10856304 	addi	r2,r2,5516
    1658:	28800115 	stw	r2,4(r5)
    165c:	00800034 	movhi	r2,0
    1660:	10878b04 	addi	r2,r2,7724
    1664:	d9000005 	stb	r4,0(sp)
    1668:	2021883a 	mov	r16,r4
    166c:	11000017 	ldw	r4,0(r2)
    1670:	01c00044 	movi	r7,1
    1674:	d80d883a 	mov	r6,sp
    1678:	000158c0 	call	158c <__sfvwrite_small_dev>
    167c:	00ffffc4 	movi	r3,-1
    1680:	10c00126 	beq	r2,r3,1688 <putc+0x44>
    1684:	8005883a 	mov	r2,r16
    1688:	dfc00217 	ldw	ra,8(sp)
    168c:	dc000117 	ldw	r16,4(sp)
    1690:	dec00304 	addi	sp,sp,12
    1694:	f800283a 	ret

00001698 <_putc_r>:
    1698:	defffd04 	addi	sp,sp,-12
    169c:	00800034 	movhi	r2,0
    16a0:	dc000115 	stw	r16,4(sp)
    16a4:	dfc00215 	stw	ra,8(sp)
    16a8:	10856304 	addi	r2,r2,5516
    16ac:	30800115 	stw	r2,4(r6)
    16b0:	00800034 	movhi	r2,0
    16b4:	10878b04 	addi	r2,r2,7724
    16b8:	11000017 	ldw	r4,0(r2)
    16bc:	2821883a 	mov	r16,r5
    16c0:	01c00044 	movi	r7,1
    16c4:	300b883a 	mov	r5,r6
    16c8:	d80d883a 	mov	r6,sp
    16cc:	dc000005 	stb	r16,0(sp)
    16d0:	000158c0 	call	158c <__sfvwrite_small_dev>
    16d4:	00ffffc4 	movi	r3,-1
    16d8:	10c00126 	beq	r2,r3,16e0 <_putc_r+0x48>
    16dc:	8005883a 	mov	r2,r16
    16e0:	dfc00217 	ldw	ra,8(sp)
    16e4:	dc000117 	ldw	r16,4(sp)
    16e8:	dec00304 	addi	sp,sp,12
    16ec:	f800283a 	ret

000016f0 <_write_r>:
    16f0:	defffd04 	addi	sp,sp,-12
    16f4:	dc000015 	stw	r16,0(sp)
    16f8:	04000034 	movhi	r16,0
    16fc:	dc400115 	stw	r17,4(sp)
    1700:	8407d004 	addi	r16,r16,8000
    1704:	2023883a 	mov	r17,r4
    1708:	2809883a 	mov	r4,r5
    170c:	300b883a 	mov	r5,r6
    1710:	380d883a 	mov	r6,r7
    1714:	dfc00215 	stw	ra,8(sp)
    1718:	80000015 	stw	zero,0(r16)
    171c:	0001b240 	call	1b24 <write>
    1720:	00ffffc4 	movi	r3,-1
    1724:	10c0031e 	bne	r2,r3,1734 <_write_r+0x44>
    1728:	80c00017 	ldw	r3,0(r16)
    172c:	18000126 	beq	r3,zero,1734 <_write_r+0x44>
    1730:	88c00015 	stw	r3,0(r17)
    1734:	dfc00217 	ldw	ra,8(sp)
    1738:	dc400117 	ldw	r17,4(sp)
    173c:	dc000017 	ldw	r16,0(sp)
    1740:	dec00304 	addi	sp,sp,12
    1744:	f800283a 	ret

00001748 <__divsi3>:
    1748:	20001b16 	blt	r4,zero,17b8 <__divsi3+0x70>
    174c:	000f883a 	mov	r7,zero
    1750:	28001616 	blt	r5,zero,17ac <__divsi3+0x64>
    1754:	200d883a 	mov	r6,r4
    1758:	29001a2e 	bgeu	r5,r4,17c4 <__divsi3+0x7c>
    175c:	00800804 	movi	r2,32
    1760:	00c00044 	movi	r3,1
    1764:	00000106 	br	176c <__divsi3+0x24>
    1768:	10000d26 	beq	r2,zero,17a0 <__divsi3+0x58>
    176c:	294b883a 	add	r5,r5,r5
    1770:	10bfffc4 	addi	r2,r2,-1
    1774:	18c7883a 	add	r3,r3,r3
    1778:	293ffb36 	bltu	r5,r4,1768 <__alt_data_end+0xfffc2f68>
    177c:	0005883a 	mov	r2,zero
    1780:	18000726 	beq	r3,zero,17a0 <__divsi3+0x58>
    1784:	0005883a 	mov	r2,zero
    1788:	31400236 	bltu	r6,r5,1794 <__divsi3+0x4c>
    178c:	314dc83a 	sub	r6,r6,r5
    1790:	10c4b03a 	or	r2,r2,r3
    1794:	1806d07a 	srli	r3,r3,1
    1798:	280ad07a 	srli	r5,r5,1
    179c:	183ffa1e 	bne	r3,zero,1788 <__alt_data_end+0xfffc2f88>
    17a0:	38000126 	beq	r7,zero,17a8 <__divsi3+0x60>
    17a4:	0085c83a 	sub	r2,zero,r2
    17a8:	f800283a 	ret
    17ac:	014bc83a 	sub	r5,zero,r5
    17b0:	39c0005c 	xori	r7,r7,1
    17b4:	003fe706 	br	1754 <__alt_data_end+0xfffc2f54>
    17b8:	0109c83a 	sub	r4,zero,r4
    17bc:	01c00044 	movi	r7,1
    17c0:	003fe306 	br	1750 <__alt_data_end+0xfffc2f50>
    17c4:	00c00044 	movi	r3,1
    17c8:	003fee06 	br	1784 <__alt_data_end+0xfffc2f84>

000017cc <__modsi3>:
    17cc:	20001716 	blt	r4,zero,182c <__modsi3+0x60>
    17d0:	000f883a 	mov	r7,zero
    17d4:	2005883a 	mov	r2,r4
    17d8:	28001216 	blt	r5,zero,1824 <__modsi3+0x58>
    17dc:	2900162e 	bgeu	r5,r4,1838 <__modsi3+0x6c>
    17e0:	01800804 	movi	r6,32
    17e4:	00c00044 	movi	r3,1
    17e8:	00000106 	br	17f0 <__modsi3+0x24>
    17ec:	30000a26 	beq	r6,zero,1818 <__modsi3+0x4c>
    17f0:	294b883a 	add	r5,r5,r5
    17f4:	31bfffc4 	addi	r6,r6,-1
    17f8:	18c7883a 	add	r3,r3,r3
    17fc:	293ffb36 	bltu	r5,r4,17ec <__alt_data_end+0xfffc2fec>
    1800:	18000526 	beq	r3,zero,1818 <__modsi3+0x4c>
    1804:	1806d07a 	srli	r3,r3,1
    1808:	11400136 	bltu	r2,r5,1810 <__modsi3+0x44>
    180c:	1145c83a 	sub	r2,r2,r5
    1810:	280ad07a 	srli	r5,r5,1
    1814:	183ffb1e 	bne	r3,zero,1804 <__alt_data_end+0xfffc3004>
    1818:	38000126 	beq	r7,zero,1820 <__modsi3+0x54>
    181c:	0085c83a 	sub	r2,zero,r2
    1820:	f800283a 	ret
    1824:	014bc83a 	sub	r5,zero,r5
    1828:	003fec06 	br	17dc <__alt_data_end+0xfffc2fdc>
    182c:	0109c83a 	sub	r4,zero,r4
    1830:	01c00044 	movi	r7,1
    1834:	003fe706 	br	17d4 <__alt_data_end+0xfffc2fd4>
    1838:	00c00044 	movi	r3,1
    183c:	003ff106 	br	1804 <__alt_data_end+0xfffc3004>

00001840 <__udivsi3>:
    1840:	200d883a 	mov	r6,r4
    1844:	2900152e 	bgeu	r5,r4,189c <__udivsi3+0x5c>
    1848:	28001416 	blt	r5,zero,189c <__udivsi3+0x5c>
    184c:	00800804 	movi	r2,32
    1850:	00c00044 	movi	r3,1
    1854:	00000206 	br	1860 <__udivsi3+0x20>
    1858:	10000e26 	beq	r2,zero,1894 <__udivsi3+0x54>
    185c:	28000516 	blt	r5,zero,1874 <__udivsi3+0x34>
    1860:	294b883a 	add	r5,r5,r5
    1864:	10bfffc4 	addi	r2,r2,-1
    1868:	18c7883a 	add	r3,r3,r3
    186c:	293ffa36 	bltu	r5,r4,1858 <__alt_data_end+0xfffc3058>
    1870:	18000826 	beq	r3,zero,1894 <__udivsi3+0x54>
    1874:	0005883a 	mov	r2,zero
    1878:	31400236 	bltu	r6,r5,1884 <__udivsi3+0x44>
    187c:	314dc83a 	sub	r6,r6,r5
    1880:	10c4b03a 	or	r2,r2,r3
    1884:	1806d07a 	srli	r3,r3,1
    1888:	280ad07a 	srli	r5,r5,1
    188c:	183ffa1e 	bne	r3,zero,1878 <__alt_data_end+0xfffc3078>
    1890:	f800283a 	ret
    1894:	0005883a 	mov	r2,zero
    1898:	f800283a 	ret
    189c:	00c00044 	movi	r3,1
    18a0:	003ff406 	br	1874 <__alt_data_end+0xfffc3074>

000018a4 <__umodsi3>:
    18a4:	2005883a 	mov	r2,r4
    18a8:	2900122e 	bgeu	r5,r4,18f4 <__umodsi3+0x50>
    18ac:	28001116 	blt	r5,zero,18f4 <__umodsi3+0x50>
    18b0:	01800804 	movi	r6,32
    18b4:	00c00044 	movi	r3,1
    18b8:	00000206 	br	18c4 <__umodsi3+0x20>
    18bc:	30000c26 	beq	r6,zero,18f0 <__umodsi3+0x4c>
    18c0:	28000516 	blt	r5,zero,18d8 <__umodsi3+0x34>
    18c4:	294b883a 	add	r5,r5,r5
    18c8:	31bfffc4 	addi	r6,r6,-1
    18cc:	18c7883a 	add	r3,r3,r3
    18d0:	293ffa36 	bltu	r5,r4,18bc <__alt_data_end+0xfffc30bc>
    18d4:	18000626 	beq	r3,zero,18f0 <__umodsi3+0x4c>
    18d8:	1806d07a 	srli	r3,r3,1
    18dc:	11400136 	bltu	r2,r5,18e4 <__umodsi3+0x40>
    18e0:	1145c83a 	sub	r2,r2,r5
    18e4:	280ad07a 	srli	r5,r5,1
    18e8:	183ffb1e 	bne	r3,zero,18d8 <__alt_data_end+0xfffc30d8>
    18ec:	f800283a 	ret
    18f0:	f800283a 	ret
    18f4:	00c00044 	movi	r3,1
    18f8:	003ff706 	br	18d8 <__alt_data_end+0xfffc30d8>

000018fc <__mulsi3>:
    18fc:	0005883a 	mov	r2,zero
    1900:	20000726 	beq	r4,zero,1920 <__mulsi3+0x24>
    1904:	20c0004c 	andi	r3,r4,1
    1908:	2008d07a 	srli	r4,r4,1
    190c:	18000126 	beq	r3,zero,1914 <__mulsi3+0x18>
    1910:	1145883a 	add	r2,r2,r5
    1914:	294b883a 	add	r5,r5,r5
    1918:	203ffa1e 	bne	r4,zero,1904 <__alt_data_end+0xfffc3104>
    191c:	f800283a 	ret
    1920:	f800283a 	ret

00001924 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    1924:	00019b01 	jmpi	19b0 <alt_iic_isr_register>

00001928 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1928:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    192c:	00bfff84 	movi	r2,-2
    1930:	2084703a 	and	r2,r4,r2
    1934:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    1938:	00c00044 	movi	r3,1
    193c:	d0a04717 	ldw	r2,-32484(gp)
    1940:	194a983a 	sll	r5,r3,r5
    1944:	288ab03a 	or	r5,r5,r2
    1948:	d1604715 	stw	r5,-32484(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    194c:	d0a04717 	ldw	r2,-32484(gp)
    1950:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1954:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    1958:	0005883a 	mov	r2,zero
    195c:	f800283a 	ret

00001960 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1960:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1964:	00bfff84 	movi	r2,-2
    1968:	2084703a 	and	r2,r4,r2
    196c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    1970:	00ffff84 	movi	r3,-2
    1974:	d0a04717 	ldw	r2,-32484(gp)
    1978:	194a183a 	rol	r5,r3,r5
    197c:	288a703a 	and	r5,r5,r2
    1980:	d1604715 	stw	r5,-32484(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    1984:	d0a04717 	ldw	r2,-32484(gp)
    1988:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    198c:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    1990:	0005883a 	mov	r2,zero
    1994:	f800283a 	ret

00001998 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    1998:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
    199c:	00800044 	movi	r2,1
    19a0:	1144983a 	sll	r2,r2,r5
    19a4:	10c4703a 	and	r2,r2,r3
}
    19a8:	1004c03a 	cmpne	r2,r2,zero
    19ac:	f800283a 	ret

000019b0 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    19b0:	00c007c4 	movi	r3,31
    19b4:	19401616 	blt	r3,r5,1a10 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    19b8:	defffe04 	addi	sp,sp,-8
    19bc:	dfc00115 	stw	ra,4(sp)
    19c0:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    19c4:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    19c8:	00ffff84 	movi	r3,-2
    19cc:	80c6703a 	and	r3,r16,r3
    19d0:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    19d4:	280490fa 	slli	r2,r5,3
    19d8:	00c00034 	movhi	r3,0
    19dc:	18c7d604 	addi	r3,r3,8024
    19e0:	1885883a 	add	r2,r3,r2
    19e4:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
    19e8:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    19ec:	30000226 	beq	r6,zero,19f8 <alt_iic_isr_register+0x48>
    19f0:	00019280 	call	1928 <alt_ic_irq_enable>
    19f4:	00000106 	br	19fc <alt_iic_isr_register+0x4c>
    19f8:	00019600 	call	1960 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    19fc:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    1a00:	dfc00117 	ldw	ra,4(sp)
    1a04:	dc000017 	ldw	r16,0(sp)
    1a08:	dec00204 	addi	sp,sp,8
    1a0c:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
    1a10:	00bffa84 	movi	r2,-22
    1a14:	f800283a 	ret

00001a18 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    1a18:	deffff04 	addi	sp,sp,-4
    1a1c:	01000034 	movhi	r4,0
    1a20:	01400034 	movhi	r5,0
    1a24:	dfc00015 	stw	ra,0(sp)
    1a28:	21075204 	addi	r4,r4,7496
    1a2c:	29479004 	addi	r5,r5,7744

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1a30:	2140061e 	bne	r4,r5,1a4c <alt_load+0x34>
    1a34:	01000034 	movhi	r4,0
    1a38:	01400034 	movhi	r5,0
    1a3c:	21000804 	addi	r4,r4,32
    1a40:	29400804 	addi	r5,r5,32
    1a44:	2140121e 	bne	r4,r5,1a90 <alt_load+0x78>
    1a48:	00000b06 	br	1a78 <alt_load+0x60>
    1a4c:	00c00034 	movhi	r3,0
    1a50:	18c79004 	addi	r3,r3,7744
    1a54:	1907c83a 	sub	r3,r3,r4
    1a58:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1a5c:	10fff526 	beq	r2,r3,1a34 <__alt_data_end+0xfffc3234>
    {
      *to++ = *from++;
    1a60:	114f883a 	add	r7,r2,r5
    1a64:	39c00017 	ldw	r7,0(r7)
    1a68:	110d883a 	add	r6,r2,r4
    1a6c:	10800104 	addi	r2,r2,4
    1a70:	31c00015 	stw	r7,0(r6)
    1a74:	003ff906 	br	1a5c <__alt_data_end+0xfffc325c>
    1a78:	01000034 	movhi	r4,0
    1a7c:	01400034 	movhi	r5,0
    1a80:	21071804 	addi	r4,r4,7264
    1a84:	29471804 	addi	r5,r5,7264

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1a88:	2140101e 	bne	r4,r5,1acc <alt_load+0xb4>
    1a8c:	00000b06 	br	1abc <alt_load+0xa4>
    1a90:	00c00034 	movhi	r3,0
    1a94:	18c06004 	addi	r3,r3,384
    1a98:	1907c83a 	sub	r3,r3,r4
    1a9c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1aa0:	10fff526 	beq	r2,r3,1a78 <__alt_data_end+0xfffc3278>
    {
      *to++ = *from++;
    1aa4:	114f883a 	add	r7,r2,r5
    1aa8:	39c00017 	ldw	r7,0(r7)
    1aac:	110d883a 	add	r6,r2,r4
    1ab0:	10800104 	addi	r2,r2,4
    1ab4:	31c00015 	stw	r7,0(r6)
    1ab8:	003ff906 	br	1aa0 <__alt_data_end+0xfffc32a0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    1abc:	0001bdc0 	call	1bdc <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    1ac0:	dfc00017 	ldw	ra,0(sp)
    1ac4:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    1ac8:	0001be01 	jmpi	1be0 <alt_icache_flush_all>
    1acc:	00c00034 	movhi	r3,0
    1ad0:	18c75204 	addi	r3,r3,7496
    1ad4:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1ad8:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1adc:	18bff726 	beq	r3,r2,1abc <__alt_data_end+0xfffc32bc>
    {
      *to++ = *from++;
    1ae0:	114f883a 	add	r7,r2,r5
    1ae4:	39c00017 	ldw	r7,0(r7)
    1ae8:	110d883a 	add	r6,r2,r4
    1aec:	10800104 	addi	r2,r2,4
    1af0:	31c00015 	stw	r7,0(r6)
    1af4:	003ff906 	br	1adc <__alt_data_end+0xfffc32dc>

00001af8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1af8:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1afc:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1b00:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1b04:	0001b840 	call	1b84 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    1b08:	0001ba40 	call	1ba4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1b0c:	d1a04817 	ldw	r6,-32480(gp)
    1b10:	d1604917 	ldw	r5,-32476(gp)
    1b14:	d1204a17 	ldw	r4,-32472(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    1b18:	dfc00017 	ldw	ra,0(sp)
    1b1c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1b20:	000094c1 	jmpi	94c <main>

00001b24 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    1b24:	00800044 	movi	r2,1
    1b28:	20800226 	beq	r4,r2,1b34 <write+0x10>
    1b2c:	00800084 	movi	r2,2
    1b30:	2080041e 	bne	r4,r2,1b44 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    1b34:	01000034 	movhi	r4,0
    1b38:	000f883a 	mov	r7,zero
    1b3c:	21078e04 	addi	r4,r4,7736
    1b40:	0001ba81 	jmpi	1ba8 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    1b44:	d0a00517 	ldw	r2,-32748(gp)
    1b48:	10000926 	beq	r2,zero,1b70 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    1b4c:	deffff04 	addi	sp,sp,-4
    1b50:	dfc00015 	stw	ra,0(sp)
    1b54:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    1b58:	00c01444 	movi	r3,81
    1b5c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    1b60:	00bfffc4 	movi	r2,-1
    1b64:	dfc00017 	ldw	ra,0(sp)
    1b68:	dec00104 	addi	sp,sp,4
    1b6c:	f800283a 	ret
    1b70:	d0a04604 	addi	r2,gp,-32488
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    1b74:	00c01444 	movi	r3,81
    1b78:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    1b7c:	00bfffc4 	movi	r2,-1
    1b80:	f800283a 	ret

00001b84 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    1b84:	deffff04 	addi	sp,sp,-4
    1b88:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    1b8c:	0001c580 	call	1c58 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    1b90:	00800044 	movi	r2,1
    1b94:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    1b98:	dfc00017 	ldw	ra,0(sp)
    1b9c:	dec00104 	addi	sp,sp,4
    1ba0:	f800283a 	ret

00001ba4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    1ba4:	f800283a 	ret

00001ba8 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    1ba8:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1bac:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    1bb0:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1bb4:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    1bb8:	2980072e 	bgeu	r5,r6,1bd8 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1bbc:	38c00037 	ldwio	r3,0(r7)
    1bc0:	18ffffec 	andhi	r3,r3,65535
    1bc4:	183ffc26 	beq	r3,zero,1bb8 <__alt_data_end+0xfffc33b8>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    1bc8:	28c00007 	ldb	r3,0(r5)
    1bcc:	20c00035 	stwio	r3,0(r4)
    1bd0:	29400044 	addi	r5,r5,1
    1bd4:	003ff806 	br	1bb8 <__alt_data_end+0xfffc33b8>

  return count;
}
    1bd8:	f800283a 	ret

00001bdc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1bdc:	f800283a 	ret

00001be0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    1be0:	f800283a 	ret

00001be4 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    1be4:	213ffe84 	addi	r4,r4,-6
    1be8:	008003c4 	movi	r2,15
    1bec:	11001636 	bltu	r2,r4,1c48 <alt_exception_cause_generated_bad_addr+0x64>
    1bf0:	200890ba 	slli	r4,r4,2
    1bf4:	00800034 	movhi	r2,0
    1bf8:	10870204 	addi	r2,r2,7176
    1bfc:	2089883a 	add	r4,r4,r2
    1c00:	20800017 	ldw	r2,0(r4)
    1c04:	1000683a 	jmp	r2
    1c08:	00001c50 	cmplti	zero,zero,113
    1c0c:	00001c50 	cmplti	zero,zero,113
    1c10:	00001c48 	cmpgei	zero,zero,113
    1c14:	00001c48 	cmpgei	zero,zero,113
    1c18:	00001c48 	cmpgei	zero,zero,113
    1c1c:	00001c50 	cmplti	zero,zero,113
    1c20:	00001c48 	cmpgei	zero,zero,113
    1c24:	00001c48 	cmpgei	zero,zero,113
    1c28:	00001c50 	cmplti	zero,zero,113
    1c2c:	00001c50 	cmplti	zero,zero,113
    1c30:	00001c48 	cmpgei	zero,zero,113
    1c34:	00001c50 	cmplti	zero,zero,113
    1c38:	00001c48 	cmpgei	zero,zero,113
    1c3c:	00001c48 	cmpgei	zero,zero,113
    1c40:	00001c48 	cmpgei	zero,zero,113
    1c44:	00001c50 	cmplti	zero,zero,113
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    1c48:	0005883a 	mov	r2,zero
    1c4c:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    1c50:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
    1c54:	f800283a 	ret

00001c58 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    1c58:	000170fa 	wrctl	ienable,zero
    1c5c:	f800283a 	ret
